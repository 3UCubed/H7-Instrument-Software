
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b898  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0801bb38  0801bb38  0002bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bdf8  0801bdf8  0002bdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801be00  0801be00  0002be00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801be04  0801be04  0002be04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000dc  24000000  0801be08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006f80  240000e0  0801bee4  000300e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24007060  0801bee4  00037060  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00043932  00000000  00000000  0003010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000081a7  00000000  00000000  00073a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cd8  00000000  00000000  0007bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002998  00000000  00000000  0007e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046de6  00000000  00000000  00081258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000458e1  00000000  00000000  000c803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00197621  00000000  00000000  0010d91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a4f40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000badc  00000000  00000000  002a4f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bb20 	.word	0x0801bb20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	0801bb20 	.word	0x0801bb20

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f006 fc2d 	bl	8006ec8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa10 	bl	8003a98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f007 fd48 	bl	8008118 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa03 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 fe8b 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9ea 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 fe7d 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f9dc 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 fe6f 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f9ce 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 fe61 	bl	80073d0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f9c0 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 fe52 	bl	80073d0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f9b1 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 fe43 	bl	80073d0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f9a2 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 fe34 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f993 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 fe25 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f984 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 fe16 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f975 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 fe07 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f966 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 fdf8 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f957 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	240000fc 	.word	0x240000fc
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f006 fb15 	bl	8006ec8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f8f8 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 fd80 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f8df 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 fd72 	bl	80073d0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f8d1 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 fd64 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f8c3 	bl	8003a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f006 fd56 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f8b5 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000160 	.word	0x24000160
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00b fc76 	bl	800c2ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00b fc6a 	bl	800c2ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00b fc5e 	bl	800c2ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f008 f913 	bl	8008ca0 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f80a 	bl	8003a98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 ffce 	bl	8006a80 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 ffc8 	bl	8006a80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f008 f8b3 	bl	8008ca0 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ffaa 	bl	8003a98 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001c4 	.word	0x240001c4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400023c 	.word	0x2400023c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f01a ffbf 	bl	801bb10 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f007 fc7b 	bl	8008494 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff78 	bl	8003a98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 fe96 	bl	80088f4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff63 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002b4 	.word	0x240002b4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00b fb49 	bl	800c2ec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 fffe 	bl	8008ca0 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fef5 	bl	8003a98 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f007 fbc0 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f007 fbd7 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002c8 	.word	0x240002c8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f007 fb97 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f007 fbae 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f007 fb8f 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f007 fba6 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f007 fb87 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f007 fb9e 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f007 fb7f 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f007 fb96 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f007 fb77 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f007 fb8e 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f007 fb6f 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f007 fb86 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f007 fb67 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f007 fb7e 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f007 fb5f 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f007 fb76 	bl	8008478 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f01a fea0 	bl	801bb10 <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b f89c 	bl	800bfa8 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00b f841 	bl	800bfa8 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f00a fcc8 	bl	800b94c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000340 	.word	0x24000340
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1e      	cmp	r3, #30
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f00a fc1c 	bl	800b94c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a feee 	bl	800bfa8 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f00a fe8b 	bl	800bfa8 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f00a fb12 	bl	800b94c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f00a fdb6 	bl	800bfa8 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1e      	cmp	r3, #30
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f00a f9fb 	bl	800b94c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f00a fcce 	bl	800bfa8 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000340 	.word	0x24000340
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f01a f98c 	bl	801bb10 <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f00a fba9 	bl	800bfa8 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f00a f831 	bl	800b94c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f00a fb0b 	bl	800bfa8 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f01a f827 	bl	801bb10 <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f01a f81e 	bl	801bb10 <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 fefd 	bl	800b94c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 feea 	bl	800b94c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f019 ff69 	bl	801bb10 <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f019 ff62 	bl	801bb10 <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 fe43 	bl	800b94c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1e      	cmp	r3, #30
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f00a f821 	bl	800bdfc <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a f8c9 	bl	800bfa8 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f009 fd4f 	bl	800b94c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000340 	.word	0x24000340
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
 *        Initiates an emergency shutdown, manages Flash ECC-related errors, and sends error packets.
 *
 * @param error The error structure containing the error category and details.
 */
void handle_error(ERROR_STRUCT error)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	463b      	mov	r3, r7
 8001f38:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef ERROR_HANDLING_ENABLED
	emergency_shutdown();
 8001f3c:	f000 f9e0 	bl	8002300 <emergency_shutdown>

	// If error was caused by flash ECC...
	if ((error.detail == ED_single_bit_error_flash) || (error.detail == ED_double_bit_error_flash))
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d002      	beq.n	8001f4c <handle_error+0x1c>
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	2b19      	cmp	r3, #25
 8001f4a:	d11f      	bne.n	8001f8c <handle_error+0x5c>
	{
		// Erase user flash, reinit EE, reset error counters, increment error counter, set previous error
		local_cpy[error.category]++;
 8001f4c:	783b      	ldrb	r3, [r7, #0]
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <handle_error+0x98>)
 8001f50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f54:	3201      	adds	r2, #1
 8001f56:	b291      	uxth	r1, r2
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <handle_error+0x98>)
 8001f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		local_cpy[error.detail]++;
 8001f5e:	787b      	ldrb	r3, [r7, #1]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <handle_error+0x98>)
 8001f62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f66:	3201      	adds	r2, #1
 8001f68:	b291      	uxth	r1, r2
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <handle_error+0x98>)
 8001f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flash_mass_erase();
 8001f70:	f000 f830 	bl	8001fd4 <flash_mass_erase>
		EE_Init();
 8001f74:	f7fe ff10 	bl	8000d98 <EE_Init>
		reset_error_counters();
 8001f78:	f000 f8c8 	bl	800210c <reset_error_counters>
		update_error_counter();
 8001f7c:	f000 f8a0 	bl	80020c0 <update_error_counter>
		set_previous_error(error);
 8001f80:	463b      	mov	r3, r7
 8001f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f86:	f000 f8e1 	bl	800214c <set_previous_error>
 8001f8a:	e009      	b.n	8001fa0 <handle_error+0x70>
	}
	// Otherwise, just increment error counter and set previous error
	else
	{
		increment_error_counter(error);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f92:	f000 f875 	bl	8002080 <increment_error_counter>
		set_previous_error(error);
 8001f96:	463b      	mov	r3, r7
 8001f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9c:	f000 f8d6 	bl	800214c <set_previous_error>
	}

	// Wait until all power supply rails are off, then send current error packet + junk data
	while(!IDLING){};
 8001fa0:	bf00      	nop
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <handle_error+0x9c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0fa      	beq.n	8001fa2 <handle_error+0x72>
	send_current_error_packet(error);
 8001fac:	463b      	mov	r3, r7
 8001fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fb2:	f000 f93f 	bl	8002234 <send_current_error_packet>
	send_junk_packet();
 8001fb6:	f000 f979 	bl	80022ac <send_junk_packet>

	HAL_TIM_Base_Start_IT(&htim3);
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <handle_error+0xa0>)
 8001fbc:	f011 fefc 	bl	8013db8 <HAL_TIM_Base_Start_IT>
#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	24000344 	.word	0x24000344
 8001fcc:	240000c4 	.word	0x240000c4
 8001fd0:	24002478 	.word	0x24002478

08001fd4 <flash_mass_erase>:
/**
 * @brief Performs a mass erase of Flash memory.
 *        Unlocks Flash and erases all sectors in Bank 2, handling errors if the erase fails.
 */
void flash_mass_erase()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fda:	f009 ff0f 	bl	800bdfc <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <flash_mass_erase+0x48>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <flash_mass_erase+0x48>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks = FLASH_BANK_2;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <flash_mass_erase+0x48>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_0;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <flash_mass_erase+0x48>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = FLASH_SECTOR_TOTAL;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <flash_mass_erase+0x48>)
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <flash_mass_erase+0x48>)
 8002006:	f009 ffcf 	bl	800bfa8 <HAL_FLASHEx_Erase>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <flash_mass_erase+0x40>
	{
		Error_Handler();
 8002010:	f001 fd42 	bl	8003a98 <Error_Handler>
	}
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	24000380 	.word	0x24000380

08002020 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002026:	f009 fee9 	bl	800bdfc <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK)
 800202a:	f7fe feb5 	bl	8000d98 <EE_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <error_counter_init+0x18>
	{
		Error_Handler();
 8002034:	f001 fd30 	bl	8003a98 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e013      	b.n	8002066 <error_counter_init+0x46>
	{
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK)
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <error_counter_init+0x58>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <error_counter_init+0x5c>)
 800204c:	440b      	add	r3, r1
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fb59 	bl	8001708 <EE_ReadVariable>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <error_counter_init+0x40>
		{
			Error_Handler();
 800205c:	f001 fd1c 	bl	8003a98 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3301      	adds	r3, #1
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b1c      	cmp	r3, #28
 800206a:	dde8      	ble.n	800203e <error_counter_init+0x1e>
		}
	}
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24000000 	.word	0x24000000
 800207c:	24000344 	.word	0x24000344

08002080 <increment_error_counter>:
 *        Updates both the category and detail counters and saves the updated values.
 *
 * @param error The error structure containing the error category and details.
 */
void increment_error_counter(ERROR_STRUCT error)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	463b      	mov	r3, r7
 8002088:	e883 0003 	stmia.w	r3, {r0, r1}
	local_cpy[error.category]++;
 800208c:	783b      	ldrb	r3, [r7, #0]
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <increment_error_counter+0x3c>)
 8002090:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002094:	3201      	adds	r2, #1
 8002096:	b291      	uxth	r1, r2
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <increment_error_counter+0x3c>)
 800209a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800209e:	787b      	ldrb	r3, [r7, #1]
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <increment_error_counter+0x3c>)
 80020a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020a6:	3201      	adds	r2, #1
 80020a8:	b291      	uxth	r1, r2
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <increment_error_counter+0x3c>)
 80020ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 80020b0:	f000 f806 	bl	80020c0 <update_error_counter>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000344 	.word	0x24000344

080020c0 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter()
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e013      	b.n	80020f4 <update_error_counter+0x34>
	{
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK)
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <update_error_counter+0x44>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <update_error_counter+0x48>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7ff fb5a 	bl	8001798 <EE_WriteVariable>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <update_error_counter+0x2e>
		{
			Error_Handler();
 80020ea:	f001 fcd5 	bl	8003a98 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b1c      	cmp	r3, #28
 80020f8:	dde8      	ble.n	80020cc <update_error_counter+0xc>
		}
	}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	24000000 	.word	0x24000000
 8002108:	24000344 	.word	0x24000344

0800210c <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	e00f      	b.n	8002138 <reset_error_counters+0x2c>
	{
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK)
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <reset_error_counters+0x3c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb38 	bl	8001798 <EE_WriteVariable>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <reset_error_counters+0x26>
		{
			Error_Handler();
 800212e:	f001 fcb3 	bl	8003a98 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b1c      	cmp	r3, #28
 800213c:	ddec      	ble.n	8002118 <reset_error_counters+0xc>
		}
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	24000000 	.word	0x24000000

0800214c <set_previous_error>:
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	463b      	mov	r3, r7
 8002154:	e883 0003 	stmia.w	r3, {r0, r1}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK)
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <set_previous_error+0x48>)
 800215a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800215c:	783a      	ldrb	r2, [r7, #0]
 800215e:	b292      	uxth	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fb18 	bl	8001798 <EE_WriteVariable>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <set_previous_error+0x26>
	{
		Error_Handler();
 800216e:	f001 fc93 	bl	8003a98 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK)
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <set_previous_error+0x48>)
 8002174:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002176:	787a      	ldrb	r2, [r7, #1]
 8002178:	b292      	uxth	r2, r2
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb0b 	bl	8001798 <EE_WriteVariable>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <set_previous_error+0x40>
	{
		Error_Handler();
 8002188:	f001 fc86 	bl	8003a98 <Error_Handler>
	}
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	24000000 	.word	0x24000000

08002198 <get_previous_error>:
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK)
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <get_previous_error+0x60>)
 80021a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80021a4:	f107 020e 	add.w	r2, r7, #14
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff faac 	bl	8001708 <EE_ReadVariable>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <get_previous_error+0x22>
	{
		Error_Handler();
 80021b6:	f001 fc6f 	bl	8003a98 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK)
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <get_previous_error+0x60>)
 80021bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80021be:	f107 020c 	add.w	r2, r7, #12
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa9f 	bl	8001708 <EE_ReadVariable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <get_previous_error+0x3c>
	{
		Error_Handler();
 80021d0:	f001 fc62 	bl	8003a98 <Error_Handler>
	}

	prev_error.category = category;
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	743b      	strb	r3, [r7, #16]
	prev_error.detail = detail;
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	747b      	strb	r3, [r7, #17]

	return prev_error;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	cb03      	ldmia	r3!, {r0, r1}
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	6051      	str	r1, [r2, #4]
}
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000000 	.word	0x24000000

080021fc <send_previous_error_packet>:
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet()
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ffc6 	bl	8002198 <get_previous_error>

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800220c:	23aa      	movs	r3, #170	; 0xaa
 800220e:	713b      	strb	r3, [r7, #4]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 8002210:	23aa      	movs	r3, #170	; 0xaa
 8002212:	717b      	strb	r3, [r7, #5]
	buffer[2] = prev_error.category;
 8002214:	7a3b      	ldrb	r3, [r7, #8]
 8002216:	71bb      	strb	r3, [r7, #6]
	buffer[3] = prev_error.detail;
 8002218:	7a7b      	ldrb	r3, [r7, #9]
 800221a:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, UART_TIMEOUT_MS);
 800221c:	1d39      	adds	r1, r7, #4
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	2204      	movs	r2, #4
 8002222:	4803      	ldr	r0, [pc, #12]	; (8002230 <send_previous_error_packet+0x34>)
 8002224:	f013 f9ca 	bl	80155bc <HAL_UART_Transmit>
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	240024c4 	.word	0x240024c4

08002234 <send_current_error_packet>:
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	463b      	mov	r3, r7
 800223c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	// If the error isn't a power supply rail, set the out of bounds values to 0
	if (error.category != EC_power_supply_rail)
 8002240:	783b      	ldrb	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <send_current_error_packet+0x1e>
	{
		error.OOB_1 = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	807b      	strh	r3, [r7, #2]
		error.OOB_2 = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	80bb      	strh	r3, [r7, #4]
		error.OOB_3 = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	80fb      	strh	r3, [r7, #6]
	}

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 8002252:	23bb      	movs	r3, #187	; 0xbb
 8002254:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002256:	23bb      	movs	r3, #187	; 0xbb
 8002258:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 800225a:	783b      	ldrb	r3, [r7, #0]
 800225c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 800225e:	787b      	ldrb	r3, [r7, #1]
 8002260:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ((error.OOB_1 & 0xFF00) >> 8);
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	b29b      	uxth	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	743b      	strb	r3, [r7, #16]
	buffer[5] = (error.OOB_1 & 0xFF);
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((error.OOB_2 & 0xFF00) >> 8);
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (error.OOB_2 & 0xFF);
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	74fb      	strb	r3, [r7, #19]
	buffer[8] = ((error.OOB_3 & 0xFF00) >> 8);
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	753b      	strb	r3, [r7, #20]
	buffer[9] = (error.OOB_3 & 0xFF);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, CURRENT_ERROR_PACKET_SIZE, UART_TIMEOUT_MS);
 8002292:	f107 010c 	add.w	r1, r7, #12
 8002296:	2364      	movs	r3, #100	; 0x64
 8002298:	220a      	movs	r2, #10
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <send_current_error_packet+0x74>)
 800229c:	f013 f98e 	bl	80155bc <HAL_UART_Transmit>
}
 80022a0:	bf00      	nop
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	240024c4 	.word	0x240024c4

080022ac <send_junk_packet>:
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80022b2:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80022ba:	e00d      	b.n	80022d8 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 80022bc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022c0:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80022c4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022c8:	4413      	add	r3, r2
 80022ca:	22ce      	movs	r2, #206	; 0xce
 80022cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80022ce:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022d2:	3301      	adds	r3, #1
 80022d4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80022d8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	dbec      	blt.n	80022bc <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, UART_TIMEOUT_MS);
 80022e2:	1d39      	adds	r1, r7, #4
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <send_junk_packet+0x50>)
 80022ec:	f013 f966 	bl	80155bc <HAL_UART_Transmit>
}
 80022f0:	bf00      	nop
 80022f2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	240024c4 	.word	0x240024c4

08002300 <emergency_shutdown>:
/**
 * @brief Initiates an emergency shutdown of the system.
 *        Disables timers, DAC, rail monitoring, and all power supply voltages, setting the system to idle.
 */
void emergency_shutdown()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
	ERPA_ENABLED = 0;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <emergency_shutdown+0x8c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
	TIM2->CCR4 = 0;
 800230c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002314:	2100      	movs	r1, #0
 8002316:	481e      	ldr	r0, [pc, #120]	; (8002390 <emergency_shutdown+0x90>)
 8002318:	f011 ff20 	bl	801415c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800231c:	210c      	movs	r1, #12
 800231e:	481d      	ldr	r0, [pc, #116]	; (8002394 <emergency_shutdown+0x94>)
 8002320:	f011 ff1c 	bl	801415c <HAL_TIM_OC_Stop_IT>

	HK_ENABLED = 0;
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <emergency_shutdown+0x98>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800232a:	2100      	movs	r1, #0
 800232c:	481b      	ldr	r0, [pc, #108]	; (800239c <emergency_shutdown+0x9c>)
 800232e:	f006 f9eb 	bl	8008708 <HAL_DAC_Stop_DMA>

	// Telling rail monitor which voltages are now disabled
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002332:	2311      	movs	r3, #17
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e008      	b.n	800234a <emergency_shutdown+0x4a>
	{
		set_rail_monitor_enable(i, 0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f004 f8dc 	bl	80064fc <set_rail_monitor_enable>
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b05      	cmp	r3, #5
 800234e:	dcf3      	bgt.n	8002338 <emergency_shutdown+0x38>
	}

	// Disabling all voltages
	for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002350:	2308      	movs	r3, #8
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	e00f      	b.n	8002376 <emergency_shutdown+0x76>
	{
		HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <emergency_shutdown+0xa0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <emergency_shutdown+0xa0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	889b      	ldrh	r3, [r3, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	f00a f986 	bl	800c67c <HAL_GPIO_WritePin>
	for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3b01      	subs	r3, #1
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	daec      	bge.n	8002356 <emergency_shutdown+0x56>
	}
	IDLING = 1;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <emergency_shutdown+0xa4>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24001f55 	.word	0x24001f55
 8002390:	240023e0 	.word	0x240023e0
 8002394:	2400242c 	.word	0x2400242c
 8002398:	24001f54 	.word	0x24001f54
 800239c:	240002b4 	.word	0x240002b4
 80023a0:	0801bd70 	.word	0x0801bd70
 80023a4:	240000c4 	.word	0x240000c4

080023a8 <vApplicationTickHook>:
/**
 * @brief Tick hook function called by each tick interrupt.
 *		  Increments uptime_millis, used in time tagging.
 */
void vApplicationTickHook( void )
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <vApplicationTickHook+0x18>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <vApplicationTickHook+0x18>)
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	24001f58 	.word	0x24001f58

080023c4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80023e0:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <MX_FREERTOS_Init+0xb8>)
 80023e2:	2100      	movs	r1, #0
 80023e4:	482c      	ldr	r0, [pc, #176]	; (8002498 <MX_FREERTOS_Init+0xbc>)
 80023e6:	f015 ff41 	bl	801826c <osThreadNew>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <MX_FREERTOS_Init+0xc0>)
 80023ee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <MX_FREERTOS_Init+0xc4>)
 80023f2:	2100      	movs	r1, #0
 80023f4:	482b      	ldr	r0, [pc, #172]	; (80024a4 <MX_FREERTOS_Init+0xc8>)
 80023f6:	f015 ff39 	bl	801826c <osThreadNew>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <MX_FREERTOS_Init+0xcc>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002400:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <MX_FREERTOS_Init+0xd0>)
 8002402:	2100      	movs	r1, #0
 8002404:	482a      	ldr	r0, [pc, #168]	; (80024b0 <MX_FREERTOS_Init+0xd4>)
 8002406:	f015 ff31 	bl	801826c <osThreadNew>
 800240a:	4603      	mov	r3, r0
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <MX_FREERTOS_Init+0xd8>)
 800240e:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <MX_FREERTOS_Init+0xdc>)
 8002412:	2100      	movs	r1, #0
 8002414:	4829      	ldr	r0, [pc, #164]	; (80024bc <MX_FREERTOS_Init+0xe0>)
 8002416:	f015 ff29 	bl	801826c <osThreadNew>
 800241a:	4603      	mov	r3, r0
 800241c:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <MX_FREERTOS_Init+0xe4>)
 800241e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <MX_FREERTOS_Init+0xe8>)
 8002422:	2100      	movs	r1, #0
 8002424:	4828      	ldr	r0, [pc, #160]	; (80024c8 <MX_FREERTOS_Init+0xec>)
 8002426:	f015 ff21 	bl	801826c <osThreadNew>
 800242a:	4603      	mov	r3, r0
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <MX_FREERTOS_Init+0xf0>)
 800242e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <MX_FREERTOS_Init+0xf4>)
 8002432:	2100      	movs	r1, #0
 8002434:	4827      	ldr	r0, [pc, #156]	; (80024d4 <MX_FREERTOS_Init+0xf8>)
 8002436:	f015 ff19 	bl	801826c <osThreadNew>
 800243a:	4603      	mov	r3, r0
 800243c:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <MX_FREERTOS_Init+0xfc>)
 800243e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <MX_FREERTOS_Init+0x100>)
 8002442:	2100      	movs	r1, #0
 8002444:	4826      	ldr	r0, [pc, #152]	; (80024e0 <MX_FREERTOS_Init+0x104>)
 8002446:	f015 ff11 	bl	801826c <osThreadNew>
 800244a:	4603      	mov	r3, r0
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <MX_FREERTOS_Init+0x108>)
 800244e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <MX_FREERTOS_Init+0x10c>)
 8002452:	2100      	movs	r1, #0
 8002454:	4825      	ldr	r0, [pc, #148]	; (80024ec <MX_FREERTOS_Init+0x110>)
 8002456:	f015 ff09 	bl	801826c <osThreadNew>
 800245a:	4603      	mov	r3, r0
 800245c:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <MX_FREERTOS_Init+0x114>)
 800245e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002460:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <MX_FREERTOS_Init+0x118>)
 8002462:	2100      	movs	r1, #0
 8002464:	4824      	ldr	r0, [pc, #144]	; (80024f8 <MX_FREERTOS_Init+0x11c>)
 8002466:	f015 ff01 	bl	801826c <osThreadNew>
 800246a:	4603      	mov	r3, r0
 800246c:	4a23      	ldr	r2, [pc, #140]	; (80024fc <MX_FREERTOS_Init+0x120>)
 800246e:	6013      	str	r3, [r2, #0]

  /* creation of Sync_task */
  Sync_taskHandle = osThreadNew(Sync_init, NULL, &Sync_task_attributes);
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <MX_FREERTOS_Init+0x124>)
 8002472:	2100      	movs	r1, #0
 8002474:	4823      	ldr	r0, [pc, #140]	; (8002504 <MX_FREERTOS_Init+0x128>)
 8002476:	f015 fef9 	bl	801826c <osThreadNew>
 800247a:	4603      	mov	r3, r0
 800247c:	4a22      	ldr	r2, [pc, #136]	; (8002508 <MX_FREERTOS_Init+0x12c>)
 800247e:	6013      	str	r3, [r2, #0]

  /* creation of Transmit_task */
  Transmit_taskHandle = osThreadNew(Transmit_init, NULL, &Transmit_task_attributes);
 8002480:	4a22      	ldr	r2, [pc, #136]	; (800250c <MX_FREERTOS_Init+0x130>)
 8002482:	2100      	movs	r1, #0
 8002484:	4822      	ldr	r0, [pc, #136]	; (8002510 <MX_FREERTOS_Init+0x134>)
 8002486:	f015 fef1 	bl	801826c <osThreadNew>
 800248a:	4603      	mov	r3, r0
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <MX_FREERTOS_Init+0x138>)
 800248e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0801bbe4 	.word	0x0801bbe4
 8002498:	08002519 	.word	0x08002519
 800249c:	24000394 	.word	0x24000394
 80024a0:	0801bc08 	.word	0x0801bc08
 80024a4:	08002541 	.word	0x08002541
 80024a8:	240005f4 	.word	0x240005f4
 80024ac:	0801bc2c 	.word	0x0801bc2c
 80024b0:	08002569 	.word	0x08002569
 80024b4:	24000854 	.word	0x24000854
 80024b8:	0801bc50 	.word	0x0801bc50
 80024bc:	08002591 	.word	0x08002591
 80024c0:	24000ab4 	.word	0x24000ab4
 80024c4:	0801bc74 	.word	0x0801bc74
 80024c8:	08002609 	.word	0x08002609
 80024cc:	24000d14 	.word	0x24000d14
 80024d0:	0801bc98 	.word	0x0801bc98
 80024d4:	08002681 	.word	0x08002681
 80024d8:	24000f74 	.word	0x24000f74
 80024dc:	0801bcbc 	.word	0x0801bcbc
 80024e0:	080026f5 	.word	0x080026f5
 80024e4:	240011d4 	.word	0x240011d4
 80024e8:	0801bce0 	.word	0x0801bce0
 80024ec:	08002745 	.word	0x08002745
 80024f0:	24001434 	.word	0x24001434
 80024f4:	0801bd04 	.word	0x0801bd04
 80024f8:	08002845 	.word	0x08002845
 80024fc:	24001694 	.word	0x24001694
 8002500:	0801bd28 	.word	0x0801bd28
 8002504:	08002919 	.word	0x08002919
 8002508:	240018f4 	.word	0x240018f4
 800250c:	0801bd4c 	.word	0x0801bd4c
 8002510:	080029a1 	.word	0x080029a1
 8002514:	24001b54 	.word	0x24001b54

08002518 <PMT_init>:
 * This function waits for PMT event flags, creates a PMT packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, PMT_FLAG, osFlagsWaitAny, osWaitForever);
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <PMT_init+0x24>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002528:	2200      	movs	r2, #0
 800252a:	2101      	movs	r1, #1
 800252c:	f016 f862 	bl	80185f4 <osEventFlagsWait>

		create_pmt_packet();
 8002530:	f001 fc8e 	bl	8003e50 <create_pmt_packet>

		osThreadYield();
 8002534:	f015 ff2c 	bl	8018390 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG, osFlagsWaitAny, osWaitForever);
 8002538:	e7f2      	b.n	8002520 <PMT_init+0x8>
 800253a:	bf00      	nop
 800253c:	24001f08 	.word	0x24001f08

08002540 <ERPA_init>:
 * This function waits for ERPA event flags, creates an ERPA packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, ERPA_FLAG, osFlagsWaitAny, osWaitForever);
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <ERPA_init+0x24>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002550:	2200      	movs	r2, #0
 8002552:	2102      	movs	r1, #2
 8002554:	f016 f84e 	bl	80185f4 <osEventFlagsWait>

		create_erpa_packet();
 8002558:	f001 fce0 	bl	8003f1c <create_erpa_packet>

		osThreadYield();
 800255c:	f015 ff18 	bl	8018390 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG, osFlagsWaitAny, osWaitForever);
 8002560:	e7f2      	b.n	8002548 <ERPA_init+0x8>
 8002562:	bf00      	nop
 8002564:	24001f08 	.word	0x24001f08

08002568 <HK_init>:
 * This function waits for HK event flags, creates an HK packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, HK_FLAG, osFlagsWaitAny, osWaitForever);
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HK_init+0x24>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002578:	2200      	movs	r2, #0
 800257a:	2104      	movs	r1, #4
 800257c:	f016 f83a 	bl	80185f4 <osEventFlagsWait>

		create_hk_packet();
 8002580:	f001 fd54 	bl	800402c <create_hk_packet>

		osThreadYield();
 8002584:	f015 ff04 	bl	8018390 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG, osFlagsWaitAny, osWaitForever);
 8002588:	e7f2      	b.n	8002570 <HK_init+0x8>
 800258a:	bf00      	nop
 800258c:	24001f08 	.word	0x24001f08

08002590 <AUTOINIT_init>:
 * from SDN1 to 15V, updates the rail monitor, and yields control to
 * other threads in an infinite loop.
 */
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <AUTOINIT_init+0x70>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a0:	2200      	movs	r2, #0
 80025a2:	2104      	movs	r1, #4
 80025a4:	f016 f826 	bl	80185f4 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_15V; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e012      	b.n	80025d4 <AUTOINIT_init+0x44>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <AUTOINIT_init+0x74>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <AUTOINIT_init+0x74>)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	889b      	ldrh	r3, [r3, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4619      	mov	r1, r3
 80025c4:	f00a f85a 	bl	800c67c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 80025c8:	2064      	movs	r0, #100	; 0x64
 80025ca:	f015 ff43 	bl	8018454 <osDelay>
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_15V; i++)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3301      	adds	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	dde9      	ble.n	80025ae <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++)
 80025da:	2308      	movs	r3, #8
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	e008      	b.n	80025f2 <AUTOINIT_init+0x62>
		{
			set_rail_monitor_enable(i, ENABLED);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2101      	movs	r1, #1
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ff88 	bl	80064fc <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b0d      	cmp	r3, #13
 80025f6:	ddf3      	ble.n	80025e0 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80025f8:	f015 feca 	bl	8018390 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025fc:	e7cc      	b.n	8002598 <AUTOINIT_init+0x8>
 80025fe:	bf00      	nop
 8002600:	24001f0c 	.word	0x24001f0c
 8002604:	0801bd70 	.word	0x0801bd70

08002608 <AUTODEINIT_init>:
 * from 15V to SDN1, updates the rail monitor, and yields control to
 * other threads in an infinite loop.
 */
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <AUTODEINIT_init+0x70>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002618:	2200      	movs	r2, #0
 800261a:	2108      	movs	r1, #8
 800261c:	f015 ffea 	bl	80185f4 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--)
 8002620:	230d      	movs	r3, #13
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e008      	b.n	8002638 <AUTODEINIT_init+0x30>
		{
			set_rail_monitor_enable(i, DISABLED);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f003 ff65 	bl	80064fc <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3b01      	subs	r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b07      	cmp	r3, #7
 800263c:	dcf3      	bgt.n	8002626 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = GPIOS_INDEX_15V; i >= GPIOS_INDEX_SDN1; i--)
 800263e:	2306      	movs	r3, #6
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	e012      	b.n	800266a <AUTODEINIT_init+0x62>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <AUTODEINIT_init+0x74>)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <AUTODEINIT_init+0x74>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	889b      	ldrh	r3, [r3, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	f00a f80f 	bl	800c67c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 800265e:	2064      	movs	r0, #100	; 0x64
 8002660:	f015 fef8 	bl	8018454 <osDelay>
		for (int i = GPIOS_INDEX_15V; i >= GPIOS_INDEX_SDN1; i--)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	3b01      	subs	r3, #1
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	dae9      	bge.n	8002644 <AUTODEINIT_init+0x3c>
		}

		osThreadYield();
 8002670:	f015 fe8e 	bl	8018390 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002674:	e7cc      	b.n	8002610 <AUTODEINIT_init+0x8>
 8002676:	bf00      	nop
 8002678:	24001f0c 	.word	0x24001f0c
 800267c:	0801bd70 	.word	0x0801bd70

08002680 <Voltage_Monitor_init>:
 * and checks rail status. If rails are out of bounds, it transitions to idle mode
 * before returning to science mode.
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	uint8_t rails_in_bound = 1;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG, osFlagsWaitAny, osWaitForever);
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <Voltage_Monitor_init+0x68>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002694:	2200      	movs	r2, #0
 8002696:	2101      	movs	r1, #1
 8002698:	f015 ffac 	bl	80185f4 <osEventFlagsWait>
	  set_rail_monitor();
 800269c:	f003 ff46 	bl	800652c <set_rail_monitor>
#ifdef ERROR_HANDLING_ENABLED
	  rails_in_bound = monitor_rails();
 80026a0:	f004 f826 	bl	80066f0 <monitor_rails>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]
	  if (!rails_in_bound && !IDLING)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ee      	bne.n	800268c <Voltage_Monitor_init+0xc>
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <Voltage_Monitor_init+0x6c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e9      	bne.n	800268c <Voltage_Monitor_init+0xc>
	  {
		  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <Voltage_Monitor_init+0x70>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f015 ff22 	bl	8018508 <osEventFlagsSet>
		  while (!IDLING) {};
 80026c4:	bf00      	nop
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <Voltage_Monitor_init+0x6c>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0fa      	beq.n	80026c6 <Voltage_Monitor_init+0x46>
		  osDelay(IDLE_TO_SCIENCE_DELAY);
 80026d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d4:	f015 febe 	bl	8018454 <osDelay>
		  osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <Voltage_Monitor_init+0x70>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f015 ff12 	bl	8018508 <osEventFlagsSet>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG, osFlagsWaitAny, osWaitForever);
 80026e4:	e7d2      	b.n	800268c <Voltage_Monitor_init+0xc>
 80026e6:	bf00      	nop
 80026e8:	24001f0c 	.word	0x24001f0c
 80026ec:	240000c4 	.word	0x240000c4
 80026f0:	24001f10 	.word	0x24001f10

080026f4 <STOP_init>:
 * This function waits for the STOP event flag, clears it, sets the IDLE flag,
 * and enters stop mode when idle.
 */
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <STOP_init+0x44>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002704:	2200      	movs	r2, #0
 8002706:	2102      	movs	r1, #2
 8002708:	f015 ff74 	bl	80185f4 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <STOP_init+0x44>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2102      	movs	r1, #2
 8002712:	4618      	mov	r0, r3
 8002714:	f015 ff3c 	bl	8018590 <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <STOP_init+0x48>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f015 fef2 	bl	8018508 <osEventFlagsSet>
	  while (!IDLING) {};
 8002724:	bf00      	nop
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <STOP_init+0x4c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0fa      	beq.n	8002726 <STOP_init+0x32>

	  enter_stop();
 8002730:	f001 f976 	bl	8003a20 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002734:	e7e2      	b.n	80026fc <STOP_init+0x8>
 8002736:	bf00      	nop
 8002738:	24001f0c 	.word	0x24001f0c
 800273c:	24001f10 	.word	0x24001f10
 8002740:	240000c4 	.word	0x240000c4

08002744 <Science_init>:
 * updates the rail monitor, starts DAC in DMA mode, and resets packet
 * sequence numbers, transitioning to the science mode.
 */
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af02      	add	r7, sp, #8
 800274a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <Science_init+0xd4>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002754:	2200      	movs	r2, #0
 8002756:	2101      	movs	r1, #1
 8002758:	f015 ff4c 	bl	80185f4 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 800275c:	4b2f      	ldr	r3, [pc, #188]	; (800281c <Science_init+0xd8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f015 fe35 	bl	80183d0 <osThreadSuspend>
		IDLING = 0;
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <Science_init+0xdc>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]

		// Enabling all voltages
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_N800V; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e012      	b.n	8002798 <Science_init+0x54>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002772:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <Science_init+0xe0>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <Science_init+0xe0>)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	4619      	mov	r1, r3
 8002788:	f009 ff78 	bl	800c67c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	f015 fe61 	bl	8018454 <osDelay>
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_N800V; i++)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b08      	cmp	r3, #8
 800279c:	dde9      	ble.n	8002772 <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++)
 800279e:	2306      	movs	r3, #6
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	e008      	b.n	80027b6 <Science_init+0x72>
		{
			set_rail_monitor_enable(i, ENABLED);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2101      	movs	r1, #1
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fea6 	bl	80064fc <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b11      	cmp	r3, #17
 80027ba:	ddf3      	ble.n	80027a4 <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <Science_init+0xd8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f015 fe26 	bl	8018412 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 80027c6:	b672      	cpsid	i
}
 80027c8:	bf00      	nop

		__disable_irq();
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, DAC_OUT_ARRAY_SIZE, DAC_ALIGN_12B_R);
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2320      	movs	r3, #32
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <Science_init+0xe4>)
 80027d2:	2100      	movs	r1, #0
 80027d4:	4815      	ldr	r0, [pc, #84]	; (800282c <Science_init+0xe8>)
 80027d6:	f005 fed7 	bl	8008588 <HAL_DAC_Start_DMA>
		HK_ENABLED = ENABLED;
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <Science_init+0xec>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = ENABLED;
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <Science_init+0xf0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <Science_init+0xf4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80027ec:	f001 fdcc 	bl	8004388 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG);
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <Science_init+0xf8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2104      	movs	r1, #4
 80027f6:	4618      	mov	r0, r3
 80027f8:	f015 fe86 	bl	8018508 <osEventFlagsSet>
		TIM2->CCR4 = ERPA_PWM_FREQ;
 80027fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002800:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002806:	2100      	movs	r1, #0
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <Science_init+0xfc>)
 800280a:	f011 fb4d 	bl	8013ea8 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800280e:	b662      	cpsie	i
}
 8002810:	bf00      	nop
		__enable_irq();

		osThreadYield();
 8002812:	f015 fdbd 	bl	8018390 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002816:	e799      	b.n	800274c <Science_init+0x8>
 8002818:	24001f10 	.word	0x24001f10
 800281c:	24000f74 	.word	0x24000f74
 8002820:	240000c4 	.word	0x240000c4
 8002824:	0801bd70 	.word	0x0801bd70
 8002828:	24000040 	.word	0x24000040
 800282c:	240002b4 	.word	0x240002b4
 8002830:	24001f54 	.word	0x24001f54
 8002834:	24001f55 	.word	0x24001f55
 8002838:	24001f58 	.word	0x24001f58
 800283c:	24001f08 	.word	0x24001f08
 8002840:	240023e0 	.word	0x240023e0

08002844 <Idle_init>:
 * stops the DAC, updates the rail monitor, disables all voltages,
 * and yields control to other threads.
 */
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <Idle_init+0xb4>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002854:	2200      	movs	r2, #0
 8002856:	2102      	movs	r1, #2
 8002858:	f015 fecc 	bl	80185f4 <osEventFlagsWait>

		ERPA_ENABLED = DISABLED;
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <Idle_init+0xb8>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800286a:	2100      	movs	r1, #0
 800286c:	4824      	ldr	r0, [pc, #144]	; (8002900 <Idle_init+0xbc>)
 800286e:	f011 fc75 	bl	801415c <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = DISABLED;
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <Idle_init+0xc0>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002878:	2100      	movs	r1, #0
 800287a:	4823      	ldr	r0, [pc, #140]	; (8002908 <Idle_init+0xc4>)
 800287c:	f005 ff44 	bl	8008708 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <Idle_init+0xc8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f015 fda3 	bl	80183d0 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 800288a:	2311      	movs	r3, #17
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e008      	b.n	80028a2 <Idle_init+0x5e>
		{
			set_rail_monitor_enable(i, DISABLED);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fe30 	bl	80064fc <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	dcf3      	bgt.n	8002890 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 80028a8:	2308      	movs	r3, #8
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	e012      	b.n	80028d4 <Idle_init+0x90>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80028ae:	4a18      	ldr	r2, [pc, #96]	; (8002910 <Idle_init+0xcc>)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <Idle_init+0xcc>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	889b      	ldrh	r3, [r3, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f009 feda 	bl	800c67c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	f015 fdc3 	bl	8018454 <osDelay>
		for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	dae9      	bge.n	80028ae <Idle_init+0x6a>
		}
		osDelay(IDLE_TO_VOLTAGE_MONITOR_DELAY);
 80028da:	f640 50ac 	movw	r0, #3500	; 0xdac
 80028de:	f015 fdb9 	bl	8018454 <osDelay>
		IDLING = 1;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <Idle_init+0xd0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <Idle_init+0xc8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f015 fd90 	bl	8018412 <osThreadResume>

		// Yield thread control
		osThreadYield();
 80028f2:	f015 fd4d 	bl	8018390 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028f6:	e7a9      	b.n	800284c <Idle_init+0x8>
 80028f8:	24001f10 	.word	0x24001f10
 80028fc:	24001f55 	.word	0x24001f55
 8002900:	240023e0 	.word	0x240023e0
 8002904:	24001f54 	.word	0x24001f54
 8002908:	240002b4 	.word	0x240002b4
 800290c:	24000f74 	.word	0x24000f74
 8002910:	0801bd70 	.word	0x0801bd70
 8002914:	240000c4 	.word	0x240000c4

08002918 <Sync_init>:
 * waits for a specific key value to be received, calibrates the RTC,
 * and handles UART communication for error counting and reset cause.
 */
/* USER CODE END Header_Sync_init */
void Sync_init(void *argument)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sync_init */
  /* Infinite loop */
  for(;;)
  {
	  	osEventFlagsWait(mode_event_flags, SYNC_FLAG, osFlagsWaitAny, osWaitForever);
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <Sync_init+0x7c>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002928:	2200      	movs	r2, #0
 800292a:	2104      	movs	r1, #4
 800292c:	f015 fe62 	bl	80185f4 <osEventFlagsWait>
	  	send_ACK();
 8002930:	f001 f802 	bl	8003938 <send_ACK>

	  	uint8_t key;
	  	uint8_t key_index = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	75fb      	strb	r3, [r7, #23]
	  	uint8_t expected_key_value = 0xFF;
 8002938:	23ff      	movs	r3, #255	; 0xff
 800293a:	75bb      	strb	r3, [r7, #22]
	  	uint8_t rtc_buffer_size = 9;
 800293c:	2309      	movs	r3, #9
 800293e:	757b      	strb	r3, [r7, #21]
	  	ERROR_STRUCT reset_cause;

	  	// Wait for 0xFF to be received
	  	HAL_UART_AbortReceive(&huart1);
 8002940:	4815      	ldr	r0, [pc, #84]	; (8002998 <Sync_init+0x80>)
 8002942:	f012 ffdd 	bl	8015900 <HAL_UART_AbortReceive>
	  	do
	  	{
	  		HAL_UART_Receive(&huart1, UART_RX_BUFFER, rtc_buffer_size, UART_TIMEOUT_MS);
 8002946:	7d7b      	ldrb	r3, [r7, #21]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2364      	movs	r3, #100	; 0x64
 800294c:	4913      	ldr	r1, [pc, #76]	; (800299c <Sync_init+0x84>)
 800294e:	4812      	ldr	r0, [pc, #72]	; (8002998 <Sync_init+0x80>)
 8002950:	f012 fec2 	bl	80156d8 <HAL_UART_Receive>
	  		key = UART_RX_BUFFER[key_index];
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <Sync_init+0x84>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	753b      	strb	r3, [r7, #20]
	  	} while (key != expected_key_value);
 800295c:	7d3a      	ldrb	r2, [r7, #20]
 800295e:	7dbb      	ldrb	r3, [r7, #22]
 8002960:	429a      	cmp	r2, r3
 8002962:	d1f0      	bne.n	8002946 <Sync_init+0x2e>

	  	calibrateRTC(UART_RX_BUFFER);
 8002964:	480d      	ldr	r0, [pc, #52]	; (800299c <Sync_init+0x84>)
 8002966:	f003 f965 	bl	8005c34 <calibrateRTC>
	  	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800296a:	2201      	movs	r2, #1
 800296c:	490b      	ldr	r1, [pc, #44]	; (800299c <Sync_init+0x84>)
 800296e:	480a      	ldr	r0, [pc, #40]	; (8002998 <Sync_init+0x80>)
 8002970:	f012 ff7a 	bl	8015868 <HAL_UART_Receive_IT>
	  	osDelay(SYNC_DELAY);
 8002974:	200a      	movs	r0, #10
 8002976:	f015 fd6d 	bl	8018454 <osDelay>
	  	reset_cause = get_reset_cause();
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fe5a 	bl	8003638 <get_reset_cause>
	  	create_sync_packet(reset_cause);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	e893 0003 	ldmia.w	r3, {r0, r1}
 800298c:	f001 f894 	bl	8003ab8 <create_sync_packet>
  {
 8002990:	e7c6      	b.n	8002920 <Sync_init+0x8>
 8002992:	bf00      	nop
 8002994:	24001f10 	.word	0x24001f10
 8002998:	240024c4 	.word	0x240024c4
 800299c:	24001f14 	.word	0x24001f14

080029a0 <Transmit_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Transmit_init */
void Transmit_init(void *argument)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b09f      	sub	sp, #124	; 0x7c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  /* USER CODE BEGIN Transmit_init */
  /* Infinite loop */
  for(;;)
  {
	Packet_t packet;
	packet = dequeue();
 80029a8:	463b      	mov	r3, r7
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fd1a 	bl	80043e4 <dequeue>
 80029b0:	463c      	mov	r4, r7
 80029b2:	f107 0644 	add.w	r6, r7, #68	; 0x44
 80029b6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80029ba:	4635      	mov	r5, r6
 80029bc:	4623      	mov	r3, r4
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c8:	3410      	adds	r4, #16
 80029ca:	3610      	adds	r6, #16
 80029cc:	4564      	cmp	r4, ip
 80029ce:	d1f4      	bne.n	80029ba <Transmit_init+0x1a>
 80029d0:	4633      	mov	r3, r6
 80029d2:	4622      	mov	r2, r4
 80029d4:	8811      	ldrh	r1, [r2, #0]
 80029d6:	7892      	ldrb	r2, [r2, #2]
 80029d8:	8019      	strh	r1, [r3, #0]
 80029da:	709a      	strb	r2, [r3, #2]

	while (packet.size == 0)
 80029dc:	e001      	b.n	80029e2 <Transmit_init+0x42>
	{
		osThreadYield();
 80029de:	f015 fcd7 	bl	8018390 <osThreadYield>
	while (packet.size == 0)
 80029e2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f9      	beq.n	80029de <Transmit_init+0x3e>
	}

	HAL_UART_Transmit(&huart1, packet.buffer, packet.size, UART_TIMEOUT_MS);
 80029ea:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80029f4:	2364      	movs	r3, #100	; 0x64
 80029f6:	4803      	ldr	r0, [pc, #12]	; (8002a04 <Transmit_init+0x64>)
 80029f8:	f012 fde0 	bl	80155bc <HAL_UART_Transmit>

    osDelay(PACKET_GAP);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f015 fd29 	bl	8018454 <osDelay>
  {
 8002a02:	e7d1      	b.n	80029a8 <Transmit_init+0x8>
 8002a04:	240024c4 	.word	0x240024c4

08002a08 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a24:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3c:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a42:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <MX_GPIO_Init+0xe8>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002a9c:	4815      	ldr	r0, [pc, #84]	; (8002af4 <MX_GPIO_Init+0xec>)
 8002a9e:	f009 fded 	bl	800c67c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	4814      	ldr	r0, [pc, #80]	; (8002af8 <MX_GPIO_Init+0xf0>)
 8002aa8:	f009 fde8 	bl	800c67c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002aac:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002ab0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480b      	ldr	r0, [pc, #44]	; (8002af4 <MX_GPIO_Init+0xec>)
 8002ac6:	f009 fc11 	bl	800c2ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002aca:	2364      	movs	r3, #100	; 0x64
 8002acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_GPIO_Init+0xf0>)
 8002ae2:	f009 fc03 	bl	800c2ec <HAL_GPIO_Init>

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	58024400 	.word	0x58024400
 8002af4:	58020800 	.word	0x58020800
 8002af8:	58020400 	.word	0x58020400

08002afc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <MX_I2C1_Init+0x7c>)
 8002b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <MX_I2C1_Init+0x80>)
 8002b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b36:	480f      	ldr	r0, [pc, #60]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b38:	f009 fdba 	bl	800c6b0 <HAL_I2C_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b42:	f000 ffa9 	bl	8003a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b46:	2100      	movs	r1, #0
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b4a:	f00c f859 	bl	800ec00 <HAL_I2CEx_ConfigAnalogFilter>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b54:	f000 ffa0 	bl	8003a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <MX_I2C1_Init+0x78>)
 8002b5c:	f00c f89b 	bl	800ec96 <HAL_I2CEx_ConfigDigitalFilter>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b66:	f000 ff97 	bl	8003a98 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f00c f8e0 	bl	800ed30 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	24001db4 	.word	0x24001db4
 8002b78:	40005400 	.word	0x40005400
 8002b7c:	00100517 	.word	0x00100517

08002b80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b0ba      	sub	sp, #232	; 0xe8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	22c0      	movs	r2, #192	; 0xc0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f018 ffb5 	bl	801bb10 <memset>
  if(i2cHandle->Instance==I2C1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_I2C_MspInit+0x1a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f040 80b3 	bne.w	8002d18 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bb2:	f04f 0208 	mov.w	r2, #8
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f00d fadf 	bl	801018c <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002bd4:	f000 ff60 	bl	8003a98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_I2C_MspInit+0x1a4>)
 8002bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bde:	4a51      	ldr	r2, [pc, #324]	; (8002d24 <HAL_I2C_MspInit+0x1a4>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be8:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_I2C_MspInit+0x1a4>)
 8002bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfe:	2312      	movs	r3, #18
 8002c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c10:	2304      	movs	r3, #4
 8002c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4842      	ldr	r0, [pc, #264]	; (8002d28 <HAL_I2C_MspInit+0x1a8>)
 8002c1e:	f009 fb65 	bl	800c2ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <HAL_I2C_MspInit+0x1a4>)
 8002c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c28:	4a3e      	ldr	r2, [pc, #248]	; (8002d24 <HAL_I2C_MspInit+0x1a4>)
 8002c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c32:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <HAL_I2C_MspInit+0x1a4>)
 8002c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c42:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <HAL_I2C_MspInit+0x1b0>)
 8002c44:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c48:	2222      	movs	r2, #34	; 0x22
 8002c4a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c4c:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c78:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c80:	482a      	ldr	r0, [pc, #168]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c82:	f006 f80d 	bl	8008ca0 <HAL_DMA_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c8c:	f000 ff04 	bl	8003a98 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
 8002c96:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <HAL_I2C_MspInit+0x1ac>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <HAL_I2C_MspInit+0x1b8>)
 8002ca0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002ca2:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002ca4:	2221      	movs	r2, #33	; 0x21
 8002ca6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cd4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002cdc:	4815      	ldr	r0, [pc, #84]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cde:	f005 ffdf 	bl	8008ca0 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002ce8:	f000 fed6 	bl	8003a98 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cf2:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <HAL_I2C_MspInit+0x1b4>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2105      	movs	r1, #5
 8002cfc:	201f      	movs	r0, #31
 8002cfe:	f005 fba1 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d02:	201f      	movs	r0, #31
 8002d04:	f005 fbb8 	bl	8008478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2105      	movs	r1, #5
 8002d0c:	2020      	movs	r0, #32
 8002d0e:	f005 fb99 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002d12:	2020      	movs	r0, #32
 8002d14:	f005 fbb0 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d18:	bf00      	nop
 8002d1a:	37e8      	adds	r7, #232	; 0xe8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40005400 	.word	0x40005400
 8002d24:	58024400 	.word	0x58024400
 8002d28:	58020400 	.word	0x58020400
 8002d2c:	24001e08 	.word	0x24001e08
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	24001e80 	.word	0x24001e80
 8002d38:	400200b8 	.word	0x400200b8

08002d3c <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <MX_IWDG1_Init+0x34>)
 8002d42:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <MX_IWDG1_Init+0x38>)
 8002d44:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <MX_IWDG1_Init+0x34>)
 8002d48:	2204      	movs	r2, #4
 8002d4a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 2499;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <MX_IWDG1_Init+0x34>)
 8002d4e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002d52:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_IWDG1_Init+0x34>)
 8002d56:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002d5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002d5c:	4804      	ldr	r0, [pc, #16]	; (8002d70 <MX_IWDG1_Init+0x34>)
 8002d5e:	f00c f80b 	bl	800ed78 <HAL_IWDG_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002d68:	f000 fe96 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	24001ef8 	.word	0x24001ef8
 8002d74:	58004800 	.word	0x58004800

08002d78 <__NVIC_SystemReset>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d7c:	f3bf 8f4f 	dsb	sy
}
 8002d80:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <__NVIC_SystemReset+0x24>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <__NVIC_SystemReset+0x24>)
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_SystemReset+0x28>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d92:	f3bf 8f4f 	dsb	sy
}
 8002d96:	bf00      	nop
    __NOP();
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <__NVIC_SystemReset+0x20>
 8002d9c:	e000ed00 	.word	0xe000ed00
 8002da0:	05fa0004 	.word	0x05fa0004

08002da4 <HAL_FLASHEx_EccCorrectionCallback>:
/**
 * @brief Callback function for handling ECC correction in flash memory.
 *        Detects and handles single-bit flash ECC errors.
 */
void HAL_FLASHEx_EccCorrectionCallback()
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002daa:	2301      	movs	r3, #1
 8002dac:	703b      	strb	r3, [r7, #0]
	error.detail = ED_single_bit_error_flash;
 8002dae:	2318      	movs	r3, #24
 8002db0:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002db2:	463b      	mov	r3, r7
 8002db4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002db8:	f7ff f8ba 	bl	8001f30 <handle_error>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_FLASHEx_EccDetectionCallback>:
/**
 * @brief Callback function for handling ECC detection in flash memory.
 *        Detects and handles double-bit flash ECC errors.
 */
void HAL_FLASHEx_EccDetectionCallback()
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	703b      	strb	r3, [r7, #0]
	error.detail = ED_double_bit_error_flash;
 8002dce:	2319      	movs	r3, #25
 8002dd0:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dd8:	f7ff f8aa 	bl	8001f30 <handle_error>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_OC_DelayElapsedCallback>:
 *        Sets event flags based on the triggered timer and manages housekeeping tasks.
 *
 * @param htim Pointer to the timer handle triggering the callback.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d106      	bne.n	8002e02 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(packet_event_flags, PMT_FLAG);
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f015 fb84 	bl	8018508 <osEventFlagsSet>
	}
	else
	{
		// Unknown timer interrupt
	}
}
 8002e00:	e02e      	b.n	8002e60 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
	else if (htim == &htim2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12a      	bne.n	8002e60 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
		if (ERPA_ENABLED)
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG);
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f015 fb74 	bl	8018508 <osEventFlagsSet>
		if (HK_100_ms_counter == HK_100MS_COUNTER_MAX)
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d113      	bne.n	8002e52 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG);
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f015 fb69 	bl	8018508 <osEventFlagsSet>
			if (HK_ENABLED)
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG);
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2104      	movs	r1, #4
 8002e46:	4618      	mov	r0, r3
 8002e48:	f015 fb5e 	bl	8018508 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e5e:	701a      	strb	r2, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	240023e0 	.word	0x240023e0
 8002e6c:	24001f08 	.word	0x24001f08
 8002e70:	2400242c 	.word	0x2400242c
 8002e74:	24001f55 	.word	0x24001f55
 8002e78:	24001f5c 	.word	0x24001f5c
 8002e7c:	24001f0c 	.word	0x24001f0c
 8002e80:	24001f54 	.word	0x24001f54

08002e84 <HAL_UART_RxCpltCallback>:
 *        Processes received commands to control GPIO pins and manage power rails.
 *
 * @param huart Pointer to the UART handle triggering the callback.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	49f8      	ldr	r1, [pc, #992]	; (8003270 <HAL_UART_RxCpltCallback+0x3ec>)
 8002e90:	48f8      	ldr	r0, [pc, #992]	; (8003274 <HAL_UART_RxCpltCallback+0x3f0>)
 8002e92:	f012 fce9 	bl	8015868 <HAL_UART_Receive_IT>
	uint8_t key_index = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
	unsigned char key = UART_RX_BUFFER[key_index];
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	4af4      	ldr	r2, [pc, #976]	; (8003270 <HAL_UART_RxCpltCallback+0x3ec>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	73bb      	strb	r3, [r7, #14]

	switch (key)
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	2bef      	cmp	r3, #239	; 0xef
 8002ea6:	f200 83b3 	bhi.w	8003610 <HAL_UART_RxCpltCallback+0x78c>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_UART_RxCpltCallback+0x2c>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08003287 	.word	0x08003287
 8002eb4:	080032ab 	.word	0x080032ab
 8002eb8:	0800330f 	.word	0x0800330f
 8002ebc:	0800333d 	.word	0x0800333d
 8002ec0:	08003369 	.word	0x08003369
 8002ec4:	08003397 	.word	0x08003397
 8002ec8:	080033c7 	.word	0x080033c7
 8002ecc:	080033f7 	.word	0x080033f7
 8002ed0:	08003425 	.word	0x08003425
 8002ed4:	0800344d 	.word	0x0800344d
 8002ed8:	08003475 	.word	0x08003475
 8002edc:	0800349b 	.word	0x0800349b
 8002ee0:	080034b9 	.word	0x080034b9
 8002ee4:	080034fd 	.word	0x080034fd
 8002ee8:	08003589 	.word	0x08003589
 8002eec:	080035ab 	.word	0x080035ab
 8002ef0:	08003279 	.word	0x08003279
 8002ef4:	08003295 	.word	0x08003295
 8002ef8:	080032f7 	.word	0x080032f7
 8002efc:	08003327 	.word	0x08003327
 8002f00:	08003353 	.word	0x08003353
 8002f04:	0800337f 	.word	0x0800337f
 8002f08:	080033af 	.word	0x080033af
 8002f0c:	080033df 	.word	0x080033df
 8002f10:	0800340f 	.word	0x0800340f
 8002f14:	0800343b 	.word	0x0800343b
 8002f18:	08003457 	.word	0x08003457
 8002f1c:	08003485 	.word	0x08003485
 8002f20:	080034a5 	.word	0x080034a5
 8002f24:	080034c1 	.word	0x080034c1
 8002f28:	08003539 	.word	0x08003539
 8002f2c:	0800360b 	.word	0x0800360b
 8002f30:	08003611 	.word	0x08003611
 8002f34:	08003611 	.word	0x08003611
 8002f38:	08003611 	.word	0x08003611
 8002f3c:	08003611 	.word	0x08003611
 8002f40:	08003611 	.word	0x08003611
 8002f44:	08003611 	.word	0x08003611
 8002f48:	08003611 	.word	0x08003611
 8002f4c:	08003611 	.word	0x08003611
 8002f50:	08003611 	.word	0x08003611
 8002f54:	08003611 	.word	0x08003611
 8002f58:	08003611 	.word	0x08003611
 8002f5c:	08003611 	.word	0x08003611
 8002f60:	08003611 	.word	0x08003611
 8002f64:	08003611 	.word	0x08003611
 8002f68:	08003611 	.word	0x08003611
 8002f6c:	08003611 	.word	0x08003611
 8002f70:	08003611 	.word	0x08003611
 8002f74:	08003611 	.word	0x08003611
 8002f78:	08003611 	.word	0x08003611
 8002f7c:	08003611 	.word	0x08003611
 8002f80:	08003611 	.word	0x08003611
 8002f84:	08003611 	.word	0x08003611
 8002f88:	08003611 	.word	0x08003611
 8002f8c:	08003611 	.word	0x08003611
 8002f90:	08003611 	.word	0x08003611
 8002f94:	08003611 	.word	0x08003611
 8002f98:	08003611 	.word	0x08003611
 8002f9c:	08003611 	.word	0x08003611
 8002fa0:	08003611 	.word	0x08003611
 8002fa4:	08003611 	.word	0x08003611
 8002fa8:	08003611 	.word	0x08003611
 8002fac:	08003611 	.word	0x08003611
 8002fb0:	08003611 	.word	0x08003611
 8002fb4:	08003611 	.word	0x08003611
 8002fb8:	08003611 	.word	0x08003611
 8002fbc:	08003611 	.word	0x08003611
 8002fc0:	08003611 	.word	0x08003611
 8002fc4:	08003611 	.word	0x08003611
 8002fc8:	08003611 	.word	0x08003611
 8002fcc:	08003611 	.word	0x08003611
 8002fd0:	08003611 	.word	0x08003611
 8002fd4:	08003611 	.word	0x08003611
 8002fd8:	08003611 	.word	0x08003611
 8002fdc:	08003611 	.word	0x08003611
 8002fe0:	08003611 	.word	0x08003611
 8002fe4:	08003611 	.word	0x08003611
 8002fe8:	08003611 	.word	0x08003611
 8002fec:	08003611 	.word	0x08003611
 8002ff0:	08003611 	.word	0x08003611
 8002ff4:	08003611 	.word	0x08003611
 8002ff8:	08003611 	.word	0x08003611
 8002ffc:	08003611 	.word	0x08003611
 8003000:	08003611 	.word	0x08003611
 8003004:	08003611 	.word	0x08003611
 8003008:	08003611 	.word	0x08003611
 800300c:	08003611 	.word	0x08003611
 8003010:	08003611 	.word	0x08003611
 8003014:	08003611 	.word	0x08003611
 8003018:	08003611 	.word	0x08003611
 800301c:	08003611 	.word	0x08003611
 8003020:	08003611 	.word	0x08003611
 8003024:	08003611 	.word	0x08003611
 8003028:	08003611 	.word	0x08003611
 800302c:	08003611 	.word	0x08003611
 8003030:	08003611 	.word	0x08003611
 8003034:	08003611 	.word	0x08003611
 8003038:	08003611 	.word	0x08003611
 800303c:	08003611 	.word	0x08003611
 8003040:	08003611 	.word	0x08003611
 8003044:	08003611 	.word	0x08003611
 8003048:	08003611 	.word	0x08003611
 800304c:	08003611 	.word	0x08003611
 8003050:	08003611 	.word	0x08003611
 8003054:	08003611 	.word	0x08003611
 8003058:	08003611 	.word	0x08003611
 800305c:	08003611 	.word	0x08003611
 8003060:	08003611 	.word	0x08003611
 8003064:	08003611 	.word	0x08003611
 8003068:	08003611 	.word	0x08003611
 800306c:	08003611 	.word	0x08003611
 8003070:	08003611 	.word	0x08003611
 8003074:	08003611 	.word	0x08003611
 8003078:	08003611 	.word	0x08003611
 800307c:	08003611 	.word	0x08003611
 8003080:	08003611 	.word	0x08003611
 8003084:	08003611 	.word	0x08003611
 8003088:	08003611 	.word	0x08003611
 800308c:	08003611 	.word	0x08003611
 8003090:	08003611 	.word	0x08003611
 8003094:	08003611 	.word	0x08003611
 8003098:	08003611 	.word	0x08003611
 800309c:	08003611 	.word	0x08003611
 80030a0:	08003611 	.word	0x08003611
 80030a4:	08003611 	.word	0x08003611
 80030a8:	08003611 	.word	0x08003611
 80030ac:	08003611 	.word	0x08003611
 80030b0:	08003611 	.word	0x08003611
 80030b4:	08003611 	.word	0x08003611
 80030b8:	08003611 	.word	0x08003611
 80030bc:	08003611 	.word	0x08003611
 80030c0:	08003611 	.word	0x08003611
 80030c4:	08003611 	.word	0x08003611
 80030c8:	08003611 	.word	0x08003611
 80030cc:	08003611 	.word	0x08003611
 80030d0:	08003611 	.word	0x08003611
 80030d4:	08003611 	.word	0x08003611
 80030d8:	08003611 	.word	0x08003611
 80030dc:	08003611 	.word	0x08003611
 80030e0:	08003611 	.word	0x08003611
 80030e4:	08003611 	.word	0x08003611
 80030e8:	08003611 	.word	0x08003611
 80030ec:	08003611 	.word	0x08003611
 80030f0:	08003611 	.word	0x08003611
 80030f4:	08003611 	.word	0x08003611
 80030f8:	08003611 	.word	0x08003611
 80030fc:	08003611 	.word	0x08003611
 8003100:	08003611 	.word	0x08003611
 8003104:	08003611 	.word	0x08003611
 8003108:	08003611 	.word	0x08003611
 800310c:	08003611 	.word	0x08003611
 8003110:	08003611 	.word	0x08003611
 8003114:	08003611 	.word	0x08003611
 8003118:	08003611 	.word	0x08003611
 800311c:	08003611 	.word	0x08003611
 8003120:	08003611 	.word	0x08003611
 8003124:	08003611 	.word	0x08003611
 8003128:	08003611 	.word	0x08003611
 800312c:	08003611 	.word	0x08003611
 8003130:	08003611 	.word	0x08003611
 8003134:	08003611 	.word	0x08003611
 8003138:	08003611 	.word	0x08003611
 800313c:	08003611 	.word	0x08003611
 8003140:	08003611 	.word	0x08003611
 8003144:	08003611 	.word	0x08003611
 8003148:	08003611 	.word	0x08003611
 800314c:	08003611 	.word	0x08003611
 8003150:	08003611 	.word	0x08003611
 8003154:	08003611 	.word	0x08003611
 8003158:	08003611 	.word	0x08003611
 800315c:	08003611 	.word	0x08003611
 8003160:	08003611 	.word	0x08003611
 8003164:	08003611 	.word	0x08003611
 8003168:	08003611 	.word	0x08003611
 800316c:	080035d5 	.word	0x080035d5
 8003170:	08003611 	.word	0x08003611
 8003174:	08003611 	.word	0x08003611
 8003178:	08003611 	.word	0x08003611
 800317c:	08003611 	.word	0x08003611
 8003180:	08003611 	.word	0x08003611
 8003184:	08003611 	.word	0x08003611
 8003188:	08003611 	.word	0x08003611
 800318c:	08003611 	.word	0x08003611
 8003190:	08003611 	.word	0x08003611
 8003194:	08003611 	.word	0x08003611
 8003198:	08003611 	.word	0x08003611
 800319c:	08003611 	.word	0x08003611
 80031a0:	08003611 	.word	0x08003611
 80031a4:	08003611 	.word	0x08003611
 80031a8:	08003611 	.word	0x08003611
 80031ac:	080035e3 	.word	0x080035e3
 80031b0:	08003611 	.word	0x08003611
 80031b4:	08003611 	.word	0x08003611
 80031b8:	08003611 	.word	0x08003611
 80031bc:	08003611 	.word	0x08003611
 80031c0:	08003611 	.word	0x08003611
 80031c4:	08003611 	.word	0x08003611
 80031c8:	08003611 	.word	0x08003611
 80031cc:	08003611 	.word	0x08003611
 80031d0:	08003611 	.word	0x08003611
 80031d4:	08003611 	.word	0x08003611
 80031d8:	08003611 	.word	0x08003611
 80031dc:	08003611 	.word	0x08003611
 80031e0:	08003611 	.word	0x08003611
 80031e4:	08003611 	.word	0x08003611
 80031e8:	08003611 	.word	0x08003611
 80031ec:	080035f1 	.word	0x080035f1
 80031f0:	080035c7 	.word	0x080035c7
 80031f4:	08003611 	.word	0x08003611
 80031f8:	08003611 	.word	0x08003611
 80031fc:	08003611 	.word	0x08003611
 8003200:	08003611 	.word	0x08003611
 8003204:	08003611 	.word	0x08003611
 8003208:	08003611 	.word	0x08003611
 800320c:	08003611 	.word	0x08003611
 8003210:	08003611 	.word	0x08003611
 8003214:	08003611 	.word	0x08003611
 8003218:	08003611 	.word	0x08003611
 800321c:	08003611 	.word	0x08003611
 8003220:	08003611 	.word	0x08003611
 8003224:	08003611 	.word	0x08003611
 8003228:	08003611 	.word	0x08003611
 800322c:	080035ff 	.word	0x080035ff
 8003230:	080035b9 	.word	0x080035b9
 8003234:	08003611 	.word	0x08003611
 8003238:	08003611 	.word	0x08003611
 800323c:	08003611 	.word	0x08003611
 8003240:	08003611 	.word	0x08003611
 8003244:	08003611 	.word	0x08003611
 8003248:	08003611 	.word	0x08003611
 800324c:	08003611 	.word	0x08003611
 8003250:	08003611 	.word	0x08003611
 8003254:	08003611 	.word	0x08003611
 8003258:	08003611 	.word	0x08003611
 800325c:	08003611 	.word	0x08003611
 8003260:	08003611 	.word	0x08003611
 8003264:	08003611 	.word	0x08003611
 8003268:	08003611 	.word	0x08003611
 800326c:	08003605 	.word	0x08003605
 8003270:	24001f14 	.word	0x24001f14
 8003274:	240024c4 	.word	0x240024c4
	{
	case CMD_SDN1_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SDN1].gpio, gpios[GPIOS_INDEX_SDN1].pin, GPIO_PIN_SET);
 8003278:	4bb8      	ldr	r3, [pc, #736]	; (800355c <HAL_UART_RxCpltCallback+0x6d8>)
 800327a:	2104      	movs	r1, #4
 800327c:	2201      	movs	r2, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f009 f9fc 	bl	800c67c <HAL_GPIO_WritePin>
		break;
 8003284:	e1cd      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SDN1_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SDN1].gpio, gpios[GPIOS_INDEX_SDN1].pin, GPIO_PIN_RESET);
 8003286:	4bb5      	ldr	r3, [pc, #724]	; (800355c <HAL_UART_RxCpltCallback+0x6d8>)
 8003288:	2104      	movs	r1, #4
 800328a:	2200      	movs	r2, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f009 f9f5 	bl	800c67c <HAL_GPIO_WritePin>
		break;
 8003292:	e1c6      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SYS_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SYS].gpio, gpios[GPIOS_INDEX_SYS].pin, GPIO_PIN_SET);
 8003294:	4bb1      	ldr	r3, [pc, #708]	; (800355c <HAL_UART_RxCpltCallback+0x6d8>)
 8003296:	2120      	movs	r1, #32
 8003298:	2201      	movs	r2, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f009 f9ee 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, ENABLED);
 80032a0:	2101      	movs	r1, #1
 80032a2:	2008      	movs	r0, #8
 80032a4:	f003 f92a 	bl	80064fc <set_rail_monitor_enable>
		break;
 80032a8:	e1bb      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SYS_OFF:
	{
		for (int i = GPIOS_INDEX_N800V; i > GPIOS_INDEX_SDN1; i--)
 80032aa:	2308      	movs	r3, #8
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e00f      	b.n	80032d0 <HAL_UART_RxCpltCallback+0x44c>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80032b0:	4aab      	ldr	r2, [pc, #684]	; (8003560 <HAL_UART_RxCpltCallback+0x6dc>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80032b8:	4aa9      	ldr	r2, [pc, #676]	; (8003560 <HAL_UART_RxCpltCallback+0x6dc>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	889b      	ldrh	r3, [r3, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	4619      	mov	r1, r3
 80032c6:	f009 f9d9 	bl	800c67c <HAL_GPIO_WritePin>
		for (int i = GPIOS_INDEX_N800V; i > GPIOS_INDEX_SDN1; i--)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	dcec      	bgt.n	80032b0 <HAL_UART_RxCpltCallback+0x42c>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--)
 80032d6:	2310      	movs	r3, #16
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e008      	b.n	80032ee <HAL_UART_RxCpltCallback+0x46a>
		{
			set_rail_monitor_enable(i, DISABLED);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f003 f90a 	bl	80064fc <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	dcf3      	bgt.n	80032dc <HAL_UART_RxCpltCallback+0x458>
		}
		break;
 80032f4:	e195      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_3V3_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_3V3].gpio, gpios[GPIOS_INDEX_3V3].pin, GPIO_PIN_SET);
 80032f6:	4b9b      	ldr	r3, [pc, #620]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 80032f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032fc:	2201      	movs	r2, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f009 f9bc 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, ENABLED);
 8003304:	2101      	movs	r1, #1
 8003306:	2009      	movs	r0, #9
 8003308:	f003 f8f8 	bl	80064fc <set_rail_monitor_enable>
		break;
 800330c:	e189      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_3V3_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_3V3].gpio, gpios[GPIOS_INDEX_3V3].pin, GPIO_PIN_RESET);
 800330e:	4b95      	ldr	r3, [pc, #596]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 8003310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003314:	2200      	movs	r2, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f009 f9b0 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, DISABLED);
 800331c:	2100      	movs	r1, #0
 800331e:	2009      	movs	r0, #9
 8003320:	f003 f8ec 	bl	80064fc <set_rail_monitor_enable>
		break;
 8003324:	e17d      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_5V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_5V].gpio, gpios[GPIOS_INDEX_5V].pin, GPIO_PIN_SET);
 8003326:	4b8f      	ldr	r3, [pc, #572]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	2201      	movs	r2, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f009 f9a5 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, ENABLED);
 8003332:	2101      	movs	r1, #1
 8003334:	200a      	movs	r0, #10
 8003336:	f003 f8e1 	bl	80064fc <set_rail_monitor_enable>
		break;
 800333a:	e172      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_5V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_5V].gpio, gpios[GPIOS_INDEX_5V].pin, GPIO_PIN_RESET);
 800333c:	4b89      	ldr	r3, [pc, #548]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	2200      	movs	r2, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f009 f99a 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, DISABLED);
 8003348:	2100      	movs	r1, #0
 800334a:	200a      	movs	r0, #10
 800334c:	f003 f8d6 	bl	80064fc <set_rail_monitor_enable>
		break;
 8003350:	e167      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N3V3_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N3V3].gpio, gpios[GPIOS_INDEX_N3V3].pin, GPIO_PIN_SET);
 8003352:	4b84      	ldr	r3, [pc, #528]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 8003354:	2140      	movs	r1, #64	; 0x40
 8003356:	2201      	movs	r2, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f009 f98f 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, ENABLED);
 800335e:	2101      	movs	r1, #1
 8003360:	200b      	movs	r0, #11
 8003362:	f003 f8cb 	bl	80064fc <set_rail_monitor_enable>
		break;
 8003366:	e15c      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N3V3_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N3V3].gpio, gpios[GPIOS_INDEX_N3V3].pin, GPIO_PIN_RESET);
 8003368:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	2200      	movs	r2, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f009 f984 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, DISABLED);
 8003374:	2100      	movs	r1, #0
 8003376:	200b      	movs	r0, #11
 8003378:	f003 f8c0 	bl	80064fc <set_rail_monitor_enable>
		break;
 800337c:	e151      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N5V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N5V].gpio, gpios[GPIOS_INDEX_N5V].pin, GPIO_PIN_SET);
 800337e:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 8003380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003384:	2201      	movs	r2, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f009 f978 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, ENABLED);
 800338c:	2101      	movs	r1, #1
 800338e:	200c      	movs	r0, #12
 8003390:	f003 f8b4 	bl	80064fc <set_rail_monitor_enable>
		break;
 8003394:	e145      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N5V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N5V].gpio, gpios[GPIOS_INDEX_N5V].pin, GPIO_PIN_RESET);
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 8003398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800339c:	2200      	movs	r2, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f009 f96c 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, DISABLED);
 80033a4:	2100      	movs	r1, #0
 80033a6:	200c      	movs	r0, #12
 80033a8:	f003 f8a8 	bl	80064fc <set_rail_monitor_enable>
		break;
 80033ac:	e139      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_15V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_15V].gpio, gpios[GPIOS_INDEX_15V].pin, GPIO_PIN_SET);
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 80033b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b4:	2201      	movs	r2, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f009 f960 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, ENABLED);
 80033bc:	2101      	movs	r1, #1
 80033be:	200d      	movs	r0, #13
 80033c0:	f003 f89c 	bl	80064fc <set_rail_monitor_enable>
		break;
 80033c4:	e12d      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_15V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_15V].gpio, gpios[GPIOS_INDEX_15V].pin, GPIO_PIN_RESET);
 80033c6:	4b67      	ldr	r3, [pc, #412]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 80033c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033cc:	2200      	movs	r2, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f009 f954 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, DISABLED);
 80033d4:	2100      	movs	r1, #0
 80033d6:	200d      	movs	r0, #13
 80033d8:	f003 f890 	bl	80064fc <set_rail_monitor_enable>
		break;
 80033dc:	e121      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N200V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N200V].gpio, gpios[GPIOS_INDEX_N200V].pin, GPIO_PIN_SET);
 80033de:	4b61      	ldr	r3, [pc, #388]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 80033e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033e4:	2201      	movs	r2, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f009 f948 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, ENABLED);
 80033ec:	2101      	movs	r1, #1
 80033ee:	200f      	movs	r0, #15
 80033f0:	f003 f884 	bl	80064fc <set_rail_monitor_enable>
		break;
 80033f4:	e115      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N200V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N200V].gpio, gpios[GPIOS_INDEX_N200V].pin, GPIO_PIN_RESET);
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <HAL_UART_RxCpltCallback+0x6e0>)
 80033f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033fc:	2200      	movs	r2, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f009 f93c 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, DISABLED);
 8003404:	2100      	movs	r1, #0
 8003406:	200f      	movs	r0, #15
 8003408:	f003 f878 	bl	80064fc <set_rail_monitor_enable>
		break;
 800340c:	e109      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N800V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N800V].gpio, gpios[GPIOS_INDEX_N800V].pin, GPIO_PIN_SET);
 800340e:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_UART_RxCpltCallback+0x6d8>)
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	2201      	movs	r2, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f009 f931 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, ENABLED);
 800341a:	2101      	movs	r1, #1
 800341c:	2010      	movs	r0, #16
 800341e:	f003 f86d 	bl	80064fc <set_rail_monitor_enable>
		break;
 8003422:	e0fe      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N800V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N800V].gpio, gpios[GPIOS_INDEX_N800V].pin, GPIO_PIN_RESET);
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_UART_RxCpltCallback+0x6d8>)
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	2200      	movs	r2, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f009 f926 	bl	800c67c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, DISABLED);
 8003430:	2100      	movs	r1, #0
 8003432:	2010      	movs	r0, #16
 8003434:	f003 f862 	bl	80064fc <set_rail_monitor_enable>
		break;
 8003438:	e0f3      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTOSWEEP_ON:
	{
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, DAC_OUT_ARRAY_SIZE, DAC_ALIGN_12B_R);
 800343a:	2300      	movs	r3, #0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2320      	movs	r3, #32
 8003440:	4a49      	ldr	r2, [pc, #292]	; (8003568 <HAL_UART_RxCpltCallback+0x6e4>)
 8003442:	2100      	movs	r1, #0
 8003444:	4849      	ldr	r0, [pc, #292]	; (800356c <HAL_UART_RxCpltCallback+0x6e8>)
 8003446:	f005 f89f 	bl	8008588 <HAL_DAC_Start_DMA>
		break;
 800344a:	e0ea      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTOSWEEP_OFF:
	{
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800344c:	2100      	movs	r1, #0
 800344e:	4847      	ldr	r0, [pc, #284]	; (800356c <HAL_UART_RxCpltCallback+0x6e8>)
 8003450:	f005 f95a 	bl	8008708 <HAL_DAC_Stop_DMA>
		break;
 8003454:	e0e5      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_ERPA_ON:
	{
		osEventFlagsSet(packet_event_flags, ERPA_FLAG);
 8003456:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_UART_RxCpltCallback+0x6ec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f015 f853 	bl	8018508 <osEventFlagsSet>
		TIM2->CCR4 = ERPA_PWM_FREQ;
 8003462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003466:	f44f 729c 	mov.w	r2, #312	; 0x138
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = ENABLED;
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_UART_RxCpltCallback+0x6f0>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
		break;
 8003472:	e0d6      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_ERPA_OFF:
	{
		ERPA_ENABLED = DISABLED;
 8003474:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_UART_RxCpltCallback+0x6f0>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 800347a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003482:	e0ce      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_PMT_ON:
	{
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003484:	2100      	movs	r1, #0
 8003486:	483c      	ldr	r0, [pc, #240]	; (8003578 <HAL_UART_RxCpltCallback+0x6f4>)
 8003488:	f010 fd0e 	bl	8013ea8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG);
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_UART_RxCpltCallback+0x6ec>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	4618      	mov	r0, r3
 8003494:	f015 f838 	bl	8018508 <osEventFlagsSet>
		break;
 8003498:	e0c3      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_PMT_OFF:
	{
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800349a:	2100      	movs	r1, #0
 800349c:	4836      	ldr	r0, [pc, #216]	; (8003578 <HAL_UART_RxCpltCallback+0x6f4>)
 800349e:	f010 fe5d 	bl	801415c <HAL_TIM_OC_Stop_IT>
		break;
 80034a2:	e0be      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_HK_ON:
	{
		osEventFlagsSet(packet_event_flags, HK_FLAG);
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_UART_RxCpltCallback+0x6ec>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2104      	movs	r1, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f015 f82c 	bl	8018508 <osEventFlagsSet>
		HK_ENABLED = ENABLED;
 80034b0:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_UART_RxCpltCallback+0x6f8>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
		break;
 80034b6:	e0b4      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_HK_OFF:
	{
		HK_ENABLED = DISABLED;
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_UART_RxCpltCallback+0x6f8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
		break;
 80034be:	e0b0      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_STEP_UP:
	{
		if (step < 14)
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b0d      	cmp	r3, #13
 80034c8:	f200 80a4 	bhi.w	8003614 <HAL_UART_RxCpltCallback+0x790>
		{
			step += 2;
 80034cc:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3302      	adds	r3, #2
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 80034d8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80034da:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b21      	ldr	r3, [pc, #132]	; (8003568 <HAL_UART_RxCpltCallback+0x6e4>)
 80034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	481f      	ldr	r0, [pc, #124]	; (800356c <HAL_UART_RxCpltCallback+0x6e8>)
 80034ee:	f005 f9ae 	bl	800884e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80034f2:	2100      	movs	r1, #0
 80034f4:	481d      	ldr	r0, [pc, #116]	; (800356c <HAL_UART_RxCpltCallback+0x6e8>)
 80034f6:	f004 ffef 	bl	80084d8 <HAL_DAC_Start>
		}
		break;
 80034fa:	e08b      	b.n	8003614 <HAL_UART_RxCpltCallback+0x790>
	}

	case CMD_STEP_DOWN:
	{
		if (step > 1)
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	f240 8088 	bls.w	8003618 <HAL_UART_RxCpltCallback+0x794>
		{
			step -= 2;
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3b02      	subs	r3, #2
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 8003514:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_UART_RxCpltCallback+0x6fc>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_UART_RxCpltCallback+0x6e4>)
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	2200      	movs	r2, #0
 8003526:	2100      	movs	r1, #0
 8003528:	4810      	ldr	r0, [pc, #64]	; (800356c <HAL_UART_RxCpltCallback+0x6e8>)
 800352a:	f005 f990 	bl	800884e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800352e:	2100      	movs	r1, #0
 8003530:	480e      	ldr	r0, [pc, #56]	; (800356c <HAL_UART_RxCpltCallback+0x6e8>)
 8003532:	f004 ffd1 	bl	80084d8 <HAL_DAC_Start>
		}
		break;
 8003536:	e06f      	b.n	8003618 <HAL_UART_RxCpltCallback+0x794>
	}

	case CMD_FACTOR_UP:
	{
		if (cadence <= 50000)
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_UART_RxCpltCallback+0x700>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003540:	4293      	cmp	r3, r2
 8003542:	d86b      	bhi.n	800361c <HAL_UART_RxCpltCallback+0x798>
		{
			cadence *= 2;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_UART_RxCpltCallback+0x700>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_UART_RxCpltCallback+0x700>)
 800354c:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800354e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_UART_RxCpltCallback+0x700>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003558:	e060      	b.n	800361c <HAL_UART_RxCpltCallback+0x798>
 800355a:	bf00      	nop
 800355c:	58020400 	.word	0x58020400
 8003560:	0801bd70 	.word	0x0801bd70
 8003564:	58020800 	.word	0x58020800
 8003568:	24000040 	.word	0x24000040
 800356c:	240002b4 	.word	0x240002b4
 8003570:	24001f08 	.word	0x24001f08
 8003574:	24001f55 	.word	0x24001f55
 8003578:	240023e0 	.word	0x240023e0
 800357c:	24001f54 	.word	0x24001f54
 8003580:	24001f56 	.word	0x24001f56
 8003584:	240000c0 	.word	0x240000c0
	}

	case CMD_FACTOR_DOWN:
	{
		if (cadence >= 6250)
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_UART_RxCpltCallback+0x7a8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f641 0269 	movw	r2, #6249	; 0x1869
 8003590:	4293      	cmp	r3, r2
 8003592:	d945      	bls.n	8003620 <HAL_UART_RxCpltCallback+0x79c>
		{
			cadence /= 2;
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_UART_RxCpltCallback+0x7a8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	4a24      	ldr	r2, [pc, #144]	; (800362c <HAL_UART_RxCpltCallback+0x7a8>)
 800359c:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800359e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_UART_RxCpltCallback+0x7a8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80035a8:	e03a      	b.n	8003620 <HAL_UART_RxCpltCallback+0x79c>
	}

	case CMD_ENTER_STOP:
	{
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_UART_RxCpltCallback+0x7ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f014 ffa9 	bl	8018508 <osEventFlagsSet>
		break;
 80035b6:	e034      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTO_INIT:
	{
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_UART_RxCpltCallback+0x7ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2104      	movs	r1, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f014 ffa2 	bl	8018508 <osEventFlagsSet>
		break;
 80035c4:	e02d      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTO_DEINIT:
	{
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80035c6:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <HAL_UART_RxCpltCallback+0x7ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2108      	movs	r1, #8
 80035cc:	4618      	mov	r0, r3
 80035ce:	f014 ff9b 	bl	8018508 <osEventFlagsSet>
		break;
 80035d2:	e026      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SYNC_MODE:
	{
		osEventFlagsSet(mode_event_flags, SYNC_FLAG);
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_UART_RxCpltCallback+0x7b0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2104      	movs	r1, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f014 ff94 	bl	8018508 <osEventFlagsSet>
		break;
 80035e0:	e01f      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SCIENCE_MODE:
	{
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80035e2:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_UART_RxCpltCallback+0x7b0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f014 ff8d 	bl	8018508 <osEventFlagsSet>
		break;
 80035ee:	e018      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_IDLE_MODE:
	{
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_UART_RxCpltCallback+0x7b0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f014 ff86 	bl	8018508 <osEventFlagsSet>
		break;
 80035fc:	e011      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_RESET_ERROR_COUNTERS:
	{
		reset_error_counters();
 80035fe:	f7fe fd85 	bl	800210c <reset_error_counters>
		break;
 8003602:	e00e      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SEND_PREVIOUS_ERROR:
	{
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003604:	f7fe fdfa 	bl	80021fc <send_previous_error_packet>
#endif
		break;
 8003608:	e00b      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SEND_VERSION_PACKET:
	{
		create_version_packet();
 800360a:	f000 fc03 	bl	8003e14 <create_version_packet>
		break;
 800360e:	e008      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
	}

	default:
	{
		// Unknown command
		break;
 8003610:	bf00      	nop
 8003612:	e006      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
		break;
 8003614:	bf00      	nop
 8003616:	e004      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
		break;
 8003618:	bf00      	nop
 800361a:	e002      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
		break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_UART_RxCpltCallback+0x79e>
		break;
 8003620:	bf00      	nop
	}
	}
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	240000c0 	.word	0x240000c0
 8003630:	24001f0c 	.word	0x24001f0c
 8003634:	24001f10 	.word	0x24001f10

08003638 <get_reset_cause>:
/**
 * @brief Retrieves and handles the cause of a system reset.
 *        Checks for watchdog and brownout reset conditions and reports errors.
 */
ERROR_STRUCT get_reset_cause()
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_UNDEFINED;
 8003640:	2305      	movs	r3, #5
 8003642:	723b      	strb	r3, [r7, #8]
	error.detail = ED_UNDEFINED;
 8003644:	231c      	movs	r3, #28
 8003646:	727b      	strb	r3, [r7, #9]

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <get_reset_cause+0xa4>)
 800364a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800364e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <get_reset_cause+0x50>
    {
        error.category = EC_watchdog;
 8003656:	2304      	movs	r3, #4
 8003658:	723b      	strb	r3, [r7, #8]
        error.detail = ED_UNDEFINED;
 800365a:	231c      	movs	r3, #28
 800365c:	727b      	strb	r3, [r7, #9]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 800365e:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <get_reset_cause+0xa4>)
 8003660:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <get_reset_cause+0xa4>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        increment_error_counter(error);
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003676:	f7fe fd03 	bl	8002080 <increment_error_counter>
        set_previous_error(error);
 800367a:	f107 0308 	add.w	r3, r7, #8
 800367e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003682:	f7fe fd63 	bl	800214c <set_previous_error>
 8003686:	e01e      	b.n	80036c6 <get_reset_cause+0x8e>
    }

    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <get_reset_cause+0xa4>)
 800368a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800368e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <get_reset_cause+0x8e>
    {
        error.category = EC_brownout;
 8003696:	2303      	movs	r3, #3
 8003698:	723b      	strb	r3, [r7, #8]
        error.detail = ED_UNDEFINED;
 800369a:	231c      	movs	r3, #28
 800369c:	727b      	strb	r3, [r7, #9]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <get_reset_cause+0xa4>)
 80036a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036a4:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <get_reset_cause+0xa4>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        increment_error_counter(error);
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036b6:	f7fe fce3 	bl	8002080 <increment_error_counter>
        set_previous_error(error);
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036c2:	f7fe fd43 	bl	800214c <set_previous_error>
    }

	return error;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	cb03      	ldmia	r3!, {r0, r1}
 80036d0:	6010      	str	r0, [r2, #0]
 80036d2:	6051      	str	r1, [r2, #4]
}
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400

080036e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036e4:	f003 f964 	bl	80069b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036e8:	f000 f82a 	bl	8003740 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80036ec:	f000 f8aa 	bl	8003844 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f0:	f7ff f98a 	bl	8002a08 <MX_GPIO_Init>
  MX_DMA_Init();
 80036f4:	f7fd faf8 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036f8:	f002 fb5e 	bl	8005db8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80036fc:	f7ff f9fe 	bl	8002afc <MX_I2C1_Init>
  MX_SPI2_Init();
 8003700:	f001 fa64 	bl	8004bcc <MX_SPI2_Init>
  MX_TIM2_Init();
 8003704:	f001 ff66 	bl	80055d4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003708:	f001 feb6 	bl	8005478 <MX_TIM1_Init>
  MX_ADC3_Init();
 800370c:	f7fd f88c 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003710:	f7fc ff68 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003714:	f7fd fa34 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003718:	f001 fa00 	bl	8004b1c <MX_SPI1_Init>
  MX_RTC_Init();
 800371c:	f000 ffda 	bl	80046d4 <MX_RTC_Init>
#ifdef ERROR_HANDLING_ENABLED
  MX_IWDG1_Init();
 8003720:	f7ff fb0c 	bl	8002d3c <MX_IWDG1_Init>
  MX_RAMECC_Init();
 8003724:	f000 fe8e 	bl	8004444 <MX_RAMECC_Init>
#endif
  MX_TIM3_Init();
 8003728:	f001 ffca 	bl	80056c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 800372c:	f000 f8ba 	bl	80038a4 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003730:	f014 fd52 	bl	80181d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003734:	f7fe fe52 	bl	80023dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003738:	f014 fd72 	bl	8018220 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800373c:	e7fe      	b.n	800373c <main+0x5c>
	...

08003740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b09c      	sub	sp, #112	; 0x70
 8003744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374a:	224c      	movs	r2, #76	; 0x4c
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f018 f9de 	bl	801bb10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	2220      	movs	r2, #32
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f018 f9d8 	bl	801bb10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003760:	2002      	movs	r0, #2
 8003762:	f00b fba5 	bl	800eeb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003766:	2300      	movs	r3, #0
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4b34      	ldr	r3, [pc, #208]	; (800383c <SystemClock_Config+0xfc>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	4a33      	ldr	r2, [pc, #204]	; (800383c <SystemClock_Config+0xfc>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003776:	4b31      	ldr	r3, [pc, #196]	; (800383c <SystemClock_Config+0xfc>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <SystemClock_Config+0x100>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003788:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <SystemClock_Config+0x100>)
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	6193      	str	r3, [r2, #24]
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <SystemClock_Config+0x100>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800379c:	bf00      	nop
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <SystemClock_Config+0x100>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	d1f8      	bne.n	800379e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80037ac:	230b      	movs	r3, #11
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80037b6:	2309      	movs	r3, #9
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ba:	2340      	movs	r3, #64	; 0x40
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037be:	2301      	movs	r3, #1
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c2:	2302      	movs	r3, #2
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037c6:	2302      	movs	r3, #2
 80037c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037ca:	2304      	movs	r3, #4
 80037cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80037ce:	2318      	movs	r3, #24
 80037d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80037d2:	2302      	movs	r3, #2
 80037d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037d6:	2302      	movs	r3, #2
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037da:	2302      	movs	r3, #2
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80037de:	2308      	movs	r3, #8
 80037e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80037e2:	2302      	movs	r3, #2
 80037e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ee:	4618      	mov	r0, r3
 80037f0:	f00b fca4 	bl	800f13c <HAL_RCC_OscConfig>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80037fa:	f000 f94d 	bl	8003a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037fe:	233f      	movs	r3, #63	; 0x3f
 8003800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003802:	2303      	movs	r3, #3
 8003804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003812:	2340      	movs	r3, #64	; 0x40
 8003814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f00c f8e4 	bl	800f9f0 <HAL_RCC_ClockConfig>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800382e:	f000 f933 	bl	8003a98 <Error_Handler>
  }
}
 8003832:	bf00      	nop
 8003834:	3770      	adds	r7, #112	; 0x70
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	58000400 	.word	0x58000400
 8003840:	58024800 	.word	0x58024800

08003844 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b0b0      	sub	sp, #192	; 0xc0
 8003848:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800384a:	463b      	mov	r3, r7
 800384c:	22c0      	movs	r2, #192	; 0xc0
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f018 f95d 	bl	801bb10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003856:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003862:	2304      	movs	r3, #4
 8003864:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8003866:	2318      	movs	r3, #24
 8003868:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800386a:	2308      	movs	r3, #8
 800386c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800386e:	2302      	movs	r3, #2
 8003870:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003872:	2302      	movs	r3, #2
 8003874:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800387a:	2320      	movs	r3, #32
 800387c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003888:	463b      	mov	r3, r7
 800388a:	4618      	mov	r0, r3
 800388c:	f00c fc7e 	bl	801018c <HAL_RCCEx_PeriphCLKConfig>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003896:	f000 f8ff 	bl	8003a98 <Error_Handler>
  }
}
 800389a:	bf00      	nop
 800389c:	37c0      	adds	r7, #192	; 0xc0
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <system_setup>:
/**
 * @brief Initializes the system and its components.
 *        Sets up error handling, event flags, timer, voltage monitoring, ADC, and UART reception.
 */
void system_setup()
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
#ifdef ERROR_HANDLING_ENABLED
	error_counter_init();
 80038a8:	f7fe fbba 	bl	8002020 <error_counter_init>
	init_flash_ecc();
 80038ac:	f000 f8c4 	bl	8003a38 <init_flash_ecc>
#endif

	packet_event_flags = osEventFlagsNew(NULL);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f014 fdea 	bl	801848a <osEventFlagsNew>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <system_setup+0x7c>)
 80038ba:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL)
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <system_setup+0x7c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <system_setup+0x24>
    {
        Error_Handler();
 80038c4:	f000 f8e8 	bl	8003a98 <Error_Handler>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f014 fdde 	bl	801848a <osEventFlagsNew>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <system_setup+0x80>)
 80038d2:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL)
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <system_setup+0x80>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <system_setup+0x3c>
    {
        Error_Handler();
 80038dc:	f000 f8dc 	bl	8003a98 <Error_Handler>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f014 fdd2 	bl	801848a <osEventFlagsNew>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <system_setup+0x84>)
 80038ea:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL)
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <system_setup+0x84>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <system_setup+0x54>
    {
        Error_Handler();
 80038f4:	f000 f8d0 	bl	8003a98 <Error_Handler>
    }

    TIM2->CCR4 = 0;
 80038f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038fc:	2200      	movs	r2, #0
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003900:	210c      	movs	r1, #12
 8003902:	480a      	ldr	r0, [pc, #40]	; (800392c <system_setup+0x88>)
 8003904:	f010 fad0 	bl	8013ea8 <HAL_TIM_OC_Start_IT>

	voltage_monitor_init();
 8003908:	f002 fb60 	bl	8005fcc <voltage_monitor_init>

	init_adc_dma();
 800390c:	f000 ff74 	bl	80047f8 <init_adc_dma>

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003910:	2201      	movs	r2, #1
 8003912:	4907      	ldr	r1, [pc, #28]	; (8003930 <system_setup+0x8c>)
 8003914:	4807      	ldr	r0, [pc, #28]	; (8003934 <system_setup+0x90>)
 8003916:	f011 ffa7 	bl	8015868 <HAL_UART_Receive_IT>
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	24001f08 	.word	0x24001f08
 8003924:	24001f0c 	.word	0x24001f0c
 8003928:	24001f10 	.word	0x24001f10
 800392c:	2400242c 	.word	0x2400242c
 8003930:	24001f14 	.word	0x24001f14
 8003934:	240024c4 	.word	0x240024c4

08003938 <send_ACK>:
/**
 * @brief Sends an acknowledgment (ACK) over UART.
 *        Transmits a single byte indicating a successful operation.
 */
void send_ACK()
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <send_ACK+0x1c>)
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, UART_TIMEOUT_MS);
 8003942:	2364      	movs	r3, #100	; 0x64
 8003944:	2201      	movs	r2, #1
 8003946:	4903      	ldr	r1, [pc, #12]	; (8003954 <send_ACK+0x1c>)
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <send_ACK+0x20>)
 800394a:	f011 fe37 	bl	80155bc <HAL_UART_Transmit>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	24001f60 	.word	0x24001f60
 8003958:	240024c4 	.word	0x240024c4

0800395c <get_current_step>:
 * @brief Retrieves the current step value based on the DAC output.
 *
 * @return The corresponding step value based on the DAC1 output, or -1 if out of range.
 */
STEP_VALUES get_current_step()
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003962:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <get_current_step+0xc0>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	607b      	str	r3, [r7, #4]

	switch (dac_value)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800396e:	4293      	cmp	r3, r2
 8003970:	d04a      	beq.n	8003a08 <get_current_step+0xac>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	da48      	bge.n	8003a0c <get_current_step+0xb0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003980:	4293      	cmp	r3, r2
 8003982:	d03f      	beq.n	8003a04 <get_current_step+0xa8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f640 628b 	movw	r2, #3723	; 0xe8b
 800398a:	4293      	cmp	r3, r2
 800398c:	dc3e      	bgt.n	8003a0c <get_current_step+0xb0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003994:	4293      	cmp	r3, r2
 8003996:	d033      	beq.n	8003a00 <get_current_step+0xa4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800399e:	da35      	bge.n	8003a0c <get_current_step+0xb0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d028      	beq.n	80039fc <get_current_step+0xa0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80039b0:	4293      	cmp	r3, r2
 80039b2:	dc2b      	bgt.n	8003a0c <get_current_step+0xb0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f240 7245 	movw	r2, #1861	; 0x745
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01c      	beq.n	80039f8 <get_current_step+0x9c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f240 7245 	movw	r2, #1861	; 0x745
 80039c4:	4293      	cmp	r3, r2
 80039c6:	dc21      	bgt.n	8003a0c <get_current_step+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d010      	beq.n	80039f4 <get_current_step+0x98>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80039d8:	4293      	cmp	r3, r2
 80039da:	dc17      	bgt.n	8003a0c <get_current_step+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <get_current_step+0x90>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80039e8:	d002      	beq.n	80039f0 <get_current_step+0x94>
 80039ea:	e00f      	b.n	8003a0c <get_current_step+0xb0>
	{
	case DAC_VALUE_0:
		return STEP_0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e00e      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_620:
		return STEP_1;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e00c      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_1241:
		return STEP_2;
 80039f4:	2302      	movs	r3, #2
 80039f6:	e00a      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_1861:
		return STEP_3;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e008      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_2482:
		return STEP_4;
 80039fc:	2304      	movs	r3, #4
 80039fe:	e006      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_3103:
		return STEP_5;
 8003a00:	2305      	movs	r3, #5
 8003a02:	e004      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_3723:
		return STEP_6;
 8003a04:	2306      	movs	r3, #6
 8003a06:	e002      	b.n	8003a0e <get_current_step+0xb2>

	case DAC_VALUE_4095:
		return STEP_7;
 8003a08:	2307      	movs	r3, #7
 8003a0a:	e000      	b.n	8003a0e <get_current_step+0xb2>

	default:
		return INVALID_STEP;
 8003a0c:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40007400 	.word	0x40007400

08003a20 <enter_stop>:
/**
 * @brief Enters low-power stop mode after sending an acknowledgment.
 *        Suspends all FreeRTOS tasks, enters stop mode, and resumes configuration upon wake-up.
 */
void enter_stop()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	  send_ACK();
 8003a24:	f7ff ff88 	bl	8003938 <send_ACK>

	  vTaskSuspendAll();
 8003a28:	f016 fb0a 	bl	801a040 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f00b fa02 	bl	800ee38 <HAL_PWR_EnterSTOPMode>

	  // MCU resumes here after waking from stop mode.

	  NVIC_SystemReset();
 8003a34:	f7ff f9a0 	bl	8002d78 <__NVIC_SystemReset>

08003a38 <init_flash_ecc>:
/**
 * @brief Initializes Flash ECC (Error Correction Code) settings.
 *        Unlocks Flash memory, sets IRQ priority, and enables ECC correction and detection interrupts.
 */
void init_flash_ecc()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8003a3c:	f008 f9de 	bl	800bdfc <HAL_FLASH_Unlock>

	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 8003a40:	2200      	movs	r2, #0
 8003a42:	210f      	movs	r1, #15
 8003a44:	2004      	movs	r0, #4
 8003a46:	f004 fcfd 	bl	8008444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003a4a:	2004      	movs	r0, #4
 8003a4c:	f004 fd14 	bl	8008478 <HAL_NVIC_EnableIRQ>
	HAL_FLASHEx_EnableEccCorrectionInterrupt();
 8003a50:	f008 fb74 	bl	800c13c <HAL_FLASHEx_EnableEccCorrectionInterrupt>
	HAL_FLASHEx_EnableEccDetectionInterrupt();
 8003a54:	f008 fb8a 	bl	800c16c <HAL_FLASHEx_EnableEccDetectionInterrupt>
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	HAL_IWDG_Refresh(&hiwdg1);
 8003a64:	4809      	ldr	r0, [pc, #36]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003a66:	f00b f9d6 	bl	800ee16 <HAL_IWDG_Refresh>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8003a74:	f002 ffd8 	bl	8006a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim3)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	NVIC_SystemReset();
 8003a80:	f7ff f97a 	bl	8002d78 <__NVIC_SystemReset>
  }
  /* USER CODE END Callback 1 */
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	24001ef8 	.word	0x24001ef8
 8003a90:	40001000 	.word	0x40001000
 8003a94:	24002478 	.word	0x24002478

08003a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8003aa2:	231c      	movs	r3, #28
 8003aa4:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aac:	f7fe fa40 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <create_sync_packet>:
 *
 * This function combines version number, error
 * counters, and reset cause into a single packet.
 */
void create_sync_packet(ERROR_STRUCT reset_cause)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	463b      	mov	r3, r7
 8003ac0:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint8_t buffer[SYNC_DATA_SIZE];


	buffer[0] = SYNC_SYNCWORD;
 8003ac4:	4b96      	ldr	r3, [pc, #600]	; (8003d20 <create_sync_packet+0x268>)
 8003ac6:	2288      	movs	r2, #136	; 0x88
 8003ac8:	701a      	strb	r2, [r3, #0]
	buffer[1] = SYNC_SYNCWORD;
 8003aca:	4b95      	ldr	r3, [pc, #596]	; (8003d20 <create_sync_packet+0x268>)
 8003acc:	2288      	movs	r2, #136	; 0x88
 8003ace:	705a      	strb	r2, [r3, #1]
	buffer[2] = V_MAJOR;
 8003ad0:	4b93      	ldr	r3, [pc, #588]	; (8003d20 <create_sync_packet+0x268>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	709a      	strb	r2, [r3, #2]
	buffer[3] = V_MINOR;
 8003ad6:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <create_sync_packet+0x268>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	70da      	strb	r2, [r3, #3]
	buffer[4] = V_PATCH;
 8003adc:	4b90      	ldr	r3, [pc, #576]	; (8003d20 <create_sync_packet+0x268>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	711a      	strb	r2, [r3, #4]
	buffer[5] = ((local_cpy[EC_power_supply_rail] & 0xFF00) >> 8);
 8003ae2:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <create_sync_packet+0x26c>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b8c      	ldr	r3, [pc, #560]	; (8003d20 <create_sync_packet+0x268>)
 8003aee:	715a      	strb	r2, [r3, #5]
	buffer[6] = (local_cpy[EC_power_supply_rail] & 0xFF);
 8003af0:	4b8c      	ldr	r3, [pc, #560]	; (8003d24 <create_sync_packet+0x26c>)
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4b8a      	ldr	r3, [pc, #552]	; (8003d20 <create_sync_packet+0x268>)
 8003af8:	719a      	strb	r2, [r3, #6]
	buffer[7] = ((local_cpy[EC_seu] & 0xFF00) >> 8);
 8003afa:	4b8a      	ldr	r3, [pc, #552]	; (8003d24 <create_sync_packet+0x26c>)
 8003afc:	885b      	ldrh	r3, [r3, #2]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b86      	ldr	r3, [pc, #536]	; (8003d20 <create_sync_packet+0x268>)
 8003b06:	71da      	strb	r2, [r3, #7]
	buffer[8] = (local_cpy[EC_seu] & 0xFF);
 8003b08:	4b86      	ldr	r3, [pc, #536]	; (8003d24 <create_sync_packet+0x26c>)
 8003b0a:	885b      	ldrh	r3, [r3, #2]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <create_sync_packet+0x268>)
 8003b10:	721a      	strb	r2, [r3, #8]
	buffer[9] = ((local_cpy[EC_peripheral] & 0xFF00) >> 8);
 8003b12:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <create_sync_packet+0x26c>)
 8003b14:	889b      	ldrh	r3, [r3, #4]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b80      	ldr	r3, [pc, #512]	; (8003d20 <create_sync_packet+0x268>)
 8003b1e:	725a      	strb	r2, [r3, #9]
	buffer[10] = (local_cpy[EC_peripheral] & 0xFF);
 8003b20:	4b80      	ldr	r3, [pc, #512]	; (8003d24 <create_sync_packet+0x26c>)
 8003b22:	889b      	ldrh	r3, [r3, #4]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <create_sync_packet+0x268>)
 8003b28:	729a      	strb	r2, [r3, #10]
	buffer[11] = ((local_cpy[EC_brownout] & 0xFF00) >> 8);
 8003b2a:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <create_sync_packet+0x26c>)
 8003b2c:	88db      	ldrh	r3, [r3, #6]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b7a      	ldr	r3, [pc, #488]	; (8003d20 <create_sync_packet+0x268>)
 8003b36:	72da      	strb	r2, [r3, #11]
	buffer[12] = (local_cpy[EC_brownout] & 0xFF);
 8003b38:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <create_sync_packet+0x26c>)
 8003b3a:	88db      	ldrh	r3, [r3, #6]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <create_sync_packet+0x268>)
 8003b40:	731a      	strb	r2, [r3, #12]
	buffer[13] = ((local_cpy[EC_watchdog] & 0xFF00) >> 8);
 8003b42:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <create_sync_packet+0x26c>)
 8003b44:	891b      	ldrh	r3, [r3, #8]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	4b74      	ldr	r3, [pc, #464]	; (8003d20 <create_sync_packet+0x268>)
 8003b4e:	735a      	strb	r2, [r3, #13]
	buffer[14] = (local_cpy[EC_watchdog] & 0xFF);
 8003b50:	4b74      	ldr	r3, [pc, #464]	; (8003d24 <create_sync_packet+0x26c>)
 8003b52:	891b      	ldrh	r3, [r3, #8]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b72      	ldr	r3, [pc, #456]	; (8003d20 <create_sync_packet+0x268>)
 8003b58:	739a      	strb	r2, [r3, #14]
	buffer[15] = ((local_cpy[EC_UNDEFINED] & 0xFF00) >> 8);
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <create_sync_packet+0x26c>)
 8003b5c:	895b      	ldrh	r3, [r3, #10]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <create_sync_packet+0x268>)
 8003b66:	73da      	strb	r2, [r3, #15]
	buffer[16] = (local_cpy[EC_UNDEFINED] & 0xFF);
 8003b68:	4b6e      	ldr	r3, [pc, #440]	; (8003d24 <create_sync_packet+0x26c>)
 8003b6a:	895b      	ldrh	r3, [r3, #10]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4b6c      	ldr	r3, [pc, #432]	; (8003d20 <create_sync_packet+0x268>)
 8003b70:	741a      	strb	r2, [r3, #16]
	buffer[17] = ((local_cpy[ED_vsense] & 0xFF00) >> 8);
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <create_sync_packet+0x26c>)
 8003b74:	899b      	ldrh	r3, [r3, #12]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <create_sync_packet+0x268>)
 8003b7e:	745a      	strb	r2, [r3, #17]
	buffer[18] = (local_cpy[ED_vsense] & 0xFF);
 8003b80:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <create_sync_packet+0x26c>)
 8003b82:	899b      	ldrh	r3, [r3, #12]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b66      	ldr	r3, [pc, #408]	; (8003d20 <create_sync_packet+0x268>)
 8003b88:	749a      	strb	r2, [r3, #18]
	buffer[19] = ((local_cpy[ED_vrefint] & 0xFF00) >> 8);
 8003b8a:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <create_sync_packet+0x26c>)
 8003b8c:	89db      	ldrh	r3, [r3, #14]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	4b62      	ldr	r3, [pc, #392]	; (8003d20 <create_sync_packet+0x268>)
 8003b96:	74da      	strb	r2, [r3, #19]
	buffer[20] = (local_cpy[ED_vrefint] & 0xFF);
 8003b98:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <create_sync_packet+0x26c>)
 8003b9a:	89db      	ldrh	r3, [r3, #14]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <create_sync_packet+0x268>)
 8003ba0:	751a      	strb	r2, [r3, #20]
	buffer[21] = ((local_cpy[ED_TEMP1] & 0xFF00) >> 8);
 8003ba2:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <create_sync_packet+0x26c>)
 8003ba4:	8a1b      	ldrh	r3, [r3, #16]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <create_sync_packet+0x268>)
 8003bae:	755a      	strb	r2, [r3, #21]
	buffer[22] = (local_cpy[ED_TEMP1] & 0xFF);
 8003bb0:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <create_sync_packet+0x26c>)
 8003bb2:	8a1b      	ldrh	r3, [r3, #16]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4b5a      	ldr	r3, [pc, #360]	; (8003d20 <create_sync_packet+0x268>)
 8003bb8:	759a      	strb	r2, [r3, #22]
	buffer[23] = ((local_cpy[ED_TEMP2] & 0xFF00) >> 8);
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <create_sync_packet+0x26c>)
 8003bbc:	8a5b      	ldrh	r3, [r3, #18]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <create_sync_packet+0x268>)
 8003bc6:	75da      	strb	r2, [r3, #23]
	buffer[24] = (local_cpy[ED_TEMP2] & 0xFF);
 8003bc8:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <create_sync_packet+0x26c>)
 8003bca:	8a5b      	ldrh	r3, [r3, #18]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b54      	ldr	r3, [pc, #336]	; (8003d20 <create_sync_packet+0x268>)
 8003bd0:	761a      	strb	r2, [r3, #24]
	buffer[25] = ((local_cpy[ED_TEMP3] & 0xFF00) >> 8);
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <create_sync_packet+0x26c>)
 8003bd4:	8a9b      	ldrh	r3, [r3, #20]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <create_sync_packet+0x268>)
 8003bde:	765a      	strb	r2, [r3, #25]
	buffer[26] = (local_cpy[ED_TEMP3] & 0xFF);
 8003be0:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <create_sync_packet+0x26c>)
 8003be2:	8a9b      	ldrh	r3, [r3, #20]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <create_sync_packet+0x268>)
 8003be8:	769a      	strb	r2, [r3, #26]
	buffer[27] = ((local_cpy[ED_TEMP4] & 0xFF00) >> 8);
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <create_sync_packet+0x26c>)
 8003bec:	8adb      	ldrh	r3, [r3, #22]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <create_sync_packet+0x268>)
 8003bf6:	76da      	strb	r2, [r3, #27]
	buffer[28] = (local_cpy[ED_TEMP4] & 0xFF);
 8003bf8:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <create_sync_packet+0x26c>)
 8003bfa:	8adb      	ldrh	r3, [r3, #22]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <create_sync_packet+0x268>)
 8003c00:	771a      	strb	r2, [r3, #28]
	buffer[29] = ((local_cpy[ED_busvmon] & 0xFF00) >> 8);
 8003c02:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <create_sync_packet+0x26c>)
 8003c04:	8b1b      	ldrh	r3, [r3, #24]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <create_sync_packet+0x268>)
 8003c0e:	775a      	strb	r2, [r3, #29]
	buffer[30] = (local_cpy[ED_busvmon] & 0xFF);
 8003c10:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <create_sync_packet+0x26c>)
 8003c12:	8b1b      	ldrh	r3, [r3, #24]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <create_sync_packet+0x268>)
 8003c18:	779a      	strb	r2, [r3, #30]
	buffer[31] = ((local_cpy[ED_busimon] & 0xFF00) >> 8);
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <create_sync_packet+0x26c>)
 8003c1c:	8b5b      	ldrh	r3, [r3, #26]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <create_sync_packet+0x268>)
 8003c26:	77da      	strb	r2, [r3, #31]
	buffer[32] = (local_cpy[ED_busimon] & 0xFF);
 8003c28:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <create_sync_packet+0x26c>)
 8003c2a:	8b5b      	ldrh	r3, [r3, #26]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <create_sync_packet+0x268>)
 8003c30:	f883 2020 	strb.w	r2, [r3, #32]
	buffer[33] = ((local_cpy[ED_2v5] & 0xFF00) >> 8);
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <create_sync_packet+0x26c>)
 8003c36:	8b9b      	ldrh	r3, [r3, #28]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b38      	ldr	r3, [pc, #224]	; (8003d20 <create_sync_packet+0x268>)
 8003c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	buffer[34] = (local_cpy[ED_2v5] & 0xFF);
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <create_sync_packet+0x26c>)
 8003c46:	8b9b      	ldrh	r3, [r3, #28]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <create_sync_packet+0x268>)
 8003c4c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	buffer[35] = ((local_cpy[ED_3v3] & 0xFF00) >> 8);
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <create_sync_packet+0x26c>)
 8003c52:	8bdb      	ldrh	r3, [r3, #30]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <create_sync_packet+0x268>)
 8003c5c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	buffer[36] = (local_cpy[ED_3v3] & 0xFF);
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <create_sync_packet+0x26c>)
 8003c62:	8bdb      	ldrh	r3, [r3, #30]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <create_sync_packet+0x268>)
 8003c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	buffer[37] = ((local_cpy[ED_5v] & 0xFF00) >> 8);
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <create_sync_packet+0x26c>)
 8003c6e:	8c1b      	ldrh	r3, [r3, #32]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <create_sync_packet+0x268>)
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	buffer[38] = (local_cpy[ED_5v] & 0xFF);
 8003c7c:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <create_sync_packet+0x26c>)
 8003c7e:	8c1b      	ldrh	r3, [r3, #32]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <create_sync_packet+0x268>)
 8003c84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	buffer[39] = ((local_cpy[ED_n3v3] & 0xFF00) >> 8);
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <create_sync_packet+0x26c>)
 8003c8a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <create_sync_packet+0x268>)
 8003c94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	buffer[40] = (local_cpy[ED_n3v3] & 0xFF);
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <create_sync_packet+0x26c>)
 8003c9a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <create_sync_packet+0x268>)
 8003ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	buffer[41] = ((local_cpy[ED_n5v] & 0xFF00) >> 8);
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <create_sync_packet+0x26c>)
 8003ca6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <create_sync_packet+0x268>)
 8003cb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	buffer[42] = (local_cpy[ED_n5v] & 0xFF);
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <create_sync_packet+0x26c>)
 8003cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <create_sync_packet+0x268>)
 8003cbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	buffer[43] = ((local_cpy[ED_15v] & 0xFF00) >> 8);
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <create_sync_packet+0x26c>)
 8003cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <create_sync_packet+0x268>)
 8003ccc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	buffer[44] = (local_cpy[ED_15v] & 0xFF);
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <create_sync_packet+0x26c>)
 8003cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <create_sync_packet+0x268>)
 8003cd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	buffer[45] = ((local_cpy[ED_5vref] & 0xFF00) >> 8);
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <create_sync_packet+0x26c>)
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <create_sync_packet+0x268>)
 8003ce8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	buffer[46] = (local_cpy[ED_5vref] & 0xFF);
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <create_sync_packet+0x26c>)
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <create_sync_packet+0x268>)
 8003cf4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	buffer[47] = ((local_cpy[ED_n200v] & 0xFF00) >> 8);
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <create_sync_packet+0x26c>)
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <create_sync_packet+0x268>)
 8003d04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	buffer[48] = (local_cpy[ED_n200v] & 0xFF);
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <create_sync_packet+0x26c>)
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <create_sync_packet+0x268>)
 8003d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	buffer[49] = ((local_cpy[ED_n800v] & 0xFF00) >> 8);
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <create_sync_packet+0x26c>)
 8003d16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	e003      	b.n	8003d28 <create_sync_packet+0x270>
 8003d20:	24001f6c 	.word	0x24001f6c
 8003d24:	24000344 	.word	0x24000344
 8003d28:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <create_sync_packet+0x350>)
 8003d2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	buffer[50] = (local_cpy[ED_n800v] & 0xFF);
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <create_sync_packet+0x354>)
 8003d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <create_sync_packet+0x350>)
 8003d36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	buffer[51] = ((local_cpy[ED_TMP1] & 0xFF00) >> 8);
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <create_sync_packet+0x354>)
 8003d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <create_sync_packet+0x350>)
 8003d46:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	buffer[52] = (local_cpy[ED_TMP1] & 0xFF);
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <create_sync_packet+0x354>)
 8003d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <create_sync_packet+0x350>)
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	buffer[53] = ((local_cpy[ED_single_bit_error_flash] & 0xFF00) >> 8);
 8003d56:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <create_sync_packet+0x354>)
 8003d58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <create_sync_packet+0x350>)
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	buffer[54] = (local_cpy[ED_single_bit_error_flash] & 0xFF);
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <create_sync_packet+0x354>)
 8003d68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <create_sync_packet+0x350>)
 8003d6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	buffer[55] = ((local_cpy[ED_double_bit_error_flash] & 0xFF00) >> 8);
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <create_sync_packet+0x354>)
 8003d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <create_sync_packet+0x350>)
 8003d7e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	buffer[56] = (local_cpy[ED_double_bit_error_flash] & 0xFF);
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <create_sync_packet+0x354>)
 8003d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <create_sync_packet+0x350>)
 8003d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	buffer[57] = ((local_cpy[ED_single_bit_error_ram] & 0xFF00) >> 8);
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <create_sync_packet+0x354>)
 8003d90:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <create_sync_packet+0x350>)
 8003d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	buffer[58] = (local_cpy[ED_single_bit_error_ram] & 0xFF);
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <create_sync_packet+0x354>)
 8003da0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <create_sync_packet+0x350>)
 8003da6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	buffer[59] = ((local_cpy[ED_double_bit_error_ram] & 0xFF00) >> 8);
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <create_sync_packet+0x354>)
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <create_sync_packet+0x350>)
 8003db6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	buffer[60] = (local_cpy[ED_double_bit_error_ram] & 0xFF);
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <create_sync_packet+0x354>)
 8003dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <create_sync_packet+0x350>)
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	buffer[61] = ((local_cpy[ED_UNDEFINED] & 0xFF00) >> 8);
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <create_sync_packet+0x354>)
 8003dc8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <create_sync_packet+0x350>)
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	buffer[62] = (local_cpy[ED_UNDEFINED] & 0xFF);
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <create_sync_packet+0x354>)
 8003dd8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <create_sync_packet+0x350>)
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	buffer[63] = reset_cause.category;
 8003de2:	783a      	ldrb	r2, [r7, #0]
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <create_sync_packet+0x350>)
 8003de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	buffer[64] = reset_cause.detail;
 8003dea:	787a      	ldrb	r2, [r7, #1]
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <create_sync_packet+0x350>)
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_UART_Transmit(&huart1, buffer, SYNC_DATA_SIZE, UART_TIMEOUT_MS);
 8003df2:	2364      	movs	r3, #100	; 0x64
 8003df4:	2241      	movs	r2, #65	; 0x41
 8003df6:	4904      	ldr	r1, [pc, #16]	; (8003e08 <create_sync_packet+0x350>)
 8003df8:	4805      	ldr	r0, [pc, #20]	; (8003e10 <create_sync_packet+0x358>)
 8003dfa:	f011 fbdf 	bl	80155bc <HAL_UART_Transmit>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	24001f6c 	.word	0x24001f6c
 8003e0c:	24000344 	.word	0x24000344
 8003e10:	240024c4 	.word	0x240024c4

08003e14 <create_version_packet>:
 * it over UART.
 *
 * @note V_MAJOR, V_MINOR, and V_PATCH are defined in main.h.
 */
void create_version_packet()
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
	static uint8_t buffer[VERSION_DATA_SIZE];

	buffer[0] = VERSION_SYNCWORD;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <create_version_packet+0x34>)
 8003e1a:	2299      	movs	r2, #153	; 0x99
 8003e1c:	701a      	strb	r2, [r3, #0]
	buffer[1] = VERSION_SYNCWORD;
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <create_version_packet+0x34>)
 8003e20:	2299      	movs	r2, #153	; 0x99
 8003e22:	705a      	strb	r2, [r3, #1]
	buffer[2] = V_MAJOR;
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <create_version_packet+0x34>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	709a      	strb	r2, [r3, #2]
	buffer[3] = V_MINOR;
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <create_version_packet+0x34>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	70da      	strb	r2, [r3, #3]
	buffer[4] = V_PATCH;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <create_version_packet+0x34>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	711a      	strb	r2, [r3, #4]

	HAL_UART_Transmit(&huart1, buffer, VERSION_DATA_SIZE, UART_TIMEOUT_MS);
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	2205      	movs	r2, #5
 8003e3a:	4903      	ldr	r1, [pc, #12]	; (8003e48 <create_version_packet+0x34>)
 8003e3c:	4803      	ldr	r0, [pc, #12]	; (8003e4c <create_version_packet+0x38>)
 8003e3e:	f011 fbbd 	bl	80155bc <HAL_UART_Transmit>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	24001fb0 	.word	0x24001fb0
 8003e4c:	240024c4 	.word	0x240024c4

08003e50 <create_pmt_packet>:
 * This function samples the PMT SPI data, retrieves uptime information,
 * constructs a packet with synchronization bytes and data,
 * and transmits it over UART.
 */
void create_pmt_packet()
{
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	b08b      	sub	sp, #44	; 0x2c
 8003e54:	af0a      	add	r7, sp, #40	; 0x28
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {};
 8003e56:	bf00      	nop
 8003e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e5c:	482a      	ldr	r0, [pc, #168]	; (8003f08 <create_pmt_packet+0xb8>)
 8003e5e:	f008 fbf5 	bl	800c64c <HAL_GPIO_ReadPin>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f7      	bne.n	8003e58 <create_pmt_packet+0x8>

	static Packet_t pmt;
	pmt.size = PMT_DATA_SIZE;
 8003e68:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <create_pmt_packet+0xbc>)
 8003e6a:	220a      	movs	r2, #10
 8003e6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	static uint8_t pmt_spi[2];
	static uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003e70:	4827      	ldr	r0, [pc, #156]	; (8003f10 <create_pmt_packet+0xc0>)
 8003e72:	f001 fd55 	bl	8005920 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003e76:	4827      	ldr	r0, [pc, #156]	; (8003f14 <create_pmt_packet+0xc4>)
 8003e78:	f000 fd0a 	bl	8004890 <sample_pmt_spi>

	pmt.buffer[0] = PMT_SYNCWORD;
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <create_pmt_packet+0xbc>)
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	701a      	strb	r2, [r3, #0]
	pmt.buffer[1] = PMT_SYNCWORD;
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <create_pmt_packet+0xbc>)
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	705a      	strb	r2, [r3, #1]
	pmt.buffer[2] = uptime[0];
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <create_pmt_packet+0xc0>)
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	; (8003f0c <create_pmt_packet+0xbc>)
 8003e8e:	709a      	strb	r2, [r3, #2]
	pmt.buffer[3] = uptime[1];
 8003e90:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <create_pmt_packet+0xc0>)
 8003e92:	785a      	ldrb	r2, [r3, #1]
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <create_pmt_packet+0xbc>)
 8003e96:	70da      	strb	r2, [r3, #3]
	pmt.buffer[4] = uptime[2];
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <create_pmt_packet+0xc0>)
 8003e9a:	789a      	ldrb	r2, [r3, #2]
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <create_pmt_packet+0xbc>)
 8003e9e:	711a      	strb	r2, [r3, #4]
	pmt.buffer[5] = uptime[3];
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <create_pmt_packet+0xc0>)
 8003ea2:	78da      	ldrb	r2, [r3, #3]
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <create_pmt_packet+0xbc>)
 8003ea6:	715a      	strb	r2, [r3, #5]
	pmt.buffer[6] = ((pmt_seq & 0xFF00) >> 8);
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <create_pmt_packet+0xc8>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <create_pmt_packet+0xbc>)
 8003eb4:	719a      	strb	r2, [r3, #6]
	pmt.buffer[7] = (pmt_seq & 0xFF);
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <create_pmt_packet+0xc8>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <create_pmt_packet+0xbc>)
 8003ebe:	71da      	strb	r2, [r3, #7]
	pmt.buffer[8] = pmt_spi[0];
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <create_pmt_packet+0xc4>)
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <create_pmt_packet+0xbc>)
 8003ec6:	721a      	strb	r2, [r3, #8]
	pmt.buffer[9] = pmt_spi[1];
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <create_pmt_packet+0xc4>)
 8003eca:	785a      	ldrb	r2, [r3, #1]
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <create_pmt_packet+0xbc>)
 8003ece:	725a      	strb	r2, [r3, #9]

	enqueue(pmt);
 8003ed0:	4e0e      	ldr	r6, [pc, #56]	; (8003f0c <create_pmt_packet+0xbc>)
 8003ed2:	466c      	mov	r4, sp
 8003ed4:	f106 0510 	add.w	r5, r6, #16
 8003ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	8022      	strh	r2, [r4, #0]
 8003ee6:	3402      	adds	r4, #2
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	7023      	strb	r3, [r4, #0]
 8003eec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ef0:	f000 fa60 	bl	80043b4 <enqueue>

	pmt_seq++;
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <create_pmt_packet+0xc8>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <create_pmt_packet+0xc8>)
 8003efe:	801a      	strh	r2, [r3, #0]
}
 8003f00:	bf00      	nop
 8003f02:	3704      	adds	r7, #4
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f08:	58020000 	.word	0x58020000
 8003f0c:	24001fb8 	.word	0x24001fb8
 8003f10:	24001fec 	.word	0x24001fec
 8003f14:	24001ff0 	.word	0x24001ff0
 8003f18:	24001f62 	.word	0x24001f62

08003f1c <create_erpa_packet>:
 * This function samples the ERPA SPI and ADC data, retrieves uptime information,
 * constructs a packet with synchronization bytes, sequence number, and data,
 * and transmits it over UART.
 */
void create_erpa_packet()
{
 8003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1e:	b08b      	sub	sp, #44	; 0x2c
 8003f20:	af0a      	add	r7, sp, #40	; 0x28
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {};
 8003f22:	bf00      	nop
 8003f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f28:	4839      	ldr	r0, [pc, #228]	; (8004010 <create_erpa_packet+0xf4>)
 8003f2a:	f008 fb8f 	bl	800c64c <HAL_GPIO_ReadPin>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f7      	bne.n	8003f24 <create_erpa_packet+0x8>

	static Packet_t erpa;
	erpa.size = ERPA_DATA_SIZE;
 8003f34:	4b37      	ldr	r3, [pc, #220]	; (8004014 <create_erpa_packet+0xf8>)
 8003f36:	220e      	movs	r2, #14
 8003f38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	static uint8_t erpa_spi[2];
	static uint16_t erpa_adc[1];
	static uint8_t uptime[UPTIME_SIZE];
	static STEP_VALUES sweep_step = INVALID_STEP;

	get_uptime(uptime);
 8003f3c:	4836      	ldr	r0, [pc, #216]	; (8004018 <create_erpa_packet+0xfc>)
 8003f3e:	f001 fcef 	bl	8005920 <get_uptime>
	sweep_step = get_current_step();
 8003f42:	f7ff fd0b 	bl	800395c <get_current_step>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b34      	ldr	r3, [pc, #208]	; (800401c <create_erpa_packet+0x100>)
 8003f4c:	701a      	strb	r2, [r3, #0]

	sample_erpa_spi(erpa_spi);
 8003f4e:	4834      	ldr	r0, [pc, #208]	; (8004020 <create_erpa_packet+0x104>)
 8003f50:	f000 fcbe 	bl	80048d0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003f54:	4833      	ldr	r0, [pc, #204]	; (8004024 <create_erpa_packet+0x108>)
 8003f56:	f000 fcdb 	bl	8004910 <sample_erpa_adc>

	erpa.buffer[0] = ERPA_SYNCWORD;
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <create_erpa_packet+0xf8>)
 8003f5c:	22ee      	movs	r2, #238	; 0xee
 8003f5e:	701a      	strb	r2, [r3, #0]
	erpa.buffer[1] = ERPA_SYNCWORD;
 8003f60:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <create_erpa_packet+0xf8>)
 8003f62:	22ee      	movs	r2, #238	; 0xee
 8003f64:	705a      	strb	r2, [r3, #1]
	erpa.buffer[2] = uptime[0];
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <create_erpa_packet+0xfc>)
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <create_erpa_packet+0xf8>)
 8003f6c:	709a      	strb	r2, [r3, #2]
	erpa.buffer[3] = uptime[1];
 8003f6e:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <create_erpa_packet+0xfc>)
 8003f70:	785a      	ldrb	r2, [r3, #1]
 8003f72:	4b28      	ldr	r3, [pc, #160]	; (8004014 <create_erpa_packet+0xf8>)
 8003f74:	70da      	strb	r2, [r3, #3]
	erpa.buffer[4] = uptime[2];
 8003f76:	4b28      	ldr	r3, [pc, #160]	; (8004018 <create_erpa_packet+0xfc>)
 8003f78:	789a      	ldrb	r2, [r3, #2]
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <create_erpa_packet+0xf8>)
 8003f7c:	711a      	strb	r2, [r3, #4]
	erpa.buffer[5] = uptime[3];
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <create_erpa_packet+0xfc>)
 8003f80:	78da      	ldrb	r2, [r3, #3]
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <create_erpa_packet+0xf8>)
 8003f84:	715a      	strb	r2, [r3, #5]
	erpa.buffer[6] = ((erpa_seq >> 16) & 0xFF);
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <create_erpa_packet+0x10c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <create_erpa_packet+0xf8>)
 8003f90:	719a      	strb	r2, [r3, #6]
	erpa.buffer[7] = ((erpa_seq >> 8) & 0xFF);
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <create_erpa_packet+0x10c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <create_erpa_packet+0xf8>)
 8003f9c:	71da      	strb	r2, [r3, #7]
	erpa.buffer[8] = erpa_seq & 0xFF;
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <create_erpa_packet+0x10c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <create_erpa_packet+0xf8>)
 8003fa6:	721a      	strb	r2, [r3, #8]
	erpa.buffer[9] = sweep_step;
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <create_erpa_packet+0x100>)
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <create_erpa_packet+0xf8>)
 8003fae:	725a      	strb	r2, [r3, #9]
	erpa.buffer[10] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <create_erpa_packet+0x108>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <create_erpa_packet+0xf8>)
 8003fbc:	729a      	strb	r2, [r3, #10]
	erpa.buffer[11] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003fbe:	4b19      	ldr	r3, [pc, #100]	; (8004024 <create_erpa_packet+0x108>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <create_erpa_packet+0xf8>)
 8003fc6:	72da      	strb	r2, [r3, #11]
	erpa.buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <create_erpa_packet+0x104>)
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <create_erpa_packet+0xf8>)
 8003fce:	731a      	strb	r2, [r3, #12]
	erpa.buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <create_erpa_packet+0x104>)
 8003fd2:	785a      	ldrb	r2, [r3, #1]
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <create_erpa_packet+0xf8>)
 8003fd6:	735a      	strb	r2, [r3, #13]

	enqueue(erpa);
 8003fd8:	4e0e      	ldr	r6, [pc, #56]	; (8004014 <create_erpa_packet+0xf8>)
 8003fda:	466c      	mov	r4, sp
 8003fdc:	f106 0510 	add.w	r5, r6, #16
 8003fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	8022      	strh	r2, [r4, #0]
 8003fee:	3402      	adds	r4, #2
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	7023      	strb	r3, [r4, #0]
 8003ff4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ff8:	f000 f9dc 	bl	80043b4 <enqueue>

	erpa_seq++;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <create_erpa_packet+0x10c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <create_erpa_packet+0x10c>)
 8004004:	6013      	str	r3, [r2, #0]
}
 8004006:	bf00      	nop
 8004008:	3704      	adds	r7, #4
 800400a:	46bd      	mov	sp, r7
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400e:	bf00      	nop
 8004010:	58020400 	.word	0x58020400
 8004014:	24001ff4 	.word	0x24001ff4
 8004018:	24002028 	.word	0x24002028
 800401c:	240000c5 	.word	0x240000c5
 8004020:	2400202c 	.word	0x2400202c
 8004024:	24002030 	.word	0x24002030
 8004028:	24001f64 	.word	0x24001f64

0800402c <create_hk_packet>:
 * This function retrieves uptime and UNIX time information, samples the voltage rails,
 * constructs a packet with synchronization bytes, sequence number, and voltage readings,
 * and transmits it over UART.
 */
void create_hk_packet()
{
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	b08b      	sub	sp, #44	; 0x2c
 8004030:	af0a      	add	r7, sp, #40	; 0x28
	static Packet_t hk;
	hk.size = HK_DATA_SIZE;
 8004032:	4b9a      	ldr	r3, [pc, #616]	; (800429c <create_hk_packet+0x270>)
 8004034:	2232      	movs	r2, #50	; 0x32
 8004036:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	static VOLTAGE_RAIL *rail_monitor_ptr;
	static uint8_t timestamp[TIMESTAMP_SIZE];
	static uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800403a:	4899      	ldr	r0, [pc, #612]	; (80042a0 <create_hk_packet+0x274>)
 800403c:	f001 fc70 	bl	8005920 <get_uptime>
	get_unix_time(timestamp);
 8004040:	4898      	ldr	r0, [pc, #608]	; (80042a4 <create_hk_packet+0x278>)
 8004042:	f001 fcbd 	bl	80059c0 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8004046:	f002 facd 	bl	80065e4 <get_rail_monitor>
 800404a:	4603      	mov	r3, r0
 800404c:	4a96      	ldr	r2, [pc, #600]	; (80042a8 <create_hk_packet+0x27c>)
 800404e:	6013      	str	r3, [r2, #0]

	hk.buffer[0] = HK_SYNCWORD;                     	// HK SYNC 0xCC MSB
 8004050:	4b92      	ldr	r3, [pc, #584]	; (800429c <create_hk_packet+0x270>)
 8004052:	22dd      	movs	r2, #221	; 0xdd
 8004054:	701a      	strb	r2, [r3, #0]
	hk.buffer[1] = HK_SYNCWORD;                     	// HK SYNC 0xCC LSB
 8004056:	4b91      	ldr	r3, [pc, #580]	; (800429c <create_hk_packet+0x270>)
 8004058:	22dd      	movs	r2, #221	; 0xdd
 800405a:	705a      	strb	r2, [r3, #1]
	hk.buffer[2] = timestamp[0];
 800405c:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <create_hk_packet+0x278>)
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	4b8e      	ldr	r3, [pc, #568]	; (800429c <create_hk_packet+0x270>)
 8004062:	709a      	strb	r2, [r3, #2]
	hk.buffer[3] = timestamp[1];
 8004064:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <create_hk_packet+0x278>)
 8004066:	785a      	ldrb	r2, [r3, #1]
 8004068:	4b8c      	ldr	r3, [pc, #560]	; (800429c <create_hk_packet+0x270>)
 800406a:	70da      	strb	r2, [r3, #3]
	hk.buffer[4] = timestamp[2];
 800406c:	4b8d      	ldr	r3, [pc, #564]	; (80042a4 <create_hk_packet+0x278>)
 800406e:	789a      	ldrb	r2, [r3, #2]
 8004070:	4b8a      	ldr	r3, [pc, #552]	; (800429c <create_hk_packet+0x270>)
 8004072:	711a      	strb	r2, [r3, #4]
	hk.buffer[5] = timestamp[3];
 8004074:	4b8b      	ldr	r3, [pc, #556]	; (80042a4 <create_hk_packet+0x278>)
 8004076:	78da      	ldrb	r2, [r3, #3]
 8004078:	4b88      	ldr	r3, [pc, #544]	; (800429c <create_hk_packet+0x270>)
 800407a:	715a      	strb	r2, [r3, #5]
	hk.buffer[6] = timestamp[4];
 800407c:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <create_hk_packet+0x278>)
 800407e:	791a      	ldrb	r2, [r3, #4]
 8004080:	4b86      	ldr	r3, [pc, #536]	; (800429c <create_hk_packet+0x270>)
 8004082:	719a      	strb	r2, [r3, #6]
	hk.buffer[7] = timestamp[5];
 8004084:	4b87      	ldr	r3, [pc, #540]	; (80042a4 <create_hk_packet+0x278>)
 8004086:	795a      	ldrb	r2, [r3, #5]
 8004088:	4b84      	ldr	r3, [pc, #528]	; (800429c <create_hk_packet+0x270>)
 800408a:	71da      	strb	r2, [r3, #7]
	hk.buffer[8] = uptime[0];
 800408c:	4b84      	ldr	r3, [pc, #528]	; (80042a0 <create_hk_packet+0x274>)
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	4b82      	ldr	r3, [pc, #520]	; (800429c <create_hk_packet+0x270>)
 8004092:	721a      	strb	r2, [r3, #8]
	hk.buffer[9] = uptime[1];
 8004094:	4b82      	ldr	r3, [pc, #520]	; (80042a0 <create_hk_packet+0x274>)
 8004096:	785a      	ldrb	r2, [r3, #1]
 8004098:	4b80      	ldr	r3, [pc, #512]	; (800429c <create_hk_packet+0x270>)
 800409a:	725a      	strb	r2, [r3, #9]
	hk.buffer[10] = uptime[2];
 800409c:	4b80      	ldr	r3, [pc, #512]	; (80042a0 <create_hk_packet+0x274>)
 800409e:	789a      	ldrb	r2, [r3, #2]
 80040a0:	4b7e      	ldr	r3, [pc, #504]	; (800429c <create_hk_packet+0x270>)
 80040a2:	729a      	strb	r2, [r3, #10]
	hk.buffer[11] = uptime[3];
 80040a4:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <create_hk_packet+0x274>)
 80040a6:	78da      	ldrb	r2, [r3, #3]
 80040a8:	4b7c      	ldr	r3, [pc, #496]	; (800429c <create_hk_packet+0x270>)
 80040aa:	72da      	strb	r2, [r3, #11]
	hk.buffer[12] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80040ac:	4b7f      	ldr	r3, [pc, #508]	; (80042ac <create_hk_packet+0x280>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b79      	ldr	r3, [pc, #484]	; (800429c <create_hk_packet+0x270>)
 80040b8:	731a      	strb	r2, [r3, #12]
	hk.buffer[13] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80040ba:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <create_hk_packet+0x280>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b76      	ldr	r3, [pc, #472]	; (800429c <create_hk_packet+0x270>)
 80040c2:	735a      	strb	r2, [r3, #13]
	hk.buffer[14] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <create_hk_packet+0x27c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	889b      	ldrh	r3, [r3, #4]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b72      	ldr	r3, [pc, #456]	; (800429c <create_hk_packet+0x270>)
 80040d2:	739a      	strb	r2, [r3, #14]
	hk.buffer[15] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 80040d4:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <create_hk_packet+0x27c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	889b      	ldrh	r3, [r3, #4]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b6f      	ldr	r3, [pc, #444]	; (800429c <create_hk_packet+0x270>)
 80040de:	73da      	strb	r2, [r3, #15]
	hk.buffer[16] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80040e0:	4b71      	ldr	r3, [pc, #452]	; (80042a8 <create_hk_packet+0x27c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3310      	adds	r3, #16
 80040e6:	889b      	ldrh	r3, [r3, #4]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b6b      	ldr	r3, [pc, #428]	; (800429c <create_hk_packet+0x270>)
 80040f0:	741a      	strb	r2, [r3, #16]
	hk.buffer[17] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80040f2:	4b6d      	ldr	r3, [pc, #436]	; (80042a8 <create_hk_packet+0x27c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3310      	adds	r3, #16
 80040f8:	889b      	ldrh	r3, [r3, #4]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	4b67      	ldr	r3, [pc, #412]	; (800429c <create_hk_packet+0x270>)
 80040fe:	745a      	strb	r2, [r3, #17]
	hk.buffer[18] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8004100:	4b69      	ldr	r3, [pc, #420]	; (80042a8 <create_hk_packet+0x27c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3360      	adds	r3, #96	; 0x60
 8004106:	889b      	ldrh	r3, [r3, #4]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	b29b      	uxth	r3, r3
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4b63      	ldr	r3, [pc, #396]	; (800429c <create_hk_packet+0x270>)
 8004110:	749a      	strb	r2, [r3, #18]
	hk.buffer[19] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8004112:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <create_hk_packet+0x27c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3360      	adds	r3, #96	; 0x60
 8004118:	889b      	ldrh	r3, [r3, #4]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b5f      	ldr	r3, [pc, #380]	; (800429c <create_hk_packet+0x270>)
 800411e:	74da      	strb	r2, [r3, #19]
	hk.buffer[20] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8004120:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <create_hk_packet+0x27c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3370      	adds	r3, #112	; 0x70
 8004126:	889b      	ldrh	r3, [r3, #4]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	b29b      	uxth	r3, r3
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b5b      	ldr	r3, [pc, #364]	; (800429c <create_hk_packet+0x270>)
 8004130:	751a      	strb	r2, [r3, #20]
	hk.buffer[21] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8004132:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <create_hk_packet+0x27c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3370      	adds	r3, #112	; 0x70
 8004138:	889b      	ldrh	r3, [r3, #4]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b57      	ldr	r3, [pc, #348]	; (800429c <create_hk_packet+0x270>)
 800413e:	755a      	strb	r2, [r3, #21]
	hk.buffer[22] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <create_hk_packet+0x27c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3380      	adds	r3, #128	; 0x80
 8004146:	889b      	ldrh	r3, [r3, #4]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	b29b      	uxth	r3, r3
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b53      	ldr	r3, [pc, #332]	; (800429c <create_hk_packet+0x270>)
 8004150:	759a      	strb	r2, [r3, #22]
	hk.buffer[23] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8004152:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <create_hk_packet+0x27c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3380      	adds	r3, #128	; 0x80
 8004158:	889b      	ldrh	r3, [r3, #4]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	4b4f      	ldr	r3, [pc, #316]	; (800429c <create_hk_packet+0x270>)
 800415e:	75da      	strb	r2, [r3, #23]
	hk.buffer[24] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8004160:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <create_hk_packet+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3390      	adds	r3, #144	; 0x90
 8004166:	889b      	ldrh	r3, [r3, #4]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	b29b      	uxth	r3, r3
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b4b      	ldr	r3, [pc, #300]	; (800429c <create_hk_packet+0x270>)
 8004170:	761a      	strb	r2, [r3, #24]
	hk.buffer[25] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8004172:	4b4d      	ldr	r3, [pc, #308]	; (80042a8 <create_hk_packet+0x27c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3390      	adds	r3, #144	; 0x90
 8004178:	889b      	ldrh	r3, [r3, #4]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b47      	ldr	r3, [pc, #284]	; (800429c <create_hk_packet+0x270>)
 800417e:	765a      	strb	r2, [r3, #25]
	hk.buffer[26] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8004180:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <create_hk_packet+0x27c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	33a0      	adds	r3, #160	; 0xa0
 8004186:	889b      	ldrh	r3, [r3, #4]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	b29b      	uxth	r3, r3
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4b43      	ldr	r3, [pc, #268]	; (800429c <create_hk_packet+0x270>)
 8004190:	769a      	strb	r2, [r3, #26]
	hk.buffer[27] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8004192:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <create_hk_packet+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	33a0      	adds	r3, #160	; 0xa0
 8004198:	889b      	ldrh	r3, [r3, #4]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	4b3f      	ldr	r3, [pc, #252]	; (800429c <create_hk_packet+0x270>)
 800419e:	76da      	strb	r2, [r3, #27]
	hk.buffer[28] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80041a0:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <create_hk_packet+0x27c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	33b0      	adds	r3, #176	; 0xb0
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <create_hk_packet+0x270>)
 80041b0:	771a      	strb	r2, [r3, #28]
	hk.buffer[29] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <create_hk_packet+0x27c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	33b0      	adds	r3, #176	; 0xb0
 80041b8:	889b      	ldrh	r3, [r3, #4]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	4b37      	ldr	r3, [pc, #220]	; (800429c <create_hk_packet+0x270>)
 80041be:	775a      	strb	r2, [r3, #29]
	hk.buffer[30] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <create_hk_packet+0x27c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	33c0      	adds	r3, #192	; 0xc0
 80041c6:	889b      	ldrh	r3, [r3, #4]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4b33      	ldr	r3, [pc, #204]	; (800429c <create_hk_packet+0x270>)
 80041d0:	779a      	strb	r2, [r3, #30]
	hk.buffer[31] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80041d2:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <create_hk_packet+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	33c0      	adds	r3, #192	; 0xc0
 80041d8:	889b      	ldrh	r3, [r3, #4]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b2f      	ldr	r3, [pc, #188]	; (800429c <create_hk_packet+0x270>)
 80041de:	77da      	strb	r2, [r3, #31]
	hk.buffer[32] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <create_hk_packet+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	33d0      	adds	r3, #208	; 0xd0
 80041e6:	889b      	ldrh	r3, [r3, #4]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b2b      	ldr	r3, [pc, #172]	; (800429c <create_hk_packet+0x270>)
 80041f0:	f883 2020 	strb.w	r2, [r3, #32]
	hk.buffer[33] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <create_hk_packet+0x27c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	33d0      	adds	r3, #208	; 0xd0
 80041fa:	889b      	ldrh	r3, [r3, #4]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b27      	ldr	r3, [pc, #156]	; (800429c <create_hk_packet+0x270>)
 8004200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hk.buffer[34] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8004204:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <create_hk_packet+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	33e0      	adds	r3, #224	; 0xe0
 800420a:	889b      	ldrh	r3, [r3, #4]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	b29b      	uxth	r3, r3
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <create_hk_packet+0x270>)
 8004214:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hk.buffer[35] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8004218:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <create_hk_packet+0x27c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	33e0      	adds	r3, #224	; 0xe0
 800421e:	889b      	ldrh	r3, [r3, #4]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b1e      	ldr	r3, [pc, #120]	; (800429c <create_hk_packet+0x270>)
 8004224:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	hk.buffer[36] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <create_hk_packet+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	33f0      	adds	r3, #240	; 0xf0
 800422e:	889b      	ldrh	r3, [r3, #4]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	b29b      	uxth	r3, r3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b19      	ldr	r3, [pc, #100]	; (800429c <create_hk_packet+0x270>)
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hk.buffer[37] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <create_hk_packet+0x27c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	33f0      	adds	r3, #240	; 0xf0
 8004242:	889b      	ldrh	r3, [r3, #4]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <create_hk_packet+0x270>)
 8004248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	hk.buffer[38] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 800424c:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <create_hk_packet+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004254:	889b      	ldrh	r3, [r3, #4]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b29b      	uxth	r3, r3
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <create_hk_packet+0x270>)
 800425e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	hk.buffer[39] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <create_hk_packet+0x27c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800426a:	889b      	ldrh	r3, [r3, #4]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <create_hk_packet+0x270>)
 8004270:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	hk.buffer[40] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <create_hk_packet+0x27c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3320      	adds	r3, #32
 800427a:	889b      	ldrh	r3, [r3, #4]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <create_hk_packet+0x270>)
 8004284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	hk.buffer[41] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <create_hk_packet+0x27c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3320      	adds	r3, #32
 800428e:	889b      	ldrh	r3, [r3, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b02      	ldr	r3, [pc, #8]	; (800429c <create_hk_packet+0x270>)
 8004294:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004298:	e00a      	b.n	80042b0 <create_hk_packet+0x284>
 800429a:	bf00      	nop
 800429c:	24002034 	.word	0x24002034
 80042a0:	24002068 	.word	0x24002068
 80042a4:	2400206c 	.word	0x2400206c
 80042a8:	24002074 	.word	0x24002074
 80042ac:	24001f68 	.word	0x24001f68
	hk.buffer[42] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80042b0:	4b32      	ldr	r3, [pc, #200]	; (800437c <create_hk_packet+0x350>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3330      	adds	r3, #48	; 0x30
 80042b6:	889b      	ldrh	r3, [r3, #4]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <create_hk_packet+0x354>)
 80042c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	hk.buffer[43] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80042c4:	4b2d      	ldr	r3, [pc, #180]	; (800437c <create_hk_packet+0x350>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3330      	adds	r3, #48	; 0x30
 80042ca:	889b      	ldrh	r3, [r3, #4]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <create_hk_packet+0x354>)
 80042d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	hk.buffer[44] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <create_hk_packet+0x350>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3340      	adds	r3, #64	; 0x40
 80042da:	889b      	ldrh	r3, [r3, #4]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	b29b      	uxth	r3, r3
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <create_hk_packet+0x354>)
 80042e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hk.buffer[45] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <create_hk_packet+0x350>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3340      	adds	r3, #64	; 0x40
 80042ee:	889b      	ldrh	r3, [r3, #4]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <create_hk_packet+0x354>)
 80042f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	hk.buffer[46] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <create_hk_packet+0x350>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3350      	adds	r3, #80	; 0x50
 80042fe:	889b      	ldrh	r3, [r3, #4]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2da      	uxtb	r2, r3
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <create_hk_packet+0x354>)
 8004308:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	hk.buffer[47] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <create_hk_packet+0x350>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3350      	adds	r3, #80	; 0x50
 8004312:	889b      	ldrh	r3, [r3, #4]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <create_hk_packet+0x354>)
 8004318:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	hk.buffer[48] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <create_hk_packet+0x350>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004324:	889b      	ldrh	r3, [r3, #4]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	b29b      	uxth	r3, r3
 800432a:	b2da      	uxtb	r2, r3
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <create_hk_packet+0x354>)
 800432e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hk.buffer[49] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <create_hk_packet+0x350>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800433a:	889b      	ldrh	r3, [r3, #4]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <create_hk_packet+0x354>)
 8004340:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	enqueue(hk);
 8004344:	4e0e      	ldr	r6, [pc, #56]	; (8004380 <create_hk_packet+0x354>)
 8004346:	466c      	mov	r4, sp
 8004348:	f106 0510 	add.w	r5, r6, #16
 800434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800434e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	8022      	strh	r2, [r4, #0]
 800435a:	3402      	adds	r4, #2
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	7023      	strb	r3, [r4, #0]
 8004360:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004364:	f000 f826 	bl	80043b4 <enqueue>

	hk_seq++;
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <create_hk_packet+0x358>)
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <create_hk_packet+0x358>)
 8004372:	801a      	strh	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	3704      	adds	r7, #4
 8004378:	46bd      	mov	sp, r7
 800437a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437c:	24002074 	.word	0x24002074
 8004380:	24002034 	.word	0x24002034
 8004384:	24001f68 	.word	0x24001f68

08004388 <reset_packet_sequence_numbers>:
 *
 * This function sets the sequence counters for the PMT, ERPA, and housekeeping (HK) packets
 * back to zero. It is useful for reinitializing the packet transmission system.
 */
void reset_packet_sequence_numbers()
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <reset_packet_sequence_numbers+0x20>)
 800438e:	2200      	movs	r2, #0
 8004390:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <reset_packet_sequence_numbers+0x24>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <reset_packet_sequence_numbers+0x28>)
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	24001f62 	.word	0x24001f62
 80043ac:	24001f64 	.word	0x24001f64
 80043b0:	24001f68 	.word	0x24001f68

080043b4 <enqueue>:
{
	packet_queue = osMessageQueueNew(MAX_MESSAGES, MAX_MESSAGE_SIZE, &queue_attribute);
}

void enqueue(Packet_t packet)
{
 80043b4:	b084      	sub	sp, #16
 80043b6:	b580      	push	{r7, lr}
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	f107 0c08 	add.w	ip, r7, #8
 80043be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osMessageQueuePut(packet_queue, &packet, 0U, 0U);
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <enqueue+0x2c>)
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	2200      	movs	r2, #0
 80043ca:	f107 0108 	add.w	r1, r7, #8
 80043ce:	f014 f977 	bl	80186c0 <osMessageQueuePut>
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043da:	b004      	add	sp, #16
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	24002078 	.word	0x24002078

080043e4 <dequeue>:

Packet_t dequeue()
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b091      	sub	sp, #68	; 0x44
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	Packet_t dequeued_packet;
	if (osMessageQueueGet(packet_queue, &dequeued_packet, 0U, 0U) != osOK)
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <dequeue+0x5c>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	f107 010c 	add.w	r1, r7, #12
 80043f4:	2300      	movs	r3, #0
 80043f6:	2200      	movs	r2, #0
 80043f8:	f014 f9c2 	bl	8018780 <osMessageQueueGet>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <dequeue+0x24>
	{
		dequeued_packet.size = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}
	return dequeued_packet;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f107 040c 	add.w	r4, r7, #12
 800440e:	469c      	mov	ip, r3
 8004410:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004414:	4665      	mov	r5, ip
 8004416:	4626      	mov	r6, r4
 8004418:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800441a:	6028      	str	r0, [r5, #0]
 800441c:	6069      	str	r1, [r5, #4]
 800441e:	60aa      	str	r2, [r5, #8]
 8004420:	60eb      	str	r3, [r5, #12]
 8004422:	3410      	adds	r4, #16
 8004424:	f10c 0c10 	add.w	ip, ip, #16
 8004428:	4574      	cmp	r4, lr
 800442a:	d1f3      	bne.n	8004414 <dequeue+0x30>
 800442c:	4663      	mov	r3, ip
 800442e:	4622      	mov	r2, r4
 8004430:	8811      	ldrh	r1, [r2, #0]
 8004432:	7892      	ldrb	r2, [r2, #2]
 8004434:	8019      	strh	r1, [r3, #0]
 8004436:	709a      	strb	r2, [r3, #2]
}
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	3744      	adds	r7, #68	; 0x44
 800443c:	46bd      	mov	sp, r7
 800443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004440:	24002078 	.word	0x24002078

08004444 <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc3_m1;
RAMECC_HandleTypeDef hramecc3_m2;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RAMECC_Init 0 */
	// ITCM and DTCM will trigger ECC error if not written to on startup
	write_RAM((volatile uint32_t*) ITCM_START_ADDRESS, (volatile uint32_t*) ITCM_END_ADDRESS);
 8004448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800444c:	2000      	movs	r0, #0
 800444e:	f000 f8e9 	bl	8004624 <write_RAM>
	write_RAM((volatile uint32_t*) DTCM_START_ADDRESS, (volatile uint32_t*) DTCM_END_ADDRESS);
 8004452:	495b      	ldr	r1, [pc, #364]	; (80045c0 <MX_RAMECC_Init+0x17c>)
 8004454:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004458:	f000 f8e4 	bl	8004624 <write_RAM>

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC1 M1 : AXI SRAM
  */
  hramecc1_m1.Instance = RAMECC1_Monitor1;
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <MX_RAMECC_Init+0x180>)
 800445e:	4a5a      	ldr	r2, [pc, #360]	; (80045c8 <MX_RAMECC_Init+0x184>)
 8004460:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 8004462:	4858      	ldr	r0, [pc, #352]	; (80045c4 <MX_RAMECC_Init+0x180>)
 8004464:	f00a fd5e 	bl	800ef24 <HAL_RAMECC_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_RAMECC_Init+0x2e>
  {
    Error_Handler();
 800446e:	f7ff fb13 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC1 M2 : ITCM-RAM
  */
  hramecc1_m2.Instance = RAMECC1_Monitor2;
 8004472:	4b56      	ldr	r3, [pc, #344]	; (80045cc <MX_RAMECC_Init+0x188>)
 8004474:	4a56      	ldr	r2, [pc, #344]	; (80045d0 <MX_RAMECC_Init+0x18c>)
 8004476:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 8004478:	4854      	ldr	r0, [pc, #336]	; (80045cc <MX_RAMECC_Init+0x188>)
 800447a:	f00a fd53 	bl	800ef24 <HAL_RAMECC_Init>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_RAMECC_Init+0x44>
  {
    Error_Handler();
 8004484:	f7ff fb08 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC1 M3 : D0TCM-RAM
  */
  hramecc1_m3.Instance = RAMECC1_Monitor3;
 8004488:	4b52      	ldr	r3, [pc, #328]	; (80045d4 <MX_RAMECC_Init+0x190>)
 800448a:	4a53      	ldr	r2, [pc, #332]	; (80045d8 <MX_RAMECC_Init+0x194>)
 800448c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 800448e:	4851      	ldr	r0, [pc, #324]	; (80045d4 <MX_RAMECC_Init+0x190>)
 8004490:	f00a fd48 	bl	800ef24 <HAL_RAMECC_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_RAMECC_Init+0x5a>
  {
    Error_Handler();
 800449a:	f7ff fafd 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC1 M4 : D1TCM-RAM
  */
  hramecc1_m4.Instance = RAMECC1_Monitor4;
 800449e:	4b4f      	ldr	r3, [pc, #316]	; (80045dc <MX_RAMECC_Init+0x198>)
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <MX_RAMECC_Init+0x19c>)
 80044a2:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 80044a4:	484d      	ldr	r0, [pc, #308]	; (80045dc <MX_RAMECC_Init+0x198>)
 80044a6:	f00a fd3d 	bl	800ef24 <HAL_RAMECC_Init>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <MX_RAMECC_Init+0x70>
  {
    Error_Handler();
 80044b0:	f7ff faf2 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC1 M5 : ETM RAM
  */
  hramecc1_m5.Instance = RAMECC1_Monitor5;
 80044b4:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <MX_RAMECC_Init+0x1a0>)
 80044b6:	4a4c      	ldr	r2, [pc, #304]	; (80045e8 <MX_RAMECC_Init+0x1a4>)
 80044b8:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 80044ba:	484a      	ldr	r0, [pc, #296]	; (80045e4 <MX_RAMECC_Init+0x1a0>)
 80044bc:	f00a fd32 	bl	800ef24 <HAL_RAMECC_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_RAMECC_Init+0x86>
  {
    Error_Handler();
 80044c6:	f7ff fae7 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 80044ca:	4b48      	ldr	r3, [pc, #288]	; (80045ec <MX_RAMECC_Init+0x1a8>)
 80044cc:	4a48      	ldr	r2, [pc, #288]	; (80045f0 <MX_RAMECC_Init+0x1ac>)
 80044ce:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 80044d0:	4846      	ldr	r0, [pc, #280]	; (80045ec <MX_RAMECC_Init+0x1a8>)
 80044d2:	f00a fd27 	bl	800ef24 <HAL_RAMECC_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <MX_RAMECC_Init+0x9c>
  {
    Error_Handler();
 80044dc:	f7ff fadc 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC2 M2 SRAM1_1
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 80044e0:	4b44      	ldr	r3, [pc, #272]	; (80045f4 <MX_RAMECC_Init+0x1b0>)
 80044e2:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <MX_RAMECC_Init+0x1b4>)
 80044e4:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 80044e6:	4843      	ldr	r0, [pc, #268]	; (80045f4 <MX_RAMECC_Init+0x1b0>)
 80044e8:	f00a fd1c 	bl	800ef24 <HAL_RAMECC_Init>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_RAMECC_Init+0xb2>
  {
    Error_Handler();
 80044f2:	f7ff fad1 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC2 M3 : SRAM2_0
  */
  hramecc2_m3.Instance = RAMECC2_Monitor3;
 80044f6:	4b41      	ldr	r3, [pc, #260]	; (80045fc <MX_RAMECC_Init+0x1b8>)
 80044f8:	4a41      	ldr	r2, [pc, #260]	; (8004600 <MX_RAMECC_Init+0x1bc>)
 80044fa:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 80044fc:	483f      	ldr	r0, [pc, #252]	; (80045fc <MX_RAMECC_Init+0x1b8>)
 80044fe:	f00a fd11 	bl	800ef24 <HAL_RAMECC_Init>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_RAMECC_Init+0xc8>
  {
    Error_Handler();
 8004508:	f7ff fac6 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC2 M4 : SRAM2_1
  */
  hramecc2_m4.Instance = RAMECC2_Monitor4;
 800450c:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <MX_RAMECC_Init+0x1c0>)
 800450e:	4a3e      	ldr	r2, [pc, #248]	; (8004608 <MX_RAMECC_Init+0x1c4>)
 8004510:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 8004512:	483c      	ldr	r0, [pc, #240]	; (8004604 <MX_RAMECC_Init+0x1c0>)
 8004514:	f00a fd06 	bl	800ef24 <HAL_RAMECC_Init>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_RAMECC_Init+0xde>
  {
    Error_Handler();
 800451e:	f7ff fabb 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC2 M5 : SRAM3
  */
  hramecc2_m5.Instance = RAMECC2_Monitor5;
 8004522:	4b3a      	ldr	r3, [pc, #232]	; (800460c <MX_RAMECC_Init+0x1c8>)
 8004524:	4a3a      	ldr	r2, [pc, #232]	; (8004610 <MX_RAMECC_Init+0x1cc>)
 8004526:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 8004528:	4838      	ldr	r0, [pc, #224]	; (800460c <MX_RAMECC_Init+0x1c8>)
 800452a:	f00a fcfb 	bl	800ef24 <HAL_RAMECC_Init>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_RAMECC_Init+0xf4>
  {
    Error_Handler();
 8004534:	f7ff fab0 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 8004538:	4b36      	ldr	r3, [pc, #216]	; (8004614 <MX_RAMECC_Init+0x1d0>)
 800453a:	4a37      	ldr	r2, [pc, #220]	; (8004618 <MX_RAMECC_Init+0x1d4>)
 800453c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800453e:	4835      	ldr	r0, [pc, #212]	; (8004614 <MX_RAMECC_Init+0x1d0>)
 8004540:	f00a fcf0 	bl	800ef24 <HAL_RAMECC_Init>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_RAMECC_Init+0x10a>
  {
    Error_Handler();
 800454a:	f7ff faa5 	bl	8003a98 <Error_Handler>
  }

  /** Initialize RAMECC3 M2 : Backup RAM
  */
  hramecc3_m2.Instance = RAMECC3_Monitor2;
 800454e:	4b33      	ldr	r3, [pc, #204]	; (800461c <MX_RAMECC_Init+0x1d8>)
 8004550:	4a33      	ldr	r2, [pc, #204]	; (8004620 <MX_RAMECC_Init+0x1dc>)
 8004552:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 8004554:	4831      	ldr	r0, [pc, #196]	; (800461c <MX_RAMECC_Init+0x1d8>)
 8004556:	f00a fce5 	bl	800ef24 <HAL_RAMECC_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_RAMECC_Init+0x120>
  {
    Error_Handler();
 8004560:	f7ff fa9a 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */
	HAL_NVIC_SetPriority(ECC_IRQn, 0, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	2091      	movs	r0, #145	; 0x91
 800456a:	f003 ff6b 	bl	8008444 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ECC_IRQn);
 800456e:	2091      	movs	r0, #145	; 0x91
 8004570:	f003 ff82 	bl	8008478 <HAL_NVIC_EnableIRQ>

	enable_ramecc_monitor_notifications(&hramecc1_m1);
 8004574:	4813      	ldr	r0, [pc, #76]	; (80045c4 <MX_RAMECC_Init+0x180>)
 8004576:	f000 f86d 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m2);
 800457a:	4814      	ldr	r0, [pc, #80]	; (80045cc <MX_RAMECC_Init+0x188>)
 800457c:	f000 f86a 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m3);
 8004580:	4814      	ldr	r0, [pc, #80]	; (80045d4 <MX_RAMECC_Init+0x190>)
 8004582:	f000 f867 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m4);
 8004586:	4815      	ldr	r0, [pc, #84]	; (80045dc <MX_RAMECC_Init+0x198>)
 8004588:	f000 f864 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m5);
 800458c:	4815      	ldr	r0, [pc, #84]	; (80045e4 <MX_RAMECC_Init+0x1a0>)
 800458e:	f000 f861 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m1);
 8004592:	4816      	ldr	r0, [pc, #88]	; (80045ec <MX_RAMECC_Init+0x1a8>)
 8004594:	f000 f85e 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m2);
 8004598:	4816      	ldr	r0, [pc, #88]	; (80045f4 <MX_RAMECC_Init+0x1b0>)
 800459a:	f000 f85b 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m3);
 800459e:	4817      	ldr	r0, [pc, #92]	; (80045fc <MX_RAMECC_Init+0x1b8>)
 80045a0:	f000 f858 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m4);
 80045a4:	4817      	ldr	r0, [pc, #92]	; (8004604 <MX_RAMECC_Init+0x1c0>)
 80045a6:	f000 f855 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m5);
 80045aa:	4818      	ldr	r0, [pc, #96]	; (800460c <MX_RAMECC_Init+0x1c8>)
 80045ac:	f000 f852 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m1);
 80045b0:	4818      	ldr	r0, [pc, #96]	; (8004614 <MX_RAMECC_Init+0x1d0>)
 80045b2:	f000 f84f 	bl	8004654 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m2);
 80045b6:	4819      	ldr	r0, [pc, #100]	; (800461c <MX_RAMECC_Init+0x1d8>)
 80045b8:	f000 f84c 	bl	8004654 <enable_ramecc_monitor_notifications>
  /* USER CODE END RAMECC_Init 2 */

}
 80045bc:	bf00      	nop
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2001ffff 	.word	0x2001ffff
 80045c4:	2400207c 	.word	0x2400207c
 80045c8:	52009020 	.word	0x52009020
 80045cc:	2400208c 	.word	0x2400208c
 80045d0:	52009040 	.word	0x52009040
 80045d4:	2400209c 	.word	0x2400209c
 80045d8:	52009060 	.word	0x52009060
 80045dc:	240020ac 	.word	0x240020ac
 80045e0:	52009080 	.word	0x52009080
 80045e4:	240020bc 	.word	0x240020bc
 80045e8:	520090a0 	.word	0x520090a0
 80045ec:	240020cc 	.word	0x240020cc
 80045f0:	48023020 	.word	0x48023020
 80045f4:	240020dc 	.word	0x240020dc
 80045f8:	48023040 	.word	0x48023040
 80045fc:	240020ec 	.word	0x240020ec
 8004600:	48023060 	.word	0x48023060
 8004604:	240020fc 	.word	0x240020fc
 8004608:	48023080 	.word	0x48023080
 800460c:	2400210c 	.word	0x2400210c
 8004610:	480230a0 	.word	0x480230a0
 8004614:	2400211c 	.word	0x2400211c
 8004618:	58027020 	.word	0x58027020
 800461c:	2400212c 	.word	0x2400212c
 8004620:	58027040 	.word	0x58027040

08004624 <write_RAM>:
 *
 * @param start Pointer to the starting address of the RAM range.
 * @param end Pointer to the ending address of the RAM range.
 */
void write_RAM(volatile uint32_t *start, volatile uint32_t *end)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	while (start <= end)
 800462e:	e005      	b.n	800463c <write_RAM+0x18>
	{
		*start = 0;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
		start++;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	607b      	str	r3, [r7, #4]
	while (start <= end)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d9f5      	bls.n	8004630 <write_RAM+0xc>
	}
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <enable_ramecc_monitor_notifications>:
 * @brief Enables notifications for RAMECC monitoring.
 *
 * @param hramecc Pointer to the RAMECC handle.
 */
void enable_ramecc_monitor_notifications(RAMECC_HandleTypeDef *hramecc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	if (HAL_RAMECC_EnableNotification(hramecc, (RAMECC_IT_MONITOR_SINGLEERR_R | RAMECC_IT_MONITOR_DOUBLEERR_R)) != HAL_OK)
 800465c:	490a      	ldr	r1, [pc, #40]	; (8004688 <enable_ramecc_monitor_notifications+0x34>)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f00a fcc4 	bl	800efec <HAL_RAMECC_EnableNotification>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <enable_ramecc_monitor_notifications+0x1a>
	{
		Error_Handler();
 800466a:	f7ff fa15 	bl	8003a98 <Error_Handler>
	}
	if (HAL_RAMECC_StartMonitor(hramecc) != HAL_OK)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f00a fc98 	bl	800efa4 <HAL_RAMECC_StartMonitor>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <enable_ramecc_monitor_notifications+0x2a>
	{
		Error_Handler();
 800467a:	f7ff fa0d 	bl	8003a98 <Error_Handler>
	}
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2000000c 	.word	0x2000000c

0800468c <HAL_RAMECC_DetectErrorCallback>:
 * This function handles single and double bit errors detected by RAMECC.
 *
 * @param hramecc Pointer to the RAMECC handle.
 */
void HAL_RAMECC_DetectErrorCallback(RAMECC_HandleTypeDef *hramecc)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_seu;
 8004694:	2301      	movs	r3, #1
 8004696:	723b      	strb	r3, [r7, #8]
	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_SINGLEERROR_DETECTED) != 0U)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f00a fd43 	bl	800f124 <HAL_RAMECC_GetRAMECCError>
 800469e:	4603      	mov	r3, r0
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_RAMECC_DetectErrorCallback+0x20>
	{
		error.detail = ED_single_bit_error_ram;
 80046a8:	231a      	movs	r3, #26
 80046aa:	727b      	strb	r3, [r7, #9]
	}

	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_DOUBLEERROR_DETECTED) != 0U)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f00a fd39 	bl	800f124 <HAL_RAMECC_GetRAMECCError>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_RAMECC_DetectErrorCallback+0x34>
	{
		error.detail = ED_double_bit_error_ram;
 80046bc:	231b      	movs	r3, #27
 80046be:	727b      	strb	r3, [r7, #9]
	}
	handle_error(error);
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046c8:	f7fd fc32 	bl	8001f30 <handle_error>
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80046e8:	2300      	movs	r3, #0
 80046ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80046ec:	4b26      	ldr	r3, [pc, #152]	; (8004788 <MX_RTC_Init+0xb4>)
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <MX_RTC_Init+0xb8>)
 80046f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046f2:	4b25      	ldr	r3, [pc, #148]	; (8004788 <MX_RTC_Init+0xb4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80046f8:	4b23      	ldr	r3, [pc, #140]	; (8004788 <MX_RTC_Init+0xb4>)
 80046fa:	2263      	movs	r2, #99	; 0x63
 80046fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80046fe:	4b22      	ldr	r3, [pc, #136]	; (8004788 <MX_RTC_Init+0xb4>)
 8004700:	f242 720f 	movw	r2, #9999	; 0x270f
 8004704:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <MX_RTC_Init+0xb4>)
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <MX_RTC_Init+0xb4>)
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <MX_RTC_Init+0xb4>)
 8004714:	2200      	movs	r2, #0
 8004716:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004718:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <MX_RTC_Init+0xb4>)
 800471a:	2200      	movs	r2, #0
 800471c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800471e:	481a      	ldr	r0, [pc, #104]	; (8004788 <MX_RTC_Init+0xb4>)
 8004720:	f00e fa32 	bl	8012b88 <HAL_RTC_Init>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800472a:	f7ff f9b5 	bl	8003a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800472e:	2300      	movs	r3, #0
 8004730:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004732:	2300      	movs	r3, #0
 8004734:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004736:	2300      	movs	r3, #0
 8004738:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	2201      	movs	r2, #1
 8004746:	4619      	mov	r1, r3
 8004748:	480f      	ldr	r0, [pc, #60]	; (8004788 <MX_RTC_Init+0xb4>)
 800474a:	f00e fa9f 	bl	8012c8c <HAL_RTC_SetTime>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004754:	f7ff f9a0 	bl	8003a98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004758:	2301      	movs	r3, #1
 800475a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800475c:	2301      	movs	r3, #1
 800475e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004760:	2301      	movs	r3, #1
 8004762:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004764:	2300      	movs	r3, #0
 8004766:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004768:	463b      	mov	r3, r7
 800476a:	2201      	movs	r2, #1
 800476c:	4619      	mov	r1, r3
 800476e:	4806      	ldr	r0, [pc, #24]	; (8004788 <MX_RTC_Init+0xb4>)
 8004770:	f00e fb86 	bl	8012e80 <HAL_RTC_SetDate>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800477a:	f7ff f98d 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	2400213c 	.word	0x2400213c
 800478c:	58004000 	.word	0x58004000

08004790 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b0b2      	sub	sp, #200	; 0xc8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	22c0      	movs	r2, #192	; 0xc0
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f017 f9b5 	bl	801bb10 <memset>
  if(rtcHandle->Instance==RTC)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_RTC_MspInit+0x5c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d118      	bne.n	80047e2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_RTC_MspInit+0x60>)
 80047be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	4618      	mov	r0, r3
 80047c8:	f00b fce0 	bl	801018c <HAL_RCCEx_PeriphCLKConfig>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80047d2:	f7ff f961 	bl	8003a98 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <HAL_RTC_MspInit+0x64>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <HAL_RTC_MspInit+0x64>)
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80047e2:	bf00      	nop
 80047e4:	37c8      	adds	r7, #200	; 0xc8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	58004000 	.word	0x58004000
 80047f0:	00019300 	.word	0x00019300
 80047f4:	58024400 	.word	0x58024400

080047f8 <init_adc_dma>:
 *
 * This function calibrates and starts DMA for ADC1 and ADC3.
 * It also enables the SPI peripherals.
 */
void init_adc_dma()
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80047fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004804:	481c      	ldr	r0, [pc, #112]	; (8004878 <init_adc_dma+0x80>)
 8004806:	f003 fc23 	bl	8008050 <HAL_ADCEx_Calibration_Start>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <init_adc_dma+0x1c>
	{
		Error_Handler();
 8004810:	f7ff f942 	bl	8003a98 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data, ADC1_NUM_CHANNELS) != HAL_OK)
 8004814:	220b      	movs	r2, #11
 8004816:	4919      	ldr	r1, [pc, #100]	; (800487c <init_adc_dma+0x84>)
 8004818:	4817      	ldr	r0, [pc, #92]	; (8004878 <init_adc_dma+0x80>)
 800481a:	f002 fcf7 	bl	800720c <HAL_ADC_Start_DMA>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <init_adc_dma+0x30>
	{
		Error_Handler();
 8004824:	f7ff f938 	bl	8003a98 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004828:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800482c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004830:	4813      	ldr	r0, [pc, #76]	; (8004880 <init_adc_dma+0x88>)
 8004832:	f003 fc0d 	bl	8008050 <HAL_ADCEx_Calibration_Start>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <init_adc_dma+0x48>
	{
		Error_Handler();
 800483c:	f7ff f92c 	bl	8003a98 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data, ADC3_NUM_CHANNELS) != HAL_OK)
 8004840:	2204      	movs	r2, #4
 8004842:	4910      	ldr	r1, [pc, #64]	; (8004884 <init_adc_dma+0x8c>)
 8004844:	480e      	ldr	r0, [pc, #56]	; (8004880 <init_adc_dma+0x88>)
 8004846:	f002 fce1 	bl	800720c <HAL_ADC_Start_DMA>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <init_adc_dma+0x5c>
	{
		Error_Handler();
 8004850:	f7ff f922 	bl	8003a98 <Error_Handler>
	}

	hspi2.Instance->CR1 |= 1 << 10;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <init_adc_dma+0x90>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <init_adc_dma+0x90>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004862:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <init_adc_dma+0x94>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b08      	ldr	r3, [pc, #32]	; (800488c <init_adc_dma+0x94>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}
 8004878:	240000fc 	.word	0x240000fc
 800487c:	24002160 	.word	0x24002160
 8004880:	24000160 	.word	0x24000160
 8004884:	24002180 	.word	0x24002180
 8004888:	2400221c 	.word	0x2400221c
 800488c:	24002194 	.word	0x24002194

08004890 <sample_pmt_spi>:
 * @brief Samples PMT data via SPI.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_pmt_spi(uint8_t *buffer)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8004898:	2201      	movs	r2, #1
 800489a:	490b      	ldr	r1, [pc, #44]	; (80048c8 <sample_pmt_spi+0x38>)
 800489c:	480b      	ldr	r0, [pc, #44]	; (80048cc <sample_pmt_spi+0x3c>)
 800489e:	f00e fdb9 	bl	8013414 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <sample_pmt_spi+0x38>)
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <sample_pmt_spi+0x38>)
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	73bb      	strb	r3, [r7, #14]

	buffer[0] = spi_LSB;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3301      	adds	r3, #1
 80048bc:	7bba      	ldrb	r2, [r7, #14]
 80048be:	701a      	strb	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	2400218c 	.word	0x2400218c
 80048cc:	24002194 	.word	0x24002194

080048d0 <sample_erpa_spi>:
 * @brief Samples ERPA data via SPI.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_erpa_spi(uint8_t *buffer)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80048d8:	2201      	movs	r2, #1
 80048da:	490b      	ldr	r1, [pc, #44]	; (8004908 <sample_erpa_spi+0x38>)
 80048dc:	480b      	ldr	r0, [pc, #44]	; (800490c <sample_erpa_spi+0x3c>)
 80048de:	f00e fd99 	bl	8013414 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <sample_erpa_spi+0x38>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <sample_erpa_spi+0x38>)
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	73bb      	strb	r3, [r7, #14]

	buffer[0] = spi_LSB;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3301      	adds	r3, #1
 80048fc:	7bba      	ldrb	r2, [r7, #14]
 80048fe:	701a      	strb	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	24002188 	.word	0x24002188
 800490c:	2400221c 	.word	0x2400221c

08004910 <sample_erpa_adc>:
 * @brief Samples ERPA data from ADC.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_erpa_adc(uint16_t *buffer)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <sample_erpa_adc+0x20>)
 800491a:	885b      	ldrh	r3, [r3, #2]
 800491c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	89fa      	ldrh	r2, [r7, #14]
 8004922:	801a      	strh	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	24002160 	.word	0x24002160

08004934 <sample_hk_i2c>:
 * @brief Samples HK data from I2C sensors.
 *
 * @param buffer Pointer to store the sampled data from sensors.
 */
void sample_hk_i2c(int16_t *buffer)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800493c:	2390      	movs	r3, #144	; 0x90
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f8a2 	bl	8004a88 <poll_i2c_sensor>
 8004944:	4603      	mov	r3, r0
 8004946:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004948:	2394      	movs	r3, #148	; 0x94
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f89c 	bl	8004a88 <poll_i2c_sensor>
 8004950:	4603      	mov	r3, r0
 8004952:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004954:	2392      	movs	r3, #146	; 0x92
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f896 	bl	8004a88 <poll_i2c_sensor>
 800495c:	4603      	mov	r3, r0
 800495e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004960:	2396      	movs	r3, #150	; 0x96
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f890 	bl	8004a88 <poll_i2c_sensor>
 8004968:	4603      	mov	r3, r0
 800496a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	89fa      	ldrh	r2, [r7, #14]
 8004970:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3302      	adds	r3, #2
 8004976:	89ba      	ldrh	r2, [r7, #12]
 8004978:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	897a      	ldrh	r2, [r7, #10]
 8004980:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3306      	adds	r3, #6
 8004986:	893a      	ldrh	r2, [r7, #8]
 8004988:	801a      	strh	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <sample_hk_adc1>:
 * @brief Samples HK data from ADC1 channels.
 *
 * @param buffer Pointer to store the sampled ADC values.
 */
void sample_hk_adc1(uint16_t *buffer)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <sample_hk_adc1+0xa0>)
 800499e:	8a9b      	ldrh	r3, [r3, #20]
 80049a0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049a4:	8a1b      	ldrh	r3, [r3, #16]
 80049a6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80049a8:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049aa:	899b      	ldrh	r3, [r3, #12]
 80049ac:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049b0:	8a5b      	ldrh	r3, [r3, #18]
 80049b2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049b6:	889b      	ldrh	r3, [r3, #4]
 80049b8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049bc:	88db      	ldrh	r3, [r3, #6]
 80049be:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049c2:	89db      	ldrh	r3, [r3, #14]
 80049c4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80049c6:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049c8:	891b      	ldrh	r3, [r3, #8]
 80049ca:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <sample_hk_adc1+0xa0>)
 80049d4:	895b      	ldrh	r3, [r3, #10]
 80049d6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8bfa      	ldrh	r2, [r7, #30]
 80049dc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3302      	adds	r3, #2
 80049e2:	8bba      	ldrh	r2, [r7, #28]
 80049e4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	8b7a      	ldrh	r2, [r7, #26]
 80049ec:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3306      	adds	r3, #6
 80049f2:	8b3a      	ldrh	r2, [r7, #24]
 80049f4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3308      	adds	r3, #8
 80049fa:	8afa      	ldrh	r2, [r7, #22]
 80049fc:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	330a      	adds	r3, #10
 8004a02:	8aba      	ldrh	r2, [r7, #20]
 8004a04:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	8a7a      	ldrh	r2, [r7, #18]
 8004a0c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	330e      	adds	r3, #14
 8004a12:	8a3a      	ldrh	r2, [r7, #16]
 8004a14:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3310      	adds	r3, #16
 8004a1a:	89fa      	ldrh	r2, [r7, #14]
 8004a1c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3312      	adds	r3, #18
 8004a22:	89ba      	ldrh	r2, [r7, #12]
 8004a24:	801a      	strh	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	24002160 	.word	0x24002160

08004a38 <sample_hk_adc3>:
 * @brief Samples HK data from ADC3 channels.
 *
 * @param buffer Pointer to store the sampled ADC values.
 */
void sample_hk_adc3(uint16_t *buffer)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 8004a40:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <sample_hk_adc3+0x4c>)
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <sample_hk_adc3+0x4c>)
 8004a48:	885b      	ldrh	r3, [r3, #2]
 8004a4a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <sample_hk_adc3+0x4c>)
 8004a4e:	889b      	ldrh	r3, [r3, #4]
 8004a50:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <sample_hk_adc3+0x4c>)
 8004a54:	88db      	ldrh	r3, [r3, #6]
 8004a56:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	89fa      	ldrh	r2, [r7, #14]
 8004a5c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3302      	adds	r3, #2
 8004a62:	89ba      	ldrh	r2, [r7, #12]
 8004a64:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	897a      	ldrh	r2, [r7, #10]
 8004a6c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3306      	adds	r3, #6
 8004a72:	893a      	ldrh	r2, [r7, #8]
 8004a74:	801a      	strh	r2, [r3, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	24002180 	.word	0x24002180

08004a88 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR I2C address of the temperature sensor.
 * @return int16_t The temperature data received from the sensor.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8004a92:	2200      	movs	r2, #0
 8004a94:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <poll_i2c_sensor+0x8c>)
 8004a96:	701a      	strb	r2, [r3, #0]

	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	b299      	uxth	r1, r3
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <poll_i2c_sensor+0x8c>)
 8004aa0:	481d      	ldr	r0, [pc, #116]	; (8004b18 <poll_i2c_sensor+0x90>)
 8004aa2:	f007 fea1 	bl	800c7e8 <HAL_I2C_Master_Transmit_DMA>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK)
 8004aaa:	7b7b      	ldrb	r3, [r7, #13]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <poll_i2c_sensor+0x2e>
	{
		Error_Handler();
 8004ab0:	f7fe fff2 	bl	8003a98 <Error_Handler>
 8004ab4:	e027      	b.n	8004b06 <poll_i2c_sensor+0x7e>
	}
	else
	{
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004ab6:	bf00      	nop
 8004ab8:	4817      	ldr	r0, [pc, #92]	; (8004b18 <poll_i2c_sensor+0x90>)
 8004aba:	f008 f97c 	bl	800cdb6 <HAL_I2C_GetState>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d1f9      	bne.n	8004ab8 <poll_i2c_sensor+0x30>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	b299      	uxth	r1, r3
 8004ac8:	2302      	movs	r3, #2
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <poll_i2c_sensor+0x8c>)
 8004acc:	4812      	ldr	r0, [pc, #72]	; (8004b18 <poll_i2c_sensor+0x90>)
 8004ace:	f007 ff9f 	bl	800ca10 <HAL_I2C_Master_Receive_DMA>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK)
 8004ad6:	7b7b      	ldrb	r3, [r7, #13]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <poll_i2c_sensor+0x5a>
		{
			Error_Handler();
 8004adc:	f7fe ffdc 	bl	8003a98 <Error_Handler>
 8004ae0:	e011      	b.n	8004b06 <poll_i2c_sensor+0x7e>
		}
		else
		{
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004ae2:	bf00      	nop
 8004ae4:	480c      	ldr	r0, [pc, #48]	; (8004b18 <poll_i2c_sensor+0x90>)
 8004ae6:	f008 f966 	bl	800cdb6 <HAL_I2C_GetState>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d1f9      	bne.n	8004ae4 <poll_i2c_sensor+0x5c>
			output = (int16_t) (raw_i2c[0] << 8);
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <poll_i2c_sensor+0x8c>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004af8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004afc:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <poll_i2c_sensor+0x8c>)
 8004afe:	7852      	ldrb	r2, [r2, #1]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	10db      	asrs	r3, r3, #3
 8004b04:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	24002190 	.word	0x24002190
 8004b18:	24001db4 	.word	0x24001db4

08004b1c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b22:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <MX_SPI1_Init+0xac>)
 8004b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004b2e:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b34:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004b36:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b38:	220f      	movs	r2, #15
 8004b3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004b50:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b52:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004bae:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <MX_SPI1_Init+0xa8>)
 8004bb0:	f00e fb0c 	bl	80131cc <HAL_SPI_Init>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004bba:	f7fe ff6d 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004bbe:	bf00      	nop
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	24002194 	.word	0x24002194
 8004bc8:	40013000 	.word	0x40013000

08004bcc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004bd2:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <MX_SPI2_Init+0xac>)
 8004bd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004bd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004bdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004be0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004be4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004be6:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004be8:	220f      	movs	r2, #15
 8004bea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bec:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004bf8:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004bfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004bfe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004c00:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c02:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004c06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c08:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c0e:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004c1a:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004c5e:	4805      	ldr	r0, [pc, #20]	; (8004c74 <MX_SPI2_Init+0xa8>)
 8004c60:	f00e fab4 	bl	80131cc <HAL_SPI_Init>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004c6a:	f7fe ff15 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2400221c 	.word	0x2400221c
 8004c78:	40003800 	.word	0x40003800

08004c7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b0bc      	sub	sp, #240	; 0xf0
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c94:	f107 0318 	add.w	r3, r7, #24
 8004c98:	22c0      	movs	r2, #192	; 0xc0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f016 ff37 	bl	801bb10 <memset>
  if(spiHandle->Instance==SPI1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a83      	ldr	r2, [pc, #524]	; (8004eb4 <HAL_SPI_MspInit+0x238>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d17c      	bne.n	8004da6 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004cac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cbc:	f107 0318 	add.w	r3, r7, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f00b fa63 	bl	801018c <HAL_RCCEx_PeriphCLKConfig>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004ccc:	f7fe fee4 	bl	8003a98 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cd0:	4b79      	ldr	r3, [pc, #484]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cd6:	4a78      	ldr	r2, [pc, #480]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cdc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cee:	4b72      	ldr	r3, [pc, #456]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf4:	4a70      	ldr	r2, [pc, #448]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004cf6:	f043 0302 	orr.w	r3, r3, #2
 8004cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cfe:	4b6e      	ldr	r3, [pc, #440]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004d0c:	2318      	movs	r3, #24
 8004d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d12:	2302      	movs	r3, #2
 8004d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d24:	2305      	movs	r3, #5
 8004d26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4862      	ldr	r0, [pc, #392]	; (8004ebc <HAL_SPI_MspInit+0x240>)
 8004d32:	f007 fadb 	bl	800c2ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004d36:	4b62      	ldr	r3, [pc, #392]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d38:	4a62      	ldr	r2, [pc, #392]	; (8004ec4 <HAL_SPI_MspInit+0x248>)
 8004d3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004d3c:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d3e:	2225      	movs	r2, #37	; 0x25
 8004d40:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d42:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d48:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d54:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d56:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d5e:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d64:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004d66:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d6c:	4b54      	ldr	r3, [pc, #336]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d72:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004d78:	4851      	ldr	r0, [pc, #324]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d7a:	f003 ff91 	bl	8008ca0 <HAL_DMA_Init>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004d84:	f7fe fe88 	bl	8003a98 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	; (8004ec0 <HAL_SPI_MspInit+0x244>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2105      	movs	r1, #5
 8004d98:	2023      	movs	r0, #35	; 0x23
 8004d9a:	f003 fb53 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004d9e:	2023      	movs	r0, #35	; 0x23
 8004da0:	f003 fb6a 	bl	8008478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004da4:	e081      	b.n	8004eaa <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a47      	ldr	r2, [pc, #284]	; (8004ec8 <HAL_SPI_MspInit+0x24c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d17c      	bne.n	8004eaa <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dc0:	f107 0318 	add.w	r3, r7, #24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f00b f9e1 	bl	801018c <HAL_RCCEx_PeriphCLKConfig>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004dd0:	f7fe fe62 	bl	8003a98 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004dd4:	4b38      	ldr	r3, [pc, #224]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dda:	4a37      	ldr	r2, [pc, #220]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004de4:	4b34      	ldr	r3, [pc, #208]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df2:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004df8:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004dfa:	f043 0302 	orr.w	r3, r3, #2
 8004dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e02:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <HAL_SPI_MspInit+0x23c>)
 8004e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004e10:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004e14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e2a:	2305      	movs	r3, #5
 8004e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e34:	4619      	mov	r1, r3
 8004e36:	4821      	ldr	r0, [pc, #132]	; (8004ebc <HAL_SPI_MspInit+0x240>)
 8004e38:	f007 fa58 	bl	800c2ec <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e3e:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <HAL_SPI_MspInit+0x254>)
 8004e40:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e44:	2227      	movs	r2, #39	; 0x27
 8004e46:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e48:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e5a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e62:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e72:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e78:	4b14      	ldr	r3, [pc, #80]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004e7e:	4813      	ldr	r0, [pc, #76]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e80:	f003 ff0e 	bl	8008ca0 <HAL_DMA_Init>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004e8a:	f7fe fe05 	bl	8003a98 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e92:	67da      	str	r2, [r3, #124]	; 0x7c
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <HAL_SPI_MspInit+0x250>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2105      	movs	r1, #5
 8004e9e:	2024      	movs	r0, #36	; 0x24
 8004ea0:	f003 fad0 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ea4:	2024      	movs	r0, #36	; 0x24
 8004ea6:	f003 fae7 	bl	8008478 <HAL_NVIC_EnableIRQ>
}
 8004eaa:	bf00      	nop
 8004eac:	37f0      	adds	r7, #240	; 0xf0
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40013000 	.word	0x40013000
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	58020400 	.word	0x58020400
 8004ec0:	240022a4 	.word	0x240022a4
 8004ec4:	40020070 	.word	0x40020070
 8004ec8:	40003800 	.word	0x40003800
 8004ecc:	2400231c 	.word	0x2400231c
 8004ed0:	40020058 	.word	0x40020058

08004ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_MspInit+0x48>)
 8004edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ee0:	4a0e      	ldr	r2, [pc, #56]	; (8004f1c <HAL_MspInit+0x48>)
 8004ee2:	f043 0302 	orr.w	r3, r3, #2
 8004ee6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_MspInit+0x48>)
 8004eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	210f      	movs	r1, #15
 8004efc:	f06f 0001 	mvn.w	r0, #1
 8004f00:	f003 faa0 	bl	8008444 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8004f04:	2200      	movs	r2, #0
 8004f06:	2105      	movs	r1, #5
 8004f08:	2004      	movs	r0, #4
 8004f0a:	f003 fa9b 	bl	8008444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004f0e:	2004      	movs	r0, #4
 8004f10:	f003 fab2 	bl	8008478 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	58024400 	.word	0x58024400

08004f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b090      	sub	sp, #64	; 0x40
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d827      	bhi.n	8004f7e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004f2e:	2200      	movs	r2, #0
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	2036      	movs	r0, #54	; 0x36
 8004f34:	f003 fa86 	bl	8008444 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f38:	2036      	movs	r0, #54	; 0x36
 8004f3a:	f003 fa9d 	bl	8008478 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <HAL_InitTick+0xc4>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004f44:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_InitTick+0xc8>)
 8004f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f4a:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <HAL_InitTick+0xc8>)
 8004f4c:	f043 0310 	orr.w	r3, r3, #16
 8004f50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_InitTick+0xc8>)
 8004f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f62:	f107 0210 	add.w	r2, r7, #16
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f00b f8cb 	bl	8010108 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_InitTick+0x6a>
 8004f7c:	e001      	b.n	8004f82 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e02b      	b.n	8004fda <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004f82:	f00b f895 	bl	80100b0 <HAL_RCC_GetPCLK1Freq>
 8004f86:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004f88:	e004      	b.n	8004f94 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004f8a:	f00b f891 	bl	80100b0 <HAL_RCC_GetPCLK1Freq>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <HAL_InitTick+0xcc>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	0c9b      	lsrs	r3, r3, #18
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <HAL_InitTick+0xd4>)
 8004fa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004faa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004fb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004fc2:	480b      	ldr	r0, [pc, #44]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004fc4:	f00e fea1 	bl	8013d0a <HAL_TIM_Base_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004fce:	4808      	ldr	r0, [pc, #32]	; (8004ff0 <HAL_InitTick+0xd0>)
 8004fd0:	f00e fef2 	bl	8013db8 <HAL_TIM_Base_Start_IT>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	e000      	b.n	8004fda <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3740      	adds	r7, #64	; 0x40
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	240000d0 	.word	0x240000d0
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	431bde83 	.word	0x431bde83
 8004ff0:	24002394 	.word	0x24002394
 8004ff4:	40001000 	.word	0x40001000

08004ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004ffc:	e7fe      	b.n	8004ffc <NMI_Handler+0x4>
	...

08005000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	if ((FLASH->SR1 & FLASH_SR_DBECCERR) || (FLASH->SR2 & FLASH_SR_DBECCERR)) {
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HardFault_Handler+0x24>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HardFault_Handler+0x1e>
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <HardFault_Handler+0x24>)
 8005012:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005016:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HardFault_Handler+0x22>
		FLASH_IRQHandler();
 800501e:	f000 f813 	bl	8005048 <FLASH_IRQHandler>
	}
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <HardFault_Handler+0x22>
 8005024:	52002000 	.word	0x52002000

08005028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800502c:	e7fe      	b.n	800502c <MemManage_Handler+0x4>

0800502e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005032:	e7fe      	b.n	8005032 <BusFault_Handler+0x4>

08005034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005038:	e7fe      	b.n	8005038 <UsageFault_Handler+0x4>

0800503a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800503a:	b480      	push	{r7}
 800503c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800504c:	f006 fd10 	bl	800ba70 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8005050:	bf00      	nop
 8005052:	bd80      	pop	{r7, pc}

08005054 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005058:	4802      	ldr	r0, [pc, #8]	; (8005064 <DMA1_Stream0_IRQHandler+0x10>)
 800505a:	f005 f94b 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	240001c4 	.word	0x240001c4

08005068 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800506c:	4802      	ldr	r0, [pc, #8]	; (8005078 <DMA1_Stream1_IRQHandler+0x10>)
 800506e:	f005 f941 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	2400023c 	.word	0x2400023c

0800507c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005080:	4802      	ldr	r0, [pc, #8]	; (800508c <DMA1_Stream2_IRQHandler+0x10>)
 8005082:	f005 f937 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	24002558 	.word	0x24002558

08005090 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <DMA1_Stream3_IRQHandler+0x10>)
 8005096:	f005 f92d 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2400231c 	.word	0x2400231c

080050a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <DMA1_Stream4_IRQHandler+0x10>)
 80050aa:	f005 f923 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	240022a4 	.word	0x240022a4

080050b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80050bc:	4802      	ldr	r0, [pc, #8]	; (80050c8 <DMA1_Stream5_IRQHandler+0x10>)
 80050be:	f005 f919 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	240002c8 	.word	0x240002c8

080050cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <DMA1_Stream6_IRQHandler+0x10>)
 80050d2:	f005 f90f 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	24001e08 	.word	0x24001e08

080050e0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <TIM1_BRK_IRQHandler+0x10>)
 80050e6:	f00f f97e 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	240023e0 	.word	0x240023e0

080050f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <TIM1_UP_IRQHandler+0x10>)
 80050fa:	f00f f974 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	240023e0 	.word	0x240023e0

08005108 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <TIM1_TRG_COM_IRQHandler+0x10>)
 800510e:	f00f f96a 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	240023e0 	.word	0x240023e0

0800511c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <TIM1_CC_IRQHandler+0x10>)
 8005122:	f00f f960 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	240023e0 	.word	0x240023e0

08005130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <TIM2_IRQHandler+0x10>)
 8005136:	f00f f956 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2400242c 	.word	0x2400242c

08005144 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <TIM3_IRQHandler+0x10>)
 800514a:	f00f f94c 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	24002478 	.word	0x24002478

08005158 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <I2C1_EV_IRQHandler+0x10>)
 800515e:	f007 fd47 	bl	800cbf0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	24001db4 	.word	0x24001db4

0800516c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005170:	4802      	ldr	r0, [pc, #8]	; (800517c <I2C1_ER_IRQHandler+0x10>)
 8005172:	f007 fd57 	bl	800cc24 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	24001db4 	.word	0x24001db4

08005180 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005184:	4802      	ldr	r0, [pc, #8]	; (8005190 <SPI1_IRQHandler+0x10>)
 8005186:	f00e fa8d 	bl	80136a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	24002194 	.word	0x24002194

08005194 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005198:	4802      	ldr	r0, [pc, #8]	; (80051a4 <SPI2_IRQHandler+0x10>)
 800519a:	f00e fa83 	bl	80136a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2400221c 	.word	0x2400221c

080051a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051ac:	4802      	ldr	r0, [pc, #8]	; (80051b8 <USART1_IRQHandler+0x10>)
 80051ae:	f010 fc5d 	bl	8015a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	240024c4 	.word	0x240024c4

080051bc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80051c0:	4802      	ldr	r0, [pc, #8]	; (80051cc <DMA1_Stream7_IRQHandler+0x10>)
 80051c2:	f005 f897 	bl	800a2f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	24001e80 	.word	0x24001e80

080051d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <TIM6_DAC_IRQHandler+0x20>)
 80051d6:	791b      	ldrb	r3, [r3, #4]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80051de:	4804      	ldr	r0, [pc, #16]	; (80051f0 <TIM6_DAC_IRQHandler+0x20>)
 80051e0:	f003 fadf 	bl	80087a2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80051e4:	4803      	ldr	r0, [pc, #12]	; (80051f4 <TIM6_DAC_IRQHandler+0x24>)
 80051e6:	f00f f8fe 	bl	80143e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	240002b4 	.word	0x240002b4
 80051f4:	24002394 	.word	0x24002394

080051f8 <ECC_IRQHandler>:

/* USER CODE BEGIN 1 */
/**
 * @brief This function handles RAMECC global interrupt
 */
void ECC_IRQHandler(void) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
	// Domain 1
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m1, RAMECC_FLAGS_ALL)) {
 80051fc:	4b4e      	ldr	r3, [pc, #312]	; (8005338 <ECC_IRQHandler+0x140>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a4d      	ldr	r2, [pc, #308]	; (8005338 <ECC_IRQHandler+0x140>)
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	6053      	str	r3, [r2, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <ECC_IRQHandler+0x1e>
		HAL_RAMECC_IRQHandler(&hramecc1_m1);
 8005210:	4849      	ldr	r0, [pc, #292]	; (8005338 <ECC_IRQHandler+0x140>)
 8005212:	f009 ff3f 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m2, RAMECC_FLAGS_ALL)) {
 8005216:	4b49      	ldr	r3, [pc, #292]	; (800533c <ECC_IRQHandler+0x144>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a47      	ldr	r2, [pc, #284]	; (800533c <ECC_IRQHandler+0x144>)
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <ECC_IRQHandler+0x38>
		HAL_RAMECC_IRQHandler(&hramecc1_m2);
 800522a:	4844      	ldr	r0, [pc, #272]	; (800533c <ECC_IRQHandler+0x144>)
 800522c:	f009 ff32 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m3, RAMECC_FLAGS_ALL)) {
 8005230:	4b43      	ldr	r3, [pc, #268]	; (8005340 <ECC_IRQHandler+0x148>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4a42      	ldr	r2, [pc, #264]	; (8005340 <ECC_IRQHandler+0x148>)
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	6053      	str	r3, [r2, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <ECC_IRQHandler+0x52>
		HAL_RAMECC_IRQHandler(&hramecc1_m3);
 8005244:	483e      	ldr	r0, [pc, #248]	; (8005340 <ECC_IRQHandler+0x148>)
 8005246:	f009 ff25 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m4, RAMECC_FLAGS_ALL)) {
 800524a:	4b3e      	ldr	r3, [pc, #248]	; (8005344 <ECC_IRQHandler+0x14c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <ECC_IRQHandler+0x14c>)
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	6053      	str	r3, [r2, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <ECC_IRQHandler+0x6c>
		HAL_RAMECC_IRQHandler(&hramecc1_m4);
 800525e:	4839      	ldr	r0, [pc, #228]	; (8005344 <ECC_IRQHandler+0x14c>)
 8005260:	f009 ff18 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m5, RAMECC_FLAGS_ALL)) {
 8005264:	4b38      	ldr	r3, [pc, #224]	; (8005348 <ECC_IRQHandler+0x150>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4a37      	ldr	r2, [pc, #220]	; (8005348 <ECC_IRQHandler+0x150>)
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	6053      	str	r3, [r2, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <ECC_IRQHandler+0x86>
		HAL_RAMECC_IRQHandler(&hramecc1_m5);
 8005278:	4833      	ldr	r0, [pc, #204]	; (8005348 <ECC_IRQHandler+0x150>)
 800527a:	f009 ff0b 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}

	// Domain 2
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m1, RAMECC_FLAGS_ALL)) {
 800527e:	4b33      	ldr	r3, [pc, #204]	; (800534c <ECC_IRQHandler+0x154>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a31      	ldr	r2, [pc, #196]	; (800534c <ECC_IRQHandler+0x154>)
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	6053      	str	r3, [r2, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <ECC_IRQHandler+0xa0>
		HAL_RAMECC_IRQHandler(&hramecc2_m1);
 8005292:	482e      	ldr	r0, [pc, #184]	; (800534c <ECC_IRQHandler+0x154>)
 8005294:	f009 fefe 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m2, RAMECC_FLAGS_ALL)) {
 8005298:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <ECC_IRQHandler+0x158>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4a2c      	ldr	r2, [pc, #176]	; (8005350 <ECC_IRQHandler+0x158>)
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	6053      	str	r3, [r2, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <ECC_IRQHandler+0xba>
		HAL_RAMECC_IRQHandler(&hramecc2_m2);
 80052ac:	4828      	ldr	r0, [pc, #160]	; (8005350 <ECC_IRQHandler+0x158>)
 80052ae:	f009 fef1 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m3, RAMECC_FLAGS_ALL)) {
 80052b2:	4b28      	ldr	r3, [pc, #160]	; (8005354 <ECC_IRQHandler+0x15c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	4a26      	ldr	r2, [pc, #152]	; (8005354 <ECC_IRQHandler+0x15c>)
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	6053      	str	r3, [r2, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <ECC_IRQHandler+0xd4>
		HAL_RAMECC_IRQHandler(&hramecc2_m3);
 80052c6:	4823      	ldr	r0, [pc, #140]	; (8005354 <ECC_IRQHandler+0x15c>)
 80052c8:	f009 fee4 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m4, RAMECC_FLAGS_ALL)) {
 80052cc:	4b22      	ldr	r3, [pc, #136]	; (8005358 <ECC_IRQHandler+0x160>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4a21      	ldr	r2, [pc, #132]	; (8005358 <ECC_IRQHandler+0x160>)
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	6053      	str	r3, [r2, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <ECC_IRQHandler+0xee>
		HAL_RAMECC_IRQHandler(&hramecc2_m4);
 80052e0:	481d      	ldr	r0, [pc, #116]	; (8005358 <ECC_IRQHandler+0x160>)
 80052e2:	f009 fed7 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m5, RAMECC_FLAGS_ALL)) {
 80052e6:	4b1d      	ldr	r3, [pc, #116]	; (800535c <ECC_IRQHandler+0x164>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4a1b      	ldr	r2, [pc, #108]	; (800535c <ECC_IRQHandler+0x164>)
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	6053      	str	r3, [r2, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <ECC_IRQHandler+0x108>
		HAL_RAMECC_IRQHandler(&hramecc2_m5);
 80052fa:	4818      	ldr	r0, [pc, #96]	; (800535c <ECC_IRQHandler+0x164>)
 80052fc:	f009 feca 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}

	// Domain 3
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m1, RAMECC_FLAGS_ALL)) {
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <ECC_IRQHandler+0x168>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <ECC_IRQHandler+0x168>)
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	6053      	str	r3, [r2, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <ECC_IRQHandler+0x122>
		HAL_RAMECC_IRQHandler(&hramecc3_m1);
 8005314:	4812      	ldr	r0, [pc, #72]	; (8005360 <ECC_IRQHandler+0x168>)
 8005316:	f009 febd 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m2, RAMECC_FLAGS_ALL)) {
 800531a:	4b12      	ldr	r3, [pc, #72]	; (8005364 <ECC_IRQHandler+0x16c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a10      	ldr	r2, [pc, #64]	; (8005364 <ECC_IRQHandler+0x16c>)
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	6053      	str	r3, [r2, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <ECC_IRQHandler+0x13c>
		HAL_RAMECC_IRQHandler(&hramecc3_m2);
 800532e:	480d      	ldr	r0, [pc, #52]	; (8005364 <ECC_IRQHandler+0x16c>)
 8005330:	f009 feb0 	bl	800f094 <HAL_RAMECC_IRQHandler>
	}
}
 8005334:	bf00      	nop
 8005336:	bd80      	pop	{r7, pc}
 8005338:	2400207c 	.word	0x2400207c
 800533c:	2400208c 	.word	0x2400208c
 8005340:	2400209c 	.word	0x2400209c
 8005344:	240020ac 	.word	0x240020ac
 8005348:	240020bc 	.word	0x240020bc
 800534c:	240020cc 	.word	0x240020cc
 8005350:	240020dc 	.word	0x240020dc
 8005354:	240020ec 	.word	0x240020ec
 8005358:	240020fc 	.word	0x240020fc
 800535c:	2400210c 	.word	0x2400210c
 8005360:	2400211c 	.word	0x2400211c
 8005364:	2400212c 	.word	0x2400212c

08005368 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800536c:	4b37      	ldr	r3, [pc, #220]	; (800544c <SystemInit+0xe4>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	4a36      	ldr	r2, [pc, #216]	; (800544c <SystemInit+0xe4>)
 8005374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800537c:	4b34      	ldr	r3, [pc, #208]	; (8005450 <SystemInit+0xe8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	2b06      	cmp	r3, #6
 8005386:	d807      	bhi.n	8005398 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8005388:	4b31      	ldr	r3, [pc, #196]	; (8005450 <SystemInit+0xe8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 030f 	bic.w	r3, r3, #15
 8005390:	4a2f      	ldr	r2, [pc, #188]	; (8005450 <SystemInit+0xe8>)
 8005392:	f043 0307 	orr.w	r3, r3, #7
 8005396:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8005398:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <SystemInit+0xec>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2d      	ldr	r2, [pc, #180]	; (8005454 <SystemInit+0xec>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <SystemInit+0xec>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80053aa:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <SystemInit+0xec>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4929      	ldr	r1, [pc, #164]	; (8005454 <SystemInit+0xec>)
 80053b0:	4b29      	ldr	r3, [pc, #164]	; (8005458 <SystemInit+0xf0>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80053b6:	4b26      	ldr	r3, [pc, #152]	; (8005450 <SystemInit+0xe8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <SystemInit+0xe8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 030f 	bic.w	r3, r3, #15
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <SystemInit+0xe8>)
 80053cc:	f043 0307 	orr.w	r3, r3, #7
 80053d0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <SystemInit+0xec>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80053d8:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <SystemInit+0xec>)
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80053de:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <SystemInit+0xec>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80053e4:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <SystemInit+0xec>)
 80053e6:	4a1d      	ldr	r2, [pc, #116]	; (800545c <SystemInit+0xf4>)
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <SystemInit+0xec>)
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <SystemInit+0xf8>)
 80053ee:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <SystemInit+0xec>)
 80053f2:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <SystemInit+0xfc>)
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80053f6:	4b17      	ldr	r3, [pc, #92]	; (8005454 <SystemInit+0xec>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80053fc:	4b15      	ldr	r3, [pc, #84]	; (8005454 <SystemInit+0xec>)
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <SystemInit+0xfc>)
 8005400:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <SystemInit+0xec>)
 8005404:	2200      	movs	r2, #0
 8005406:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8005408:	4b12      	ldr	r3, [pc, #72]	; (8005454 <SystemInit+0xec>)
 800540a:	4a16      	ldr	r2, [pc, #88]	; (8005464 <SystemInit+0xfc>)
 800540c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800540e:	4b11      	ldr	r3, [pc, #68]	; (8005454 <SystemInit+0xec>)
 8005410:	2200      	movs	r2, #0
 8005412:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <SystemInit+0xec>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <SystemInit+0xec>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <SystemInit+0xec>)
 8005422:	2200      	movs	r2, #0
 8005424:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <SystemInit+0x100>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b10      	ldr	r3, [pc, #64]	; (800546c <SystemInit+0x104>)
 800542c:	4013      	ands	r3, r2
 800542e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005432:	d202      	bcs.n	800543a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <SystemInit+0x108>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <SystemInit+0x10c>)
 800543c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005440:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	e000ed00 	.word	0xe000ed00
 8005450:	52002000 	.word	0x52002000
 8005454:	58024400 	.word	0x58024400
 8005458:	eaf6ed7f 	.word	0xeaf6ed7f
 800545c:	02020200 	.word	0x02020200
 8005460:	01ff0000 	.word	0x01ff0000
 8005464:	01010280 	.word	0x01010280
 8005468:	5c001000 	.word	0x5c001000
 800546c:	ffff0000 	.word	0xffff0000
 8005470:	51008108 	.word	0x51008108
 8005474:	52004000 	.word	0x52004000

08005478 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b09a      	sub	sp, #104	; 0x68
 800547c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800547e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	609a      	str	r2, [r3, #8]
 800548a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800548c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
 80054a8:	615a      	str	r2, [r3, #20]
 80054aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	222c      	movs	r2, #44	; 0x2c
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f016 fb2c 	bl	801bb10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80054b8:	4b44      	ldr	r3, [pc, #272]	; (80055cc <MX_TIM1_Init+0x154>)
 80054ba:	4a45      	ldr	r2, [pc, #276]	; (80055d0 <MX_TIM1_Init+0x158>)
 80054bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 80054be:	4b43      	ldr	r3, [pc, #268]	; (80055cc <MX_TIM1_Init+0x154>)
 80054c0:	224a      	movs	r2, #74	; 0x4a
 80054c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054c4:	4b41      	ldr	r3, [pc, #260]	; (80055cc <MX_TIM1_Init+0x154>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80054ca:	4b40      	ldr	r3, [pc, #256]	; (80055cc <MX_TIM1_Init+0x154>)
 80054cc:	f24f 4223 	movw	r2, #62499	; 0xf423
 80054d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d2:	4b3e      	ldr	r3, [pc, #248]	; (80055cc <MX_TIM1_Init+0x154>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80054d8:	4b3c      	ldr	r3, [pc, #240]	; (80055cc <MX_TIM1_Init+0x154>)
 80054da:	2200      	movs	r2, #0
 80054dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <MX_TIM1_Init+0x154>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80054e4:	4839      	ldr	r0, [pc, #228]	; (80055cc <MX_TIM1_Init+0x154>)
 80054e6:	f00e fc10 	bl	8013d0a <HAL_TIM_Base_Init>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80054f0:	f7fe fad2 	bl	8003a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80054fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054fe:	4619      	mov	r1, r3
 8005500:	4832      	ldr	r0, [pc, #200]	; (80055cc <MX_TIM1_Init+0x154>)
 8005502:	f00f f98b 	bl	801481c <HAL_TIM_ConfigClockSource>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800550c:	f7fe fac4 	bl	8003a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005510:	482e      	ldr	r0, [pc, #184]	; (80055cc <MX_TIM1_Init+0x154>)
 8005512:	f00e ff07 	bl	8014324 <HAL_TIM_PWM_Init>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800551c:	f7fe fabc 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005524:	2300      	movs	r3, #0
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800552c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005530:	4619      	mov	r1, r3
 8005532:	4826      	ldr	r0, [pc, #152]	; (80055cc <MX_TIM1_Init+0x154>)
 8005534:	f00f fec8 	bl	80152c8 <HAL_TIMEx_MasterConfigSynchronization>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800553e:	f7fe faab 	bl	8003a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005542:	2360      	movs	r3, #96	; 0x60
 8005544:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8005546:	f240 13df 	movw	r3, #479	; 0x1df
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800554c:	2300      	movs	r3, #0
 800554e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005558:	2300      	movs	r3, #0
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800555c:	2300      	movs	r3, #0
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	4619      	mov	r1, r3
 8005568:	4818      	ldr	r0, [pc, #96]	; (80055cc <MX_TIM1_Init+0x154>)
 800556a:	f00f f843 	bl	80145f4 <HAL_TIM_PWM_ConfigChannel>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005574:	f7fe fa90 	bl	8003a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800558c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005590:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800559a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4807      	ldr	r0, [pc, #28]	; (80055cc <MX_TIM1_Init+0x154>)
 80055ae:	f00f ff19 	bl	80153e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80055b8:	f7fe fa6e 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80055bc:	4803      	ldr	r0, [pc, #12]	; (80055cc <MX_TIM1_Init+0x154>)
 80055be:	f000 f94b 	bl	8005858 <HAL_TIM_MspPostInit>

}
 80055c2:	bf00      	nop
 80055c4:	3768      	adds	r7, #104	; 0x68
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	240023e0 	.word	0x240023e0
 80055d0:	40010000 	.word	0x40010000

080055d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08e      	sub	sp, #56	; 0x38
 80055d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	609a      	str	r2, [r3, #8]
 80055e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055e8:	f107 031c 	add.w	r3, r7, #28
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055f4:	463b      	mov	r3, r7
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	611a      	str	r2, [r3, #16]
 8005602:	615a      	str	r2, [r3, #20]
 8005604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005606:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <MX_TIM2_Init+0xe8>)
 8005608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800560c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 800560e:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <MX_TIM2_Init+0xe8>)
 8005610:	224a      	movs	r2, #74	; 0x4a
 8005612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <MX_TIM2_Init+0xe8>)
 8005616:	2200      	movs	r2, #0
 8005618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800561a:	4b28      	ldr	r3, [pc, #160]	; (80056bc <MX_TIM2_Init+0xe8>)
 800561c:	f640 4234 	movw	r2, #3124	; 0xc34
 8005620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <MX_TIM2_Init+0xe8>)
 8005624:	2200      	movs	r2, #0
 8005626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <MX_TIM2_Init+0xe8>)
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800562e:	4823      	ldr	r0, [pc, #140]	; (80056bc <MX_TIM2_Init+0xe8>)
 8005630:	f00e fb6b 	bl	8013d0a <HAL_TIM_Base_Init>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800563a:	f7fe fa2d 	bl	8003a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800563e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005648:	4619      	mov	r1, r3
 800564a:	481c      	ldr	r0, [pc, #112]	; (80056bc <MX_TIM2_Init+0xe8>)
 800564c:	f00f f8e6 	bl	801481c <HAL_TIM_ConfigClockSource>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005656:	f7fe fa1f 	bl	8003a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800565a:	4818      	ldr	r0, [pc, #96]	; (80056bc <MX_TIM2_Init+0xe8>)
 800565c:	f00e fe62 	bl	8014324 <HAL_TIM_PWM_Init>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005666:	f7fe fa17 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800566a:	2320      	movs	r3, #32
 800566c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005672:	f107 031c 	add.w	r3, r7, #28
 8005676:	4619      	mov	r1, r3
 8005678:	4810      	ldr	r0, [pc, #64]	; (80056bc <MX_TIM2_Init+0xe8>)
 800567a:	f00f fe25 	bl	80152c8 <HAL_TIMEx_MasterConfigSynchronization>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005684:	f7fe fa08 	bl	8003a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005688:	2360      	movs	r3, #96	; 0x60
 800568a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005698:	463b      	mov	r3, r7
 800569a:	220c      	movs	r2, #12
 800569c:	4619      	mov	r1, r3
 800569e:	4807      	ldr	r0, [pc, #28]	; (80056bc <MX_TIM2_Init+0xe8>)
 80056a0:	f00e ffa8 	bl	80145f4 <HAL_TIM_PWM_ConfigChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80056aa:	f7fe f9f5 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80056ae:	4803      	ldr	r0, [pc, #12]	; (80056bc <MX_TIM2_Init+0xe8>)
 80056b0:	f000 f8d2 	bl	8005858 <HAL_TIM_MspPostInit>

}
 80056b4:	bf00      	nop
 80056b6:	3738      	adds	r7, #56	; 0x38
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	2400242c 	.word	0x2400242c

080056c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056c6:	f107 0310 	add.w	r3, r7, #16
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	609a      	str	r2, [r3, #8]
 80056d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	605a      	str	r2, [r3, #4]
 80056dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <MX_TIM3_Init+0x98>)
 80056e0:	4a1e      	ldr	r2, [pc, #120]	; (800575c <MX_TIM3_Init+0x9c>)
 80056e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7500-1;
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <MX_TIM3_Init+0x98>)
 80056e6:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80056ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <MX_TIM3_Init+0x98>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35000-1;
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <MX_TIM3_Init+0x98>)
 80056f4:	f648 02b7 	movw	r2, #34999	; 0x88b7
 80056f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <MX_TIM3_Init+0x98>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <MX_TIM3_Init+0x98>)
 8005702:	2200      	movs	r2, #0
 8005704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005706:	4814      	ldr	r0, [pc, #80]	; (8005758 <MX_TIM3_Init+0x98>)
 8005708:	f00e faff 	bl	8013d0a <HAL_TIM_Base_Init>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005712:	f7fe f9c1 	bl	8003a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800571a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800571c:	f107 0310 	add.w	r3, r7, #16
 8005720:	4619      	mov	r1, r3
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <MX_TIM3_Init+0x98>)
 8005724:	f00f f87a 	bl	801481c <HAL_TIM_ConfigClockSource>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800572e:	f7fe f9b3 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4806      	ldr	r0, [pc, #24]	; (8005758 <MX_TIM3_Init+0x98>)
 8005740:	f00f fdc2 	bl	80152c8 <HAL_TIMEx_MasterConfigSynchronization>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800574a:	f7fe f9a5 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800574e:	bf00      	nop
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	24002478 	.word	0x24002478
 800575c:	40000400 	.word	0x40000400

08005760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a37      	ldr	r2, [pc, #220]	; (800584c <HAL_TIM_Base_MspInit+0xec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d12f      	bne.n	80057d2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005772:	4b37      	ldr	r3, [pc, #220]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 8005774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005778:	4a35      	ldr	r2, [pc, #212]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005782:	4b33      	ldr	r3, [pc, #204]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 8005784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8005790:	2200      	movs	r2, #0
 8005792:	2105      	movs	r1, #5
 8005794:	2018      	movs	r0, #24
 8005796:	f002 fe55 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800579a:	2018      	movs	r0, #24
 800579c:	f002 fe6c 	bl	8008478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2105      	movs	r1, #5
 80057a4:	2019      	movs	r0, #25
 80057a6:	f002 fe4d 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80057aa:	2019      	movs	r0, #25
 80057ac:	f002 fe64 	bl	8008478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80057b0:	2200      	movs	r2, #0
 80057b2:	2105      	movs	r1, #5
 80057b4:	201a      	movs	r0, #26
 80057b6:	f002 fe45 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80057ba:	201a      	movs	r0, #26
 80057bc:	f002 fe5c 	bl	8008478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80057c0:	2200      	movs	r2, #0
 80057c2:	2105      	movs	r1, #5
 80057c4:	201b      	movs	r0, #27
 80057c6:	f002 fe3d 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80057ca:	201b      	movs	r0, #27
 80057cc:	f002 fe54 	bl	8008478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80057d0:	e038      	b.n	8005844 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d117      	bne.n	800580c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057dc:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 80057de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057e2:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057ec:	4b18      	ldr	r3, [pc, #96]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 80057ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80057fa:	2200      	movs	r2, #0
 80057fc:	2105      	movs	r1, #5
 80057fe:	201c      	movs	r0, #28
 8005800:	f002 fe20 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005804:	201c      	movs	r0, #28
 8005806:	f002 fe37 	bl	8008478 <HAL_NVIC_EnableIRQ>
}
 800580a:	e01b      	b.n	8005844 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a10      	ldr	r2, [pc, #64]	; (8005854 <HAL_TIM_Base_MspInit+0xf4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d116      	bne.n	8005844 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 8005818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 800581e:	f043 0302 	orr.w	r3, r3, #2
 8005822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <HAL_TIM_Base_MspInit+0xf0>)
 8005828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005834:	2200      	movs	r2, #0
 8005836:	2105      	movs	r1, #5
 8005838:	201d      	movs	r0, #29
 800583a:	f002 fe03 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800583e:	201d      	movs	r0, #29
 8005840:	f002 fe1a 	bl	8008478 <HAL_NVIC_EnableIRQ>
}
 8005844:	bf00      	nop
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40010000 	.word	0x40010000
 8005850:	58024400 	.word	0x58024400
 8005854:	40000400 	.word	0x40000400

08005858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	60da      	str	r2, [r3, #12]
 800586e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a26      	ldr	r2, [pc, #152]	; (8005910 <HAL_TIM_MspPostInit+0xb8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d120      	bne.n	80058bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800587a:	4b26      	ldr	r3, [pc, #152]	; (8005914 <HAL_TIM_MspPostInit+0xbc>)
 800587c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005880:	4a24      	ldr	r2, [pc, #144]	; (8005914 <HAL_TIM_MspPostInit+0xbc>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_TIM_MspPostInit+0xbc>)
 800588c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800589c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800589e:	2302      	movs	r3, #2
 80058a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a6:	2300      	movs	r3, #0
 80058a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80058aa:	2301      	movs	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ae:	f107 0314 	add.w	r3, r7, #20
 80058b2:	4619      	mov	r1, r3
 80058b4:	4818      	ldr	r0, [pc, #96]	; (8005918 <HAL_TIM_MspPostInit+0xc0>)
 80058b6:	f006 fd19 	bl	800c2ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80058ba:	e024      	b.n	8005906 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d11f      	bne.n	8005906 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <HAL_TIM_MspPostInit+0xbc>)
 80058c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058cc:	4a11      	ldr	r2, [pc, #68]	; (8005914 <HAL_TIM_MspPostInit+0xbc>)
 80058ce:	f043 0302 	orr.w	r3, r3, #2
 80058d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <HAL_TIM_MspPostInit+0xbc>)
 80058d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ea:	2302      	movs	r3, #2
 80058ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f2:	2300      	movs	r3, #0
 80058f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058f6:	2301      	movs	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058fa:	f107 0314 	add.w	r3, r7, #20
 80058fe:	4619      	mov	r1, r3
 8005900:	4806      	ldr	r0, [pc, #24]	; (800591c <HAL_TIM_MspPostInit+0xc4>)
 8005902:	f006 fcf3 	bl	800c2ec <HAL_GPIO_Init>
}
 8005906:	bf00      	nop
 8005908:	3728      	adds	r7, #40	; 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	58024400 	.word	0x58024400
 8005918:	58020000 	.word	0x58020000
 800591c:	58020400 	.word	0x58020400

08005920 <get_uptime>:
 * @brief Gets the system uptime and stores it in a buffer.
 *
 * @param buffer Pointer to a buffer where the uptime will be stored as four bytes.
 */
void get_uptime(uint8_t *buffer)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 800592c:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <get_uptime+0x94>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8005932:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <get_uptime+0x98>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60fb      	str	r3, [r7, #12]

	// Ensuring uptime_millis hasn't rolled over
	if (ms != uptime_millis)
 8005938:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <get_uptime+0x94>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d005      	beq.n	800594e <get_uptime+0x2e>
	{
		ms = uptime_millis;
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <get_uptime+0x94>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <get_uptime+0x98>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005954:	fb03 f202 	mul.w	r2, r3, r2
 8005958:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <get_uptime+0x98>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	3301      	adds	r3, #1
 800595e:	4917      	ldr	r1, [pc, #92]	; (80059bc <get_uptime+0x9c>)
 8005960:	fba1 1303 	umull	r1, r3, r1, r3
 8005964:	099b      	lsrs	r3, r3, #6
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	fbb1 f3f3 	udiv	r3, r1, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	617b      	str	r3, [r7, #20]

	if (ms == 0)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <get_uptime+0x5a>
	{
		uptime = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	0e1b      	lsrs	r3, r3, #24
 800597e:	b2da      	uxtb	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	0c1a      	lsrs	r2, r3, #16
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3301      	adds	r3, #1
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	0a1a      	lsrs	r2, r3, #8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3302      	adds	r3, #2
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3303      	adds	r3, #3
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	24001f58 	.word	0x24001f58
 80059b8:	e000e010 	.word	0xe000e010
 80059bc:	10624dd3 	.word	0x10624dd3

080059c0 <get_unix_time>:
 * @brief Retrieves the current Unix time and milliseconds, storing them in a buffer.
 *
 * @param buffer Pointer to a buffer where the Unix time (4 bytes) and milliseconds (2 bytes) will be stored.
 */
void get_unix_time(uint8_t* buffer)
{
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	b09d      	sub	sp, #116	; 0x74
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80059ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059ce:	2200      	movs	r2, #0
 80059d0:	4619      	mov	r1, r3
 80059d2:	4893      	ldr	r0, [pc, #588]	; (8005c20 <get_unix_time+0x260>)
 80059d4:	f00d f9f8 	bl	8012dc8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80059d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059dc:	2200      	movs	r2, #0
 80059de:	4619      	mov	r1, r3
 80059e0:	488f      	ldr	r0, [pc, #572]	; (8005c20 <get_unix_time+0x260>)
 80059e2:	f00d fad5 	bl	8012f90 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	4b8d      	ldr	r3, [pc, #564]	; (8005c24 <get_unix_time+0x264>)
 80059f0:	fba3 2302 	umull	r2, r3, r3, r2
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	y = current_date.Year + 2000;
 8005a06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005a10:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 8005a14:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005a18:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 8005a1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005a24:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d809      	bhi.n	8005a40 <get_unix_time+0x80>
	{
		m += 12;
 8005a2c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005a30:	330c      	adds	r3, #12
 8005a32:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 8005a36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005a40:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005a44:	f240 136d 	movw	r3, #365	; 0x16d
 8005a48:	fb03 f202 	mul.w	r2, r3, r2
 8005a4c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	18d1      	adds	r1, r2, r3
 8005a56:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005a5a:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <get_unix_time+0x268>)
 8005a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	1ac9      	subs	r1, r1, r3
 8005a66:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005a6a:	4b6f      	ldr	r3, [pc, #444]	; (8005c28 <get_unix_time+0x268>)
 8005a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a70:	09db      	lsrs	r3, r3, #7
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	440b      	add	r3, r1
 8005a76:	17da      	asrs	r2, r3, #31
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a80:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005a84:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8005a88:	4613      	mov	r3, r2
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	1899      	adds	r1, r3, r2
 8005a9e:	4b63      	ldr	r3, [pc, #396]	; (8005c2c <get_unix_time+0x26c>)
 8005aa0:	fb83 2301 	smull	r2, r3, r3, r1
 8005aa4:	105a      	asrs	r2, r3, #1
 8005aa6:	17cb      	asrs	r3, r1, #31
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	18c2      	adds	r2, r0, r3
 8005aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ab0:	4413      	add	r3, r2
 8005ab2:	17da      	asrs	r2, r3, #31
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ab8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005abe:	1851      	adds	r1, r2, r1
 8005ac0:	61b9      	str	r1, [r7, #24]
 8005ac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ac4:	eb43 0101 	adc.w	r1, r3, r1
 8005ac8:	61f9      	str	r1, [r7, #28]
 8005aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ace:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 8005ad2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005ad6:	4956      	ldr	r1, [pc, #344]	; (8005c30 <get_unix_time+0x270>)
 8005ad8:	1851      	adds	r1, r2, r1
 8005ada:	6139      	str	r1, [r7, #16]
 8005adc:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ae6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 8005aea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	1896      	adds	r6, r2, r2
 8005af4:	60be      	str	r6, [r7, #8]
 8005af6:	415b      	adcs	r3, r3
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005afe:	eb12 0800 	adds.w	r8, r2, r0
 8005b02:	eb43 0901 	adc.w	r9, r3, r1
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005b12:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005b16:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005b1a:	ebb2 0408 	subs.w	r4, r2, r8
 8005b1e:	eb63 0509 	sbc.w	r5, r3, r9
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	012b      	lsls	r3, r5, #4
 8005b2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005b30:	0122      	lsls	r2, r4, #4
 8005b32:	ebb2 0a04 	subs.w	sl, r2, r4
 8005b36:	eb63 0b05 	sbc.w	fp, r3, r5
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8005b46:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8005b4a:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8005b4e:	4692      	mov	sl, r2
 8005b50:	469b      	mov	fp, r3
 8005b52:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 8005b56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005b60:	fb03 f202 	mul.w	r2, r3, r2
 8005b64:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005b68:	4619      	mov	r1, r3
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	1a5b      	subs	r3, r3, r1
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8005b78:	4413      	add	r3, r2
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b84:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005b88:	4621      	mov	r1, r4
 8005b8a:	1851      	adds	r1, r2, r1
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	eb43 0101 	adc.w	r1, r3, r1
 8005b94:	6079      	str	r1, [r7, #4]
 8005b96:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b9a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 8005b9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	0e02      	lsrs	r2, r0, #24
 8005bac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005bb0:	0e0b      	lsrs	r3, r1, #24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 8005bb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	0c02      	lsrs	r2, r0, #16
 8005bc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005bca:	0c0b      	lsrs	r3, r1, #16
 8005bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bce:	3101      	adds	r1, #1
 8005bd0:	b2d3      	uxtb	r3, r2
 8005bd2:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 8005bd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	0a02      	lsrs	r2, r0, #8
 8005be2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005be6:	0a0b      	lsrs	r3, r1, #8
 8005be8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bea:	3102      	adds	r1, #2
 8005bec:	b2d3      	uxtb	r3, r2
 8005bee:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	3303      	adds	r3, #3
 8005bf4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005bf8:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 8005bfa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c04:	3304      	adds	r3, #4
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	3305      	adds	r3, #5
 8005c0e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3774      	adds	r7, #116	; 0x74
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	2400213c 	.word	0x2400213c
 8005c24:	cccccccd 	.word	0xcccccccd
 8005c28:	51eb851f 	.word	0x51eb851f
 8005c2c:	66666667 	.word	0x66666667
 8005c30:	fff50537 	.word	0xfff50537

08005c34 <calibrateRTC>:
 *               [6] = Second
 *               [7] = ms MSB
 *               [8] = ms LSB
 */
void calibrateRTC(uint8_t *buffer)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	; 0x30
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	789b      	ldrb	r3, [r3, #2]
 8005c48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	78db      	ldrb	r3, [r3, #3]
 8005c50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	799b      	ldrb	r3, [r3, #6]
 8005c68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3307      	adds	r3, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	021b      	lsls	r3, r3, #8
 8005c74:	b21a      	sxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	b21b      	sxth	r3, r3
 8005c82:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005c8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005c94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005c9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ca0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ca6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005ca8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cac:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8005cae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cb0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005cb2:	f107 0320 	add.w	r3, r7, #32
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4619      	mov	r1, r3
 8005cba:	480b      	ldr	r0, [pc, #44]	; (8005ce8 <calibrateRTC+0xb4>)
 8005cbc:	f00d f8e0 	bl	8012e80 <HAL_RTC_SetDate>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK)
 8005cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <calibrateRTC+0x9e>
	{
		Error_Handler();
 8005cce:	f7fd fee3 	bl	8003a98 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8005cd2:	f107 030c 	add.w	r3, r7, #12
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4803      	ldr	r0, [pc, #12]	; (8005ce8 <calibrateRTC+0xb4>)
 8005cdc:	f000 f806 	bl	8005cec <RTC_SetTime>
}
 8005ce0:	bf00      	nop
 8005ce2:	3730      	adds	r7, #48	; 0x30
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2400213c 	.word	0x2400213c

08005cec <RTC_SetTime>:
 * @param Format Specifies the format of the time (24-hour or 12-hour).
 *
 * @retval HAL_StatusTypeDef HAL_OK on success, HAL_ERROR on failure.
 */
HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	__HAL_LOCK(hrtc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <RTC_SetTime+0x1a>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e051      	b.n	8005daa <RTC_SetTime+0xbe>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	22ca      	movs	r2, #202	; 0xca
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2253      	movs	r2, #83	; 0x53
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

	status = RTC_EnterInitMode(hrtc);
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f00d f9a4 	bl	8013074 <RTC_EnterInitMode>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK)
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d129      	bne.n	8005d8a <RTC_SetTime+0x9e>
	{
		sTime->TimeFormat = 0x00U;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));
		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f00d fa09 	bl	8013158 <RTC_ByteToBcd2>
 8005d46:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005d48:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f00d fa02 	bl	8013158 <RTC_ByteToBcd2>
 8005d54:	4603      	mov	r3, r0
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	789b      	ldrb	r3, [r3, #2]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f00d f9fa 	bl	8013158 <RTC_ByteToBcd2>
 8005d64:	4603      	mov	r3, r0
 8005d66:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	78db      	ldrb	r3, [r3, #3]
 8005d6e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]

		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6939      	ldr	r1, [r7, #16]
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	; (8005db4 <RTC_SetTime+0xc8>)
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	6013      	str	r3, [r2, #0]

		status = RTC_ExitInitMode(hrtc);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f00d f9ab 	bl	80130dc <RTC_ExitInitMode>
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]
	}

	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK)
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <RTC_SetTime+0xb4>
	{
		hrtc->State = HAL_RTC_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hrtc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd90      	pop	{r4, r7, pc}
 8005db2:	bf00      	nop
 8005db4:	007f7f7f 	.word	0x007f7f7f

08005db8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dbe:	4a31      	ldr	r2, [pc, #196]	; (8005e84 <MX_USART1_UART_Init+0xcc>)
 8005dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dc4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005dca:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005dd6:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ddc:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dde:	220c      	movs	r2, #12
 8005de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005de2:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005de8:	4b25      	ldr	r3, [pc, #148]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e00:	481f      	ldr	r0, [pc, #124]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e02:	f00f fb8b 	bl	801551c <HAL_UART_Init>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005e0c:	f7fd fe44 	bl	8003a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e10:	2100      	movs	r1, #0
 8005e12:	481b      	ldr	r0, [pc, #108]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e14:	f012 f8d1 	bl	8017fba <HAL_UARTEx_SetTxFifoThreshold>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005e1e:	f7fd fe3b 	bl	8003a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e22:	2100      	movs	r1, #0
 8005e24:	4816      	ldr	r0, [pc, #88]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e26:	f012 f906 	bl	8018036 <HAL_UARTEx_SetRxFifoThreshold>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005e30:	f7fd fe32 	bl	8003a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005e34:	4812      	ldr	r0, [pc, #72]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e36:	f012 f887 	bl	8017f48 <HAL_UARTEx_DisableFifoMode>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005e40:	f7fd fe2a 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005e44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e48:	480d      	ldr	r0, [pc, #52]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e4a:	f012 f8f4 	bl	8018036 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8005e4e:	480c      	ldr	r0, [pc, #48]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e50:	f012 f83f 	bl	8017ed2 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005e54:	480a      	ldr	r0, [pc, #40]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e56:	f012 f809 	bl	8017e6c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e68:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <MX_USART1_UART_Init+0xc8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e78:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005e7a:	bf00      	nop
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	240024c4 	.word	0x240024c4
 8005e84:	40011000 	.word	0x40011000

08005e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b0ba      	sub	sp, #232	; 0xe8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	22c0      	movs	r2, #192	; 0xc0
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f015 fe31 	bl	801bb10 <memset>
  if(uartHandle->Instance==USART1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a41      	ldr	r2, [pc, #260]	; (8005fb8 <HAL_UART_MspInit+0x130>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d17b      	bne.n	8005fb0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005eb8:	f04f 0201 	mov.w	r2, #1
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005ec4:	2318      	movs	r3, #24
 8005ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005eca:	f107 0310 	add.w	r3, r7, #16
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f00a f95c 	bl	801018c <HAL_RCCEx_PeriphCLKConfig>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005eda:	f7fd fddd 	bl	8003a98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ede:	4b37      	ldr	r3, [pc, #220]	; (8005fbc <HAL_UART_MspInit+0x134>)
 8005ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ee4:	4a35      	ldr	r2, [pc, #212]	; (8005fbc <HAL_UART_MspInit+0x134>)
 8005ee6:	f043 0310 	orr.w	r3, r3, #16
 8005eea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005eee:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <HAL_UART_MspInit+0x134>)
 8005ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005efc:	4b2f      	ldr	r3, [pc, #188]	; (8005fbc <HAL_UART_MspInit+0x134>)
 8005efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f02:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <HAL_UART_MspInit+0x134>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f0c:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <HAL_UART_MspInit+0x134>)
 8005f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005f1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f22:	2302      	movs	r3, #2
 8005f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f34:	2307      	movs	r3, #7
 8005f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	481f      	ldr	r0, [pc, #124]	; (8005fc0 <HAL_UART_MspInit+0x138>)
 8005f42:	f006 f9d3 	bl	800c2ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f48:	4a1f      	ldr	r2, [pc, #124]	; (8005fc8 <HAL_UART_MspInit+0x140>)
 8005f4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005f4c:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f4e:	222a      	movs	r2, #42	; 0x2a
 8005f50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f54:	2240      	movs	r2, #64	; 0x40
 8005f56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f58:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f5e:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f66:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f6c:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005f72:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005f84:	480f      	ldr	r0, [pc, #60]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f86:	f002 fe8b 	bl	8008ca0 <HAL_DMA_Init>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005f90:	f7fd fd82 	bl	8003a98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a0b      	ldr	r2, [pc, #44]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <HAL_UART_MspInit+0x13c>)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2105      	movs	r1, #5
 8005fa4:	2025      	movs	r0, #37	; 0x25
 8005fa6:	f002 fa4d 	bl	8008444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005faa:	2025      	movs	r0, #37	; 0x25
 8005fac:	f002 fa64 	bl	8008478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	37e8      	adds	r7, #232	; 0xe8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40011000 	.word	0x40011000
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	58020000 	.word	0x58020000
 8005fc4:	24002558 	.word	0x24002558
 8005fc8:	40020040 	.word	0x40020040

08005fcc <voltage_monitor_init>:
 * @brief Initializes the voltage monitoring system by setting up each rail's
 *        parameters such as name, error count, enable status, voltage limits,
 *        and out-of-bound counters.
 */
void voltage_monitor_init()
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005fd0:	4bc0      	ldr	r3, [pc, #768]	; (80062d4 <voltage_monitor_init+0x308>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005fd6:	4bbf      	ldr	r3, [pc, #764]	; (80062d4 <voltage_monitor_init+0x308>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = ENABLED;
 8005fdc:	4bbd      	ldr	r3, [pc, #756]	; (80062d4 <voltage_monitor_init+0x308>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005fe2:	4bbc      	ldr	r3, [pc, #752]	; (80062d4 <voltage_monitor_init+0x308>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = RAIL_VSENSE_MAX;
 8005fe8:	4bba      	ldr	r3, [pc, #744]	; (80062d4 <voltage_monitor_init+0x308>)
 8005fea:	f240 328a 	movw	r2, #906	; 0x38a
 8005fee:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = RAIL_VSENSE_MIN;
 8005ff0:	4bb8      	ldr	r3, [pc, #736]	; (80062d4 <voltage_monitor_init+0x308>)
 8005ff2:	f44f 7215 	mov.w	r2, #596	; 0x254
 8005ff6:	811a      	strh	r2, [r3, #8]
	rail_monitor[RAIL_vsense].OOB_1 = 0;
 8005ff8:	4bb6      	ldr	r3, [pc, #728]	; (80062d4 <voltage_monitor_init+0x308>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	815a      	strh	r2, [r3, #10]
	rail_monitor[RAIL_vsense].OOB_2 = 0;
 8005ffe:	4bb5      	ldr	r3, [pc, #724]	; (80062d4 <voltage_monitor_init+0x308>)
 8006000:	2200      	movs	r2, #0
 8006002:	819a      	strh	r2, [r3, #12]
	rail_monitor[RAIL_vsense].OOB_3 = 0;
 8006004:	4bb3      	ldr	r3, [pc, #716]	; (80062d4 <voltage_monitor_init+0x308>)
 8006006:	2200      	movs	r2, #0
 8006008:	81da      	strh	r2, [r3, #14]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 800600a:	4bb2      	ldr	r3, [pc, #712]	; (80062d4 <voltage_monitor_init+0x308>)
 800600c:	2201      	movs	r2, #1
 800600e:	741a      	strb	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8006010:	4bb0      	ldr	r3, [pc, #704]	; (80062d4 <voltage_monitor_init+0x308>)
 8006012:	2200      	movs	r2, #0
 8006014:	745a      	strb	r2, [r3, #17]
	rail_monitor[RAIL_vrefint].is_enabled = ENABLED;
 8006016:	4baf      	ldr	r3, [pc, #700]	; (80062d4 <voltage_monitor_init+0x308>)
 8006018:	2201      	movs	r2, #1
 800601a:	749a      	strb	r2, [r3, #18]
	rail_monitor[RAIL_vrefint].data = 0;
 800601c:	4bad      	ldr	r3, [pc, #692]	; (80062d4 <voltage_monitor_init+0x308>)
 800601e:	2200      	movs	r2, #0
 8006020:	829a      	strh	r2, [r3, #20]
	rail_monitor[RAIL_vrefint].max_voltage = RAIL_VREFINT_MAX;
 8006022:	4bac      	ldr	r3, [pc, #688]	; (80062d4 <voltage_monitor_init+0x308>)
 8006024:	f240 6215 	movw	r2, #1557	; 0x615
 8006028:	82da      	strh	r2, [r3, #22]
	rail_monitor[RAIL_vrefint].min_voltage = RAIL_VREFINT_MIN;
 800602a:	4baa      	ldr	r3, [pc, #680]	; (80062d4 <voltage_monitor_init+0x308>)
 800602c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8006030:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_vrefint].OOB_1 = 0;
 8006032:	4ba8      	ldr	r3, [pc, #672]	; (80062d4 <voltage_monitor_init+0x308>)
 8006034:	2200      	movs	r2, #0
 8006036:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_vrefint].OOB_2 = 0;
 8006038:	4ba6      	ldr	r3, [pc, #664]	; (80062d4 <voltage_monitor_init+0x308>)
 800603a:	2200      	movs	r2, #0
 800603c:	839a      	strh	r2, [r3, #28]
	rail_monitor[RAIL_vrefint].OOB_3 = 0;
 800603e:	4ba5      	ldr	r3, [pc, #660]	; (80062d4 <voltage_monitor_init+0x308>)
 8006040:	2200      	movs	r2, #0
 8006042:	83da      	strh	r2, [r3, #30]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8006044:	4ba3      	ldr	r3, [pc, #652]	; (80062d4 <voltage_monitor_init+0x308>)
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 800604c:	4ba1      	ldr	r3, [pc, #644]	; (80062d4 <voltage_monitor_init+0x308>)
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rail_monitor[RAIL_TEMP1].is_enabled = ENABLED;
 8006054:	4b9f      	ldr	r3, [pc, #636]	; (80062d4 <voltage_monitor_init+0x308>)
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP1].data = 0;
 800605c:	4b9d      	ldr	r3, [pc, #628]	; (80062d4 <voltage_monitor_init+0x308>)
 800605e:	2200      	movs	r2, #0
 8006060:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP1].max_voltage = RAIL_TEMP1_MAX;
 8006062:	4b9c      	ldr	r3, [pc, #624]	; (80062d4 <voltage_monitor_init+0x308>)
 8006064:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006068:	84da      	strh	r2, [r3, #38]	; 0x26
	rail_monitor[RAIL_TEMP1].min_voltage = RAIL_TEMP1_MIN;
 800606a:	4b9a      	ldr	r3, [pc, #616]	; (80062d4 <voltage_monitor_init+0x308>)
 800606c:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP1].OOB_1 = 0;
 8006072:	4b98      	ldr	r3, [pc, #608]	; (80062d4 <voltage_monitor_init+0x308>)
 8006074:	2200      	movs	r2, #0
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP1].OOB_2 = 0;
 8006078:	4b96      	ldr	r3, [pc, #600]	; (80062d4 <voltage_monitor_init+0x308>)
 800607a:	2200      	movs	r2, #0
 800607c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP1].OOB_3 = 0;
 800607e:	4b95      	ldr	r3, [pc, #596]	; (80062d4 <voltage_monitor_init+0x308>)
 8006080:	2200      	movs	r2, #0
 8006082:	85da      	strh	r2, [r3, #46]	; 0x2e

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8006084:	4b93      	ldr	r3, [pc, #588]	; (80062d4 <voltage_monitor_init+0x308>)
 8006086:	2203      	movs	r2, #3
 8006088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800608c:	4b91      	ldr	r3, [pc, #580]	; (80062d4 <voltage_monitor_init+0x308>)
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	rail_monitor[RAIL_TEMP2].is_enabled = ENABLED;
 8006094:	4b8f      	ldr	r3, [pc, #572]	; (80062d4 <voltage_monitor_init+0x308>)
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP2].data = 0;
 800609c:	4b8d      	ldr	r3, [pc, #564]	; (80062d4 <voltage_monitor_init+0x308>)
 800609e:	2200      	movs	r2, #0
 80060a0:	869a      	strh	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP2].max_voltage = RAIL_TEMP2_MAX;
 80060a2:	4b8c      	ldr	r3, [pc, #560]	; (80062d4 <voltage_monitor_init+0x308>)
 80060a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060a8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP2].min_voltage = RAIL_TEMP2_MIN;
 80060aa:	4b8a      	ldr	r3, [pc, #552]	; (80062d4 <voltage_monitor_init+0x308>)
 80060ac:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80060b0:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP2].OOB_1 = 0;
 80060b2:	4b88      	ldr	r3, [pc, #544]	; (80062d4 <voltage_monitor_init+0x308>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	875a      	strh	r2, [r3, #58]	; 0x3a
	rail_monitor[RAIL_TEMP2].OOB_2 = 0;
 80060b8:	4b86      	ldr	r3, [pc, #536]	; (80062d4 <voltage_monitor_init+0x308>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	879a      	strh	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_TEMP2].OOB_3 = 0;
 80060be:	4b85      	ldr	r3, [pc, #532]	; (80062d4 <voltage_monitor_init+0x308>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	87da      	strh	r2, [r3, #62]	; 0x3e

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80060c4:	4b83      	ldr	r3, [pc, #524]	; (80062d4 <voltage_monitor_init+0x308>)
 80060c6:	2204      	movs	r2, #4
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80060cc:	4b81      	ldr	r3, [pc, #516]	; (80062d4 <voltage_monitor_init+0x308>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	rail_monitor[RAIL_TEMP3].is_enabled = ENABLED;
 80060d4:	4b7f      	ldr	r3, [pc, #508]	; (80062d4 <voltage_monitor_init+0x308>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_TEMP3].data = 0;
 80060dc:	4b7d      	ldr	r3, [pc, #500]	; (80062d4 <voltage_monitor_init+0x308>)
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rail_monitor[RAIL_TEMP3].max_voltage = RAIL_TEMP3_MAX;
 80060e4:	4b7b      	ldr	r3, [pc, #492]	; (80062d4 <voltage_monitor_init+0x308>)
 80060e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_TEMP3].min_voltage = RAIL_TEMP3_MIN;
 80060ee:	4b79      	ldr	r3, [pc, #484]	; (80062d4 <voltage_monitor_init+0x308>)
 80060f0:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80060f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_TEMP3].OOB_1 = 0;
 80060f8:	4b76      	ldr	r3, [pc, #472]	; (80062d4 <voltage_monitor_init+0x308>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_TEMP3].OOB_2 = 0;
 8006100:	4b74      	ldr	r3, [pc, #464]	; (80062d4 <voltage_monitor_init+0x308>)
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_TEMP3].OOB_3 = 0;
 8006108:	4b72      	ldr	r3, [pc, #456]	; (80062d4 <voltage_monitor_init+0x308>)
 800610a:	2200      	movs	r2, #0
 800610c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8006110:	4b70      	ldr	r3, [pc, #448]	; (80062d4 <voltage_monitor_init+0x308>)
 8006112:	2205      	movs	r2, #5
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8006118:	4b6e      	ldr	r3, [pc, #440]	; (80062d4 <voltage_monitor_init+0x308>)
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_TEMP4].is_enabled = ENABLED;
 8006120:	4b6c      	ldr	r3, [pc, #432]	; (80062d4 <voltage_monitor_init+0x308>)
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_TEMP4].data = 0;
 8006128:	4b6a      	ldr	r3, [pc, #424]	; (80062d4 <voltage_monitor_init+0x308>)
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_TEMP4].max_voltage = RAIL_TEMP4_MAX;
 8006130:	4b68      	ldr	r3, [pc, #416]	; (80062d4 <voltage_monitor_init+0x308>)
 8006132:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006136:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_TEMP4].min_voltage = RAIL_TEMP4_MIN;
 800613a:	4b66      	ldr	r3, [pc, #408]	; (80062d4 <voltage_monitor_init+0x308>)
 800613c:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006140:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rail_monitor[RAIL_TEMP4].OOB_1 = 0;
 8006144:	4b63      	ldr	r3, [pc, #396]	; (80062d4 <voltage_monitor_init+0x308>)
 8006146:	2200      	movs	r2, #0
 8006148:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_TEMP4].OOB_2 = 0;
 800614c:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <voltage_monitor_init+0x308>)
 800614e:	2200      	movs	r2, #0
 8006150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_TEMP4].OOB_3 = 0;
 8006154:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <voltage_monitor_init+0x308>)
 8006156:	2200      	movs	r2, #0
 8006158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 800615c:	4b5d      	ldr	r3, [pc, #372]	; (80062d4 <voltage_monitor_init+0x308>)
 800615e:	2206      	movs	r2, #6
 8006160:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	rail_monitor[RAIL_busvmon].error_count = 0;
 8006164:	4b5b      	ldr	r3, [pc, #364]	; (80062d4 <voltage_monitor_init+0x308>)
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	rail_monitor[RAIL_busvmon].is_enabled = DISABLED;
 800616c:	4b59      	ldr	r3, [pc, #356]	; (80062d4 <voltage_monitor_init+0x308>)
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rail_monitor[RAIL_busvmon].data = 0;
 8006174:	4b57      	ldr	r3, [pc, #348]	; (80062d4 <voltage_monitor_init+0x308>)
 8006176:	2200      	movs	r2, #0
 8006178:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_busvmon].max_voltage = RAIL_BUSVMON_MAX;
 800617c:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <voltage_monitor_init+0x308>)
 800617e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006182:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_busvmon].min_voltage = RAIL_BUSVMON_MIN;
 8006186:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <voltage_monitor_init+0x308>)
 8006188:	2200      	movs	r2, #0
 800618a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_busvmon].OOB_1 = 0;
 800618e:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <voltage_monitor_init+0x308>)
 8006190:	2200      	movs	r2, #0
 8006192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_busvmon].OOB_2 = 0;
 8006196:	4b4f      	ldr	r3, [pc, #316]	; (80062d4 <voltage_monitor_init+0x308>)
 8006198:	2200      	movs	r2, #0
 800619a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	rail_monitor[RAIL_busvmon].OOB_3 = 0;
 800619e:	4b4d      	ldr	r3, [pc, #308]	; (80062d4 <voltage_monitor_init+0x308>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80061a6:	4b4b      	ldr	r3, [pc, #300]	; (80062d4 <voltage_monitor_init+0x308>)
 80061a8:	2207      	movs	r2, #7
 80061aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_busimon].error_count = 0;
 80061ae:	4b49      	ldr	r3, [pc, #292]	; (80062d4 <voltage_monitor_init+0x308>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	rail_monitor[RAIL_busimon].is_enabled = DISABLED;
 80061b6:	4b47      	ldr	r3, [pc, #284]	; (80062d4 <voltage_monitor_init+0x308>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_busimon].data = 0;
 80061be:	4b45      	ldr	r3, [pc, #276]	; (80062d4 <voltage_monitor_init+0x308>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_busimon].max_voltage = RAIL_BUSIMON_MAX;
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <voltage_monitor_init+0x308>)
 80061c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80061cc:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	rail_monitor[RAIL_busimon].min_voltage = RAIL_BUSIMON_MIN;
 80061d0:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <voltage_monitor_init+0x308>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_busimon].OOB_1 = 0;
 80061d8:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <voltage_monitor_init+0x308>)
 80061da:	2200      	movs	r2, #0
 80061dc:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_busimon].OOB_2 = 0;
 80061e0:	4b3c      	ldr	r3, [pc, #240]	; (80062d4 <voltage_monitor_init+0x308>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_busimon].OOB_3 = 0;
 80061e8:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <voltage_monitor_init+0x308>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80061f0:	4b38      	ldr	r3, [pc, #224]	; (80062d4 <voltage_monitor_init+0x308>)
 80061f2:	2208      	movs	r2, #8
 80061f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	rail_monitor[RAIL_2v5].error_count = 0;
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <voltage_monitor_init+0x308>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	rail_monitor[RAIL_2v5].is_enabled = DISABLED;
 8006200:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <voltage_monitor_init+0x308>)
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_2v5].data = 0;
 8006208:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <voltage_monitor_init+0x308>)
 800620a:	2200      	movs	r2, #0
 800620c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_2v5].max_voltage = RAIL_2V5_MAX;
 8006210:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <voltage_monitor_init+0x308>)
 8006212:	f640 5256 	movw	r2, #3414	; 0xd56
 8006216:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_2v5].min_voltage = RAIL_2V5_MIN;
 800621a:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <voltage_monitor_init+0x308>)
 800621c:	f640 22e8 	movw	r2, #2792	; 0xae8
 8006220:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_2v5].OOB_1 = 0;
 8006224:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <voltage_monitor_init+0x308>)
 8006226:	2200      	movs	r2, #0
 8006228:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	rail_monitor[RAIL_2v5].OOB_2 = 0;
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <voltage_monitor_init+0x308>)
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_2v5].OOB_3 = 0;
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <voltage_monitor_init+0x308>)
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800623c:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <voltage_monitor_init+0x308>)
 800623e:	2209      	movs	r2, #9
 8006240:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_3v3].error_count = 0;
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <voltage_monitor_init+0x308>)
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	rail_monitor[RAIL_3v3].is_enabled = DISABLED;
 800624c:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <voltage_monitor_init+0x308>)
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_3v3].data = 0;
 8006254:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <voltage_monitor_init+0x308>)
 8006256:	2200      	movs	r2, #0
 8006258:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	rail_monitor[RAIL_3v3].max_voltage = RAIL_3V3_MAX;
 800625c:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <voltage_monitor_init+0x308>)
 800625e:	f240 623c 	movw	r2, #1596	; 0x63c
 8006262:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_3v3].min_voltage = RAIL_3V3_MIN;
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <voltage_monitor_init+0x308>)
 8006268:	f240 521a 	movw	r2, #1306	; 0x51a
 800626c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_3v3].OOB_1 = 0;
 8006270:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <voltage_monitor_init+0x308>)
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_3v3].OOB_2 = 0;
 8006278:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <voltage_monitor_init+0x308>)
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	rail_monitor[RAIL_3v3].OOB_3 = 0;
 8006280:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <voltage_monitor_init+0x308>)
 8006282:	2200      	movs	r2, #0
 8006284:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	rail_monitor[RAIL_5v].name = RAIL_5v;
 8006288:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <voltage_monitor_init+0x308>)
 800628a:	220a      	movs	r2, #10
 800628c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_5v].error_count = 0;
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <voltage_monitor_init+0x308>)
 8006292:	2200      	movs	r2, #0
 8006294:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_5v].is_enabled = DISABLED;
 8006298:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <voltage_monitor_init+0x308>)
 800629a:	2200      	movs	r2, #0
 800629c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rail_monitor[RAIL_5v].data = 0;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <voltage_monitor_init+0x308>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_5v].max_voltage = RAIL_5V_MAX;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <voltage_monitor_init+0x308>)
 80062aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80062ae:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_5v].min_voltage = RAIL_5V_MIN;
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <voltage_monitor_init+0x308>)
 80062b4:	f640 5216 	movw	r2, #3350	; 0xd16
 80062b8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	rail_monitor[RAIL_5v].OOB_1 = 0;
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <voltage_monitor_init+0x308>)
 80062be:	2200      	movs	r2, #0
 80062c0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_5v].OOB_2 = 0;
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <voltage_monitor_init+0x308>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_5v].OOB_3 = 0;
 80062cc:	4b01      	ldr	r3, [pc, #4]	; (80062d4 <voltage_monitor_init+0x308>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	e002      	b.n	80062d8 <voltage_monitor_init+0x30c>
 80062d2:	bf00      	nop
 80062d4:	240025d0 	.word	0x240025d0
 80062d8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80062dc:	4b86      	ldr	r3, [pc, #536]	; (80064f8 <voltage_monitor_init+0x52c>)
 80062de:	220b      	movs	r2, #11
 80062e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_n3v3].error_count = 0;
 80062e4:	4b84      	ldr	r3, [pc, #528]	; (80064f8 <voltage_monitor_init+0x52c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	rail_monitor[RAIL_n3v3].is_enabled = DISABLED;
 80062ec:	4b82      	ldr	r3, [pc, #520]	; (80064f8 <voltage_monitor_init+0x52c>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	rail_monitor[RAIL_n3v3].data = 0;
 80062f4:	4b80      	ldr	r3, [pc, #512]	; (80064f8 <voltage_monitor_init+0x52c>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	rail_monitor[RAIL_n3v3].max_voltage = RAIL_N3V3_MAX;
 80062fc:	4b7e      	ldr	r3, [pc, #504]	; (80064f8 <voltage_monitor_init+0x52c>)
 80062fe:	f241 02be 	movw	r2, #4286	; 0x10be
 8006302:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	rail_monitor[RAIL_n3v3].min_voltage = RAIL_N3V3_MIN;
 8006306:	4b7c      	ldr	r3, [pc, #496]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006308:	f640 52b3 	movw	r2, #3507	; 0xdb3
 800630c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	rail_monitor[RAIL_n3v3].OOB_1 = 0;
 8006310:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006312:	2200      	movs	r2, #0
 8006314:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	rail_monitor[RAIL_n3v3].OOB_2 = 0;
 8006318:	4b77      	ldr	r3, [pc, #476]	; (80064f8 <voltage_monitor_init+0x52c>)
 800631a:	2200      	movs	r2, #0
 800631c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	rail_monitor[RAIL_n3v3].OOB_3 = 0;
 8006320:	4b75      	ldr	r3, [pc, #468]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8006328:	4b73      	ldr	r3, [pc, #460]	; (80064f8 <voltage_monitor_init+0x52c>)
 800632a:	220c      	movs	r2, #12
 800632c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	rail_monitor[RAIL_n5v].error_count = 0;
 8006330:	4b71      	ldr	r3, [pc, #452]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006332:	2200      	movs	r2, #0
 8006334:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	rail_monitor[RAIL_n5v].is_enabled = DISABLED;
 8006338:	4b6f      	ldr	r3, [pc, #444]	; (80064f8 <voltage_monitor_init+0x52c>)
 800633a:	2200      	movs	r2, #0
 800633c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rail_monitor[RAIL_n5v].data = 0;
 8006340:	4b6d      	ldr	r3, [pc, #436]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006342:	2200      	movs	r2, #0
 8006344:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	rail_monitor[RAIL_n5v].max_voltage = RAIL_N5V_MAX;
 8006348:	4b6b      	ldr	r3, [pc, #428]	; (80064f8 <voltage_monitor_init+0x52c>)
 800634a:	f242 7210 	movw	r2, #10000	; 0x2710
 800634e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	rail_monitor[RAIL_n5v].min_voltage = RAIL_N5V_MIN;
 8006352:	4b69      	ldr	r3, [pc, #420]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	rail_monitor[RAIL_n5v].OOB_1 = 0;
 800635a:	4b67      	ldr	r3, [pc, #412]	; (80064f8 <voltage_monitor_init+0x52c>)
 800635c:	2200      	movs	r2, #0
 800635e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	rail_monitor[RAIL_n5v].OOB_2 = 0;
 8006362:	4b65      	ldr	r3, [pc, #404]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006364:	2200      	movs	r2, #0
 8006366:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	rail_monitor[RAIL_n5v].OOB_3 = 0;
 800636a:	4b63      	ldr	r3, [pc, #396]	; (80064f8 <voltage_monitor_init+0x52c>)
 800636c:	2200      	movs	r2, #0
 800636e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8006372:	4b61      	ldr	r3, [pc, #388]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006374:	220d      	movs	r2, #13
 8006376:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	rail_monitor[RAIL_15v].error_count = 0;
 800637a:	4b5f      	ldr	r3, [pc, #380]	; (80064f8 <voltage_monitor_init+0x52c>)
 800637c:	2200      	movs	r2, #0
 800637e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	rail_monitor[RAIL_15v].is_enabled = DISABLED;
 8006382:	4b5d      	ldr	r3, [pc, #372]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006384:	2200      	movs	r2, #0
 8006386:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	rail_monitor[RAIL_15v].data = 0;
 800638a:	4b5b      	ldr	r3, [pc, #364]	; (80064f8 <voltage_monitor_init+0x52c>)
 800638c:	2200      	movs	r2, #0
 800638e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	rail_monitor[RAIL_15v].max_voltage = RAIL_15V_MAX;
 8006392:	4b59      	ldr	r3, [pc, #356]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006394:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006398:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	rail_monitor[RAIL_15v].min_voltage = RAIL_15V_MIN;
 800639c:	4b56      	ldr	r3, [pc, #344]	; (80064f8 <voltage_monitor_init+0x52c>)
 800639e:	f640 5216 	movw	r2, #3350	; 0xd16
 80063a2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	rail_monitor[RAIL_15v].OOB_1 = 0;
 80063a6:	4b54      	ldr	r3, [pc, #336]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	rail_monitor[RAIL_15v].OOB_2 = 0;
 80063ae:	4b52      	ldr	r3, [pc, #328]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	rail_monitor[RAIL_15v].OOB_3 = 0;
 80063b6:	4b50      	ldr	r3, [pc, #320]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80063be:	4b4e      	ldr	r3, [pc, #312]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063c0:	220e      	movs	r2, #14
 80063c2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	rail_monitor[RAIL_5vref].error_count = 0;
 80063c6:	4b4c      	ldr	r3, [pc, #304]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	rail_monitor[RAIL_5vref].is_enabled = DISABLED;
 80063ce:	4b4a      	ldr	r3, [pc, #296]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	rail_monitor[RAIL_5vref].data = 0;
 80063d6:	4b48      	ldr	r3, [pc, #288]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	rail_monitor[RAIL_5vref].max_voltage = RAIL_5VREF_MAX;
 80063de:	4b46      	ldr	r3, [pc, #280]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063e0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80063e4:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
	rail_monitor[RAIL_5vref].min_voltage = RAIL_5VREF_MIN;
 80063e8:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063ea:	f640 5216 	movw	r2, #3350	; 0xd16
 80063ee:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	rail_monitor[RAIL_5vref].OOB_1 = 0;
 80063f2:	4b41      	ldr	r3, [pc, #260]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	rail_monitor[RAIL_5vref].OOB_2 = 0;
 80063fa:	4b3f      	ldr	r3, [pc, #252]	; (80064f8 <voltage_monitor_init+0x52c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	rail_monitor[RAIL_5vref].OOB_3 = 0;
 8006402:	4b3d      	ldr	r3, [pc, #244]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006404:	2200      	movs	r2, #0
 8006406:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800640a:	4b3b      	ldr	r3, [pc, #236]	; (80064f8 <voltage_monitor_init+0x52c>)
 800640c:	220f      	movs	r2, #15
 800640e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	rail_monitor[RAIL_n200v].error_count = 0;
 8006412:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006414:	2200      	movs	r2, #0
 8006416:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	rail_monitor[RAIL_n200v].is_enabled = DISABLED;
 800641a:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <voltage_monitor_init+0x52c>)
 800641c:	2200      	movs	r2, #0
 800641e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	rail_monitor[RAIL_n200v].data = 0;
 8006422:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006424:	2200      	movs	r2, #0
 8006426:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	rail_monitor[RAIL_n200v].max_voltage = RAIL_N200V_MAX;
 800642a:	4b33      	ldr	r3, [pc, #204]	; (80064f8 <voltage_monitor_init+0x52c>)
 800642c:	f640 6266 	movw	r2, #3686	; 0xe66
 8006430:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	rail_monitor[RAIL_n200v].min_voltage = RAIL_N200V_MIN;
 8006434:	4b30      	ldr	r3, [pc, #192]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006436:	f640 32c7 	movw	r2, #3015	; 0xbc7
 800643a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	rail_monitor[RAIL_n200v].OOB_1 = 0;
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006440:	2200      	movs	r2, #0
 8006442:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	rail_monitor[RAIL_n200v].OOB_2 = 0;
 8006446:	4b2c      	ldr	r3, [pc, #176]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006448:	2200      	movs	r2, #0
 800644a:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	rail_monitor[RAIL_n200v].OOB_3 = 0;
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006450:	2200      	movs	r2, #0
 8006452:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe

	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8006456:	4b28      	ldr	r3, [pc, #160]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006458:	2210      	movs	r2, #16
 800645a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rail_monitor[RAIL_n800v].error_count = 0;
 800645e:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	rail_monitor[RAIL_n800v].is_enabled = DISABLED;
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	rail_monitor[RAIL_n800v].data = 0;
 800646e:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006470:	2200      	movs	r2, #0
 8006472:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	rail_monitor[RAIL_n800v].max_voltage = RAIL_N800V_MAX;
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006478:	f640 52a6 	movw	r2, #3494	; 0xda6
 800647c:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rail_monitor[RAIL_n800v].min_voltage = RAIL_N800V_MIN;
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006482:	f640 322b 	movw	r2, #2859	; 0xb2b
 8006486:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	rail_monitor[RAIL_n800v].OOB_1 = 0;
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <voltage_monitor_init+0x52c>)
 800648c:	2200      	movs	r2, #0
 800648e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	rail_monitor[RAIL_n800v].OOB_2 = 0;
 8006492:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <voltage_monitor_init+0x52c>)
 8006494:	2200      	movs	r2, #0
 8006496:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	rail_monitor[RAIL_n800v].OOB_3 = 0;
 800649a:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <voltage_monitor_init+0x52c>)
 800649c:	2200      	movs	r2, #0
 800649e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064a4:	2211      	movs	r2, #17
 80064a6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	rail_monitor[RAIL_TMP1].error_count = 0;
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	rail_monitor[RAIL_TMP1].is_enabled = DISABLED;
 80064b2:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	rail_monitor[RAIL_TMP1].data = 0;
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064bc:	2200      	movs	r2, #0
 80064be:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	rail_monitor[RAIL_TMP1].max_voltage = RAIL_TMP1_MAX;
 80064c2:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064c4:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 80064c8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	rail_monitor[RAIL_TMP1].min_voltage = RAIL_TMP1_MIN;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064ce:	f240 72e7 	movw	r2, #2023	; 0x7e7
 80064d2:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rail_monitor[RAIL_TMP1].OOB_1 = 0;
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	rail_monitor[RAIL_TMP1].OOB_2 = 0;
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	rail_monitor[RAIL_TMP1].OOB_3 = 0;
 80064e6:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <voltage_monitor_init+0x52c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	240025d0 	.word	0x240025d0

080064fc <set_rail_monitor_enable>:
 *
 * @param rail_name The voltage rail to modify.
 * @param enable_value 1 to enable monitoring, 0 to disable.
 */
void set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	460a      	mov	r2, r1
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	4613      	mov	r3, r2
 800650a:	71bb      	strb	r3, [r7, #6]
	rail_monitor[rail_name].is_enabled = enable_value;
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	4a06      	ldr	r2, [pc, #24]	; (8006528 <set_rail_monitor_enable+0x2c>)
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	4413      	add	r3, r2
 8006514:	3302      	adds	r3, #2
 8006516:	79ba      	ldrb	r2, [r7, #6]
 8006518:	701a      	strb	r2, [r3, #0]
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	240025d0 	.word	0x240025d0

0800652c <set_rail_monitor>:
 *
 * Samples data from ADC1, ADC3, and I2C channels, then updates the corresponding
 * voltage rail monitor entries with the sampled values.
 */
void set_rail_monitor()
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af00      	add	r7, sp, #0
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe f9fd 	bl	8004934 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fa28 	bl	8004994 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8006544:	f107 030c 	add.w	r3, r7, #12
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fa75 	bl	8004a38 <sample_hk_adc3>
 800654e:	89ba      	ldrh	r2, [r7, #12]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 8006550:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <set_rail_monitor+0xb4>)
 8006552:	809a      	strh	r2, [r3, #4]
 8006554:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 8006556:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <set_rail_monitor+0xb4>)
 8006558:	829a      	strh	r2, [r3, #20]
 800655a:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800655c:	4b20      	ldr	r3, [pc, #128]	; (80065e0 <set_rail_monitor+0xb4>)
 800655e:	849a      	strh	r2, [r3, #36]	; 0x24
 8006560:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8006562:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <set_rail_monitor+0xb4>)
 8006564:	869a      	strh	r2, [r3, #52]	; 0x34
 8006566:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8006568:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <set_rail_monitor+0xb4>)
 800656a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800656e:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <set_rail_monitor+0xb4>)
 8006572:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006576:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8006578:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <set_rail_monitor+0xb4>)
 800657a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800657e:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8006580:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <set_rail_monitor+0xb4>)
 8006582:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8006586:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <set_rail_monitor+0xb4>)
 800658a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800658e:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8006590:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <set_rail_monitor+0xb4>)
 8006592:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8006596:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <set_rail_monitor+0xb4>)
 800659a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800659e:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80065a0:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <set_rail_monitor+0xb4>)
 80065a2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80065a6:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80065a8:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <set_rail_monitor+0xb4>)
 80065aa:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80065ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <set_rail_monitor+0xb4>)
 80065b2:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80065b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80065b8:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <set_rail_monitor+0xb4>)
 80065ba:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 80065be:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <set_rail_monitor+0xb4>)
 80065c2:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80065c6:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <set_rail_monitor+0xb4>)
 80065ca:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80065ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 80065d0:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <set_rail_monitor+0xb4>)
 80065d2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
}
 80065d6:	bf00      	nop
 80065d8:	3728      	adds	r7, #40	; 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	240025d0 	.word	0x240025d0

080065e4 <get_rail_monitor>:
 * @brief Retrieves the voltage rail monitor array.
 *
 * @return Pointer to the array of monitored voltage rails.
 */
VOLTAGE_RAIL* get_rail_monitor()
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
	return rail_monitor;
 80065e8:	4b02      	ldr	r3, [pc, #8]	; (80065f4 <get_rail_monitor+0x10>)
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	240025d0 	.word	0x240025d0

080065f8 <convert_ADT7410>:
 *
 * @param raw The raw temperature data from the ADT7410 sensor.
 * @return The converted temperature in degrees Celsius.
 */
int16_t convert_ADT7410(int16_t raw)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 8006602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800660e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000)
 8006612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	db07      	blt.n	800662c <convert_ADT7410+0x34>
    {
        ret -= 8192;
 800661c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006620:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006654 <convert_ADT7410+0x5c>
 8006624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006628:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 800662c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006630:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006634:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8006638:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800663c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006640:	ee17 3a90 	vmov	r3, s15
 8006644:	b21b      	sxth	r3, r3
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	46000000 	.word	0x46000000

08006658 <check_bounds>:
 * @param min The minimum acceptable value.
 * @param max The maximum acceptable value.
 * @return 1 if the value is within bounds, 0 otherwise.
 */
uint8_t check_bounds(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60ba      	str	r2, [r7, #8]
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	460b      	mov	r3, r1
 8006668:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d008      	beq.n	8006682 <check_bounds+0x2a>
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b03      	cmp	r3, #3
 8006674:	d005      	beq.n	8006682 <check_bounds+0x2a>
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d002      	beq.n	8006682 <check_bounds+0x2a>
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b05      	cmp	r3, #5
 8006680:	d124      	bne.n	80066cc <check_bounds+0x74>
	{
		int16_t converted_max = convert_ADT7410(max);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	b21b      	sxth	r3, r3
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ffb6 	bl	80065f8 <convert_ADT7410>
 800668c:	4603      	mov	r3, r0
 800668e:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	b21b      	sxth	r3, r3
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff ffaf 	bl	80065f8 <convert_ADT7410>
 800669a:	4603      	mov	r3, r0
 800669c:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 800669e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff ffa8 	bl	80065f8 <convert_ADT7410>
 80066a8:	4603      	mov	r3, r0
 80066aa:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min)
 80066ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80066b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	dc07      	bgt.n	80066c8 <check_bounds+0x70>
 80066b8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80066bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	db01      	blt.n	80066c8 <check_bounds+0x70>
		{
			return 1;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e00c      	b.n	80066e2 <check_bounds+0x8a>
		}
		return 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e00a      	b.n	80066e2 <check_bounds+0x8a>
	}

	if (raw <= max && raw >= min)
 80066cc:	89bb      	ldrh	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	db05      	blt.n	80066e0 <check_bounds+0x88>
 80066d4:	89bb      	ldrh	r3, [r7, #12]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	dc01      	bgt.n	80066e0 <check_bounds+0x88>
	{
		return 1;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <check_bounds+0x8a>
	}
	return 0;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	0000      	movs	r0, r0
 80066ec:	0000      	movs	r0, r0
	...

080066f0 <monitor_rails>:
 * three times.
 *
 * @return 1 if all rails are within bounds, 0 if any rail is out of bounds.
 */
uint8_t monitor_rails()
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
	uint8_t within_bounds = 1;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
	uint16_t tolerance;

	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e0c2      	b.n	8006886 <monitor_rails+0x196>
	{
		// Range check is different depending on whether the rail is enabled or not
		if (rail_monitor[i].is_enabled)
 8006700:	4a67      	ldr	r2, [pc, #412]	; (80068a0 <monitor_rails+0x1b0>)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	4413      	add	r3, r2
 8006708:	3302      	adds	r3, #2
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01d      	beq.n	800674c <monitor_rails+0x5c>
		{
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage);
 8006710:	4a63      	ldr	r2, [pc, #396]	; (80068a0 <monitor_rails+0x1b0>)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	4413      	add	r3, r2
 8006718:	7818      	ldrb	r0, [r3, #0]
 800671a:	4a61      	ldr	r2, [pc, #388]	; (80068a0 <monitor_rails+0x1b0>)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	4413      	add	r3, r2
 8006722:	3304      	adds	r3, #4
 8006724:	8819      	ldrh	r1, [r3, #0]
 8006726:	4a5e      	ldr	r2, [pc, #376]	; (80068a0 <monitor_rails+0x1b0>)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	4413      	add	r3, r2
 800672e:	3308      	adds	r3, #8
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	461c      	mov	r4, r3
 8006734:	4a5a      	ldr	r2, [pc, #360]	; (80068a0 <monitor_rails+0x1b0>)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	4413      	add	r3, r2
 800673c:	3306      	adds	r3, #6
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	4622      	mov	r2, r4
 8006742:	f7ff ff89 	bl	8006658 <check_bounds>
 8006746:	4603      	mov	r3, r0
 8006748:	75fb      	strb	r3, [r7, #23]
 800674a:	e023      	b.n	8006794 <monitor_rails+0xa4>
		}
		else
		{
			tolerance = rail_monitor[i].max_voltage * 0.1;
 800674c:	4a54      	ldr	r2, [pc, #336]	; (80068a0 <monitor_rails+0x1b0>)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	4413      	add	r3, r2
 8006754:	3306      	adds	r3, #6
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006760:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8006898 <monitor_rails+0x1a8>
 8006764:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800676c:	ee17 3a90 	vmov	r3, s15
 8006770:	81fb      	strh	r3, [r7, #14]
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance);
 8006772:	4a4b      	ldr	r2, [pc, #300]	; (80068a0 <monitor_rails+0x1b0>)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	4413      	add	r3, r2
 800677a:	7818      	ldrb	r0, [r3, #0]
 800677c:	4a48      	ldr	r2, [pc, #288]	; (80068a0 <monitor_rails+0x1b0>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	8819      	ldrh	r1, [r3, #0]
 8006788:	89fb      	ldrh	r3, [r7, #14]
 800678a:	2200      	movs	r2, #0
 800678c:	f7ff ff64 	bl	8006658 <check_bounds>
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]
		}

		// If we aren't within range...
		if (!within_bounds)
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d16f      	bne.n	800687a <monitor_rails+0x18a>
		{
			// Increase that rails error count
			rail_monitor[i].error_count++;
 800679a:	4a41      	ldr	r2, [pc, #260]	; (80068a0 <monitor_rails+0x1b0>)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	3301      	adds	r3, #1
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2d9      	uxtb	r1, r3
 80067aa:	4a3d      	ldr	r2, [pc, #244]	; (80068a0 <monitor_rails+0x1b0>)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	4413      	add	r3, r2
 80067b2:	3301      	adds	r3, #1
 80067b4:	460a      	mov	r2, r1
 80067b6:	701a      	strb	r2, [r3, #0]

			// Store the voltage each time a rail goes out of bounds
			switch (rail_monitor[i].error_count)
 80067b8:	4a39      	ldr	r2, [pc, #228]	; (80068a0 <monitor_rails+0x1b0>)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	4413      	add	r3, r2
 80067c0:	3301      	adds	r3, #1
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d024      	beq.n	8006812 <monitor_rails+0x122>
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	dc58      	bgt.n	800687e <monitor_rails+0x18e>
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d002      	beq.n	80067d6 <monitor_rails+0xe6>
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d00f      	beq.n	80067f4 <monitor_rails+0x104>
				error.OOB_2 = rail_monitor[i].OOB_2;
				error.OOB_3 = rail_monitor[i].OOB_3;
				handle_error(error);
				break;
			default:
				break;
 80067d4:	e053      	b.n	800687e <monitor_rails+0x18e>
				rail_monitor[i].OOB_1 = rail_monitor[i].data;
 80067d6:	4a32      	ldr	r2, [pc, #200]	; (80068a0 <monitor_rails+0x1b0>)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	4413      	add	r3, r2
 80067de:	3304      	adds	r3, #4
 80067e0:	8819      	ldrh	r1, [r3, #0]
 80067e2:	4a2f      	ldr	r2, [pc, #188]	; (80068a0 <monitor_rails+0x1b0>)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	4413      	add	r3, r2
 80067ea:	330a      	adds	r3, #10
 80067ec:	460a      	mov	r2, r1
 80067ee:	801a      	strh	r2, [r3, #0]
				return 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e04d      	b.n	8006890 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_2 = rail_monitor[i].data;
 80067f4:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <monitor_rails+0x1b0>)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	4413      	add	r3, r2
 80067fc:	3304      	adds	r3, #4
 80067fe:	8819      	ldrh	r1, [r3, #0]
 8006800:	4a27      	ldr	r2, [pc, #156]	; (80068a0 <monitor_rails+0x1b0>)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4413      	add	r3, r2
 8006808:	330c      	adds	r3, #12
 800680a:	460a      	mov	r2, r1
 800680c:	801a      	strh	r2, [r3, #0]
				return 0;
 800680e:	2300      	movs	r3, #0
 8006810:	e03e      	b.n	8006890 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8006812:	4a23      	ldr	r2, [pc, #140]	; (80068a0 <monitor_rails+0x1b0>)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	4413      	add	r3, r2
 800681a:	3304      	adds	r3, #4
 800681c:	8819      	ldrh	r1, [r3, #0]
 800681e:	4a20      	ldr	r2, [pc, #128]	; (80068a0 <monitor_rails+0x1b0>)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	4413      	add	r3, r2
 8006826:	330e      	adds	r3, #14
 8006828:	460a      	mov	r2, r1
 800682a:	801a      	strh	r2, [r3, #0]
				error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <monitor_rails+0x1b0>)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	4413      	add	r3, r2
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 f834 	bl	80068a4 <get_rail_name_error_detail>
 800683c:	4603      	mov	r3, r0
 800683e:	717b      	strb	r3, [r7, #5]
				error.category = EC_power_supply_rail;
 8006840:	2300      	movs	r3, #0
 8006842:	713b      	strb	r3, [r7, #4]
				error.OOB_1 = rail_monitor[i].OOB_1;
 8006844:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <monitor_rails+0x1b0>)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	4413      	add	r3, r2
 800684c:	330a      	adds	r3, #10
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	80fb      	strh	r3, [r7, #6]
				error.OOB_2 = rail_monitor[i].OOB_2;
 8006852:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <monitor_rails+0x1b0>)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	4413      	add	r3, r2
 800685a:	330c      	adds	r3, #12
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	813b      	strh	r3, [r7, #8]
				error.OOB_3 = rail_monitor[i].OOB_3;
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <monitor_rails+0x1b0>)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	4413      	add	r3, r2
 8006868:	330e      	adds	r3, #14
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	817b      	strh	r3, [r7, #10]
				handle_error(error);
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006874:	f7fb fb5c 	bl	8001f30 <handle_error>
				break;
 8006878:	e002      	b.n	8006880 <monitor_rails+0x190>
			}
		}
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <monitor_rails+0x190>
				break;
 800687e:	bf00      	nop
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b11      	cmp	r3, #17
 800688a:	f77f af39 	ble.w	8006700 <monitor_rails+0x10>
	}
	// No rails were out of bounds, so voltage_monitor task does not need to enter idle and delay
	return 1;
 800688e:	2301      	movs	r3, #1
}
 8006890:	4618      	mov	r0, r3
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd90      	pop	{r4, r7, pc}
 8006898:	9999999a 	.word	0x9999999a
 800689c:	3fb99999 	.word	0x3fb99999
 80068a0:	240025d0 	.word	0x240025d0

080068a4 <get_rail_name_error_detail>:
 *
 * @param rail_name The voltage rail for which to get the error detail.
 * @return The corresponding ERROR_DETAIL enumeration value for the specified rail.
 */
ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	2b11      	cmp	r3, #17
 80068b2:	d84b      	bhi.n	800694c <get_rail_name_error_detail+0xa8>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <get_rail_name_error_detail+0x18>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	08006905 	.word	0x08006905
 80068c0:	08006909 	.word	0x08006909
 80068c4:	0800690d 	.word	0x0800690d
 80068c8:	08006911 	.word	0x08006911
 80068cc:	08006915 	.word	0x08006915
 80068d0:	08006919 	.word	0x08006919
 80068d4:	0800691d 	.word	0x0800691d
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006925 	.word	0x08006925
 80068e0:	08006929 	.word	0x08006929
 80068e4:	0800692d 	.word	0x0800692d
 80068e8:	08006931 	.word	0x08006931
 80068ec:	08006935 	.word	0x08006935
 80068f0:	08006939 	.word	0x08006939
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	08006941 	.word	0x08006941
 80068fc:	08006945 	.word	0x08006945
 8006900:	08006949 	.word	0x08006949
	case RAIL_vsense:
		return ED_vsense;
 8006904:	2306      	movs	r3, #6
 8006906:	e022      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8006908:	2307      	movs	r3, #7
 800690a:	e020      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 800690c:	2308      	movs	r3, #8
 800690e:	e01e      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8006910:	2309      	movs	r3, #9
 8006912:	e01c      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8006914:	230a      	movs	r3, #10
 8006916:	e01a      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8006918:	230b      	movs	r3, #11
 800691a:	e018      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 800691c:	230c      	movs	r3, #12
 800691e:	e016      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8006920:	230d      	movs	r3, #13
 8006922:	e014      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8006924:	230e      	movs	r3, #14
 8006926:	e012      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8006928:	230f      	movs	r3, #15
 800692a:	e010      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 800692c:	2310      	movs	r3, #16
 800692e:	e00e      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8006930:	2311      	movs	r3, #17
 8006932:	e00c      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8006934:	2312      	movs	r3, #18
 8006936:	e00a      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8006938:	2313      	movs	r3, #19
 800693a:	e008      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 800693c:	2314      	movs	r3, #20
 800693e:	e006      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8006940:	2315      	movs	r3, #21
 8006942:	e004      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8006944:	2316      	movs	r3, #22
 8006946:	e002      	b.n	800694e <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8006948:	2317      	movs	r3, #23
 800694a:	e000      	b.n	800694e <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 800694c:	231c      	movs	r3, #28
	}
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop

0800695c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800695c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006994 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006960:	f7fe fd02 	bl	8005368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006964:	480c      	ldr	r0, [pc, #48]	; (8006998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006966:	490d      	ldr	r1, [pc, #52]	; (800699c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800696a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800696c:	e002      	b.n	8006974 <LoopCopyDataInit>

0800696e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800696e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006972:	3304      	adds	r3, #4

08006974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006978:	d3f9      	bcc.n	800696e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800697c:	4c0a      	ldr	r4, [pc, #40]	; (80069a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800697e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006980:	e001      	b.n	8006986 <LoopFillZerobss>

08006982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006984:	3204      	adds	r2, #4

08006986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006988:	d3fb      	bcc.n	8006982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800698a:	f015 f88f 	bl	801baac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800698e:	f7fc fea7 	bl	80036e0 <main>
  bx  lr
 8006992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006994:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006998:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800699c:	240000dc 	.word	0x240000dc
  ldr r2, =_sidata
 80069a0:	0801be08 	.word	0x0801be08
  ldr r2, =_sbss
 80069a4:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80069a8:	24007060 	.word	0x24007060

080069ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80069ac:	e7fe      	b.n	80069ac <ADC3_IRQHandler>
	...

080069b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069b6:	2003      	movs	r0, #3
 80069b8:	f001 fd39 	bl	800842e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069bc:	f009 f9ce 	bl	800fd5c <HAL_RCC_GetSysClockFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <HAL_Init+0x68>)
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	4913      	ldr	r1, [pc, #76]	; (8006a1c <HAL_Init+0x6c>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
 80069d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069da:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_Init+0x68>)
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	4a0e      	ldr	r2, [pc, #56]	; (8006a1c <HAL_Init+0x6c>)
 80069e4:	5cd3      	ldrb	r3, [r2, r3]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
 80069f0:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <HAL_Init+0x70>)
 80069f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069f4:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <HAL_Init+0x74>)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069fa:	2005      	movs	r0, #5
 80069fc:	f7fe fa90 	bl	8004f20 <HAL_InitTick>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e002      	b.n	8006a10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006a0a:	f7fe fa63 	bl	8004ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	0801bdb8 	.word	0x0801bdb8
 8006a20:	240000cc 	.word	0x240000cc
 8006a24:	240000c8 	.word	0x240000c8

08006a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_IncTick+0x20>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_IncTick+0x24>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4413      	add	r3, r2
 8006a38:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <HAL_IncTick+0x24>)
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	240000d4 	.word	0x240000d4
 8006a4c:	240026f0 	.word	0x240026f0

08006a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return uwTick;
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <HAL_GetTick+0x14>)
 8006a56:	681b      	ldr	r3, [r3, #0]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	240026f0 	.word	0x240026f0

08006a68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006a6c:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <HAL_GetREVID+0x14>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	0c1b      	lsrs	r3, r3, #16
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	5c001000 	.word	0x5c001000

08006a80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	43db      	mvns	r3, r3
 8006a92:	401a      	ands	r2, r3
 8006a94:	4904      	ldr	r1, [pc, #16]	; (8006aa8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	58000400 	.word	0x58000400

08006aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3360      	adds	r3, #96	; 0x60
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	430b      	orrs	r3, r1
 8006b42:	431a      	orrs	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	fa01 f303 	lsl.w	r3, r1, r3
 8006b74:	431a      	orrs	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	611a      	str	r2, [r3, #16]
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b087      	sub	sp, #28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3360      	adds	r3, #96	; 0x60
 8006b96:	461a      	mov	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	601a      	str	r2, [r3, #0]
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b087      	sub	sp, #28
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3330      	adds	r3, #48	; 0x30
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	f003 030c 	and.w	r3, r3, #12
 8006bfe:	4413      	add	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	211f      	movs	r1, #31
 8006c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c12:	43db      	mvns	r3, r3
 8006c14:	401a      	ands	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	0e9b      	lsrs	r3, r3, #26
 8006c1a:	f003 011f 	and.w	r1, r3, #31
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	fa01 f303 	lsl.w	r3, r1, r3
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f023 0203 	bic.w	r2, r3, #3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60da      	str	r2, [r3, #12]
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3314      	adds	r3, #20
 8006c70:	461a      	mov	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	0e5b      	lsrs	r3, r3, #25
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	4413      	add	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	0d1b      	lsrs	r3, r3, #20
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2107      	movs	r1, #7
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	43db      	mvns	r3, r3
 8006c94:	401a      	ands	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	401a      	ands	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f003 0318 	and.w	r3, r3, #24
 8006cda:	4908      	ldr	r1, [pc, #32]	; (8006cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8006cdc:	40d9      	lsrs	r1, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	400b      	ands	r3, r1
 8006ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	000fffff 	.word	0x000fffff

08006d00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <LL_ADC_DisableDeepPowerDown+0x20>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6093      	str	r3, [r2, #8]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	5fffffc0 	.word	0x5fffffc0

08006d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d54:	d101      	bne.n	8006d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <LL_ADC_EnableInternalRegulator+0x24>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	6fffffc0 	.word	0x6fffffc0

08006d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da4:	d101      	bne.n	8006daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <LL_ADC_Enable+0x24>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	f043 0201 	orr.w	r2, r3, #1
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	7fffffc0 	.word	0x7fffffc0

08006de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <LL_ADC_Disable+0x24>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	f043 0202 	orr.w	r2, r3, #2
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	7fffffc0 	.word	0x7fffffc0

08006e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <LL_ADC_IsEnabled+0x18>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <LL_ADC_IsEnabled+0x1a>
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d101      	bne.n	8006e46 <LL_ADC_IsDisableOngoing+0x18>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <LL_ADC_IsDisableOngoing+0x1a>
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <LL_ADC_REG_StartConversion+0x24>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	f043 0204 	orr.w	r2, r3, #4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	7fffffc0 	.word	0x7fffffc0

08006e7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d101      	bne.n	8006e94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d101      	bne.n	8006eba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e18f      	b.n	8007202 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7f9 fd2b 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff19 	bl	8006d40 <LL_ADC_IsDeepPowerDownEnabled>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff feff 	bl	8006d1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ff34 	bl	8006d90 <LL_ADC_IsInternalRegulatorEnabled>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d114      	bne.n	8006f58 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff ff18 	bl	8006d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f38:	4b87      	ldr	r3, [pc, #540]	; (8007158 <HAL_ADC_Init+0x290>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	4a87      	ldr	r2, [pc, #540]	; (800715c <HAL_ADC_Init+0x294>)
 8006f40:	fba2 2303 	umull	r2, r3, r2, r3
 8006f44:	099b      	lsrs	r3, r3, #6
 8006f46:	3301      	adds	r3, #1
 8006f48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f4a:	e002      	b.n	8006f52 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f9      	bne.n	8006f4c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff17 	bl	8006d90 <LL_ADC_IsInternalRegulatorEnabled>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10d      	bne.n	8006f84 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6c:	f043 0210 	orr.w	r2, r3, #16
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f78:	f043 0201 	orr.w	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff77 	bl	8006e7c <LL_ADC_REG_IsConversionOngoing>
 8006f8e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 8129 	bne.w	80071f0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 8125 	bne.w	80071f0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006fae:	f043 0202 	orr.w	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff ff24 	bl	8006e08 <LL_ADC_IsEnabled>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d136      	bne.n	8007034 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a65      	ldr	r2, [pc, #404]	; (8007160 <HAL_ADC_Init+0x298>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_ADC_Init+0x112>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a63      	ldr	r2, [pc, #396]	; (8007164 <HAL_ADC_Init+0x29c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d10e      	bne.n	8006ff8 <HAL_ADC_Init+0x130>
 8006fda:	4861      	ldr	r0, [pc, #388]	; (8007160 <HAL_ADC_Init+0x298>)
 8006fdc:	f7ff ff14 	bl	8006e08 <LL_ADC_IsEnabled>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4860      	ldr	r0, [pc, #384]	; (8007164 <HAL_ADC_Init+0x29c>)
 8006fe4:	f7ff ff10 	bl	8006e08 <LL_ADC_IsEnabled>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4323      	orrs	r3, r4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e008      	b.n	800700a <HAL_ADC_Init+0x142>
 8006ff8:	485b      	ldr	r0, [pc, #364]	; (8007168 <HAL_ADC_Init+0x2a0>)
 8006ffa:	f7ff ff05 	bl	8006e08 <LL_ADC_IsEnabled>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d012      	beq.n	8007034 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a53      	ldr	r2, [pc, #332]	; (8007160 <HAL_ADC_Init+0x298>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_ADC_Init+0x15a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a51      	ldr	r2, [pc, #324]	; (8007164 <HAL_ADC_Init+0x29c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <HAL_ADC_Init+0x15e>
 8007022:	4a52      	ldr	r2, [pc, #328]	; (800716c <HAL_ADC_Init+0x2a4>)
 8007024:	e000      	b.n	8007028 <HAL_ADC_Init+0x160>
 8007026:	4a52      	ldr	r2, [pc, #328]	; (8007170 <HAL_ADC_Init+0x2a8>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7ff fd3c 	bl	8006aac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007034:	f7ff fd18 	bl	8006a68 <HAL_GetREVID>
 8007038:	4603      	mov	r3, r0
 800703a:	f241 0203 	movw	r2, #4099	; 0x1003
 800703e:	4293      	cmp	r3, r2
 8007040:	d914      	bls.n	800706c <HAL_ADC_Init+0x1a4>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b10      	cmp	r3, #16
 8007048:	d110      	bne.n	800706c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7d5b      	ldrb	r3, [r3, #21]
 800704e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007054:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800705a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7f1b      	ldrb	r3, [r3, #28]
 8007060:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007062:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007064:	f043 030c 	orr.w	r3, r3, #12
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e00d      	b.n	8007088 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7d5b      	ldrb	r3, [r3, #21]
 8007070:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007076:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800707c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7f1b      	ldrb	r3, [r3, #28]
 8007082:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7f1b      	ldrb	r3, [r3, #28]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d106      	bne.n	800709e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	3b01      	subs	r3, #1
 8007096:	045b      	lsls	r3, r3, #17
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4313      	orrs	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	4b2c      	ldr	r3, [pc, #176]	; (8007174 <HAL_ADC_Init+0x2ac>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	69b9      	ldr	r1, [r7, #24]
 80070ca:	430b      	orrs	r3, r1
 80070cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fed2 	bl	8006e7c <LL_ADC_REG_IsConversionOngoing>
 80070d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fedf 	bl	8006ea2 <LL_ADC_INJ_IsConversionOngoing>
 80070e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d15f      	bne.n	80071ac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d15c      	bne.n	80071ac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	7d1b      	ldrb	r3, [r3, #20]
 80070f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80070fc:	4313      	orrs	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <HAL_ADC_Init+0x2b0>)
 8007108:	4013      	ands	r3, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	69b9      	ldr	r1, [r7, #24]
 8007110:	430b      	orrs	r3, r1
 8007112:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800711a:	2b01      	cmp	r3, #1
 800711c:	d130      	bne.n	8007180 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	4b14      	ldr	r3, [pc, #80]	; (800717c <HAL_ADC_Init+0x2b4>)
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007132:	3a01      	subs	r2, #1
 8007134:	0411      	lsls	r1, r2, #16
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800713a:	4311      	orrs	r1, r2
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007140:	4311      	orrs	r1, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007146:	430a      	orrs	r2, r1
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	611a      	str	r2, [r3, #16]
 8007154:	e01c      	b.n	8007190 <HAL_ADC_Init+0x2c8>
 8007156:	bf00      	nop
 8007158:	240000c8 	.word	0x240000c8
 800715c:	053e2d63 	.word	0x053e2d63
 8007160:	40022000 	.word	0x40022000
 8007164:	40022100 	.word	0x40022100
 8007168:	58026000 	.word	0x58026000
 800716c:	40022300 	.word	0x40022300
 8007170:	58026300 	.word	0x58026300
 8007174:	fff0c003 	.word	0xfff0c003
 8007178:	ffffbffc 	.word	0xffffbffc
 800717c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fdec 	bl	8007d84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d10c      	bne.n	80071ce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f023 010f 	bic.w	r1, r3, #15
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	1e5a      	subs	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
 80071cc:	e007      	b.n	80071de <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 020f 	bic.w	r2, r2, #15
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	f043 0201 	orr.w	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
 80071ee:	e007      	b.n	8007200 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	f043 0210 	orr.w	r2, r3, #16
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007200:	7ffb      	ldrb	r3, [r7, #31]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	; 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd90      	pop	{r4, r7, pc}
 800720a:	bf00      	nop

0800720c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a55      	ldr	r2, [pc, #340]	; (8007374 <HAL_ADC_Start_DMA+0x168>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_ADC_Start_DMA+0x20>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a54      	ldr	r2, [pc, #336]	; (8007378 <HAL_ADC_Start_DMA+0x16c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d101      	bne.n	8007230 <HAL_ADC_Start_DMA+0x24>
 800722c:	4b53      	ldr	r3, [pc, #332]	; (800737c <HAL_ADC_Start_DMA+0x170>)
 800722e:	e000      	b.n	8007232 <HAL_ADC_Start_DMA+0x26>
 8007230:	4b53      	ldr	r3, [pc, #332]	; (8007380 <HAL_ADC_Start_DMA+0x174>)
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fd64 	bl	8006d00 <LL_ADC_GetMultimode>
 8007238:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fe1c 	bl	8006e7c <LL_ADC_REG_IsConversionOngoing>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 808c 	bne.w	8007364 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_ADC_Start_DMA+0x4e>
 8007256:	2302      	movs	r3, #2
 8007258:	e087      	b.n	800736a <HAL_ADC_Start_DMA+0x15e>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b05      	cmp	r3, #5
 800726c:	d002      	beq.n	8007274 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b09      	cmp	r3, #9
 8007272:	d170      	bne.n	8007356 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fc07 	bl	8007a88 <ADC_Enable>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d163      	bne.n	800734c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007288:	4b3e      	ldr	r3, [pc, #248]	; (8007384 <HAL_ADC_Start_DMA+0x178>)
 800728a:	4013      	ands	r3, r2
 800728c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a37      	ldr	r2, [pc, #220]	; (8007378 <HAL_ADC_Start_DMA+0x16c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d002      	beq.n	80072a4 <HAL_ADC_Start_DMA+0x98>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	e000      	b.n	80072a6 <HAL_ADC_Start_DMA+0x9a>
 80072a4:	4b33      	ldr	r3, [pc, #204]	; (8007374 <HAL_ADC_Start_DMA+0x168>)
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d002      	beq.n	80072b4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	f023 0206 	bic.w	r2, r3, #6
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	659a      	str	r2, [r3, #88]	; 0x58
 80072d8:	e002      	b.n	80072e0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e4:	4a28      	ldr	r2, [pc, #160]	; (8007388 <HAL_ADC_Start_DMA+0x17c>)
 80072e6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <HAL_ADC_Start_DMA+0x180>)
 80072ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f4:	4a26      	ldr	r2, [pc, #152]	; (8007390 <HAL_ADC_Start_DMA+0x184>)
 80072f6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	221c      	movs	r2, #28
 80072fe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0210 	orr.w	r2, r2, #16
 8007316:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7ff fc89 	bl	8006c3a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3340      	adds	r3, #64	; 0x40
 8007332:	4619      	mov	r1, r3
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f002 f80e 	bl	8009358 <HAL_DMA_Start_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fd85 	bl	8006e54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800734a:	e00d      	b.n	8007368 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8007354:	e008      	b.n	8007368 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007362:	e001      	b.n	8007368 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007364:	2302      	movs	r3, #2
 8007366:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007368:	7dfb      	ldrb	r3, [r7, #23]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	40022000 	.word	0x40022000
 8007378:	40022100 	.word	0x40022100
 800737c:	40022300 	.word	0x40022300
 8007380:	58026300 	.word	0x58026300
 8007384:	fffff0fe 	.word	0xfffff0fe
 8007388:	08007c5b 	.word	0x08007c5b
 800738c:	08007d33 	.word	0x08007d33
 8007390:	08007d4f 	.word	0x08007d4f

08007394 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b0a1      	sub	sp, #132	; 0x84
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	4a65      	ldr	r2, [pc, #404]	; (8007580 <HAL_ADC_ConfigChannel+0x1b0>)
 80073ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_ADC_ConfigChannel+0x2a>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e32e      	b.n	8007a58 <HAL_ADC_ConfigChannel+0x688>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fd38 	bl	8006e7c <LL_ADC_REG_IsConversionOngoing>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 8313 	bne.w	8007a3a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db2c      	blt.n	8007476 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007424:	2b00      	cmp	r3, #0
 8007426:	d108      	bne.n	800743a <HAL_ADC_ConfigChannel+0x6a>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	0e9b      	lsrs	r3, r3, #26
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	2201      	movs	r2, #1
 8007434:	fa02 f303 	lsl.w	r3, r2, r3
 8007438:	e016      	b.n	8007468 <HAL_ADC_ConfigChannel+0x98>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007442:	fa93 f3a3 	rbit	r3, r3
 8007446:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800744a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800744c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8007452:	2320      	movs	r3, #32
 8007454:	e003      	b.n	800745e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8007456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007458:	fab3 f383 	clz	r3, r3
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2201      	movs	r2, #1
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6812      	ldr	r2, [r2, #0]
 800746c:	69d1      	ldr	r1, [r2, #28]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	430b      	orrs	r3, r1
 8007474:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6859      	ldr	r1, [r3, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	f7ff fbad 	bl	8006be2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fcf5 	bl	8006e7c <LL_ADC_REG_IsConversionOngoing>
 8007492:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fd02 	bl	8006ea2 <LL_ADC_INJ_IsConversionOngoing>
 800749e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80074a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f040 80b8 	bne.w	8007618 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80074a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 80b4 	bne.w	8007618 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	6819      	ldr	r1, [r3, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	461a      	mov	r2, r3
 80074be:	f7ff fbcf 	bl	8006c60 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80074c2:	4b30      	ldr	r3, [pc, #192]	; (8007584 <HAL_ADC_ConfigChannel+0x1b4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80074ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ce:	d10b      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x118>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	089b      	lsrs	r3, r3, #2
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	e01d      	b.n	8007524 <HAL_ADC_ConfigChannel+0x154>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <HAL_ADC_ConfigChannel+0x13e>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	089b      	lsrs	r3, r3, #2
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	e00a      	b.n	8007524 <HAL_ADC_ConfigChannel+0x154>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	695a      	ldr	r2, [r3, #20]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	089b      	lsrs	r3, r3, #2
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b04      	cmp	r3, #4
 800752c:	d02c      	beq.n	8007588 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6919      	ldr	r1, [r3, #16]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800753c:	f7ff faea 	bl	8006b14 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6919      	ldr	r1, [r3, #16]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	7e5b      	ldrb	r3, [r3, #25]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d102      	bne.n	8007556 <HAL_ADC_ConfigChannel+0x186>
 8007550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007554:	e000      	b.n	8007558 <HAL_ADC_ConfigChannel+0x188>
 8007556:	2300      	movs	r3, #0
 8007558:	461a      	mov	r2, r3
 800755a:	f7ff fb14 	bl	8006b86 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6919      	ldr	r1, [r3, #16]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	7e1b      	ldrb	r3, [r3, #24]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d102      	bne.n	8007574 <HAL_ADC_ConfigChannel+0x1a4>
 800756e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007572:	e000      	b.n	8007576 <HAL_ADC_ConfigChannel+0x1a6>
 8007574:	2300      	movs	r3, #0
 8007576:	461a      	mov	r2, r3
 8007578:	f7ff faec 	bl	8006b54 <LL_ADC_SetDataRightShift>
 800757c:	e04c      	b.n	8007618 <HAL_ADC_ConfigChannel+0x248>
 800757e:	bf00      	nop
 8007580:	47ff0000 	.word	0x47ff0000
 8007584:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	069b      	lsls	r3, r3, #26
 8007598:	429a      	cmp	r2, r3
 800759a:	d107      	bne.n	80075ac <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	069b      	lsls	r3, r3, #26
 80075bc:	429a      	cmp	r2, r3
 80075be:	d107      	bne.n	80075d0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075ce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	069b      	lsls	r3, r3, #26
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d107      	bne.n	80075f4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075f2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	069b      	lsls	r3, r3, #26
 8007604:	429a      	cmp	r2, r3
 8007606:	d107      	bne.n	8007618 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007616:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fbf3 	bl	8006e08 <LL_ADC_IsEnabled>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8211 	bne.w	8007a4c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	461a      	mov	r2, r3
 8007638:	f7ff fb3e 	bl	8006cb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	4aa1      	ldr	r2, [pc, #644]	; (80078c8 <HAL_ADC_ConfigChannel+0x4f8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	f040 812e 	bne.w	80078a4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <HAL_ADC_ConfigChannel+0x2a0>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	0e9b      	lsrs	r3, r3, #26
 800765e:	3301      	adds	r3, #1
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	2b09      	cmp	r3, #9
 8007666:	bf94      	ite	ls
 8007668:	2301      	movls	r3, #1
 800766a:	2300      	movhi	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e019      	b.n	80076a4 <HAL_ADC_ConfigChannel+0x2d4>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007678:	fa93 f3a3 	rbit	r3, r3
 800767c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800767e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007680:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8007688:	2320      	movs	r3, #32
 800768a:	e003      	b.n	8007694 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800768c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800768e:	fab3 f383 	clz	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	3301      	adds	r3, #1
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	2b09      	cmp	r3, #9
 800769c:	bf94      	ite	ls
 800769e:	2301      	movls	r3, #1
 80076a0:	2300      	movhi	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d079      	beq.n	800779c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d107      	bne.n	80076c4 <HAL_ADC_ConfigChannel+0x2f4>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	0e9b      	lsrs	r3, r3, #26
 80076ba:	3301      	adds	r3, #1
 80076bc:	069b      	lsls	r3, r3, #26
 80076be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076c2:	e015      	b.n	80076f0 <HAL_ADC_ConfigChannel+0x320>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076cc:	fa93 f3a3 	rbit	r3, r3
 80076d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80076d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80076dc:	2320      	movs	r3, #32
 80076de:	e003      	b.n	80076e8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80076e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e2:	fab3 f383 	clz	r3, r3
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	3301      	adds	r3, #1
 80076ea:	069b      	lsls	r3, r3, #26
 80076ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x340>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	0e9b      	lsrs	r3, r3, #26
 8007702:	3301      	adds	r3, #1
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	e017      	b.n	8007740 <HAL_ADC_ConfigChannel+0x370>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007718:	fa93 f3a3 	rbit	r3, r3
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800771e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007720:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8007728:	2320      	movs	r3, #32
 800772a:	e003      	b.n	8007734 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800772c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772e:	fab3 f383 	clz	r3, r3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3301      	adds	r3, #1
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2101      	movs	r1, #1
 800773c:	fa01 f303 	lsl.w	r3, r1, r3
 8007740:	ea42 0103 	orr.w	r1, r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <HAL_ADC_ConfigChannel+0x396>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	0e9b      	lsrs	r3, r3, #26
 8007756:	3301      	adds	r3, #1
 8007758:	f003 021f 	and.w	r2, r3, #31
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	e018      	b.n	8007798 <HAL_ADC_ConfigChannel+0x3c8>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	fa93 f3a3 	rbit	r3, r3
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800777e:	2320      	movs	r3, #32
 8007780:	e003      	b.n	800778a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	fab3 f383 	clz	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	3301      	adds	r3, #1
 800778c:	f003 021f 	and.w	r2, r3, #31
 8007790:	4613      	mov	r3, r2
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	4413      	add	r3, r2
 8007796:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007798:	430b      	orrs	r3, r1
 800779a:	e07e      	b.n	800789a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d107      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x3e8>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	0e9b      	lsrs	r3, r3, #26
 80077ae:	3301      	adds	r3, #1
 80077b0:	069b      	lsls	r3, r3, #26
 80077b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077b6:	e015      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x414>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	fa93 f3a3 	rbit	r3, r3
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80077d0:	2320      	movs	r3, #32
 80077d2:	e003      	b.n	80077dc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	fab3 f383 	clz	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	3301      	adds	r3, #1
 80077de:	069b      	lsls	r3, r3, #26
 80077e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <HAL_ADC_ConfigChannel+0x434>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	0e9b      	lsrs	r3, r3, #26
 80077f6:	3301      	adds	r3, #1
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	e017      	b.n	8007834 <HAL_ADC_ConfigChannel+0x464>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	fa93 f3a3 	rbit	r3, r3
 8007810:	61bb      	str	r3, [r7, #24]
  return result;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800781c:	2320      	movs	r3, #32
 800781e:	e003      	b.n	8007828 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	fab3 f383 	clz	r3, r3
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3301      	adds	r3, #1
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2101      	movs	r1, #1
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	ea42 0103 	orr.w	r1, r2, r3
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10d      	bne.n	8007860 <HAL_ADC_ConfigChannel+0x490>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0e9b      	lsrs	r3, r3, #26
 800784a:	3301      	adds	r3, #1
 800784c:	f003 021f 	and.w	r2, r3, #31
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	3b1e      	subs	r3, #30
 8007858:	051b      	lsls	r3, r3, #20
 800785a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800785e:	e01b      	b.n	8007898 <HAL_ADC_ConfigChannel+0x4c8>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	fa93 f3a3 	rbit	r3, r3
 800786c:	60fb      	str	r3, [r7, #12]
  return result;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8007878:	2320      	movs	r3, #32
 800787a:	e003      	b.n	8007884 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	fab3 f383 	clz	r3, r3
 8007882:	b2db      	uxtb	r3, r3
 8007884:	3301      	adds	r3, #1
 8007886:	f003 021f 	and.w	r2, r3, #31
 800788a:	4613      	mov	r3, r2
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4413      	add	r3, r2
 8007890:	3b1e      	subs	r3, #30
 8007892:	051b      	lsls	r3, r3, #20
 8007894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007898:	430b      	orrs	r3, r1
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	6892      	ldr	r2, [r2, #8]
 800789e:	4619      	mov	r1, r3
 80078a0:	f7ff f9de 	bl	8006c60 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f280 80cf 	bge.w	8007a4c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a06      	ldr	r2, [pc, #24]	; (80078cc <HAL_ADC_ConfigChannel+0x4fc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d004      	beq.n	80078c2 <HAL_ADC_ConfigChannel+0x4f2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a04      	ldr	r2, [pc, #16]	; (80078d0 <HAL_ADC_ConfigChannel+0x500>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d10a      	bne.n	80078d8 <HAL_ADC_ConfigChannel+0x508>
 80078c2:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <HAL_ADC_ConfigChannel+0x504>)
 80078c4:	e009      	b.n	80078da <HAL_ADC_ConfigChannel+0x50a>
 80078c6:	bf00      	nop
 80078c8:	47ff0000 	.word	0x47ff0000
 80078cc:	40022000 	.word	0x40022000
 80078d0:	40022100 	.word	0x40022100
 80078d4:	40022300 	.word	0x40022300
 80078d8:	4b61      	ldr	r3, [pc, #388]	; (8007a60 <HAL_ADC_ConfigChannel+0x690>)
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff f90c 	bl	8006af8 <LL_ADC_GetCommonPathInternalCh>
 80078e0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a5f      	ldr	r2, [pc, #380]	; (8007a64 <HAL_ADC_ConfigChannel+0x694>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d004      	beq.n	80078f6 <HAL_ADC_ConfigChannel+0x526>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a5d      	ldr	r2, [pc, #372]	; (8007a68 <HAL_ADC_ConfigChannel+0x698>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d10e      	bne.n	8007914 <HAL_ADC_ConfigChannel+0x544>
 80078f6:	485b      	ldr	r0, [pc, #364]	; (8007a64 <HAL_ADC_ConfigChannel+0x694>)
 80078f8:	f7ff fa86 	bl	8006e08 <LL_ADC_IsEnabled>
 80078fc:	4604      	mov	r4, r0
 80078fe:	485a      	ldr	r0, [pc, #360]	; (8007a68 <HAL_ADC_ConfigChannel+0x698>)
 8007900:	f7ff fa82 	bl	8006e08 <LL_ADC_IsEnabled>
 8007904:	4603      	mov	r3, r0
 8007906:	4323      	orrs	r3, r4
 8007908:	2b00      	cmp	r3, #0
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e008      	b.n	8007926 <HAL_ADC_ConfigChannel+0x556>
 8007914:	4855      	ldr	r0, [pc, #340]	; (8007a6c <HAL_ADC_ConfigChannel+0x69c>)
 8007916:	f7ff fa77 	bl	8006e08 <LL_ADC_IsEnabled>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d07d      	beq.n	8007a26 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a50      	ldr	r2, [pc, #320]	; (8007a70 <HAL_ADC_ConfigChannel+0x6a0>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d130      	bne.n	8007996 <HAL_ADC_ConfigChannel+0x5c6>
 8007934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d12b      	bne.n	8007996 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a4a      	ldr	r2, [pc, #296]	; (8007a6c <HAL_ADC_ConfigChannel+0x69c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	f040 8081 	bne.w	8007a4c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a45      	ldr	r2, [pc, #276]	; (8007a64 <HAL_ADC_ConfigChannel+0x694>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d004      	beq.n	800795e <HAL_ADC_ConfigChannel+0x58e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a43      	ldr	r2, [pc, #268]	; (8007a68 <HAL_ADC_ConfigChannel+0x698>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <HAL_ADC_ConfigChannel+0x592>
 800795e:	4a45      	ldr	r2, [pc, #276]	; (8007a74 <HAL_ADC_ConfigChannel+0x6a4>)
 8007960:	e000      	b.n	8007964 <HAL_ADC_ConfigChannel+0x594>
 8007962:	4a3f      	ldr	r2, [pc, #252]	; (8007a60 <HAL_ADC_ConfigChannel+0x690>)
 8007964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7ff f8b0 	bl	8006ad2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007972:	4b41      	ldr	r3, [pc, #260]	; (8007a78 <HAL_ADC_ConfigChannel+0x6a8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	4a40      	ldr	r2, [pc, #256]	; (8007a7c <HAL_ADC_ConfigChannel+0x6ac>)
 800797a:	fba2 2303 	umull	r2, r3, r2, r3
 800797e:	099b      	lsrs	r3, r3, #6
 8007980:	3301      	adds	r3, #1
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007986:	e002      	b.n	800798e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	3b01      	subs	r3, #1
 800798c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1f9      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007994:	e05a      	b.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a39      	ldr	r2, [pc, #228]	; (8007a80 <HAL_ADC_ConfigChannel+0x6b0>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d11e      	bne.n	80079de <HAL_ADC_ConfigChannel+0x60e>
 80079a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d119      	bne.n	80079de <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a2f      	ldr	r2, [pc, #188]	; (8007a6c <HAL_ADC_ConfigChannel+0x69c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d14b      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a2a      	ldr	r2, [pc, #168]	; (8007a64 <HAL_ADC_ConfigChannel+0x694>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_ADC_ConfigChannel+0x5f8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a29      	ldr	r2, [pc, #164]	; (8007a68 <HAL_ADC_ConfigChannel+0x698>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d101      	bne.n	80079cc <HAL_ADC_ConfigChannel+0x5fc>
 80079c8:	4a2a      	ldr	r2, [pc, #168]	; (8007a74 <HAL_ADC_ConfigChannel+0x6a4>)
 80079ca:	e000      	b.n	80079ce <HAL_ADC_ConfigChannel+0x5fe>
 80079cc:	4a24      	ldr	r2, [pc, #144]	; (8007a60 <HAL_ADC_ConfigChannel+0x690>)
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7ff f87b 	bl	8006ad2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079dc:	e036      	b.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a28      	ldr	r2, [pc, #160]	; (8007a84 <HAL_ADC_ConfigChannel+0x6b4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d131      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
 80079e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d12c      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1d      	ldr	r2, [pc, #116]	; (8007a6c <HAL_ADC_ConfigChannel+0x69c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d127      	bne.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <HAL_ADC_ConfigChannel+0x694>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_ADC_ConfigChannel+0x640>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_ADC_ConfigChannel+0x698>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d101      	bne.n	8007a14 <HAL_ADC_ConfigChannel+0x644>
 8007a10:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_ADC_ConfigChannel+0x6a4>)
 8007a12:	e000      	b.n	8007a16 <HAL_ADC_ConfigChannel+0x646>
 8007a14:	4a12      	ldr	r2, [pc, #72]	; (8007a60 <HAL_ADC_ConfigChannel+0x690>)
 8007a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f7ff f857 	bl	8006ad2 <LL_ADC_SetCommonPathInternalCh>
 8007a24:	e012      	b.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007a38:	e008      	b.n	8007a4c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007a54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3784      	adds	r7, #132	; 0x84
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd90      	pop	{r4, r7, pc}
 8007a60:	58026300 	.word	0x58026300
 8007a64:	40022000 	.word	0x40022000
 8007a68:	40022100 	.word	0x40022100
 8007a6c:	58026000 	.word	0x58026000
 8007a70:	cb840000 	.word	0xcb840000
 8007a74:	40022300 	.word	0x40022300
 8007a78:	240000c8 	.word	0x240000c8
 8007a7c:	053e2d63 	.word	0x053e2d63
 8007a80:	c7520000 	.word	0xc7520000
 8007a84:	cfb80000 	.word	0xcfb80000

08007a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff f9b7 	bl	8006e08 <LL_ADC_IsEnabled>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d16e      	bne.n	8007b7e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	4b38      	ldr	r3, [pc, #224]	; (8007b88 <ADC_Enable+0x100>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab2:	f043 0210 	orr.w	r2, r3, #16
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007abe:	f043 0201 	orr.w	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e05a      	b.n	8007b80 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff f972 	bl	8006db8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007ad4:	f7fe ffbc 	bl	8006a50 <HAL_GetTick>
 8007ad8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a2b      	ldr	r2, [pc, #172]	; (8007b8c <ADC_Enable+0x104>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d004      	beq.n	8007aee <ADC_Enable+0x66>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a29      	ldr	r2, [pc, #164]	; (8007b90 <ADC_Enable+0x108>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d101      	bne.n	8007af2 <ADC_Enable+0x6a>
 8007aee:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <ADC_Enable+0x10c>)
 8007af0:	e000      	b.n	8007af4 <ADC_Enable+0x6c>
 8007af2:	4b29      	ldr	r3, [pc, #164]	; (8007b98 <ADC_Enable+0x110>)
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff f903 	bl	8006d00 <LL_ADC_GetMultimode>
 8007afa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a23      	ldr	r2, [pc, #140]	; (8007b90 <ADC_Enable+0x108>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d002      	beq.n	8007b0c <ADC_Enable+0x84>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	e000      	b.n	8007b0e <ADC_Enable+0x86>
 8007b0c:	4b1f      	ldr	r3, [pc, #124]	; (8007b8c <ADC_Enable+0x104>)
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d02c      	beq.n	8007b70 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d130      	bne.n	8007b7e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b1c:	e028      	b.n	8007b70 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff f970 	bl	8006e08 <LL_ADC_IsEnabled>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff f940 	bl	8006db8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b38:	f7fe ff8a 	bl	8006a50 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d914      	bls.n	8007b70 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d00d      	beq.n	8007b70 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b58:	f043 0210 	orr.w	r2, r3, #16
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b64:	f043 0201 	orr.w	r2, r3, #1
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e007      	b.n	8007b80 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d1cf      	bne.n	8007b1e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	8000003f 	.word	0x8000003f
 8007b8c:	40022000 	.word	0x40022000
 8007b90:	40022100 	.word	0x40022100
 8007b94:	40022300 	.word	0x40022300
 8007b98:	58026300 	.word	0x58026300

08007b9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff f940 	bl	8006e2e <LL_ADC_IsDisableOngoing>
 8007bae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff f927 	bl	8006e08 <LL_ADC_IsEnabled>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d047      	beq.n	8007c50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d144      	bne.n	8007c50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 030d 	and.w	r3, r3, #13
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d10c      	bne.n	8007bee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff f901 	bl	8006de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2203      	movs	r2, #3
 8007be4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007be6:	f7fe ff33 	bl	8006a50 <HAL_GetTick>
 8007bea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007bec:	e029      	b.n	8007c42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	f043 0210 	orr.w	r2, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfe:	f043 0201 	orr.w	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e023      	b.n	8007c52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c0a:	f7fe ff21 	bl	8006a50 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d914      	bls.n	8007c42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f043 0210 	orr.w	r2, r3, #16
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	f043 0201 	orr.w	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e007      	b.n	8007c52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1dc      	bne.n	8007c0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d14b      	bne.n	8007d0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d021      	beq.n	8007cd2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe ff92 	bl	8006bbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d032      	beq.n	8007d04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d12b      	bne.n	8007d04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11f      	bne.n	8007d04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc8:	f043 0201 	orr.w	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
 8007cd0:	e018      	b.n	8007d04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d111      	bne.n	8007d04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	f043 0201 	orr.w	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fb45 	bl	8007394 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d0a:	e00e      	b.n	8007d2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fb4f 	bl	80073bc <HAL_ADC_ErrorCallback>
}
 8007d1e:	e004      	b.n	8007d2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fb31 	bl	80073a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6c:	f043 0204 	orr.w	r2, r3, #4
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff fb21 	bl	80073bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d7a:	bf00      	nop
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a7a      	ldr	r2, [pc, #488]	; (8007f7c <ADC_ConfigureBoostMode+0x1f8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d004      	beq.n	8007da0 <ADC_ConfigureBoostMode+0x1c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a79      	ldr	r2, [pc, #484]	; (8007f80 <ADC_ConfigureBoostMode+0x1fc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d109      	bne.n	8007db4 <ADC_ConfigureBoostMode+0x30>
 8007da0:	4b78      	ldr	r3, [pc, #480]	; (8007f84 <ADC_ConfigureBoostMode+0x200>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	e008      	b.n	8007dc6 <ADC_ConfigureBoostMode+0x42>
 8007db4:	4b74      	ldr	r3, [pc, #464]	; (8007f88 <ADC_ConfigureBoostMode+0x204>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01c      	beq.n	8007e04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007dca:	f008 f941 	bl	8010050 <HAL_RCC_GetHCLKFreq>
 8007dce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dd8:	d010      	beq.n	8007dfc <ADC_ConfigureBoostMode+0x78>
 8007dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dde:	d873      	bhi.n	8007ec8 <ADC_ConfigureBoostMode+0x144>
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de4:	d002      	beq.n	8007dec <ADC_ConfigureBoostMode+0x68>
 8007de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dea:	d16d      	bne.n	8007ec8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	60fb      	str	r3, [r7, #12]
        break;
 8007dfa:	e068      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	089b      	lsrs	r3, r3, #2
 8007e00:	60fb      	str	r3, [r7, #12]
        break;
 8007e02:	e064      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007e04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007e08:	f04f 0100 	mov.w	r1, #0
 8007e0c:	f009 fbc8 	bl	80115a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007e1a:	d051      	beq.n	8007ec0 <ADC_ConfigureBoostMode+0x13c>
 8007e1c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007e20:	d854      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e22:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007e26:	d047      	beq.n	8007eb8 <ADC_ConfigureBoostMode+0x134>
 8007e28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007e2c:	d84e      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007e32:	d03d      	beq.n	8007eb0 <ADC_ConfigureBoostMode+0x12c>
 8007e34:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007e38:	d848      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e3e:	d033      	beq.n	8007ea8 <ADC_ConfigureBoostMode+0x124>
 8007e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e44:	d842      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007e4a:	d029      	beq.n	8007ea0 <ADC_ConfigureBoostMode+0x11c>
 8007e4c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007e50:	d83c      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007e56:	d01a      	beq.n	8007e8e <ADC_ConfigureBoostMode+0x10a>
 8007e58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007e5c:	d836      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e5e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007e62:	d014      	beq.n	8007e8e <ADC_ConfigureBoostMode+0x10a>
 8007e64:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007e68:	d830      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e6e:	d00e      	beq.n	8007e8e <ADC_ConfigureBoostMode+0x10a>
 8007e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e74:	d82a      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e7a:	d008      	beq.n	8007e8e <ADC_ConfigureBoostMode+0x10a>
 8007e7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e80:	d824      	bhi.n	8007ecc <ADC_ConfigureBoostMode+0x148>
 8007e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e86:	d002      	beq.n	8007e8e <ADC_ConfigureBoostMode+0x10a>
 8007e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e8c:	d11e      	bne.n	8007ecc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	0c9b      	lsrs	r3, r3, #18
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	60fb      	str	r3, [r7, #12]
        break;
 8007e9e:	e016      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	091b      	lsrs	r3, r3, #4
 8007ea4:	60fb      	str	r3, [r7, #12]
        break;
 8007ea6:	e012      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	60fb      	str	r3, [r7, #12]
        break;
 8007eae:	e00e      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	099b      	lsrs	r3, r3, #6
 8007eb4:	60fb      	str	r3, [r7, #12]
        break;
 8007eb6:	e00a      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	09db      	lsrs	r3, r3, #7
 8007ebc:	60fb      	str	r3, [r7, #12]
        break;
 8007ebe:	e006      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	60fb      	str	r3, [r7, #12]
        break;
 8007ec6:	e002      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
        break;
 8007ec8:	bf00      	nop
 8007eca:	e000      	b.n	8007ece <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007ecc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007ece:	f7fe fdcb 	bl	8006a68 <HAL_GetREVID>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d815      	bhi.n	8007f08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a2b      	ldr	r2, [pc, #172]	; (8007f8c <ADC_ConfigureBoostMode+0x208>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d908      	bls.n	8007ef6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007ef4:	e03e      	b.n	8007f74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f04:	609a      	str	r2, [r3, #8]
}
 8007f06:	e035      	b.n	8007f74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <ADC_ConfigureBoostMode+0x20c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d808      	bhi.n	8007f28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f24:	609a      	str	r2, [r3, #8]
}
 8007f26:	e025      	b.n	8007f74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <ADC_ConfigureBoostMode+0x210>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d80a      	bhi.n	8007f46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	e016      	b.n	8007f74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a13      	ldr	r2, [pc, #76]	; (8007f98 <ADC_ConfigureBoostMode+0x214>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d80a      	bhi.n	8007f64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f60:	609a      	str	r2, [r3, #8]
}
 8007f62:	e007      	b.n	8007f74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007f72:	609a      	str	r2, [r3, #8]
}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40022000 	.word	0x40022000
 8007f80:	40022100 	.word	0x40022100
 8007f84:	40022300 	.word	0x40022300
 8007f88:	58026300 	.word	0x58026300
 8007f8c:	01312d00 	.word	0x01312d00
 8007f90:	005f5e10 	.word	0x005f5e10
 8007f94:	00bebc20 	.word	0x00bebc20
 8007f98:	017d7840 	.word	0x017d7840

08007f9c <LL_ADC_IsEnabled>:
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <LL_ADC_IsEnabled+0x18>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <LL_ADC_IsEnabled+0x1a>
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <LL_ADC_StartCalibration>:
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689a      	ldr	r2, [r3, #8]
 8007fd4:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <LL_ADC_StartCalibration+0x38>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	3ffeffc0 	.word	0x3ffeffc0

08008000 <LL_ADC_IsCalibrationOnGoing>:
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008014:	d101      	bne.n	800801a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <LL_ADC_REG_IsConversionOngoing>:
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b04      	cmp	r3, #4
 800803a:	d101      	bne.n	8008040 <LL_ADC_REG_IsConversionOngoing+0x18>
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800805c:	2300      	movs	r3, #0
 800805e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_ADCEx_Calibration_Start+0x1e>
 800806a:	2302      	movs	r3, #2
 800806c:	e04c      	b.n	8008108 <HAL_ADCEx_Calibration_Start+0xb8>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fd90 	bl	8007b9c <ADC_Disable>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d135      	bne.n	80080f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800808a:	4b21      	ldr	r3, [pc, #132]	; (8008110 <HAL_ADCEx_Calibration_Start+0xc0>)
 800808c:	4013      	ands	r3, r2
 800808e:	f043 0202 	orr.w	r2, r3, #2
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff90 	bl	8007fc4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80080a4:	e014      	b.n	80080d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3301      	adds	r3, #1
 80080aa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4a19      	ldr	r2, [pc, #100]	; (8008114 <HAL_ADCEx_Calibration_Start+0xc4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d30d      	bcc.n	80080d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b8:	f023 0312 	bic.w	r3, r3, #18
 80080bc:	f043 0210 	orr.w	r2, r3, #16
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e01b      	b.n	8008108 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff ff93 	bl	8008000 <LL_ADC_IsCalibrationOnGoing>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e2      	bne.n	80080a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e4:	f023 0303 	bic.w	r3, r3, #3
 80080e8:	f043 0201 	orr.w	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	655a      	str	r2, [r3, #84]	; 0x54
 80080f0:	e005      	b.n	80080fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f6:	f043 0210 	orr.w	r2, r3, #16
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	ffffeefd 	.word	0xffffeefd
 8008114:	25c3f800 	.word	0x25c3f800

08008118 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b09f      	sub	sp, #124	; 0x7c
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008132:	2302      	movs	r3, #2
 8008134:	e0be      	b.n	80082b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800813e:	2300      	movs	r3, #0
 8008140:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008142:	2300      	movs	r3, #0
 8008144:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a5c      	ldr	r2, [pc, #368]	; (80082bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d102      	bne.n	8008156 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008150:	4b5b      	ldr	r3, [pc, #364]	; (80082c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	e001      	b.n	800815a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008164:	f043 0220 	orr.w	r2, r3, #32
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e09d      	b.n	80082b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff ff54 	bl	8008028 <LL_ADC_REG_IsConversionOngoing>
 8008180:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff ff4e 	bl	8008028 <LL_ADC_REG_IsConversionOngoing>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d17f      	bne.n	8008292 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008194:	2b00      	cmp	r3, #0
 8008196:	d17c      	bne.n	8008292 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a47      	ldr	r2, [pc, #284]	; (80082bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a46      	ldr	r2, [pc, #280]	; (80082c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d101      	bne.n	80081b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80081ac:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80081ae:	e000      	b.n	80081b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80081b0:	4b45      	ldr	r3, [pc, #276]	; (80082c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80081b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d039      	beq.n	8008230 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80081bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	431a      	orrs	r2, r3
 80081ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a3a      	ldr	r2, [pc, #232]	; (80082bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d004      	beq.n	80081e2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a38      	ldr	r2, [pc, #224]	; (80082c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10e      	bne.n	8008200 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80081e2:	4836      	ldr	r0, [pc, #216]	; (80082bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80081e4:	f7ff feda 	bl	8007f9c <LL_ADC_IsEnabled>
 80081e8:	4604      	mov	r4, r0
 80081ea:	4835      	ldr	r0, [pc, #212]	; (80082c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80081ec:	f7ff fed6 	bl	8007f9c <LL_ADC_IsEnabled>
 80081f0:	4603      	mov	r3, r0
 80081f2:	4323      	orrs	r3, r4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bf0c      	ite	eq
 80081f8:	2301      	moveq	r3, #1
 80081fa:	2300      	movne	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e008      	b.n	8008212 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008200:	4832      	ldr	r0, [pc, #200]	; (80082cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008202:	f7ff fecb 	bl	8007f9c <LL_ADC_IsEnabled>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	bf0c      	ite	eq
 800820c:	2301      	moveq	r3, #1
 800820e:	2300      	movne	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d047      	beq.n	80082a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	4b2d      	ldr	r3, [pc, #180]	; (80082d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800821c:	4013      	ands	r3, r2
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	6811      	ldr	r1, [r2, #0]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	6892      	ldr	r2, [r2, #8]
 8008226:	430a      	orrs	r2, r1
 8008228:	431a      	orrs	r2, r3
 800822a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800822e:	e03a      	b.n	80082a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d10e      	bne.n	800826e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008250:	481a      	ldr	r0, [pc, #104]	; (80082bc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008252:	f7ff fea3 	bl	8007f9c <LL_ADC_IsEnabled>
 8008256:	4604      	mov	r4, r0
 8008258:	4819      	ldr	r0, [pc, #100]	; (80082c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800825a:	f7ff fe9f 	bl	8007f9c <LL_ADC_IsEnabled>
 800825e:	4603      	mov	r3, r0
 8008260:	4323      	orrs	r3, r4
 8008262:	2b00      	cmp	r3, #0
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	e008      	b.n	8008280 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800826e:	4817      	ldr	r0, [pc, #92]	; (80082cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008270:	f7ff fe94 	bl	8007f9c <LL_ADC_IsEnabled>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d010      	beq.n	80082a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800828a:	4013      	ands	r3, r2
 800828c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800828e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008290:	e009      	b.n	80082a6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	f043 0220 	orr.w	r2, r3, #32
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80082a4:	e000      	b.n	80082a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80082a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80082b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	377c      	adds	r7, #124	; 0x7c
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd90      	pop	{r4, r7, pc}
 80082bc:	40022000 	.word	0x40022000
 80082c0:	40022100 	.word	0x40022100
 80082c4:	40022300 	.word	0x40022300
 80082c8:	58026300 	.word	0x58026300
 80082cc:	58026000 	.word	0x58026000
 80082d0:	fffff0e0 	.word	0xfffff0e0

080082d4 <__NVIC_SetPriorityGrouping>:
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <__NVIC_SetPriorityGrouping+0x40>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082f0:	4013      	ands	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <__NVIC_SetPriorityGrouping+0x44>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008302:	4a04      	ldr	r2, [pc, #16]	; (8008314 <__NVIC_SetPriorityGrouping+0x40>)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	60d3      	str	r3, [r2, #12]
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	e000ed00 	.word	0xe000ed00
 8008318:	05fa0000 	.word	0x05fa0000

0800831c <__NVIC_GetPriorityGrouping>:
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008320:	4b04      	ldr	r3, [pc, #16]	; (8008334 <__NVIC_GetPriorityGrouping+0x18>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	0a1b      	lsrs	r3, r3, #8
 8008326:	f003 0307 	and.w	r3, r3, #7
}
 800832a:	4618      	mov	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <__NVIC_EnableIRQ>:
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008346:	2b00      	cmp	r3, #0
 8008348:	db0b      	blt.n	8008362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	f003 021f 	and.w	r2, r3, #31
 8008350:	4907      	ldr	r1, [pc, #28]	; (8008370 <__NVIC_EnableIRQ+0x38>)
 8008352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	2001      	movs	r0, #1
 800835a:	fa00 f202 	lsl.w	r2, r0, r2
 800835e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	e000e100 	.word	0xe000e100

08008374 <__NVIC_SetPriority>:
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	6039      	str	r1, [r7, #0]
 800837e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008384:	2b00      	cmp	r3, #0
 8008386:	db0a      	blt.n	800839e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	b2da      	uxtb	r2, r3
 800838c:	490c      	ldr	r1, [pc, #48]	; (80083c0 <__NVIC_SetPriority+0x4c>)
 800838e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008392:	0112      	lsls	r2, r2, #4
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	440b      	add	r3, r1
 8008398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800839c:	e00a      	b.n	80083b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	4908      	ldr	r1, [pc, #32]	; (80083c4 <__NVIC_SetPriority+0x50>)
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	3b04      	subs	r3, #4
 80083ac:	0112      	lsls	r2, r2, #4
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	440b      	add	r3, r1
 80083b2:	761a      	strb	r2, [r3, #24]
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	e000e100 	.word	0xe000e100
 80083c4:	e000ed00 	.word	0xe000ed00

080083c8 <NVIC_EncodePriority>:
{
 80083c8:	b480      	push	{r7}
 80083ca:	b089      	sub	sp, #36	; 0x24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f1c3 0307 	rsb	r3, r3, #7
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	bf28      	it	cs
 80083e6:	2304      	movcs	r3, #4
 80083e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	3304      	adds	r3, #4
 80083ee:	2b06      	cmp	r3, #6
 80083f0:	d902      	bls.n	80083f8 <NVIC_EncodePriority+0x30>
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	3b03      	subs	r3, #3
 80083f6:	e000      	b.n	80083fa <NVIC_EncodePriority+0x32>
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	fa02 f303 	lsl.w	r3, r2, r3
 8008406:	43da      	mvns	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	401a      	ands	r2, r3
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	fa01 f303 	lsl.w	r3, r1, r3
 800841a:	43d9      	mvns	r1, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008420:	4313      	orrs	r3, r2
}
 8008422:	4618      	mov	r0, r3
 8008424:	3724      	adds	r7, #36	; 0x24
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff ff4c 	bl	80082d4 <__NVIC_SetPriorityGrouping>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008452:	f7ff ff63 	bl	800831c <__NVIC_GetPriorityGrouping>
 8008456:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	6978      	ldr	r0, [r7, #20]
 800845e:	f7ff ffb3 	bl	80083c8 <NVIC_EncodePriority>
 8008462:	4602      	mov	r2, r0
 8008464:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff ff82 	bl	8008374 <__NVIC_SetPriority>
}
 8008470:	bf00      	nop
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff ff56 	bl	8008338 <__NVIC_EnableIRQ>
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e014      	b.n	80084d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	791b      	ldrb	r3, [r3, #4]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d105      	bne.n	80084bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f8 fb94 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e046      	b.n	800857a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	795b      	ldrb	r3, [r3, #5]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_DAC_Start+0x20>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e040      	b.n	800857a <HAL_DAC_Start+0xa2>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6819      	ldr	r1, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	f003 0310 	and.w	r3, r3, #16
 8008510:	2201      	movs	r2, #1
 8008512:	409a      	lsls	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10f      	bne.n	8008542 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800852c:	2b02      	cmp	r3, #2
 800852e:	d11d      	bne.n	800856c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	e014      	b.n	800856c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2102      	movs	r1, #2
 8008554:	fa01 f303 	lsl.w	r3, r1, r3
 8008558:	429a      	cmp	r2, r3
 800855a:	d107      	bne.n	800856c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0202 	orr.w	r2, r2, #2
 800856a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0a2      	b.n	80086e6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	795b      	ldrb	r3, [r3, #5]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_DAC_Start_DMA+0x24>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e09c      	b.n	80086e6 <HAL_DAC_Start_DMA+0x15e>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2202      	movs	r2, #2
 80085b6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d129      	bne.n	8008612 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	4a4b      	ldr	r2, [pc, #300]	; (80086f0 <HAL_DAC_Start_DMA+0x168>)
 80085c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	4a4a      	ldr	r2, [pc, #296]	; (80086f4 <HAL_DAC_Start_DMA+0x16c>)
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	4a49      	ldr	r2, [pc, #292]	; (80086f8 <HAL_DAC_Start_DMA+0x170>)
 80085d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_DAC_Start_DMA+0x6c>
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d005      	beq.n	80085fe <HAL_DAC_Start_DMA+0x76>
 80085f2:	e009      	b.n	8008608 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	613b      	str	r3, [r7, #16]
        break;
 80085fc:	e033      	b.n	8008666 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	613b      	str	r3, [r7, #16]
        break;
 8008606:	e02e      	b.n	8008666 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3310      	adds	r3, #16
 800860e:	613b      	str	r3, [r7, #16]
        break;
 8008610:	e029      	b.n	8008666 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	4a39      	ldr	r2, [pc, #228]	; (80086fc <HAL_DAC_Start_DMA+0x174>)
 8008618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	4a38      	ldr	r2, [pc, #224]	; (8008700 <HAL_DAC_Start_DMA+0x178>)
 8008620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	4a37      	ldr	r2, [pc, #220]	; (8008704 <HAL_DAC_Start_DMA+0x17c>)
 8008628:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008638:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_DAC_Start_DMA+0xc0>
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	2b04      	cmp	r3, #4
 8008644:	d005      	beq.n	8008652 <HAL_DAC_Start_DMA+0xca>
 8008646:	e009      	b.n	800865c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	613b      	str	r3, [r7, #16]
        break;
 8008650:	e009      	b.n	8008666 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3318      	adds	r3, #24
 8008658:	613b      	str	r3, [r7, #16]
        break;
 800865a:	e004      	b.n	8008666 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	331c      	adds	r3, #28
 8008662:	613b      	str	r3, [r7, #16]
        break;
 8008664:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d111      	bne.n	8008690 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800867a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6898      	ldr	r0, [r3, #8]
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	f000 fe67 	bl	8009358 <HAL_DMA_Start_IT>
 800868a:	4603      	mov	r3, r0
 800868c:	75fb      	strb	r3, [r7, #23]
 800868e:	e010      	b.n	80086b2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800869e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68d8      	ldr	r0, [r3, #12]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	f000 fe55 	bl	8009358 <HAL_DMA_Start_IT>
 80086ae:	4603      	mov	r3, r0
 80086b0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10c      	bne.n	80086d8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 0310 	and.w	r3, r3, #16
 80086ca:	2201      	movs	r2, #1
 80086cc:	409a      	lsls	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e005      	b.n	80086e4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f043 0204 	orr.w	r2, r3, #4
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	08008b79 	.word	0x08008b79
 80086f4:	08008b9b 	.word	0x08008b9b
 80086f8:	08008bb7 	.word	0x08008bb7
 80086fc:	08008c35 	.word	0x08008c35
 8008700:	08008c57 	.word	0x08008c57
 8008704:	08008c73 	.word	0x08008c73

08008708 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e03e      	b.n	800879a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	43da      	mvns	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	400a      	ands	r2, r1
 8008738:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6819      	ldr	r1, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2201      	movs	r2, #1
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	43da      	mvns	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	400a      	ands	r2, r1
 8008754:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	4618      	mov	r0, r3
 8008762:	f001 f863 	bl	800982c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e00c      	b.n	8008792 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	4618      	mov	r0, r3
 800877e:	f001 f855 	bl	800982c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008790:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01d      	beq.n	8008800 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d018      	beq.n	8008800 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2204      	movs	r2, #4
 80087d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f043 0201 	orr.w	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80087e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f86f 	bl	80088de <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d01d      	beq.n	8008846 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d018      	beq.n	8008846 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2204      	movs	r2, #4
 8008818:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f043 0202 	orr.w	r2, r3, #2
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800882e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800883e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9ed 	bl	8008c20 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800884e:	b480      	push	{r7}
 8008850:	b087      	sub	sp, #28
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e015      	b.n	8008896 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4413      	add	r3, r2
 800887c:	3308      	adds	r3, #8
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	e004      	b.n	800888c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4413      	add	r3, r2
 8008888:	3314      	adds	r3, #20
 800888a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	461a      	mov	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
	...

080088f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08a      	sub	sp, #40	; 0x28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_DAC_ConfigChannel+0x1e>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e12a      	b.n	8008b6c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	795b      	ldrb	r3, [r3, #5]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d101      	bne.n	8008922 <HAL_DAC_ConfigChannel+0x2e>
 800891e:	2302      	movs	r3, #2
 8008920:	e124      	b.n	8008b6c <HAL_DAC_ConfigChannel+0x278>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2202      	movs	r2, #2
 800892c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b04      	cmp	r3, #4
 8008934:	d17a      	bne.n	8008a2c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008936:	f7fe f88b 	bl	8006a50 <HAL_GetTick>
 800893a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d13d      	bne.n	80089be <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008942:	e018      	b.n	8008976 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008944:	f7fe f884 	bl	8006a50 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b01      	cmp	r3, #1
 8008950:	d911      	bls.n	8008976 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008958:	4b86      	ldr	r3, [pc, #536]	; (8008b74 <HAL_DAC_ConfigChannel+0x280>)
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f043 0208 	orr.w	r2, r3, #8
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2203      	movs	r2, #3
 8008970:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e0fa      	b.n	8008b6c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800897c:	4b7d      	ldr	r3, [pc, #500]	; (8008b74 <HAL_DAC_ConfigChannel+0x280>)
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1df      	bne.n	8008944 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	6992      	ldr	r2, [r2, #24]
 800898c:	641a      	str	r2, [r3, #64]	; 0x40
 800898e:	e020      	b.n	80089d2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008990:	f7fe f85e 	bl	8006a50 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b01      	cmp	r3, #1
 800899c:	d90f      	bls.n	80089be <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da0a      	bge.n	80089be <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f043 0208 	orr.w	r2, r3, #8
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2203      	movs	r2, #3
 80089b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e0d6      	b.n	8008b6c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dbe3      	blt.n	8008990 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	6992      	ldr	r2, [r2, #24]
 80089d0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80089e2:	fa01 f303 	lsl.w	r3, r1, r3
 80089e6:	43db      	mvns	r3, r3
 80089e8:	ea02 0103 	and.w	r1, r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	409a      	lsls	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	21ff      	movs	r1, #255	; 0xff
 8008a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a12:	43db      	mvns	r3, r3
 8008a14:	ea02 0103 	and.w	r1, r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f003 0310 	and.w	r3, r3, #16
 8008a22:	409a      	lsls	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d11d      	bne.n	8008a70 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	221f      	movs	r2, #31
 8008a44:	fa02 f303 	lsl.w	r3, r2, r3
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a76:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2207      	movs	r2, #7
 8008a80:	fa02 f303 	lsl.w	r3, r2, r3
 8008a84:	43db      	mvns	r3, r3
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d102      	bne.n	8008a9a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
 8008a98:	e00f      	b.n	8008aba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d102      	bne.n	8008aa8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa6:	e008      	b.n	8008aba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab4:	e001      	b.n	8008aba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6819      	ldr	r1, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f003 0310 	and.w	r3, r3, #16
 8008af0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	43da      	mvns	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	400a      	ands	r2, r1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	22c0      	movs	r2, #192	; 0xc0
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	43da      	mvns	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	400a      	ands	r2, r1
 8008b5a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3728      	adds	r7, #40	; 0x28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20008000 	.word	0x20008000

08008b78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7ff fe8b 	bl	80088a2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	711a      	strb	r2, [r3, #4]
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fe84 	bl	80088b6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f043 0204 	orr.w	r2, r3, #4
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fe7a 	bl	80088ca <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	711a      	strb	r2, [r3, #4]
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff ffce 	bl	8008be4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	711a      	strb	r2, [r3, #4]
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff ffc7 	bl	8008bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f043 0204 	orr.w	r2, r3, #4
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff ffbd 	bl	8008c0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	711a      	strb	r2, [r3, #4]
}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008ca8:	f7fd fed2 	bl	8006a50 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e316      	b.n	80092e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a66      	ldr	r2, [pc, #408]	; (8008e58 <HAL_DMA_Init+0x1b8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d04a      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a65      	ldr	r2, [pc, #404]	; (8008e5c <HAL_DMA_Init+0x1bc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d045      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a63      	ldr	r2, [pc, #396]	; (8008e60 <HAL_DMA_Init+0x1c0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d040      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a62      	ldr	r2, [pc, #392]	; (8008e64 <HAL_DMA_Init+0x1c4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d03b      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a60      	ldr	r2, [pc, #384]	; (8008e68 <HAL_DMA_Init+0x1c8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d036      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a5f      	ldr	r2, [pc, #380]	; (8008e6c <HAL_DMA_Init+0x1cc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d031      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a5d      	ldr	r2, [pc, #372]	; (8008e70 <HAL_DMA_Init+0x1d0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d02c      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a5c      	ldr	r2, [pc, #368]	; (8008e74 <HAL_DMA_Init+0x1d4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d027      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a5a      	ldr	r2, [pc, #360]	; (8008e78 <HAL_DMA_Init+0x1d8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d022      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a59      	ldr	r2, [pc, #356]	; (8008e7c <HAL_DMA_Init+0x1dc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d01d      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a57      	ldr	r2, [pc, #348]	; (8008e80 <HAL_DMA_Init+0x1e0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d018      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a56      	ldr	r2, [pc, #344]	; (8008e84 <HAL_DMA_Init+0x1e4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d013      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a54      	ldr	r2, [pc, #336]	; (8008e88 <HAL_DMA_Init+0x1e8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00e      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a53      	ldr	r2, [pc, #332]	; (8008e8c <HAL_DMA_Init+0x1ec>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d009      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a51      	ldr	r2, [pc, #324]	; (8008e90 <HAL_DMA_Init+0x1f0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d004      	beq.n	8008d58 <HAL_DMA_Init+0xb8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a50      	ldr	r2, [pc, #320]	; (8008e94 <HAL_DMA_Init+0x1f4>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d101      	bne.n	8008d5c <HAL_DMA_Init+0xbc>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <HAL_DMA_Init+0xbe>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 813b 	beq.w	8008fda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a37      	ldr	r2, [pc, #220]	; (8008e58 <HAL_DMA_Init+0x1b8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d04a      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a36      	ldr	r2, [pc, #216]	; (8008e5c <HAL_DMA_Init+0x1bc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d045      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a34      	ldr	r2, [pc, #208]	; (8008e60 <HAL_DMA_Init+0x1c0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d040      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a33      	ldr	r2, [pc, #204]	; (8008e64 <HAL_DMA_Init+0x1c4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d03b      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a31      	ldr	r2, [pc, #196]	; (8008e68 <HAL_DMA_Init+0x1c8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d036      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a30      	ldr	r2, [pc, #192]	; (8008e6c <HAL_DMA_Init+0x1cc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d031      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a2e      	ldr	r2, [pc, #184]	; (8008e70 <HAL_DMA_Init+0x1d0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d02c      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a2d      	ldr	r2, [pc, #180]	; (8008e74 <HAL_DMA_Init+0x1d4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d027      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2b      	ldr	r2, [pc, #172]	; (8008e78 <HAL_DMA_Init+0x1d8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d022      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a2a      	ldr	r2, [pc, #168]	; (8008e7c <HAL_DMA_Init+0x1dc>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d01d      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a28      	ldr	r2, [pc, #160]	; (8008e80 <HAL_DMA_Init+0x1e0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d018      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <HAL_DMA_Init+0x1e4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d013      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a25      	ldr	r2, [pc, #148]	; (8008e88 <HAL_DMA_Init+0x1e8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00e      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a24      	ldr	r2, [pc, #144]	; (8008e8c <HAL_DMA_Init+0x1ec>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d009      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a22      	ldr	r2, [pc, #136]	; (8008e90 <HAL_DMA_Init+0x1f0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d004      	beq.n	8008e14 <HAL_DMA_Init+0x174>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a21      	ldr	r2, [pc, #132]	; (8008e94 <HAL_DMA_Init+0x1f4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d108      	bne.n	8008e26 <HAL_DMA_Init+0x186>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0201 	bic.w	r2, r2, #1
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	e007      	b.n	8008e36 <HAL_DMA_Init+0x196>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0201 	bic.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e36:	e02f      	b.n	8008e98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e38:	f7fd fe0a 	bl	8006a50 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b05      	cmp	r3, #5
 8008e44:	d928      	bls.n	8008e98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2203      	movs	r2, #3
 8008e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e246      	b.n	80092e6 <HAL_DMA_Init+0x646>
 8008e58:	40020010 	.word	0x40020010
 8008e5c:	40020028 	.word	0x40020028
 8008e60:	40020040 	.word	0x40020040
 8008e64:	40020058 	.word	0x40020058
 8008e68:	40020070 	.word	0x40020070
 8008e6c:	40020088 	.word	0x40020088
 8008e70:	400200a0 	.word	0x400200a0
 8008e74:	400200b8 	.word	0x400200b8
 8008e78:	40020410 	.word	0x40020410
 8008e7c:	40020428 	.word	0x40020428
 8008e80:	40020440 	.word	0x40020440
 8008e84:	40020458 	.word	0x40020458
 8008e88:	40020470 	.word	0x40020470
 8008e8c:	40020488 	.word	0x40020488
 8008e90:	400204a0 	.word	0x400204a0
 8008e94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1c8      	bne.n	8008e38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4b83      	ldr	r3, [pc, #524]	; (80090c0 <HAL_DMA_Init+0x420>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008ebe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008eca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ed6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d107      	bne.n	8008efc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008efc:	4b71      	ldr	r3, [pc, #452]	; (80090c4 <HAL_DMA_Init+0x424>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	4b71      	ldr	r3, [pc, #452]	; (80090c8 <HAL_DMA_Init+0x428>)
 8008f02:	4013      	ands	r3, r2
 8008f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f08:	d328      	bcc.n	8008f5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b28      	cmp	r3, #40	; 0x28
 8008f10:	d903      	bls.n	8008f1a <HAL_DMA_Init+0x27a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b2e      	cmp	r3, #46	; 0x2e
 8008f18:	d917      	bls.n	8008f4a <HAL_DMA_Init+0x2aa>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f20:	d903      	bls.n	8008f2a <HAL_DMA_Init+0x28a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b42      	cmp	r3, #66	; 0x42
 8008f28:	d90f      	bls.n	8008f4a <HAL_DMA_Init+0x2aa>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2b46      	cmp	r3, #70	; 0x46
 8008f30:	d903      	bls.n	8008f3a <HAL_DMA_Init+0x29a>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b48      	cmp	r3, #72	; 0x48
 8008f38:	d907      	bls.n	8008f4a <HAL_DMA_Init+0x2aa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2b4e      	cmp	r3, #78	; 0x4e
 8008f40:	d905      	bls.n	8008f4e <HAL_DMA_Init+0x2ae>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2b52      	cmp	r3, #82	; 0x52
 8008f48:	d801      	bhi.n	8008f4e <HAL_DMA_Init+0x2ae>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <HAL_DMA_Init+0x2b0>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f023 0307 	bic.w	r3, r3, #7
 8008f72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d117      	bne.n	8008fb6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00e      	beq.n	8008fb6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f002 fb4d 	bl	800b638 <DMA_CheckFifoParam>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d008      	beq.n	8008fb6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2240      	movs	r2, #64	; 0x40
 8008fa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e197      	b.n	80092e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f002 fa88 	bl	800b4d4 <DMA_CalcBaseAndBitshift>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fcc:	f003 031f 	and.w	r3, r3, #31
 8008fd0:	223f      	movs	r2, #63	; 0x3f
 8008fd2:	409a      	lsls	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	e0cd      	b.n	8009176 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a3b      	ldr	r2, [pc, #236]	; (80090cc <HAL_DMA_Init+0x42c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d022      	beq.n	800902a <HAL_DMA_Init+0x38a>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a39      	ldr	r2, [pc, #228]	; (80090d0 <HAL_DMA_Init+0x430>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d01d      	beq.n	800902a <HAL_DMA_Init+0x38a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a38      	ldr	r2, [pc, #224]	; (80090d4 <HAL_DMA_Init+0x434>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d018      	beq.n	800902a <HAL_DMA_Init+0x38a>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a36      	ldr	r2, [pc, #216]	; (80090d8 <HAL_DMA_Init+0x438>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <HAL_DMA_Init+0x38a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a35      	ldr	r2, [pc, #212]	; (80090dc <HAL_DMA_Init+0x43c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00e      	beq.n	800902a <HAL_DMA_Init+0x38a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a33      	ldr	r2, [pc, #204]	; (80090e0 <HAL_DMA_Init+0x440>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_DMA_Init+0x38a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a32      	ldr	r2, [pc, #200]	; (80090e4 <HAL_DMA_Init+0x444>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <HAL_DMA_Init+0x38a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a30      	ldr	r2, [pc, #192]	; (80090e8 <HAL_DMA_Init+0x448>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d101      	bne.n	800902e <HAL_DMA_Init+0x38e>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <HAL_DMA_Init+0x390>
 800902e:	2300      	movs	r3, #0
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 8097 	beq.w	8009164 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a24      	ldr	r2, [pc, #144]	; (80090cc <HAL_DMA_Init+0x42c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d021      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a22      	ldr	r2, [pc, #136]	; (80090d0 <HAL_DMA_Init+0x430>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d01c      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a21      	ldr	r2, [pc, #132]	; (80090d4 <HAL_DMA_Init+0x434>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d017      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1f      	ldr	r2, [pc, #124]	; (80090d8 <HAL_DMA_Init+0x438>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d012      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a1e      	ldr	r2, [pc, #120]	; (80090dc <HAL_DMA_Init+0x43c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00d      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1c      	ldr	r2, [pc, #112]	; (80090e0 <HAL_DMA_Init+0x440>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d008      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <HAL_DMA_Init+0x444>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d003      	beq.n	8009084 <HAL_DMA_Init+0x3e4>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a19      	ldr	r2, [pc, #100]	; (80090e8 <HAL_DMA_Init+0x448>)
 8009082:	4293      	cmp	r3, r2
 8009084:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4b12      	ldr	r3, [pc, #72]	; (80090ec <HAL_DMA_Init+0x44c>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2b40      	cmp	r3, #64	; 0x40
 80090ac:	d020      	beq.n	80090f0 <HAL_DMA_Init+0x450>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	2b80      	cmp	r3, #128	; 0x80
 80090b4:	d102      	bne.n	80090bc <HAL_DMA_Init+0x41c>
 80090b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090ba:	e01a      	b.n	80090f2 <HAL_DMA_Init+0x452>
 80090bc:	2300      	movs	r3, #0
 80090be:	e018      	b.n	80090f2 <HAL_DMA_Init+0x452>
 80090c0:	fe10803f 	.word	0xfe10803f
 80090c4:	5c001000 	.word	0x5c001000
 80090c8:	ffff0000 	.word	0xffff0000
 80090cc:	58025408 	.word	0x58025408
 80090d0:	5802541c 	.word	0x5802541c
 80090d4:	58025430 	.word	0x58025430
 80090d8:	58025444 	.word	0x58025444
 80090dc:	58025458 	.word	0x58025458
 80090e0:	5802546c 	.word	0x5802546c
 80090e4:	58025480 	.word	0x58025480
 80090e8:	58025494 	.word	0x58025494
 80090ec:	fffe000f 	.word	0xfffe000f
 80090f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68d2      	ldr	r2, [r2, #12]
 80090f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009120:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	4b6e      	ldr	r3, [pc, #440]	; (80092f0 <HAL_DMA_Init+0x650>)
 8009138:	4413      	add	r3, r2
 800913a:	4a6e      	ldr	r2, [pc, #440]	; (80092f4 <HAL_DMA_Init+0x654>)
 800913c:	fba2 2303 	umull	r2, r3, r2, r3
 8009140:	091b      	lsrs	r3, r3, #4
 8009142:	009a      	lsls	r2, r3, #2
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f002 f9c3 	bl	800b4d4 <DMA_CalcBaseAndBitshift>
 800914e:	4603      	mov	r3, r0
 8009150:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009156:	f003 031f 	and.w	r3, r3, #31
 800915a:	2201      	movs	r2, #1
 800915c:	409a      	lsls	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	605a      	str	r2, [r3, #4]
 8009162:	e008      	b.n	8009176 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2240      	movs	r2, #64	; 0x40
 8009168:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2203      	movs	r2, #3
 800916e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e0b7      	b.n	80092e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a5f      	ldr	r2, [pc, #380]	; (80092f8 <HAL_DMA_Init+0x658>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d072      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a5d      	ldr	r2, [pc, #372]	; (80092fc <HAL_DMA_Init+0x65c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d06d      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a5c      	ldr	r2, [pc, #368]	; (8009300 <HAL_DMA_Init+0x660>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d068      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a5a      	ldr	r2, [pc, #360]	; (8009304 <HAL_DMA_Init+0x664>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d063      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a59      	ldr	r2, [pc, #356]	; (8009308 <HAL_DMA_Init+0x668>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d05e      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a57      	ldr	r2, [pc, #348]	; (800930c <HAL_DMA_Init+0x66c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d059      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a56      	ldr	r2, [pc, #344]	; (8009310 <HAL_DMA_Init+0x670>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d054      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a54      	ldr	r2, [pc, #336]	; (8009314 <HAL_DMA_Init+0x674>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d04f      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a53      	ldr	r2, [pc, #332]	; (8009318 <HAL_DMA_Init+0x678>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d04a      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a51      	ldr	r2, [pc, #324]	; (800931c <HAL_DMA_Init+0x67c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d045      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a50      	ldr	r2, [pc, #320]	; (8009320 <HAL_DMA_Init+0x680>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d040      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a4e      	ldr	r2, [pc, #312]	; (8009324 <HAL_DMA_Init+0x684>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d03b      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a4d      	ldr	r2, [pc, #308]	; (8009328 <HAL_DMA_Init+0x688>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d036      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a4b      	ldr	r2, [pc, #300]	; (800932c <HAL_DMA_Init+0x68c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d031      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4a      	ldr	r2, [pc, #296]	; (8009330 <HAL_DMA_Init+0x690>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d02c      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a48      	ldr	r2, [pc, #288]	; (8009334 <HAL_DMA_Init+0x694>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d027      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a47      	ldr	r2, [pc, #284]	; (8009338 <HAL_DMA_Init+0x698>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d022      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a45      	ldr	r2, [pc, #276]	; (800933c <HAL_DMA_Init+0x69c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d01d      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a44      	ldr	r2, [pc, #272]	; (8009340 <HAL_DMA_Init+0x6a0>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d018      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a42      	ldr	r2, [pc, #264]	; (8009344 <HAL_DMA_Init+0x6a4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d013      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a41      	ldr	r2, [pc, #260]	; (8009348 <HAL_DMA_Init+0x6a8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00e      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a3f      	ldr	r2, [pc, #252]	; (800934c <HAL_DMA_Init+0x6ac>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d009      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a3e      	ldr	r2, [pc, #248]	; (8009350 <HAL_DMA_Init+0x6b0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d004      	beq.n	8009266 <HAL_DMA_Init+0x5c6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a3c      	ldr	r2, [pc, #240]	; (8009354 <HAL_DMA_Init+0x6b4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d101      	bne.n	800926a <HAL_DMA_Init+0x5ca>
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <HAL_DMA_Init+0x5cc>
 800926a:	2300      	movs	r3, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d032      	beq.n	80092d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 fa5d 	bl	800b730 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b80      	cmp	r3, #128	; 0x80
 800927c:	d102      	bne.n	8009284 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800928c:	b2d2      	uxtb	r2, r2
 800928e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009298:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <HAL_DMA_Init+0x624>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d80c      	bhi.n	80092c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f002 fada 	bl	800b864 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	e008      	b.n	80092d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	a7fdabf8 	.word	0xa7fdabf8
 80092f4:	cccccccd 	.word	0xcccccccd
 80092f8:	40020010 	.word	0x40020010
 80092fc:	40020028 	.word	0x40020028
 8009300:	40020040 	.word	0x40020040
 8009304:	40020058 	.word	0x40020058
 8009308:	40020070 	.word	0x40020070
 800930c:	40020088 	.word	0x40020088
 8009310:	400200a0 	.word	0x400200a0
 8009314:	400200b8 	.word	0x400200b8
 8009318:	40020410 	.word	0x40020410
 800931c:	40020428 	.word	0x40020428
 8009320:	40020440 	.word	0x40020440
 8009324:	40020458 	.word	0x40020458
 8009328:	40020470 	.word	0x40020470
 800932c:	40020488 	.word	0x40020488
 8009330:	400204a0 	.word	0x400204a0
 8009334:	400204b8 	.word	0x400204b8
 8009338:	58025408 	.word	0x58025408
 800933c:	5802541c 	.word	0x5802541c
 8009340:	58025430 	.word	0x58025430
 8009344:	58025444 	.word	0x58025444
 8009348:	58025458 	.word	0x58025458
 800934c:	5802546c 	.word	0x5802546c
 8009350:	58025480 	.word	0x58025480
 8009354:	58025494 	.word	0x58025494

08009358 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e226      	b.n	80097c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800937a:	2b01      	cmp	r3, #1
 800937c:	d101      	bne.n	8009382 <HAL_DMA_Start_IT+0x2a>
 800937e:	2302      	movs	r3, #2
 8009380:	e21f      	b.n	80097c2 <HAL_DMA_Start_IT+0x46a>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b01      	cmp	r3, #1
 8009394:	f040 820a 	bne.w	80097ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a68      	ldr	r2, [pc, #416]	; (800954c <HAL_DMA_Start_IT+0x1f4>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d04a      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a66      	ldr	r2, [pc, #408]	; (8009550 <HAL_DMA_Start_IT+0x1f8>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d045      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a65      	ldr	r2, [pc, #404]	; (8009554 <HAL_DMA_Start_IT+0x1fc>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d040      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a63      	ldr	r2, [pc, #396]	; (8009558 <HAL_DMA_Start_IT+0x200>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d03b      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a62      	ldr	r2, [pc, #392]	; (800955c <HAL_DMA_Start_IT+0x204>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d036      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a60      	ldr	r2, [pc, #384]	; (8009560 <HAL_DMA_Start_IT+0x208>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d031      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a5f      	ldr	r2, [pc, #380]	; (8009564 <HAL_DMA_Start_IT+0x20c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d02c      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a5d      	ldr	r2, [pc, #372]	; (8009568 <HAL_DMA_Start_IT+0x210>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d027      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a5c      	ldr	r2, [pc, #368]	; (800956c <HAL_DMA_Start_IT+0x214>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d022      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a5a      	ldr	r2, [pc, #360]	; (8009570 <HAL_DMA_Start_IT+0x218>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d01d      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a59      	ldr	r2, [pc, #356]	; (8009574 <HAL_DMA_Start_IT+0x21c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d018      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a57      	ldr	r2, [pc, #348]	; (8009578 <HAL_DMA_Start_IT+0x220>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d013      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a56      	ldr	r2, [pc, #344]	; (800957c <HAL_DMA_Start_IT+0x224>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00e      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a54      	ldr	r2, [pc, #336]	; (8009580 <HAL_DMA_Start_IT+0x228>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d009      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a53      	ldr	r2, [pc, #332]	; (8009584 <HAL_DMA_Start_IT+0x22c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d004      	beq.n	8009446 <HAL_DMA_Start_IT+0xee>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a51      	ldr	r2, [pc, #324]	; (8009588 <HAL_DMA_Start_IT+0x230>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d108      	bne.n	8009458 <HAL_DMA_Start_IT+0x100>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0201 	bic.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e007      	b.n	8009468 <HAL_DMA_Start_IT+0x110>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f001 fe84 	bl	800b17c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a34      	ldr	r2, [pc, #208]	; (800954c <HAL_DMA_Start_IT+0x1f4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d04a      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a33      	ldr	r2, [pc, #204]	; (8009550 <HAL_DMA_Start_IT+0x1f8>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d045      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a31      	ldr	r2, [pc, #196]	; (8009554 <HAL_DMA_Start_IT+0x1fc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d040      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a30      	ldr	r2, [pc, #192]	; (8009558 <HAL_DMA_Start_IT+0x200>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d03b      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a2e      	ldr	r2, [pc, #184]	; (800955c <HAL_DMA_Start_IT+0x204>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d036      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2d      	ldr	r2, [pc, #180]	; (8009560 <HAL_DMA_Start_IT+0x208>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d031      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a2b      	ldr	r2, [pc, #172]	; (8009564 <HAL_DMA_Start_IT+0x20c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d02c      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <HAL_DMA_Start_IT+0x210>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d027      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a28      	ldr	r2, [pc, #160]	; (800956c <HAL_DMA_Start_IT+0x214>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d022      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a27      	ldr	r2, [pc, #156]	; (8009570 <HAL_DMA_Start_IT+0x218>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d01d      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a25      	ldr	r2, [pc, #148]	; (8009574 <HAL_DMA_Start_IT+0x21c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d018      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a24      	ldr	r2, [pc, #144]	; (8009578 <HAL_DMA_Start_IT+0x220>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a22      	ldr	r2, [pc, #136]	; (800957c <HAL_DMA_Start_IT+0x224>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00e      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a21      	ldr	r2, [pc, #132]	; (8009580 <HAL_DMA_Start_IT+0x228>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d009      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1f      	ldr	r2, [pc, #124]	; (8009584 <HAL_DMA_Start_IT+0x22c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d004      	beq.n	8009514 <HAL_DMA_Start_IT+0x1bc>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a1e      	ldr	r2, [pc, #120]	; (8009588 <HAL_DMA_Start_IT+0x230>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d101      	bne.n	8009518 <HAL_DMA_Start_IT+0x1c0>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <HAL_DMA_Start_IT+0x1c2>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d036      	beq.n	800958c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f023 021e 	bic.w	r2, r3, #30
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0216 	orr.w	r2, r2, #22
 8009530:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	d03e      	beq.n	80095b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f042 0208 	orr.w	r2, r2, #8
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	e035      	b.n	80095b8 <HAL_DMA_Start_IT+0x260>
 800954c:	40020010 	.word	0x40020010
 8009550:	40020028 	.word	0x40020028
 8009554:	40020040 	.word	0x40020040
 8009558:	40020058 	.word	0x40020058
 800955c:	40020070 	.word	0x40020070
 8009560:	40020088 	.word	0x40020088
 8009564:	400200a0 	.word	0x400200a0
 8009568:	400200b8 	.word	0x400200b8
 800956c:	40020410 	.word	0x40020410
 8009570:	40020428 	.word	0x40020428
 8009574:	40020440 	.word	0x40020440
 8009578:	40020458 	.word	0x40020458
 800957c:	40020470 	.word	0x40020470
 8009580:	40020488 	.word	0x40020488
 8009584:	400204a0 	.word	0x400204a0
 8009588:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f023 020e 	bic.w	r2, r3, #14
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 020a 	orr.w	r2, r2, #10
 800959e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0204 	orr.w	r2, r2, #4
 80095b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a83      	ldr	r2, [pc, #524]	; (80097cc <HAL_DMA_Start_IT+0x474>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d072      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a82      	ldr	r2, [pc, #520]	; (80097d0 <HAL_DMA_Start_IT+0x478>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d06d      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a80      	ldr	r2, [pc, #512]	; (80097d4 <HAL_DMA_Start_IT+0x47c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d068      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a7f      	ldr	r2, [pc, #508]	; (80097d8 <HAL_DMA_Start_IT+0x480>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d063      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a7d      	ldr	r2, [pc, #500]	; (80097dc <HAL_DMA_Start_IT+0x484>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d05e      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a7c      	ldr	r2, [pc, #496]	; (80097e0 <HAL_DMA_Start_IT+0x488>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d059      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a7a      	ldr	r2, [pc, #488]	; (80097e4 <HAL_DMA_Start_IT+0x48c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d054      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a79      	ldr	r2, [pc, #484]	; (80097e8 <HAL_DMA_Start_IT+0x490>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d04f      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a77      	ldr	r2, [pc, #476]	; (80097ec <HAL_DMA_Start_IT+0x494>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d04a      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a76      	ldr	r2, [pc, #472]	; (80097f0 <HAL_DMA_Start_IT+0x498>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d045      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a74      	ldr	r2, [pc, #464]	; (80097f4 <HAL_DMA_Start_IT+0x49c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d040      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a73      	ldr	r2, [pc, #460]	; (80097f8 <HAL_DMA_Start_IT+0x4a0>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d03b      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a71      	ldr	r2, [pc, #452]	; (80097fc <HAL_DMA_Start_IT+0x4a4>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d036      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a70      	ldr	r2, [pc, #448]	; (8009800 <HAL_DMA_Start_IT+0x4a8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d031      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a6e      	ldr	r2, [pc, #440]	; (8009804 <HAL_DMA_Start_IT+0x4ac>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d02c      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a6d      	ldr	r2, [pc, #436]	; (8009808 <HAL_DMA_Start_IT+0x4b0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d027      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a6b      	ldr	r2, [pc, #428]	; (800980c <HAL_DMA_Start_IT+0x4b4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d022      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a6a      	ldr	r2, [pc, #424]	; (8009810 <HAL_DMA_Start_IT+0x4b8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d01d      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a68      	ldr	r2, [pc, #416]	; (8009814 <HAL_DMA_Start_IT+0x4bc>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d018      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a67      	ldr	r2, [pc, #412]	; (8009818 <HAL_DMA_Start_IT+0x4c0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a65      	ldr	r2, [pc, #404]	; (800981c <HAL_DMA_Start_IT+0x4c4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00e      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a64      	ldr	r2, [pc, #400]	; (8009820 <HAL_DMA_Start_IT+0x4c8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d009      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a62      	ldr	r2, [pc, #392]	; (8009824 <HAL_DMA_Start_IT+0x4cc>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d004      	beq.n	80096a8 <HAL_DMA_Start_IT+0x350>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a61      	ldr	r2, [pc, #388]	; (8009828 <HAL_DMA_Start_IT+0x4d0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d101      	bne.n	80096ac <HAL_DMA_Start_IT+0x354>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <HAL_DMA_Start_IT+0x356>
 80096ac:	2300      	movs	r3, #0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d01a      	beq.n	80096e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d007      	beq.n	80096d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a37      	ldr	r2, [pc, #220]	; (80097cc <HAL_DMA_Start_IT+0x474>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d04a      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a36      	ldr	r2, [pc, #216]	; (80097d0 <HAL_DMA_Start_IT+0x478>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d045      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a34      	ldr	r2, [pc, #208]	; (80097d4 <HAL_DMA_Start_IT+0x47c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d040      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a33      	ldr	r2, [pc, #204]	; (80097d8 <HAL_DMA_Start_IT+0x480>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d03b      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a31      	ldr	r2, [pc, #196]	; (80097dc <HAL_DMA_Start_IT+0x484>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d036      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a30      	ldr	r2, [pc, #192]	; (80097e0 <HAL_DMA_Start_IT+0x488>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d031      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a2e      	ldr	r2, [pc, #184]	; (80097e4 <HAL_DMA_Start_IT+0x48c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d02c      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a2d      	ldr	r2, [pc, #180]	; (80097e8 <HAL_DMA_Start_IT+0x490>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d027      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a2b      	ldr	r2, [pc, #172]	; (80097ec <HAL_DMA_Start_IT+0x494>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d022      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a2a      	ldr	r2, [pc, #168]	; (80097f0 <HAL_DMA_Start_IT+0x498>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d01d      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a28      	ldr	r2, [pc, #160]	; (80097f4 <HAL_DMA_Start_IT+0x49c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a27      	ldr	r2, [pc, #156]	; (80097f8 <HAL_DMA_Start_IT+0x4a0>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a25      	ldr	r2, [pc, #148]	; (80097fc <HAL_DMA_Start_IT+0x4a4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a24      	ldr	r2, [pc, #144]	; (8009800 <HAL_DMA_Start_IT+0x4a8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a22      	ldr	r2, [pc, #136]	; (8009804 <HAL_DMA_Start_IT+0x4ac>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <HAL_DMA_Start_IT+0x430>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a21      	ldr	r2, [pc, #132]	; (8009808 <HAL_DMA_Start_IT+0x4b0>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d108      	bne.n	800979a <HAL_DMA_Start_IT+0x442>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0201 	orr.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	e012      	b.n	80097c0 <HAL_DMA_Start_IT+0x468>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e009      	b.n	80097c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40020010 	.word	0x40020010
 80097d0:	40020028 	.word	0x40020028
 80097d4:	40020040 	.word	0x40020040
 80097d8:	40020058 	.word	0x40020058
 80097dc:	40020070 	.word	0x40020070
 80097e0:	40020088 	.word	0x40020088
 80097e4:	400200a0 	.word	0x400200a0
 80097e8:	400200b8 	.word	0x400200b8
 80097ec:	40020410 	.word	0x40020410
 80097f0:	40020428 	.word	0x40020428
 80097f4:	40020440 	.word	0x40020440
 80097f8:	40020458 	.word	0x40020458
 80097fc:	40020470 	.word	0x40020470
 8009800:	40020488 	.word	0x40020488
 8009804:	400204a0 	.word	0x400204a0
 8009808:	400204b8 	.word	0x400204b8
 800980c:	58025408 	.word	0x58025408
 8009810:	5802541c 	.word	0x5802541c
 8009814:	58025430 	.word	0x58025430
 8009818:	58025444 	.word	0x58025444
 800981c:	58025458 	.word	0x58025458
 8009820:	5802546c 	.word	0x5802546c
 8009824:	58025480 	.word	0x58025480
 8009828:	58025494 	.word	0x58025494

0800982c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009834:	f7fd f90c 	bl	8006a50 <HAL_GetTick>
 8009838:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e2dc      	b.n	8009dfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b02      	cmp	r3, #2
 800984e:	d008      	beq.n	8009862 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2280      	movs	r2, #128	; 0x80
 8009854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e2cd      	b.n	8009dfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a76      	ldr	r2, [pc, #472]	; (8009a40 <HAL_DMA_Abort+0x214>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d04a      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a74      	ldr	r2, [pc, #464]	; (8009a44 <HAL_DMA_Abort+0x218>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d045      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a73      	ldr	r2, [pc, #460]	; (8009a48 <HAL_DMA_Abort+0x21c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d040      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a71      	ldr	r2, [pc, #452]	; (8009a4c <HAL_DMA_Abort+0x220>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d03b      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a70      	ldr	r2, [pc, #448]	; (8009a50 <HAL_DMA_Abort+0x224>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d036      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a6e      	ldr	r2, [pc, #440]	; (8009a54 <HAL_DMA_Abort+0x228>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d031      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a6d      	ldr	r2, [pc, #436]	; (8009a58 <HAL_DMA_Abort+0x22c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d02c      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a6b      	ldr	r2, [pc, #428]	; (8009a5c <HAL_DMA_Abort+0x230>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d027      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a6a      	ldr	r2, [pc, #424]	; (8009a60 <HAL_DMA_Abort+0x234>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d022      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a68      	ldr	r2, [pc, #416]	; (8009a64 <HAL_DMA_Abort+0x238>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01d      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a67      	ldr	r2, [pc, #412]	; (8009a68 <HAL_DMA_Abort+0x23c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d018      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a65      	ldr	r2, [pc, #404]	; (8009a6c <HAL_DMA_Abort+0x240>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d013      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a64      	ldr	r2, [pc, #400]	; (8009a70 <HAL_DMA_Abort+0x244>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d00e      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a62      	ldr	r2, [pc, #392]	; (8009a74 <HAL_DMA_Abort+0x248>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d009      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a61      	ldr	r2, [pc, #388]	; (8009a78 <HAL_DMA_Abort+0x24c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d004      	beq.n	8009902 <HAL_DMA_Abort+0xd6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a5f      	ldr	r2, [pc, #380]	; (8009a7c <HAL_DMA_Abort+0x250>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d101      	bne.n	8009906 <HAL_DMA_Abort+0xda>
 8009902:	2301      	movs	r3, #1
 8009904:	e000      	b.n	8009908 <HAL_DMA_Abort+0xdc>
 8009906:	2300      	movs	r3, #0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d013      	beq.n	8009934 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 021e 	bic.w	r2, r2, #30
 800991a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	695a      	ldr	r2, [r3, #20]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800992a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	e00a      	b.n	800994a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 020e 	bic.w	r2, r2, #14
 8009942:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a3c      	ldr	r2, [pc, #240]	; (8009a40 <HAL_DMA_Abort+0x214>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d072      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a3a      	ldr	r2, [pc, #232]	; (8009a44 <HAL_DMA_Abort+0x218>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d06d      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a39      	ldr	r2, [pc, #228]	; (8009a48 <HAL_DMA_Abort+0x21c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d068      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a37      	ldr	r2, [pc, #220]	; (8009a4c <HAL_DMA_Abort+0x220>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d063      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a36      	ldr	r2, [pc, #216]	; (8009a50 <HAL_DMA_Abort+0x224>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d05e      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a34      	ldr	r2, [pc, #208]	; (8009a54 <HAL_DMA_Abort+0x228>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d059      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a33      	ldr	r2, [pc, #204]	; (8009a58 <HAL_DMA_Abort+0x22c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d054      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a31      	ldr	r2, [pc, #196]	; (8009a5c <HAL_DMA_Abort+0x230>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d04f      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a30      	ldr	r2, [pc, #192]	; (8009a60 <HAL_DMA_Abort+0x234>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d04a      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a2e      	ldr	r2, [pc, #184]	; (8009a64 <HAL_DMA_Abort+0x238>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d045      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a2d      	ldr	r2, [pc, #180]	; (8009a68 <HAL_DMA_Abort+0x23c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d040      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a2b      	ldr	r2, [pc, #172]	; (8009a6c <HAL_DMA_Abort+0x240>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d03b      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a2a      	ldr	r2, [pc, #168]	; (8009a70 <HAL_DMA_Abort+0x244>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d036      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a28      	ldr	r2, [pc, #160]	; (8009a74 <HAL_DMA_Abort+0x248>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d031      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a27      	ldr	r2, [pc, #156]	; (8009a78 <HAL_DMA_Abort+0x24c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d02c      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a25      	ldr	r2, [pc, #148]	; (8009a7c <HAL_DMA_Abort+0x250>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d027      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a24      	ldr	r2, [pc, #144]	; (8009a80 <HAL_DMA_Abort+0x254>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d022      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	; (8009a84 <HAL_DMA_Abort+0x258>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d01d      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	; (8009a88 <HAL_DMA_Abort+0x25c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d018      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <HAL_DMA_Abort+0x260>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d013      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_DMA_Abort+0x264>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00e      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <HAL_DMA_Abort+0x268>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d009      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_DMA_Abort+0x26c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d004      	beq.n	8009a3a <HAL_DMA_Abort+0x20e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a19      	ldr	r2, [pc, #100]	; (8009a9c <HAL_DMA_Abort+0x270>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d132      	bne.n	8009aa0 <HAL_DMA_Abort+0x274>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e031      	b.n	8009aa2 <HAL_DMA_Abort+0x276>
 8009a3e:	bf00      	nop
 8009a40:	40020010 	.word	0x40020010
 8009a44:	40020028 	.word	0x40020028
 8009a48:	40020040 	.word	0x40020040
 8009a4c:	40020058 	.word	0x40020058
 8009a50:	40020070 	.word	0x40020070
 8009a54:	40020088 	.word	0x40020088
 8009a58:	400200a0 	.word	0x400200a0
 8009a5c:	400200b8 	.word	0x400200b8
 8009a60:	40020410 	.word	0x40020410
 8009a64:	40020428 	.word	0x40020428
 8009a68:	40020440 	.word	0x40020440
 8009a6c:	40020458 	.word	0x40020458
 8009a70:	40020470 	.word	0x40020470
 8009a74:	40020488 	.word	0x40020488
 8009a78:	400204a0 	.word	0x400204a0
 8009a7c:	400204b8 	.word	0x400204b8
 8009a80:	58025408 	.word	0x58025408
 8009a84:	5802541c 	.word	0x5802541c
 8009a88:	58025430 	.word	0x58025430
 8009a8c:	58025444 	.word	0x58025444
 8009a90:	58025458 	.word	0x58025458
 8009a94:	5802546c 	.word	0x5802546c
 8009a98:	58025480 	.word	0x58025480
 8009a9c:	58025494 	.word	0x58025494
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a6d      	ldr	r2, [pc, #436]	; (8009c70 <HAL_DMA_Abort+0x444>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d04a      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a6b      	ldr	r2, [pc, #428]	; (8009c74 <HAL_DMA_Abort+0x448>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d045      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a6a      	ldr	r2, [pc, #424]	; (8009c78 <HAL_DMA_Abort+0x44c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d040      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a68      	ldr	r2, [pc, #416]	; (8009c7c <HAL_DMA_Abort+0x450>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d03b      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a67      	ldr	r2, [pc, #412]	; (8009c80 <HAL_DMA_Abort+0x454>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d036      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a65      	ldr	r2, [pc, #404]	; (8009c84 <HAL_DMA_Abort+0x458>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d031      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a64      	ldr	r2, [pc, #400]	; (8009c88 <HAL_DMA_Abort+0x45c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d02c      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a62      	ldr	r2, [pc, #392]	; (8009c8c <HAL_DMA_Abort+0x460>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d027      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a61      	ldr	r2, [pc, #388]	; (8009c90 <HAL_DMA_Abort+0x464>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d022      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a5f      	ldr	r2, [pc, #380]	; (8009c94 <HAL_DMA_Abort+0x468>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d01d      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a5e      	ldr	r2, [pc, #376]	; (8009c98 <HAL_DMA_Abort+0x46c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d018      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a5c      	ldr	r2, [pc, #368]	; (8009c9c <HAL_DMA_Abort+0x470>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d013      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a5b      	ldr	r2, [pc, #364]	; (8009ca0 <HAL_DMA_Abort+0x474>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00e      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a59      	ldr	r2, [pc, #356]	; (8009ca4 <HAL_DMA_Abort+0x478>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d009      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a58      	ldr	r2, [pc, #352]	; (8009ca8 <HAL_DMA_Abort+0x47c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d004      	beq.n	8009b56 <HAL_DMA_Abort+0x32a>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a56      	ldr	r2, [pc, #344]	; (8009cac <HAL_DMA_Abort+0x480>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d108      	bne.n	8009b68 <HAL_DMA_Abort+0x33c>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e007      	b.n	8009b78 <HAL_DMA_Abort+0x34c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009b78:	e013      	b.n	8009ba2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b7a:	f7fc ff69 	bl	8006a50 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	d90c      	bls.n	8009ba2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2203      	movs	r2, #3
 8009b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e12d      	b.n	8009dfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e5      	bne.n	8009b7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a2f      	ldr	r2, [pc, #188]	; (8009c70 <HAL_DMA_Abort+0x444>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d04a      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <HAL_DMA_Abort+0x448>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d045      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2c      	ldr	r2, [pc, #176]	; (8009c78 <HAL_DMA_Abort+0x44c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d040      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a2a      	ldr	r2, [pc, #168]	; (8009c7c <HAL_DMA_Abort+0x450>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d03b      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a29      	ldr	r2, [pc, #164]	; (8009c80 <HAL_DMA_Abort+0x454>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d036      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a27      	ldr	r2, [pc, #156]	; (8009c84 <HAL_DMA_Abort+0x458>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d031      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a26      	ldr	r2, [pc, #152]	; (8009c88 <HAL_DMA_Abort+0x45c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d02c      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a24      	ldr	r2, [pc, #144]	; (8009c8c <HAL_DMA_Abort+0x460>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d027      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a23      	ldr	r2, [pc, #140]	; (8009c90 <HAL_DMA_Abort+0x464>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d022      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a21      	ldr	r2, [pc, #132]	; (8009c94 <HAL_DMA_Abort+0x468>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d01d      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a20      	ldr	r2, [pc, #128]	; (8009c98 <HAL_DMA_Abort+0x46c>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d018      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1e      	ldr	r2, [pc, #120]	; (8009c9c <HAL_DMA_Abort+0x470>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d013      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a1d      	ldr	r2, [pc, #116]	; (8009ca0 <HAL_DMA_Abort+0x474>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d00e      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1b      	ldr	r2, [pc, #108]	; (8009ca4 <HAL_DMA_Abort+0x478>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d009      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1a      	ldr	r2, [pc, #104]	; (8009ca8 <HAL_DMA_Abort+0x47c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d004      	beq.n	8009c4e <HAL_DMA_Abort+0x422>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a18      	ldr	r2, [pc, #96]	; (8009cac <HAL_DMA_Abort+0x480>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d101      	bne.n	8009c52 <HAL_DMA_Abort+0x426>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e000      	b.n	8009c54 <HAL_DMA_Abort+0x428>
 8009c52:	2300      	movs	r3, #0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d02b      	beq.n	8009cb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c62:	f003 031f 	and.w	r3, r3, #31
 8009c66:	223f      	movs	r2, #63	; 0x3f
 8009c68:	409a      	lsls	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	609a      	str	r2, [r3, #8]
 8009c6e:	e02a      	b.n	8009cc6 <HAL_DMA_Abort+0x49a>
 8009c70:	40020010 	.word	0x40020010
 8009c74:	40020028 	.word	0x40020028
 8009c78:	40020040 	.word	0x40020040
 8009c7c:	40020058 	.word	0x40020058
 8009c80:	40020070 	.word	0x40020070
 8009c84:	40020088 	.word	0x40020088
 8009c88:	400200a0 	.word	0x400200a0
 8009c8c:	400200b8 	.word	0x400200b8
 8009c90:	40020410 	.word	0x40020410
 8009c94:	40020428 	.word	0x40020428
 8009c98:	40020440 	.word	0x40020440
 8009c9c:	40020458 	.word	0x40020458
 8009ca0:	40020470 	.word	0x40020470
 8009ca4:	40020488 	.word	0x40020488
 8009ca8:	400204a0 	.word	0x400204a0
 8009cac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cba:	f003 031f 	and.w	r3, r3, #31
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	409a      	lsls	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a4f      	ldr	r2, [pc, #316]	; (8009e08 <HAL_DMA_Abort+0x5dc>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d072      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a4d      	ldr	r2, [pc, #308]	; (8009e0c <HAL_DMA_Abort+0x5e0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d06d      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a4c      	ldr	r2, [pc, #304]	; (8009e10 <HAL_DMA_Abort+0x5e4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d068      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a4a      	ldr	r2, [pc, #296]	; (8009e14 <HAL_DMA_Abort+0x5e8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d063      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a49      	ldr	r2, [pc, #292]	; (8009e18 <HAL_DMA_Abort+0x5ec>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d05e      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a47      	ldr	r2, [pc, #284]	; (8009e1c <HAL_DMA_Abort+0x5f0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d059      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a46      	ldr	r2, [pc, #280]	; (8009e20 <HAL_DMA_Abort+0x5f4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d054      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a44      	ldr	r2, [pc, #272]	; (8009e24 <HAL_DMA_Abort+0x5f8>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d04f      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a43      	ldr	r2, [pc, #268]	; (8009e28 <HAL_DMA_Abort+0x5fc>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d04a      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a41      	ldr	r2, [pc, #260]	; (8009e2c <HAL_DMA_Abort+0x600>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d045      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a40      	ldr	r2, [pc, #256]	; (8009e30 <HAL_DMA_Abort+0x604>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d040      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a3e      	ldr	r2, [pc, #248]	; (8009e34 <HAL_DMA_Abort+0x608>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d03b      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a3d      	ldr	r2, [pc, #244]	; (8009e38 <HAL_DMA_Abort+0x60c>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d036      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a3b      	ldr	r2, [pc, #236]	; (8009e3c <HAL_DMA_Abort+0x610>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d031      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a3a      	ldr	r2, [pc, #232]	; (8009e40 <HAL_DMA_Abort+0x614>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d02c      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a38      	ldr	r2, [pc, #224]	; (8009e44 <HAL_DMA_Abort+0x618>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d027      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a37      	ldr	r2, [pc, #220]	; (8009e48 <HAL_DMA_Abort+0x61c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d022      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a35      	ldr	r2, [pc, #212]	; (8009e4c <HAL_DMA_Abort+0x620>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d01d      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a34      	ldr	r2, [pc, #208]	; (8009e50 <HAL_DMA_Abort+0x624>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d018      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a32      	ldr	r2, [pc, #200]	; (8009e54 <HAL_DMA_Abort+0x628>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d013      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a31      	ldr	r2, [pc, #196]	; (8009e58 <HAL_DMA_Abort+0x62c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00e      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a2f      	ldr	r2, [pc, #188]	; (8009e5c <HAL_DMA_Abort+0x630>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d009      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a2e      	ldr	r2, [pc, #184]	; (8009e60 <HAL_DMA_Abort+0x634>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d004      	beq.n	8009db6 <HAL_DMA_Abort+0x58a>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a2c      	ldr	r2, [pc, #176]	; (8009e64 <HAL_DMA_Abort+0x638>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d101      	bne.n	8009dba <HAL_DMA_Abort+0x58e>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <HAL_DMA_Abort+0x590>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d015      	beq.n	8009dec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009dc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00c      	beq.n	8009dec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009de0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009dea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	40020010 	.word	0x40020010
 8009e0c:	40020028 	.word	0x40020028
 8009e10:	40020040 	.word	0x40020040
 8009e14:	40020058 	.word	0x40020058
 8009e18:	40020070 	.word	0x40020070
 8009e1c:	40020088 	.word	0x40020088
 8009e20:	400200a0 	.word	0x400200a0
 8009e24:	400200b8 	.word	0x400200b8
 8009e28:	40020410 	.word	0x40020410
 8009e2c:	40020428 	.word	0x40020428
 8009e30:	40020440 	.word	0x40020440
 8009e34:	40020458 	.word	0x40020458
 8009e38:	40020470 	.word	0x40020470
 8009e3c:	40020488 	.word	0x40020488
 8009e40:	400204a0 	.word	0x400204a0
 8009e44:	400204b8 	.word	0x400204b8
 8009e48:	58025408 	.word	0x58025408
 8009e4c:	5802541c 	.word	0x5802541c
 8009e50:	58025430 	.word	0x58025430
 8009e54:	58025444 	.word	0x58025444
 8009e58:	58025458 	.word	0x58025458
 8009e5c:	5802546c 	.word	0x5802546c
 8009e60:	58025480 	.word	0x58025480
 8009e64:	58025494 	.word	0x58025494

08009e68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e237      	b.n	800a2ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d004      	beq.n	8009e90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2280      	movs	r2, #128	; 0x80
 8009e8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e22c      	b.n	800a2ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a5c      	ldr	r2, [pc, #368]	; (800a008 <HAL_DMA_Abort_IT+0x1a0>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d04a      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a5b      	ldr	r2, [pc, #364]	; (800a00c <HAL_DMA_Abort_IT+0x1a4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d045      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a59      	ldr	r2, [pc, #356]	; (800a010 <HAL_DMA_Abort_IT+0x1a8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d040      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a58      	ldr	r2, [pc, #352]	; (800a014 <HAL_DMA_Abort_IT+0x1ac>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d03b      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a56      	ldr	r2, [pc, #344]	; (800a018 <HAL_DMA_Abort_IT+0x1b0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d036      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a55      	ldr	r2, [pc, #340]	; (800a01c <HAL_DMA_Abort_IT+0x1b4>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d031      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a53      	ldr	r2, [pc, #332]	; (800a020 <HAL_DMA_Abort_IT+0x1b8>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d02c      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a52      	ldr	r2, [pc, #328]	; (800a024 <HAL_DMA_Abort_IT+0x1bc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d027      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a50      	ldr	r2, [pc, #320]	; (800a028 <HAL_DMA_Abort_IT+0x1c0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d022      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a4f      	ldr	r2, [pc, #316]	; (800a02c <HAL_DMA_Abort_IT+0x1c4>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d01d      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a4d      	ldr	r2, [pc, #308]	; (800a030 <HAL_DMA_Abort_IT+0x1c8>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d018      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a4c      	ldr	r2, [pc, #304]	; (800a034 <HAL_DMA_Abort_IT+0x1cc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d013      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a4a      	ldr	r2, [pc, #296]	; (800a038 <HAL_DMA_Abort_IT+0x1d0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d00e      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a49      	ldr	r2, [pc, #292]	; (800a03c <HAL_DMA_Abort_IT+0x1d4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d009      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a47      	ldr	r2, [pc, #284]	; (800a040 <HAL_DMA_Abort_IT+0x1d8>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d004      	beq.n	8009f30 <HAL_DMA_Abort_IT+0xc8>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a46      	ldr	r2, [pc, #280]	; (800a044 <HAL_DMA_Abort_IT+0x1dc>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d101      	bne.n	8009f34 <HAL_DMA_Abort_IT+0xcc>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <HAL_DMA_Abort_IT+0xce>
 8009f34:	2300      	movs	r3, #0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 8086 	beq.w	800a048 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a2f      	ldr	r2, [pc, #188]	; (800a008 <HAL_DMA_Abort_IT+0x1a0>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d04a      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a2e      	ldr	r2, [pc, #184]	; (800a00c <HAL_DMA_Abort_IT+0x1a4>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d045      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a2c      	ldr	r2, [pc, #176]	; (800a010 <HAL_DMA_Abort_IT+0x1a8>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d040      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a2b      	ldr	r2, [pc, #172]	; (800a014 <HAL_DMA_Abort_IT+0x1ac>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d03b      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a29      	ldr	r2, [pc, #164]	; (800a018 <HAL_DMA_Abort_IT+0x1b0>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d036      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a28      	ldr	r2, [pc, #160]	; (800a01c <HAL_DMA_Abort_IT+0x1b4>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d031      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a26      	ldr	r2, [pc, #152]	; (800a020 <HAL_DMA_Abort_IT+0x1b8>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d02c      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a25      	ldr	r2, [pc, #148]	; (800a024 <HAL_DMA_Abort_IT+0x1bc>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d027      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a23      	ldr	r2, [pc, #140]	; (800a028 <HAL_DMA_Abort_IT+0x1c0>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d022      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a22      	ldr	r2, [pc, #136]	; (800a02c <HAL_DMA_Abort_IT+0x1c4>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d01d      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a20      	ldr	r2, [pc, #128]	; (800a030 <HAL_DMA_Abort_IT+0x1c8>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d018      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1f      	ldr	r2, [pc, #124]	; (800a034 <HAL_DMA_Abort_IT+0x1cc>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <HAL_DMA_Abort_IT+0x1d0>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00e      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a1c      	ldr	r2, [pc, #112]	; (800a03c <HAL_DMA_Abort_IT+0x1d4>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d009      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a1a      	ldr	r2, [pc, #104]	; (800a040 <HAL_DMA_Abort_IT+0x1d8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0x17c>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a19      	ldr	r2, [pc, #100]	; (800a044 <HAL_DMA_Abort_IT+0x1dc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d108      	bne.n	8009ff6 <HAL_DMA_Abort_IT+0x18e>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0201 	bic.w	r2, r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e178      	b.n	800a2e8 <HAL_DMA_Abort_IT+0x480>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	e16f      	b.n	800a2e8 <HAL_DMA_Abort_IT+0x480>
 800a008:	40020010 	.word	0x40020010
 800a00c:	40020028 	.word	0x40020028
 800a010:	40020040 	.word	0x40020040
 800a014:	40020058 	.word	0x40020058
 800a018:	40020070 	.word	0x40020070
 800a01c:	40020088 	.word	0x40020088
 800a020:	400200a0 	.word	0x400200a0
 800a024:	400200b8 	.word	0x400200b8
 800a028:	40020410 	.word	0x40020410
 800a02c:	40020428 	.word	0x40020428
 800a030:	40020440 	.word	0x40020440
 800a034:	40020458 	.word	0x40020458
 800a038:	40020470 	.word	0x40020470
 800a03c:	40020488 	.word	0x40020488
 800a040:	400204a0 	.word	0x400204a0
 800a044:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 020e 	bic.w	r2, r2, #14
 800a056:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a6c      	ldr	r2, [pc, #432]	; (800a210 <HAL_DMA_Abort_IT+0x3a8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d04a      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a6b      	ldr	r2, [pc, #428]	; (800a214 <HAL_DMA_Abort_IT+0x3ac>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d045      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a69      	ldr	r2, [pc, #420]	; (800a218 <HAL_DMA_Abort_IT+0x3b0>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d040      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a68      	ldr	r2, [pc, #416]	; (800a21c <HAL_DMA_Abort_IT+0x3b4>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d03b      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a66      	ldr	r2, [pc, #408]	; (800a220 <HAL_DMA_Abort_IT+0x3b8>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d036      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a65      	ldr	r2, [pc, #404]	; (800a224 <HAL_DMA_Abort_IT+0x3bc>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d031      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a63      	ldr	r2, [pc, #396]	; (800a228 <HAL_DMA_Abort_IT+0x3c0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d02c      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a62      	ldr	r2, [pc, #392]	; (800a22c <HAL_DMA_Abort_IT+0x3c4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d027      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a60      	ldr	r2, [pc, #384]	; (800a230 <HAL_DMA_Abort_IT+0x3c8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d022      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a5f      	ldr	r2, [pc, #380]	; (800a234 <HAL_DMA_Abort_IT+0x3cc>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d01d      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a5d      	ldr	r2, [pc, #372]	; (800a238 <HAL_DMA_Abort_IT+0x3d0>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d018      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a5c      	ldr	r2, [pc, #368]	; (800a23c <HAL_DMA_Abort_IT+0x3d4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d013      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a5a      	ldr	r2, [pc, #360]	; (800a240 <HAL_DMA_Abort_IT+0x3d8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00e      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a59      	ldr	r2, [pc, #356]	; (800a244 <HAL_DMA_Abort_IT+0x3dc>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d009      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a57      	ldr	r2, [pc, #348]	; (800a248 <HAL_DMA_Abort_IT+0x3e0>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d004      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x290>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a56      	ldr	r2, [pc, #344]	; (800a24c <HAL_DMA_Abort_IT+0x3e4>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d108      	bne.n	800a10a <HAL_DMA_Abort_IT+0x2a2>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e007      	b.n	800a11a <HAL_DMA_Abort_IT+0x2b2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0201 	bic.w	r2, r2, #1
 800a118:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a3c      	ldr	r2, [pc, #240]	; (800a210 <HAL_DMA_Abort_IT+0x3a8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d072      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a3a      	ldr	r2, [pc, #232]	; (800a214 <HAL_DMA_Abort_IT+0x3ac>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d06d      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a39      	ldr	r2, [pc, #228]	; (800a218 <HAL_DMA_Abort_IT+0x3b0>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d068      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a37      	ldr	r2, [pc, #220]	; (800a21c <HAL_DMA_Abort_IT+0x3b4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d063      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a36      	ldr	r2, [pc, #216]	; (800a220 <HAL_DMA_Abort_IT+0x3b8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d05e      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a34      	ldr	r2, [pc, #208]	; (800a224 <HAL_DMA_Abort_IT+0x3bc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d059      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a33      	ldr	r2, [pc, #204]	; (800a228 <HAL_DMA_Abort_IT+0x3c0>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d054      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a31      	ldr	r2, [pc, #196]	; (800a22c <HAL_DMA_Abort_IT+0x3c4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d04f      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a30      	ldr	r2, [pc, #192]	; (800a230 <HAL_DMA_Abort_IT+0x3c8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d04a      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a2e      	ldr	r2, [pc, #184]	; (800a234 <HAL_DMA_Abort_IT+0x3cc>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d045      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a2d      	ldr	r2, [pc, #180]	; (800a238 <HAL_DMA_Abort_IT+0x3d0>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d040      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a2b      	ldr	r2, [pc, #172]	; (800a23c <HAL_DMA_Abort_IT+0x3d4>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d03b      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <HAL_DMA_Abort_IT+0x3d8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d036      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a28      	ldr	r2, [pc, #160]	; (800a244 <HAL_DMA_Abort_IT+0x3dc>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d031      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a27      	ldr	r2, [pc, #156]	; (800a248 <HAL_DMA_Abort_IT+0x3e0>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d02c      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a25      	ldr	r2, [pc, #148]	; (800a24c <HAL_DMA_Abort_IT+0x3e4>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d027      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a24      	ldr	r2, [pc, #144]	; (800a250 <HAL_DMA_Abort_IT+0x3e8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d022      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a22      	ldr	r2, [pc, #136]	; (800a254 <HAL_DMA_Abort_IT+0x3ec>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d01d      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a21      	ldr	r2, [pc, #132]	; (800a258 <HAL_DMA_Abort_IT+0x3f0>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d018      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a1f      	ldr	r2, [pc, #124]	; (800a25c <HAL_DMA_Abort_IT+0x3f4>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d013      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a1e      	ldr	r2, [pc, #120]	; (800a260 <HAL_DMA_Abort_IT+0x3f8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d00e      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1c      	ldr	r2, [pc, #112]	; (800a264 <HAL_DMA_Abort_IT+0x3fc>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d009      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1b      	ldr	r2, [pc, #108]	; (800a268 <HAL_DMA_Abort_IT+0x400>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d004      	beq.n	800a20a <HAL_DMA_Abort_IT+0x3a2>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a19      	ldr	r2, [pc, #100]	; (800a26c <HAL_DMA_Abort_IT+0x404>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d132      	bne.n	800a270 <HAL_DMA_Abort_IT+0x408>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e031      	b.n	800a272 <HAL_DMA_Abort_IT+0x40a>
 800a20e:	bf00      	nop
 800a210:	40020010 	.word	0x40020010
 800a214:	40020028 	.word	0x40020028
 800a218:	40020040 	.word	0x40020040
 800a21c:	40020058 	.word	0x40020058
 800a220:	40020070 	.word	0x40020070
 800a224:	40020088 	.word	0x40020088
 800a228:	400200a0 	.word	0x400200a0
 800a22c:	400200b8 	.word	0x400200b8
 800a230:	40020410 	.word	0x40020410
 800a234:	40020428 	.word	0x40020428
 800a238:	40020440 	.word	0x40020440
 800a23c:	40020458 	.word	0x40020458
 800a240:	40020470 	.word	0x40020470
 800a244:	40020488 	.word	0x40020488
 800a248:	400204a0 	.word	0x400204a0
 800a24c:	400204b8 	.word	0x400204b8
 800a250:	58025408 	.word	0x58025408
 800a254:	5802541c 	.word	0x5802541c
 800a258:	58025430 	.word	0x58025430
 800a25c:	58025444 	.word	0x58025444
 800a260:	58025458 	.word	0x58025458
 800a264:	5802546c 	.word	0x5802546c
 800a268:	58025480 	.word	0x58025480
 800a26c:	58025494 	.word	0x58025494
 800a270:	2300      	movs	r3, #0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d028      	beq.n	800a2c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a284:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	2201      	movs	r2, #1
 800a296:	409a      	lsls	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a2a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a2c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop

0800a2f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08a      	sub	sp, #40	; 0x28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a300:	4b67      	ldr	r3, [pc, #412]	; (800a4a0 <HAL_DMA_IRQHandler+0x1ac>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a67      	ldr	r2, [pc, #412]	; (800a4a4 <HAL_DMA_IRQHandler+0x1b0>)
 800a306:	fba2 2303 	umull	r2, r3, r2, r3
 800a30a:	0a9b      	lsrs	r3, r3, #10
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a312:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a318:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a5f      	ldr	r2, [pc, #380]	; (800a4a8 <HAL_DMA_IRQHandler+0x1b4>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d04a      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a5d      	ldr	r2, [pc, #372]	; (800a4ac <HAL_DMA_IRQHandler+0x1b8>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d045      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a5c      	ldr	r2, [pc, #368]	; (800a4b0 <HAL_DMA_IRQHandler+0x1bc>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d040      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a5a      	ldr	r2, [pc, #360]	; (800a4b4 <HAL_DMA_IRQHandler+0x1c0>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d03b      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a59      	ldr	r2, [pc, #356]	; (800a4b8 <HAL_DMA_IRQHandler+0x1c4>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d036      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a57      	ldr	r2, [pc, #348]	; (800a4bc <HAL_DMA_IRQHandler+0x1c8>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d031      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a56      	ldr	r2, [pc, #344]	; (800a4c0 <HAL_DMA_IRQHandler+0x1cc>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d02c      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a54      	ldr	r2, [pc, #336]	; (800a4c4 <HAL_DMA_IRQHandler+0x1d0>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d027      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a53      	ldr	r2, [pc, #332]	; (800a4c8 <HAL_DMA_IRQHandler+0x1d4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d022      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a51      	ldr	r2, [pc, #324]	; (800a4cc <HAL_DMA_IRQHandler+0x1d8>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d01d      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a50      	ldr	r2, [pc, #320]	; (800a4d0 <HAL_DMA_IRQHandler+0x1dc>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d018      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a4e      	ldr	r2, [pc, #312]	; (800a4d4 <HAL_DMA_IRQHandler+0x1e0>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d013      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a4d      	ldr	r2, [pc, #308]	; (800a4d8 <HAL_DMA_IRQHandler+0x1e4>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00e      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a4b      	ldr	r2, [pc, #300]	; (800a4dc <HAL_DMA_IRQHandler+0x1e8>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d009      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a4a      	ldr	r2, [pc, #296]	; (800a4e0 <HAL_DMA_IRQHandler+0x1ec>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d004      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0xd2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a48      	ldr	r2, [pc, #288]	; (800a4e4 <HAL_DMA_IRQHandler+0x1f0>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d101      	bne.n	800a3ca <HAL_DMA_IRQHandler+0xd6>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e000      	b.n	800a3cc <HAL_DMA_IRQHandler+0xd8>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 842b 	beq.w	800ac28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d6:	f003 031f 	and.w	r3, r3, #31
 800a3da:	2208      	movs	r2, #8
 800a3dc:	409a      	lsls	r2, r3
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 80a2 	beq.w	800a52c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a2e      	ldr	r2, [pc, #184]	; (800a4a8 <HAL_DMA_IRQHandler+0x1b4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d04a      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a2d      	ldr	r2, [pc, #180]	; (800a4ac <HAL_DMA_IRQHandler+0x1b8>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d045      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a2b      	ldr	r2, [pc, #172]	; (800a4b0 <HAL_DMA_IRQHandler+0x1bc>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d040      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a2a      	ldr	r2, [pc, #168]	; (800a4b4 <HAL_DMA_IRQHandler+0x1c0>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d03b      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a28      	ldr	r2, [pc, #160]	; (800a4b8 <HAL_DMA_IRQHandler+0x1c4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d036      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a27      	ldr	r2, [pc, #156]	; (800a4bc <HAL_DMA_IRQHandler+0x1c8>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d031      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a25      	ldr	r2, [pc, #148]	; (800a4c0 <HAL_DMA_IRQHandler+0x1cc>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d02c      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a24      	ldr	r2, [pc, #144]	; (800a4c4 <HAL_DMA_IRQHandler+0x1d0>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d027      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a22      	ldr	r2, [pc, #136]	; (800a4c8 <HAL_DMA_IRQHandler+0x1d4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d022      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a21      	ldr	r2, [pc, #132]	; (800a4cc <HAL_DMA_IRQHandler+0x1d8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d01d      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a1f      	ldr	r2, [pc, #124]	; (800a4d0 <HAL_DMA_IRQHandler+0x1dc>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d018      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a1e      	ldr	r2, [pc, #120]	; (800a4d4 <HAL_DMA_IRQHandler+0x1e0>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d013      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1c      	ldr	r2, [pc, #112]	; (800a4d8 <HAL_DMA_IRQHandler+0x1e4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00e      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1b      	ldr	r2, [pc, #108]	; (800a4dc <HAL_DMA_IRQHandler+0x1e8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d009      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a19      	ldr	r2, [pc, #100]	; (800a4e0 <HAL_DMA_IRQHandler+0x1ec>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d004      	beq.n	800a488 <HAL_DMA_IRQHandler+0x194>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a18      	ldr	r2, [pc, #96]	; (800a4e4 <HAL_DMA_IRQHandler+0x1f0>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d12f      	bne.n	800a4e8 <HAL_DMA_IRQHandler+0x1f4>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0304 	and.w	r3, r3, #4
 800a492:	2b00      	cmp	r3, #0
 800a494:	bf14      	ite	ne
 800a496:	2301      	movne	r3, #1
 800a498:	2300      	moveq	r3, #0
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	e02e      	b.n	800a4fc <HAL_DMA_IRQHandler+0x208>
 800a49e:	bf00      	nop
 800a4a0:	240000c8 	.word	0x240000c8
 800a4a4:	1b4e81b5 	.word	0x1b4e81b5
 800a4a8:	40020010 	.word	0x40020010
 800a4ac:	40020028 	.word	0x40020028
 800a4b0:	40020040 	.word	0x40020040
 800a4b4:	40020058 	.word	0x40020058
 800a4b8:	40020070 	.word	0x40020070
 800a4bc:	40020088 	.word	0x40020088
 800a4c0:	400200a0 	.word	0x400200a0
 800a4c4:	400200b8 	.word	0x400200b8
 800a4c8:	40020410 	.word	0x40020410
 800a4cc:	40020428 	.word	0x40020428
 800a4d0:	40020440 	.word	0x40020440
 800a4d4:	40020458 	.word	0x40020458
 800a4d8:	40020470 	.word	0x40020470
 800a4dc:	40020488 	.word	0x40020488
 800a4e0:	400204a0 	.word	0x400204a0
 800a4e4:	400204b8 	.word	0x400204b8
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0308 	and.w	r3, r3, #8
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bf14      	ite	ne
 800a4f6:	2301      	movne	r3, #1
 800a4f8:	2300      	moveq	r3, #0
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d015      	beq.n	800a52c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0204 	bic.w	r2, r2, #4
 800a50e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a514:	f003 031f 	and.w	r3, r3, #31
 800a518:	2208      	movs	r2, #8
 800a51a:	409a      	lsls	r2, r3
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a524:	f043 0201 	orr.w	r2, r3, #1
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a530:	f003 031f 	and.w	r3, r3, #31
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	fa22 f303 	lsr.w	r3, r2, r3
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d06e      	beq.n	800a620 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a69      	ldr	r2, [pc, #420]	; (800a6ec <HAL_DMA_IRQHandler+0x3f8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d04a      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a67      	ldr	r2, [pc, #412]	; (800a6f0 <HAL_DMA_IRQHandler+0x3fc>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d045      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a66      	ldr	r2, [pc, #408]	; (800a6f4 <HAL_DMA_IRQHandler+0x400>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d040      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a64      	ldr	r2, [pc, #400]	; (800a6f8 <HAL_DMA_IRQHandler+0x404>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d03b      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a63      	ldr	r2, [pc, #396]	; (800a6fc <HAL_DMA_IRQHandler+0x408>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d036      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a61      	ldr	r2, [pc, #388]	; (800a700 <HAL_DMA_IRQHandler+0x40c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d031      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a60      	ldr	r2, [pc, #384]	; (800a704 <HAL_DMA_IRQHandler+0x410>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d02c      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a5e      	ldr	r2, [pc, #376]	; (800a708 <HAL_DMA_IRQHandler+0x414>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d027      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a5d      	ldr	r2, [pc, #372]	; (800a70c <HAL_DMA_IRQHandler+0x418>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d022      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a5b      	ldr	r2, [pc, #364]	; (800a710 <HAL_DMA_IRQHandler+0x41c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d01d      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a5a      	ldr	r2, [pc, #360]	; (800a714 <HAL_DMA_IRQHandler+0x420>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d018      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a58      	ldr	r2, [pc, #352]	; (800a718 <HAL_DMA_IRQHandler+0x424>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a57      	ldr	r2, [pc, #348]	; (800a71c <HAL_DMA_IRQHandler+0x428>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00e      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a55      	ldr	r2, [pc, #340]	; (800a720 <HAL_DMA_IRQHandler+0x42c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d009      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a54      	ldr	r2, [pc, #336]	; (800a724 <HAL_DMA_IRQHandler+0x430>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d004      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x2ee>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a52      	ldr	r2, [pc, #328]	; (800a728 <HAL_DMA_IRQHandler+0x434>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10a      	bne.n	800a5f8 <HAL_DMA_IRQHandler+0x304>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf14      	ite	ne
 800a5f0:	2301      	movne	r3, #1
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	e003      	b.n	800a600 <HAL_DMA_IRQHandler+0x30c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2300      	movs	r3, #0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00d      	beq.n	800a620 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a608:	f003 031f 	and.w	r3, r3, #31
 800a60c:	2201      	movs	r2, #1
 800a60e:	409a      	lsls	r2, r3
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a618:	f043 0202 	orr.w	r2, r3, #2
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a624:	f003 031f 	and.w	r3, r3, #31
 800a628:	2204      	movs	r2, #4
 800a62a:	409a      	lsls	r2, r3
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 808f 	beq.w	800a754 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a2c      	ldr	r2, [pc, #176]	; (800a6ec <HAL_DMA_IRQHandler+0x3f8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d04a      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a2a      	ldr	r2, [pc, #168]	; (800a6f0 <HAL_DMA_IRQHandler+0x3fc>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d045      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a29      	ldr	r2, [pc, #164]	; (800a6f4 <HAL_DMA_IRQHandler+0x400>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d040      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a27      	ldr	r2, [pc, #156]	; (800a6f8 <HAL_DMA_IRQHandler+0x404>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d03b      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a26      	ldr	r2, [pc, #152]	; (800a6fc <HAL_DMA_IRQHandler+0x408>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d036      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a24      	ldr	r2, [pc, #144]	; (800a700 <HAL_DMA_IRQHandler+0x40c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d031      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a23      	ldr	r2, [pc, #140]	; (800a704 <HAL_DMA_IRQHandler+0x410>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d02c      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a21      	ldr	r2, [pc, #132]	; (800a708 <HAL_DMA_IRQHandler+0x414>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d027      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a20      	ldr	r2, [pc, #128]	; (800a70c <HAL_DMA_IRQHandler+0x418>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d022      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1e      	ldr	r2, [pc, #120]	; (800a710 <HAL_DMA_IRQHandler+0x41c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d01d      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a1d      	ldr	r2, [pc, #116]	; (800a714 <HAL_DMA_IRQHandler+0x420>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d018      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a1b      	ldr	r2, [pc, #108]	; (800a718 <HAL_DMA_IRQHandler+0x424>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d013      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a1a      	ldr	r2, [pc, #104]	; (800a71c <HAL_DMA_IRQHandler+0x428>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d00e      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a18      	ldr	r2, [pc, #96]	; (800a720 <HAL_DMA_IRQHandler+0x42c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d009      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a17      	ldr	r2, [pc, #92]	; (800a724 <HAL_DMA_IRQHandler+0x430>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d004      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x3e2>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a15      	ldr	r2, [pc, #84]	; (800a728 <HAL_DMA_IRQHandler+0x434>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d12a      	bne.n	800a72c <HAL_DMA_IRQHandler+0x438>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bf14      	ite	ne
 800a6e4:	2301      	movne	r3, #1
 800a6e6:	2300      	moveq	r3, #0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	e023      	b.n	800a734 <HAL_DMA_IRQHandler+0x440>
 800a6ec:	40020010 	.word	0x40020010
 800a6f0:	40020028 	.word	0x40020028
 800a6f4:	40020040 	.word	0x40020040
 800a6f8:	40020058 	.word	0x40020058
 800a6fc:	40020070 	.word	0x40020070
 800a700:	40020088 	.word	0x40020088
 800a704:	400200a0 	.word	0x400200a0
 800a708:	400200b8 	.word	0x400200b8
 800a70c:	40020410 	.word	0x40020410
 800a710:	40020428 	.word	0x40020428
 800a714:	40020440 	.word	0x40020440
 800a718:	40020458 	.word	0x40020458
 800a71c:	40020470 	.word	0x40020470
 800a720:	40020488 	.word	0x40020488
 800a724:	400204a0 	.word	0x400204a0
 800a728:	400204b8 	.word	0x400204b8
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2300      	movs	r3, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00d      	beq.n	800a754 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a73c:	f003 031f 	and.w	r3, r3, #31
 800a740:	2204      	movs	r2, #4
 800a742:	409a      	lsls	r2, r3
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74c:	f043 0204 	orr.w	r2, r3, #4
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a758:	f003 031f 	and.w	r3, r3, #31
 800a75c:	2210      	movs	r2, #16
 800a75e:	409a      	lsls	r2, r3
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	4013      	ands	r3, r2
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 80a6 	beq.w	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a85      	ldr	r2, [pc, #532]	; (800a984 <HAL_DMA_IRQHandler+0x690>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d04a      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a83      	ldr	r2, [pc, #524]	; (800a988 <HAL_DMA_IRQHandler+0x694>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d045      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a82      	ldr	r2, [pc, #520]	; (800a98c <HAL_DMA_IRQHandler+0x698>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d040      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a80      	ldr	r2, [pc, #512]	; (800a990 <HAL_DMA_IRQHandler+0x69c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d03b      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a7f      	ldr	r2, [pc, #508]	; (800a994 <HAL_DMA_IRQHandler+0x6a0>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d036      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a7d      	ldr	r2, [pc, #500]	; (800a998 <HAL_DMA_IRQHandler+0x6a4>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d031      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a7c      	ldr	r2, [pc, #496]	; (800a99c <HAL_DMA_IRQHandler+0x6a8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d02c      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a7a      	ldr	r2, [pc, #488]	; (800a9a0 <HAL_DMA_IRQHandler+0x6ac>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d027      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a79      	ldr	r2, [pc, #484]	; (800a9a4 <HAL_DMA_IRQHandler+0x6b0>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d022      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a77      	ldr	r2, [pc, #476]	; (800a9a8 <HAL_DMA_IRQHandler+0x6b4>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d01d      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a76      	ldr	r2, [pc, #472]	; (800a9ac <HAL_DMA_IRQHandler+0x6b8>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d018      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a74      	ldr	r2, [pc, #464]	; (800a9b0 <HAL_DMA_IRQHandler+0x6bc>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a73      	ldr	r2, [pc, #460]	; (800a9b4 <HAL_DMA_IRQHandler+0x6c0>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00e      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a71      	ldr	r2, [pc, #452]	; (800a9b8 <HAL_DMA_IRQHandler+0x6c4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d009      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a70      	ldr	r2, [pc, #448]	; (800a9bc <HAL_DMA_IRQHandler+0x6c8>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d004      	beq.n	800a80a <HAL_DMA_IRQHandler+0x516>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a6e      	ldr	r2, [pc, #440]	; (800a9c0 <HAL_DMA_IRQHandler+0x6cc>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d10a      	bne.n	800a820 <HAL_DMA_IRQHandler+0x52c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0308 	and.w	r3, r3, #8
 800a814:	2b00      	cmp	r3, #0
 800a816:	bf14      	ite	ne
 800a818:	2301      	movne	r3, #1
 800a81a:	2300      	moveq	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	e009      	b.n	800a834 <HAL_DMA_IRQHandler+0x540>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bf14      	ite	ne
 800a82e:	2301      	movne	r3, #1
 800a830:	2300      	moveq	r3, #0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d03e      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83c:	f003 031f 	and.w	r3, r3, #31
 800a840:	2210      	movs	r2, #16
 800a842:	409a      	lsls	r2, r3
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d018      	beq.n	800a888 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d108      	bne.n	800a876 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d024      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
 800a874:	e01f      	b.n	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01b      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
 800a886:	e016      	b.n	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a892:	2b00      	cmp	r3, #0
 800a894:	d107      	bne.n	800a8a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0208 	bic.w	r2, r2, #8
 800a8a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ba:	f003 031f 	and.w	r3, r3, #31
 800a8be:	2220      	movs	r2, #32
 800a8c0:	409a      	lsls	r2, r3
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 8110 	beq.w	800aaec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a2c      	ldr	r2, [pc, #176]	; (800a984 <HAL_DMA_IRQHandler+0x690>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d04a      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a2b      	ldr	r2, [pc, #172]	; (800a988 <HAL_DMA_IRQHandler+0x694>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d045      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a29      	ldr	r2, [pc, #164]	; (800a98c <HAL_DMA_IRQHandler+0x698>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d040      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a28      	ldr	r2, [pc, #160]	; (800a990 <HAL_DMA_IRQHandler+0x69c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d03b      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a26      	ldr	r2, [pc, #152]	; (800a994 <HAL_DMA_IRQHandler+0x6a0>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d036      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a25      	ldr	r2, [pc, #148]	; (800a998 <HAL_DMA_IRQHandler+0x6a4>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d031      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a23      	ldr	r2, [pc, #140]	; (800a99c <HAL_DMA_IRQHandler+0x6a8>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d02c      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a22      	ldr	r2, [pc, #136]	; (800a9a0 <HAL_DMA_IRQHandler+0x6ac>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d027      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a20      	ldr	r2, [pc, #128]	; (800a9a4 <HAL_DMA_IRQHandler+0x6b0>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d022      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <HAL_DMA_IRQHandler+0x6b4>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d01d      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1d      	ldr	r2, [pc, #116]	; (800a9ac <HAL_DMA_IRQHandler+0x6b8>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d018      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1c      	ldr	r2, [pc, #112]	; (800a9b0 <HAL_DMA_IRQHandler+0x6bc>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d013      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a1a      	ldr	r2, [pc, #104]	; (800a9b4 <HAL_DMA_IRQHandler+0x6c0>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00e      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a19      	ldr	r2, [pc, #100]	; (800a9b8 <HAL_DMA_IRQHandler+0x6c4>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d009      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a17      	ldr	r2, [pc, #92]	; (800a9bc <HAL_DMA_IRQHandler+0x6c8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d004      	beq.n	800a96c <HAL_DMA_IRQHandler+0x678>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a16      	ldr	r2, [pc, #88]	; (800a9c0 <HAL_DMA_IRQHandler+0x6cc>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d12b      	bne.n	800a9c4 <HAL_DMA_IRQHandler+0x6d0>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0310 	and.w	r3, r3, #16
 800a976:	2b00      	cmp	r3, #0
 800a978:	bf14      	ite	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	2300      	moveq	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	e02a      	b.n	800a9d8 <HAL_DMA_IRQHandler+0x6e4>
 800a982:	bf00      	nop
 800a984:	40020010 	.word	0x40020010
 800a988:	40020028 	.word	0x40020028
 800a98c:	40020040 	.word	0x40020040
 800a990:	40020058 	.word	0x40020058
 800a994:	40020070 	.word	0x40020070
 800a998:	40020088 	.word	0x40020088
 800a99c:	400200a0 	.word	0x400200a0
 800a9a0:	400200b8 	.word	0x400200b8
 800a9a4:	40020410 	.word	0x40020410
 800a9a8:	40020428 	.word	0x40020428
 800a9ac:	40020440 	.word	0x40020440
 800a9b0:	40020458 	.word	0x40020458
 800a9b4:	40020470 	.word	0x40020470
 800a9b8:	40020488 	.word	0x40020488
 800a9bc:	400204a0 	.word	0x400204a0
 800a9c0:	400204b8 	.word	0x400204b8
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bf14      	ite	ne
 800a9d2:	2301      	movne	r3, #1
 800a9d4:	2300      	moveq	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 8087 	beq.w	800aaec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e2:	f003 031f 	and.w	r3, r3, #31
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	409a      	lsls	r2, r3
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d139      	bne.n	800aa6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0216 	bic.w	r2, r2, #22
 800aa08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	695a      	ldr	r2, [r3, #20]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d103      	bne.n	800aa2a <HAL_DMA_IRQHandler+0x736>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f022 0208 	bic.w	r2, r2, #8
 800aa38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3e:	f003 031f 	and.w	r3, r3, #31
 800aa42:	223f      	movs	r2, #63	; 0x3f
 800aa44:	409a      	lsls	r2, r3
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 834a 	beq.w	800b0f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
          }
          return;
 800aa6c:	e344      	b.n	800b0f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d018      	beq.n	800aaae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d02c      	beq.n	800aaec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	4798      	blx	r3
 800aa9a:	e027      	b.n	800aaec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d023      	beq.n	800aaec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	4798      	blx	r3
 800aaac:	e01e      	b.n	800aaec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10f      	bne.n	800aadc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f022 0210 	bic.w	r2, r2, #16
 800aaca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8306 	beq.w	800b102 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f000 8088 	beq.w	800ac14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2204      	movs	r2, #4
 800ab08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a7a      	ldr	r2, [pc, #488]	; (800acfc <HAL_DMA_IRQHandler+0xa08>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d04a      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a79      	ldr	r2, [pc, #484]	; (800ad00 <HAL_DMA_IRQHandler+0xa0c>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d045      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a77      	ldr	r2, [pc, #476]	; (800ad04 <HAL_DMA_IRQHandler+0xa10>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d040      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a76      	ldr	r2, [pc, #472]	; (800ad08 <HAL_DMA_IRQHandler+0xa14>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d03b      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a74      	ldr	r2, [pc, #464]	; (800ad0c <HAL_DMA_IRQHandler+0xa18>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d036      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a73      	ldr	r2, [pc, #460]	; (800ad10 <HAL_DMA_IRQHandler+0xa1c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d031      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a71      	ldr	r2, [pc, #452]	; (800ad14 <HAL_DMA_IRQHandler+0xa20>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d02c      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a70      	ldr	r2, [pc, #448]	; (800ad18 <HAL_DMA_IRQHandler+0xa24>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d027      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a6e      	ldr	r2, [pc, #440]	; (800ad1c <HAL_DMA_IRQHandler+0xa28>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d022      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a6d      	ldr	r2, [pc, #436]	; (800ad20 <HAL_DMA_IRQHandler+0xa2c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d01d      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a6b      	ldr	r2, [pc, #428]	; (800ad24 <HAL_DMA_IRQHandler+0xa30>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d018      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a6a      	ldr	r2, [pc, #424]	; (800ad28 <HAL_DMA_IRQHandler+0xa34>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d013      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a68      	ldr	r2, [pc, #416]	; (800ad2c <HAL_DMA_IRQHandler+0xa38>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00e      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a67      	ldr	r2, [pc, #412]	; (800ad30 <HAL_DMA_IRQHandler+0xa3c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d009      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a65      	ldr	r2, [pc, #404]	; (800ad34 <HAL_DMA_IRQHandler+0xa40>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d004      	beq.n	800abac <HAL_DMA_IRQHandler+0x8b8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a64      	ldr	r2, [pc, #400]	; (800ad38 <HAL_DMA_IRQHandler+0xa44>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d108      	bne.n	800abbe <HAL_DMA_IRQHandler+0x8ca>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0201 	bic.w	r2, r2, #1
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	e007      	b.n	800abce <HAL_DMA_IRQHandler+0x8da>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0201 	bic.w	r2, r2, #1
 800abcc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3301      	adds	r3, #1
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d307      	bcc.n	800abea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1f2      	bne.n	800abce <HAL_DMA_IRQHandler+0x8da>
 800abe8:	e000      	b.n	800abec <HAL_DMA_IRQHandler+0x8f8>
            break;
 800abea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d004      	beq.n	800ac04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2203      	movs	r2, #3
 800abfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800ac02:	e003      	b.n	800ac0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 8272 	beq.w	800b102 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
 800ac26:	e26c      	b.n	800b102 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a43      	ldr	r2, [pc, #268]	; (800ad3c <HAL_DMA_IRQHandler+0xa48>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d022      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a42      	ldr	r2, [pc, #264]	; (800ad40 <HAL_DMA_IRQHandler+0xa4c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d01d      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a40      	ldr	r2, [pc, #256]	; (800ad44 <HAL_DMA_IRQHandler+0xa50>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d018      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a3f      	ldr	r2, [pc, #252]	; (800ad48 <HAL_DMA_IRQHandler+0xa54>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d013      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a3d      	ldr	r2, [pc, #244]	; (800ad4c <HAL_DMA_IRQHandler+0xa58>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d00e      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a3c      	ldr	r2, [pc, #240]	; (800ad50 <HAL_DMA_IRQHandler+0xa5c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d009      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a3a      	ldr	r2, [pc, #232]	; (800ad54 <HAL_DMA_IRQHandler+0xa60>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d004      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x984>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a39      	ldr	r2, [pc, #228]	; (800ad58 <HAL_DMA_IRQHandler+0xa64>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d101      	bne.n	800ac7c <HAL_DMA_IRQHandler+0x988>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e000      	b.n	800ac7e <HAL_DMA_IRQHandler+0x98a>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 823f 	beq.w	800b102 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	2204      	movs	r2, #4
 800ac96:	409a      	lsls	r2, r3
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80cd 	beq.w	800ae3c <HAL_DMA_IRQHandler+0xb48>
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 80c7 	beq.w	800ae3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb2:	f003 031f 	and.w	r3, r3, #31
 800acb6:	2204      	movs	r2, #4
 800acb8:	409a      	lsls	r2, r3
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d049      	beq.n	800ad5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d109      	bne.n	800ace6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8210 	beq.w	800b0fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ace4:	e20a      	b.n	800b0fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 8206 	beq.w	800b0fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acf8:	e200      	b.n	800b0fc <HAL_DMA_IRQHandler+0xe08>
 800acfa:	bf00      	nop
 800acfc:	40020010 	.word	0x40020010
 800ad00:	40020028 	.word	0x40020028
 800ad04:	40020040 	.word	0x40020040
 800ad08:	40020058 	.word	0x40020058
 800ad0c:	40020070 	.word	0x40020070
 800ad10:	40020088 	.word	0x40020088
 800ad14:	400200a0 	.word	0x400200a0
 800ad18:	400200b8 	.word	0x400200b8
 800ad1c:	40020410 	.word	0x40020410
 800ad20:	40020428 	.word	0x40020428
 800ad24:	40020440 	.word	0x40020440
 800ad28:	40020458 	.word	0x40020458
 800ad2c:	40020470 	.word	0x40020470
 800ad30:	40020488 	.word	0x40020488
 800ad34:	400204a0 	.word	0x400204a0
 800ad38:	400204b8 	.word	0x400204b8
 800ad3c:	58025408 	.word	0x58025408
 800ad40:	5802541c 	.word	0x5802541c
 800ad44:	58025430 	.word	0x58025430
 800ad48:	58025444 	.word	0x58025444
 800ad4c:	58025458 	.word	0x58025458
 800ad50:	5802546c 	.word	0x5802546c
 800ad54:	58025480 	.word	0x58025480
 800ad58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d160      	bne.n	800ae28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a7f      	ldr	r2, [pc, #508]	; (800af68 <HAL_DMA_IRQHandler+0xc74>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d04a      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a7d      	ldr	r2, [pc, #500]	; (800af6c <HAL_DMA_IRQHandler+0xc78>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d045      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a7c      	ldr	r2, [pc, #496]	; (800af70 <HAL_DMA_IRQHandler+0xc7c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d040      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a7a      	ldr	r2, [pc, #488]	; (800af74 <HAL_DMA_IRQHandler+0xc80>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d03b      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a79      	ldr	r2, [pc, #484]	; (800af78 <HAL_DMA_IRQHandler+0xc84>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d036      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a77      	ldr	r2, [pc, #476]	; (800af7c <HAL_DMA_IRQHandler+0xc88>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d031      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a76      	ldr	r2, [pc, #472]	; (800af80 <HAL_DMA_IRQHandler+0xc8c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d02c      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a74      	ldr	r2, [pc, #464]	; (800af84 <HAL_DMA_IRQHandler+0xc90>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d027      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a73      	ldr	r2, [pc, #460]	; (800af88 <HAL_DMA_IRQHandler+0xc94>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d022      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a71      	ldr	r2, [pc, #452]	; (800af8c <HAL_DMA_IRQHandler+0xc98>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d01d      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a70      	ldr	r2, [pc, #448]	; (800af90 <HAL_DMA_IRQHandler+0xc9c>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d018      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a6e      	ldr	r2, [pc, #440]	; (800af94 <HAL_DMA_IRQHandler+0xca0>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d013      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a6d      	ldr	r2, [pc, #436]	; (800af98 <HAL_DMA_IRQHandler+0xca4>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d00e      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a6b      	ldr	r2, [pc, #428]	; (800af9c <HAL_DMA_IRQHandler+0xca8>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d009      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a6a      	ldr	r2, [pc, #424]	; (800afa0 <HAL_DMA_IRQHandler+0xcac>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d004      	beq.n	800ae06 <HAL_DMA_IRQHandler+0xb12>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a68      	ldr	r2, [pc, #416]	; (800afa4 <HAL_DMA_IRQHandler+0xcb0>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d108      	bne.n	800ae18 <HAL_DMA_IRQHandler+0xb24>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0208 	bic.w	r2, r2, #8
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e007      	b.n	800ae28 <HAL_DMA_IRQHandler+0xb34>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0204 	bic.w	r2, r2, #4
 800ae26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 8165 	beq.w	800b0fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae3a:	e15f      	b.n	800b0fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae40:	f003 031f 	and.w	r3, r3, #31
 800ae44:	2202      	movs	r2, #2
 800ae46:	409a      	lsls	r2, r3
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 80c5 	beq.w	800afdc <HAL_DMA_IRQHandler+0xce8>
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f003 0302 	and.w	r3, r3, #2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 80bf 	beq.w	800afdc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae62:	f003 031f 	and.w	r3, r3, #31
 800ae66:	2202      	movs	r2, #2
 800ae68:	409a      	lsls	r2, r3
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d018      	beq.n	800aeaa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d109      	bne.n	800ae96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 813a 	beq.w	800b100 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae94:	e134      	b.n	800b100 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 8130 	beq.w	800b100 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aea8:	e12a      	b.n	800b100 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f040 8089 	bne.w	800afc8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a2b      	ldr	r2, [pc, #172]	; (800af68 <HAL_DMA_IRQHandler+0xc74>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d04a      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a29      	ldr	r2, [pc, #164]	; (800af6c <HAL_DMA_IRQHandler+0xc78>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d045      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a28      	ldr	r2, [pc, #160]	; (800af70 <HAL_DMA_IRQHandler+0xc7c>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d040      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a26      	ldr	r2, [pc, #152]	; (800af74 <HAL_DMA_IRQHandler+0xc80>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d03b      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a25      	ldr	r2, [pc, #148]	; (800af78 <HAL_DMA_IRQHandler+0xc84>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d036      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a23      	ldr	r2, [pc, #140]	; (800af7c <HAL_DMA_IRQHandler+0xc88>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d031      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a22      	ldr	r2, [pc, #136]	; (800af80 <HAL_DMA_IRQHandler+0xc8c>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d02c      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a20      	ldr	r2, [pc, #128]	; (800af84 <HAL_DMA_IRQHandler+0xc90>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d027      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a1f      	ldr	r2, [pc, #124]	; (800af88 <HAL_DMA_IRQHandler+0xc94>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d022      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a1d      	ldr	r2, [pc, #116]	; (800af8c <HAL_DMA_IRQHandler+0xc98>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d01d      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a1c      	ldr	r2, [pc, #112]	; (800af90 <HAL_DMA_IRQHandler+0xc9c>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d018      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1a      	ldr	r2, [pc, #104]	; (800af94 <HAL_DMA_IRQHandler+0xca0>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d013      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a19      	ldr	r2, [pc, #100]	; (800af98 <HAL_DMA_IRQHandler+0xca4>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00e      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a17      	ldr	r2, [pc, #92]	; (800af9c <HAL_DMA_IRQHandler+0xca8>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d009      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a16      	ldr	r2, [pc, #88]	; (800afa0 <HAL_DMA_IRQHandler+0xcac>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d004      	beq.n	800af56 <HAL_DMA_IRQHandler+0xc62>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a14      	ldr	r2, [pc, #80]	; (800afa4 <HAL_DMA_IRQHandler+0xcb0>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d128      	bne.n	800afa8 <HAL_DMA_IRQHandler+0xcb4>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0214 	bic.w	r2, r2, #20
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e027      	b.n	800afb8 <HAL_DMA_IRQHandler+0xcc4>
 800af68:	40020010 	.word	0x40020010
 800af6c:	40020028 	.word	0x40020028
 800af70:	40020040 	.word	0x40020040
 800af74:	40020058 	.word	0x40020058
 800af78:	40020070 	.word	0x40020070
 800af7c:	40020088 	.word	0x40020088
 800af80:	400200a0 	.word	0x400200a0
 800af84:	400200b8 	.word	0x400200b8
 800af88:	40020410 	.word	0x40020410
 800af8c:	40020428 	.word	0x40020428
 800af90:	40020440 	.word	0x40020440
 800af94:	40020458 	.word	0x40020458
 800af98:	40020470 	.word	0x40020470
 800af9c:	40020488 	.word	0x40020488
 800afa0:	400204a0 	.word	0x400204a0
 800afa4:	400204b8 	.word	0x400204b8
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 020a 	bic.w	r2, r2, #10
 800afb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8097 	beq.w	800b100 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800afda:	e091      	b.n	800b100 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afe0:	f003 031f 	and.w	r3, r3, #31
 800afe4:	2208      	movs	r2, #8
 800afe6:	409a      	lsls	r2, r3
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	4013      	ands	r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 8088 	beq.w	800b102 <HAL_DMA_IRQHandler+0xe0e>
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f003 0308 	and.w	r3, r3, #8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8082 	beq.w	800b102 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a41      	ldr	r2, [pc, #260]	; (800b108 <HAL_DMA_IRQHandler+0xe14>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d04a      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a3f      	ldr	r2, [pc, #252]	; (800b10c <HAL_DMA_IRQHandler+0xe18>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d045      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a3e      	ldr	r2, [pc, #248]	; (800b110 <HAL_DMA_IRQHandler+0xe1c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d040      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a3c      	ldr	r2, [pc, #240]	; (800b114 <HAL_DMA_IRQHandler+0xe20>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d03b      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a3b      	ldr	r2, [pc, #236]	; (800b118 <HAL_DMA_IRQHandler+0xe24>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d036      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a39      	ldr	r2, [pc, #228]	; (800b11c <HAL_DMA_IRQHandler+0xe28>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d031      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a38      	ldr	r2, [pc, #224]	; (800b120 <HAL_DMA_IRQHandler+0xe2c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d02c      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a36      	ldr	r2, [pc, #216]	; (800b124 <HAL_DMA_IRQHandler+0xe30>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d027      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a35      	ldr	r2, [pc, #212]	; (800b128 <HAL_DMA_IRQHandler+0xe34>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d022      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a33      	ldr	r2, [pc, #204]	; (800b12c <HAL_DMA_IRQHandler+0xe38>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d01d      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a32      	ldr	r2, [pc, #200]	; (800b130 <HAL_DMA_IRQHandler+0xe3c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d018      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a30      	ldr	r2, [pc, #192]	; (800b134 <HAL_DMA_IRQHandler+0xe40>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d013      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a2f      	ldr	r2, [pc, #188]	; (800b138 <HAL_DMA_IRQHandler+0xe44>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d00e      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a2d      	ldr	r2, [pc, #180]	; (800b13c <HAL_DMA_IRQHandler+0xe48>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d009      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a2c      	ldr	r2, [pc, #176]	; (800b140 <HAL_DMA_IRQHandler+0xe4c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d004      	beq.n	800b09e <HAL_DMA_IRQHandler+0xdaa>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a2a      	ldr	r2, [pc, #168]	; (800b144 <HAL_DMA_IRQHandler+0xe50>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d108      	bne.n	800b0b0 <HAL_DMA_IRQHandler+0xdbc>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 021c 	bic.w	r2, r2, #28
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	e007      	b.n	800b0c0 <HAL_DMA_IRQHandler+0xdcc>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 020e 	bic.w	r2, r2, #14
 800b0be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c4:	f003 031f 	and.w	r3, r3, #31
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	409a      	lsls	r2, r3
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d009      	beq.n	800b102 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	4798      	blx	r3
 800b0f6:	e004      	b.n	800b102 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b0f8:	bf00      	nop
 800b0fa:	e002      	b.n	800b102 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0fc:	bf00      	nop
 800b0fe:	e000      	b.n	800b102 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b100:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b102:	3728      	adds	r7, #40	; 0x28
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	40020010 	.word	0x40020010
 800b10c:	40020028 	.word	0x40020028
 800b110:	40020040 	.word	0x40020040
 800b114:	40020058 	.word	0x40020058
 800b118:	40020070 	.word	0x40020070
 800b11c:	40020088 	.word	0x40020088
 800b120:	400200a0 	.word	0x400200a0
 800b124:	400200b8 	.word	0x400200b8
 800b128:	40020410 	.word	0x40020410
 800b12c:	40020428 	.word	0x40020428
 800b130:	40020440 	.word	0x40020440
 800b134:	40020458 	.word	0x40020458
 800b138:	40020470 	.word	0x40020470
 800b13c:	40020488 	.word	0x40020488
 800b140:	400204a0 	.word	0x400204a0
 800b144:	400204b8 	.word	0x400204b8

0800b148 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b156:	b2db      	uxtb	r3, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b194:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a7f      	ldr	r2, [pc, #508]	; (800b398 <DMA_SetConfig+0x21c>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d072      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a7d      	ldr	r2, [pc, #500]	; (800b39c <DMA_SetConfig+0x220>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d06d      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a7c      	ldr	r2, [pc, #496]	; (800b3a0 <DMA_SetConfig+0x224>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d068      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a7a      	ldr	r2, [pc, #488]	; (800b3a4 <DMA_SetConfig+0x228>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d063      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a79      	ldr	r2, [pc, #484]	; (800b3a8 <DMA_SetConfig+0x22c>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d05e      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a77      	ldr	r2, [pc, #476]	; (800b3ac <DMA_SetConfig+0x230>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d059      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a76      	ldr	r2, [pc, #472]	; (800b3b0 <DMA_SetConfig+0x234>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d054      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a74      	ldr	r2, [pc, #464]	; (800b3b4 <DMA_SetConfig+0x238>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d04f      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a73      	ldr	r2, [pc, #460]	; (800b3b8 <DMA_SetConfig+0x23c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d04a      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a71      	ldr	r2, [pc, #452]	; (800b3bc <DMA_SetConfig+0x240>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d045      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a70      	ldr	r2, [pc, #448]	; (800b3c0 <DMA_SetConfig+0x244>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d040      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a6e      	ldr	r2, [pc, #440]	; (800b3c4 <DMA_SetConfig+0x248>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d03b      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a6d      	ldr	r2, [pc, #436]	; (800b3c8 <DMA_SetConfig+0x24c>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d036      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a6b      	ldr	r2, [pc, #428]	; (800b3cc <DMA_SetConfig+0x250>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d031      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a6a      	ldr	r2, [pc, #424]	; (800b3d0 <DMA_SetConfig+0x254>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d02c      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a68      	ldr	r2, [pc, #416]	; (800b3d4 <DMA_SetConfig+0x258>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d027      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a67      	ldr	r2, [pc, #412]	; (800b3d8 <DMA_SetConfig+0x25c>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d022      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a65      	ldr	r2, [pc, #404]	; (800b3dc <DMA_SetConfig+0x260>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d01d      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a64      	ldr	r2, [pc, #400]	; (800b3e0 <DMA_SetConfig+0x264>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d018      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a62      	ldr	r2, [pc, #392]	; (800b3e4 <DMA_SetConfig+0x268>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d013      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a61      	ldr	r2, [pc, #388]	; (800b3e8 <DMA_SetConfig+0x26c>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d00e      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a5f      	ldr	r2, [pc, #380]	; (800b3ec <DMA_SetConfig+0x270>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d009      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a5e      	ldr	r2, [pc, #376]	; (800b3f0 <DMA_SetConfig+0x274>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d004      	beq.n	800b286 <DMA_SetConfig+0x10a>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a5c      	ldr	r2, [pc, #368]	; (800b3f4 <DMA_SetConfig+0x278>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d101      	bne.n	800b28a <DMA_SetConfig+0x10e>
 800b286:	2301      	movs	r3, #1
 800b288:	e000      	b.n	800b28c <DMA_SetConfig+0x110>
 800b28a:	2300      	movs	r3, #0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00d      	beq.n	800b2ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b298:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b2aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a39      	ldr	r2, [pc, #228]	; (800b398 <DMA_SetConfig+0x21c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d04a      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a38      	ldr	r2, [pc, #224]	; (800b39c <DMA_SetConfig+0x220>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d045      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a36      	ldr	r2, [pc, #216]	; (800b3a0 <DMA_SetConfig+0x224>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d040      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a35      	ldr	r2, [pc, #212]	; (800b3a4 <DMA_SetConfig+0x228>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d03b      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a33      	ldr	r2, [pc, #204]	; (800b3a8 <DMA_SetConfig+0x22c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d036      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a32      	ldr	r2, [pc, #200]	; (800b3ac <DMA_SetConfig+0x230>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d031      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a30      	ldr	r2, [pc, #192]	; (800b3b0 <DMA_SetConfig+0x234>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d02c      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a2f      	ldr	r2, [pc, #188]	; (800b3b4 <DMA_SetConfig+0x238>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d027      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a2d      	ldr	r2, [pc, #180]	; (800b3b8 <DMA_SetConfig+0x23c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d022      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a2c      	ldr	r2, [pc, #176]	; (800b3bc <DMA_SetConfig+0x240>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d01d      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a2a      	ldr	r2, [pc, #168]	; (800b3c0 <DMA_SetConfig+0x244>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d018      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a29      	ldr	r2, [pc, #164]	; (800b3c4 <DMA_SetConfig+0x248>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d013      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a27      	ldr	r2, [pc, #156]	; (800b3c8 <DMA_SetConfig+0x24c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00e      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a26      	ldr	r2, [pc, #152]	; (800b3cc <DMA_SetConfig+0x250>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d009      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a24      	ldr	r2, [pc, #144]	; (800b3d0 <DMA_SetConfig+0x254>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d004      	beq.n	800b34c <DMA_SetConfig+0x1d0>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a23      	ldr	r2, [pc, #140]	; (800b3d4 <DMA_SetConfig+0x258>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d101      	bne.n	800b350 <DMA_SetConfig+0x1d4>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e000      	b.n	800b352 <DMA_SetConfig+0x1d6>
 800b350:	2300      	movs	r3, #0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d059      	beq.n	800b40a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b35a:	f003 031f 	and.w	r3, r3, #31
 800b35e:	223f      	movs	r2, #63	; 0x3f
 800b360:	409a      	lsls	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b374:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b40      	cmp	r3, #64	; 0x40
 800b384:	d138      	bne.n	800b3f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b396:	e086      	b.n	800b4a6 <DMA_SetConfig+0x32a>
 800b398:	40020010 	.word	0x40020010
 800b39c:	40020028 	.word	0x40020028
 800b3a0:	40020040 	.word	0x40020040
 800b3a4:	40020058 	.word	0x40020058
 800b3a8:	40020070 	.word	0x40020070
 800b3ac:	40020088 	.word	0x40020088
 800b3b0:	400200a0 	.word	0x400200a0
 800b3b4:	400200b8 	.word	0x400200b8
 800b3b8:	40020410 	.word	0x40020410
 800b3bc:	40020428 	.word	0x40020428
 800b3c0:	40020440 	.word	0x40020440
 800b3c4:	40020458 	.word	0x40020458
 800b3c8:	40020470 	.word	0x40020470
 800b3cc:	40020488 	.word	0x40020488
 800b3d0:	400204a0 	.word	0x400204a0
 800b3d4:	400204b8 	.word	0x400204b8
 800b3d8:	58025408 	.word	0x58025408
 800b3dc:	5802541c 	.word	0x5802541c
 800b3e0:	58025430 	.word	0x58025430
 800b3e4:	58025444 	.word	0x58025444
 800b3e8:	58025458 	.word	0x58025458
 800b3ec:	5802546c 	.word	0x5802546c
 800b3f0:	58025480 	.word	0x58025480
 800b3f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	60da      	str	r2, [r3, #12]
}
 800b408:	e04d      	b.n	800b4a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a29      	ldr	r2, [pc, #164]	; (800b4b4 <DMA_SetConfig+0x338>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d022      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a27      	ldr	r2, [pc, #156]	; (800b4b8 <DMA_SetConfig+0x33c>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d01d      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a26      	ldr	r2, [pc, #152]	; (800b4bc <DMA_SetConfig+0x340>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d018      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a24      	ldr	r2, [pc, #144]	; (800b4c0 <DMA_SetConfig+0x344>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d013      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a23      	ldr	r2, [pc, #140]	; (800b4c4 <DMA_SetConfig+0x348>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00e      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a21      	ldr	r2, [pc, #132]	; (800b4c8 <DMA_SetConfig+0x34c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d009      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a20      	ldr	r2, [pc, #128]	; (800b4cc <DMA_SetConfig+0x350>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d004      	beq.n	800b45a <DMA_SetConfig+0x2de>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a1e      	ldr	r2, [pc, #120]	; (800b4d0 <DMA_SetConfig+0x354>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d101      	bne.n	800b45e <DMA_SetConfig+0x2e2>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e000      	b.n	800b460 <DMA_SetConfig+0x2e4>
 800b45e:	2300      	movs	r3, #0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d020      	beq.n	800b4a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b468:	f003 031f 	and.w	r3, r3, #31
 800b46c:	2201      	movs	r2, #1
 800b46e:	409a      	lsls	r2, r3
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	2b40      	cmp	r3, #64	; 0x40
 800b482:	d108      	bne.n	800b496 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	60da      	str	r2, [r3, #12]
}
 800b494:	e007      	b.n	800b4a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	60da      	str	r2, [r3, #12]
}
 800b4a6:	bf00      	nop
 800b4a8:	371c      	adds	r7, #28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	58025408 	.word	0x58025408
 800b4b8:	5802541c 	.word	0x5802541c
 800b4bc:	58025430 	.word	0x58025430
 800b4c0:	58025444 	.word	0x58025444
 800b4c4:	58025458 	.word	0x58025458
 800b4c8:	5802546c 	.word	0x5802546c
 800b4cc:	58025480 	.word	0x58025480
 800b4d0:	58025494 	.word	0x58025494

0800b4d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a42      	ldr	r2, [pc, #264]	; (800b5ec <DMA_CalcBaseAndBitshift+0x118>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d04a      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a41      	ldr	r2, [pc, #260]	; (800b5f0 <DMA_CalcBaseAndBitshift+0x11c>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d045      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a3f      	ldr	r2, [pc, #252]	; (800b5f4 <DMA_CalcBaseAndBitshift+0x120>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d040      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a3e      	ldr	r2, [pc, #248]	; (800b5f8 <DMA_CalcBaseAndBitshift+0x124>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d03b      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a3c      	ldr	r2, [pc, #240]	; (800b5fc <DMA_CalcBaseAndBitshift+0x128>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d036      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a3b      	ldr	r2, [pc, #236]	; (800b600 <DMA_CalcBaseAndBitshift+0x12c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d031      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a39      	ldr	r2, [pc, #228]	; (800b604 <DMA_CalcBaseAndBitshift+0x130>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d02c      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a38      	ldr	r2, [pc, #224]	; (800b608 <DMA_CalcBaseAndBitshift+0x134>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d027      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a36      	ldr	r2, [pc, #216]	; (800b60c <DMA_CalcBaseAndBitshift+0x138>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d022      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a35      	ldr	r2, [pc, #212]	; (800b610 <DMA_CalcBaseAndBitshift+0x13c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d01d      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a33      	ldr	r2, [pc, #204]	; (800b614 <DMA_CalcBaseAndBitshift+0x140>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d018      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a32      	ldr	r2, [pc, #200]	; (800b618 <DMA_CalcBaseAndBitshift+0x144>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d013      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a30      	ldr	r2, [pc, #192]	; (800b61c <DMA_CalcBaseAndBitshift+0x148>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d00e      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a2f      	ldr	r2, [pc, #188]	; (800b620 <DMA_CalcBaseAndBitshift+0x14c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d009      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a2d      	ldr	r2, [pc, #180]	; (800b624 <DMA_CalcBaseAndBitshift+0x150>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d004      	beq.n	800b57c <DMA_CalcBaseAndBitshift+0xa8>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a2c      	ldr	r2, [pc, #176]	; (800b628 <DMA_CalcBaseAndBitshift+0x154>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d101      	bne.n	800b580 <DMA_CalcBaseAndBitshift+0xac>
 800b57c:	2301      	movs	r3, #1
 800b57e:	e000      	b.n	800b582 <DMA_CalcBaseAndBitshift+0xae>
 800b580:	2300      	movs	r3, #0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d024      	beq.n	800b5d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	3b10      	subs	r3, #16
 800b58e:	4a27      	ldr	r2, [pc, #156]	; (800b62c <DMA_CalcBaseAndBitshift+0x158>)
 800b590:	fba2 2303 	umull	r2, r3, r2, r3
 800b594:	091b      	lsrs	r3, r3, #4
 800b596:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f003 0307 	and.w	r3, r3, #7
 800b59e:	4a24      	ldr	r2, [pc, #144]	; (800b630 <DMA_CalcBaseAndBitshift+0x15c>)
 800b5a0:	5cd3      	ldrb	r3, [r2, r3]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d908      	bls.n	800b5c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	4b1f      	ldr	r3, [pc, #124]	; (800b634 <DMA_CalcBaseAndBitshift+0x160>)
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	1d1a      	adds	r2, r3, #4
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	659a      	str	r2, [r3, #88]	; 0x58
 800b5be:	e00d      	b.n	800b5dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4b1b      	ldr	r3, [pc, #108]	; (800b634 <DMA_CalcBaseAndBitshift+0x160>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ce:	e005      	b.n	800b5dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	40020010 	.word	0x40020010
 800b5f0:	40020028 	.word	0x40020028
 800b5f4:	40020040 	.word	0x40020040
 800b5f8:	40020058 	.word	0x40020058
 800b5fc:	40020070 	.word	0x40020070
 800b600:	40020088 	.word	0x40020088
 800b604:	400200a0 	.word	0x400200a0
 800b608:	400200b8 	.word	0x400200b8
 800b60c:	40020410 	.word	0x40020410
 800b610:	40020428 	.word	0x40020428
 800b614:	40020440 	.word	0x40020440
 800b618:	40020458 	.word	0x40020458
 800b61c:	40020470 	.word	0x40020470
 800b620:	40020488 	.word	0x40020488
 800b624:	400204a0 	.word	0x400204a0
 800b628:	400204b8 	.word	0x400204b8
 800b62c:	aaaaaaab 	.word	0xaaaaaaab
 800b630:	0801bdc8 	.word	0x0801bdc8
 800b634:	fffffc00 	.word	0xfffffc00

0800b638 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d120      	bne.n	800b68e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b650:	2b03      	cmp	r3, #3
 800b652:	d858      	bhi.n	800b706 <DMA_CheckFifoParam+0xce>
 800b654:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <DMA_CheckFifoParam+0x24>)
 800b656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65a:	bf00      	nop
 800b65c:	0800b66d 	.word	0x0800b66d
 800b660:	0800b67f 	.word	0x0800b67f
 800b664:	0800b66d 	.word	0x0800b66d
 800b668:	0800b707 	.word	0x0800b707
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d048      	beq.n	800b70a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b67c:	e045      	b.n	800b70a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b686:	d142      	bne.n	800b70e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b68c:	e03f      	b.n	800b70e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b696:	d123      	bne.n	800b6e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d838      	bhi.n	800b712 <DMA_CheckFifoParam+0xda>
 800b6a0:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <DMA_CheckFifoParam+0x70>)
 800b6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a6:	bf00      	nop
 800b6a8:	0800b6b9 	.word	0x0800b6b9
 800b6ac:	0800b6bf 	.word	0x0800b6bf
 800b6b0:	0800b6b9 	.word	0x0800b6b9
 800b6b4:	0800b6d1 	.word	0x0800b6d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73fb      	strb	r3, [r7, #15]
        break;
 800b6bc:	e030      	b.n	800b720 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d025      	beq.n	800b716 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6ce:	e022      	b.n	800b716 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b6d8:	d11f      	bne.n	800b71a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6de:	e01c      	b.n	800b71a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d902      	bls.n	800b6ee <DMA_CheckFifoParam+0xb6>
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d003      	beq.n	800b6f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b6ec:	e018      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	73fb      	strb	r3, [r7, #15]
        break;
 800b6f2:	e015      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
    break;
 800b704:	e00b      	b.n	800b71e <DMA_CheckFifoParam+0xe6>
        break;
 800b706:	bf00      	nop
 800b708:	e00a      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        break;
 800b70a:	bf00      	nop
 800b70c:	e008      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        break;
 800b70e:	bf00      	nop
 800b710:	e006      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        break;
 800b712:	bf00      	nop
 800b714:	e004      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        break;
 800b716:	bf00      	nop
 800b718:	e002      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
        break;
 800b71a:	bf00      	nop
 800b71c:	e000      	b.n	800b720 <DMA_CheckFifoParam+0xe8>
    break;
 800b71e:	bf00      	nop
    }
  }

  return status;
 800b720:	7bfb      	ldrb	r3, [r7, #15]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop

0800b730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a38      	ldr	r2, [pc, #224]	; (800b824 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d022      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a36      	ldr	r2, [pc, #216]	; (800b828 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d01d      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a35      	ldr	r2, [pc, #212]	; (800b82c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d018      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a33      	ldr	r2, [pc, #204]	; (800b830 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d013      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a32      	ldr	r2, [pc, #200]	; (800b834 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00e      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a30      	ldr	r2, [pc, #192]	; (800b838 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d009      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a2f      	ldr	r2, [pc, #188]	; (800b83c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d004      	beq.n	800b78e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a2d      	ldr	r2, [pc, #180]	; (800b840 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d101      	bne.n	800b792 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b78e:	2301      	movs	r3, #1
 800b790:	e000      	b.n	800b794 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b792:	2300      	movs	r3, #0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01a      	beq.n	800b7ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	3b08      	subs	r3, #8
 800b7a0:	4a28      	ldr	r2, [pc, #160]	; (800b844 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a6:	091b      	lsrs	r3, r3, #4
 800b7a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4b26      	ldr	r3, [pc, #152]	; (800b848 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b7ae:	4413      	add	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a24      	ldr	r2, [pc, #144]	; (800b84c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b7bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f003 031f 	and.w	r3, r3, #31
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	409a      	lsls	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b7cc:	e024      	b.n	800b818 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	3b10      	subs	r3, #16
 800b7d6:	4a1e      	ldr	r2, [pc, #120]	; (800b850 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b7d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7dc:	091b      	lsrs	r3, r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4a1c      	ldr	r2, [pc, #112]	; (800b854 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d806      	bhi.n	800b7f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4a1b      	ldr	r2, [pc, #108]	; (800b858 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d902      	bls.n	800b7f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	4b18      	ldr	r3, [pc, #96]	; (800b85c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b7fa:	4413      	add	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	461a      	mov	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a16      	ldr	r2, [pc, #88]	; (800b860 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b808:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f003 031f 	and.w	r3, r3, #31
 800b810:	2201      	movs	r2, #1
 800b812:	409a      	lsls	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b818:	bf00      	nop
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	58025408 	.word	0x58025408
 800b828:	5802541c 	.word	0x5802541c
 800b82c:	58025430 	.word	0x58025430
 800b830:	58025444 	.word	0x58025444
 800b834:	58025458 	.word	0x58025458
 800b838:	5802546c 	.word	0x5802546c
 800b83c:	58025480 	.word	0x58025480
 800b840:	58025494 	.word	0x58025494
 800b844:	cccccccd 	.word	0xcccccccd
 800b848:	16009600 	.word	0x16009600
 800b84c:	58025880 	.word	0x58025880
 800b850:	aaaaaaab 	.word	0xaaaaaaab
 800b854:	400204b8 	.word	0x400204b8
 800b858:	4002040f 	.word	0x4002040f
 800b85c:	10008200 	.word	0x10008200
 800b860:	40020880 	.word	0x40020880

0800b864 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d04a      	beq.n	800b910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b08      	cmp	r3, #8
 800b87e:	d847      	bhi.n	800b910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a25      	ldr	r2, [pc, #148]	; (800b91c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d022      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a24      	ldr	r2, [pc, #144]	; (800b920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d01d      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a22      	ldr	r2, [pc, #136]	; (800b924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d018      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a21      	ldr	r2, [pc, #132]	; (800b928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d013      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a1f      	ldr	r2, [pc, #124]	; (800b92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00e      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a1e      	ldr	r2, [pc, #120]	; (800b930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d009      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a1c      	ldr	r2, [pc, #112]	; (800b934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d004      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a1b      	ldr	r2, [pc, #108]	; (800b938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d101      	bne.n	800b8d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e000      	b.n	800b8d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	4b17      	ldr	r3, [pc, #92]	; (800b93c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a15      	ldr	r2, [pc, #84]	; (800b940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b8ec:	671a      	str	r2, [r3, #112]	; 0x70
 800b8ee:	e009      	b.n	800b904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4b14      	ldr	r3, [pc, #80]	; (800b944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a11      	ldr	r2, [pc, #68]	; (800b948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b902:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3b01      	subs	r3, #1
 800b908:	2201      	movs	r2, #1
 800b90a:	409a      	lsls	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b910:	bf00      	nop
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	58025408 	.word	0x58025408
 800b920:	5802541c 	.word	0x5802541c
 800b924:	58025430 	.word	0x58025430
 800b928:	58025444 	.word	0x58025444
 800b92c:	58025458 	.word	0x58025458
 800b930:	5802546c 	.word	0x5802546c
 800b934:	58025480 	.word	0x58025480
 800b938:	58025494 	.word	0x58025494
 800b93c:	1600963f 	.word	0x1600963f
 800b940:	58025940 	.word	0x58025940
 800b944:	1000823f 	.word	0x1000823f
 800b948:	40020940 	.word	0x40020940

0800b94c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800b960:	2308      	movs	r3, #8
 800b962:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b964:	4b40      	ldr	r3, [pc, #256]	; (800ba68 <HAL_FLASH_Program+0x11c>)
 800b966:	7d1b      	ldrb	r3, [r3, #20]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d101      	bne.n	800b970 <HAL_FLASH_Program+0x24>
 800b96c:	2302      	movs	r3, #2
 800b96e:	e076      	b.n	800ba5e <HAL_FLASH_Program+0x112>
 800b970:	4b3d      	ldr	r3, [pc, #244]	; (800ba68 <HAL_FLASH_Program+0x11c>)
 800b972:	2201      	movs	r2, #1
 800b974:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b97c:	d306      	bcc.n	800b98c <HAL_FLASH_Program+0x40>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b984:	d202      	bcs.n	800b98c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800b986:	2301      	movs	r3, #1
 800b988:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800b98a:	e00c      	b.n	800b9a6 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b992:	d306      	bcc.n	800b9a2 <HAL_FLASH_Program+0x56>
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800b99a:	d202      	bcs.n	800b9a2 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800b99c:	2302      	movs	r3, #2
 800b99e:	61bb      	str	r3, [r7, #24]
 800b9a0:	e001      	b.n	800b9a6 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e05b      	b.n	800ba5e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b9a6:	4b30      	ldr	r3, [pc, #192]	; (800ba68 <HAL_FLASH_Program+0x11c>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b9ac:	69b9      	ldr	r1, [r7, #24]
 800b9ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b9b2:	f000 fa5d 	bl	800be70 <FLASH_WaitForLastOperation>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d147      	bne.n	800ba54 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d106      	bne.n	800b9d8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800b9ca:	4b28      	ldr	r3, [pc, #160]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	4a27      	ldr	r2, [pc, #156]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800b9d0:	f043 0302 	orr.w	r3, r3, #2
 800b9d4:	60d3      	str	r3, [r2, #12]
 800b9d6:	e007      	b.n	800b9e8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800b9d8:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800b9da:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b9de:	4a23      	ldr	r2, [pc, #140]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800b9e0:	f043 0302 	orr.w	r3, r3, #2
 800b9e4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800b9e8:	f3bf 8f6f 	isb	sy
}
 800b9ec:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b9ee:	f3bf 8f4f 	dsb	sy
}
 800b9f2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	623b      	str	r3, [r7, #32]
        src_addr++;
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	3304      	adds	r3, #4
 800ba06:	61fb      	str	r3, [r7, #28]
        row_index--;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1ef      	bne.n	800b9f4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800ba14:	f3bf 8f6f 	isb	sy
}
 800ba18:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ba1a:	f3bf 8f4f 	dsb	sy
}
 800ba1e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800ba20:	69b9      	ldr	r1, [r7, #24]
 800ba22:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ba26:	f000 fa23 	bl	800be70 <FLASH_WaitForLastOperation>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d106      	bne.n	800ba44 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	4a0c      	ldr	r2, [pc, #48]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800ba3c:	f023 0302 	bic.w	r3, r3, #2
 800ba40:	60d3      	str	r3, [r2, #12]
 800ba42:	e007      	b.n	800ba54 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800ba44:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800ba46:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ba4a:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <HAL_FLASH_Program+0x120>)
 800ba4c:	f023 0302 	bic.w	r3, r3, #2
 800ba50:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <HAL_FLASH_Program+0x11c>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	751a      	strb	r2, [r3, #20]

  return status;
 800ba5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3728      	adds	r7, #40	; 0x28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	240026f4 	.word	0x240026f4
 800ba6c:	52002000 	.word	0x52002000

0800ba70 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 800ba76:	4b7a      	ldr	r3, [pc, #488]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba82:	d15c      	bne.n	800bb3e <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 800ba84:	4b77      	ldr	r3, [pc, #476]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d132      	bne.n	800baf4 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
 800ba8e:	4b75      	ldr	r3, [pc, #468]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	4a73      	ldr	r2, [pc, #460]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800ba96:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
 800ba98:	4b72      	ldr	r3, [pc, #456]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d018      	beq.n	800bad2 <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800baa0:	4b70      	ldr	r3, [pc, #448]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 f995 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800baaa:	4b6d      	ldr	r3, [pc, #436]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800baac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bab0:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
 800bab2:	4b6c      	ldr	r3, [pc, #432]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	4a6a      	ldr	r2, [pc, #424]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800baba:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800babc:	4b69      	ldr	r3, [pc, #420]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 800bac2:	4b68      	ldr	r3, [pc, #416]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	461a      	mov	r2, r3
 800bac8:	2101      	movs	r1, #1
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f000 fbd0 	bl	800c270 <FLASH_Erase_Sector>
 800bad0:	e035      	b.n	800bb3e <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800bad2:	4b64      	ldr	r3, [pc, #400]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bad8:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bada:	4b62      	ldr	r3, [pc, #392]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800badc:	2200      	movs	r2, #0
 800bade:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bae0:	4b60      	ldr	r3, [pc, #384]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f975 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800baea:	4b5d      	ldr	r3, [pc, #372]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800baec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800baf0:	615a      	str	r2, [r3, #20]
 800baf2:	e024      	b.n	800bb3e <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800baf4:	4b5b      	ldr	r3, [pc, #364]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bafa:	7afb      	ldrb	r3, [r7, #11]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d002      	beq.n	800bb06 <HAL_FLASH_IRQHandler+0x96>
 800bb00:	7afb      	ldrb	r3, [r7, #11]
 800bb02:	2b07      	cmp	r3, #7
 800bb04:	d103      	bne.n	800bb0e <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 800bb06:	2001      	movs	r0, #1
 800bb08:	f000 f964 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>
 800bb0c:	e007      	b.n	800bb1e <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 800bb0e:	7afb      	ldrb	r3, [r7, #11]
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d104      	bne.n	800bb1e <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bb14:	4b53      	ldr	r3, [pc, #332]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 f95b 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 800bb1e:	7afb      	ldrb	r3, [r7, #11]
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	d00c      	beq.n	800bb3e <HAL_FLASH_IRQHandler+0xce>
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	2b05      	cmp	r3, #5
 800bb28:	d009      	beq.n	800bb3e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 800bb2a:	7afb      	ldrb	r3, [r7, #11]
 800bb2c:	2b06      	cmp	r3, #6
 800bb2e:	d006      	beq.n	800bb3e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bb30:	4b4c      	ldr	r3, [pc, #304]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800bb36:	4b4a      	ldr	r3, [pc, #296]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bb38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb3c:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 800bb3e:	4b48      	ldr	r3, [pc, #288]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bb40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bb44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4c:	d15f      	bne.n	800bc0e <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 800bb4e:	4b45      	ldr	r3, [pc, #276]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d134      	bne.n	800bbc2 <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800bb58:	4b42      	ldr	r3, [pc, #264]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	4a41      	ldr	r2, [pc, #260]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb60:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800bb62:	4b40      	ldr	r3, [pc, #256]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d019      	beq.n	800bb9e <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bb6a:	4b3e      	ldr	r3, [pc, #248]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f930 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bb74:	4b3a      	ldr	r3, [pc, #232]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bb76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb7a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
 800bb7e:	4b39      	ldr	r3, [pc, #228]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a37      	ldr	r2, [pc, #220]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb86:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800bb88:	4b36      	ldr	r3, [pc, #216]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 800bb8e:	4b35      	ldr	r3, [pc, #212]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	461a      	mov	r2, r3
 800bb94:	2102      	movs	r1, #2
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f000 fb6a 	bl	800c270 <FLASH_Erase_Sector>
 800bb9c:	e037      	b.n	800bc0e <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800bb9e:	4b31      	ldr	r3, [pc, #196]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bba4:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bba6:	4b2f      	ldr	r3, [pc, #188]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bbac:	4b2d      	ldr	r3, [pc, #180]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 f90f 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bbb6:	4b2a      	ldr	r3, [pc, #168]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bbb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bbbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bbc0:	e025      	b.n	800bc0e <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800bbc2:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d002      	beq.n	800bbd4 <HAL_FLASH_IRQHandler+0x164>
 800bbce:	7afb      	ldrb	r3, [r7, #11]
 800bbd0:	2b07      	cmp	r3, #7
 800bbd2:	d103      	bne.n	800bbdc <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 800bbd4:	2002      	movs	r0, #2
 800bbd6:	f000 f8fd 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>
 800bbda:	e007      	b.n	800bbec <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 800bbdc:	7afb      	ldrb	r3, [r7, #11]
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	d104      	bne.n	800bbec <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bbe2:	4b20      	ldr	r3, [pc, #128]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 f8f4 	bl	800bdd4 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 800bbec:	7afb      	ldrb	r3, [r7, #11]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d00d      	beq.n	800bc0e <HAL_FLASH_IRQHandler+0x19e>
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d00a      	beq.n	800bc0e <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d007      	beq.n	800bc0e <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bbfe:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bc04:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc0a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
 800bc0e:	4b14      	ldr	r3, [pc, #80]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bc16:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d02d      	beq.n	800bc7a <HAL_FLASH_IRQHandler+0x20a>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bc1e:	4b11      	ldr	r3, [pc, #68]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc20:	699a      	ldr	r2, [r3, #24]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	4a0f      	ldr	r2, [pc, #60]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc28:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bc2a:	4a0d      	ldr	r2, [pc, #52]	; (800bc60 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
 800bc30:	4b0c      	ldr	r3, [pc, #48]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
 800bc36:	7afb      	ldrb	r3, [r7, #11]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d107      	bne.n	800bc4c <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
 800bc3c:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800bc42:	4b08      	ldr	r3, [pc, #32]	; (800bc64 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc48:	60da      	str	r2, [r3, #12]
 800bc4a:	e010      	b.n	800bc6e <HAL_FLASH_IRQHandler+0x1fe>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bc4c:	7afb      	ldrb	r3, [r7, #11]
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d002      	beq.n	800bc58 <HAL_FLASH_IRQHandler+0x1e8>
 800bc52:	7afb      	ldrb	r3, [r7, #11]
 800bc54:	2b07      	cmp	r3, #7
 800bc56:	d107      	bne.n	800bc68 <HAL_FLASH_IRQHandler+0x1f8>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	e007      	b.n	800bc6e <HAL_FLASH_IRQHandler+0x1fe>
 800bc5e:	bf00      	nop
 800bc60:	52002000 	.word	0x52002000
 800bc64:	240026f4 	.word	0x240026f4
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
 800bc68:	4b58      	ldr	r3, [pc, #352]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bc6e:	4b57      	ldr	r3, [pc, #348]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f8b7 	bl	800bde8 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank1 ECC single correction error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_SNECCERR_BANK1;
 800bc7a:	4b55      	ldr	r3, [pc, #340]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc82:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00a      	beq.n	800bca0 <HAL_FLASH_IRQHandler+0x230>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bc8a:	4b50      	ldr	r3, [pc, #320]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bc8c:	699a      	ldr	r2, [r3, #24]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	4a4e      	ldr	r2, [pc, #312]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bc94:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800bc96:	f7f7 f885 	bl	8002da4 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank1 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bc9a:	4a4d      	ldr	r2, [pc, #308]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH Bank1 ECC double detection error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_DBECCERR_BANK1;
 800bca0:	4b4b      	ldr	r3, [pc, #300]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bca8:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00a      	beq.n	800bcc6 <HAL_FLASH_IRQHandler+0x256>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bcb0:	4b46      	ldr	r3, [pc, #280]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bcb2:	699a      	ldr	r2, [r3, #24]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	4a44      	ldr	r2, [pc, #272]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bcba:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800bcbc:	f7f7 f882 	bl	8002dc4 <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank1 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bcc0:	4a43      	ldr	r2, [pc, #268]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6153      	str	r3, [r2, #20]
#endif /* USE_FLASH_ECC */

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
 800bcc6:	4b42      	ldr	r3, [pc, #264]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bcc8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bccc:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bcd0:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d02d      	beq.n	800bd34 <HAL_FLASH_IRQHandler+0x2c4>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bcd8:	4b3c      	ldr	r3, [pc, #240]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bcda:	699a      	ldr	r2, [r3, #24]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bce4:	4a39      	ldr	r2, [pc, #228]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bce6:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800bce8:	4a39      	ldr	r2, [pc, #228]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcf0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
 800bcf4:	4b35      	ldr	r3, [pc, #212]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
 800bcfa:	7afb      	ldrb	r3, [r7, #11]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d107      	bne.n	800bd10 <HAL_FLASH_IRQHandler+0x2a0>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
 800bd00:	4b32      	ldr	r3, [pc, #200]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800bd06:	4b31      	ldr	r3, [pc, #196]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd0c:	60da      	str	r2, [r3, #12]
 800bd0e:	e00b      	b.n	800bd28 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bd10:	7afb      	ldrb	r3, [r7, #11]
 800bd12:	2b05      	cmp	r3, #5
 800bd14:	d002      	beq.n	800bd1c <HAL_FLASH_IRQHandler+0x2ac>
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	2b07      	cmp	r3, #7
 800bd1a:	d102      	bne.n	800bd22 <HAL_FLASH_IRQHandler+0x2b2>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e002      	b.n	800bd28 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
 800bd22:	4b2a      	ldr	r3, [pc, #168]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bd28:	4b28      	ldr	r3, [pc, #160]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f000 f85a 	bl	800bde8 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank2 ECC single correction error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_SNECCERR_BANK2;
 800bd34:	4b26      	ldr	r3, [pc, #152]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bd36:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bd3a:	f003 4302 	and.w	r3, r3, #2181038080	; 0x82000000
 800bd3e:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00f      	beq.n	800bd66 <HAL_FLASH_IRQHandler+0x2f6>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bd46:	4b21      	ldr	r3, [pc, #132]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd48:	699a      	ldr	r2, [r3, #24]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd52:	4a1e      	ldr	r2, [pc, #120]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd54:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800bd56:	f7f7 f825 	bl	8002da4 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank2 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800bd5a:	4a1d      	ldr	r2, [pc, #116]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd62:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

  /* Check FLASH Bank2 ECC double detection error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_DBECCERR_BANK2;
 800bd66:	4b1a      	ldr	r3, [pc, #104]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bd68:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bd6c:	f003 4304 	and.w	r3, r3, #2214592512	; 0x84000000
 800bd70:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00f      	beq.n	800bd98 <HAL_FLASH_IRQHandler+0x328>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bd78:	4b14      	ldr	r3, [pc, #80]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd7a:	699a      	ldr	r2, [r3, #24]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd84:	4a11      	ldr	r2, [pc, #68]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd86:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800bd88:	f7f7 f81c 	bl	8002dc4 <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank2 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800bd8c:	4a10      	ldr	r2, [pc, #64]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd94:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d110      	bne.n	800bdc4 <HAL_FLASH_IRQHandler+0x354>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 800bda2:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	4a0a      	ldr	r2, [pc, #40]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bda8:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800bdac:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 800bdae:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bdb0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bdb4:	4a06      	ldr	r2, [pc, #24]	; (800bdd0 <HAL_FLASH_IRQHandler+0x360>)
 800bdb6:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800bdba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800bdbe:	4b03      	ldr	r3, [pc, #12]	; (800bdcc <HAL_FLASH_IRQHandler+0x35c>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	751a      	strb	r2, [r3, #20]
  }
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	240026f4 	.word	0x240026f4
 800bdd0:	52002000 	.word	0x52002000

0800bdd4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800be00:	4b18      	ldr	r3, [pc, #96]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00d      	beq.n	800be28 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800be0c:	4b15      	ldr	r3, [pc, #84]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be0e:	4a16      	ldr	r2, [pc, #88]	; (800be68 <HAL_FLASH_Unlock+0x6c>)
 800be10:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800be12:	4b14      	ldr	r3, [pc, #80]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be14:	4a15      	ldr	r2, [pc, #84]	; (800be6c <HAL_FLASH_Unlock+0x70>)
 800be16:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800be18:	4b12      	ldr	r3, [pc, #72]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e018      	b.n	800be5a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800be28:	4b0e      	ldr	r3, [pc, #56]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	d010      	beq.n	800be58 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800be36:	4b0b      	ldr	r3, [pc, #44]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be38:	4a0b      	ldr	r2, [pc, #44]	; (800be68 <HAL_FLASH_Unlock+0x6c>)
 800be3a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800be3e:	4b09      	ldr	r3, [pc, #36]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be40:	4a0a      	ldr	r2, [pc, #40]	; (800be6c <HAL_FLASH_Unlock+0x70>)
 800be42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800be46:	4b07      	ldr	r3, [pc, #28]	; (800be64 <HAL_FLASH_Unlock+0x68>)
 800be48:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	52002000 	.word	0x52002000
 800be68:	45670123 	.word	0x45670123
 800be6c:	cdef89ab 	.word	0xcdef89ab

0800be70 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800be7a:	2304      	movs	r3, #4
 800be7c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800be82:	f7fa fde5 	bl	8006a50 <HAL_GetTick>
 800be86:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d113      	bne.n	800beb6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800be8e:	4b41      	ldr	r3, [pc, #260]	; (800bf94 <FLASH_WaitForLastOperation+0x124>)
 800be90:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800be92:	e010      	b.n	800beb6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be9a:	d00c      	beq.n	800beb6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800be9c:	f7fa fdd8 	bl	8006a50 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d302      	bcc.n	800beb2 <FLASH_WaitForLastOperation+0x42>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e06a      	b.n	800bf8c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	4b37      	ldr	r3, [pc, #220]	; (800bf98 <FLASH_WaitForLastOperation+0x128>)
 800beba:	4013      	ands	r3, r2
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d10a      	bne.n	800bed8 <FLASH_WaitForLastOperation+0x68>
 800bec2:	4b36      	ldr	r3, [pc, #216]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bec4:	691a      	ldr	r2, [r3, #16]
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4013      	ands	r3, r2
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	429a      	cmp	r2, r3
 800bece:	bf0c      	ite	eq
 800bed0:	2301      	moveq	r3, #1
 800bed2:	2300      	movne	r3, #0
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	e00c      	b.n	800bef2 <FLASH_WaitForLastOperation+0x82>
 800bed8:	4b30      	ldr	r3, [pc, #192]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800beda:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bede:	43da      	mvns	r2, r3
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	4013      	ands	r3, r2
 800bee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bf0c      	ite	eq
 800beec:	2301      	moveq	r3, #1
 800beee:	2300      	movne	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1ce      	bne.n	800be94 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d105      	bne.n	800bf08 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800befc:	4b27      	ldr	r3, [pc, #156]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800befe:	691a      	ldr	r2, [r3, #16]
 800bf00:	4b27      	ldr	r3, [pc, #156]	; (800bfa0 <FLASH_WaitForLastOperation+0x130>)
 800bf02:	4013      	ands	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]
 800bf06:	e007      	b.n	800bf18 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800bf08:	4b24      	ldr	r3, [pc, #144]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800bf0e:	4b24      	ldr	r3, [pc, #144]	; (800bfa0 <FLASH_WaitForLastOperation+0x130>)
 800bf10:	4013      	ands	r3, r2
 800bf12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf16:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d017      	beq.n	800bf52 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800bf22:	4b20      	ldr	r3, [pc, #128]	; (800bfa4 <FLASH_WaitForLastOperation+0x134>)
 800bf24:	699a      	ldr	r2, [r3, #24]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	4a1e      	ldr	r2, [pc, #120]	; (800bfa4 <FLASH_WaitForLastOperation+0x134>)
 800bf2c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	4b19      	ldr	r3, [pc, #100]	; (800bf98 <FLASH_WaitForLastOperation+0x128>)
 800bf32:	4013      	ands	r3, r2
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d103      	bne.n	800bf42 <FLASH_WaitForLastOperation+0xd2>
 800bf3a:	4a18      	ldr	r2, [pc, #96]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	6153      	str	r3, [r2, #20]
 800bf40:	e005      	b.n	800bf4e <FLASH_WaitForLastOperation+0xde>
 800bf42:	4a16      	ldr	r2, [pc, #88]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf4a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e01c      	b.n	800bf8c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d10b      	bne.n	800bf70 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800bf58:	4b10      	ldr	r3, [pc, #64]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf64:	d111      	bne.n	800bf8a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800bf66:	4b0d      	ldr	r3, [pc, #52]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf6c:	615a      	str	r2, [r3, #20]
 800bf6e:	e00c      	b.n	800bf8a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800bf70:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf72:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bf76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf7e:	d104      	bne.n	800bf8a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bf80:	4b06      	ldr	r3, [pc, #24]	; (800bf9c <FLASH_WaitForLastOperation+0x12c>)
 800bf82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf86:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	80000004 	.word	0x80000004
 800bf98:	1fef000f 	.word	0x1fef000f
 800bf9c:	52002000 	.word	0x52002000
 800bfa0:	17ee0000 	.word	0x17ee0000
 800bfa4:	240026f4 	.word	0x240026f4

0800bfa8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bfb6:	4b5e      	ldr	r3, [pc, #376]	; (800c130 <HAL_FLASHEx_Erase+0x188>)
 800bfb8:	7d1b      	ldrb	r3, [r3, #20]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d101      	bne.n	800bfc2 <HAL_FLASHEx_Erase+0x1a>
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	e0b2      	b.n	800c128 <HAL_FLASHEx_Erase+0x180>
 800bfc2:	4b5b      	ldr	r3, [pc, #364]	; (800c130 <HAL_FLASHEx_Erase+0x188>)
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bfc8:	4b59      	ldr	r3, [pc, #356]	; (800c130 <HAL_FLASHEx_Erase+0x188>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800bfda:	2101      	movs	r1, #1
 800bfdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bfe0:	f7ff ff46 	bl	800be70 <FLASH_WaitForLastOperation>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f003 0302 	and.w	r3, r3, #2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800bffa:	2102      	movs	r1, #2
 800bffc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c000:	f7ff ff36 	bl	800be70 <FLASH_WaitForLastOperation>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f040 8085 	bne.w	800c120 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d136      	bne.n	800c08c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691a      	ldr	r2, [r3, #16]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f000 f8b7 	bl	800c19c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00f      	beq.n	800c05a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800c03a:	2101      	movs	r1, #1
 800c03c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c040:	f7ff ff16 	bl	800be70 <FLASH_WaitForLastOperation>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800c04e:	4b39      	ldr	r3, [pc, #228]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	4a38      	ldr	r2, [pc, #224]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c054:	f023 0308 	bic.w	r3, r3, #8
 800c058:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d05c      	beq.n	800c120 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800c066:	2102      	movs	r1, #2
 800c068:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c06c:	f7ff ff00 	bl	800be70 <FLASH_WaitForLastOperation>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800c07a:	4b2e      	ldr	r3, [pc, #184]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c07c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c080:	4a2c      	ldr	r2, [pc, #176]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c082:	f023 0308 	bic.w	r3, r3, #8
 800c086:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800c08a:	e049      	b.n	800c120 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c092:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	e039      	b.n	800c110 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6859      	ldr	r1, [r3, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	68b8      	ldr	r0, [r7, #8]
 800c0a8:	f000 f8e2 	bl	800c270 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00c      	beq.n	800c0d2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c0be:	f7ff fed7 	bl	800be70 <FLASH_WaitForLastOperation>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c0c6:	4b1b      	ldr	r3, [pc, #108]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	491a      	ldr	r1, [pc, #104]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c0cc:	4b1a      	ldr	r3, [pc, #104]	; (800c138 <HAL_FLASHEx_Erase+0x190>)
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00e      	beq.n	800c0fc <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800c0de:	2102      	movs	r1, #2
 800c0e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c0e4:	f7ff fec4 	bl	800be70 <FLASH_WaitForLastOperation>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c0ec:	4b11      	ldr	r3, [pc, #68]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c0ee:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c0f2:	4910      	ldr	r1, [pc, #64]	; (800c134 <HAL_FLASHEx_Erase+0x18c>)
 800c0f4:	4b10      	ldr	r3, [pc, #64]	; (800c138 <HAL_FLASHEx_Erase+0x190>)
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	601a      	str	r2, [r3, #0]
          break;
 800c108:	e00a      	b.n	800c120 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	3301      	adds	r3, #1
 800c10e:	60bb      	str	r3, [r7, #8]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	4413      	add	r3, r2
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d3bd      	bcc.n	800c09c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c120:	4b03      	ldr	r3, [pc, #12]	; (800c130 <HAL_FLASHEx_Erase+0x188>)
 800c122:	2200      	movs	r2, #0
 800c124:	751a      	strb	r2, [r3, #20]

  return status;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	240026f4 	.word	0x240026f4
 800c134:	52002000 	.word	0x52002000
 800c138:	fffff8fb 	.word	0xfffff8fb

0800c13c <HAL_FLASHEx_EnableEccCorrectionInterrupt>:
  * @brief  Enable ECC correction interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccCorrectionInterrupt(void)
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK1);
 800c140:	4b09      	ldr	r3, [pc, #36]	; (800c168 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	4a08      	ldr	r2, [pc, #32]	; (800c168 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c14a:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK2);
 800c14c:	4b06      	ldr	r3, [pc, #24]	; (800c168 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c14e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c152:	4a05      	ldr	r2, [pc, #20]	; (800c168 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c154:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c158:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c15c:	bf00      	nop
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	52002000 	.word	0x52002000

0800c16c <HAL_FLASHEx_EnableEccDetectionInterrupt>:
  * @brief  Enable ECC Detection interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccDetectionInterrupt(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK1);
 800c170:	4b09      	ldr	r3, [pc, #36]	; (800c198 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	4a08      	ldr	r2, [pc, #32]	; (800c198 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c17a:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK2);
 800c17c:	4b06      	ldr	r3, [pc, #24]	; (800c198 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c17e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c182:	4a05      	ldr	r2, [pc, #20]	; (800c198 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c188:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c18c:	bf00      	nop
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	52002000 	.word	0x52002000

0800c19c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	f003 0303 	and.w	r3, r3, #3
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d122      	bne.n	800c1f6 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c1b0:	4b2e      	ldr	r3, [pc, #184]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	4a2d      	ldr	r2, [pc, #180]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c1ba:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c1bc:	4b2b      	ldr	r3, [pc, #172]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1be:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1c2:	4a2a      	ldr	r2, [pc, #168]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c1c8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800c1cc:	4b27      	ldr	r3, [pc, #156]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1ce:	68da      	ldr	r2, [r3, #12]
 800c1d0:	4926      	ldr	r1, [pc, #152]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800c1d8:	4b24      	ldr	r3, [pc, #144]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1da:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c1de:	4923      	ldr	r1, [pc, #140]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800c1e8:	4b20      	ldr	r3, [pc, #128]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	4a1f      	ldr	r2, [pc, #124]	; (800c26c <FLASH_MassErase+0xd0>)
 800c1ee:	f043 0310 	orr.w	r3, r3, #16
 800c1f2:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800c1f4:	e033      	b.n	800c25e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	f003 0301 	and.w	r3, r3, #1
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d011      	beq.n	800c224 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c200:	4b1a      	ldr	r3, [pc, #104]	; (800c26c <FLASH_MassErase+0xd0>)
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	4a19      	ldr	r2, [pc, #100]	; (800c26c <FLASH_MassErase+0xd0>)
 800c206:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c20a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800c20c:	4b17      	ldr	r3, [pc, #92]	; (800c26c <FLASH_MassErase+0xd0>)
 800c20e:	68da      	ldr	r2, [r3, #12]
 800c210:	4916      	ldr	r1, [pc, #88]	; (800c26c <FLASH_MassErase+0xd0>)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4313      	orrs	r3, r2
 800c216:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800c218:	4b14      	ldr	r3, [pc, #80]	; (800c26c <FLASH_MassErase+0xd0>)
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	4a13      	ldr	r2, [pc, #76]	; (800c26c <FLASH_MassErase+0xd0>)
 800c21e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c222:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	f003 0302 	and.w	r3, r3, #2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d017      	beq.n	800c25e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c22e:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <FLASH_MassErase+0xd0>)
 800c230:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c234:	4a0d      	ldr	r2, [pc, #52]	; (800c26c <FLASH_MassErase+0xd0>)
 800c236:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c23a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800c23e:	4b0b      	ldr	r3, [pc, #44]	; (800c26c <FLASH_MassErase+0xd0>)
 800c240:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c244:	4909      	ldr	r1, [pc, #36]	; (800c26c <FLASH_MassErase+0xd0>)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4313      	orrs	r3, r2
 800c24a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800c24e:	4b07      	ldr	r3, [pc, #28]	; (800c26c <FLASH_MassErase+0xd0>)
 800c250:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c254:	4a05      	ldr	r2, [pc, #20]	; (800c26c <FLASH_MassErase+0xd0>)
 800c256:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c25a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	52002000 	.word	0x52002000

0800c270 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d010      	beq.n	800c2a8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c28c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c290:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	0219      	lsls	r1, r3, #8
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	430b      	orrs	r3, r1
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	4a11      	ldr	r2, [pc, #68]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c2a2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c2a6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f003 0302 	and.w	r3, r3, #2
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d014      	beq.n	800c2dc <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c2b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c2b8:	4a0b      	ldr	r2, [pc, #44]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c2ba:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c2be:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c2c2:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c2c4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	0219      	lsls	r1, r3, #8
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	430b      	orrs	r3, r1
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	4a05      	ldr	r2, [pc, #20]	; (800c2e8 <FLASH_Erase_Sector+0x78>)
 800c2d4:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c2d8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800c2dc:	bf00      	nop
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	52002000 	.word	0x52002000

0800c2ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b089      	sub	sp, #36	; 0x24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c2fa:	4b89      	ldr	r3, [pc, #548]	; (800c520 <HAL_GPIO_Init+0x234>)
 800c2fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c2fe:	e194      	b.n	800c62a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	2101      	movs	r1, #1
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	fa01 f303 	lsl.w	r3, r1, r3
 800c30c:	4013      	ands	r3, r2
 800c30e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 8186 	beq.w	800c624 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	f003 0303 	and.w	r3, r3, #3
 800c320:	2b01      	cmp	r3, #1
 800c322:	d005      	beq.n	800c330 <HAL_GPIO_Init+0x44>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f003 0303 	and.w	r3, r3, #3
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d130      	bne.n	800c392 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	2203      	movs	r2, #3
 800c33c:	fa02 f303 	lsl.w	r3, r2, r3
 800c340:	43db      	mvns	r3, r3
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	4013      	ands	r3, r2
 800c346:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	68da      	ldr	r2, [r3, #12]
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	fa02 f303 	lsl.w	r3, r2, r3
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	4313      	orrs	r3, r2
 800c358:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	69ba      	ldr	r2, [r7, #24]
 800c35e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c366:	2201      	movs	r2, #1
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	fa02 f303 	lsl.w	r3, r2, r3
 800c36e:	43db      	mvns	r3, r3
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	4013      	ands	r3, r2
 800c374:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	091b      	lsrs	r3, r3, #4
 800c37c:	f003 0201 	and.w	r2, r3, #1
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	fa02 f303 	lsl.w	r3, r2, r3
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	4313      	orrs	r3, r2
 800c38a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f003 0303 	and.w	r3, r3, #3
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d017      	beq.n	800c3ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ae:	43db      	mvns	r3, r3
 800c3b0:	69ba      	ldr	r2, [r7, #24]
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	689a      	ldr	r2, [r3, #8]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	69ba      	ldr	r2, [r7, #24]
 800c3cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f003 0303 	and.w	r3, r3, #3
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d123      	bne.n	800c422 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	08da      	lsrs	r2, r3, #3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3208      	adds	r2, #8
 800c3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	f003 0307 	and.w	r3, r3, #7
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	220f      	movs	r2, #15
 800c3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f6:	43db      	mvns	r3, r3
 800c3f8:	69ba      	ldr	r2, [r7, #24]
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	691a      	ldr	r2, [r3, #16]
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	f003 0307 	and.w	r3, r3, #7
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	fa02 f303 	lsl.w	r3, r2, r3
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	4313      	orrs	r3, r2
 800c412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	08da      	lsrs	r2, r3, #3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	3208      	adds	r2, #8
 800c41c:	69b9      	ldr	r1, [r7, #24]
 800c41e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	2203      	movs	r2, #3
 800c42e:	fa02 f303 	lsl.w	r3, r2, r3
 800c432:	43db      	mvns	r3, r3
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	4013      	ands	r3, r2
 800c438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f003 0203 	and.w	r2, r3, #3
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	005b      	lsls	r3, r3, #1
 800c446:	fa02 f303 	lsl.w	r3, r2, r3
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 80e0 	beq.w	800c624 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c464:	4b2f      	ldr	r3, [pc, #188]	; (800c524 <HAL_GPIO_Init+0x238>)
 800c466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c46a:	4a2e      	ldr	r2, [pc, #184]	; (800c524 <HAL_GPIO_Init+0x238>)
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c474:	4b2b      	ldr	r3, [pc, #172]	; (800c524 <HAL_GPIO_Init+0x238>)
 800c476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c482:	4a29      	ldr	r2, [pc, #164]	; (800c528 <HAL_GPIO_Init+0x23c>)
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	089b      	lsrs	r3, r3, #2
 800c488:	3302      	adds	r3, #2
 800c48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c48e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	220f      	movs	r2, #15
 800c49a:	fa02 f303 	lsl.w	r3, r2, r3
 800c49e:	43db      	mvns	r3, r3
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a20      	ldr	r2, [pc, #128]	; (800c52c <HAL_GPIO_Init+0x240>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d052      	beq.n	800c554 <HAL_GPIO_Init+0x268>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a1f      	ldr	r2, [pc, #124]	; (800c530 <HAL_GPIO_Init+0x244>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d031      	beq.n	800c51a <HAL_GPIO_Init+0x22e>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a1e      	ldr	r2, [pc, #120]	; (800c534 <HAL_GPIO_Init+0x248>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d02b      	beq.n	800c516 <HAL_GPIO_Init+0x22a>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a1d      	ldr	r2, [pc, #116]	; (800c538 <HAL_GPIO_Init+0x24c>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d025      	beq.n	800c512 <HAL_GPIO_Init+0x226>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a1c      	ldr	r2, [pc, #112]	; (800c53c <HAL_GPIO_Init+0x250>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d01f      	beq.n	800c50e <HAL_GPIO_Init+0x222>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a1b      	ldr	r2, [pc, #108]	; (800c540 <HAL_GPIO_Init+0x254>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d019      	beq.n	800c50a <HAL_GPIO_Init+0x21e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a1a      	ldr	r2, [pc, #104]	; (800c544 <HAL_GPIO_Init+0x258>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d013      	beq.n	800c506 <HAL_GPIO_Init+0x21a>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a19      	ldr	r2, [pc, #100]	; (800c548 <HAL_GPIO_Init+0x25c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d00d      	beq.n	800c502 <HAL_GPIO_Init+0x216>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a18      	ldr	r2, [pc, #96]	; (800c54c <HAL_GPIO_Init+0x260>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d007      	beq.n	800c4fe <HAL_GPIO_Init+0x212>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a17      	ldr	r2, [pc, #92]	; (800c550 <HAL_GPIO_Init+0x264>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d101      	bne.n	800c4fa <HAL_GPIO_Init+0x20e>
 800c4f6:	2309      	movs	r3, #9
 800c4f8:	e02d      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	e02b      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c4fe:	2308      	movs	r3, #8
 800c500:	e029      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c502:	2307      	movs	r3, #7
 800c504:	e027      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c506:	2306      	movs	r3, #6
 800c508:	e025      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c50a:	2305      	movs	r3, #5
 800c50c:	e023      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c50e:	2304      	movs	r3, #4
 800c510:	e021      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c512:	2303      	movs	r3, #3
 800c514:	e01f      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c516:	2302      	movs	r3, #2
 800c518:	e01d      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e01b      	b.n	800c556 <HAL_GPIO_Init+0x26a>
 800c51e:	bf00      	nop
 800c520:	58000080 	.word	0x58000080
 800c524:	58024400 	.word	0x58024400
 800c528:	58000400 	.word	0x58000400
 800c52c:	58020000 	.word	0x58020000
 800c530:	58020400 	.word	0x58020400
 800c534:	58020800 	.word	0x58020800
 800c538:	58020c00 	.word	0x58020c00
 800c53c:	58021000 	.word	0x58021000
 800c540:	58021400 	.word	0x58021400
 800c544:	58021800 	.word	0x58021800
 800c548:	58021c00 	.word	0x58021c00
 800c54c:	58022000 	.word	0x58022000
 800c550:	58022400 	.word	0x58022400
 800c554:	2300      	movs	r3, #0
 800c556:	69fa      	ldr	r2, [r7, #28]
 800c558:	f002 0203 	and.w	r2, r2, #3
 800c55c:	0092      	lsls	r2, r2, #2
 800c55e:	4093      	lsls	r3, r2
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	4313      	orrs	r3, r2
 800c564:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c566:	4938      	ldr	r1, [pc, #224]	; (800c648 <HAL_GPIO_Init+0x35c>)
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	089b      	lsrs	r3, r3, #2
 800c56c:	3302      	adds	r3, #2
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	43db      	mvns	r3, r3
 800c580:	69ba      	ldr	r2, [r7, #24]
 800c582:	4013      	ands	r3, r2
 800c584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	4313      	orrs	r3, r2
 800c598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c59a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c5a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	43db      	mvns	r3, r3
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d003      	beq.n	800c5c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c5c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	43db      	mvns	r3, r3
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	4013      	ands	r3, r2
 800c5de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d003      	beq.n	800c5f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c5ec:	69ba      	ldr	r2, [r7, #24]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	43db      	mvns	r3, r3
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	4013      	ands	r3, r2
 800c608:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d003      	beq.n	800c61e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	3301      	adds	r3, #1
 800c628:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	fa22 f303 	lsr.w	r3, r2, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	f47f ae63 	bne.w	800c300 <HAL_GPIO_Init+0x14>
  }
}
 800c63a:	bf00      	nop
 800c63c:	bf00      	nop
 800c63e:	3724      	adds	r7, #36	; 0x24
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	58000400 	.word	0x58000400

0800c64c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	691a      	ldr	r2, [r3, #16]
 800c65c:	887b      	ldrh	r3, [r7, #2]
 800c65e:	4013      	ands	r3, r2
 800c660:	2b00      	cmp	r3, #0
 800c662:	d002      	beq.n	800c66a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c664:	2301      	movs	r3, #1
 800c666:	73fb      	strb	r3, [r7, #15]
 800c668:	e001      	b.n	800c66e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c66a:	2300      	movs	r3, #0
 800c66c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	807b      	strh	r3, [r7, #2]
 800c688:	4613      	mov	r3, r2
 800c68a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c68c:	787b      	ldrb	r3, [r7, #1]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c692:	887a      	ldrh	r2, [r7, #2]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c698:	e003      	b.n	800c6a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c69a:	887b      	ldrh	r3, [r7, #2]
 800c69c:	041a      	lsls	r2, r3, #16
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	619a      	str	r2, [r3, #24]
}
 800c6a2:	bf00      	nop
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
	...

0800c6b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e08b      	b.n	800c7da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7f6 fa52 	bl	8002b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2224      	movs	r2, #36	; 0x24
 800c6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f022 0201 	bic.w	r2, r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c700:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	689a      	ldr	r2, [r3, #8]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c710:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d107      	bne.n	800c72a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689a      	ldr	r2, [r3, #8]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c726:	609a      	str	r2, [r3, #8]
 800c728:	e006      	b.n	800c738 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689a      	ldr	r2, [r3, #8]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c736:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d108      	bne.n	800c752 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	685a      	ldr	r2, [r3, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c74e:	605a      	str	r2, [r3, #4]
 800c750:	e007      	b.n	800c762 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6859      	ldr	r1, [r3, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	4b1d      	ldr	r3, [pc, #116]	; (800c7e4 <HAL_I2C_Init+0x134>)
 800c76e:	430b      	orrs	r3, r1
 800c770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68da      	ldr	r2, [r3, #12]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	691a      	ldr	r2, [r3, #16]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	69d9      	ldr	r1, [r3, #28]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a1a      	ldr	r2, [r3, #32]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0201 	orr.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	02008000 	.word	0x02008000

0800c7e8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08a      	sub	sp, #40	; 0x28
 800c7ec:	af02      	add	r7, sp, #8
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	607a      	str	r2, [r7, #4]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	817b      	strh	r3, [r7, #10]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b20      	cmp	r3, #32
 800c80a:	f040 80ef 	bne.w	800c9ec <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c81c:	d101      	bne.n	800c822 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800c81e:	2302      	movs	r3, #2
 800c820:	e0e5      	b.n	800c9ee <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d101      	bne.n	800c830 <HAL_I2C_Master_Transmit_DMA+0x48>
 800c82c:	2302      	movs	r3, #2
 800c82e:	e0de      	b.n	800c9ee <HAL_I2C_Master_Transmit_DMA+0x206>
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2221      	movs	r2, #33	; 0x21
 800c83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2210      	movs	r2, #16
 800c844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	893a      	ldrh	r2, [r7, #8]
 800c858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	4a66      	ldr	r2, [pc, #408]	; (800c9f8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800c85e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4a66      	ldr	r2, [pc, #408]	; (800c9fc <HAL_I2C_Master_Transmit_DMA+0x214>)
 800c864:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	2bff      	cmp	r3, #255	; 0xff
 800c86e:	d906      	bls.n	800c87e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	22ff      	movs	r2, #255	; 0xff
 800c874:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800c876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c87a:	61fb      	str	r3, [r7, #28]
 800c87c:	e007      	b.n	800c88e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c882:	b29a      	uxth	r2, r3
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800c888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c88c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c892:	2b00      	cmp	r3, #0
 800c894:	d01a      	beq.n	800c8cc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89a:	781a      	ldrb	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a6:	1c5a      	adds	r2, r3, #1
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8b0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d074      	beq.n	800c9be <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d022      	beq.n	800c922 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	4a47      	ldr	r2, [pc, #284]	; (800ca00 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800c8e2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e8:	4a46      	ldr	r2, [pc, #280]	; (800ca04 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800c8ea:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c904:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800c90c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800c912:	f7fc fd21 	bl	8009358 <HAL_DMA_Start_IT>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d13a      	bne.n	800c996 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800c920:	e013      	b.n	800c94a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2220      	movs	r2, #32
 800c926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c936:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e051      	b.n	800c9ee <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	3301      	adds	r3, #1
 800c952:	b2da      	uxtb	r2, r3
 800c954:	8979      	ldrh	r1, [r7, #10]
 800c956:	4b2c      	ldr	r3, [pc, #176]	; (800ca08 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f002 f83b 	bl	800e9d8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c966:	b29a      	uxth	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c97c:	2110      	movs	r1, #16
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f002 f85c 	bl	800ea3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	e028      	b.n	800c9e8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2220      	movs	r2, #32
 800c99a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9aa:	f043 0210 	orr.w	r2, r3, #16
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e017      	b.n	800c9ee <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	4a12      	ldr	r2, [pc, #72]	; (800ca0c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800c9c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	8979      	ldrh	r1, [r7, #10]
 800c9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f002 f800 	bl	800e9d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f002 f82a 	bl	800ea3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e000      	b.n	800c9ee <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800c9ec:	2302      	movs	r3, #2
  }
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3720      	adds	r7, #32
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	ffff0000 	.word	0xffff0000
 800c9fc:	0800d243 	.word	0x0800d243
 800ca00:	0800e5fb 	.word	0x0800e5fb
 800ca04:	0800e729 	.word	0x0800e729
 800ca08:	80002000 	.word	0x80002000
 800ca0c:	0800cdd3 	.word	0x0800cdd3

0800ca10 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b088      	sub	sp, #32
 800ca14:	af02      	add	r7, sp, #8
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	607a      	str	r2, [r7, #4]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	817b      	strh	r3, [r7, #10]
 800ca20:	4613      	mov	r3, r2
 800ca22:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b20      	cmp	r3, #32
 800ca2e:	f040 80cd 	bne.w	800cbcc <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca40:	d101      	bne.n	800ca46 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800ca42:	2302      	movs	r3, #2
 800ca44:	e0c3      	b.n	800cbce <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d101      	bne.n	800ca54 <HAL_I2C_Master_Receive_DMA+0x44>
 800ca50:	2302      	movs	r3, #2
 800ca52:	e0bc      	b.n	800cbce <HAL_I2C_Master_Receive_DMA+0x1be>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2201      	movs	r2, #1
 800ca58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2222      	movs	r2, #34	; 0x22
 800ca60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2210      	movs	r2, #16
 800ca68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	893a      	ldrh	r2, [r7, #8]
 800ca7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4a55      	ldr	r2, [pc, #340]	; (800cbd8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800ca82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	4a55      	ldr	r2, [pc, #340]	; (800cbdc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800ca88:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	2bff      	cmp	r3, #255	; 0xff
 800ca92:	d906      	bls.n	800caa2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	22ff      	movs	r2, #255	; 0xff
 800ca98:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800ca9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	e007      	b.n	800cab2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800caac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cab0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d070      	beq.n	800cb9c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d020      	beq.n	800cb04 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac6:	4a46      	ldr	r2, [pc, #280]	; (800cbe0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800cac8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cace:	4a45      	ldr	r2, [pc, #276]	; (800cbe4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800cad0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad6:	2200      	movs	r2, #0
 800cad8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cade:	2200      	movs	r2, #0
 800cae0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3324      	adds	r3, #36	; 0x24
 800caec:	4619      	mov	r1, r3
 800caee:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800caf4:	f7fc fc30 	bl	8009358 <HAL_DMA_Start_IT>
 800caf8:	4603      	mov	r3, r0
 800cafa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cafc:	7cfb      	ldrb	r3, [r7, #19]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d138      	bne.n	800cb74 <HAL_I2C_Master_Receive_DMA+0x164>
 800cb02:	e013      	b.n	800cb2c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2220      	movs	r2, #32
 800cb08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e050      	b.n	800cbce <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	8979      	ldrh	r1, [r7, #10]
 800cb34:	4b2c      	ldr	r3, [pc, #176]	; (800cbe8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f001 ff4c 	bl	800e9d8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cb5a:	2110      	movs	r1, #16
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f001 ff6d 	bl	800ea3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	e029      	b.n	800cbc8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2220      	movs	r2, #32
 800cb78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb88:	f043 0210 	orr.w	r2, r3, #16
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e018      	b.n	800cbce <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	4a13      	ldr	r2, [pc, #76]	; (800cbec <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800cba0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	8979      	ldrh	r1, [r7, #10]
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f001 ff10 	bl	800e9d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cbc0:	2102      	movs	r1, #2
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f001 ff3a 	bl	800ea3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	e000      	b.n	800cbce <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800cbcc:	2302      	movs	r3, #2
  }
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	ffff0000 	.word	0xffff0000
 800cbdc:	0800d243 	.word	0x0800d243
 800cbe0:	0800e691 	.word	0x0800e691
 800cbe4:	0800e729 	.word	0x0800e729
 800cbe8:	80002400 	.word	0x80002400
 800cbec:	0800cdd3 	.word	0x0800cdd3

0800cbf0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d005      	beq.n	800cc1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	4798      	blx	r3
  }
}
 800cc1c:	bf00      	nop
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	0a1b      	lsrs	r3, r3, #8
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d010      	beq.n	800cc6a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	09db      	lsrs	r3, r3, #7
 800cc4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00a      	beq.n	800cc6a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc58:	f043 0201 	orr.w	r2, r3, #1
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	0a9b      	lsrs	r3, r3, #10
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d010      	beq.n	800cc98 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	09db      	lsrs	r3, r3, #7
 800cc7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc86:	f043 0208 	orr.w	r2, r3, #8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	0a5b      	lsrs	r3, r3, #9
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d010      	beq.n	800ccc6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	09db      	lsrs	r3, r3, #7
 800cca8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00a      	beq.n	800ccc6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccb4:	f043 0202 	orr.w	r2, r3, #2
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccc4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f003 030b 	and.w	r3, r3, #11
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f001 fb53 	bl	800e384 <I2C_ITError>
  }
}
 800ccde:	bf00      	nop
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ccee:	bf00      	nop
 800ccf0:	370c      	adds	r7, #12
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b083      	sub	sp, #12
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b083      	sub	sp, #12
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd22:	b480      	push	{r7}
 800cd24:	b083      	sub	sp, #12
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cd2a:	bf00      	nop
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cd36:	b480      	push	{r7}
 800cd38:	b083      	sub	sp, #12
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	70fb      	strb	r3, [r7, #3]
 800cd42:	4613      	mov	r3, r2
 800cd44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800cd6e:	bf00      	nop
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b083      	sub	sp, #12
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800cdaa:	bf00      	nop
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b083      	sub	sp, #12
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdc4:	b2db      	uxtb	r3, r3
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b088      	sub	sp, #32
 800cdd6:	af02      	add	r7, sp, #8
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d101      	bne.n	800cdf0 <I2C_Master_ISR_IT+0x1e>
 800cdec:	2302      	movs	r3, #2
 800cdee:	e120      	b.n	800d032 <I2C_Master_ISR_IT+0x260>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	091b      	lsrs	r3, r3, #4
 800cdfc:	f003 0301 	and.w	r3, r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d013      	beq.n	800ce2c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	091b      	lsrs	r3, r3, #4
 800ce08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00d      	beq.n	800ce2c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2210      	movs	r2, #16
 800ce16:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce1c:	f043 0204 	orr.w	r2, r3, #4
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f001 fbc4 	bl	800e5b2 <I2C_Flush_TXDR>
 800ce2a:	e0ed      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	089b      	lsrs	r3, r3, #2
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d023      	beq.n	800ce80 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	089b      	lsrs	r3, r3, #2
 800ce3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d01d      	beq.n	800ce80 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f023 0304 	bic.w	r3, r3, #4
 800ce4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	3b01      	subs	r3, #1
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce7e:	e0c3      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	099b      	lsrs	r3, r3, #6
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d12a      	bne.n	800cee2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d024      	beq.n	800cee2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	085b      	lsrs	r3, r3, #1
 800ce9c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d01e      	beq.n	800cee2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f000 80ac 	beq.w	800d008 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb4:	781a      	ldrb	r2, [r3, #0]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceca:	3b01      	subs	r3, #1
 800cecc:	b29a      	uxth	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	3b01      	subs	r3, #1
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800cee0:	e092      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	09db      	lsrs	r3, r3, #7
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d05d      	beq.n	800cfaa <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	099b      	lsrs	r3, r3, #6
 800cef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d057      	beq.n	800cfaa <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d040      	beq.n	800cf86 <I2C_Master_ISR_IT+0x1b4>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d13c      	bne.n	800cf86 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf18:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	2bff      	cmp	r3, #255	; 0xff
 800cf22:	d90e      	bls.n	800cf42 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	22ff      	movs	r2, #255	; 0xff
 800cf28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	8a79      	ldrh	r1, [r7, #18]
 800cf32:	2300      	movs	r3, #0
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f001 fd4c 	bl	800e9d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf40:	e032      	b.n	800cfa8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf54:	d00b      	beq.n	800cf6e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	8a79      	ldrh	r1, [r7, #18]
 800cf62:	2000      	movs	r0, #0
 800cf64:	9000      	str	r0, [sp, #0]
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f001 fd36 	bl	800e9d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf6c:	e01c      	b.n	800cfa8 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	8a79      	ldrh	r1, [r7, #18]
 800cf76:	2300      	movs	r3, #0
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f001 fd2a 	bl	800e9d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf84:	e010      	b.n	800cfa8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf94:	d003      	beq.n	800cf9e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 fdde 	bl	800db58 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cf9c:	e034      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800cf9e:	2140      	movs	r1, #64	; 0x40
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f001 f9ef 	bl	800e384 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cfa6:	e02f      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
 800cfa8:	e02e      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	099b      	lsrs	r3, r3, #6
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d028      	beq.n	800d008 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	099b      	lsrs	r3, r3, #6
 800cfba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d022      	beq.n	800d008 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d119      	bne.n	800d000 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfda:	d015      	beq.n	800d008 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cfe4:	d108      	bne.n	800cff8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cff4:	605a      	str	r2, [r3, #4]
 800cff6:	e007      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 fdad 	bl	800db58 <I2C_ITMasterSeqCplt>
 800cffe:	e003      	b.n	800d008 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d000:	2140      	movs	r1, #64	; 0x40
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f001 f9be 	bl	800e384 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	095b      	lsrs	r3, r3, #5
 800d00c:	f003 0301 	and.w	r3, r3, #1
 800d010:	2b00      	cmp	r3, #0
 800d012:	d009      	beq.n	800d028 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800d020:	6979      	ldr	r1, [r7, #20]
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f000 fe34 	bl	800dc90 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b086      	sub	sp, #24
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d056:	2b01      	cmp	r3, #1
 800d058:	d101      	bne.n	800d05e <I2C_Slave_ISR_IT+0x24>
 800d05a:	2302      	movs	r3, #2
 800d05c:	e0ed      	b.n	800d23a <I2C_Slave_ISR_IT+0x200>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2201      	movs	r2, #1
 800d062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	095b      	lsrs	r3, r3, #5
 800d06a:	f003 0301 	and.w	r3, r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	095b      	lsrs	r3, r3, #5
 800d076:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d004      	beq.n	800d088 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d07e:	6939      	ldr	r1, [r7, #16]
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f000 fecf 	bl	800de24 <I2C_ITSlaveCplt>
 800d086:	e0d3      	b.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	091b      	lsrs	r3, r3, #4
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d04d      	beq.n	800d130 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	091b      	lsrs	r3, r3, #4
 800d098:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d047      	beq.n	800d130 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d128      	bne.n	800d0fc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b28      	cmp	r3, #40	; 0x28
 800d0b4:	d108      	bne.n	800d0c8 <I2C_Slave_ISR_IT+0x8e>
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0bc:	d104      	bne.n	800d0c8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d0be:	6939      	ldr	r1, [r7, #16]
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f001 f909 	bl	800e2d8 <I2C_ITListenCplt>
 800d0c6:	e032      	b.n	800d12e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b29      	cmp	r3, #41	; 0x29
 800d0d2:	d10e      	bne.n	800d0f2 <I2C_Slave_ISR_IT+0xb8>
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d0da:	d00a      	beq.n	800d0f2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2210      	movs	r2, #16
 800d0e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f001 fa64 	bl	800e5b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f000 fd71 	bl	800dbd2 <I2C_ITSlaveSeqCplt>
 800d0f0:	e01d      	b.n	800d12e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2210      	movs	r2, #16
 800d0f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d0fa:	e096      	b.n	800d22a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2210      	movs	r2, #16
 800d102:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d108:	f043 0204 	orr.w	r2, r3, #4
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d004      	beq.n	800d120 <I2C_Slave_ISR_IT+0xe6>
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d11c:	f040 8085 	bne.w	800d22a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d124:	4619      	mov	r1, r3
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f001 f92c 	bl	800e384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d12c:	e07d      	b.n	800d22a <I2C_Slave_ISR_IT+0x1f0>
 800d12e:	e07c      	b.n	800d22a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	089b      	lsrs	r3, r3, #2
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d030      	beq.n	800d19e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	089b      	lsrs	r3, r3, #2
 800d140:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d144:	2b00      	cmp	r3, #0
 800d146:	d02a      	beq.n	800d19e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d018      	beq.n	800d184 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15c:	b2d2      	uxtb	r2, r2
 800d15e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d16e:	3b01      	subs	r3, #1
 800d170:	b29a      	uxth	r2, r3
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	3b01      	subs	r3, #1
 800d17e:	b29a      	uxth	r2, r3
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d188:	b29b      	uxth	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d14f      	bne.n	800d22e <I2C_Slave_ISR_IT+0x1f4>
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d194:	d04b      	beq.n	800d22e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fd1b 	bl	800dbd2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d19c:	e047      	b.n	800d22e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	08db      	lsrs	r3, r3, #3
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00a      	beq.n	800d1c0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	08db      	lsrs	r3, r3, #3
 800d1ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d004      	beq.n	800d1c0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d1b6:	6939      	ldr	r1, [r7, #16]
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 fc49 	bl	800da50 <I2C_ITAddrCplt>
 800d1be:	e037      	b.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	085b      	lsrs	r3, r3, #1
 800d1c4:	f003 0301 	and.w	r3, r3, #1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d031      	beq.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	085b      	lsrs	r3, r3, #1
 800d1d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d02b      	beq.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d018      	beq.n	800d214 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e6:	781a      	ldrb	r2, [r3, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	3b01      	subs	r3, #1
 800d200:	b29a      	uxth	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	851a      	strh	r2, [r3, #40]	; 0x28
 800d212:	e00d      	b.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d21a:	d002      	beq.n	800d222 <I2C_Slave_ISR_IT+0x1e8>
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d106      	bne.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fcd5 	bl	800dbd2 <I2C_ITSlaveSeqCplt>
 800d228:	e002      	b.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800d22a:	bf00      	nop
 800d22c:	e000      	b.n	800d230 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800d22e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b088      	sub	sp, #32
 800d246:	af02      	add	r7, sp, #8
 800d248:	60f8      	str	r0, [r7, #12]
 800d24a:	60b9      	str	r1, [r7, #8]
 800d24c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d254:	2b01      	cmp	r3, #1
 800d256:	d101      	bne.n	800d25c <I2C_Master_ISR_DMA+0x1a>
 800d258:	2302      	movs	r3, #2
 800d25a:	e0e1      	b.n	800d420 <I2C_Master_ISR_DMA+0x1de>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	091b      	lsrs	r3, r3, #4
 800d268:	f003 0301 	and.w	r3, r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d017      	beq.n	800d2a0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	091b      	lsrs	r3, r3, #4
 800d274:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d011      	beq.n	800d2a0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2210      	movs	r2, #16
 800d282:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d288:	f043 0204 	orr.w	r2, r3, #4
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d290:	2120      	movs	r1, #32
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f001 fbd2 	bl	800ea3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f001 f98a 	bl	800e5b2 <I2C_Flush_TXDR>
 800d29e:	e0ba      	b.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	09db      	lsrs	r3, r3, #7
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d072      	beq.n	800d392 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	099b      	lsrs	r3, r3, #6
 800d2b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d06c      	beq.n	800d392 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2c6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d04e      	beq.n	800d370 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2de:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	2bff      	cmp	r3, #255	; 0xff
 800d2e8:	d906      	bls.n	800d2f8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	22ff      	movs	r2, #255	; 0xff
 800d2ee:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800d2f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2f4:	617b      	str	r3, [r7, #20]
 800d2f6:	e010      	b.n	800d31a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d306:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d30a:	d003      	beq.n	800d314 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	e002      	b.n	800d31a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800d314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d318:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	8a79      	ldrh	r1, [r7, #18]
 800d322:	2300      	movs	r3, #0
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f001 fb55 	bl	800e9d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d332:	b29a      	uxth	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b22      	cmp	r3, #34	; 0x22
 800d34a:	d108      	bne.n	800d35e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d35a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d35c:	e05b      	b.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d36c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d36e:	e052      	b.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d37a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d37e:	d003      	beq.n	800d388 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f000 fbe9 	bl	800db58 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800d386:	e046      	b.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d388:	2140      	movs	r1, #64	; 0x40
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 fffa 	bl	800e384 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d390:	e041      	b.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	099b      	lsrs	r3, r3, #6
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d029      	beq.n	800d3f2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	099b      	lsrs	r3, r3, #6
 800d3a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d023      	beq.n	800d3f2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d119      	bne.n	800d3e8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3c2:	d027      	beq.n	800d414 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3cc:	d108      	bne.n	800d3e0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3dc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800d3de:	e019      	b.n	800d414 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f000 fbb9 	bl	800db58 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800d3e6:	e015      	b.n	800d414 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d3e8:	2140      	movs	r1, #64	; 0x40
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	f000 ffca 	bl	800e384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d3f0:	e010      	b.n	800d414 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	095b      	lsrs	r3, r3, #5
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00b      	beq.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	095b      	lsrs	r3, r3, #5
 800d402:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d40a:	68b9      	ldr	r1, [r7, #8]
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 fc3f 	bl	800dc90 <I2C_ITMasterCplt>
 800d412:	e000      	b.n	800d416 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800d414:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b088      	sub	sp, #32
 800d42c:	af02      	add	r7, sp, #8
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800d434:	4b92      	ldr	r3, [pc, #584]	; (800d680 <I2C_Mem_ISR_DMA+0x258>)
 800d436:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d101      	bne.n	800d446 <I2C_Mem_ISR_DMA+0x1e>
 800d442:	2302      	movs	r3, #2
 800d444:	e118      	b.n	800d678 <I2C_Mem_ISR_DMA+0x250>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	091b      	lsrs	r3, r3, #4
 800d452:	f003 0301 	and.w	r3, r3, #1
 800d456:	2b00      	cmp	r3, #0
 800d458:	d017      	beq.n	800d48a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	091b      	lsrs	r3, r3, #4
 800d45e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d462:	2b00      	cmp	r3, #0
 800d464:	d011      	beq.n	800d48a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2210      	movs	r2, #16
 800d46c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d472:	f043 0204 	orr.w	r2, r3, #4
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d47a:	2120      	movs	r1, #32
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f001 fadd 	bl	800ea3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f001 f895 	bl	800e5b2 <I2C_Flush_TXDR>
 800d488:	e0f1      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00f      	beq.n	800d4b6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	085b      	lsrs	r3, r3, #1
 800d49a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d009      	beq.n	800d4b6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d4aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4b2:	651a      	str	r2, [r3, #80]	; 0x50
 800d4b4:	e0db      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	09db      	lsrs	r3, r3, #7
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d060      	beq.n	800d584 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	099b      	lsrs	r3, r3, #6
 800d4c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d05a      	beq.n	800d584 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f001 fb37 	bl	800eb44 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d4d6:	2110      	movs	r1, #16
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f001 faaf 	bl	800ea3c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d048      	beq.n	800d57a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	2bff      	cmp	r3, #255	; 0xff
 800d4f0:	d910      	bls.n	800d514 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	22ff      	movs	r2, #255	; 0xff
 800d4f6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4fc:	b299      	uxth	r1, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d502:	b2da      	uxtb	r2, r3
 800d504:	2300      	movs	r3, #0
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f001 fa63 	bl	800e9d8 <I2C_TransferConfig>
 800d512:	e011      	b.n	800d538 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d518:	b29a      	uxth	r2, r3
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d522:	b299      	uxth	r1, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	2300      	movs	r3, #0
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f001 fa50 	bl	800e9d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	b29a      	uxth	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b22      	cmp	r3, #34	; 0x22
 800d554:	d108      	bne.n	800d568 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d564:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d566:	e082      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d576:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d578:	e079      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d57a:	2140      	movs	r1, #64	; 0x40
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 ff01 	bl	800e384 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d582:	e074      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	099b      	lsrs	r3, r3, #6
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d05e      	beq.n	800d64e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	099b      	lsrs	r3, r3, #6
 800d594:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d058      	beq.n	800d64e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d59c:	2101      	movs	r1, #1
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f001 fad0 	bl	800eb44 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d5a4:	2110      	movs	r1, #16
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f001 fa48 	bl	800ea3c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b22      	cmp	r3, #34	; 0x22
 800d5b6:	d101      	bne.n	800d5bc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800d5b8:	4b32      	ldr	r3, [pc, #200]	; (800d684 <I2C_Mem_ISR_DMA+0x25c>)
 800d5ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	2bff      	cmp	r3, #255	; 0xff
 800d5c4:	d910      	bls.n	800d5e8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	22ff      	movs	r2, #255	; 0xff
 800d5ca:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5d0:	b299      	uxth	r1, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f001 f9f9 	bl	800e9d8 <I2C_TransferConfig>
 800d5e6:	e011      	b.n	800d60c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5f6:	b299      	uxth	r1, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f001 f9e6 	bl	800e9d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d610:	b29a      	uxth	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	b29a      	uxth	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b22      	cmp	r3, #34	; 0x22
 800d628:	d108      	bne.n	800d63c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d638:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d63a:	e018      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d64a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d64c:	e00f      	b.n	800d66e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	095b      	lsrs	r3, r3, #5
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	2b00      	cmp	r3, #0
 800d658:	d009      	beq.n	800d66e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	095b      	lsrs	r3, r3, #5
 800d65e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 fb11 	bl	800dc90 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2200      	movs	r2, #0
 800d672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	80002000 	.word	0x80002000
 800d684:	80002400 	.word	0x80002400

0800d688 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800d69a:	2300      	movs	r3, #0
 800d69c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d101      	bne.n	800d6ac <I2C_Slave_ISR_DMA+0x24>
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	e1cc      	b.n	800da46 <I2C_Slave_ISR_DMA+0x3be>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	095b      	lsrs	r3, r3, #5
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00a      	beq.n	800d6d6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	095b      	lsrs	r3, r3, #5
 800d6c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d004      	beq.n	800d6d6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 fba8 	bl	800de24 <I2C_ITSlaveCplt>
 800d6d4:	e1b2      	b.n	800da3c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	091b      	lsrs	r3, r3, #4
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 819c 	beq.w	800da1c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	091b      	lsrs	r3, r3, #4
 800d6e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f000 8195 	beq.w	800da1c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	0b9b      	lsrs	r3, r3, #14
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	0bdb      	lsrs	r3, r3, #15
 800d702:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 8181 	beq.w	800da0e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d710:	2b00      	cmp	r3, #0
 800d712:	d07c      	beq.n	800d80e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	0bdb      	lsrs	r3, r3, #15
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d076      	beq.n	800d80e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a75      	ldr	r2, [pc, #468]	; (800d8fc <I2C_Slave_ISR_DMA+0x274>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d059      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a73      	ldr	r2, [pc, #460]	; (800d900 <I2C_Slave_ISR_DMA+0x278>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d053      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a71      	ldr	r2, [pc, #452]	; (800d904 <I2C_Slave_ISR_DMA+0x27c>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d04d      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a6f      	ldr	r2, [pc, #444]	; (800d908 <I2C_Slave_ISR_DMA+0x280>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d047      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a6d      	ldr	r2, [pc, #436]	; (800d90c <I2C_Slave_ISR_DMA+0x284>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d041      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a6b      	ldr	r2, [pc, #428]	; (800d910 <I2C_Slave_ISR_DMA+0x288>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d03b      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a69      	ldr	r2, [pc, #420]	; (800d914 <I2C_Slave_ISR_DMA+0x28c>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d035      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a67      	ldr	r2, [pc, #412]	; (800d918 <I2C_Slave_ISR_DMA+0x290>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d02f      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a65      	ldr	r2, [pc, #404]	; (800d91c <I2C_Slave_ISR_DMA+0x294>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d029      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a63      	ldr	r2, [pc, #396]	; (800d920 <I2C_Slave_ISR_DMA+0x298>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d023      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a61      	ldr	r2, [pc, #388]	; (800d924 <I2C_Slave_ISR_DMA+0x29c>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d01d      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a5f      	ldr	r2, [pc, #380]	; (800d928 <I2C_Slave_ISR_DMA+0x2a0>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d017      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a5d      	ldr	r2, [pc, #372]	; (800d92c <I2C_Slave_ISR_DMA+0x2a4>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d011      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a5b      	ldr	r2, [pc, #364]	; (800d930 <I2C_Slave_ISR_DMA+0x2a8>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d00b      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a59      	ldr	r2, [pc, #356]	; (800d934 <I2C_Slave_ISR_DMA+0x2ac>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d005      	beq.n	800d7e0 <I2C_Slave_ISR_DMA+0x158>
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a57      	ldr	r2, [pc, #348]	; (800d938 <I2C_Slave_ISR_DMA+0x2b0>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d109      	bne.n	800d7f4 <I2C_Slave_ISR_DMA+0x16c>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	bf0c      	ite	eq
 800d7ec:	2301      	moveq	r3, #1
 800d7ee:	2300      	movne	r3, #0
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	e008      	b.n	800d806 <I2C_Slave_ISR_DMA+0x17e>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bf0c      	ite	eq
 800d800:	2301      	moveq	r3, #1
 800d802:	2300      	movne	r3, #0
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800d80a:	2301      	movs	r3, #1
 800d80c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 809f 	beq.w	800d956 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	0b9b      	lsrs	r3, r3, #14
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 8098 	beq.w	800d956 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a33      	ldr	r2, [pc, #204]	; (800d8fc <I2C_Slave_ISR_DMA+0x274>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d059      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a31      	ldr	r2, [pc, #196]	; (800d900 <I2C_Slave_ISR_DMA+0x278>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d053      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a2f      	ldr	r2, [pc, #188]	; (800d904 <I2C_Slave_ISR_DMA+0x27c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d04d      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a2d      	ldr	r2, [pc, #180]	; (800d908 <I2C_Slave_ISR_DMA+0x280>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d047      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a2b      	ldr	r2, [pc, #172]	; (800d90c <I2C_Slave_ISR_DMA+0x284>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d041      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a29      	ldr	r2, [pc, #164]	; (800d910 <I2C_Slave_ISR_DMA+0x288>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d03b      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a27      	ldr	r2, [pc, #156]	; (800d914 <I2C_Slave_ISR_DMA+0x28c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d035      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a25      	ldr	r2, [pc, #148]	; (800d918 <I2C_Slave_ISR_DMA+0x290>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d02f      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a23      	ldr	r2, [pc, #140]	; (800d91c <I2C_Slave_ISR_DMA+0x294>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d029      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a21      	ldr	r2, [pc, #132]	; (800d920 <I2C_Slave_ISR_DMA+0x298>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d023      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a1f      	ldr	r2, [pc, #124]	; (800d924 <I2C_Slave_ISR_DMA+0x29c>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d01d      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a1d      	ldr	r2, [pc, #116]	; (800d928 <I2C_Slave_ISR_DMA+0x2a0>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d017      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a1b      	ldr	r2, [pc, #108]	; (800d92c <I2C_Slave_ISR_DMA+0x2a4>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d011      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a19      	ldr	r2, [pc, #100]	; (800d930 <I2C_Slave_ISR_DMA+0x2a8>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d00b      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a17      	ldr	r2, [pc, #92]	; (800d934 <I2C_Slave_ISR_DMA+0x2ac>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d005      	beq.n	800d8e6 <I2C_Slave_ISR_DMA+0x25e>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a15      	ldr	r2, [pc, #84]	; (800d938 <I2C_Slave_ISR_DMA+0x2b0>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d12a      	bne.n	800d93c <I2C_Slave_ISR_DMA+0x2b4>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	bf0c      	ite	eq
 800d8f2:	2301      	moveq	r3, #1
 800d8f4:	2300      	movne	r3, #0
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	e029      	b.n	800d94e <I2C_Slave_ISR_DMA+0x2c6>
 800d8fa:	bf00      	nop
 800d8fc:	40020010 	.word	0x40020010
 800d900:	40020028 	.word	0x40020028
 800d904:	40020040 	.word	0x40020040
 800d908:	40020058 	.word	0x40020058
 800d90c:	40020070 	.word	0x40020070
 800d910:	40020088 	.word	0x40020088
 800d914:	400200a0 	.word	0x400200a0
 800d918:	400200b8 	.word	0x400200b8
 800d91c:	40020410 	.word	0x40020410
 800d920:	40020428 	.word	0x40020428
 800d924:	40020440 	.word	0x40020440
 800d928:	40020458 	.word	0x40020458
 800d92c:	40020470 	.word	0x40020470
 800d930:	40020488 	.word	0x40020488
 800d934:	400204a0 	.word	0x400204a0
 800d938:	400204b8 	.word	0x400204b8
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	bf0c      	ite	eq
 800d948:	2301      	moveq	r3, #1
 800d94a:	2300      	movne	r3, #0
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800d952:	2301      	movs	r3, #1
 800d954:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d128      	bne.n	800d9ae <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b28      	cmp	r3, #40	; 0x28
 800d966:	d108      	bne.n	800d97a <I2C_Slave_ISR_DMA+0x2f2>
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d96e:	d104      	bne.n	800d97a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f000 fcb0 	bl	800e2d8 <I2C_ITListenCplt>
 800d978:	e048      	b.n	800da0c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b29      	cmp	r3, #41	; 0x29
 800d984:	d10e      	bne.n	800d9a4 <I2C_Slave_ISR_DMA+0x31c>
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d98c:	d00a      	beq.n	800d9a4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2210      	movs	r2, #16
 800d994:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f000 fe0b 	bl	800e5b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 f918 	bl	800dbd2 <I2C_ITSlaveSeqCplt>
 800d9a2:	e033      	b.n	800da0c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2210      	movs	r2, #16
 800d9aa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800d9ac:	e034      	b.n	800da18 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2210      	movs	r2, #16
 800d9b4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ba:	f043 0204 	orr.w	r2, r3, #4
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9c8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <I2C_Slave_ISR_DMA+0x350>
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d9d6:	d11f      	bne.n	800da18 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	2b21      	cmp	r3, #33	; 0x21
 800d9dc:	d002      	beq.n	800d9e4 <I2C_Slave_ISR_DMA+0x35c>
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	2b29      	cmp	r3, #41	; 0x29
 800d9e2:	d103      	bne.n	800d9ec <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2221      	movs	r2, #33	; 0x21
 800d9e8:	631a      	str	r2, [r3, #48]	; 0x30
 800d9ea:	e008      	b.n	800d9fe <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	2b22      	cmp	r3, #34	; 0x22
 800d9f0:	d002      	beq.n	800d9f8 <I2C_Slave_ISR_DMA+0x370>
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d9f6:	d102      	bne.n	800d9fe <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2222      	movs	r2, #34	; 0x22
 800d9fc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da02:	4619      	mov	r1, r3
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 fcbd 	bl	800e384 <I2C_ITError>
      if (treatdmanack == 1U)
 800da0a:	e005      	b.n	800da18 <I2C_Slave_ISR_DMA+0x390>
 800da0c:	e004      	b.n	800da18 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2210      	movs	r2, #16
 800da14:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800da16:	e011      	b.n	800da3c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800da18:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800da1a:	e00f      	b.n	800da3c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	08db      	lsrs	r3, r3, #3
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	2b00      	cmp	r3, #0
 800da26:	d009      	beq.n	800da3c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	08db      	lsrs	r3, r3, #3
 800da2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 f80a 	bl	800da50 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3720      	adds	r7, #32
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop

0800da50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800da66:	2b28      	cmp	r3, #40	; 0x28
 800da68:	d16a      	bne.n	800db40 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	0c1b      	lsrs	r3, r3, #16
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	0c1b      	lsrs	r3, r3, #16
 800da82:	b29b      	uxth	r3, r3
 800da84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800da88:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	b29b      	uxth	r3, r3
 800da92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da96:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800daa4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d138      	bne.n	800db20 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800daae:	897b      	ldrh	r3, [r7, #10]
 800dab0:	09db      	lsrs	r3, r3, #7
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	89bb      	ldrh	r3, [r7, #12]
 800dab6:	4053      	eors	r3, r2
 800dab8:	b29b      	uxth	r3, r3
 800daba:	f003 0306 	and.w	r3, r3, #6
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d11c      	bne.n	800dafc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800dac2:	897b      	ldrh	r3, [r7, #10]
 800dac4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d13b      	bne.n	800db50 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2208      	movs	r2, #8
 800dae4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800daee:	89ba      	ldrh	r2, [r7, #12]
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff f91e 	bl	800cd36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800dafa:	e029      	b.n	800db50 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800dafc:	893b      	ldrh	r3, [r7, #8]
 800dafe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800db00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f001 f81d 	bl	800eb44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800db12:	89ba      	ldrh	r2, [r7, #12]
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff f90c 	bl	800cd36 <HAL_I2C_AddrCallback>
}
 800db1e:	e017      	b.n	800db50 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800db20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f001 f80d 	bl	800eb44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800db32:	89ba      	ldrh	r2, [r7, #12]
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7ff f8fc 	bl	800cd36 <HAL_I2C_AddrCallback>
}
 800db3e:	e007      	b.n	800db50 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2208      	movs	r2, #8
 800db46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b21      	cmp	r3, #33	; 0x21
 800db72:	d115      	bne.n	800dba0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2220      	movs	r2, #32
 800db78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2211      	movs	r2, #17
 800db80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800db88:	2101      	movs	r1, #1
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 ffda 	bl	800eb44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff f8a4 	bl	800cce6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800db9e:	e014      	b.n	800dbca <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2220      	movs	r2, #32
 800dba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2212      	movs	r2, #18
 800dbac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dbb4:	2102      	movs	r1, #2
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 ffc4 	bl	800eb44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7ff f898 	bl	800ccfa <HAL_I2C_MasterRxCpltCallback>
}
 800dbca:	bf00      	nop
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	0b9b      	lsrs	r3, r3, #14
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d008      	beq.n	800dc08 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	e00d      	b.n	800dc24 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	0bdb      	lsrs	r3, r3, #15
 800dc0c:	f003 0301 	and.w	r3, r3, #1
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d007      	beq.n	800dc24 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc22:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2b29      	cmp	r3, #41	; 0x29
 800dc2e:	d112      	bne.n	800dc56 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2228      	movs	r2, #40	; 0x28
 800dc34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2221      	movs	r2, #33	; 0x21
 800dc3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dc3e:	2101      	movs	r1, #1
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 ff7f 	bl	800eb44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff f85d 	bl	800cd0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dc54:	e017      	b.n	800dc86 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc60:	d111      	bne.n	800dc86 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2228      	movs	r2, #40	; 0x28
 800dc66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2222      	movs	r2, #34	; 0x22
 800dc6e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dc70:	2102      	movs	r1, #2
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 ff66 	bl	800eb44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff f84e 	bl	800cd22 <HAL_I2C_SlaveRxCpltCallback>
}
 800dc86:	bf00      	nop
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2220      	movs	r2, #32
 800dca4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	2b21      	cmp	r3, #33	; 0x21
 800dcb0:	d107      	bne.n	800dcc2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 ff45 	bl	800eb44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2211      	movs	r2, #17
 800dcbe:	631a      	str	r2, [r3, #48]	; 0x30
 800dcc0:	e00c      	b.n	800dcdc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b22      	cmp	r3, #34	; 0x22
 800dccc:	d106      	bne.n	800dcdc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dcce:	2102      	movs	r1, #2
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 ff37 	bl	800eb44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2212      	movs	r2, #18
 800dcda:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6859      	ldr	r1, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	4b4d      	ldr	r3, [pc, #308]	; (800de1c <I2C_ITMasterCplt+0x18c>)
 800dce8:	400b      	ands	r3, r1
 800dcea:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a4a      	ldr	r2, [pc, #296]	; (800de20 <I2C_ITMasterCplt+0x190>)
 800dcf6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	091b      	lsrs	r3, r3, #4
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d009      	beq.n	800dd18 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2210      	movs	r2, #16
 800dd0a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd10:	f043 0204 	orr.w	r2, r3, #4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b60      	cmp	r3, #96	; 0x60
 800dd22:	d10b      	bne.n	800dd3c <I2C_ITMasterCplt+0xac>
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	089b      	lsrs	r3, r3, #2
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fc38 	bl	800e5b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd46:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b60      	cmp	r3, #96	; 0x60
 800dd52:	d002      	beq.n	800dd5a <I2C_ITMasterCplt+0xca>
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d006      	beq.n	800dd68 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fb0f 	bl	800e384 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dd66:	e054      	b.n	800de12 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b21      	cmp	r3, #33	; 0x21
 800dd72:	d124      	bne.n	800ddbe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2220      	movs	r2, #32
 800dd78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b40      	cmp	r3, #64	; 0x40
 800dd8c:	d10b      	bne.n	800dda6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fe ffe1 	bl	800cd66 <HAL_I2C_MemTxCpltCallback>
}
 800dda4:	e035      	b.n	800de12 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7fe ff95 	bl	800cce6 <HAL_I2C_MasterTxCpltCallback>
}
 800ddbc:	e029      	b.n	800de12 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b22      	cmp	r3, #34	; 0x22
 800ddc8:	d123      	bne.n	800de12 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b40      	cmp	r3, #64	; 0x40
 800dde2:	d10b      	bne.n	800ddfc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7fe ffc0 	bl	800cd7a <HAL_I2C_MemRxCpltCallback>
}
 800ddfa:	e00a      	b.n	800de12 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2200      	movs	r2, #0
 800de08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7fe ff74 	bl	800ccfa <HAL_I2C_MasterRxCpltCallback>
}
 800de12:	bf00      	nop
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	fe00e800 	.word	0xfe00e800
 800de20:	ffff0000 	.word	0xffff0000

0800de24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de46:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2220      	movs	r2, #32
 800de4e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800de50:	7afb      	ldrb	r3, [r7, #11]
 800de52:	2b21      	cmp	r3, #33	; 0x21
 800de54:	d002      	beq.n	800de5c <I2C_ITSlaveCplt+0x38>
 800de56:	7afb      	ldrb	r3, [r7, #11]
 800de58:	2b29      	cmp	r3, #41	; 0x29
 800de5a:	d108      	bne.n	800de6e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800de5c:	f248 0101 	movw	r1, #32769	; 0x8001
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 fe6f 	bl	800eb44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2221      	movs	r2, #33	; 0x21
 800de6a:	631a      	str	r2, [r3, #48]	; 0x30
 800de6c:	e019      	b.n	800dea2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800de6e:	7afb      	ldrb	r3, [r7, #11]
 800de70:	2b22      	cmp	r3, #34	; 0x22
 800de72:	d002      	beq.n	800de7a <I2C_ITSlaveCplt+0x56>
 800de74:	7afb      	ldrb	r3, [r7, #11]
 800de76:	2b2a      	cmp	r3, #42	; 0x2a
 800de78:	d108      	bne.n	800de8c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800de7a:	f248 0102 	movw	r1, #32770	; 0x8002
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fe60 	bl	800eb44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2222      	movs	r2, #34	; 0x22
 800de88:	631a      	str	r2, [r3, #48]	; 0x30
 800de8a:	e00a      	b.n	800dea2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800de8c:	7afb      	ldrb	r3, [r7, #11]
 800de8e:	2b28      	cmp	r3, #40	; 0x28
 800de90:	d107      	bne.n	800dea2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800de92:	f248 0103 	movw	r1, #32771	; 0x8003
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fe54 	bl	800eb44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800deb0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6859      	ldr	r1, [r3, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	4b80      	ldr	r3, [pc, #512]	; (800e0c0 <I2C_ITSlaveCplt+0x29c>)
 800debe:	400b      	ands	r3, r1
 800dec0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fb75 	bl	800e5b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	0b9b      	lsrs	r3, r3, #14
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d07a      	beq.n	800dfca <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dee2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 8112 	beq.w	800e112 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a73      	ldr	r2, [pc, #460]	; (800e0c4 <I2C_ITSlaveCplt+0x2a0>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d059      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a71      	ldr	r2, [pc, #452]	; (800e0c8 <I2C_ITSlaveCplt+0x2a4>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d053      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a6f      	ldr	r2, [pc, #444]	; (800e0cc <I2C_ITSlaveCplt+0x2a8>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d04d      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a6d      	ldr	r2, [pc, #436]	; (800e0d0 <I2C_ITSlaveCplt+0x2ac>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d047      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a6b      	ldr	r2, [pc, #428]	; (800e0d4 <I2C_ITSlaveCplt+0x2b0>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d041      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a69      	ldr	r2, [pc, #420]	; (800e0d8 <I2C_ITSlaveCplt+0x2b4>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d03b      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a67      	ldr	r2, [pc, #412]	; (800e0dc <I2C_ITSlaveCplt+0x2b8>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d035      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a65      	ldr	r2, [pc, #404]	; (800e0e0 <I2C_ITSlaveCplt+0x2bc>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d02f      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a63      	ldr	r2, [pc, #396]	; (800e0e4 <I2C_ITSlaveCplt+0x2c0>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d029      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a61      	ldr	r2, [pc, #388]	; (800e0e8 <I2C_ITSlaveCplt+0x2c4>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d023      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a5f      	ldr	r2, [pc, #380]	; (800e0ec <I2C_ITSlaveCplt+0x2c8>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d01d      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a5d      	ldr	r2, [pc, #372]	; (800e0f0 <I2C_ITSlaveCplt+0x2cc>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d017      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a5b      	ldr	r2, [pc, #364]	; (800e0f4 <I2C_ITSlaveCplt+0x2d0>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d011      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a59      	ldr	r2, [pc, #356]	; (800e0f8 <I2C_ITSlaveCplt+0x2d4>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d00b      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a57      	ldr	r2, [pc, #348]	; (800e0fc <I2C_ITSlaveCplt+0x2d8>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d005      	beq.n	800dfae <I2C_ITSlaveCplt+0x18a>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a55      	ldr	r2, [pc, #340]	; (800e100 <I2C_ITSlaveCplt+0x2dc>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d105      	bne.n	800dfba <I2C_ITSlaveCplt+0x196>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	e004      	b.n	800dfc4 <I2C_ITSlaveCplt+0x1a0>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	8553      	strh	r3, [r2, #42]	; 0x2a
 800dfc8:	e0a3      	b.n	800e112 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	0bdb      	lsrs	r3, r3, #15
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	f000 809d 	beq.w	800e112 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dfe6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f000 8090 	beq.w	800e112 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a32      	ldr	r2, [pc, #200]	; (800e0c4 <I2C_ITSlaveCplt+0x2a0>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d059      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a30      	ldr	r2, [pc, #192]	; (800e0c8 <I2C_ITSlaveCplt+0x2a4>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d053      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a2e      	ldr	r2, [pc, #184]	; (800e0cc <I2C_ITSlaveCplt+0x2a8>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d04d      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a2c      	ldr	r2, [pc, #176]	; (800e0d0 <I2C_ITSlaveCplt+0x2ac>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d047      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a2a      	ldr	r2, [pc, #168]	; (800e0d4 <I2C_ITSlaveCplt+0x2b0>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d041      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a28      	ldr	r2, [pc, #160]	; (800e0d8 <I2C_ITSlaveCplt+0x2b4>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d03b      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a26      	ldr	r2, [pc, #152]	; (800e0dc <I2C_ITSlaveCplt+0x2b8>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d035      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a24      	ldr	r2, [pc, #144]	; (800e0e0 <I2C_ITSlaveCplt+0x2bc>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d02f      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a22      	ldr	r2, [pc, #136]	; (800e0e4 <I2C_ITSlaveCplt+0x2c0>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d029      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a20      	ldr	r2, [pc, #128]	; (800e0e8 <I2C_ITSlaveCplt+0x2c4>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d023      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a1e      	ldr	r2, [pc, #120]	; (800e0ec <I2C_ITSlaveCplt+0x2c8>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d01d      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a1c      	ldr	r2, [pc, #112]	; (800e0f0 <I2C_ITSlaveCplt+0x2cc>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d017      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a1a      	ldr	r2, [pc, #104]	; (800e0f4 <I2C_ITSlaveCplt+0x2d0>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d011      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a18      	ldr	r2, [pc, #96]	; (800e0f8 <I2C_ITSlaveCplt+0x2d4>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d00b      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a16      	ldr	r2, [pc, #88]	; (800e0fc <I2C_ITSlaveCplt+0x2d8>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d005      	beq.n	800e0b2 <I2C_ITSlaveCplt+0x28e>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a14      	ldr	r2, [pc, #80]	; (800e100 <I2C_ITSlaveCplt+0x2dc>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d128      	bne.n	800e104 <I2C_ITSlaveCplt+0x2e0>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	e027      	b.n	800e10e <I2C_ITSlaveCplt+0x2ea>
 800e0be:	bf00      	nop
 800e0c0:	fe00e800 	.word	0xfe00e800
 800e0c4:	40020010 	.word	0x40020010
 800e0c8:	40020028 	.word	0x40020028
 800e0cc:	40020040 	.word	0x40020040
 800e0d0:	40020058 	.word	0x40020058
 800e0d4:	40020070 	.word	0x40020070
 800e0d8:	40020088 	.word	0x40020088
 800e0dc:	400200a0 	.word	0x400200a0
 800e0e0:	400200b8 	.word	0x400200b8
 800e0e4:	40020410 	.word	0x40020410
 800e0e8:	40020428 	.word	0x40020428
 800e0ec:	40020440 	.word	0x40020440
 800e0f0:	40020458 	.word	0x40020458
 800e0f4:	40020470 	.word	0x40020470
 800e0f8:	40020488 	.word	0x40020488
 800e0fc:	400204a0 	.word	0x400204a0
 800e100:	400204b8 	.word	0x400204b8
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	089b      	lsrs	r3, r3, #2
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d020      	beq.n	800e160 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	f023 0304 	bic.w	r3, r3, #4
 800e124:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00c      	beq.n	800e160 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e14a:	3b01      	subs	r3, #1
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e156:	b29b      	uxth	r3, r3
 800e158:	3b01      	subs	r3, #1
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e164:	b29b      	uxth	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d005      	beq.n	800e176 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e16e:	f043 0204 	orr.w	r2, r3, #4
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	091b      	lsrs	r3, r3, #4
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d04a      	beq.n	800e218 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	091b      	lsrs	r3, r3, #4
 800e186:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d044      	beq.n	800e218 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e192:	b29b      	uxth	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d128      	bne.n	800e1ea <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b28      	cmp	r3, #40	; 0x28
 800e1a2:	d108      	bne.n	800e1b6 <I2C_ITSlaveCplt+0x392>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1aa:	d104      	bne.n	800e1b6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e1ac:	6979      	ldr	r1, [r7, #20]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f892 	bl	800e2d8 <I2C_ITListenCplt>
 800e1b4:	e030      	b.n	800e218 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b29      	cmp	r3, #41	; 0x29
 800e1c0:	d10e      	bne.n	800e1e0 <I2C_ITSlaveCplt+0x3bc>
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e1c8:	d00a      	beq.n	800e1e0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2210      	movs	r2, #16
 800e1d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f9ed 	bl	800e5b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff fcfa 	bl	800dbd2 <I2C_ITSlaveSeqCplt>
 800e1de:	e01b      	b.n	800e218 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2210      	movs	r2, #16
 800e1e6:	61da      	str	r2, [r3, #28]
 800e1e8:	e016      	b.n	800e218 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2210      	movs	r2, #16
 800e1f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f6:	f043 0204 	orr.w	r2, r3, #4
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d003      	beq.n	800e20c <I2C_ITSlaveCplt+0x3e8>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e20a:	d105      	bne.n	800e218 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f8b6 	bl	800e384 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d010      	beq.n	800e250 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f8a5 	bl	800e384 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b28      	cmp	r3, #40	; 0x28
 800e244:	d141      	bne.n	800e2ca <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e246:	6979      	ldr	r1, [r7, #20]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f845 	bl	800e2d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e24e:	e03c      	b.n	800e2ca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e258:	d014      	beq.n	800e284 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f7ff fcb9 	bl	800dbd2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a1c      	ldr	r2, [pc, #112]	; (800e2d4 <I2C_ITSlaveCplt+0x4b0>)
 800e264:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2220      	movs	r2, #32
 800e26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7fe fd68 	bl	800cd52 <HAL_I2C_ListenCpltCallback>
}
 800e282:	e022      	b.n	800e2ca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b22      	cmp	r3, #34	; 0x22
 800e28e:	d10e      	bne.n	800e2ae <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2220      	movs	r2, #32
 800e294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fe fd3b 	bl	800cd22 <HAL_I2C_SlaveRxCpltCallback>
}
 800e2ac:	e00d      	b.n	800e2ca <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7fe fd22 	bl	800cd0e <HAL_I2C_SlaveTxCpltCallback>
}
 800e2ca:	bf00      	nop
 800e2cc:	3718      	adds	r7, #24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	ffff0000 	.word	0xffff0000

0800e2d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a26      	ldr	r2, [pc, #152]	; (800e380 <I2C_ITListenCplt+0xa8>)
 800e2e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	089b      	lsrs	r3, r3, #2
 800e308:	f003 0301 	and.w	r3, r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d022      	beq.n	800e356 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31a:	b2d2      	uxtb	r2, r2
 800e31c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d012      	beq.n	800e356 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e334:	3b01      	subs	r3, #1
 800e336:	b29a      	uxth	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e340:	b29b      	uxth	r3, r3
 800e342:	3b01      	subs	r3, #1
 800e344:	b29a      	uxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34e:	f043 0204 	orr.w	r2, r3, #4
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e356:	f248 0103 	movw	r1, #32771	; 0x8003
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fbf2 	bl	800eb44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2210      	movs	r2, #16
 800e366:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7fe fcee 	bl	800cd52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	ffff0000 	.word	0xffff0000

0800e384 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e394:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a6d      	ldr	r2, [pc, #436]	; (800e558 <I2C_ITError+0x1d4>)
 800e3a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
 800e3b8:	2b28      	cmp	r3, #40	; 0x28
 800e3ba:	d005      	beq.n	800e3c8 <I2C_ITError+0x44>
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	2b29      	cmp	r3, #41	; 0x29
 800e3c0:	d002      	beq.n	800e3c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
 800e3c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c6:	d10b      	bne.n	800e3e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e3c8:	2103      	movs	r1, #3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fbba 	bl	800eb44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2228      	movs	r2, #40	; 0x28
 800e3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a60      	ldr	r2, [pc, #384]	; (800e55c <I2C_ITError+0x1d8>)
 800e3dc:	635a      	str	r2, [r3, #52]	; 0x34
 800e3de:	e030      	b.n	800e442 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e3e0:	f248 0103 	movw	r1, #32771	; 0x8003
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fbad 	bl	800eb44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f8e1 	bl	800e5b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b60      	cmp	r3, #96	; 0x60
 800e3fa:	d01f      	beq.n	800e43c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2220      	movs	r2, #32
 800e400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	699b      	ldr	r3, [r3, #24]
 800e40a:	f003 0320 	and.w	r3, r3, #32
 800e40e:	2b20      	cmp	r3, #32
 800e410:	d114      	bne.n	800e43c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	699b      	ldr	r3, [r3, #24]
 800e418:	f003 0310 	and.w	r3, r3, #16
 800e41c:	2b10      	cmp	r3, #16
 800e41e:	d109      	bne.n	800e434 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2210      	movs	r2, #16
 800e426:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42c:	f043 0204 	orr.w	r2, r3, #4
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2220      	movs	r2, #32
 800e43a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e446:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d039      	beq.n	800e4c4 <I2C_ITError+0x140>
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b11      	cmp	r3, #17
 800e454:	d002      	beq.n	800e45c <I2C_ITError+0xd8>
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	2b21      	cmp	r3, #33	; 0x21
 800e45a:	d133      	bne.n	800e4c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e46a:	d107      	bne.n	800e47c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e47a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e480:	4618      	mov	r0, r3
 800e482:	f7fc fe61 	bl	800b148 <HAL_DMA_GetState>
 800e486:	4603      	mov	r3, r0
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d017      	beq.n	800e4bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	4a33      	ldr	r2, [pc, #204]	; (800e560 <I2C_ITError+0x1dc>)
 800e492:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fb fce1 	bl	8009e68 <HAL_DMA_Abort_IT>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d04d      	beq.n	800e548 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e4ba:	e045      	b.n	800e548 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 f851 	bl	800e564 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e4c2:	e041      	b.n	800e548 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d039      	beq.n	800e540 <I2C_ITError+0x1bc>
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b12      	cmp	r3, #18
 800e4d0:	d002      	beq.n	800e4d8 <I2C_ITError+0x154>
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	2b22      	cmp	r3, #34	; 0x22
 800e4d6:	d133      	bne.n	800e540 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4e6:	d107      	bne.n	800e4f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e4f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fc fe23 	bl	800b148 <HAL_DMA_GetState>
 800e502:	4603      	mov	r3, r0
 800e504:	2b01      	cmp	r3, #1
 800e506:	d017      	beq.n	800e538 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e50c:	4a14      	ldr	r2, [pc, #80]	; (800e560 <I2C_ITError+0x1dc>)
 800e50e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fb fca3 	bl	8009e68 <HAL_DMA_Abort_IT>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d011      	beq.n	800e54c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e532:	4610      	mov	r0, r2
 800e534:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e536:	e009      	b.n	800e54c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 f813 	bl	800e564 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e53e:	e005      	b.n	800e54c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f80f 	bl	800e564 <I2C_TreatErrorCallback>
  }
}
 800e546:	e002      	b.n	800e54e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e548:	bf00      	nop
 800e54a:	e000      	b.n	800e54e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e54c:	bf00      	nop
}
 800e54e:	bf00      	nop
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	ffff0000 	.word	0xffff0000
 800e55c:	0800d03b 	.word	0x0800d03b
 800e560:	0800e99d 	.word	0x0800e99d

0800e564 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b60      	cmp	r3, #96	; 0x60
 800e576:	d10e      	bne.n	800e596 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2220      	movs	r2, #32
 800e57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7fe fc07 	bl	800cda2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e594:	e009      	b.n	800e5aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7fe fbf2 	bl	800cd8e <HAL_I2C_ErrorCallback>
}
 800e5aa:	bf00      	nop
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e5b2:	b480      	push	{r7}
 800e5b4:	b083      	sub	sp, #12
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	f003 0302 	and.w	r3, r3, #2
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d103      	bne.n	800e5d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d007      	beq.n	800e5ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	699a      	ldr	r2, [r3, #24]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f042 0201 	orr.w	r2, r2, #1
 800e5ec:	619a      	str	r2, [r3, #24]
  }
}
 800e5ee:	bf00      	nop
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b084      	sub	sp, #16
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e606:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e616:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d104      	bne.n	800e62c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e622:	2120      	movs	r1, #32
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 fa09 	bl	800ea3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e62a:	e02d      	b.n	800e688 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e634:	441a      	add	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e63e:	b29b      	uxth	r3, r3
 800e640:	2bff      	cmp	r3, #255	; 0xff
 800e642:	d903      	bls.n	800e64c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	22ff      	movs	r2, #255	; 0xff
 800e648:	851a      	strh	r2, [r3, #40]	; 0x28
 800e64a:	e004      	b.n	800e656 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e650:	b29a      	uxth	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65e:	4619      	mov	r1, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3328      	adds	r3, #40	; 0x28
 800e666:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e66c:	f7fa fe74 	bl	8009358 <HAL_DMA_Start_IT>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d004      	beq.n	800e680 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e676:	2110      	movs	r1, #16
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f7ff fe83 	bl	800e384 <I2C_ITError>
}
 800e67e:	e003      	b.n	800e688 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e680:	2140      	movs	r1, #64	; 0x40
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 f9da 	bl	800ea3c <I2C_Enable_IRQ>
}
 800e688:	bf00      	nop
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e6ac:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d104      	bne.n	800e6c2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e6b8:	2120      	movs	r1, #32
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f000 f9be 	bl	800ea3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e6c0:	e02d      	b.n	800e71e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c6:	68fa      	ldr	r2, [r7, #12]
 800e6c8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e6ca:	441a      	add	r2, r3
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	2bff      	cmp	r3, #255	; 0xff
 800e6d8:	d903      	bls.n	800e6e2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	22ff      	movs	r2, #255	; 0xff
 800e6de:	851a      	strh	r2, [r3, #40]	; 0x28
 800e6e0:	e004      	b.n	800e6ec <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3324      	adds	r3, #36	; 0x24
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e702:	f7fa fe29 	bl	8009358 <HAL_DMA_Start_IT>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d004      	beq.n	800e716 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e70c:	2110      	movs	r1, #16
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff fe38 	bl	800e384 <I2C_ITError>
}
 800e714:	e003      	b.n	800e71e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e716:	2140      	movs	r1, #64	; 0x40
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f000 f98f 	bl	800ea3c <I2C_Enable_IRQ>
}
 800e71e:	bf00      	nop
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800e730:	2300      	movs	r3, #0
 800e732:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e738:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d076      	beq.n	800e830 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a71      	ldr	r2, [pc, #452]	; (800e910 <I2C_DMAError+0x1e8>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d059      	beq.n	800e802 <I2C_DMAError+0xda>
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a6f      	ldr	r2, [pc, #444]	; (800e914 <I2C_DMAError+0x1ec>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d053      	beq.n	800e802 <I2C_DMAError+0xda>
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a6d      	ldr	r2, [pc, #436]	; (800e918 <I2C_DMAError+0x1f0>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d04d      	beq.n	800e802 <I2C_DMAError+0xda>
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a6b      	ldr	r2, [pc, #428]	; (800e91c <I2C_DMAError+0x1f4>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d047      	beq.n	800e802 <I2C_DMAError+0xda>
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a69      	ldr	r2, [pc, #420]	; (800e920 <I2C_DMAError+0x1f8>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d041      	beq.n	800e802 <I2C_DMAError+0xda>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a67      	ldr	r2, [pc, #412]	; (800e924 <I2C_DMAError+0x1fc>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d03b      	beq.n	800e802 <I2C_DMAError+0xda>
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a65      	ldr	r2, [pc, #404]	; (800e928 <I2C_DMAError+0x200>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d035      	beq.n	800e802 <I2C_DMAError+0xda>
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a63      	ldr	r2, [pc, #396]	; (800e92c <I2C_DMAError+0x204>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d02f      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a61      	ldr	r2, [pc, #388]	; (800e930 <I2C_DMAError+0x208>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d029      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a5f      	ldr	r2, [pc, #380]	; (800e934 <I2C_DMAError+0x20c>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d023      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a5d      	ldr	r2, [pc, #372]	; (800e938 <I2C_DMAError+0x210>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d01d      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a5b      	ldr	r2, [pc, #364]	; (800e93c <I2C_DMAError+0x214>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d017      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a59      	ldr	r2, [pc, #356]	; (800e940 <I2C_DMAError+0x218>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d011      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a57      	ldr	r2, [pc, #348]	; (800e944 <I2C_DMAError+0x21c>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d00b      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a55      	ldr	r2, [pc, #340]	; (800e948 <I2C_DMAError+0x220>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d005      	beq.n	800e802 <I2C_DMAError+0xda>
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a53      	ldr	r2, [pc, #332]	; (800e94c <I2C_DMAError+0x224>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d109      	bne.n	800e816 <I2C_DMAError+0xee>
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	bf0c      	ite	eq
 800e80e:	2301      	moveq	r3, #1
 800e810:	2300      	movne	r3, #0
 800e812:	b2db      	uxtb	r3, r3
 800e814:	e008      	b.n	800e828 <I2C_DMAError+0x100>
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	bf0c      	ite	eq
 800e822:	2301      	moveq	r3, #1
 800e824:	2300      	movne	r3, #0
 800e826:	b2db      	uxtb	r3, r3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800e82c:	2301      	movs	r3, #1
 800e82e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 8098 	beq.w	800e96a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a33      	ldr	r2, [pc, #204]	; (800e910 <I2C_DMAError+0x1e8>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d059      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a31      	ldr	r2, [pc, #196]	; (800e914 <I2C_DMAError+0x1ec>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d053      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a2f      	ldr	r2, [pc, #188]	; (800e918 <I2C_DMAError+0x1f0>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d04d      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a2d      	ldr	r2, [pc, #180]	; (800e91c <I2C_DMAError+0x1f4>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d047      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a2b      	ldr	r2, [pc, #172]	; (800e920 <I2C_DMAError+0x1f8>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d041      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a29      	ldr	r2, [pc, #164]	; (800e924 <I2C_DMAError+0x1fc>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d03b      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a27      	ldr	r2, [pc, #156]	; (800e928 <I2C_DMAError+0x200>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d035      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a25      	ldr	r2, [pc, #148]	; (800e92c <I2C_DMAError+0x204>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d02f      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a23      	ldr	r2, [pc, #140]	; (800e930 <I2C_DMAError+0x208>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d029      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a21      	ldr	r2, [pc, #132]	; (800e934 <I2C_DMAError+0x20c>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d023      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a1f      	ldr	r2, [pc, #124]	; (800e938 <I2C_DMAError+0x210>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d01d      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4a1d      	ldr	r2, [pc, #116]	; (800e93c <I2C_DMAError+0x214>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d017      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a1b      	ldr	r2, [pc, #108]	; (800e940 <I2C_DMAError+0x218>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d011      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a19      	ldr	r2, [pc, #100]	; (800e944 <I2C_DMAError+0x21c>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d00b      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a17      	ldr	r2, [pc, #92]	; (800e948 <I2C_DMAError+0x220>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d005      	beq.n	800e8fa <I2C_DMAError+0x1d2>
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a15      	ldr	r2, [pc, #84]	; (800e94c <I2C_DMAError+0x224>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d12a      	bne.n	800e950 <I2C_DMAError+0x228>
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	bf0c      	ite	eq
 800e906:	2301      	moveq	r3, #1
 800e908:	2300      	movne	r3, #0
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	e029      	b.n	800e962 <I2C_DMAError+0x23a>
 800e90e:	bf00      	nop
 800e910:	40020010 	.word	0x40020010
 800e914:	40020028 	.word	0x40020028
 800e918:	40020040 	.word	0x40020040
 800e91c:	40020058 	.word	0x40020058
 800e920:	40020070 	.word	0x40020070
 800e924:	40020088 	.word	0x40020088
 800e928:	400200a0 	.word	0x400200a0
 800e92c:	400200b8 	.word	0x400200b8
 800e930:	40020410 	.word	0x40020410
 800e934:	40020428 	.word	0x40020428
 800e938:	40020440 	.word	0x40020440
 800e93c:	40020458 	.word	0x40020458
 800e940:	40020470 	.word	0x40020470
 800e944:	40020488 	.word	0x40020488
 800e948:	400204a0 	.word	0x400204a0
 800e94c:	400204b8 	.word	0x400204b8
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	bf0c      	ite	eq
 800e95c:	2301      	moveq	r3, #1
 800e95e:	2300      	movne	r3, #0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800e966:	2301      	movs	r3, #1
 800e968:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7fc fbfa 	bl	800b164 <HAL_DMA_GetError>
 800e970:	4603      	mov	r3, r0
 800e972:	2b02      	cmp	r3, #2
 800e974:	d00e      	beq.n	800e994 <I2C_DMAError+0x26c>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00b      	beq.n	800e994 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e98a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e98c:	2110      	movs	r1, #16
 800e98e:	68b8      	ldr	r0, [r7, #8]
 800e990:	f7ff fcf8 	bl	800e384 <I2C_ITError>
  }
}
 800e994:	bf00      	nop
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d003      	beq.n	800e9ba <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d003      	beq.n	800e9ca <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7ff fdca 	bl	800e564 <I2C_TreatErrorCallback>
}
 800e9d0:	bf00      	nop
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	607b      	str	r3, [r7, #4]
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	817b      	strh	r3, [r7, #10]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9ea:	897b      	ldrh	r3, [r7, #10]
 800e9ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e9f0:	7a7b      	ldrb	r3, [r7, #9]
 800e9f2:	041b      	lsls	r3, r3, #16
 800e9f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	0d5b      	lsrs	r3, r3, #21
 800ea12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ea16:	4b08      	ldr	r3, [pc, #32]	; (800ea38 <I2C_TransferConfig+0x60>)
 800ea18:	430b      	orrs	r3, r1
 800ea1a:	43db      	mvns	r3, r3
 800ea1c:	ea02 0103 	and.w	r1, r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	430a      	orrs	r2, r1
 800ea28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ea2a:	bf00      	nop
 800ea2c:	371c      	adds	r7, #28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	03ff63ff 	.word	0x03ff63ff

0800ea3c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea50:	4a39      	ldr	r2, [pc, #228]	; (800eb38 <I2C_Enable_IRQ+0xfc>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d032      	beq.n	800eabc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ea5a:	4a38      	ldr	r2, [pc, #224]	; (800eb3c <I2C_Enable_IRQ+0x100>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d02d      	beq.n	800eabc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ea64:	4a36      	ldr	r2, [pc, #216]	; (800eb40 <I2C_Enable_IRQ+0x104>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d028      	beq.n	800eabc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ea6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	da03      	bge.n	800ea7a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ea78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ea7a:	887b      	ldrh	r3, [r7, #2]
 800ea7c:	f003 0301 	and.w	r3, r3, #1
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d003      	beq.n	800ea8c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ea8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ea8c:	887b      	ldrh	r3, [r7, #2]
 800ea8e:	f003 0302 	and.w	r3, r3, #2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ea9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ea9e:	887b      	ldrh	r3, [r7, #2]
 800eaa0:	2b10      	cmp	r3, #16
 800eaa2:	d103      	bne.n	800eaac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800eaaa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eaac:	887b      	ldrh	r3, [r7, #2]
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d133      	bne.n	800eb1a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f043 0320 	orr.w	r3, r3, #32
 800eab8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eaba:	e02e      	b.n	800eb1a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800eabc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	da03      	bge.n	800eacc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800eaca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800eacc:	887b      	ldrh	r3, [r7, #2]
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d003      	beq.n	800eade <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800eadc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800eade:	887b      	ldrh	r3, [r7, #2]
 800eae0:	f003 0302 	and.w	r3, r3, #2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800eaee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800eaf0:	887b      	ldrh	r3, [r7, #2]
 800eaf2:	2b10      	cmp	r3, #16
 800eaf4:	d103      	bne.n	800eafe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800eafc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eafe:	887b      	ldrh	r3, [r7, #2]
 800eb00:	2b20      	cmp	r3, #32
 800eb02:	d103      	bne.n	800eb0c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800eb0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800eb0c:	887b      	ldrh	r3, [r7, #2]
 800eb0e:	2b40      	cmp	r3, #64	; 0x40
 800eb10:	d103      	bne.n	800eb1a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb18:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6819      	ldr	r1, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	430a      	orrs	r2, r1
 800eb28:	601a      	str	r2, [r3, #0]
}
 800eb2a:	bf00      	nop
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	0800d243 	.word	0x0800d243
 800eb3c:	0800d689 	.word	0x0800d689
 800eb40:	0800d429 	.word	0x0800d429

0800eb44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800eb50:	2300      	movs	r3, #0
 800eb52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800eb54:	887b      	ldrh	r3, [r7, #2]
 800eb56:	f003 0301 	and.w	r3, r3, #1
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00f      	beq.n	800eb7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800eb64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eb72:	2b28      	cmp	r3, #40	; 0x28
 800eb74:	d003      	beq.n	800eb7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800eb7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800eb7e:	887b      	ldrh	r3, [r7, #2]
 800eb80:	f003 0302 	and.w	r3, r3, #2
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00f      	beq.n	800eba8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800eb8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eb9c:	2b28      	cmp	r3, #40	; 0x28
 800eb9e:	d003      	beq.n	800eba8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800eba6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800eba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	da03      	bge.n	800ebb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ebb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ebb8:	887b      	ldrh	r3, [r7, #2]
 800ebba:	2b10      	cmp	r3, #16
 800ebbc:	d103      	bne.n	800ebc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ebc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ebc6:	887b      	ldrh	r3, [r7, #2]
 800ebc8:	2b20      	cmp	r3, #32
 800ebca:	d103      	bne.n	800ebd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f043 0320 	orr.w	r3, r3, #32
 800ebd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ebd4:	887b      	ldrh	r3, [r7, #2]
 800ebd6:	2b40      	cmp	r3, #64	; 0x40
 800ebd8:	d103      	bne.n	800ebe2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	6819      	ldr	r1, [r3, #0]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	43da      	mvns	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	400a      	ands	r2, r1
 800ebf2:	601a      	str	r2, [r3, #0]
}
 800ebf4:	bf00      	nop
 800ebf6:	3714      	adds	r7, #20
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	2b20      	cmp	r3, #32
 800ec14:	d138      	bne.n	800ec88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d101      	bne.n	800ec24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ec20:	2302      	movs	r3, #2
 800ec22:	e032      	b.n	800ec8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2224      	movs	r2, #36	; 0x24
 800ec30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f022 0201 	bic.w	r2, r2, #1
 800ec42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ec52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6819      	ldr	r1, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	430a      	orrs	r2, r1
 800ec62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f042 0201 	orr.w	r2, r2, #1
 800ec72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2220      	movs	r2, #32
 800ec78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	e000      	b.n	800ec8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec88:	2302      	movs	r3, #2
  }
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b085      	sub	sp, #20
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	2b20      	cmp	r3, #32
 800ecaa:	d139      	bne.n	800ed20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d101      	bne.n	800ecba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ecb6:	2302      	movs	r3, #2
 800ecb8:	e033      	b.n	800ed22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2224      	movs	r2, #36	; 0x24
 800ecc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f022 0201 	bic.w	r2, r2, #1
 800ecd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ece8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	021b      	lsls	r3, r3, #8
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0201 	orr.w	r2, r2, #1
 800ed0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2220      	movs	r2, #32
 800ed10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e000      	b.n	800ed22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ed20:	2302      	movs	r3, #2
  }
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3714      	adds	r7, #20
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
	...

0800ed30 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ed38:	4b0d      	ldr	r3, [pc, #52]	; (800ed70 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ed3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed3e:	4a0c      	ldr	r2, [pc, #48]	; (800ed70 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ed40:	f043 0302 	orr.w	r3, r3, #2
 800ed44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ed48:	4b09      	ldr	r3, [pc, #36]	; (800ed70 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ed4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed4e:	f003 0302 	and.w	r3, r3, #2
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800ed56:	4b07      	ldr	r3, [pc, #28]	; (800ed74 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ed58:	685a      	ldr	r2, [r3, #4]
 800ed5a:	4906      	ldr	r1, [pc, #24]	; (800ed74 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	604b      	str	r3, [r1, #4]
}
 800ed62:	bf00      	nop
 800ed64:	3714      	adds	r7, #20
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	58024400 	.word	0x58024400
 800ed74:	58000400 	.word	0x58000400

0800ed78 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	e041      	b.n	800ee0e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ed92:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f245 5255 	movw	r2, #21845	; 0x5555
 800ed9c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	6852      	ldr	r2, [r2, #4]
 800eda6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	6892      	ldr	r2, [r2, #8]
 800edb0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800edb2:	f7f7 fe4d 	bl	8006a50 <HAL_GetTick>
 800edb6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800edb8:	e00f      	b.n	800edda <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800edba:	f7f7 fe49 	bl	8006a50 <HAL_GetTick>
 800edbe:	4602      	mov	r2, r0
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	2b31      	cmp	r3, #49	; 0x31
 800edc6:	d908      	bls.n	800edda <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	f003 0307 	and.w	r3, r3, #7
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800edd6:	2303      	movs	r3, #3
 800edd8:	e019      	b.n	800ee0e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	f003 0307 	and.w	r3, r3, #7
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1e8      	bne.n	800edba <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	691a      	ldr	r2, [r3, #16]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d005      	beq.n	800ee02 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	68d2      	ldr	r2, [r2, #12]
 800edfe:	611a      	str	r2, [r3, #16]
 800ee00:	e004      	b.n	800ee0c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ee0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ee16:	b480      	push	{r7}
 800ee18:	b083      	sub	sp, #12
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ee26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
	...

0800ee38 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800ee44:	4b18      	ldr	r3, [pc, #96]	; (800eea8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f023 0201 	bic.w	r2, r3, #1
 800ee4c:	4916      	ldr	r1, [pc, #88]	; (800eea8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800ee54:	4b14      	ldr	r3, [pc, #80]	; (800eea8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	4a13      	ldr	r2, [pc, #76]	; (800eea8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee5a:	f023 0305 	bic.w	r3, r3, #5
 800ee5e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800ee60:	4b11      	ldr	r3, [pc, #68]	; (800eea8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	4a10      	ldr	r2, [pc, #64]	; (800eea8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee66:	f023 0302 	bic.w	r3, r3, #2
 800ee6a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ee6c:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <HAL_PWR_EnterSTOPMode+0x74>)
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	4a0e      	ldr	r2, [pc, #56]	; (800eeac <HAL_PWR_EnterSTOPMode+0x74>)
 800ee72:	f043 0304 	orr.w	r3, r3, #4
 800ee76:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ee78:	f3bf 8f4f 	dsb	sy
}
 800ee7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ee7e:	f3bf 8f6f 	isb	sy
}
 800ee82:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ee84:	78fb      	ldrb	r3, [r7, #3]
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d101      	bne.n	800ee8e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800ee8a:	bf30      	wfi
 800ee8c:	e000      	b.n	800ee90 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800ee8e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ee90:	4b06      	ldr	r3, [pc, #24]	; (800eeac <HAL_PWR_EnterSTOPMode+0x74>)
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	4a05      	ldr	r2, [pc, #20]	; (800eeac <HAL_PWR_EnterSTOPMode+0x74>)
 800ee96:	f023 0304 	bic.w	r3, r3, #4
 800ee9a:	6113      	str	r3, [r2, #16]
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr
 800eea8:	58024800 	.word	0x58024800
 800eeac:	e000ed00 	.word	0xe000ed00

0800eeb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800eeb8:	4b19      	ldr	r3, [pc, #100]	; (800ef20 <HAL_PWREx_ConfigSupply+0x70>)
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	d00a      	beq.n	800eeda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800eec4:	4b16      	ldr	r3, [pc, #88]	; (800ef20 <HAL_PWREx_ConfigSupply+0x70>)
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	f003 0307 	and.w	r3, r3, #7
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d001      	beq.n	800eed6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	e01f      	b.n	800ef16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	e01d      	b.n	800ef16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800eeda:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <HAL_PWREx_ConfigSupply+0x70>)
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	f023 0207 	bic.w	r2, r3, #7
 800eee2:	490f      	ldr	r1, [pc, #60]	; (800ef20 <HAL_PWREx_ConfigSupply+0x70>)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800eeea:	f7f7 fdb1 	bl	8006a50 <HAL_GetTick>
 800eeee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800eef0:	e009      	b.n	800ef06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800eef2:	f7f7 fdad 	bl	8006a50 <HAL_GetTick>
 800eef6:	4602      	mov	r2, r0
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	1ad3      	subs	r3, r2, r3
 800eefc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef00:	d901      	bls.n	800ef06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	e007      	b.n	800ef16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef06:	4b06      	ldr	r3, [pc, #24]	; (800ef20 <HAL_PWREx_ConfigSupply+0x70>)
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef12:	d1ee      	bne.n	800eef2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	58024800 	.word	0x58024800

0800ef24 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d101      	bne.n	800ef36 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e030      	b.n	800ef98 <HAL_RAMECC_Init+0x74>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2202      	movs	r2, #2
 800ef3a:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f022 0220 	bic.w	r2, r2, #32
 800ef4a:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	6812      	ldr	r2, [r2, #0]
 800ef5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ef5e:	f023 030f 	bic.w	r3, r3, #15
 800ef62:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f022 021c 	bic.w	r2, r2, #28
 800ef72:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f022 0207 	bic.w	r2, r2, #7
 800ef82:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	609a      	str	r2, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	60da      	str	r2, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <HAL_RAMECC_StartMonitor>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_StartMonitor(RAMECC_HandleTypeDef *hramecc)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	791b      	ldrb	r3, [r3, #4]
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d10f      	bne.n	800efd6 <HAL_RAMECC_StartMonitor+0x32>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2202      	movs	r2, #2
 800efba:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC monitor */
    hramecc->Instance->CR |= RAMECC_CR_ECCELEN;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f042 0220 	orr.w	r2, r2, #32
 800efca:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2201      	movs	r2, #1
 800efd0:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
 800efd4:	e003      	b.n	800efde <HAL_RAMECC_StartMonitor+0x3a>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2202      	movs	r2, #2
 800efda:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800efdc:	2301      	movs	r3, #1
}
 800efde:	4618      	mov	r0, r3
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
	...

0800efec <HAL_RAMECC_EnableNotification>:
  *                        specified RAMECC Monitor.
  * @param  Notifications  Select the notification.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_EnableNotification(RAMECC_HandleTypeDef *hramecc, uint32_t Notifications)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));
  assert_param (IS_RAMECC_INTERRUPT (Notifications));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	791b      	ldrb	r3, [r3, #4]
 800effa:	b2db      	uxtb	r3, r3
 800effc:	2b01      	cmp	r3, #1
 800effe:	d134      	bne.n	800f06a <HAL_RAMECC_EnableNotification+0x7e>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2202      	movs	r2, #2
 800f004:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC interrupts */
    __HAL_RAMECC_ENABLE_IT (hramecc, Notifications);
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	4a1d      	ldr	r2, [pc, #116]	; (800f080 <HAL_RAMECC_EnableNotification+0x94>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d00f      	beq.n	800f02e <HAL_RAMECC_EnableNotification+0x42>
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	4a1c      	ldr	r2, [pc, #112]	; (800f084 <HAL_RAMECC_EnableNotification+0x98>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d00b      	beq.n	800f02e <HAL_RAMECC_EnableNotification+0x42>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	4a1b      	ldr	r2, [pc, #108]	; (800f088 <HAL_RAMECC_EnableNotification+0x9c>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d007      	beq.n	800f02e <HAL_RAMECC_EnableNotification+0x42>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	4a1a      	ldr	r2, [pc, #104]	; (800f08c <HAL_RAMECC_EnableNotification+0xa0>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d003      	beq.n	800f02e <HAL_RAMECC_EnableNotification+0x42>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	4a19      	ldr	r2, [pc, #100]	; (800f090 <HAL_RAMECC_EnableNotification+0xa4>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d10e      	bne.n	800f04c <HAL_RAMECC_EnableNotification+0x60>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f03e:	6879      	ldr	r1, [r7, #4]
 800f040:	6809      	ldr	r1, [r1, #0]
 800f042:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800f046:	4313      	orrs	r3, r2
 800f048:	600b      	str	r3, [r1, #0]
 800f04a:	e009      	b.n	800f060 <HAL_RAMECC_EnableNotification+0x74>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6819      	ldr	r1, [r3, #0]
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	430a      	orrs	r2, r1
 800f05e:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	e003      	b.n	800f072 <HAL_RAMECC_EnableNotification+0x86>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2202      	movs	r2, #2
 800f06e:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800f070:	2301      	movs	r3, #1
}
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	10000001 	.word	0x10000001
 800f084:	10000002 	.word	0x10000002
 800f088:	10000004 	.word	0x10000004
 800f08c:	10000008 	.word	0x10000008
 800f090:	1000000f 	.word	0x1000000f

0800f094 <HAL_RAMECC_IRQHandler>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval None.
  */
void HAL_RAMECC_IRQHandler(RAMECC_HandleTypeDef *hramecc)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  uint32_t ier_reg = ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	617b      	str	r3, [r7, #20]
  uint32_t cr_reg = hramecc->Instance->CR >> 1U;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	085b      	lsrs	r3, r3, #1
 800f0b0:	613b      	str	r3, [r7, #16]
  uint32_t sr_reg = hramecc->Instance->SR;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	60fb      	str	r3, [r7, #12]

  /* Update global interrupt variables */
  if ((ier_reg & RAMECC_IER_GIE) == RAMECC_IER_GIE)
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	f003 0301 	and.w	r3, r3, #1
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <HAL_RAMECC_IRQHandler+0x34>
  {
    ier_reg = RAMECC_IT_GLOBAL_ALL;
 800f0c4:	4b16      	ldr	r3, [pc, #88]	; (800f120 <HAL_RAMECC_IRQHandler+0x8c>)
 800f0c6:	617b      	str	r3, [r7, #20]
  }

  /* Store the ECC Single error detected */
  if ((sr_reg & RAMECC_SR_SEDCF) == RAMECC_SR_SEDCF)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d005      	beq.n	800f0de <HAL_RAMECC_IRQHandler+0x4a>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_SINGLEERROR_DETECTED;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	f043 0201 	orr.w	r2, r3, #1
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	60da      	str	r2, [r3, #12]
  }

  /* Store the ECC double error detected */
  if ((sr_reg & (RAMECC_SR_DEDF | RAMECC_SR_DEBWDF)) != 0U)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f003 0306 	and.w	r3, r3, #6
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d005      	beq.n	800f0f4 <HAL_RAMECC_IRQHandler+0x60>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_DOUBLEERROR_DETECTED;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	f043 0202 	orr.w	r2, r3, #2
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	60da      	str	r2, [r3, #12]
  }

  /* Clear active flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, (((ier_reg | cr_reg) & (sr_reg << 1U)) >> 1U));
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	6859      	ldr	r1, [r3, #4]
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	431a      	orrs	r2, r3
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	4013      	ands	r3, r2
 800f106:	085b      	lsrs	r3, r3, #1
 800f108:	43da      	mvns	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	400a      	ands	r2, r1
 800f110:	605a      	str	r2, [r3, #4]
  {
    /* Error detection callback */
    hramecc->DetectErrorCallback(hramecc);
  }
#else
  HAL_RAMECC_DetectErrorCallback(hramecc);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7f5 faba 	bl	800468c <HAL_RAMECC_DetectErrorCallback>
#endif /* USE_HAL_RAMECC_REGISTER_CALLBACKS */
}
 800f118:	bf00      	nop
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	1000000f 	.word	0x1000000f

0800f124 <HAL_RAMECC_GetRAMECCError>:
  *                         contains the configuration information for the
  *                         specified RAMECC instance.
  * @retval RAMECC error code detected.
  */
uint32_t HAL_RAMECC_GetRAMECCError(RAMECC_HandleTypeDef *hramecc)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  /* Return the RAMECC error code detected*/
  return hramecc->RAMECCErrorCode;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	68db      	ldr	r3, [r3, #12]
}
 800f130:	4618      	mov	r0, r3
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b08c      	sub	sp, #48	; 0x30
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d102      	bne.n	800f150 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	f000 bc48 	b.w	800f9e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f003 0301 	and.w	r3, r3, #1
 800f158:	2b00      	cmp	r3, #0
 800f15a:	f000 8088 	beq.w	800f26e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f15e:	4b99      	ldr	r3, [pc, #612]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f166:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f168:	4b96      	ldr	r3, [pc, #600]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f16c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	2b10      	cmp	r3, #16
 800f172:	d007      	beq.n	800f184 <HAL_RCC_OscConfig+0x48>
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	2b18      	cmp	r3, #24
 800f178:	d111      	bne.n	800f19e <HAL_RCC_OscConfig+0x62>
 800f17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17c:	f003 0303 	and.w	r3, r3, #3
 800f180:	2b02      	cmp	r3, #2
 800f182:	d10c      	bne.n	800f19e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f184:	4b8f      	ldr	r3, [pc, #572]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d06d      	beq.n	800f26c <HAL_RCC_OscConfig+0x130>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d169      	bne.n	800f26c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	f000 bc21 	b.w	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a6:	d106      	bne.n	800f1b6 <HAL_RCC_OscConfig+0x7a>
 800f1a8:	4b86      	ldr	r3, [pc, #536]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a85      	ldr	r2, [pc, #532]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	e02e      	b.n	800f214 <HAL_RCC_OscConfig+0xd8>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10c      	bne.n	800f1d8 <HAL_RCC_OscConfig+0x9c>
 800f1be:	4b81      	ldr	r3, [pc, #516]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a80      	ldr	r2, [pc, #512]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	4b7e      	ldr	r3, [pc, #504]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4a7d      	ldr	r2, [pc, #500]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f1d4:	6013      	str	r3, [r2, #0]
 800f1d6:	e01d      	b.n	800f214 <HAL_RCC_OscConfig+0xd8>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f1e0:	d10c      	bne.n	800f1fc <HAL_RCC_OscConfig+0xc0>
 800f1e2:	4b78      	ldr	r3, [pc, #480]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a77      	ldr	r2, [pc, #476]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f1ec:	6013      	str	r3, [r2, #0]
 800f1ee:	4b75      	ldr	r3, [pc, #468]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4a74      	ldr	r2, [pc, #464]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1f8:	6013      	str	r3, [r2, #0]
 800f1fa:	e00b      	b.n	800f214 <HAL_RCC_OscConfig+0xd8>
 800f1fc:	4b71      	ldr	r3, [pc, #452]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a70      	ldr	r2, [pc, #448]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f206:	6013      	str	r3, [r2, #0]
 800f208:	4b6e      	ldr	r3, [pc, #440]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4a6d      	ldr	r2, [pc, #436]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f20e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d013      	beq.n	800f244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f21c:	f7f7 fc18 	bl	8006a50 <HAL_GetTick>
 800f220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f222:	e008      	b.n	800f236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f224:	f7f7 fc14 	bl	8006a50 <HAL_GetTick>
 800f228:	4602      	mov	r2, r0
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	2b64      	cmp	r3, #100	; 0x64
 800f230:	d901      	bls.n	800f236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f232:	2303      	movs	r3, #3
 800f234:	e3d4      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f236:	4b63      	ldr	r3, [pc, #396]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d0f0      	beq.n	800f224 <HAL_RCC_OscConfig+0xe8>
 800f242:	e014      	b.n	800f26e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f244:	f7f7 fc04 	bl	8006a50 <HAL_GetTick>
 800f248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f24a:	e008      	b.n	800f25e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f24c:	f7f7 fc00 	bl	8006a50 <HAL_GetTick>
 800f250:	4602      	mov	r2, r0
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	2b64      	cmp	r3, #100	; 0x64
 800f258:	d901      	bls.n	800f25e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f25a:	2303      	movs	r3, #3
 800f25c:	e3c0      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f25e:	4b59      	ldr	r3, [pc, #356]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f266:	2b00      	cmp	r3, #0
 800f268:	d1f0      	bne.n	800f24c <HAL_RCC_OscConfig+0x110>
 800f26a:	e000      	b.n	800f26e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f26c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f003 0302 	and.w	r3, r3, #2
 800f276:	2b00      	cmp	r3, #0
 800f278:	f000 80ca 	beq.w	800f410 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f27c:	4b51      	ldr	r3, [pc, #324]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f27e:	691b      	ldr	r3, [r3, #16]
 800f280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f284:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f286:	4b4f      	ldr	r3, [pc, #316]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f28c:	6a3b      	ldr	r3, [r7, #32]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d007      	beq.n	800f2a2 <HAL_RCC_OscConfig+0x166>
 800f292:	6a3b      	ldr	r3, [r7, #32]
 800f294:	2b18      	cmp	r3, #24
 800f296:	d156      	bne.n	800f346 <HAL_RCC_OscConfig+0x20a>
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	f003 0303 	and.w	r3, r3, #3
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d151      	bne.n	800f346 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f2a2:	4b48      	ldr	r3, [pc, #288]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f003 0304 	and.w	r3, r3, #4
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <HAL_RCC_OscConfig+0x17e>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d101      	bne.n	800f2ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e392      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f2ba:	4b42      	ldr	r3, [pc, #264]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f023 0219 	bic.w	r2, r3, #25
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	493f      	ldr	r1, [pc, #252]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2cc:	f7f7 fbc0 	bl	8006a50 <HAL_GetTick>
 800f2d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f2d2:	e008      	b.n	800f2e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f2d4:	f7f7 fbbc 	bl	8006a50 <HAL_GetTick>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d901      	bls.n	800f2e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	e37c      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f2e6:	4b37      	ldr	r3, [pc, #220]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f003 0304 	and.w	r3, r3, #4
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0f0      	beq.n	800f2d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2f2:	f7f7 fbb9 	bl	8006a68 <HAL_GetREVID>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	f241 0203 	movw	r2, #4099	; 0x1003
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d817      	bhi.n	800f330 <HAL_RCC_OscConfig+0x1f4>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	2b40      	cmp	r3, #64	; 0x40
 800f306:	d108      	bne.n	800f31a <HAL_RCC_OscConfig+0x1de>
 800f308:	4b2e      	ldr	r3, [pc, #184]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f310:	4a2c      	ldr	r2, [pc, #176]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f316:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f318:	e07a      	b.n	800f410 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f31a:	4b2a      	ldr	r3, [pc, #168]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	031b      	lsls	r3, r3, #12
 800f328:	4926      	ldr	r1, [pc, #152]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f32a:	4313      	orrs	r3, r2
 800f32c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f32e:	e06f      	b.n	800f410 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f330:	4b24      	ldr	r3, [pc, #144]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	691b      	ldr	r3, [r3, #16]
 800f33c:	061b      	lsls	r3, r3, #24
 800f33e:	4921      	ldr	r1, [pc, #132]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f340:	4313      	orrs	r3, r2
 800f342:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f344:	e064      	b.n	800f410 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d047      	beq.n	800f3de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f34e:	4b1d      	ldr	r3, [pc, #116]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f023 0219 	bic.w	r2, r3, #25
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	491a      	ldr	r1, [pc, #104]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f35c:	4313      	orrs	r3, r2
 800f35e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f360:	f7f7 fb76 	bl	8006a50 <HAL_GetTick>
 800f364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f366:	e008      	b.n	800f37a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f368:	f7f7 fb72 	bl	8006a50 <HAL_GetTick>
 800f36c:	4602      	mov	r2, r0
 800f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f370:	1ad3      	subs	r3, r2, r3
 800f372:	2b02      	cmp	r3, #2
 800f374:	d901      	bls.n	800f37a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f376:	2303      	movs	r3, #3
 800f378:	e332      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f37a:	4b12      	ldr	r3, [pc, #72]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f003 0304 	and.w	r3, r3, #4
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0f0      	beq.n	800f368 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f386:	f7f7 fb6f 	bl	8006a68 <HAL_GetREVID>
 800f38a:	4603      	mov	r3, r0
 800f38c:	f241 0203 	movw	r2, #4099	; 0x1003
 800f390:	4293      	cmp	r3, r2
 800f392:	d819      	bhi.n	800f3c8 <HAL_RCC_OscConfig+0x28c>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	2b40      	cmp	r3, #64	; 0x40
 800f39a:	d108      	bne.n	800f3ae <HAL_RCC_OscConfig+0x272>
 800f39c:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f3a4:	4a07      	ldr	r2, [pc, #28]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f3a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3aa:	6053      	str	r3, [r2, #4]
 800f3ac:	e030      	b.n	800f410 <HAL_RCC_OscConfig+0x2d4>
 800f3ae:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	031b      	lsls	r3, r3, #12
 800f3bc:	4901      	ldr	r1, [pc, #4]	; (800f3c4 <HAL_RCC_OscConfig+0x288>)
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	604b      	str	r3, [r1, #4]
 800f3c2:	e025      	b.n	800f410 <HAL_RCC_OscConfig+0x2d4>
 800f3c4:	58024400 	.word	0x58024400
 800f3c8:	4b9a      	ldr	r3, [pc, #616]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	061b      	lsls	r3, r3, #24
 800f3d6:	4997      	ldr	r1, [pc, #604]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	604b      	str	r3, [r1, #4]
 800f3dc:	e018      	b.n	800f410 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f3de:	4b95      	ldr	r3, [pc, #596]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a94      	ldr	r2, [pc, #592]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f3e4:	f023 0301 	bic.w	r3, r3, #1
 800f3e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3ea:	f7f7 fb31 	bl	8006a50 <HAL_GetTick>
 800f3ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f3f0:	e008      	b.n	800f404 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3f2:	f7f7 fb2d 	bl	8006a50 <HAL_GetTick>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d901      	bls.n	800f404 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f400:	2303      	movs	r3, #3
 800f402:	e2ed      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f404:	4b8b      	ldr	r3, [pc, #556]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1f0      	bne.n	800f3f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f003 0310 	and.w	r3, r3, #16
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f000 80a9 	beq.w	800f570 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f41e:	4b85      	ldr	r3, [pc, #532]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f426:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f428:	4b82      	ldr	r3, [pc, #520]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	2b08      	cmp	r3, #8
 800f432:	d007      	beq.n	800f444 <HAL_RCC_OscConfig+0x308>
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	2b18      	cmp	r3, #24
 800f438:	d13a      	bne.n	800f4b0 <HAL_RCC_OscConfig+0x374>
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f003 0303 	and.w	r3, r3, #3
 800f440:	2b01      	cmp	r3, #1
 800f442:	d135      	bne.n	800f4b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f444:	4b7b      	ldr	r3, [pc, #492]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <HAL_RCC_OscConfig+0x320>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	69db      	ldr	r3, [r3, #28]
 800f454:	2b80      	cmp	r3, #128	; 0x80
 800f456:	d001      	beq.n	800f45c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	e2c1      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f45c:	f7f7 fb04 	bl	8006a68 <HAL_GetREVID>
 800f460:	4603      	mov	r3, r0
 800f462:	f241 0203 	movw	r2, #4099	; 0x1003
 800f466:	4293      	cmp	r3, r2
 800f468:	d817      	bhi.n	800f49a <HAL_RCC_OscConfig+0x35e>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	2b20      	cmp	r3, #32
 800f470:	d108      	bne.n	800f484 <HAL_RCC_OscConfig+0x348>
 800f472:	4b70      	ldr	r3, [pc, #448]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f47a:	4a6e      	ldr	r2, [pc, #440]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f47c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f480:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f482:	e075      	b.n	800f570 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f484:	4b6b      	ldr	r3, [pc, #428]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a1b      	ldr	r3, [r3, #32]
 800f490:	069b      	lsls	r3, r3, #26
 800f492:	4968      	ldr	r1, [pc, #416]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f494:	4313      	orrs	r3, r2
 800f496:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f498:	e06a      	b.n	800f570 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f49a:	4b66      	ldr	r3, [pc, #408]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6a1b      	ldr	r3, [r3, #32]
 800f4a6:	061b      	lsls	r3, r3, #24
 800f4a8:	4962      	ldr	r1, [pc, #392]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f4ae:	e05f      	b.n	800f570 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	69db      	ldr	r3, [r3, #28]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d042      	beq.n	800f53e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f4b8:	4b5e      	ldr	r3, [pc, #376]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a5d      	ldr	r2, [pc, #372]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4c4:	f7f7 fac4 	bl	8006a50 <HAL_GetTick>
 800f4c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f4ca:	e008      	b.n	800f4de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f4cc:	f7f7 fac0 	bl	8006a50 <HAL_GetTick>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d901      	bls.n	800f4de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f4da:	2303      	movs	r3, #3
 800f4dc:	e280      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f4de:	4b55      	ldr	r3, [pc, #340]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d0f0      	beq.n	800f4cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f4ea:	f7f7 fabd 	bl	8006a68 <HAL_GetREVID>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f241 0203 	movw	r2, #4099	; 0x1003
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d817      	bhi.n	800f528 <HAL_RCC_OscConfig+0x3ec>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a1b      	ldr	r3, [r3, #32]
 800f4fc:	2b20      	cmp	r3, #32
 800f4fe:	d108      	bne.n	800f512 <HAL_RCC_OscConfig+0x3d6>
 800f500:	4b4c      	ldr	r3, [pc, #304]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f508:	4a4a      	ldr	r2, [pc, #296]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f50a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f50e:	6053      	str	r3, [r2, #4]
 800f510:	e02e      	b.n	800f570 <HAL_RCC_OscConfig+0x434>
 800f512:	4b48      	ldr	r3, [pc, #288]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a1b      	ldr	r3, [r3, #32]
 800f51e:	069b      	lsls	r3, r3, #26
 800f520:	4944      	ldr	r1, [pc, #272]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f522:	4313      	orrs	r3, r2
 800f524:	604b      	str	r3, [r1, #4]
 800f526:	e023      	b.n	800f570 <HAL_RCC_OscConfig+0x434>
 800f528:	4b42      	ldr	r3, [pc, #264]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a1b      	ldr	r3, [r3, #32]
 800f534:	061b      	lsls	r3, r3, #24
 800f536:	493f      	ldr	r1, [pc, #252]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f538:	4313      	orrs	r3, r2
 800f53a:	60cb      	str	r3, [r1, #12]
 800f53c:	e018      	b.n	800f570 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f53e:	4b3d      	ldr	r3, [pc, #244]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4a3c      	ldr	r2, [pc, #240]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f54a:	f7f7 fa81 	bl	8006a50 <HAL_GetTick>
 800f54e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f550:	e008      	b.n	800f564 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f552:	f7f7 fa7d 	bl	8006a50 <HAL_GetTick>
 800f556:	4602      	mov	r2, r0
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	2b02      	cmp	r3, #2
 800f55e:	d901      	bls.n	800f564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f560:	2303      	movs	r3, #3
 800f562:	e23d      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f564:	4b33      	ldr	r3, [pc, #204]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1f0      	bne.n	800f552 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f003 0308 	and.w	r3, r3, #8
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d036      	beq.n	800f5ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	695b      	ldr	r3, [r3, #20]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d019      	beq.n	800f5b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f584:	4b2b      	ldr	r3, [pc, #172]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f588:	4a2a      	ldr	r2, [pc, #168]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f58a:	f043 0301 	orr.w	r3, r3, #1
 800f58e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f590:	f7f7 fa5e 	bl	8006a50 <HAL_GetTick>
 800f594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f596:	e008      	b.n	800f5aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f598:	f7f7 fa5a 	bl	8006a50 <HAL_GetTick>
 800f59c:	4602      	mov	r2, r0
 800f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d901      	bls.n	800f5aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	e21a      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f5aa:	4b22      	ldr	r3, [pc, #136]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f5ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5ae:	f003 0302 	and.w	r3, r3, #2
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0f0      	beq.n	800f598 <HAL_RCC_OscConfig+0x45c>
 800f5b6:	e018      	b.n	800f5ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f5b8:	4b1e      	ldr	r3, [pc, #120]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5bc:	4a1d      	ldr	r2, [pc, #116]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f5be:	f023 0301 	bic.w	r3, r3, #1
 800f5c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5c4:	f7f7 fa44 	bl	8006a50 <HAL_GetTick>
 800f5c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f5ca:	e008      	b.n	800f5de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f5cc:	f7f7 fa40 	bl	8006a50 <HAL_GetTick>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d901      	bls.n	800f5de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f5da:	2303      	movs	r3, #3
 800f5dc:	e200      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f5de:	4b15      	ldr	r3, [pc, #84]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e2:	f003 0302 	and.w	r3, r3, #2
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1f0      	bne.n	800f5cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f003 0320 	and.w	r3, r3, #32
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d039      	beq.n	800f66a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	699b      	ldr	r3, [r3, #24]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d01c      	beq.n	800f638 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f5fe:	4b0d      	ldr	r3, [pc, #52]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a0c      	ldr	r2, [pc, #48]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f608:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f60a:	f7f7 fa21 	bl	8006a50 <HAL_GetTick>
 800f60e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f610:	e008      	b.n	800f624 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f612:	f7f7 fa1d 	bl	8006a50 <HAL_GetTick>
 800f616:	4602      	mov	r2, r0
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	1ad3      	subs	r3, r2, r3
 800f61c:	2b02      	cmp	r3, #2
 800f61e:	d901      	bls.n	800f624 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f620:	2303      	movs	r3, #3
 800f622:	e1dd      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f624:	4b03      	ldr	r3, [pc, #12]	; (800f634 <HAL_RCC_OscConfig+0x4f8>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d0f0      	beq.n	800f612 <HAL_RCC_OscConfig+0x4d6>
 800f630:	e01b      	b.n	800f66a <HAL_RCC_OscConfig+0x52e>
 800f632:	bf00      	nop
 800f634:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f638:	4b9b      	ldr	r3, [pc, #620]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a9a      	ldr	r2, [pc, #616]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f642:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f644:	f7f7 fa04 	bl	8006a50 <HAL_GetTick>
 800f648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f64a:	e008      	b.n	800f65e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f64c:	f7f7 fa00 	bl	8006a50 <HAL_GetTick>
 800f650:	4602      	mov	r2, r0
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	2b02      	cmp	r3, #2
 800f658:	d901      	bls.n	800f65e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f65a:	2303      	movs	r3, #3
 800f65c:	e1c0      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f65e:	4b92      	ldr	r3, [pc, #584]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1f0      	bne.n	800f64c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f003 0304 	and.w	r3, r3, #4
 800f672:	2b00      	cmp	r3, #0
 800f674:	f000 8081 	beq.w	800f77a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f678:	4b8c      	ldr	r3, [pc, #560]	; (800f8ac <HAL_RCC_OscConfig+0x770>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a8b      	ldr	r2, [pc, #556]	; (800f8ac <HAL_RCC_OscConfig+0x770>)
 800f67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f684:	f7f7 f9e4 	bl	8006a50 <HAL_GetTick>
 800f688:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f68a:	e008      	b.n	800f69e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f68c:	f7f7 f9e0 	bl	8006a50 <HAL_GetTick>
 800f690:	4602      	mov	r2, r0
 800f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f694:	1ad3      	subs	r3, r2, r3
 800f696:	2b64      	cmp	r3, #100	; 0x64
 800f698:	d901      	bls.n	800f69e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f69a:	2303      	movs	r3, #3
 800f69c:	e1a0      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f69e:	4b83      	ldr	r3, [pc, #524]	; (800f8ac <HAL_RCC_OscConfig+0x770>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d0f0      	beq.n	800f68c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d106      	bne.n	800f6c0 <HAL_RCC_OscConfig+0x584>
 800f6b2:	4b7d      	ldr	r3, [pc, #500]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6b6:	4a7c      	ldr	r2, [pc, #496]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6b8:	f043 0301 	orr.w	r3, r3, #1
 800f6bc:	6713      	str	r3, [r2, #112]	; 0x70
 800f6be:	e02d      	b.n	800f71c <HAL_RCC_OscConfig+0x5e0>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10c      	bne.n	800f6e2 <HAL_RCC_OscConfig+0x5a6>
 800f6c8:	4b77      	ldr	r3, [pc, #476]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6cc:	4a76      	ldr	r2, [pc, #472]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6ce:	f023 0301 	bic.w	r3, r3, #1
 800f6d2:	6713      	str	r3, [r2, #112]	; 0x70
 800f6d4:	4b74      	ldr	r3, [pc, #464]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d8:	4a73      	ldr	r2, [pc, #460]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6da:	f023 0304 	bic.w	r3, r3, #4
 800f6de:	6713      	str	r3, [r2, #112]	; 0x70
 800f6e0:	e01c      	b.n	800f71c <HAL_RCC_OscConfig+0x5e0>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	2b05      	cmp	r3, #5
 800f6e8:	d10c      	bne.n	800f704 <HAL_RCC_OscConfig+0x5c8>
 800f6ea:	4b6f      	ldr	r3, [pc, #444]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ee:	4a6e      	ldr	r2, [pc, #440]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6f0:	f043 0304 	orr.w	r3, r3, #4
 800f6f4:	6713      	str	r3, [r2, #112]	; 0x70
 800f6f6:	4b6c      	ldr	r3, [pc, #432]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fa:	4a6b      	ldr	r2, [pc, #428]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f6fc:	f043 0301 	orr.w	r3, r3, #1
 800f700:	6713      	str	r3, [r2, #112]	; 0x70
 800f702:	e00b      	b.n	800f71c <HAL_RCC_OscConfig+0x5e0>
 800f704:	4b68      	ldr	r3, [pc, #416]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f708:	4a67      	ldr	r2, [pc, #412]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f70a:	f023 0301 	bic.w	r3, r3, #1
 800f70e:	6713      	str	r3, [r2, #112]	; 0x70
 800f710:	4b65      	ldr	r3, [pc, #404]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f714:	4a64      	ldr	r2, [pc, #400]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f716:	f023 0304 	bic.w	r3, r3, #4
 800f71a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d015      	beq.n	800f750 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f724:	f7f7 f994 	bl	8006a50 <HAL_GetTick>
 800f728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f72a:	e00a      	b.n	800f742 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f72c:	f7f7 f990 	bl	8006a50 <HAL_GetTick>
 800f730:	4602      	mov	r2, r0
 800f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f734:	1ad3      	subs	r3, r2, r3
 800f736:	f241 3288 	movw	r2, #5000	; 0x1388
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d901      	bls.n	800f742 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f73e:	2303      	movs	r3, #3
 800f740:	e14e      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f742:	4b59      	ldr	r3, [pc, #356]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f746:	f003 0302 	and.w	r3, r3, #2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d0ee      	beq.n	800f72c <HAL_RCC_OscConfig+0x5f0>
 800f74e:	e014      	b.n	800f77a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f750:	f7f7 f97e 	bl	8006a50 <HAL_GetTick>
 800f754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f756:	e00a      	b.n	800f76e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f758:	f7f7 f97a 	bl	8006a50 <HAL_GetTick>
 800f75c:	4602      	mov	r2, r0
 800f75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	f241 3288 	movw	r2, #5000	; 0x1388
 800f766:	4293      	cmp	r3, r2
 800f768:	d901      	bls.n	800f76e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f76a:	2303      	movs	r3, #3
 800f76c:	e138      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f76e:	4b4e      	ldr	r3, [pc, #312]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f772:	f003 0302 	and.w	r3, r3, #2
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1ee      	bne.n	800f758 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f000 812d 	beq.w	800f9de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f784:	4b48      	ldr	r3, [pc, #288]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f78c:	2b18      	cmp	r3, #24
 800f78e:	f000 80bd 	beq.w	800f90c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f796:	2b02      	cmp	r3, #2
 800f798:	f040 809e 	bne.w	800f8d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f79c:	4b42      	ldr	r3, [pc, #264]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a41      	ldr	r2, [pc, #260]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f7a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f7a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7a8:	f7f7 f952 	bl	8006a50 <HAL_GetTick>
 800f7ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f7ae:	e008      	b.n	800f7c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f7b0:	f7f7 f94e 	bl	8006a50 <HAL_GetTick>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	2b02      	cmp	r3, #2
 800f7bc:	d901      	bls.n	800f7c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f7be:	2303      	movs	r3, #3
 800f7c0:	e10e      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f7c2:	4b39      	ldr	r3, [pc, #228]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1f0      	bne.n	800f7b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f7ce:	4b36      	ldr	r3, [pc, #216]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7d2:	4b37      	ldr	r3, [pc, #220]	; (800f8b0 <HAL_RCC_OscConfig+0x774>)
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f7de:	0112      	lsls	r2, r2, #4
 800f7e0:	430a      	orrs	r2, r1
 800f7e2:	4931      	ldr	r1, [pc, #196]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	628b      	str	r3, [r1, #40]	; 0x28
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ec:	3b01      	subs	r3, #1
 800f7ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	025b      	lsls	r3, r3, #9
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	431a      	orrs	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f802:	3b01      	subs	r3, #1
 800f804:	041b      	lsls	r3, r3, #16
 800f806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f80a:	431a      	orrs	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f810:	3b01      	subs	r3, #1
 800f812:	061b      	lsls	r3, r3, #24
 800f814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f818:	4923      	ldr	r1, [pc, #140]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f81a:	4313      	orrs	r3, r2
 800f81c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f81e:	4b22      	ldr	r3, [pc, #136]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f822:	4a21      	ldr	r2, [pc, #132]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f824:	f023 0301 	bic.w	r3, r3, #1
 800f828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f82a:	4b1f      	ldr	r3, [pc, #124]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f82c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f82e:	4b21      	ldr	r3, [pc, #132]	; (800f8b4 <HAL_RCC_OscConfig+0x778>)
 800f830:	4013      	ands	r3, r2
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f836:	00d2      	lsls	r2, r2, #3
 800f838:	491b      	ldr	r1, [pc, #108]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f83a:	4313      	orrs	r3, r2
 800f83c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f83e:	4b1a      	ldr	r3, [pc, #104]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f842:	f023 020c 	bic.w	r2, r3, #12
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84a:	4917      	ldr	r1, [pc, #92]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f84c:	4313      	orrs	r3, r2
 800f84e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f850:	4b15      	ldr	r3, [pc, #84]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f854:	f023 0202 	bic.w	r2, r3, #2
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f85c:	4912      	ldr	r1, [pc, #72]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f85e:	4313      	orrs	r3, r2
 800f860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f862:	4b11      	ldr	r3, [pc, #68]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f866:	4a10      	ldr	r2, [pc, #64]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f86c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f86e:	4b0e      	ldr	r3, [pc, #56]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f872:	4a0d      	ldr	r2, [pc, #52]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f87a:	4b0b      	ldr	r3, [pc, #44]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87e:	4a0a      	ldr	r2, [pc, #40]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f886:	4b08      	ldr	r3, [pc, #32]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88a:	4a07      	ldr	r2, [pc, #28]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f88c:	f043 0301 	orr.w	r3, r3, #1
 800f890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f892:	4b05      	ldr	r3, [pc, #20]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a04      	ldr	r2, [pc, #16]	; (800f8a8 <HAL_RCC_OscConfig+0x76c>)
 800f898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f89c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f89e:	f7f7 f8d7 	bl	8006a50 <HAL_GetTick>
 800f8a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f8a4:	e011      	b.n	800f8ca <HAL_RCC_OscConfig+0x78e>
 800f8a6:	bf00      	nop
 800f8a8:	58024400 	.word	0x58024400
 800f8ac:	58024800 	.word	0x58024800
 800f8b0:	fffffc0c 	.word	0xfffffc0c
 800f8b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8b8:	f7f7 f8ca 	bl	8006a50 <HAL_GetTick>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	2b02      	cmp	r3, #2
 800f8c4:	d901      	bls.n	800f8ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	e08a      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f8ca:	4b47      	ldr	r3, [pc, #284]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d0f0      	beq.n	800f8b8 <HAL_RCC_OscConfig+0x77c>
 800f8d6:	e082      	b.n	800f9de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f8d8:	4b43      	ldr	r3, [pc, #268]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a42      	ldr	r2, [pc, #264]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f8de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f8e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8e4:	f7f7 f8b4 	bl	8006a50 <HAL_GetTick>
 800f8e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8ea:	e008      	b.n	800f8fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8ec:	f7f7 f8b0 	bl	8006a50 <HAL_GetTick>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	1ad3      	subs	r3, r2, r3
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d901      	bls.n	800f8fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f8fa:	2303      	movs	r3, #3
 800f8fc:	e070      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8fe:	4b3a      	ldr	r3, [pc, #232]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1f0      	bne.n	800f8ec <HAL_RCC_OscConfig+0x7b0>
 800f90a:	e068      	b.n	800f9de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f90c:	4b36      	ldr	r3, [pc, #216]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f910:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f912:	4b35      	ldr	r3, [pc, #212]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f916:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d031      	beq.n	800f984 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	f003 0203 	and.w	r2, r3, #3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d12a      	bne.n	800f984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	091b      	lsrs	r3, r3, #4
 800f932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d122      	bne.n	800f984 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f948:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d11a      	bne.n	800f984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	0a5b      	lsrs	r3, r3, #9
 800f952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f95a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d111      	bne.n	800f984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	0c1b      	lsrs	r3, r3, #16
 800f964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f96c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f96e:	429a      	cmp	r2, r3
 800f970:	d108      	bne.n	800f984 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	0e1b      	lsrs	r3, r3, #24
 800f976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f97e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f980:	429a      	cmp	r2, r3
 800f982:	d001      	beq.n	800f988 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	e02b      	b.n	800f9e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f988:	4b17      	ldr	r3, [pc, #92]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98c:	08db      	lsrs	r3, r3, #3
 800f98e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f992:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f998:	693a      	ldr	r2, [r7, #16]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d01f      	beq.n	800f9de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f99e:	4b12      	ldr	r3, [pc, #72]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a2:	4a11      	ldr	r2, [pc, #68]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f9a4:	f023 0301 	bic.w	r3, r3, #1
 800f9a8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f9aa:	f7f7 f851 	bl	8006a50 <HAL_GetTick>
 800f9ae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f9b0:	bf00      	nop
 800f9b2:	f7f7 f84d 	bl	8006a50 <HAL_GetTick>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d0f9      	beq.n	800f9b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f9be:	4b0a      	ldr	r3, [pc, #40]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f9c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9c2:	4b0a      	ldr	r3, [pc, #40]	; (800f9ec <HAL_RCC_OscConfig+0x8b0>)
 800f9c4:	4013      	ands	r3, r2
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f9ca:	00d2      	lsls	r2, r2, #3
 800f9cc:	4906      	ldr	r1, [pc, #24]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f9d2:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d6:	4a04      	ldr	r2, [pc, #16]	; (800f9e8 <HAL_RCC_OscConfig+0x8ac>)
 800f9d8:	f043 0301 	orr.w	r3, r3, #1
 800f9dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3730      	adds	r7, #48	; 0x30
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	58024400 	.word	0x58024400
 800f9ec:	ffff0007 	.word	0xffff0007

0800f9f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b086      	sub	sp, #24
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa00:	2301      	movs	r3, #1
 800fa02:	e19c      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fa04:	4b8a      	ldr	r3, [pc, #552]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f003 030f 	and.w	r3, r3, #15
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d910      	bls.n	800fa34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa12:	4b87      	ldr	r3, [pc, #540]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f023 020f 	bic.w	r2, r3, #15
 800fa1a:	4985      	ldr	r1, [pc, #532]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa22:	4b83      	ldr	r3, [pc, #524]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f003 030f 	and.w	r3, r3, #15
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d001      	beq.n	800fa34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	e184      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f003 0304 	and.w	r3, r3, #4
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d010      	beq.n	800fa62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	691a      	ldr	r2, [r3, #16]
 800fa44:	4b7b      	ldr	r3, [pc, #492]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fa46:	699b      	ldr	r3, [r3, #24]
 800fa48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d908      	bls.n	800fa62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fa50:	4b78      	ldr	r3, [pc, #480]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	4975      	ldr	r1, [pc, #468]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f003 0308 	and.w	r3, r3, #8
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d010      	beq.n	800fa90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	695a      	ldr	r2, [r3, #20]
 800fa72:	4b70      	ldr	r3, [pc, #448]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fa74:	69db      	ldr	r3, [r3, #28]
 800fa76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d908      	bls.n	800fa90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fa7e:	4b6d      	ldr	r3, [pc, #436]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fa80:	69db      	ldr	r3, [r3, #28]
 800fa82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	496a      	ldr	r1, [pc, #424]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f003 0310 	and.w	r3, r3, #16
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d010      	beq.n	800fabe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	699a      	ldr	r2, [r3, #24]
 800faa0:	4b64      	ldr	r3, [pc, #400]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d908      	bls.n	800fabe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800faac:	4b61      	ldr	r3, [pc, #388]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800faae:	69db      	ldr	r3, [r3, #28]
 800fab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	699b      	ldr	r3, [r3, #24]
 800fab8:	495e      	ldr	r1, [pc, #376]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800faba:	4313      	orrs	r3, r2
 800fabc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f003 0320 	and.w	r3, r3, #32
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d010      	beq.n	800faec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	69da      	ldr	r2, [r3, #28]
 800face:	4b59      	ldr	r3, [pc, #356]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d908      	bls.n	800faec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fada:	4b56      	ldr	r3, [pc, #344]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	69db      	ldr	r3, [r3, #28]
 800fae6:	4953      	ldr	r1, [pc, #332]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fae8:	4313      	orrs	r3, r2
 800faea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f003 0302 	and.w	r3, r3, #2
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d010      	beq.n	800fb1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	68da      	ldr	r2, [r3, #12]
 800fafc:	4b4d      	ldr	r3, [pc, #308]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fafe:	699b      	ldr	r3, [r3, #24]
 800fb00:	f003 030f 	and.w	r3, r3, #15
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d908      	bls.n	800fb1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fb08:	4b4a      	ldr	r3, [pc, #296]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb0a:	699b      	ldr	r3, [r3, #24]
 800fb0c:	f023 020f 	bic.w	r2, r3, #15
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	4947      	ldr	r1, [pc, #284]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb16:	4313      	orrs	r3, r2
 800fb18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d055      	beq.n	800fbd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fb26:	4b43      	ldr	r3, [pc, #268]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	4940      	ldr	r1, [pc, #256]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb34:	4313      	orrs	r3, r2
 800fb36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	2b02      	cmp	r3, #2
 800fb3e:	d107      	bne.n	800fb50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fb40:	4b3c      	ldr	r3, [pc, #240]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d121      	bne.n	800fb90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e0f6      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	2b03      	cmp	r3, #3
 800fb56:	d107      	bne.n	800fb68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb58:	4b36      	ldr	r3, [pc, #216]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d115      	bne.n	800fb90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb64:	2301      	movs	r3, #1
 800fb66:	e0ea      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d107      	bne.n	800fb80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fb70:	4b30      	ldr	r3, [pc, #192]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d109      	bne.n	800fb90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e0de      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fb80:	4b2c      	ldr	r3, [pc, #176]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f003 0304 	and.w	r3, r3, #4
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e0d6      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fb90:	4b28      	ldr	r3, [pc, #160]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	f023 0207 	bic.w	r2, r3, #7
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4925      	ldr	r1, [pc, #148]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fba2:	f7f6 ff55 	bl	8006a50 <HAL_GetTick>
 800fba6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fba8:	e00a      	b.n	800fbc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fbaa:	f7f6 ff51 	bl	8006a50 <HAL_GetTick>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d901      	bls.n	800fbc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e0be      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbc0:	4b1c      	ldr	r3, [pc, #112]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fbc2:	691b      	ldr	r3, [r3, #16]
 800fbc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d1eb      	bne.n	800fbaa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f003 0302 	and.w	r3, r3, #2
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d010      	beq.n	800fc00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68da      	ldr	r2, [r3, #12]
 800fbe2:	4b14      	ldr	r3, [pc, #80]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fbe4:	699b      	ldr	r3, [r3, #24]
 800fbe6:	f003 030f 	and.w	r3, r3, #15
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d208      	bcs.n	800fc00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fbee:	4b11      	ldr	r3, [pc, #68]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f023 020f 	bic.w	r2, r3, #15
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	490e      	ldr	r1, [pc, #56]	; (800fc34 <HAL_RCC_ClockConfig+0x244>)
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fc00:	4b0b      	ldr	r3, [pc, #44]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f003 030f 	and.w	r3, r3, #15
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d214      	bcs.n	800fc38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc0e:	4b08      	ldr	r3, [pc, #32]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f023 020f 	bic.w	r2, r3, #15
 800fc16:	4906      	ldr	r1, [pc, #24]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc1e:	4b04      	ldr	r3, [pc, #16]	; (800fc30 <HAL_RCC_ClockConfig+0x240>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f003 030f 	and.w	r3, r3, #15
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d005      	beq.n	800fc38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e086      	b.n	800fd3e <HAL_RCC_ClockConfig+0x34e>
 800fc30:	52002000 	.word	0x52002000
 800fc34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f003 0304 	and.w	r3, r3, #4
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d010      	beq.n	800fc66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	691a      	ldr	r2, [r3, #16]
 800fc48:	4b3f      	ldr	r3, [pc, #252]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fc4a:	699b      	ldr	r3, [r3, #24]
 800fc4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d208      	bcs.n	800fc66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fc54:	4b3c      	ldr	r3, [pc, #240]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fc56:	699b      	ldr	r3, [r3, #24]
 800fc58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	4939      	ldr	r1, [pc, #228]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fc62:	4313      	orrs	r3, r2
 800fc64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f003 0308 	and.w	r3, r3, #8
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d010      	beq.n	800fc94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	695a      	ldr	r2, [r3, #20]
 800fc76:	4b34      	ldr	r3, [pc, #208]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fc78:	69db      	ldr	r3, [r3, #28]
 800fc7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d208      	bcs.n	800fc94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fc82:	4b31      	ldr	r3, [pc, #196]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	695b      	ldr	r3, [r3, #20]
 800fc8e:	492e      	ldr	r1, [pc, #184]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fc90:	4313      	orrs	r3, r2
 800fc92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f003 0310 	and.w	r3, r3, #16
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d010      	beq.n	800fcc2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	699a      	ldr	r2, [r3, #24]
 800fca4:	4b28      	ldr	r3, [pc, #160]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fca6:	69db      	ldr	r3, [r3, #28]
 800fca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d208      	bcs.n	800fcc2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fcb0:	4b25      	ldr	r3, [pc, #148]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fcb2:	69db      	ldr	r3, [r3, #28]
 800fcb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	699b      	ldr	r3, [r3, #24]
 800fcbc:	4922      	ldr	r1, [pc, #136]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f003 0320 	and.w	r3, r3, #32
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d010      	beq.n	800fcf0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	69da      	ldr	r2, [r3, #28]
 800fcd2:	4b1d      	ldr	r3, [pc, #116]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fcd4:	6a1b      	ldr	r3, [r3, #32]
 800fcd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d208      	bcs.n	800fcf0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fcde:	4b1a      	ldr	r3, [pc, #104]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	69db      	ldr	r3, [r3, #28]
 800fcea:	4917      	ldr	r1, [pc, #92]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fcec:	4313      	orrs	r3, r2
 800fcee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fcf0:	f000 f834 	bl	800fd5c <HAL_RCC_GetSysClockFreq>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	4b14      	ldr	r3, [pc, #80]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fcf8:	699b      	ldr	r3, [r3, #24]
 800fcfa:	0a1b      	lsrs	r3, r3, #8
 800fcfc:	f003 030f 	and.w	r3, r3, #15
 800fd00:	4912      	ldr	r1, [pc, #72]	; (800fd4c <HAL_RCC_ClockConfig+0x35c>)
 800fd02:	5ccb      	ldrb	r3, [r1, r3]
 800fd04:	f003 031f 	and.w	r3, r3, #31
 800fd08:	fa22 f303 	lsr.w	r3, r2, r3
 800fd0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fd0e:	4b0e      	ldr	r3, [pc, #56]	; (800fd48 <HAL_RCC_ClockConfig+0x358>)
 800fd10:	699b      	ldr	r3, [r3, #24]
 800fd12:	f003 030f 	and.w	r3, r3, #15
 800fd16:	4a0d      	ldr	r2, [pc, #52]	; (800fd4c <HAL_RCC_ClockConfig+0x35c>)
 800fd18:	5cd3      	ldrb	r3, [r2, r3]
 800fd1a:	f003 031f 	and.w	r3, r3, #31
 800fd1e:	693a      	ldr	r2, [r7, #16]
 800fd20:	fa22 f303 	lsr.w	r3, r2, r3
 800fd24:	4a0a      	ldr	r2, [pc, #40]	; (800fd50 <HAL_RCC_ClockConfig+0x360>)
 800fd26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fd28:	4a0a      	ldr	r2, [pc, #40]	; (800fd54 <HAL_RCC_ClockConfig+0x364>)
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800fd2e:	4b0a      	ldr	r3, [pc, #40]	; (800fd58 <HAL_RCC_ClockConfig+0x368>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f5 f8f4 	bl	8004f20 <HAL_InitTick>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3718      	adds	r7, #24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	58024400 	.word	0x58024400
 800fd4c:	0801bdb8 	.word	0x0801bdb8
 800fd50:	240000cc 	.word	0x240000cc
 800fd54:	240000c8 	.word	0x240000c8
 800fd58:	240000d0 	.word	0x240000d0

0800fd5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b089      	sub	sp, #36	; 0x24
 800fd60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fd62:	4bb3      	ldr	r3, [pc, #716]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd6a:	2b18      	cmp	r3, #24
 800fd6c:	f200 8155 	bhi.w	801001a <HAL_RCC_GetSysClockFreq+0x2be>
 800fd70:	a201      	add	r2, pc, #4	; (adr r2, 800fd78 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd76:	bf00      	nop
 800fd78:	0800fddd 	.word	0x0800fddd
 800fd7c:	0801001b 	.word	0x0801001b
 800fd80:	0801001b 	.word	0x0801001b
 800fd84:	0801001b 	.word	0x0801001b
 800fd88:	0801001b 	.word	0x0801001b
 800fd8c:	0801001b 	.word	0x0801001b
 800fd90:	0801001b 	.word	0x0801001b
 800fd94:	0801001b 	.word	0x0801001b
 800fd98:	0800fe03 	.word	0x0800fe03
 800fd9c:	0801001b 	.word	0x0801001b
 800fda0:	0801001b 	.word	0x0801001b
 800fda4:	0801001b 	.word	0x0801001b
 800fda8:	0801001b 	.word	0x0801001b
 800fdac:	0801001b 	.word	0x0801001b
 800fdb0:	0801001b 	.word	0x0801001b
 800fdb4:	0801001b 	.word	0x0801001b
 800fdb8:	0800fe09 	.word	0x0800fe09
 800fdbc:	0801001b 	.word	0x0801001b
 800fdc0:	0801001b 	.word	0x0801001b
 800fdc4:	0801001b 	.word	0x0801001b
 800fdc8:	0801001b 	.word	0x0801001b
 800fdcc:	0801001b 	.word	0x0801001b
 800fdd0:	0801001b 	.word	0x0801001b
 800fdd4:	0801001b 	.word	0x0801001b
 800fdd8:	0800fe0f 	.word	0x0800fe0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fddc:	4b94      	ldr	r3, [pc, #592]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f003 0320 	and.w	r3, r3, #32
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d009      	beq.n	800fdfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fde8:	4b91      	ldr	r3, [pc, #580]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	08db      	lsrs	r3, r3, #3
 800fdee:	f003 0303 	and.w	r3, r3, #3
 800fdf2:	4a90      	ldr	r2, [pc, #576]	; (8010034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fdf4:	fa22 f303 	lsr.w	r3, r2, r3
 800fdf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800fdfa:	e111      	b.n	8010020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fdfc:	4b8d      	ldr	r3, [pc, #564]	; (8010034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fdfe:	61bb      	str	r3, [r7, #24]
      break;
 800fe00:	e10e      	b.n	8010020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800fe02:	4b8d      	ldr	r3, [pc, #564]	; (8010038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fe04:	61bb      	str	r3, [r7, #24]
      break;
 800fe06:	e10b      	b.n	8010020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800fe08:	4b8c      	ldr	r3, [pc, #560]	; (801003c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fe0a:	61bb      	str	r3, [r7, #24]
      break;
 800fe0c:	e108      	b.n	8010020 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe0e:	4b88      	ldr	r3, [pc, #544]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe12:	f003 0303 	and.w	r3, r3, #3
 800fe16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fe18:	4b85      	ldr	r3, [pc, #532]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1c:	091b      	lsrs	r3, r3, #4
 800fe1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fe24:	4b82      	ldr	r3, [pc, #520]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe28:	f003 0301 	and.w	r3, r3, #1
 800fe2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fe2e:	4b80      	ldr	r3, [pc, #512]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe32:	08db      	lsrs	r3, r3, #3
 800fe34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	fb02 f303 	mul.w	r3, r2, r3
 800fe3e:	ee07 3a90 	vmov	s15, r3
 800fe42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f000 80e1 	beq.w	8010014 <HAL_RCC_GetSysClockFreq+0x2b8>
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	f000 8083 	beq.w	800ff60 <HAL_RCC_GetSysClockFreq+0x204>
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	f200 80a1 	bhi.w	800ffa4 <HAL_RCC_GetSysClockFreq+0x248>
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d003      	beq.n	800fe70 <HAL_RCC_GetSysClockFreq+0x114>
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d056      	beq.n	800ff1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800fe6e:	e099      	b.n	800ffa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe70:	4b6f      	ldr	r3, [pc, #444]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f003 0320 	and.w	r3, r3, #32
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d02d      	beq.n	800fed8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe7c:	4b6c      	ldr	r3, [pc, #432]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	08db      	lsrs	r3, r3, #3
 800fe82:	f003 0303 	and.w	r3, r3, #3
 800fe86:	4a6b      	ldr	r2, [pc, #428]	; (8010034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fe88:	fa22 f303 	lsr.w	r3, r2, r3
 800fe8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	ee07 3a90 	vmov	s15, r3
 800fe94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	ee07 3a90 	vmov	s15, r3
 800fe9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fea6:	4b62      	ldr	r3, [pc, #392]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feae:	ee07 3a90 	vmov	s15, r3
 800feb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800feba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010040 <HAL_RCC_GetSysClockFreq+0x2e4>
 800febe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fed2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800fed6:	e087      	b.n	800ffe8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	ee07 3a90 	vmov	s15, r3
 800fede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fee2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010044 <HAL_RCC_GetSysClockFreq+0x2e8>
 800fee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800feea:	4b51      	ldr	r3, [pc, #324]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800feec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fefa:	ed97 6a02 	vldr	s12, [r7, #8]
 800fefe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010040 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ff1a:	e065      	b.n	800ffe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	ee07 3a90 	vmov	s15, r3
 800ff22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010048 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ff2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff2e:	4b40      	ldr	r3, [pc, #256]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff36:	ee07 3a90 	vmov	s15, r3
 800ff3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ff42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010040 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ff5e:	e043      	b.n	800ffe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	ee07 3a90 	vmov	s15, r3
 800ff66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 801004c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ff6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff72:	4b2f      	ldr	r3, [pc, #188]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff7a:	ee07 3a90 	vmov	s15, r3
 800ff7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ff86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010040 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ffa2:	e021      	b.n	800ffe8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	ee07 3a90 	vmov	s15, r3
 800ffaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010048 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ffb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffb6:	4b1e      	ldr	r3, [pc, #120]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ffb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffbe:	ee07 3a90 	vmov	s15, r3
 800ffc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ffca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010040 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ffce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ffe6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ffe8:	4b11      	ldr	r3, [pc, #68]	; (8010030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ffea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffec:	0a5b      	lsrs	r3, r3, #9
 800ffee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fff2:	3301      	adds	r3, #1
 800fff4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	ee07 3a90 	vmov	s15, r3
 800fffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010000:	edd7 6a07 	vldr	s13, [r7, #28]
 8010004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801000c:	ee17 3a90 	vmov	r3, s15
 8010010:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8010012:	e005      	b.n	8010020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8010014:	2300      	movs	r3, #0
 8010016:	61bb      	str	r3, [r7, #24]
      break;
 8010018:	e002      	b.n	8010020 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801001a:	4b07      	ldr	r3, [pc, #28]	; (8010038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801001c:	61bb      	str	r3, [r7, #24]
      break;
 801001e:	bf00      	nop
  }

  return sysclockfreq;
 8010020:	69bb      	ldr	r3, [r7, #24]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3724      	adds	r7, #36	; 0x24
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	58024400 	.word	0x58024400
 8010034:	03d09000 	.word	0x03d09000
 8010038:	003d0900 	.word	0x003d0900
 801003c:	017d7840 	.word	0x017d7840
 8010040:	46000000 	.word	0x46000000
 8010044:	4c742400 	.word	0x4c742400
 8010048:	4a742400 	.word	0x4a742400
 801004c:	4bbebc20 	.word	0x4bbebc20

08010050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010056:	f7ff fe81 	bl	800fd5c <HAL_RCC_GetSysClockFreq>
 801005a:	4602      	mov	r2, r0
 801005c:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <HAL_RCC_GetHCLKFreq+0x50>)
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	0a1b      	lsrs	r3, r3, #8
 8010062:	f003 030f 	and.w	r3, r3, #15
 8010066:	490f      	ldr	r1, [pc, #60]	; (80100a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8010068:	5ccb      	ldrb	r3, [r1, r3]
 801006a:	f003 031f 	and.w	r3, r3, #31
 801006e:	fa22 f303 	lsr.w	r3, r2, r3
 8010072:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010074:	4b0a      	ldr	r3, [pc, #40]	; (80100a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	f003 030f 	and.w	r3, r3, #15
 801007c:	4a09      	ldr	r2, [pc, #36]	; (80100a4 <HAL_RCC_GetHCLKFreq+0x54>)
 801007e:	5cd3      	ldrb	r3, [r2, r3]
 8010080:	f003 031f 	and.w	r3, r3, #31
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	fa22 f303 	lsr.w	r3, r2, r3
 801008a:	4a07      	ldr	r2, [pc, #28]	; (80100a8 <HAL_RCC_GetHCLKFreq+0x58>)
 801008c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801008e:	4a07      	ldr	r2, [pc, #28]	; (80100ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010094:	4b04      	ldr	r3, [pc, #16]	; (80100a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8010096:	681b      	ldr	r3, [r3, #0]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	58024400 	.word	0x58024400
 80100a4:	0801bdb8 	.word	0x0801bdb8
 80100a8:	240000cc 	.word	0x240000cc
 80100ac:	240000c8 	.word	0x240000c8

080100b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80100b4:	f7ff ffcc 	bl	8010050 <HAL_RCC_GetHCLKFreq>
 80100b8:	4602      	mov	r2, r0
 80100ba:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80100bc:	69db      	ldr	r3, [r3, #28]
 80100be:	091b      	lsrs	r3, r3, #4
 80100c0:	f003 0307 	and.w	r3, r3, #7
 80100c4:	4904      	ldr	r1, [pc, #16]	; (80100d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80100c6:	5ccb      	ldrb	r3, [r1, r3]
 80100c8:	f003 031f 	and.w	r3, r3, #31
 80100cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	58024400 	.word	0x58024400
 80100d8:	0801bdb8 	.word	0x0801bdb8

080100dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80100e0:	f7ff ffb6 	bl	8010050 <HAL_RCC_GetHCLKFreq>
 80100e4:	4602      	mov	r2, r0
 80100e6:	4b06      	ldr	r3, [pc, #24]	; (8010100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80100e8:	69db      	ldr	r3, [r3, #28]
 80100ea:	0a1b      	lsrs	r3, r3, #8
 80100ec:	f003 0307 	and.w	r3, r3, #7
 80100f0:	4904      	ldr	r1, [pc, #16]	; (8010104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80100f2:	5ccb      	ldrb	r3, [r1, r3]
 80100f4:	f003 031f 	and.w	r3, r3, #31
 80100f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	58024400 	.word	0x58024400
 8010104:	0801bdb8 	.word	0x0801bdb8

08010108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	223f      	movs	r2, #63	; 0x3f
 8010116:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010118:	4b1a      	ldr	r3, [pc, #104]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	f003 0207 	and.w	r2, r3, #7
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8010124:	4b17      	ldr	r3, [pc, #92]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 8010126:	699b      	ldr	r3, [r3, #24]
 8010128:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8010130:	4b14      	ldr	r3, [pc, #80]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	f003 020f 	and.w	r2, r3, #15
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801013c:	4b11      	ldr	r3, [pc, #68]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 801013e:	699b      	ldr	r3, [r3, #24]
 8010140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8010148:	4b0e      	ldr	r3, [pc, #56]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 801014a:	69db      	ldr	r3, [r3, #28]
 801014c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010154:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 8010156:	69db      	ldr	r3, [r3, #28]
 8010158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010160:	4b08      	ldr	r3, [pc, #32]	; (8010184 <HAL_RCC_GetClockConfig+0x7c>)
 8010162:	6a1b      	ldr	r3, [r3, #32]
 8010164:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801016c:	4b06      	ldr	r3, [pc, #24]	; (8010188 <HAL_RCC_GetClockConfig+0x80>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f003 020f 	and.w	r2, r3, #15
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	601a      	str	r2, [r3, #0]
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	58024400 	.word	0x58024400
 8010188:	52002000 	.word	0x52002000

0801018c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801018c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010190:	b0ca      	sub	sp, #296	; 0x128
 8010192:	af00      	add	r7, sp, #0
 8010194:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010198:	2300      	movs	r3, #0
 801019a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801019e:	2300      	movs	r3, #0
 80101a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80101a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80101b0:	2500      	movs	r5, #0
 80101b2:	ea54 0305 	orrs.w	r3, r4, r5
 80101b6:	d049      	beq.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80101b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80101c2:	d02f      	beq.n	8010224 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80101c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80101c8:	d828      	bhi.n	801021c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80101ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101ce:	d01a      	beq.n	8010206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80101d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101d4:	d822      	bhi.n	801021c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d003      	beq.n	80101e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80101da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101de:	d007      	beq.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80101e0:	e01c      	b.n	801021c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101e2:	4bb8      	ldr	r3, [pc, #736]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e6:	4ab7      	ldr	r2, [pc, #732]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80101ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80101ee:	e01a      	b.n	8010226 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80101f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101f4:	3308      	adds	r3, #8
 80101f6:	2102      	movs	r1, #2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f002 fb61 	bl	80128c0 <RCCEx_PLL2_Config>
 80101fe:	4603      	mov	r3, r0
 8010200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010204:	e00f      	b.n	8010226 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801020a:	3328      	adds	r3, #40	; 0x28
 801020c:	2102      	movs	r1, #2
 801020e:	4618      	mov	r0, r3
 8010210:	f002 fc08 	bl	8012a24 <RCCEx_PLL3_Config>
 8010214:	4603      	mov	r3, r0
 8010216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801021a:	e004      	b.n	8010226 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801021c:	2301      	movs	r3, #1
 801021e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010222:	e000      	b.n	8010226 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8010224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801022a:	2b00      	cmp	r3, #0
 801022c:	d10a      	bne.n	8010244 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801022e:	4ba5      	ldr	r3, [pc, #660]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010232:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801023a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801023c:	4aa1      	ldr	r2, [pc, #644]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801023e:	430b      	orrs	r3, r1
 8010240:	6513      	str	r3, [r2, #80]	; 0x50
 8010242:	e003      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801024c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010254:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8010258:	f04f 0900 	mov.w	r9, #0
 801025c:	ea58 0309 	orrs.w	r3, r8, r9
 8010260:	d047      	beq.n	80102f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8010262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010268:	2b04      	cmp	r3, #4
 801026a:	d82a      	bhi.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801026c:	a201      	add	r2, pc, #4	; (adr r2, 8010274 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801026e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010272:	bf00      	nop
 8010274:	08010289 	.word	0x08010289
 8010278:	08010297 	.word	0x08010297
 801027c:	080102ad 	.word	0x080102ad
 8010280:	080102cb 	.word	0x080102cb
 8010284:	080102cb 	.word	0x080102cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010288:	4b8e      	ldr	r3, [pc, #568]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801028c:	4a8d      	ldr	r2, [pc, #564]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801028e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010294:	e01a      	b.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801029a:	3308      	adds	r3, #8
 801029c:	2100      	movs	r1, #0
 801029e:	4618      	mov	r0, r3
 80102a0:	f002 fb0e 	bl	80128c0 <RCCEx_PLL2_Config>
 80102a4:	4603      	mov	r3, r0
 80102a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80102aa:	e00f      	b.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80102ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102b0:	3328      	adds	r3, #40	; 0x28
 80102b2:	2100      	movs	r1, #0
 80102b4:	4618      	mov	r0, r3
 80102b6:	f002 fbb5 	bl	8012a24 <RCCEx_PLL3_Config>
 80102ba:	4603      	mov	r3, r0
 80102bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80102c0:	e004      	b.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80102c8:	e000      	b.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80102ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80102cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d10a      	bne.n	80102ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80102d4:	4b7b      	ldr	r3, [pc, #492]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102d8:	f023 0107 	bic.w	r1, r3, #7
 80102dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102e2:	4a78      	ldr	r2, [pc, #480]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102e4:	430b      	orrs	r3, r1
 80102e6:	6513      	str	r3, [r2, #80]	; 0x50
 80102e8:	e003      	b.n	80102f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80102f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80102fe:	f04f 0b00 	mov.w	fp, #0
 8010302:	ea5a 030b 	orrs.w	r3, sl, fp
 8010306:	d04c      	beq.n	80103a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8010308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801030c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801030e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010312:	d030      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8010314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010318:	d829      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801031a:	2bc0      	cmp	r3, #192	; 0xc0
 801031c:	d02d      	beq.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801031e:	2bc0      	cmp	r3, #192	; 0xc0
 8010320:	d825      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8010322:	2b80      	cmp	r3, #128	; 0x80
 8010324:	d018      	beq.n	8010358 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8010326:	2b80      	cmp	r3, #128	; 0x80
 8010328:	d821      	bhi.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801032e:	2b40      	cmp	r3, #64	; 0x40
 8010330:	d007      	beq.n	8010342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8010332:	e01c      	b.n	801036e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010334:	4b63      	ldr	r3, [pc, #396]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010338:	4a62      	ldr	r2, [pc, #392]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801033a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801033e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010340:	e01c      	b.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010346:	3308      	adds	r3, #8
 8010348:	2100      	movs	r1, #0
 801034a:	4618      	mov	r0, r3
 801034c:	f002 fab8 	bl	80128c0 <RCCEx_PLL2_Config>
 8010350:	4603      	mov	r3, r0
 8010352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010356:	e011      	b.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801035c:	3328      	adds	r3, #40	; 0x28
 801035e:	2100      	movs	r1, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f002 fb5f 	bl	8012a24 <RCCEx_PLL3_Config>
 8010366:	4603      	mov	r3, r0
 8010368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801036c:	e006      	b.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801036e:	2301      	movs	r3, #1
 8010370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010374:	e002      	b.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8010376:	bf00      	nop
 8010378:	e000      	b.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801037a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801037c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010380:	2b00      	cmp	r3, #0
 8010382:	d10a      	bne.n	801039a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010384:	4b4f      	ldr	r3, [pc, #316]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010388:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 801038c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010392:	4a4c      	ldr	r2, [pc, #304]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010394:	430b      	orrs	r3, r1
 8010396:	6513      	str	r3, [r2, #80]	; 0x50
 8010398:	e003      	b.n	80103a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801039a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801039e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80103a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80103ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80103b2:	2300      	movs	r3, #0
 80103b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80103b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80103bc:	460b      	mov	r3, r1
 80103be:	4313      	orrs	r3, r2
 80103c0:	d053      	beq.n	801046a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80103c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80103ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103ce:	d035      	beq.n	801043c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80103d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103d4:	d82e      	bhi.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80103d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80103da:	d031      	beq.n	8010440 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80103dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80103e0:	d828      	bhi.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80103e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103e6:	d01a      	beq.n	801041e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80103e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103ec:	d822      	bhi.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80103f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80103f6:	d007      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80103f8:	e01c      	b.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80103fa:	4b32      	ldr	r3, [pc, #200]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80103fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103fe:	4a31      	ldr	r2, [pc, #196]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010406:	e01c      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801040c:	3308      	adds	r3, #8
 801040e:	2100      	movs	r1, #0
 8010410:	4618      	mov	r0, r3
 8010412:	f002 fa55 	bl	80128c0 <RCCEx_PLL2_Config>
 8010416:	4603      	mov	r3, r0
 8010418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801041c:	e011      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801041e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010422:	3328      	adds	r3, #40	; 0x28
 8010424:	2100      	movs	r1, #0
 8010426:	4618      	mov	r0, r3
 8010428:	f002 fafc 	bl	8012a24 <RCCEx_PLL3_Config>
 801042c:	4603      	mov	r3, r0
 801042e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010432:	e006      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010434:	2301      	movs	r3, #1
 8010436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801043a:	e002      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801043c:	bf00      	nop
 801043e:	e000      	b.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8010440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010446:	2b00      	cmp	r3, #0
 8010448:	d10b      	bne.n	8010462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801044a:	4b1e      	ldr	r3, [pc, #120]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801044c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801044e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8010452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801045a:	4a1a      	ldr	r2, [pc, #104]	; (80104c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801045c:	430b      	orrs	r3, r1
 801045e:	6593      	str	r3, [r2, #88]	; 0x58
 8010460:	e003      	b.n	801046a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801046a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010472:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8010476:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801047a:	2300      	movs	r3, #0
 801047c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010480:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8010484:	460b      	mov	r3, r1
 8010486:	4313      	orrs	r3, r2
 8010488:	d056      	beq.n	8010538 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801048a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801048e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010496:	d038      	beq.n	801050a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801049c:	d831      	bhi.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801049e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80104a2:	d034      	beq.n	801050e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80104a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80104a8:	d82b      	bhi.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80104aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104ae:	d01d      	beq.n	80104ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80104b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104b4:	d825      	bhi.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d006      	beq.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80104ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80104be:	d00a      	beq.n	80104d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80104c0:	e01f      	b.n	8010502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80104c2:	bf00      	nop
 80104c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80104c8:	4ba2      	ldr	r3, [pc, #648]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80104ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104cc:	4aa1      	ldr	r2, [pc, #644]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80104ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80104d4:	e01c      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80104d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104da:	3308      	adds	r3, #8
 80104dc:	2100      	movs	r1, #0
 80104de:	4618      	mov	r0, r3
 80104e0:	f002 f9ee 	bl	80128c0 <RCCEx_PLL2_Config>
 80104e4:	4603      	mov	r3, r0
 80104e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80104ea:	e011      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80104ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104f0:	3328      	adds	r3, #40	; 0x28
 80104f2:	2100      	movs	r1, #0
 80104f4:	4618      	mov	r0, r3
 80104f6:	f002 fa95 	bl	8012a24 <RCCEx_PLL3_Config>
 80104fa:	4603      	mov	r3, r0
 80104fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010500:	e006      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010502:	2301      	movs	r3, #1
 8010504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010508:	e002      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801050a:	bf00      	nop
 801050c:	e000      	b.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801050e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10b      	bne.n	8010530 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010518:	4b8e      	ldr	r3, [pc, #568]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801051a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801051c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8010520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010528:	4a8a      	ldr	r2, [pc, #552]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801052a:	430b      	orrs	r3, r1
 801052c:	6593      	str	r3, [r2, #88]	; 0x58
 801052e:	e003      	b.n	8010538 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010540:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8010544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010548:	2300      	movs	r3, #0
 801054a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801054e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8010552:	460b      	mov	r3, r1
 8010554:	4313      	orrs	r3, r2
 8010556:	d03a      	beq.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8010558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801055e:	2b30      	cmp	r3, #48	; 0x30
 8010560:	d01f      	beq.n	80105a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010562:	2b30      	cmp	r3, #48	; 0x30
 8010564:	d819      	bhi.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010566:	2b20      	cmp	r3, #32
 8010568:	d00c      	beq.n	8010584 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801056a:	2b20      	cmp	r3, #32
 801056c:	d815      	bhi.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801056e:	2b00      	cmp	r3, #0
 8010570:	d019      	beq.n	80105a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8010572:	2b10      	cmp	r3, #16
 8010574:	d111      	bne.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010576:	4b77      	ldr	r3, [pc, #476]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801057a:	4a76      	ldr	r2, [pc, #472]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010582:	e011      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010588:	3308      	adds	r3, #8
 801058a:	2102      	movs	r1, #2
 801058c:	4618      	mov	r0, r3
 801058e:	f002 f997 	bl	80128c0 <RCCEx_PLL2_Config>
 8010592:	4603      	mov	r3, r0
 8010594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010598:	e006      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801059a:	2301      	movs	r3, #1
 801059c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80105a0:	e002      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80105a2:	bf00      	nop
 80105a4:	e000      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80105a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10a      	bne.n	80105c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80105b0:	4b68      	ldr	r3, [pc, #416]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80105b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105be:	4a65      	ldr	r2, [pc, #404]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105c0:	430b      	orrs	r3, r1
 80105c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80105c4:	e003      	b.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80105ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80105ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80105da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80105de:	2300      	movs	r3, #0
 80105e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80105e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80105e8:	460b      	mov	r3, r1
 80105ea:	4313      	orrs	r3, r2
 80105ec:	d051      	beq.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80105ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105f8:	d035      	beq.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80105fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105fe:	d82e      	bhi.n	801065e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010604:	d031      	beq.n	801066a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8010606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801060a:	d828      	bhi.n	801065e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801060c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010610:	d01a      	beq.n	8010648 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8010612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010616:	d822      	bhi.n	801065e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010618:	2b00      	cmp	r3, #0
 801061a:	d003      	beq.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801061c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010620:	d007      	beq.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8010622:	e01c      	b.n	801065e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010624:	4b4b      	ldr	r3, [pc, #300]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010628:	4a4a      	ldr	r2, [pc, #296]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801062a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801062e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010630:	e01c      	b.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010636:	3308      	adds	r3, #8
 8010638:	2100      	movs	r1, #0
 801063a:	4618      	mov	r0, r3
 801063c:	f002 f940 	bl	80128c0 <RCCEx_PLL2_Config>
 8010640:	4603      	mov	r3, r0
 8010642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010646:	e011      	b.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801064c:	3328      	adds	r3, #40	; 0x28
 801064e:	2100      	movs	r1, #0
 8010650:	4618      	mov	r0, r3
 8010652:	f002 f9e7 	bl	8012a24 <RCCEx_PLL3_Config>
 8010656:	4603      	mov	r3, r0
 8010658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801065c:	e006      	b.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801065e:	2301      	movs	r3, #1
 8010660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010664:	e002      	b.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010666:	bf00      	nop
 8010668:	e000      	b.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801066a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801066c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010670:	2b00      	cmp	r3, #0
 8010672:	d10a      	bne.n	801068a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010674:	4b37      	ldr	r3, [pc, #220]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010678:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801067c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010682:	4a34      	ldr	r2, [pc, #208]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010684:	430b      	orrs	r3, r1
 8010686:	6513      	str	r3, [r2, #80]	; 0x50
 8010688:	e003      	b.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801068a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801068e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801069e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80106a2:	2300      	movs	r3, #0
 80106a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80106a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80106ac:	460b      	mov	r3, r1
 80106ae:	4313      	orrs	r3, r2
 80106b0:	d056      	beq.n	8010760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80106b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106bc:	d033      	beq.n	8010726 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80106be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106c2:	d82c      	bhi.n	801071e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80106c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80106c8:	d02f      	beq.n	801072a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80106ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80106ce:	d826      	bhi.n	801071e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80106d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80106d4:	d02b      	beq.n	801072e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80106d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80106da:	d820      	bhi.n	801071e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80106dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106e0:	d012      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80106e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106e6:	d81a      	bhi.n	801071e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d022      	beq.n	8010732 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80106ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106f0:	d115      	bne.n	801071e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80106f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106f6:	3308      	adds	r3, #8
 80106f8:	2101      	movs	r1, #1
 80106fa:	4618      	mov	r0, r3
 80106fc:	f002 f8e0 	bl	80128c0 <RCCEx_PLL2_Config>
 8010700:	4603      	mov	r3, r0
 8010702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010706:	e015      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801070c:	3328      	adds	r3, #40	; 0x28
 801070e:	2101      	movs	r1, #1
 8010710:	4618      	mov	r0, r3
 8010712:	f002 f987 	bl	8012a24 <RCCEx_PLL3_Config>
 8010716:	4603      	mov	r3, r0
 8010718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801071c:	e00a      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010724:	e006      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010726:	bf00      	nop
 8010728:	e004      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801072a:	bf00      	nop
 801072c:	e002      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801072e:	bf00      	nop
 8010730:	e000      	b.n	8010734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010738:	2b00      	cmp	r3, #0
 801073a:	d10d      	bne.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801073c:	4b05      	ldr	r3, [pc, #20]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801073e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010740:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8010744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801074a:	4a02      	ldr	r2, [pc, #8]	; (8010754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801074c:	430b      	orrs	r3, r1
 801074e:	6513      	str	r3, [r2, #80]	; 0x50
 8010750:	e006      	b.n	8010760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8010752:	bf00      	nop
 8010754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801075c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801076c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010770:	2300      	movs	r3, #0
 8010772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010776:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801077a:	460b      	mov	r3, r1
 801077c:	4313      	orrs	r3, r2
 801077e:	d055      	beq.n	801082c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801078c:	d033      	beq.n	80107f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801078e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010792:	d82c      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010798:	d02f      	beq.n	80107fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801079a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801079e:	d826      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80107a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80107a4:	d02b      	beq.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80107a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80107aa:	d820      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80107ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107b0:	d012      	beq.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80107b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107b6:	d81a      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d022      	beq.n	8010802 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80107bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107c0:	d115      	bne.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80107c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107c6:	3308      	adds	r3, #8
 80107c8:	2101      	movs	r1, #1
 80107ca:	4618      	mov	r0, r3
 80107cc:	f002 f878 	bl	80128c0 <RCCEx_PLL2_Config>
 80107d0:	4603      	mov	r3, r0
 80107d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80107d6:	e015      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80107d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107dc:	3328      	adds	r3, #40	; 0x28
 80107de:	2101      	movs	r1, #1
 80107e0:	4618      	mov	r0, r3
 80107e2:	f002 f91f 	bl	8012a24 <RCCEx_PLL3_Config>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80107ec:	e00a      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80107f4:	e006      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107f6:	bf00      	nop
 80107f8:	e004      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107fa:	bf00      	nop
 80107fc:	e002      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107fe:	bf00      	nop
 8010800:	e000      	b.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10b      	bne.n	8010824 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801080c:	4ba3      	ldr	r3, [pc, #652]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801080e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010810:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801081c:	4a9f      	ldr	r2, [pc, #636]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801081e:	430b      	orrs	r3, r1
 8010820:	6593      	str	r3, [r2, #88]	; 0x58
 8010822:	e003      	b.n	801082c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801082c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010834:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8010838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801083c:	2300      	movs	r3, #0
 801083e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010846:	460b      	mov	r3, r1
 8010848:	4313      	orrs	r3, r2
 801084a:	d037      	beq.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801084c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010856:	d00e      	beq.n	8010876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8010858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801085c:	d816      	bhi.n	801088c <HAL_RCCEx_PeriphCLKConfig+0x700>
 801085e:	2b00      	cmp	r3, #0
 8010860:	d018      	beq.n	8010894 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8010862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010866:	d111      	bne.n	801088c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010868:	4b8c      	ldr	r3, [pc, #560]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086c:	4a8b      	ldr	r2, [pc, #556]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801086e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010874:	e00f      	b.n	8010896 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801087a:	3308      	adds	r3, #8
 801087c:	2101      	movs	r1, #1
 801087e:	4618      	mov	r0, r3
 8010880:	f002 f81e 	bl	80128c0 <RCCEx_PLL2_Config>
 8010884:	4603      	mov	r3, r0
 8010886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801088a:	e004      	b.n	8010896 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801088c:	2301      	movs	r3, #1
 801088e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010892:	e000      	b.n	8010896 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8010894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801089a:	2b00      	cmp	r3, #0
 801089c:	d10a      	bne.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801089e:	4b7f      	ldr	r3, [pc, #508]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80108a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ac:	4a7b      	ldr	r2, [pc, #492]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108ae:	430b      	orrs	r3, r1
 80108b0:	6513      	str	r3, [r2, #80]	; 0x50
 80108b2:	e003      	b.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80108b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80108bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80108c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80108cc:	2300      	movs	r3, #0
 80108ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80108d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80108d6:	460b      	mov	r3, r1
 80108d8:	4313      	orrs	r3, r2
 80108da:	d039      	beq.n	8010950 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80108dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d81c      	bhi.n	8010920 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80108e6:	a201      	add	r2, pc, #4	; (adr r2, 80108ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80108e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ec:	08010929 	.word	0x08010929
 80108f0:	080108fd 	.word	0x080108fd
 80108f4:	0801090b 	.word	0x0801090b
 80108f8:	08010929 	.word	0x08010929
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80108fc:	4b67      	ldr	r3, [pc, #412]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010900:	4a66      	ldr	r2, [pc, #408]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010908:	e00f      	b.n	801092a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801090a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801090e:	3308      	adds	r3, #8
 8010910:	2102      	movs	r1, #2
 8010912:	4618      	mov	r0, r3
 8010914:	f001 ffd4 	bl	80128c0 <RCCEx_PLL2_Config>
 8010918:	4603      	mov	r3, r0
 801091a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801091e:	e004      	b.n	801092a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010920:	2301      	movs	r3, #1
 8010922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010926:	e000      	b.n	801092a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8010928:	bf00      	nop
    }

    if (ret == HAL_OK)
 801092a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801092e:	2b00      	cmp	r3, #0
 8010930:	d10a      	bne.n	8010948 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010932:	4b5a      	ldr	r3, [pc, #360]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010936:	f023 0103 	bic.w	r1, r3, #3
 801093a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801093e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010940:	4a56      	ldr	r2, [pc, #344]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010942:	430b      	orrs	r3, r1
 8010944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010946:	e003      	b.n	8010950 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801094c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801095c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010960:	2300      	movs	r3, #0
 8010962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010966:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801096a:	460b      	mov	r3, r1
 801096c:	4313      	orrs	r3, r2
 801096e:	f000 809f 	beq.w	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010972:	4b4b      	ldr	r3, [pc, #300]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4a4a      	ldr	r2, [pc, #296]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801097c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801097e:	f7f6 f867 	bl	8006a50 <HAL_GetTick>
 8010982:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010986:	e00b      	b.n	80109a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010988:	f7f6 f862 	bl	8006a50 <HAL_GetTick>
 801098c:	4602      	mov	r2, r0
 801098e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	2b64      	cmp	r3, #100	; 0x64
 8010996:	d903      	bls.n	80109a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8010998:	2303      	movs	r3, #3
 801099a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801099e:	e005      	b.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80109a0:	4b3f      	ldr	r3, [pc, #252]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d0ed      	beq.n	8010988 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80109ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d179      	bne.n	8010aa8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80109b4:	4b39      	ldr	r3, [pc, #228]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80109b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80109c0:	4053      	eors	r3, r2
 80109c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d015      	beq.n	80109f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80109ca:	4b34      	ldr	r3, [pc, #208]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80109d6:	4b31      	ldr	r3, [pc, #196]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109da:	4a30      	ldr	r2, [pc, #192]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80109e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109e6:	4a2d      	ldr	r2, [pc, #180]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80109ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80109ee:	4a2b      	ldr	r2, [pc, #172]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80109f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80109f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80109fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a02:	d118      	bne.n	8010a36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a04:	f7f6 f824 	bl	8006a50 <HAL_GetTick>
 8010a08:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a0c:	e00d      	b.n	8010a2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010a0e:	f7f6 f81f 	bl	8006a50 <HAL_GetTick>
 8010a12:	4602      	mov	r2, r0
 8010a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010a18:	1ad2      	subs	r2, r2, r3
 8010a1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d903      	bls.n	8010a2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8010a22:	2303      	movs	r3, #3
 8010a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8010a28:	e005      	b.n	8010a36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a2a:	4b1c      	ldr	r3, [pc, #112]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a2e:	f003 0302 	and.w	r3, r3, #2
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0eb      	beq.n	8010a0e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8010a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d129      	bne.n	8010a92 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a4e:	d10e      	bne.n	8010a6e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8010a50:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a52:	691b      	ldr	r3, [r3, #16]
 8010a54:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8010a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a60:	091a      	lsrs	r2, r3, #4
 8010a62:	4b10      	ldr	r3, [pc, #64]	; (8010aa4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8010a64:	4013      	ands	r3, r2
 8010a66:	4a0d      	ldr	r2, [pc, #52]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a68:	430b      	orrs	r3, r1
 8010a6a:	6113      	str	r3, [r2, #16]
 8010a6c:	e005      	b.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	4a0a      	ldr	r2, [pc, #40]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a78:	6113      	str	r3, [r2, #16]
 8010a7a:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010a8a:	4a04      	ldr	r2, [pc, #16]	; (8010a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a8c:	430b      	orrs	r3, r1
 8010a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8010a90:	e00e      	b.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8010a9a:	e009      	b.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8010a9c:	58024400 	.word	0x58024400
 8010aa0:	58024800 	.word	0x58024800
 8010aa4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	f002 0301 	and.w	r3, r2, #1
 8010abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ac6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010aca:	460b      	mov	r3, r1
 8010acc:	4313      	orrs	r3, r2
 8010ace:	f000 8089 	beq.w	8010be4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ad8:	2b28      	cmp	r3, #40	; 0x28
 8010ada:	d86b      	bhi.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8010adc:	a201      	add	r2, pc, #4	; (adr r2, 8010ae4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8010ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae2:	bf00      	nop
 8010ae4:	08010bbd 	.word	0x08010bbd
 8010ae8:	08010bb5 	.word	0x08010bb5
 8010aec:	08010bb5 	.word	0x08010bb5
 8010af0:	08010bb5 	.word	0x08010bb5
 8010af4:	08010bb5 	.word	0x08010bb5
 8010af8:	08010bb5 	.word	0x08010bb5
 8010afc:	08010bb5 	.word	0x08010bb5
 8010b00:	08010bb5 	.word	0x08010bb5
 8010b04:	08010b89 	.word	0x08010b89
 8010b08:	08010bb5 	.word	0x08010bb5
 8010b0c:	08010bb5 	.word	0x08010bb5
 8010b10:	08010bb5 	.word	0x08010bb5
 8010b14:	08010bb5 	.word	0x08010bb5
 8010b18:	08010bb5 	.word	0x08010bb5
 8010b1c:	08010bb5 	.word	0x08010bb5
 8010b20:	08010bb5 	.word	0x08010bb5
 8010b24:	08010b9f 	.word	0x08010b9f
 8010b28:	08010bb5 	.word	0x08010bb5
 8010b2c:	08010bb5 	.word	0x08010bb5
 8010b30:	08010bb5 	.word	0x08010bb5
 8010b34:	08010bb5 	.word	0x08010bb5
 8010b38:	08010bb5 	.word	0x08010bb5
 8010b3c:	08010bb5 	.word	0x08010bb5
 8010b40:	08010bb5 	.word	0x08010bb5
 8010b44:	08010bbd 	.word	0x08010bbd
 8010b48:	08010bb5 	.word	0x08010bb5
 8010b4c:	08010bb5 	.word	0x08010bb5
 8010b50:	08010bb5 	.word	0x08010bb5
 8010b54:	08010bb5 	.word	0x08010bb5
 8010b58:	08010bb5 	.word	0x08010bb5
 8010b5c:	08010bb5 	.word	0x08010bb5
 8010b60:	08010bb5 	.word	0x08010bb5
 8010b64:	08010bbd 	.word	0x08010bbd
 8010b68:	08010bb5 	.word	0x08010bb5
 8010b6c:	08010bb5 	.word	0x08010bb5
 8010b70:	08010bb5 	.word	0x08010bb5
 8010b74:	08010bb5 	.word	0x08010bb5
 8010b78:	08010bb5 	.word	0x08010bb5
 8010b7c:	08010bb5 	.word	0x08010bb5
 8010b80:	08010bb5 	.word	0x08010bb5
 8010b84:	08010bbd 	.word	0x08010bbd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b8c:	3308      	adds	r3, #8
 8010b8e:	2101      	movs	r1, #1
 8010b90:	4618      	mov	r0, r3
 8010b92:	f001 fe95 	bl	80128c0 <RCCEx_PLL2_Config>
 8010b96:	4603      	mov	r3, r0
 8010b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010b9c:	e00f      	b.n	8010bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ba2:	3328      	adds	r3, #40	; 0x28
 8010ba4:	2101      	movs	r1, #1
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f001 ff3c 	bl	8012a24 <RCCEx_PLL3_Config>
 8010bac:	4603      	mov	r3, r0
 8010bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010bb2:	e004      	b.n	8010bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010bba:	e000      	b.n	8010bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d10a      	bne.n	8010bdc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010bc6:	4bbf      	ldr	r3, [pc, #764]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8010bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010bd4:	4abb      	ldr	r2, [pc, #748]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010bd6:	430b      	orrs	r3, r1
 8010bd8:	6553      	str	r3, [r2, #84]	; 0x54
 8010bda:	e003      	b.n	8010be4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010be0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bec:	f002 0302 	and.w	r3, r2, #2
 8010bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010bfa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4313      	orrs	r3, r2
 8010c02:	d041      	beq.n	8010c88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c0a:	2b05      	cmp	r3, #5
 8010c0c:	d824      	bhi.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8010c0e:	a201      	add	r2, pc, #4	; (adr r2, 8010c14 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8010c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c14:	08010c61 	.word	0x08010c61
 8010c18:	08010c2d 	.word	0x08010c2d
 8010c1c:	08010c43 	.word	0x08010c43
 8010c20:	08010c61 	.word	0x08010c61
 8010c24:	08010c61 	.word	0x08010c61
 8010c28:	08010c61 	.word	0x08010c61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c30:	3308      	adds	r3, #8
 8010c32:	2101      	movs	r1, #1
 8010c34:	4618      	mov	r0, r3
 8010c36:	f001 fe43 	bl	80128c0 <RCCEx_PLL2_Config>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010c40:	e00f      	b.n	8010c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c46:	3328      	adds	r3, #40	; 0x28
 8010c48:	2101      	movs	r1, #1
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f001 feea 	bl	8012a24 <RCCEx_PLL3_Config>
 8010c50:	4603      	mov	r3, r0
 8010c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010c56:	e004      	b.n	8010c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010c58:	2301      	movs	r3, #1
 8010c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010c5e:	e000      	b.n	8010c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8010c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d10a      	bne.n	8010c80 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010c6a:	4b96      	ldr	r3, [pc, #600]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c6e:	f023 0107 	bic.w	r1, r3, #7
 8010c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c78:	4a92      	ldr	r2, [pc, #584]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010c7a:	430b      	orrs	r3, r1
 8010c7c:	6553      	str	r3, [r2, #84]	; 0x54
 8010c7e:	e003      	b.n	8010c88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010c84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	f002 0304 	and.w	r3, r2, #4
 8010c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	d044      	beq.n	8010d32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010cb0:	2b05      	cmp	r3, #5
 8010cb2:	d825      	bhi.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010cb4:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cba:	bf00      	nop
 8010cbc:	08010d09 	.word	0x08010d09
 8010cc0:	08010cd5 	.word	0x08010cd5
 8010cc4:	08010ceb 	.word	0x08010ceb
 8010cc8:	08010d09 	.word	0x08010d09
 8010ccc:	08010d09 	.word	0x08010d09
 8010cd0:	08010d09 	.word	0x08010d09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cd8:	3308      	adds	r3, #8
 8010cda:	2101      	movs	r1, #1
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f001 fdef 	bl	80128c0 <RCCEx_PLL2_Config>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010ce8:	e00f      	b.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cee:	3328      	adds	r3, #40	; 0x28
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f001 fe96 	bl	8012a24 <RCCEx_PLL3_Config>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010cfe:	e004      	b.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010d00:	2301      	movs	r3, #1
 8010d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010d06:	e000      	b.n	8010d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d10b      	bne.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010d12:	4b6c      	ldr	r3, [pc, #432]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d16:	f023 0107 	bic.w	r1, r3, #7
 8010d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010d22:	4a68      	ldr	r2, [pc, #416]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d24:	430b      	orrs	r3, r1
 8010d26:	6593      	str	r3, [r2, #88]	; 0x58
 8010d28:	e003      	b.n	8010d32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3a:	f002 0320 	and.w	r3, r2, #32
 8010d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010d42:	2300      	movs	r3, #0
 8010d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	d055      	beq.n	8010dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d5e:	d033      	beq.n	8010dc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8010d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d64:	d82c      	bhi.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d6a:	d02f      	beq.n	8010dcc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8010d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d70:	d826      	bhi.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d76:	d02b      	beq.n	8010dd0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8010d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d7c:	d820      	bhi.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d82:	d012      	beq.n	8010daa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d88:	d81a      	bhi.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d022      	beq.n	8010dd4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8010d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d92:	d115      	bne.n	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d98:	3308      	adds	r3, #8
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f001 fd8f 	bl	80128c0 <RCCEx_PLL2_Config>
 8010da2:	4603      	mov	r3, r0
 8010da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010da8:	e015      	b.n	8010dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dae:	3328      	adds	r3, #40	; 0x28
 8010db0:	2102      	movs	r1, #2
 8010db2:	4618      	mov	r0, r3
 8010db4:	f001 fe36 	bl	8012a24 <RCCEx_PLL3_Config>
 8010db8:	4603      	mov	r3, r0
 8010dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010dbe:	e00a      	b.n	8010dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010dc6:	e006      	b.n	8010dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010dc8:	bf00      	nop
 8010dca:	e004      	b.n	8010dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010dcc:	bf00      	nop
 8010dce:	e002      	b.n	8010dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010dd0:	bf00      	nop
 8010dd2:	e000      	b.n	8010dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d10b      	bne.n	8010df6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010dde:	4b39      	ldr	r3, [pc, #228]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010de2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dee:	4a35      	ldr	r2, [pc, #212]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010df0:	430b      	orrs	r3, r1
 8010df2:	6553      	str	r3, [r2, #84]	; 0x54
 8010df4:	e003      	b.n	8010dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010dfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e06:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8010e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010e0e:	2300      	movs	r3, #0
 8010e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010e14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	d058      	beq.n	8010ed0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010e26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010e2a:	d033      	beq.n	8010e94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010e2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010e30:	d82c      	bhi.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e36:	d02f      	beq.n	8010e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e3c:	d826      	bhi.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e42:	d02b      	beq.n	8010e9c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8010e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e48:	d820      	bhi.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e4e:	d012      	beq.n	8010e76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8010e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e54:	d81a      	bhi.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d022      	beq.n	8010ea0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8010e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e5e:	d115      	bne.n	8010e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e64:	3308      	adds	r3, #8
 8010e66:	2100      	movs	r1, #0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f001 fd29 	bl	80128c0 <RCCEx_PLL2_Config>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010e74:	e015      	b.n	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e7a:	3328      	adds	r3, #40	; 0x28
 8010e7c:	2102      	movs	r1, #2
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f001 fdd0 	bl	8012a24 <RCCEx_PLL3_Config>
 8010e84:	4603      	mov	r3, r0
 8010e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010e8a:	e00a      	b.n	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010e92:	e006      	b.n	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e94:	bf00      	nop
 8010e96:	e004      	b.n	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e98:	bf00      	nop
 8010e9a:	e002      	b.n	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e9c:	bf00      	nop
 8010e9e:	e000      	b.n	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10e      	bne.n	8010ec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010eaa:	4b06      	ldr	r3, [pc, #24]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8010eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010eba:	4a02      	ldr	r2, [pc, #8]	; (8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010ebc:	430b      	orrs	r3, r1
 8010ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8010ec0:	e006      	b.n	8010ed0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8010ec2:	bf00      	nop
 8010ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8010edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010ee6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8010eea:	460b      	mov	r3, r1
 8010eec:	4313      	orrs	r3, r2
 8010eee:	d055      	beq.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010ef8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010efc:	d033      	beq.n	8010f66 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8010efe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010f02:	d82c      	bhi.n	8010f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f08:	d02f      	beq.n	8010f6a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f0e:	d826      	bhi.n	8010f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010f10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010f14:	d02b      	beq.n	8010f6e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010f16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010f1a:	d820      	bhi.n	8010f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f20:	d012      	beq.n	8010f48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8010f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f26:	d81a      	bhi.n	8010f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d022      	beq.n	8010f72 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f30:	d115      	bne.n	8010f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f36:	3308      	adds	r3, #8
 8010f38:	2100      	movs	r1, #0
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f001 fcc0 	bl	80128c0 <RCCEx_PLL2_Config>
 8010f40:	4603      	mov	r3, r0
 8010f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010f46:	e015      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f4c:	3328      	adds	r3, #40	; 0x28
 8010f4e:	2102      	movs	r1, #2
 8010f50:	4618      	mov	r0, r3
 8010f52:	f001 fd67 	bl	8012a24 <RCCEx_PLL3_Config>
 8010f56:	4603      	mov	r3, r0
 8010f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010f5c:	e00a      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010f64:	e006      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f66:	bf00      	nop
 8010f68:	e004      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f6a:	bf00      	nop
 8010f6c:	e002      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f6e:	bf00      	nop
 8010f70:	e000      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d10b      	bne.n	8010f94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010f7c:	4ba1      	ldr	r3, [pc, #644]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f80:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8010f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010f8c:	4a9d      	ldr	r2, [pc, #628]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f8e:	430b      	orrs	r3, r1
 8010f90:	6593      	str	r3, [r2, #88]	; 0x58
 8010f92:	e003      	b.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	f002 0308 	and.w	r3, r2, #8
 8010fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010fac:	2300      	movs	r3, #0
 8010fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010fb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	d01e      	beq.n	8010ffa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc8:	d10c      	bne.n	8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fce:	3328      	adds	r3, #40	; 0x28
 8010fd0:	2102      	movs	r1, #2
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f001 fd26 	bl	8012a24 <RCCEx_PLL3_Config>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d002      	beq.n	8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010fe4:	4b87      	ldr	r3, [pc, #540]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fe8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ff4:	4a83      	ldr	r2, [pc, #524]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010ff6:	430b      	orrs	r3, r1
 8010ff8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011002:	f002 0310 	and.w	r3, r2, #16
 8011006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801100a:	2300      	movs	r3, #0
 801100c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011010:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8011014:	460b      	mov	r3, r1
 8011016:	4313      	orrs	r3, r2
 8011018:	d01e      	beq.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801101a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801101e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011026:	d10c      	bne.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801102c:	3328      	adds	r3, #40	; 0x28
 801102e:	2102      	movs	r1, #2
 8011030:	4618      	mov	r0, r3
 8011032:	f001 fcf7 	bl	8012a24 <RCCEx_PLL3_Config>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d002      	beq.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801103c:	2301      	movs	r3, #1
 801103e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011042:	4b70      	ldr	r3, [pc, #448]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801104a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801104e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011052:	4a6c      	ldr	r2, [pc, #432]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011054:	430b      	orrs	r3, r1
 8011056:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011060:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8011064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011068:	2300      	movs	r3, #0
 801106a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801106e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8011072:	460b      	mov	r3, r1
 8011074:	4313      	orrs	r3, r2
 8011076:	d03e      	beq.n	80110f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801107c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011084:	d022      	beq.n	80110cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8011086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801108a:	d81b      	bhi.n	80110c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801108c:	2b00      	cmp	r3, #0
 801108e:	d003      	beq.n	8011098 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8011090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011094:	d00b      	beq.n	80110ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8011096:	e015      	b.n	80110c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801109c:	3308      	adds	r3, #8
 801109e:	2100      	movs	r1, #0
 80110a0:	4618      	mov	r0, r3
 80110a2:	f001 fc0d 	bl	80128c0 <RCCEx_PLL2_Config>
 80110a6:	4603      	mov	r3, r0
 80110a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80110ac:	e00f      	b.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80110ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110b2:	3328      	adds	r3, #40	; 0x28
 80110b4:	2102      	movs	r1, #2
 80110b6:	4618      	mov	r0, r3
 80110b8:	f001 fcb4 	bl	8012a24 <RCCEx_PLL3_Config>
 80110bc:	4603      	mov	r3, r0
 80110be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80110c2:	e004      	b.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80110c4:	2301      	movs	r3, #1
 80110c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80110ca:	e000      	b.n	80110ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80110cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80110ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d10b      	bne.n	80110ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80110d6:	4b4b      	ldr	r3, [pc, #300]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80110de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80110e6:	4a47      	ldr	r2, [pc, #284]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110e8:	430b      	orrs	r3, r1
 80110ea:	6593      	str	r3, [r2, #88]	; 0x58
 80110ec:	e003      	b.n	80110f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80110f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80110f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8011102:	67bb      	str	r3, [r7, #120]	; 0x78
 8011104:	2300      	movs	r3, #0
 8011106:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011108:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801110c:	460b      	mov	r3, r1
 801110e:	4313      	orrs	r3, r2
 8011110:	d03b      	beq.n	801118a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8011112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801111a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801111e:	d01f      	beq.n	8011160 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8011120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011124:	d818      	bhi.n	8011158 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8011126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801112a:	d003      	beq.n	8011134 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801112c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011130:	d007      	beq.n	8011142 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8011132:	e011      	b.n	8011158 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011134:	4b33      	ldr	r3, [pc, #204]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011138:	4a32      	ldr	r2, [pc, #200]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801113e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8011140:	e00f      	b.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011146:	3328      	adds	r3, #40	; 0x28
 8011148:	2101      	movs	r1, #1
 801114a:	4618      	mov	r0, r3
 801114c:	f001 fc6a 	bl	8012a24 <RCCEx_PLL3_Config>
 8011150:	4603      	mov	r3, r0
 8011152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8011156:	e004      	b.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011158:	2301      	movs	r3, #1
 801115a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801115e:	e000      	b.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8011160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011166:	2b00      	cmp	r3, #0
 8011168:	d10b      	bne.n	8011182 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801116a:	4b26      	ldr	r3, [pc, #152]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801116e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8011172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801117a:	4a22      	ldr	r2, [pc, #136]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801117c:	430b      	orrs	r3, r1
 801117e:	6553      	str	r3, [r2, #84]	; 0x54
 8011180:	e003      	b.n	801118a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801118a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011192:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8011196:	673b      	str	r3, [r7, #112]	; 0x70
 8011198:	2300      	movs	r3, #0
 801119a:	677b      	str	r3, [r7, #116]	; 0x74
 801119c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80111a0:	460b      	mov	r3, r1
 80111a2:	4313      	orrs	r3, r2
 80111a4:	d034      	beq.n	8011210 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80111a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80111b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111b4:	d007      	beq.n	80111c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80111b6:	e011      	b.n	80111dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80111b8:	4b12      	ldr	r3, [pc, #72]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111bc:	4a11      	ldr	r2, [pc, #68]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80111c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80111c4:	e00e      	b.n	80111e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80111c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111ca:	3308      	adds	r3, #8
 80111cc:	2102      	movs	r1, #2
 80111ce:	4618      	mov	r0, r3
 80111d0:	f001 fb76 	bl	80128c0 <RCCEx_PLL2_Config>
 80111d4:	4603      	mov	r3, r0
 80111d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80111da:	e003      	b.n	80111e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80111dc:	2301      	movs	r3, #1
 80111de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80111e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80111e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10d      	bne.n	8011208 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80111ec:	4b05      	ldr	r3, [pc, #20]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80111f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111fa:	4a02      	ldr	r2, [pc, #8]	; (8011204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111fc:	430b      	orrs	r3, r1
 80111fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011200:	e006      	b.n	8011210 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8011202:	bf00      	nop
 8011204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801120c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801121c:	66bb      	str	r3, [r7, #104]	; 0x68
 801121e:	2300      	movs	r3, #0
 8011220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011222:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8011226:	460b      	mov	r3, r1
 8011228:	4313      	orrs	r3, r2
 801122a:	d00c      	beq.n	8011246 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801122c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011230:	3328      	adds	r3, #40	; 0x28
 8011232:	2102      	movs	r1, #2
 8011234:	4618      	mov	r0, r3
 8011236:	f001 fbf5 	bl	8012a24 <RCCEx_PLL3_Config>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d002      	beq.n	8011246 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8011240:	2301      	movs	r3, #1
 8011242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8011252:	663b      	str	r3, [r7, #96]	; 0x60
 8011254:	2300      	movs	r3, #0
 8011256:	667b      	str	r3, [r7, #100]	; 0x64
 8011258:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801125c:	460b      	mov	r3, r1
 801125e:	4313      	orrs	r3, r2
 8011260:	d038      	beq.n	80112d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8011262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801126a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801126e:	d018      	beq.n	80112a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8011270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011274:	d811      	bhi.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8011276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801127a:	d014      	beq.n	80112a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801127c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011280:	d80b      	bhi.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8011282:	2b00      	cmp	r3, #0
 8011284:	d011      	beq.n	80112aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8011286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801128a:	d106      	bne.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801128c:	4bc3      	ldr	r3, [pc, #780]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011290:	4ac2      	ldr	r2, [pc, #776]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8011298:	e008      	b.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80112a0:	e004      	b.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80112a2:	bf00      	nop
 80112a4:	e002      	b.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80112a6:	bf00      	nop
 80112a8:	e000      	b.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80112aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80112ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10b      	bne.n	80112cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80112b4:	4bb9      	ldr	r3, [pc, #740]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80112bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112c4:	4ab5      	ldr	r2, [pc, #724]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112c6:	430b      	orrs	r3, r1
 80112c8:	6553      	str	r3, [r2, #84]	; 0x54
 80112ca:	e003      	b.n	80112d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80112d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80112d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80112e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80112e2:	2300      	movs	r3, #0
 80112e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80112e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80112ea:	460b      	mov	r3, r1
 80112ec:	4313      	orrs	r3, r2
 80112ee:	d009      	beq.n	8011304 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80112f0:	4baa      	ldr	r3, [pc, #680]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80112f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112fe:	4aa7      	ldr	r2, [pc, #668]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011300:	430b      	orrs	r3, r1
 8011302:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8011310:	653b      	str	r3, [r7, #80]	; 0x50
 8011312:	2300      	movs	r3, #0
 8011314:	657b      	str	r3, [r7, #84]	; 0x54
 8011316:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801131a:	460b      	mov	r3, r1
 801131c:	4313      	orrs	r3, r2
 801131e:	d00a      	beq.n	8011336 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011320:	4b9e      	ldr	r3, [pc, #632]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011322:	691b      	ldr	r3, [r3, #16]
 8011324:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8011328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801132c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011330:	4a9a      	ldr	r2, [pc, #616]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011332:	430b      	orrs	r3, r1
 8011334:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8011342:	64bb      	str	r3, [r7, #72]	; 0x48
 8011344:	2300      	movs	r3, #0
 8011346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011348:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801134c:	460b      	mov	r3, r1
 801134e:	4313      	orrs	r3, r2
 8011350:	d009      	beq.n	8011366 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011352:	4b92      	ldr	r3, [pc, #584]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011356:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801135a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801135e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011360:	4a8e      	ldr	r2, [pc, #568]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011362:	430b      	orrs	r3, r1
 8011364:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8011372:	643b      	str	r3, [r7, #64]	; 0x40
 8011374:	2300      	movs	r3, #0
 8011376:	647b      	str	r3, [r7, #68]	; 0x44
 8011378:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801137c:	460b      	mov	r3, r1
 801137e:	4313      	orrs	r3, r2
 8011380:	d00e      	beq.n	80113a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011382:	4b86      	ldr	r3, [pc, #536]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011384:	691b      	ldr	r3, [r3, #16]
 8011386:	4a85      	ldr	r2, [pc, #532]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011388:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801138c:	6113      	str	r3, [r2, #16]
 801138e:	4b83      	ldr	r3, [pc, #524]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011390:	6919      	ldr	r1, [r3, #16]
 8011392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801139a:	4a80      	ldr	r2, [pc, #512]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801139c:	430b      	orrs	r3, r1
 801139e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80113a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80113ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80113ae:	2300      	movs	r3, #0
 80113b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80113b6:	460b      	mov	r3, r1
 80113b8:	4313      	orrs	r3, r2
 80113ba:	d009      	beq.n	80113d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80113bc:	4b77      	ldr	r3, [pc, #476]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113c0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80113c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113ca:	4a74      	ldr	r2, [pc, #464]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113cc:	430b      	orrs	r3, r1
 80113ce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80113d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80113dc:	633b      	str	r3, [r7, #48]	; 0x30
 80113de:	2300      	movs	r3, #0
 80113e0:	637b      	str	r3, [r7, #52]	; 0x34
 80113e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80113e6:	460b      	mov	r3, r1
 80113e8:	4313      	orrs	r3, r2
 80113ea:	d00a      	beq.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80113ec:	4b6b      	ldr	r3, [pc, #428]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113f0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80113f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113fc:	4a67      	ldr	r2, [pc, #412]	; (801159c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113fe:	430b      	orrs	r3, r1
 8011400:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8011402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140a:	2100      	movs	r1, #0
 801140c:	62b9      	str	r1, [r7, #40]	; 0x28
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011414:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011418:	460b      	mov	r3, r1
 801141a:	4313      	orrs	r3, r2
 801141c:	d011      	beq.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801141e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011422:	3308      	adds	r3, #8
 8011424:	2100      	movs	r1, #0
 8011426:	4618      	mov	r0, r3
 8011428:	f001 fa4a 	bl	80128c0 <RCCEx_PLL2_Config>
 801142c:	4603      	mov	r3, r0
 801142e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011436:	2b00      	cmp	r3, #0
 8011438:	d003      	beq.n	8011442 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801143a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801143e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8011442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	2100      	movs	r1, #0
 801144c:	6239      	str	r1, [r7, #32]
 801144e:	f003 0302 	and.w	r3, r3, #2
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
 8011454:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011458:	460b      	mov	r3, r1
 801145a:	4313      	orrs	r3, r2
 801145c:	d011      	beq.n	8011482 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801145e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011462:	3308      	adds	r3, #8
 8011464:	2101      	movs	r1, #1
 8011466:	4618      	mov	r0, r3
 8011468:	f001 fa2a 	bl	80128c0 <RCCEx_PLL2_Config>
 801146c:	4603      	mov	r3, r0
 801146e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011476:	2b00      	cmp	r3, #0
 8011478:	d003      	beq.n	8011482 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801147a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801147e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8011482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148a:	2100      	movs	r1, #0
 801148c:	61b9      	str	r1, [r7, #24]
 801148e:	f003 0304 	and.w	r3, r3, #4
 8011492:	61fb      	str	r3, [r7, #28]
 8011494:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011498:	460b      	mov	r3, r1
 801149a:	4313      	orrs	r3, r2
 801149c:	d011      	beq.n	80114c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801149e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114a2:	3308      	adds	r3, #8
 80114a4:	2102      	movs	r1, #2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f001 fa0a 	bl	80128c0 <RCCEx_PLL2_Config>
 80114ac:	4603      	mov	r3, r0
 80114ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80114b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d003      	beq.n	80114c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80114ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80114c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ca:	2100      	movs	r1, #0
 80114cc:	6139      	str	r1, [r7, #16]
 80114ce:	f003 0308 	and.w	r3, r3, #8
 80114d2:	617b      	str	r3, [r7, #20]
 80114d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80114d8:	460b      	mov	r3, r1
 80114da:	4313      	orrs	r3, r2
 80114dc:	d011      	beq.n	8011502 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80114de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114e2:	3328      	adds	r3, #40	; 0x28
 80114e4:	2100      	movs	r1, #0
 80114e6:	4618      	mov	r0, r3
 80114e8:	f001 fa9c 	bl	8012a24 <RCCEx_PLL3_Config>
 80114ec:	4603      	mov	r3, r0
 80114ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80114f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d003      	beq.n	8011502 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80114fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150a:	2100      	movs	r1, #0
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	f003 0310 	and.w	r3, r3, #16
 8011512:	60fb      	str	r3, [r7, #12]
 8011514:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011518:	460b      	mov	r3, r1
 801151a:	4313      	orrs	r3, r2
 801151c:	d011      	beq.n	8011542 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801151e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011522:	3328      	adds	r3, #40	; 0x28
 8011524:	2101      	movs	r1, #1
 8011526:	4618      	mov	r0, r3
 8011528:	f001 fa7c 	bl	8012a24 <RCCEx_PLL3_Config>
 801152c:	4603      	mov	r3, r0
 801152e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011536:	2b00      	cmp	r3, #0
 8011538:	d003      	beq.n	8011542 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801153a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801153e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8011542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	2100      	movs	r1, #0
 801154c:	6039      	str	r1, [r7, #0]
 801154e:	f003 0320 	and.w	r3, r3, #32
 8011552:	607b      	str	r3, [r7, #4]
 8011554:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011558:	460b      	mov	r3, r1
 801155a:	4313      	orrs	r3, r2
 801155c:	d011      	beq.n	8011582 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801155e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011562:	3328      	adds	r3, #40	; 0x28
 8011564:	2102      	movs	r1, #2
 8011566:	4618      	mov	r0, r3
 8011568:	f001 fa5c 	bl	8012a24 <RCCEx_PLL3_Config>
 801156c:	4603      	mov	r3, r0
 801156e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011576:	2b00      	cmp	r3, #0
 8011578:	d003      	beq.n	8011582 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801157a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801157e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8011582:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011586:	2b00      	cmp	r3, #0
 8011588:	d101      	bne.n	801158e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801158a:	2300      	movs	r3, #0
 801158c:	e000      	b.n	8011590 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801158e:	2301      	movs	r3, #1
}
 8011590:	4618      	mov	r0, r3
 8011592:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8011596:	46bd      	mov	sp, r7
 8011598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801159c:	58024400 	.word	0x58024400

080115a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b090      	sub	sp, #64	; 0x40
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80115aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115ae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80115b2:	430b      	orrs	r3, r1
 80115b4:	f040 8094 	bne.w	80116e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80115b8:	4b9e      	ldr	r3, [pc, #632]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80115ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115bc:	f003 0307 	and.w	r3, r3, #7
 80115c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80115c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c4:	2b04      	cmp	r3, #4
 80115c6:	f200 8087 	bhi.w	80116d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80115ca:	a201      	add	r2, pc, #4	; (adr r2, 80115d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80115cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d0:	080115e5 	.word	0x080115e5
 80115d4:	0801160d 	.word	0x0801160d
 80115d8:	08011635 	.word	0x08011635
 80115dc:	080116d1 	.word	0x080116d1
 80115e0:	0801165d 	.word	0x0801165d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80115e4:	4b93      	ldr	r3, [pc, #588]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80115ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80115f0:	d108      	bne.n	8011604 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80115f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115f6:	4618      	mov	r0, r3
 80115f8:	f001 f810 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80115fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011600:	f000 bd45 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011604:	2300      	movs	r3, #0
 8011606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011608:	f000 bd41 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801160c:	4b89      	ldr	r3, [pc, #548]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011618:	d108      	bne.n	801162c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801161a:	f107 0318 	add.w	r3, r7, #24
 801161e:	4618      	mov	r0, r3
 8011620:	f000 fd54 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011628:	f000 bd31 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801162c:	2300      	movs	r3, #0
 801162e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011630:	f000 bd2d 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011634:	4b7f      	ldr	r3, [pc, #508]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801163c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011640:	d108      	bne.n	8011654 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011642:	f107 030c 	add.w	r3, r7, #12
 8011646:	4618      	mov	r0, r3
 8011648:	f000 fe94 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011650:	f000 bd1d 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011658:	f000 bd19 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801165c:	4b75      	ldr	r3, [pc, #468]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011664:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011666:	4b73      	ldr	r3, [pc, #460]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f003 0304 	and.w	r3, r3, #4
 801166e:	2b04      	cmp	r3, #4
 8011670:	d10c      	bne.n	801168c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8011672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011674:	2b00      	cmp	r3, #0
 8011676:	d109      	bne.n	801168c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011678:	4b6e      	ldr	r3, [pc, #440]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	08db      	lsrs	r3, r3, #3
 801167e:	f003 0303 	and.w	r3, r3, #3
 8011682:	4a6d      	ldr	r2, [pc, #436]	; (8011838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011684:	fa22 f303 	lsr.w	r3, r2, r3
 8011688:	63fb      	str	r3, [r7, #60]	; 0x3c
 801168a:	e01f      	b.n	80116cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801168c:	4b69      	ldr	r3, [pc, #420]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011698:	d106      	bne.n	80116a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801169c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80116a0:	d102      	bne.n	80116a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80116a2:	4b66      	ldr	r3, [pc, #408]	; (801183c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80116a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80116a6:	e011      	b.n	80116cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80116a8:	4b62      	ldr	r3, [pc, #392]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80116b4:	d106      	bne.n	80116c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80116b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80116bc:	d102      	bne.n	80116c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80116be:	4b60      	ldr	r3, [pc, #384]	; (8011840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80116c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80116c2:	e003      	b.n	80116cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80116c4:	2300      	movs	r3, #0
 80116c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80116c8:	f000 bce1 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80116cc:	f000 bcdf 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80116d0:	4b5c      	ldr	r3, [pc, #368]	; (8011844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80116d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d4:	f000 bcdb 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116dc:	f000 bcd7 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80116e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116e4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80116e8:	430b      	orrs	r3, r1
 80116ea:	f040 80ad 	bne.w	8011848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80116ee:	4b51      	ldr	r3, [pc, #324]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80116f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80116f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116fe:	d056      	beq.n	80117ae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8011700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011706:	f200 8090 	bhi.w	801182a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170c:	2bc0      	cmp	r3, #192	; 0xc0
 801170e:	f000 8088 	beq.w	8011822 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8011712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011714:	2bc0      	cmp	r3, #192	; 0xc0
 8011716:	f200 8088 	bhi.w	801182a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171c:	2b80      	cmp	r3, #128	; 0x80
 801171e:	d032      	beq.n	8011786 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8011720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011722:	2b80      	cmp	r3, #128	; 0x80
 8011724:	f200 8081 	bhi.w	801182a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	2b00      	cmp	r3, #0
 801172c:	d003      	beq.n	8011736 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011730:	2b40      	cmp	r3, #64	; 0x40
 8011732:	d014      	beq.n	801175e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8011734:	e079      	b.n	801182a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011736:	4b3f      	ldr	r3, [pc, #252]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801173e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011742:	d108      	bne.n	8011756 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011748:	4618      	mov	r0, r3
 801174a:	f000 ff67 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011750:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011752:	f000 bc9c 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011756:	2300      	movs	r3, #0
 8011758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801175a:	f000 bc98 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801175e:	4b35      	ldr	r3, [pc, #212]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801176a:	d108      	bne.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801176c:	f107 0318 	add.w	r3, r7, #24
 8011770:	4618      	mov	r0, r3
 8011772:	f000 fcab 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801177a:	f000 bc88 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011782:	f000 bc84 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011786:	4b2b      	ldr	r3, [pc, #172]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801178e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011792:	d108      	bne.n	80117a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011794:	f107 030c 	add.w	r3, r7, #12
 8011798:	4618      	mov	r0, r3
 801179a:	f000 fdeb 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80117a2:	f000 bc74 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117aa:	f000 bc70 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80117ae:	4b21      	ldr	r3, [pc, #132]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80117b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80117b8:	4b1e      	ldr	r3, [pc, #120]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	2b04      	cmp	r3, #4
 80117c2:	d10c      	bne.n	80117de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80117c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d109      	bne.n	80117de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80117ca:	4b1a      	ldr	r3, [pc, #104]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	08db      	lsrs	r3, r3, #3
 80117d0:	f003 0303 	and.w	r3, r3, #3
 80117d4:	4a18      	ldr	r2, [pc, #96]	; (8011838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80117d6:	fa22 f303 	lsr.w	r3, r2, r3
 80117da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117dc:	e01f      	b.n	801181e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80117de:	4b15      	ldr	r3, [pc, #84]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117ea:	d106      	bne.n	80117fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80117ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80117f2:	d102      	bne.n	80117fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80117f4:	4b11      	ldr	r3, [pc, #68]	; (801183c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80117f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117f8:	e011      	b.n	801181e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80117fa:	4b0e      	ldr	r3, [pc, #56]	; (8011834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011806:	d106      	bne.n	8011816 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8011808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801180a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801180e:	d102      	bne.n	8011816 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011810:	4b0b      	ldr	r3, [pc, #44]	; (8011840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011814:	e003      	b.n	801181e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011816:	2300      	movs	r3, #0
 8011818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801181a:	f000 bc38 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801181e:	f000 bc36 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011822:	4b08      	ldr	r3, [pc, #32]	; (8011844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8011824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011826:	f000 bc32 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801182a:	2300      	movs	r3, #0
 801182c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801182e:	f000 bc2e 	b.w	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011832:	bf00      	nop
 8011834:	58024400 	.word	0x58024400
 8011838:	03d09000 	.word	0x03d09000
 801183c:	003d0900 	.word	0x003d0900
 8011840:	017d7840 	.word	0x017d7840
 8011844:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8011848:	e9d7 2300 	ldrd	r2, r3, [r7]
 801184c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8011850:	430b      	orrs	r3, r1
 8011852:	f040 809c 	bne.w	801198e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8011856:	4b9e      	ldr	r3, [pc, #632]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801185a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801185e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011866:	d054      	beq.n	8011912 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8011868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801186e:	f200 808b 	bhi.w	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011874:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011878:	f000 8083 	beq.w	8011982 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011882:	f200 8081 	bhi.w	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801188c:	d02f      	beq.n	80118ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011894:	d878      	bhi.n	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011898:	2b00      	cmp	r3, #0
 801189a:	d004      	beq.n	80118a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80118a2:	d012      	beq.n	80118ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80118a4:	e070      	b.n	8011988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80118a6:	4b8a      	ldr	r3, [pc, #552]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80118b2:	d107      	bne.n	80118c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80118b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 feaf 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80118be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118c2:	e3e4      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118c4:	2300      	movs	r3, #0
 80118c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118c8:	e3e1      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80118ca:	4b81      	ldr	r3, [pc, #516]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80118d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80118d6:	d107      	bne.n	80118e8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118d8:	f107 0318 	add.w	r3, r7, #24
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 fbf5 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118e6:	e3d2      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ec:	e3cf      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80118ee:	4b78      	ldr	r3, [pc, #480]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118fa:	d107      	bne.n	801190c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118fc:	f107 030c 	add.w	r3, r7, #12
 8011900:	4618      	mov	r0, r3
 8011902:	f000 fd37 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801190a:	e3c0      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801190c:	2300      	movs	r3, #0
 801190e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011910:	e3bd      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011912:	4b6f      	ldr	r3, [pc, #444]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801191a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801191c:	4b6c      	ldr	r3, [pc, #432]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f003 0304 	and.w	r3, r3, #4
 8011924:	2b04      	cmp	r3, #4
 8011926:	d10c      	bne.n	8011942 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8011928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192a:	2b00      	cmp	r3, #0
 801192c:	d109      	bne.n	8011942 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801192e:	4b68      	ldr	r3, [pc, #416]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	08db      	lsrs	r3, r3, #3
 8011934:	f003 0303 	and.w	r3, r3, #3
 8011938:	4a66      	ldr	r2, [pc, #408]	; (8011ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801193a:	fa22 f303 	lsr.w	r3, r2, r3
 801193e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011940:	e01e      	b.n	8011980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011942:	4b63      	ldr	r3, [pc, #396]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801194a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801194e:	d106      	bne.n	801195e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011956:	d102      	bne.n	801195e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011958:	4b5f      	ldr	r3, [pc, #380]	; (8011ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801195a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801195c:	e010      	b.n	8011980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801195e:	4b5c      	ldr	r3, [pc, #368]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801196a:	d106      	bne.n	801197a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011972:	d102      	bne.n	801197a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011974:	4b59      	ldr	r3, [pc, #356]	; (8011adc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011978:	e002      	b.n	8011980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801197e:	e386      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011980:	e385      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011982:	4b57      	ldr	r3, [pc, #348]	; (8011ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011986:	e382      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011988:	2300      	movs	r3, #0
 801198a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801198c:	e37f      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011992:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8011996:	430b      	orrs	r3, r1
 8011998:	f040 80a7 	bne.w	8011aea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801199c:	4b4c      	ldr	r3, [pc, #304]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119a0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80119a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80119a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80119ac:	d055      	beq.n	8011a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80119ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80119b4:	f200 8096 	bhi.w	8011ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80119b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80119be:	f000 8084 	beq.w	8011aca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80119c8:	f200 808c 	bhi.w	8011ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80119cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119d2:	d030      	beq.n	8011a36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80119d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119da:	f200 8083 	bhi.w	8011ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d004      	beq.n	80119ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80119e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80119ea:	d012      	beq.n	8011a12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80119ec:	e07a      	b.n	8011ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80119ee:	4b38      	ldr	r3, [pc, #224]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119fa:	d107      	bne.n	8011a0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80119fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 fe0b 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a0a:	e340      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a10:	e33d      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011a12:	4b2f      	ldr	r3, [pc, #188]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011a1e:	d107      	bne.n	8011a30 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a20:	f107 0318 	add.w	r3, r7, #24
 8011a24:	4618      	mov	r0, r3
 8011a26:	f000 fb51 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a2e:	e32e      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a30:	2300      	movs	r3, #0
 8011a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a34:	e32b      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011a36:	4b26      	ldr	r3, [pc, #152]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a42:	d107      	bne.n	8011a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a44:	f107 030c 	add.w	r3, r7, #12
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f000 fc93 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a52:	e31c      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a54:	2300      	movs	r3, #0
 8011a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a58:	e319      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011a5a:	4b1d      	ldr	r3, [pc, #116]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011a62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011a64:	4b1a      	ldr	r3, [pc, #104]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f003 0304 	and.w	r3, r3, #4
 8011a6c:	2b04      	cmp	r3, #4
 8011a6e:	d10c      	bne.n	8011a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8011a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d109      	bne.n	8011a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a76:	4b16      	ldr	r3, [pc, #88]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	08db      	lsrs	r3, r3, #3
 8011a7c:	f003 0303 	and.w	r3, r3, #3
 8011a80:	4a14      	ldr	r2, [pc, #80]	; (8011ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011a82:	fa22 f303 	lsr.w	r3, r2, r3
 8011a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a88:	e01e      	b.n	8011ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011a8a:	4b11      	ldr	r3, [pc, #68]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a96:	d106      	bne.n	8011aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8011a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a9e:	d102      	bne.n	8011aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011aa0:	4b0d      	ldr	r3, [pc, #52]	; (8011ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011aa4:	e010      	b.n	8011ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	; (8011ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ab2:	d106      	bne.n	8011ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8011ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011aba:	d102      	bne.n	8011ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011abc:	4b07      	ldr	r3, [pc, #28]	; (8011adc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ac0:	e002      	b.n	8011ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011ac6:	e2e2      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011ac8:	e2e1      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011aca:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ace:	e2de      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011ad0:	58024400 	.word	0x58024400
 8011ad4:	03d09000 	.word	0x03d09000
 8011ad8:	003d0900 	.word	0x003d0900
 8011adc:	017d7840 	.word	0x017d7840
 8011ae0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ae8:	e2d1      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8011aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011aee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8011af2:	430b      	orrs	r3, r1
 8011af4:	f040 809c 	bne.w	8011c30 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8011af8:	4b93      	ldr	r3, [pc, #588]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011afc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011b00:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b08:	d054      	beq.n	8011bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b10:	f200 808b 	bhi.w	8011c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011b1a:	f000 8083 	beq.w	8011c24 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8011b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011b24:	f200 8081 	bhi.w	8011c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b2e:	d02f      	beq.n	8011b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8011b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b36:	d878      	bhi.n	8011c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d004      	beq.n	8011b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8011b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b44:	d012      	beq.n	8011b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011b46:	e070      	b.n	8011c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011b48:	4b7f      	ldr	r3, [pc, #508]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011b54:	d107      	bne.n	8011b66 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f000 fd5e 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b64:	e293      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b6a:	e290      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011b6c:	4b76      	ldr	r3, [pc, #472]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011b78:	d107      	bne.n	8011b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b7a:	f107 0318 	add.w	r3, r7, #24
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f000 faa4 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b88:	e281      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b8e:	e27e      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011b90:	4b6d      	ldr	r3, [pc, #436]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b9c:	d107      	bne.n	8011bae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b9e:	f107 030c 	add.w	r3, r7, #12
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 fbe6 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011bac:	e26f      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bb2:	e26c      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011bb4:	4b64      	ldr	r3, [pc, #400]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011bbc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011bbe:	4b62      	ldr	r3, [pc, #392]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f003 0304 	and.w	r3, r3, #4
 8011bc6:	2b04      	cmp	r3, #4
 8011bc8:	d10c      	bne.n	8011be4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d109      	bne.n	8011be4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011bd0:	4b5d      	ldr	r3, [pc, #372]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	08db      	lsrs	r3, r3, #3
 8011bd6:	f003 0303 	and.w	r3, r3, #3
 8011bda:	4a5c      	ldr	r2, [pc, #368]	; (8011d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8011be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011be2:	e01e      	b.n	8011c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011be4:	4b58      	ldr	r3, [pc, #352]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bf0:	d106      	bne.n	8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8011bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011bf8:	d102      	bne.n	8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011bfa:	4b55      	ldr	r3, [pc, #340]	; (8011d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bfe:	e010      	b.n	8011c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011c00:	4b51      	ldr	r3, [pc, #324]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c0c:	d106      	bne.n	8011c1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8011c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c14:	d102      	bne.n	8011c1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011c16:	4b4f      	ldr	r3, [pc, #316]	; (8011d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c1a:	e002      	b.n	8011c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011c20:	e235      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011c22:	e234      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011c24:	4b4c      	ldr	r3, [pc, #304]	; (8011d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8011c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c28:	e231      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c2e:	e22e      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8011c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c34:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8011c38:	430b      	orrs	r3, r1
 8011c3a:	f040 808f 	bne.w	8011d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8011c3e:	4b42      	ldr	r3, [pc, #264]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c42:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011c46:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011c4e:	d06b      	beq.n	8011d28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8011c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011c56:	d874      	bhi.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c5e:	d056      	beq.n	8011d0e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8011c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c66:	d86c      	bhi.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011c6e:	d03b      	beq.n	8011ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8011c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011c76:	d864      	bhi.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c7e:	d021      	beq.n	8011cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c86:	d85c      	bhi.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d004      	beq.n	8011c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8011c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c94:	d004      	beq.n	8011ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011c96:	e054      	b.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011c98:	f7fe fa0a 	bl	80100b0 <HAL_RCC_GetPCLK1Freq>
 8011c9c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c9e:	e1f6      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011ca0:	4b29      	ldr	r3, [pc, #164]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011cac:	d107      	bne.n	8011cbe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cae:	f107 0318 	add.w	r3, r7, #24
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f000 fa0a 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011cbc:	e1e7      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cc2:	e1e4      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011cc4:	4b20      	ldr	r3, [pc, #128]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011cd0:	d107      	bne.n	8011ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cd2:	f107 030c 	add.w	r3, r7, #12
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f000 fb4c 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ce0:	e1d5      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ce6:	e1d2      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011ce8:	4b17      	ldr	r3, [pc, #92]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 0304 	and.w	r3, r3, #4
 8011cf0:	2b04      	cmp	r3, #4
 8011cf2:	d109      	bne.n	8011d08 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011cf4:	4b14      	ldr	r3, [pc, #80]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	08db      	lsrs	r3, r3, #3
 8011cfa:	f003 0303 	and.w	r3, r3, #3
 8011cfe:	4a13      	ldr	r2, [pc, #76]	; (8011d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011d00:	fa22 f303 	lsr.w	r3, r2, r3
 8011d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d06:	e1c2      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d0c:	e1bf      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011d0e:	4b0e      	ldr	r3, [pc, #56]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d1a:	d102      	bne.n	8011d22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011d1c:	4b0c      	ldr	r3, [pc, #48]	; (8011d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d20:	e1b5      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d26:	e1b2      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011d28:	4b07      	ldr	r3, [pc, #28]	; (8011d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d34:	d102      	bne.n	8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8011d36:	4b07      	ldr	r3, [pc, #28]	; (8011d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d3a:	e1a8      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d40:	e1a5      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d46:	e1a2      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011d48:	58024400 	.word	0x58024400
 8011d4c:	03d09000 	.word	0x03d09000
 8011d50:	003d0900 	.word	0x003d0900
 8011d54:	017d7840 	.word	0x017d7840
 8011d58:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d60:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8011d64:	430b      	orrs	r3, r1
 8011d66:	d173      	bne.n	8011e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011d68:	4b9c      	ldr	r3, [pc, #624]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011d70:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d78:	d02f      	beq.n	8011dda <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d80:	d863      	bhi.n	8011e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d004      	beq.n	8011d92 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d8e:	d012      	beq.n	8011db6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8011d90:	e05b      	b.n	8011e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d92:	4b92      	ldr	r3, [pc, #584]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d9e:	d107      	bne.n	8011db0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011da0:	f107 0318 	add.w	r3, r7, #24
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 f991 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011dae:	e16e      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011db0:	2300      	movs	r3, #0
 8011db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011db4:	e16b      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011db6:	4b89      	ldr	r3, [pc, #548]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011dc2:	d107      	bne.n	8011dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011dc4:	f107 030c 	add.w	r3, r7, #12
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f000 fad3 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011dd2:	e15c      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dd8:	e159      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011dda:	4b80      	ldr	r3, [pc, #512]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011dde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011de2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011de4:	4b7d      	ldr	r3, [pc, #500]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f003 0304 	and.w	r3, r3, #4
 8011dec:	2b04      	cmp	r3, #4
 8011dee:	d10c      	bne.n	8011e0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d109      	bne.n	8011e0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011df6:	4b79      	ldr	r3, [pc, #484]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	08db      	lsrs	r3, r3, #3
 8011dfc:	f003 0303 	and.w	r3, r3, #3
 8011e00:	4a77      	ldr	r2, [pc, #476]	; (8011fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011e02:	fa22 f303 	lsr.w	r3, r2, r3
 8011e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e08:	e01e      	b.n	8011e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011e0a:	4b74      	ldr	r3, [pc, #464]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e16:	d106      	bne.n	8011e26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e1e:	d102      	bne.n	8011e26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011e20:	4b70      	ldr	r3, [pc, #448]	; (8011fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e24:	e010      	b.n	8011e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011e26:	4b6d      	ldr	r3, [pc, #436]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e32:	d106      	bne.n	8011e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e3a:	d102      	bne.n	8011e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011e3c:	4b6a      	ldr	r3, [pc, #424]	; (8011fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e40:	e002      	b.n	8011e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011e42:	2300      	movs	r3, #0
 8011e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011e46:	e122      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011e48:	e121      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e4e:	e11e      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e54:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8011e58:	430b      	orrs	r3, r1
 8011e5a:	d133      	bne.n	8011ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011e5c:	4b5f      	ldr	r3, [pc, #380]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d004      	beq.n	8011e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e72:	d012      	beq.n	8011e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8011e74:	e023      	b.n	8011ebe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e76:	4b59      	ldr	r3, [pc, #356]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e82:	d107      	bne.n	8011e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 fbc7 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e92:	e0fc      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e98:	e0f9      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e9a:	4b50      	ldr	r3, [pc, #320]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011ea6:	d107      	bne.n	8011eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011ea8:	f107 0318 	add.w	r3, r7, #24
 8011eac:	4618      	mov	r0, r3
 8011eae:	f000 f90d 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011eb6:	e0ea      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ebc:	e0e7      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ec2:	e0e4      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ec8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8011ecc:	430b      	orrs	r3, r1
 8011ece:	f040 808d 	bne.w	8011fec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011ed2:	4b42      	ldr	r3, [pc, #264]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ed6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8011eda:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011ee2:	d06b      	beq.n	8011fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011eea:	d874      	bhi.n	8011fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ef2:	d056      	beq.n	8011fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011efa:	d86c      	bhi.n	8011fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011f02:	d03b      	beq.n	8011f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011f0a:	d864      	bhi.n	8011fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f12:	d021      	beq.n	8011f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f1a:	d85c      	bhi.n	8011fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d004      	beq.n	8011f2c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f28:	d004      	beq.n	8011f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8011f2a:	e054      	b.n	8011fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011f2c:	f000 f8b8 	bl	80120a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8011f30:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011f32:	e0ac      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011f34:	4b29      	ldr	r3, [pc, #164]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011f40:	d107      	bne.n	8011f52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f42:	f107 0318 	add.w	r3, r7, #24
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 f8c0 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f50:	e09d      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f52:	2300      	movs	r3, #0
 8011f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f56:	e09a      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011f58:	4b20      	ldr	r3, [pc, #128]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f64:	d107      	bne.n	8011f76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011f66:	f107 030c 	add.w	r3, r7, #12
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f000 fa02 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f74:	e08b      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f7a:	e088      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011f7c:	4b17      	ldr	r3, [pc, #92]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b04      	cmp	r3, #4
 8011f86:	d109      	bne.n	8011f9c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011f88:	4b14      	ldr	r3, [pc, #80]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	08db      	lsrs	r3, r3, #3
 8011f8e:	f003 0303 	and.w	r3, r3, #3
 8011f92:	4a13      	ldr	r2, [pc, #76]	; (8011fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011f94:	fa22 f303 	lsr.w	r3, r2, r3
 8011f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f9a:	e078      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fa0:	e075      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011fa2:	4b0e      	ldr	r3, [pc, #56]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fae:	d102      	bne.n	8011fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8011fb0:	4b0c      	ldr	r3, [pc, #48]	; (8011fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fb4:	e06b      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fba:	e068      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011fbc:	4b07      	ldr	r3, [pc, #28]	; (8011fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fc8:	d102      	bne.n	8011fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8011fca:	4b07      	ldr	r3, [pc, #28]	; (8011fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fce:	e05e      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fd4:	e05b      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fda:	e058      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011fdc:	58024400 	.word	0x58024400
 8011fe0:	03d09000 	.word	0x03d09000
 8011fe4:	003d0900 	.word	0x003d0900
 8011fe8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ff0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8011ff4:	430b      	orrs	r3, r1
 8011ff6:	d148      	bne.n	801208a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8011ff8:	4b27      	ldr	r3, [pc, #156]	; (8012098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012000:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012008:	d02a      	beq.n	8012060 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012010:	d838      	bhi.n	8012084 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8012012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012014:	2b00      	cmp	r3, #0
 8012016:	d004      	beq.n	8012022 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8012018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801201e:	d00d      	beq.n	801203c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8012020:	e030      	b.n	8012084 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012022:	4b1d      	ldr	r3, [pc, #116]	; (8012098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801202a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801202e:	d102      	bne.n	8012036 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8012030:	4b1a      	ldr	r3, [pc, #104]	; (801209c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8012032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012034:	e02b      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801203a:	e028      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801203c:	4b16      	ldr	r3, [pc, #88]	; (8012098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012048:	d107      	bne.n	801205a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801204e:	4618      	mov	r0, r3
 8012050:	f000 fae4 	bl	801261c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012056:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012058:	e019      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801205a:	2300      	movs	r3, #0
 801205c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801205e:	e016      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012060:	4b0d      	ldr	r3, [pc, #52]	; (8012098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801206c:	d107      	bne.n	801207e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801206e:	f107 0318 	add.w	r3, r7, #24
 8012072:	4618      	mov	r0, r3
 8012074:	f000 f82a 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801207c:	e007      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012082:	e004      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8012084:	2300      	movs	r3, #0
 8012086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012088:	e001      	b.n	801208e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801208a:	2300      	movs	r3, #0
 801208c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012090:	4618      	mov	r0, r3
 8012092:	3740      	adds	r7, #64	; 0x40
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	58024400 	.word	0x58024400
 801209c:	017d7840 	.word	0x017d7840

080120a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80120a4:	f7fd ffd4 	bl	8010050 <HAL_RCC_GetHCLKFreq>
 80120a8:	4602      	mov	r2, r0
 80120aa:	4b06      	ldr	r3, [pc, #24]	; (80120c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80120ac:	6a1b      	ldr	r3, [r3, #32]
 80120ae:	091b      	lsrs	r3, r3, #4
 80120b0:	f003 0307 	and.w	r3, r3, #7
 80120b4:	4904      	ldr	r1, [pc, #16]	; (80120c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80120b6:	5ccb      	ldrb	r3, [r1, r3]
 80120b8:	f003 031f 	and.w	r3, r3, #31
 80120bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	58024400 	.word	0x58024400
 80120c8:	0801bdb8 	.word	0x0801bdb8

080120cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b089      	sub	sp, #36	; 0x24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80120d4:	4ba1      	ldr	r3, [pc, #644]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120d8:	f003 0303 	and.w	r3, r3, #3
 80120dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80120de:	4b9f      	ldr	r3, [pc, #636]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120e2:	0b1b      	lsrs	r3, r3, #12
 80120e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80120ea:	4b9c      	ldr	r3, [pc, #624]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ee:	091b      	lsrs	r3, r3, #4
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80120f6:	4b99      	ldr	r3, [pc, #612]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120fa:	08db      	lsrs	r3, r3, #3
 80120fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012100:	693a      	ldr	r2, [r7, #16]
 8012102:	fb02 f303 	mul.w	r3, r2, r3
 8012106:	ee07 3a90 	vmov	s15, r3
 801210a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801210e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 8111 	beq.w	801233c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	2b02      	cmp	r3, #2
 801211e:	f000 8083 	beq.w	8012228 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	2b02      	cmp	r3, #2
 8012126:	f200 80a1 	bhi.w	801226c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d003      	beq.n	8012138 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d056      	beq.n	80121e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8012136:	e099      	b.n	801226c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012138:	4b88      	ldr	r3, [pc, #544]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f003 0320 	and.w	r3, r3, #32
 8012140:	2b00      	cmp	r3, #0
 8012142:	d02d      	beq.n	80121a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012144:	4b85      	ldr	r3, [pc, #532]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	08db      	lsrs	r3, r3, #3
 801214a:	f003 0303 	and.w	r3, r3, #3
 801214e:	4a84      	ldr	r2, [pc, #528]	; (8012360 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012150:	fa22 f303 	lsr.w	r3, r2, r3
 8012154:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	ee07 3a90 	vmov	s15, r3
 801215c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	ee07 3a90 	vmov	s15, r3
 8012166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801216a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801216e:	4b7b      	ldr	r3, [pc, #492]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012176:	ee07 3a90 	vmov	s15, r3
 801217a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801217e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012182:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801218a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801218e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801219a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801219e:	e087      	b.n	80122b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	ee07 3a90 	vmov	s15, r3
 80121a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012368 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80121ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121b2:	4b6a      	ldr	r3, [pc, #424]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121ba:	ee07 3a90 	vmov	s15, r3
 80121be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80121c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80121ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80121ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80121d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80121d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80121e2:	e065      	b.n	80122b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	ee07 3a90 	vmov	s15, r3
 80121ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801236c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80121f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121f6:	4b59      	ldr	r3, [pc, #356]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121fe:	ee07 3a90 	vmov	s15, r3
 8012202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012206:	ed97 6a03 	vldr	s12, [r7, #12]
 801220a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801220e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801221a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012226:	e043      	b.n	80122b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	ee07 3a90 	vmov	s15, r3
 801222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012232:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801223a:	4b48      	ldr	r3, [pc, #288]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801223e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012242:	ee07 3a90 	vmov	s15, r3
 8012246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801224a:	ed97 6a03 	vldr	s12, [r7, #12]
 801224e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801225a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801225e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801226a:	e021      	b.n	80122b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	ee07 3a90 	vmov	s15, r3
 8012272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012276:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801236c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801227a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801227e:	4b37      	ldr	r3, [pc, #220]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012286:	ee07 3a90 	vmov	s15, r3
 801228a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801228e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012292:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801229a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801229e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80122ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80122b0:	4b2a      	ldr	r3, [pc, #168]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80122b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122b4:	0a5b      	lsrs	r3, r3, #9
 80122b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122ba:	ee07 3a90 	vmov	s15, r3
 80122be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80122ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80122ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80122d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122d6:	ee17 2a90 	vmov	r2, s15
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80122de:	4b1f      	ldr	r3, [pc, #124]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80122e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122e2:	0c1b      	lsrs	r3, r3, #16
 80122e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122e8:	ee07 3a90 	vmov	s15, r3
 80122ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80122f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80122fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012304:	ee17 2a90 	vmov	r2, s15
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801230c:	4b13      	ldr	r3, [pc, #76]	; (801235c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012310:	0e1b      	lsrs	r3, r3, #24
 8012312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012316:	ee07 3a90 	vmov	s15, r3
 801231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801231e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012326:	edd7 6a07 	vldr	s13, [r7, #28]
 801232a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801232e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012332:	ee17 2a90 	vmov	r2, s15
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801233a:	e008      	b.n	801234e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2200      	movs	r2, #0
 8012340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	609a      	str	r2, [r3, #8]
}
 801234e:	bf00      	nop
 8012350:	3724      	adds	r7, #36	; 0x24
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	58024400 	.word	0x58024400
 8012360:	03d09000 	.word	0x03d09000
 8012364:	46000000 	.word	0x46000000
 8012368:	4c742400 	.word	0x4c742400
 801236c:	4a742400 	.word	0x4a742400
 8012370:	4bbebc20 	.word	0x4bbebc20

08012374 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8012374:	b480      	push	{r7}
 8012376:	b089      	sub	sp, #36	; 0x24
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801237c:	4ba1      	ldr	r3, [pc, #644]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012380:	f003 0303 	and.w	r3, r3, #3
 8012384:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8012386:	4b9f      	ldr	r3, [pc, #636]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801238a:	0d1b      	lsrs	r3, r3, #20
 801238c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012390:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012392:	4b9c      	ldr	r3, [pc, #624]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012396:	0a1b      	lsrs	r3, r3, #8
 8012398:	f003 0301 	and.w	r3, r3, #1
 801239c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801239e:	4b99      	ldr	r3, [pc, #612]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123a2:	08db      	lsrs	r3, r3, #3
 80123a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123a8:	693a      	ldr	r2, [r7, #16]
 80123aa:	fb02 f303 	mul.w	r3, r2, r3
 80123ae:	ee07 3a90 	vmov	s15, r3
 80123b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 8111 	beq.w	80125e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	2b02      	cmp	r3, #2
 80123c6:	f000 8083 	beq.w	80124d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	2b02      	cmp	r3, #2
 80123ce:	f200 80a1 	bhi.w	8012514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d003      	beq.n	80123e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d056      	beq.n	801248c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80123de:	e099      	b.n	8012514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80123e0:	4b88      	ldr	r3, [pc, #544]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f003 0320 	and.w	r3, r3, #32
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d02d      	beq.n	8012448 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80123ec:	4b85      	ldr	r3, [pc, #532]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	08db      	lsrs	r3, r3, #3
 80123f2:	f003 0303 	and.w	r3, r3, #3
 80123f6:	4a84      	ldr	r2, [pc, #528]	; (8012608 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80123f8:	fa22 f303 	lsr.w	r3, r2, r3
 80123fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	ee07 3a90 	vmov	s15, r3
 8012404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	ee07 3a90 	vmov	s15, r3
 801240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012416:	4b7b      	ldr	r3, [pc, #492]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801241a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801241e:	ee07 3a90 	vmov	s15, r3
 8012422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012426:	ed97 6a03 	vldr	s12, [r7, #12]
 801242a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801260c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801242e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801243a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012446:	e087      	b.n	8012558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	ee07 3a90 	vmov	s15, r3
 801244e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012452:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012610 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801245a:	4b6a      	ldr	r3, [pc, #424]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012462:	ee07 3a90 	vmov	s15, r3
 8012466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801246a:	ed97 6a03 	vldr	s12, [r7, #12]
 801246e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801260c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801247a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801247e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801248a:	e065      	b.n	8012558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	ee07 3a90 	vmov	s15, r3
 8012492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012496:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801249a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801249e:	4b59      	ldr	r3, [pc, #356]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124a6:	ee07 3a90 	vmov	s15, r3
 80124aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80124b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801260c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80124b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80124ce:	e043      	b.n	8012558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	ee07 3a90 	vmov	s15, r3
 80124d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80124de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124e2:	4b48      	ldr	r3, [pc, #288]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124ea:	ee07 3a90 	vmov	s15, r3
 80124ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80124f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801260c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80124fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801250e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012512:	e021      	b.n	8012558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	ee07 3a90 	vmov	s15, r3
 801251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801251e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012526:	4b37      	ldr	r3, [pc, #220]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801252e:	ee07 3a90 	vmov	s15, r3
 8012532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012536:	ed97 6a03 	vldr	s12, [r7, #12]
 801253a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801260c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801253e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801254a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012556:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012558:	4b2a      	ldr	r3, [pc, #168]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801255c:	0a5b      	lsrs	r3, r3, #9
 801255e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012562:	ee07 3a90 	vmov	s15, r3
 8012566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801256a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801256e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012572:	edd7 6a07 	vldr	s13, [r7, #28]
 8012576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801257a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801257e:	ee17 2a90 	vmov	r2, s15
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8012586:	4b1f      	ldr	r3, [pc, #124]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801258a:	0c1b      	lsrs	r3, r3, #16
 801258c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012590:	ee07 3a90 	vmov	s15, r3
 8012594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801259c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80125a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80125a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80125ac:	ee17 2a90 	vmov	r2, s15
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80125b4:	4b13      	ldr	r3, [pc, #76]	; (8012604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80125b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125b8:	0e1b      	lsrs	r3, r3, #24
 80125ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125be:	ee07 3a90 	vmov	s15, r3
 80125c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80125ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80125ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80125d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80125d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80125da:	ee17 2a90 	vmov	r2, s15
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80125e2:	e008      	b.n	80125f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2200      	movs	r2, #0
 80125ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2200      	movs	r2, #0
 80125f4:	609a      	str	r2, [r3, #8]
}
 80125f6:	bf00      	nop
 80125f8:	3724      	adds	r7, #36	; 0x24
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	58024400 	.word	0x58024400
 8012608:	03d09000 	.word	0x03d09000
 801260c:	46000000 	.word	0x46000000
 8012610:	4c742400 	.word	0x4c742400
 8012614:	4a742400 	.word	0x4a742400
 8012618:	4bbebc20 	.word	0x4bbebc20

0801261c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801261c:	b480      	push	{r7}
 801261e:	b089      	sub	sp, #36	; 0x24
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012624:	4ba0      	ldr	r3, [pc, #640]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012628:	f003 0303 	and.w	r3, r3, #3
 801262c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801262e:	4b9e      	ldr	r3, [pc, #632]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012632:	091b      	lsrs	r3, r3, #4
 8012634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012638:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801263a:	4b9b      	ldr	r3, [pc, #620]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801263e:	f003 0301 	and.w	r3, r3, #1
 8012642:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8012644:	4b98      	ldr	r3, [pc, #608]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012648:	08db      	lsrs	r3, r3, #3
 801264a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801264e:	693a      	ldr	r2, [r7, #16]
 8012650:	fb02 f303 	mul.w	r3, r2, r3
 8012654:	ee07 3a90 	vmov	s15, r3
 8012658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801265c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 8111 	beq.w	801288a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	2b02      	cmp	r3, #2
 801266c:	f000 8083 	beq.w	8012776 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	2b02      	cmp	r3, #2
 8012674:	f200 80a1 	bhi.w	80127ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d003      	beq.n	8012686 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	2b01      	cmp	r3, #1
 8012682:	d056      	beq.n	8012732 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012684:	e099      	b.n	80127ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012686:	4b88      	ldr	r3, [pc, #544]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f003 0320 	and.w	r3, r3, #32
 801268e:	2b00      	cmp	r3, #0
 8012690:	d02d      	beq.n	80126ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012692:	4b85      	ldr	r3, [pc, #532]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	08db      	lsrs	r3, r3, #3
 8012698:	f003 0303 	and.w	r3, r3, #3
 801269c:	4a83      	ldr	r2, [pc, #524]	; (80128ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801269e:	fa22 f303 	lsr.w	r3, r2, r3
 80126a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	ee07 3a90 	vmov	s15, r3
 80126aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	ee07 3a90 	vmov	s15, r3
 80126b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80126bc:	4b7a      	ldr	r3, [pc, #488]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126c4:	ee07 3a90 	vmov	s15, r3
 80126c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80126d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80128b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80126d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80126d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80126dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80126ec:	e087      	b.n	80127fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	ee07 3a90 	vmov	s15, r3
 80126f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80128b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80126fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012700:	4b69      	ldr	r3, [pc, #420]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012708:	ee07 3a90 	vmov	s15, r3
 801270c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012710:	ed97 6a03 	vldr	s12, [r7, #12]
 8012714:	eddf 5a66 	vldr	s11, [pc, #408]	; 80128b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801271c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012728:	ee67 7a27 	vmul.f32	s15, s14, s15
 801272c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012730:	e065      	b.n	80127fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	ee07 3a90 	vmov	s15, r3
 8012738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801273c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80128b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012744:	4b58      	ldr	r3, [pc, #352]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801274c:	ee07 3a90 	vmov	s15, r3
 8012750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012754:	ed97 6a03 	vldr	s12, [r7, #12]
 8012758:	eddf 5a55 	vldr	s11, [pc, #340]	; 80128b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801275c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801276c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012774:	e043      	b.n	80127fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	ee07 3a90 	vmov	s15, r3
 801277c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012780:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80128bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012788:	4b47      	ldr	r3, [pc, #284]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801278c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012790:	ee07 3a90 	vmov	s15, r3
 8012794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012798:	ed97 6a03 	vldr	s12, [r7, #12]
 801279c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80128b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80127a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80127b8:	e021      	b.n	80127fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	ee07 3a90 	vmov	s15, r3
 80127c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80128b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80127c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127cc:	4b36      	ldr	r3, [pc, #216]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127d4:	ee07 3a90 	vmov	s15, r3
 80127d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80127e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80128b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80127e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80127fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80127fe:	4b2a      	ldr	r3, [pc, #168]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012802:	0a5b      	lsrs	r3, r3, #9
 8012804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012808:	ee07 3a90 	vmov	s15, r3
 801280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012818:	edd7 6a07 	vldr	s13, [r7, #28]
 801281c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012824:	ee17 2a90 	vmov	r2, s15
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801282c:	4b1e      	ldr	r3, [pc, #120]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012830:	0c1b      	lsrs	r3, r3, #16
 8012832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012836:	ee07 3a90 	vmov	s15, r3
 801283a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801283e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012846:	edd7 6a07 	vldr	s13, [r7, #28]
 801284a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801284e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012852:	ee17 2a90 	vmov	r2, s15
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801285a:	4b13      	ldr	r3, [pc, #76]	; (80128a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801285e:	0e1b      	lsrs	r3, r3, #24
 8012860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012864:	ee07 3a90 	vmov	s15, r3
 8012868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801286c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012874:	edd7 6a07 	vldr	s13, [r7, #28]
 8012878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801287c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012880:	ee17 2a90 	vmov	r2, s15
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012888:	e008      	b.n	801289c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2200      	movs	r2, #0
 8012894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2200      	movs	r2, #0
 801289a:	609a      	str	r2, [r3, #8]
}
 801289c:	bf00      	nop
 801289e:	3724      	adds	r7, #36	; 0x24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr
 80128a8:	58024400 	.word	0x58024400
 80128ac:	03d09000 	.word	0x03d09000
 80128b0:	46000000 	.word	0x46000000
 80128b4:	4c742400 	.word	0x4c742400
 80128b8:	4a742400 	.word	0x4a742400
 80128bc:	4bbebc20 	.word	0x4bbebc20

080128c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80128ce:	4b53      	ldr	r3, [pc, #332]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80128d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d2:	f003 0303 	and.w	r3, r3, #3
 80128d6:	2b03      	cmp	r3, #3
 80128d8:	d101      	bne.n	80128de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80128da:	2301      	movs	r3, #1
 80128dc:	e099      	b.n	8012a12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80128de:	4b4f      	ldr	r3, [pc, #316]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a4e      	ldr	r2, [pc, #312]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80128e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80128e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80128ea:	f7f4 f8b1 	bl	8006a50 <HAL_GetTick>
 80128ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80128f0:	e008      	b.n	8012904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80128f2:	f7f4 f8ad 	bl	8006a50 <HAL_GetTick>
 80128f6:	4602      	mov	r2, r0
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	1ad3      	subs	r3, r2, r3
 80128fc:	2b02      	cmp	r3, #2
 80128fe:	d901      	bls.n	8012904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012900:	2303      	movs	r3, #3
 8012902:	e086      	b.n	8012a12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012904:	4b45      	ldr	r3, [pc, #276]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801290c:	2b00      	cmp	r3, #0
 801290e:	d1f0      	bne.n	80128f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012910:	4b42      	ldr	r3, [pc, #264]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012914:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	031b      	lsls	r3, r3, #12
 801291e:	493f      	ldr	r1, [pc, #252]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012920:	4313      	orrs	r3, r2
 8012922:	628b      	str	r3, [r1, #40]	; 0x28
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	3b01      	subs	r3, #1
 801292a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	689b      	ldr	r3, [r3, #8]
 8012932:	3b01      	subs	r3, #1
 8012934:	025b      	lsls	r3, r3, #9
 8012936:	b29b      	uxth	r3, r3
 8012938:	431a      	orrs	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	3b01      	subs	r3, #1
 8012940:	041b      	lsls	r3, r3, #16
 8012942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012946:	431a      	orrs	r2, r3
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	691b      	ldr	r3, [r3, #16]
 801294c:	3b01      	subs	r3, #1
 801294e:	061b      	lsls	r3, r3, #24
 8012950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012954:	4931      	ldr	r1, [pc, #196]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012956:	4313      	orrs	r3, r2
 8012958:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801295a:	4b30      	ldr	r3, [pc, #192]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 801295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	695b      	ldr	r3, [r3, #20]
 8012966:	492d      	ldr	r1, [pc, #180]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012968:	4313      	orrs	r3, r2
 801296a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801296c:	4b2b      	ldr	r3, [pc, #172]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 801296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012970:	f023 0220 	bic.w	r2, r3, #32
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	699b      	ldr	r3, [r3, #24]
 8012978:	4928      	ldr	r1, [pc, #160]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 801297a:	4313      	orrs	r3, r2
 801297c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801297e:	4b27      	ldr	r3, [pc, #156]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012982:	4a26      	ldr	r2, [pc, #152]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012984:	f023 0310 	bic.w	r3, r3, #16
 8012988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801298a:	4b24      	ldr	r3, [pc, #144]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 801298c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801298e:	4b24      	ldr	r3, [pc, #144]	; (8012a20 <RCCEx_PLL2_Config+0x160>)
 8012990:	4013      	ands	r3, r2
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	69d2      	ldr	r2, [r2, #28]
 8012996:	00d2      	lsls	r2, r2, #3
 8012998:	4920      	ldr	r1, [pc, #128]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 801299a:	4313      	orrs	r3, r2
 801299c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801299e:	4b1f      	ldr	r3, [pc, #124]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129a2:	4a1e      	ldr	r2, [pc, #120]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129a4:	f043 0310 	orr.w	r3, r3, #16
 80129a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d106      	bne.n	80129be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80129b0:	4b1a      	ldr	r3, [pc, #104]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b4:	4a19      	ldr	r2, [pc, #100]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80129bc:	e00f      	b.n	80129de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	d106      	bne.n	80129d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80129c4:	4b15      	ldr	r3, [pc, #84]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c8:	4a14      	ldr	r2, [pc, #80]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80129d0:	e005      	b.n	80129de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80129d2:	4b12      	ldr	r3, [pc, #72]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d6:	4a11      	ldr	r2, [pc, #68]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80129dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80129de:	4b0f      	ldr	r3, [pc, #60]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a0e      	ldr	r2, [pc, #56]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 80129e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80129e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80129ea:	f7f4 f831 	bl	8006a50 <HAL_GetTick>
 80129ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80129f0:	e008      	b.n	8012a04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80129f2:	f7f4 f82d 	bl	8006a50 <HAL_GetTick>
 80129f6:	4602      	mov	r2, r0
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	1ad3      	subs	r3, r2, r3
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d901      	bls.n	8012a04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012a00:	2303      	movs	r3, #3
 8012a02:	e006      	b.n	8012a12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012a04:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <RCCEx_PLL2_Config+0x15c>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d0f0      	beq.n	80129f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	58024400 	.word	0x58024400
 8012a20:	ffff0007 	.word	0xffff0007

08012a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012a32:	4b53      	ldr	r3, [pc, #332]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a36:	f003 0303 	and.w	r3, r3, #3
 8012a3a:	2b03      	cmp	r3, #3
 8012a3c:	d101      	bne.n	8012a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	e099      	b.n	8012b76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012a42:	4b4f      	ldr	r3, [pc, #316]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4a4e      	ldr	r2, [pc, #312]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a4e:	f7f3 ffff 	bl	8006a50 <HAL_GetTick>
 8012a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012a54:	e008      	b.n	8012a68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012a56:	f7f3 fffb 	bl	8006a50 <HAL_GetTick>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	1ad3      	subs	r3, r2, r3
 8012a60:	2b02      	cmp	r3, #2
 8012a62:	d901      	bls.n	8012a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012a64:	2303      	movs	r3, #3
 8012a66:	e086      	b.n	8012b76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012a68:	4b45      	ldr	r3, [pc, #276]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1f0      	bne.n	8012a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012a74:	4b42      	ldr	r3, [pc, #264]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	051b      	lsls	r3, r3, #20
 8012a82:	493f      	ldr	r1, [pc, #252]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012a84:	4313      	orrs	r3, r2
 8012a86:	628b      	str	r3, [r1, #40]	; 0x28
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	3b01      	subs	r3, #1
 8012a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	3b01      	subs	r3, #1
 8012a98:	025b      	lsls	r3, r3, #9
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	431a      	orrs	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	3b01      	subs	r3, #1
 8012aa4:	041b      	lsls	r3, r3, #16
 8012aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012aaa:	431a      	orrs	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	691b      	ldr	r3, [r3, #16]
 8012ab0:	3b01      	subs	r3, #1
 8012ab2:	061b      	lsls	r3, r3, #24
 8012ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012ab8:	4931      	ldr	r1, [pc, #196]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012aba:	4313      	orrs	r3, r2
 8012abc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012abe:	4b30      	ldr	r3, [pc, #192]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	695b      	ldr	r3, [r3, #20]
 8012aca:	492d      	ldr	r1, [pc, #180]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012acc:	4313      	orrs	r3, r2
 8012ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012ad0:	4b2b      	ldr	r3, [pc, #172]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	699b      	ldr	r3, [r3, #24]
 8012adc:	4928      	ldr	r1, [pc, #160]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012ae2:	4b27      	ldr	r3, [pc, #156]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae6:	4a26      	ldr	r2, [pc, #152]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012aee:	4b24      	ldr	r3, [pc, #144]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012af2:	4b24      	ldr	r3, [pc, #144]	; (8012b84 <RCCEx_PLL3_Config+0x160>)
 8012af4:	4013      	ands	r3, r2
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	69d2      	ldr	r2, [r2, #28]
 8012afa:	00d2      	lsls	r2, r2, #3
 8012afc:	4920      	ldr	r1, [pc, #128]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012afe:	4313      	orrs	r3, r2
 8012b00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012b02:	4b1f      	ldr	r3, [pc, #124]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b06:	4a1e      	ldr	r2, [pc, #120]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d106      	bne.n	8012b22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012b14:	4b1a      	ldr	r3, [pc, #104]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b18:	4a19      	ldr	r2, [pc, #100]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012b20:	e00f      	b.n	8012b42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d106      	bne.n	8012b36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012b28:	4b15      	ldr	r3, [pc, #84]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2c:	4a14      	ldr	r2, [pc, #80]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012b34:	e005      	b.n	8012b42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012b36:	4b12      	ldr	r3, [pc, #72]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b3a:	4a11      	ldr	r2, [pc, #68]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012b42:	4b0f      	ldr	r3, [pc, #60]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4a0e      	ldr	r2, [pc, #56]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b4e:	f7f3 ff7f 	bl	8006a50 <HAL_GetTick>
 8012b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012b54:	e008      	b.n	8012b68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012b56:	f7f3 ff7b 	bl	8006a50 <HAL_GetTick>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	1ad3      	subs	r3, r2, r3
 8012b60:	2b02      	cmp	r3, #2
 8012b62:	d901      	bls.n	8012b68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012b64:	2303      	movs	r3, #3
 8012b66:	e006      	b.n	8012b76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012b68:	4b05      	ldr	r3, [pc, #20]	; (8012b80 <RCCEx_PLL3_Config+0x15c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d0f0      	beq.n	8012b56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	58024400 	.word	0x58024400
 8012b84:	ffff0007 	.word	0xffff0007

08012b88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012b90:	2301      	movs	r3, #1
 8012b92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d071      	beq.n	8012c7e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d106      	bne.n	8012bb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7f1 fdee 	bl	8004790 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	f003 0310 	and.w	r3, r3, #16
 8012bc6:	2b10      	cmp	r3, #16
 8012bc8:	d050      	beq.n	8012c6c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	22ca      	movs	r2, #202	; 0xca
 8012bd0:	625a      	str	r2, [r3, #36]	; 0x24
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	2253      	movs	r2, #83	; 0x53
 8012bd8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f000 fa4a 	bl	8013074 <RTC_EnterInitMode>
 8012be0:	4603      	mov	r3, r0
 8012be2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8012be4:	7bfb      	ldrb	r3, [r7, #15]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d124      	bne.n	8012c34 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	6899      	ldr	r1, [r3, #8]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	4b24      	ldr	r3, [pc, #144]	; (8012c88 <HAL_RTC_Init+0x100>)
 8012bf6:	400b      	ands	r3, r1
 8012bf8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	6899      	ldr	r1, [r3, #8]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	685a      	ldr	r2, [r3, #4]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	691b      	ldr	r3, [r3, #16]
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	699b      	ldr	r3, [r3, #24]
 8012c0e:	431a      	orrs	r2, r3
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	430a      	orrs	r2, r1
 8012c16:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	0419      	lsls	r1, r3, #16
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	68da      	ldr	r2, [r3, #12]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	430a      	orrs	r2, r1
 8012c28:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 fa56 	bl	80130dc <RTC_ExitInitMode>
 8012c30:	4603      	mov	r3, r0
 8012c32:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8012c34:	7bfb      	ldrb	r3, [r7, #15]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d113      	bne.n	8012c62 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f022 0203 	bic.w	r2, r2, #3
 8012c48:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	69da      	ldr	r2, [r3, #28]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	431a      	orrs	r2, r3
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	430a      	orrs	r2, r1
 8012c60:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	22ff      	movs	r2, #255	; 0xff
 8012c68:	625a      	str	r2, [r3, #36]	; 0x24
 8012c6a:	e001      	b.n	8012c70 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8012c70:	7bfb      	ldrb	r3, [r7, #15]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d103      	bne.n	8012c7e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	ff8fffbf 	.word	0xff8fffbf

08012c8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012c8c:	b590      	push	{r4, r7, lr}
 8012c8e:	b087      	sub	sp, #28
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d101      	bne.n	8012ca6 <HAL_RTC_SetTime+0x1a>
 8012ca2:	2302      	movs	r3, #2
 8012ca4:	e089      	b.n	8012dba <HAL_RTC_SetTime+0x12e>
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2201      	movs	r2, #1
 8012caa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	22ca      	movs	r2, #202	; 0xca
 8012cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2253      	movs	r2, #83	; 0x53
 8012cc4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f000 f9d4 	bl	8013074 <RTC_EnterInitMode>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012cd0:	7cfb      	ldrb	r3, [r7, #19]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d161      	bne.n	8012d9a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d126      	bne.n	8012d2a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	689b      	ldr	r3, [r3, #8]
 8012ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d102      	bne.n	8012cf0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	2200      	movs	r2, #0
 8012cee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f000 fa2f 	bl	8013158 <RTC_ByteToBcd2>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	785b      	ldrb	r3, [r3, #1]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fa28 	bl	8013158 <RTC_ByteToBcd2>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d0c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	789b      	ldrb	r3, [r3, #2]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f000 fa20 	bl	8013158 <RTC_ByteToBcd2>
 8012d18:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012d1a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	78db      	ldrb	r3, [r3, #3]
 8012d22:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d24:	4313      	orrs	r3, r2
 8012d26:	617b      	str	r3, [r7, #20]
 8012d28:	e018      	b.n	8012d5c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	689b      	ldr	r3, [r3, #8]
 8012d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d102      	bne.n	8012d3e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	785b      	ldrb	r3, [r3, #1]
 8012d48:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d4a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012d4c:	68ba      	ldr	r2, [r7, #8]
 8012d4e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012d50:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	78db      	ldrb	r3, [r3, #3]
 8012d56:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d58:	4313      	orrs	r3, r2
 8012d5a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	6979      	ldr	r1, [r7, #20]
 8012d62:	4b18      	ldr	r3, [pc, #96]	; (8012dc4 <HAL_RTC_SetTime+0x138>)
 8012d64:	400b      	ands	r3, r1
 8012d66:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	689a      	ldr	r2, [r3, #8]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012d76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	6899      	ldr	r1, [r3, #8]
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	68da      	ldr	r2, [r3, #12]
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	431a      	orrs	r2, r3
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	430a      	orrs	r2, r1
 8012d8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012d90:	68f8      	ldr	r0, [r7, #12]
 8012d92:	f000 f9a3 	bl	80130dc <RTC_ExitInitMode>
 8012d96:	4603      	mov	r3, r0
 8012d98:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	22ff      	movs	r2, #255	; 0xff
 8012da0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012da2:	7cfb      	ldrb	r3, [r7, #19]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d103      	bne.n	8012db0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2201      	movs	r2, #1
 8012dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2200      	movs	r2, #0
 8012db4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012db8:	7cfb      	ldrb	r3, [r7, #19]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	371c      	adds	r7, #28
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd90      	pop	{r4, r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	007f7f7f 	.word	0x007f7f7f

08012dc8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b086      	sub	sp, #24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	60f8      	str	r0, [r7, #12]
 8012dd0:	60b9      	str	r1, [r7, #8]
 8012dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	691b      	ldr	r3, [r3, #16]
 8012de4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	4b22      	ldr	r3, [pc, #136]	; (8012e7c <HAL_RTC_GetTime+0xb4>)
 8012df4:	4013      	ands	r3, r2
 8012df6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	0c1b      	lsrs	r3, r3, #16
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	0a1b      	lsrs	r3, r3, #8
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e12:	b2da      	uxtb	r2, r3
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	0d9b      	lsrs	r3, r3, #22
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	f003 0301 	and.w	r3, r3, #1
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d11a      	bne.n	8012e72 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f000 f9a9 	bl	8013198 <RTC_Bcd2ToByte>
 8012e46:	4603      	mov	r3, r0
 8012e48:	461a      	mov	r2, r3
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	785b      	ldrb	r3, [r3, #1]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f000 f9a0 	bl	8013198 <RTC_Bcd2ToByte>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	789b      	ldrb	r3, [r3, #2]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f000 f997 	bl	8013198 <RTC_Bcd2ToByte>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012e72:	2300      	movs	r3, #0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3718      	adds	r7, #24
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	007f7f7f 	.word	0x007f7f7f

08012e80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012e80:	b590      	push	{r4, r7, lr}
 8012e82:	b087      	sub	sp, #28
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	60f8      	str	r0, [r7, #12]
 8012e88:	60b9      	str	r1, [r7, #8]
 8012e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d101      	bne.n	8012e9a <HAL_RTC_SetDate+0x1a>
 8012e96:	2302      	movs	r3, #2
 8012e98:	e073      	b.n	8012f82 <HAL_RTC_SetDate+0x102>
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2201      	movs	r2, #1
 8012e9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10e      	bne.n	8012ece <HAL_RTC_SetDate+0x4e>
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	785b      	ldrb	r3, [r3, #1]
 8012eb4:	f003 0310 	and.w	r3, r3, #16
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d008      	beq.n	8012ece <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	785b      	ldrb	r3, [r3, #1]
 8012ec0:	f023 0310 	bic.w	r3, r3, #16
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	330a      	adds	r3, #10
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d11c      	bne.n	8012f0e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	78db      	ldrb	r3, [r3, #3]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f000 f93d 	bl	8013158 <RTC_ByteToBcd2>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	785b      	ldrb	r3, [r3, #1]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f000 f936 	bl	8013158 <RTC_ByteToBcd2>
 8012eec:	4603      	mov	r3, r0
 8012eee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012ef0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	789b      	ldrb	r3, [r3, #2]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f000 f92e 	bl	8013158 <RTC_ByteToBcd2>
 8012efc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012efe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	617b      	str	r3, [r7, #20]
 8012f0c:	e00e      	b.n	8012f2c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	78db      	ldrb	r3, [r3, #3]
 8012f12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	785b      	ldrb	r3, [r3, #1]
 8012f18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012f1a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012f20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	22ca      	movs	r2, #202	; 0xca
 8012f32:	625a      	str	r2, [r3, #36]	; 0x24
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2253      	movs	r2, #83	; 0x53
 8012f3a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f000 f899 	bl	8013074 <RTC_EnterInitMode>
 8012f42:	4603      	mov	r3, r0
 8012f44:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012f46:	7cfb      	ldrb	r3, [r7, #19]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d10a      	bne.n	8012f62 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	6979      	ldr	r1, [r7, #20]
 8012f52:	4b0e      	ldr	r3, [pc, #56]	; (8012f8c <HAL_RTC_SetDate+0x10c>)
 8012f54:	400b      	ands	r3, r1
 8012f56:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012f58:	68f8      	ldr	r0, [r7, #12]
 8012f5a:	f000 f8bf 	bl	80130dc <RTC_ExitInitMode>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	22ff      	movs	r2, #255	; 0xff
 8012f68:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012f6a:	7cfb      	ldrb	r3, [r7, #19]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d103      	bne.n	8012f78 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2201      	movs	r2, #1
 8012f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012f80:	7cfb      	ldrb	r3, [r7, #19]


}
 8012f82:	4618      	mov	r0, r3
 8012f84:	371c      	adds	r7, #28
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd90      	pop	{r4, r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	00ffff3f 	.word	0x00ffff3f

08012f90 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	60b9      	str	r1, [r7, #8]
 8012f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	685a      	ldr	r2, [r3, #4]
 8012fa2:	4b21      	ldr	r3, [pc, #132]	; (8013028 <HAL_RTC_GetDate+0x98>)
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	0c1b      	lsrs	r3, r3, #16
 8012fac:	b2da      	uxtb	r2, r3
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	0a1b      	lsrs	r3, r3, #8
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	f003 031f 	and.w	r3, r3, #31
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fca:	b2da      	uxtb	r2, r3
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	0b5b      	lsrs	r3, r3, #13
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	f003 0307 	and.w	r3, r3, #7
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d11a      	bne.n	801301c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	78db      	ldrb	r3, [r3, #3]
 8012fea:	4618      	mov	r0, r3
 8012fec:	f000 f8d4 	bl	8013198 <RTC_Bcd2ToByte>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	785b      	ldrb	r3, [r3, #1]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f000 f8cb 	bl	8013198 <RTC_Bcd2ToByte>
 8013002:	4603      	mov	r3, r0
 8013004:	461a      	mov	r2, r3
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	789b      	ldrb	r3, [r3, #2]
 801300e:	4618      	mov	r0, r3
 8013010:	f000 f8c2 	bl	8013198 <RTC_Bcd2ToByte>
 8013014:	4603      	mov	r3, r0
 8013016:	461a      	mov	r2, r3
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801301c:	2300      	movs	r3, #0
}
 801301e:	4618      	mov	r0, r3
 8013020:	3718      	adds	r7, #24
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	00ffff3f 	.word	0x00ffff3f

0801302c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4a0d      	ldr	r2, [pc, #52]	; (8013070 <HAL_RTC_WaitForSynchro+0x44>)
 801303a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 801303c:	f7f3 fd08 	bl	8006a50 <HAL_GetTick>
 8013040:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013042:	e009      	b.n	8013058 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013044:	f7f3 fd04 	bl	8006a50 <HAL_GetTick>
 8013048:	4602      	mov	r2, r0
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	1ad3      	subs	r3, r2, r3
 801304e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013052:	d901      	bls.n	8013058 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8013054:	2303      	movs	r3, #3
 8013056:	e007      	b.n	8013068 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	f003 0320 	and.w	r3, r3, #32
 8013062:	2b00      	cmp	r3, #0
 8013064:	d0ee      	beq.n	8013044 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3710      	adds	r7, #16
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	0003ff5f 	.word	0x0003ff5f

08013074 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801307c:	2300      	movs	r3, #0
 801307e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801308a:	2b00      	cmp	r3, #0
 801308c:	d120      	bne.n	80130d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013096:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8013098:	f7f3 fcda 	bl	8006a50 <HAL_GetTick>
 801309c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801309e:	e00d      	b.n	80130bc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80130a0:	f7f3 fcd6 	bl	8006a50 <HAL_GetTick>
 80130a4:	4602      	mov	r2, r0
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80130ae:	d905      	bls.n	80130bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80130b0:	2303      	movs	r3, #3
 80130b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2203      	movs	r2, #3
 80130b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	68db      	ldr	r3, [r3, #12]
 80130c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d102      	bne.n	80130d0 <RTC_EnterInitMode+0x5c>
 80130ca:	7bfb      	ldrb	r3, [r7, #15]
 80130cc:	2b03      	cmp	r3, #3
 80130ce:	d1e7      	bne.n	80130a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80130d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
	...

080130dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80130e4:	2300      	movs	r3, #0
 80130e6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80130e8:	4b1a      	ldr	r3, [pc, #104]	; (8013154 <RTC_ExitInitMode+0x78>)
 80130ea:	68db      	ldr	r3, [r3, #12]
 80130ec:	4a19      	ldr	r2, [pc, #100]	; (8013154 <RTC_ExitInitMode+0x78>)
 80130ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130f2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80130f4:	4b17      	ldr	r3, [pc, #92]	; (8013154 <RTC_ExitInitMode+0x78>)
 80130f6:	689b      	ldr	r3, [r3, #8]
 80130f8:	f003 0320 	and.w	r3, r3, #32
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d10c      	bne.n	801311a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7ff ff93 	bl	801302c <HAL_RTC_WaitForSynchro>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d01e      	beq.n	801314a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2203      	movs	r2, #3
 8013110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8013114:	2303      	movs	r3, #3
 8013116:	73fb      	strb	r3, [r7, #15]
 8013118:	e017      	b.n	801314a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801311a:	4b0e      	ldr	r3, [pc, #56]	; (8013154 <RTC_ExitInitMode+0x78>)
 801311c:	689b      	ldr	r3, [r3, #8]
 801311e:	4a0d      	ldr	r2, [pc, #52]	; (8013154 <RTC_ExitInitMode+0x78>)
 8013120:	f023 0320 	bic.w	r3, r3, #32
 8013124:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7ff ff80 	bl	801302c <HAL_RTC_WaitForSynchro>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d005      	beq.n	801313e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2203      	movs	r2, #3
 8013136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801313a:	2303      	movs	r3, #3
 801313c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801313e:	4b05      	ldr	r3, [pc, #20]	; (8013154 <RTC_ExitInitMode+0x78>)
 8013140:	689b      	ldr	r3, [r3, #8]
 8013142:	4a04      	ldr	r2, [pc, #16]	; (8013154 <RTC_ExitInitMode+0x78>)
 8013144:	f043 0320 	orr.w	r3, r3, #32
 8013148:	6093      	str	r3, [r2, #8]
  }

  return status;
 801314a:	7bfb      	ldrb	r3, [r7, #15]
}
 801314c:	4618      	mov	r0, r3
 801314e:	3710      	adds	r7, #16
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	58004000 	.word	0x58004000

08013158 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8013158:	b480      	push	{r7}
 801315a:	b085      	sub	sp, #20
 801315c:	af00      	add	r7, sp, #0
 801315e:	4603      	mov	r3, r0
 8013160:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8013162:	2300      	movs	r3, #0
 8013164:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8013166:	79fb      	ldrb	r3, [r7, #7]
 8013168:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 801316a:	e005      	b.n	8013178 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	3301      	adds	r3, #1
 8013170:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8013172:	7afb      	ldrb	r3, [r7, #11]
 8013174:	3b0a      	subs	r3, #10
 8013176:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8013178:	7afb      	ldrb	r3, [r7, #11]
 801317a:	2b09      	cmp	r3, #9
 801317c:	d8f6      	bhi.n	801316c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	b2db      	uxtb	r3, r3
 8013182:	011b      	lsls	r3, r3, #4
 8013184:	b2da      	uxtb	r2, r3
 8013186:	7afb      	ldrb	r3, [r7, #11]
 8013188:	4313      	orrs	r3, r2
 801318a:	b2db      	uxtb	r3, r3
}
 801318c:	4618      	mov	r0, r3
 801318e:	3714      	adds	r7, #20
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr

08013198 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	4603      	mov	r3, r0
 80131a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80131a2:	79fb      	ldrb	r3, [r7, #7]
 80131a4:	091b      	lsrs	r3, r3, #4
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	461a      	mov	r2, r3
 80131aa:	0092      	lsls	r2, r2, #2
 80131ac:	4413      	add	r3, r2
 80131ae:	005b      	lsls	r3, r3, #1
 80131b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80131b2:	79fb      	ldrb	r3, [r7, #7]
 80131b4:	f003 030f 	and.w	r3, r3, #15
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	7bfb      	ldrb	r3, [r7, #15]
 80131bc:	4413      	add	r3, r2
 80131be:	b2db      	uxtb	r3, r3
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3714      	adds	r7, #20
 80131c4:	46bd      	mov	sp, r7
 80131c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ca:	4770      	bx	lr

080131cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d101      	bne.n	80131de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80131da:	2301      	movs	r3, #1
 80131dc:	e10f      	b.n	80133fe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2200      	movs	r2, #0
 80131e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4a87      	ldr	r2, [pc, #540]	; (8013408 <HAL_SPI_Init+0x23c>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d00f      	beq.n	801320e <HAL_SPI_Init+0x42>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	4a86      	ldr	r2, [pc, #536]	; (801340c <HAL_SPI_Init+0x240>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d00a      	beq.n	801320e <HAL_SPI_Init+0x42>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a84      	ldr	r2, [pc, #528]	; (8013410 <HAL_SPI_Init+0x244>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d005      	beq.n	801320e <HAL_SPI_Init+0x42>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	2b0f      	cmp	r3, #15
 8013208:	d901      	bls.n	801320e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801320a:	2301      	movs	r3, #1
 801320c:	e0f7      	b.n	80133fe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f000 fd60 	bl	8013cd4 <SPI_GetPacketSize>
 8013214:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4a7b      	ldr	r2, [pc, #492]	; (8013408 <HAL_SPI_Init+0x23c>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d00c      	beq.n	801323a <HAL_SPI_Init+0x6e>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	4a79      	ldr	r2, [pc, #484]	; (801340c <HAL_SPI_Init+0x240>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d007      	beq.n	801323a <HAL_SPI_Init+0x6e>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a78      	ldr	r2, [pc, #480]	; (8013410 <HAL_SPI_Init+0x244>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d002      	beq.n	801323a <HAL_SPI_Init+0x6e>
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b08      	cmp	r3, #8
 8013238:	d811      	bhi.n	801325e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801323e:	4a72      	ldr	r2, [pc, #456]	; (8013408 <HAL_SPI_Init+0x23c>)
 8013240:	4293      	cmp	r3, r2
 8013242:	d009      	beq.n	8013258 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	4a70      	ldr	r2, [pc, #448]	; (801340c <HAL_SPI_Init+0x240>)
 801324a:	4293      	cmp	r3, r2
 801324c:	d004      	beq.n	8013258 <HAL_SPI_Init+0x8c>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	4a6f      	ldr	r2, [pc, #444]	; (8013410 <HAL_SPI_Init+0x244>)
 8013254:	4293      	cmp	r3, r2
 8013256:	d104      	bne.n	8013262 <HAL_SPI_Init+0x96>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2b10      	cmp	r3, #16
 801325c:	d901      	bls.n	8013262 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801325e:	2301      	movs	r3, #1
 8013260:	e0cd      	b.n	80133fe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013268:	b2db      	uxtb	r3, r3
 801326a:	2b00      	cmp	r3, #0
 801326c:	d106      	bne.n	801327c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2200      	movs	r2, #0
 8013272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f7f1 fd00 	bl	8004c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2202      	movs	r2, #2
 8013280:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	681a      	ldr	r2, [r3, #0]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f022 0201 	bic.w	r2, r2, #1
 8013292:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	689b      	ldr	r3, [r3, #8]
 801329a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801329e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	699b      	ldr	r3, [r3, #24]
 80132a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80132a8:	d119      	bne.n	80132de <HAL_SPI_Init+0x112>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80132b2:	d103      	bne.n	80132bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d008      	beq.n	80132ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d10c      	bne.n	80132de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80132c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80132cc:	d107      	bne.n	80132de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80132dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00f      	beq.n	801330a <HAL_SPI_Init+0x13e>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	2b06      	cmp	r3, #6
 80132f0:	d90b      	bls.n	801330a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	430a      	orrs	r2, r1
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	e007      	b.n	801331a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013318:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	69da      	ldr	r2, [r3, #28]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013322:	431a      	orrs	r2, r3
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	431a      	orrs	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801332c:	ea42 0103 	orr.w	r1, r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	68da      	ldr	r2, [r3, #12]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	430a      	orrs	r2, r1
 801333a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013344:	431a      	orrs	r2, r3
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801334a:	431a      	orrs	r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	699b      	ldr	r3, [r3, #24]
 8013350:	431a      	orrs	r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	691b      	ldr	r3, [r3, #16]
 8013356:	431a      	orrs	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	695b      	ldr	r3, [r3, #20]
 801335c:	431a      	orrs	r2, r3
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6a1b      	ldr	r3, [r3, #32]
 8013362:	431a      	orrs	r2, r3
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	431a      	orrs	r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801336e:	431a      	orrs	r2, r3
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	689b      	ldr	r3, [r3, #8]
 8013374:	431a      	orrs	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801337a:	ea42 0103 	orr.w	r1, r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	430a      	orrs	r2, r1
 8013388:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d113      	bne.n	80133ba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	689b      	ldr	r3, [r3, #8]
 8013398:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80133a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	689b      	ldr	r3, [r3, #8]
 80133ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80133b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	f022 0201 	bic.w	r2, r2, #1
 80133c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00a      	beq.n	80133ec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	430a      	orrs	r2, r1
 80133ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2201      	movs	r2, #1
 80133f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3710      	adds	r7, #16
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	40013000 	.word	0x40013000
 801340c:	40003800 	.word	0x40003800
 8013410:	40003c00 	.word	0x40003c00

08013414 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	4613      	mov	r3, r2
 8013420:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013428:	b2db      	uxtb	r3, r3
 801342a:	2b01      	cmp	r3, #1
 801342c:	d005      	beq.n	801343a <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8013436:	2302      	movs	r3, #2
 8013438:	e127      	b.n	801368a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d002      	beq.n	8013446 <HAL_SPI_Receive_DMA+0x32>
 8013440:	88fb      	ldrh	r3, [r7, #6]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d105      	bne.n	8013452 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2200      	movs	r2, #0
 801344a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801344e:	2301      	movs	r3, #1
 8013450:	e11b      	b.n	801368a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013458:	2b01      	cmp	r3, #1
 801345a:	d101      	bne.n	8013460 <HAL_SPI_Receive_DMA+0x4c>
 801345c:	2302      	movs	r3, #2
 801345e:	e114      	b.n	801368a <HAL_SPI_Receive_DMA+0x276>
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2201      	movs	r2, #1
 8013464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2204      	movs	r2, #4
 801346c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2200      	movs	r2, #0
 8013474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	68ba      	ldr	r2, [r7, #8]
 801347c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	88fa      	ldrh	r2, [r7, #6]
 8013482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	88fa      	ldrh	r2, [r7, #6]
 801348a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2200      	movs	r2, #0
 8013492:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2200      	movs	r2, #0
 801349e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2200      	movs	r2, #0
 80134a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80134b2:	d108      	bne.n	80134c6 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80134c2:	601a      	str	r2, [r3, #0]
 80134c4:	e009      	b.n	80134da <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80134d8:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	68db      	ldr	r3, [r3, #12]
 80134de:	2b0f      	cmp	r3, #15
 80134e0:	d905      	bls.n	80134ee <HAL_SPI_Receive_DMA+0xda>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134e6:	699b      	ldr	r3, [r3, #24]
 80134e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80134ec:	d10f      	bne.n	801350e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80134f2:	2b07      	cmp	r3, #7
 80134f4:	d911      	bls.n	801351a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134fa:	699b      	ldr	r3, [r3, #24]
 80134fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013500:	d00b      	beq.n	801351a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013506:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801350c:	d005      	beq.n	801351a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2200      	movs	r2, #0
 8013512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8013516:	2301      	movs	r3, #1
 8013518:	e0b7      	b.n	801368a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	689a      	ldr	r2, [r3, #8]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013528:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	68db      	ldr	r3, [r3, #12]
 801352e:	2b07      	cmp	r3, #7
 8013530:	d820      	bhi.n	8013574 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801353c:	d109      	bne.n	8013552 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013544:	b29b      	uxth	r3, r3
 8013546:	3301      	adds	r3, #1
 8013548:	105b      	asrs	r3, r3, #1
 801354a:	b29a      	uxth	r2, r3
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013556:	699b      	ldr	r3, [r3, #24]
 8013558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801355c:	d11e      	bne.n	801359c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013564:	b29b      	uxth	r3, r3
 8013566:	3303      	adds	r3, #3
 8013568:	109b      	asrs	r3, r3, #2
 801356a:	b29a      	uxth	r2, r3
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013572:	e013      	b.n	801359c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	2b0f      	cmp	r3, #15
 801357a:	d80f      	bhi.n	801359c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013580:	699b      	ldr	r3, [r3, #24]
 8013582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013586:	d109      	bne.n	801359c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801358e:	b29b      	uxth	r3, r3
 8013590:	3301      	adds	r3, #1
 8013592:	105b      	asrs	r3, r3, #1
 8013594:	b29a      	uxth	r2, r3
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135a0:	4a3c      	ldr	r2, [pc, #240]	; (8013694 <HAL_SPI_Receive_DMA+0x280>)
 80135a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135a8:	4a3b      	ldr	r2, [pc, #236]	; (8013698 <HAL_SPI_Receive_DMA+0x284>)
 80135aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135b0:	4a3a      	ldr	r2, [pc, #232]	; (801369c <HAL_SPI_Receive_DMA+0x288>)
 80135b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135b8:	2200      	movs	r2, #0
 80135ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	3330      	adds	r3, #48	; 0x30
 80135c6:	4619      	mov	r1, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80135d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80135d6:	f7f5 febf 	bl	8009358 <HAL_DMA_Start_IT>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d011      	beq.n	8013604 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80135e6:	f043 0210 	orr.w	r2, r3, #16
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2201      	movs	r2, #1
 80135f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2200      	movs	r2, #0
 80135fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8013600:	2301      	movs	r3, #1
 8013602:	e042      	b.n	801368a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013608:	69db      	ldr	r3, [r3, #28]
 801360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801360e:	d108      	bne.n	8013622 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	6859      	ldr	r1, [r3, #4]
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	681a      	ldr	r2, [r3, #0]
 801361a:	4b21      	ldr	r3, [pc, #132]	; (80136a0 <HAL_SPI_Receive_DMA+0x28c>)
 801361c:	400b      	ands	r3, r1
 801361e:	6053      	str	r3, [r2, #4]
 8013620:	e009      	b.n	8013636 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	685a      	ldr	r2, [r3, #4]
 8013628:	4b1d      	ldr	r3, [pc, #116]	; (80136a0 <HAL_SPI_Receive_DMA+0x28c>)
 801362a:	4013      	ands	r3, r2
 801362c:	88f9      	ldrh	r1, [r7, #6]
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	6812      	ldr	r2, [r2, #0]
 8013632:	430b      	orrs	r3, r1
 8013634:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	689a      	ldr	r2, [r3, #8]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013644:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	691a      	ldr	r2, [r3, #16]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8013654:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	681a      	ldr	r2, [r3, #0]
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f042 0201 	orr.w	r2, r2, #1
 8013664:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801366e:	d107      	bne.n	8013680 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801367e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2200      	movs	r2, #0
 8013684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013688:	2300      	movs	r3, #0
}
 801368a:	4618      	mov	r0, r3
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	08013aff 	.word	0x08013aff
 8013698:	08013ab9 	.word	0x08013ab9
 801369c:	08013b1b 	.word	0x08013b1b
 80136a0:	ffff0000 	.word	0xffff0000

080136a4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b08a      	sub	sp, #40	; 0x28
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	691b      	ldr	r3, [r3, #16]
 80136b2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	695b      	ldr	r3, [r3, #20]
 80136ba:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80136bc:	6a3a      	ldr	r2, [r7, #32]
 80136be:	69fb      	ldr	r3, [r7, #28]
 80136c0:	4013      	ands	r3, r2
 80136c2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80136cc:	2300      	movs	r3, #0
 80136ce:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80136d6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	3330      	adds	r3, #48	; 0x30
 80136de:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d010      	beq.n	801370c <HAL_SPI_IRQHandler+0x68>
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	f003 0308 	and.w	r3, r3, #8
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00b      	beq.n	801370c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	699a      	ldr	r2, [r3, #24]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013702:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f000 f9cd 	bl	8013aa4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801370a:	e192      	b.n	8013a32 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013712:	2b00      	cmp	r3, #0
 8013714:	d113      	bne.n	801373e <HAL_SPI_IRQHandler+0x9a>
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	f003 0320 	and.w	r3, r3, #32
 801371c:	2b00      	cmp	r3, #0
 801371e:	d10e      	bne.n	801373e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8013726:	2b00      	cmp	r3, #0
 8013728:	d009      	beq.n	801373e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	4798      	blx	r3
    hspi->RxISR(hspi);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	4798      	blx	r3
    handled = 1UL;
 801373a:	2301      	movs	r3, #1
 801373c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10f      	bne.n	8013768 <HAL_SPI_IRQHandler+0xc4>
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	f003 0301 	and.w	r3, r3, #1
 801374e:	2b00      	cmp	r3, #0
 8013750:	d00a      	beq.n	8013768 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8013758:	2b00      	cmp	r3, #0
 801375a:	d105      	bne.n	8013768 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	4798      	blx	r3
    handled = 1UL;
 8013764:	2301      	movs	r3, #1
 8013766:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	f003 0320 	and.w	r3, r3, #32
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10f      	bne.n	8013792 <HAL_SPI_IRQHandler+0xee>
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	f003 0302 	and.w	r3, r3, #2
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00a      	beq.n	8013792 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013782:	2b00      	cmp	r3, #0
 8013784:	d105      	bne.n	8013792 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	4798      	blx	r3
    handled = 1UL;
 801378e:	2301      	movs	r3, #1
 8013790:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8013792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013794:	2b00      	cmp	r3, #0
 8013796:	f040 8147 	bne.w	8013a28 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	f003 0308 	and.w	r3, r3, #8
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 808b 	beq.w	80138bc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	699a      	ldr	r2, [r3, #24]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f042 0208 	orr.w	r2, r2, #8
 80137b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	699a      	ldr	r2, [r3, #24]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	f042 0210 	orr.w	r2, r2, #16
 80137c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	699a      	ldr	r2, [r3, #24]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80137d4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	691a      	ldr	r2, [r3, #16]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f022 0208 	bic.w	r2, r2, #8
 80137e4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	689b      	ldr	r3, [r3, #8]
 80137ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d13d      	bne.n	8013870 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80137f4:	e036      	b.n	8013864 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	2b0f      	cmp	r3, #15
 80137fc:	d90b      	bls.n	8013816 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013806:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013808:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801380e:	1d1a      	adds	r2, r3, #4
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	665a      	str	r2, [r3, #100]	; 0x64
 8013814:	e01d      	b.n	8013852 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	2b07      	cmp	r3, #7
 801381c:	d90b      	bls.n	8013836 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013822:	68fa      	ldr	r2, [r7, #12]
 8013824:	8812      	ldrh	r2, [r2, #0]
 8013826:	b292      	uxth	r2, r2
 8013828:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801382e:	1c9a      	adds	r2, r3, #2
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	665a      	str	r2, [r3, #100]	; 0x64
 8013834:	e00d      	b.n	8013852 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013842:	7812      	ldrb	r2, [r2, #0]
 8013844:	b2d2      	uxtb	r2, r2
 8013846:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801384c:	1c5a      	adds	r2, r3, #1
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013858:	b29b      	uxth	r3, r3
 801385a:	3b01      	subs	r3, #1
 801385c:	b29a      	uxth	r2, r3
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801386a:	b29b      	uxth	r3, r3
 801386c:	2b00      	cmp	r3, #0
 801386e:	d1c2      	bne.n	80137f6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 f98f 	bl	8013b94 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2201      	movs	r2, #1
 801387a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013884:	2b00      	cmp	r3, #0
 8013886:	d003      	beq.n	8013890 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f000 f901 	bl	8013a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801388e:	e0d0      	b.n	8013a32 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8013890:	7cfb      	ldrb	r3, [r7, #19]
 8013892:	2b05      	cmp	r3, #5
 8013894:	d103      	bne.n	801389e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 f8e6 	bl	8013a68 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801389c:	e0c6      	b.n	8013a2c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801389e:	7cfb      	ldrb	r3, [r7, #19]
 80138a0:	2b04      	cmp	r3, #4
 80138a2:	d103      	bne.n	80138ac <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f000 f8d5 	bl	8013a54 <HAL_SPI_RxCpltCallback>
    return;
 80138aa:	e0bf      	b.n	8013a2c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80138ac:	7cfb      	ldrb	r3, [r7, #19]
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	f040 80bc 	bne.w	8013a2c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 f8c3 	bl	8013a40 <HAL_SPI_TxCpltCallback>
    return;
 80138ba:	e0b7      	b.n	8013a2c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	f000 80b5 	beq.w	8013a32 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d00f      	beq.n	80138f2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138d8:	f043 0204 	orr.w	r2, r3, #4
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	699a      	ldr	r2, [r3, #24]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138f0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00f      	beq.n	801391c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013902:	f043 0201 	orr.w	r2, r3, #1
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	699a      	ldr	r2, [r3, #24]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801391a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00f      	beq.n	8013946 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801392c:	f043 0208 	orr.w	r2, r3, #8
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	699a      	ldr	r2, [r3, #24]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013944:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	f003 0320 	and.w	r3, r3, #32
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00f      	beq.n	8013970 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013956:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	699a      	ldr	r2, [r3, #24]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f042 0220 	orr.w	r2, r2, #32
 801396e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013976:	2b00      	cmp	r3, #0
 8013978:	d05a      	beq.n	8013a30 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	f022 0201 	bic.w	r2, r2, #1
 8013988:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	6919      	ldr	r1, [r3, #16]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	4b28      	ldr	r3, [pc, #160]	; (8013a38 <HAL_SPI_IRQHandler+0x394>)
 8013996:	400b      	ands	r3, r1
 8013998:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80139a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80139a4:	d138      	bne.n	8013a18 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	689a      	ldr	r2, [r3, #8]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80139b4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d013      	beq.n	80139e6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139c2:	4a1e      	ldr	r2, [pc, #120]	; (8013a3c <HAL_SPI_IRQHandler+0x398>)
 80139c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7f6 fa4c 	bl	8009e68 <HAL_DMA_Abort_IT>
 80139d0:	4603      	mov	r3, r0
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d007      	beq.n	80139e6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d020      	beq.n	8013a30 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139f2:	4a12      	ldr	r2, [pc, #72]	; (8013a3c <HAL_SPI_IRQHandler+0x398>)
 80139f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f6 fa34 	bl	8009e68 <HAL_DMA_Abort_IT>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d014      	beq.n	8013a30 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013a16:	e00b      	b.n	8013a30 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 f835 	bl	8013a90 <HAL_SPI_ErrorCallback>
    return;
 8013a26:	e003      	b.n	8013a30 <HAL_SPI_IRQHandler+0x38c>
    return;
 8013a28:	bf00      	nop
 8013a2a:	e002      	b.n	8013a32 <HAL_SPI_IRQHandler+0x38e>
    return;
 8013a2c:	bf00      	nop
 8013a2e:	e000      	b.n	8013a32 <HAL_SPI_IRQHandler+0x38e>
    return;
 8013a30:	bf00      	nop
  }
}
 8013a32:	3728      	adds	r7, #40	; 0x28
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}
 8013a38:	fffffc94 	.word	0xfffffc94
 8013a3c:	08013b61 	.word	0x08013b61

08013a40 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8013a48:	bf00      	nop
 8013a4a:	370c      	adds	r7, #12
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013a5c:	bf00      	nop
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b083      	sub	sp, #12
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8013a70:	bf00      	nop
 8013a72:	370c      	adds	r7, #12
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr

08013a7c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8013a84:	bf00      	nop
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013a98:	bf00      	nop
 8013a9a:	370c      	adds	r7, #12
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr

08013aa4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8013aac:	bf00      	nop
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr

08013ab8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ac4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	2b07      	cmp	r3, #7
 8013ad0:	d011      	beq.n	8013af6 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ad6:	69db      	ldr	r3, [r3, #28]
 8013ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013adc:	d103      	bne.n	8013ae6 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f7ff ffb8 	bl	8013a54 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8013ae4:	e007      	b.n	8013af6 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	691a      	ldr	r2, [r3, #16]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f042 0208 	orr.w	r2, r2, #8
 8013af4:	611a      	str	r2, [r3, #16]
}
 8013af6:	bf00      	nop
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b084      	sub	sp, #16
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b0a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8013b0c:	68f8      	ldr	r0, [r7, #12]
 8013b0e:	f7ff ffb5 	bl	8013a7c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013b12:	bf00      	nop
 8013b14:	3710      	adds	r7, #16
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b084      	sub	sp, #16
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b26:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f7f7 fb1b 	bl	800b164 <HAL_DMA_GetError>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b02      	cmp	r3, #2
 8013b32:	d011      	beq.n	8013b58 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8013b34:	68f8      	ldr	r0, [r7, #12]
 8013b36:	f000 f82d 	bl	8013b94 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b40:	f043 0210 	orr.w	r2, r3, #16
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f7ff ff9c 	bl	8013a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8013b58:	bf00      	nop
 8013b5a:	3710      	adds	r7, #16
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2200      	movs	r2, #0
 8013b72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f7ff ff82 	bl	8013a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013b8c:	bf00      	nop
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	695b      	ldr	r3, [r3, #20]
 8013ba2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	699a      	ldr	r2, [r3, #24]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f042 0208 	orr.w	r2, r2, #8
 8013bb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	699a      	ldr	r2, [r3, #24]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f042 0210 	orr.w	r2, r2, #16
 8013bc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f022 0201 	bic.w	r2, r2, #1
 8013bd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	6919      	ldr	r1, [r3, #16]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	4b3c      	ldr	r3, [pc, #240]	; (8013cd0 <SPI_CloseTransfer+0x13c>)
 8013be0:	400b      	ands	r3, r1
 8013be2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	689a      	ldr	r2, [r3, #8]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013bf2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013bfa:	b2db      	uxtb	r3, r3
 8013bfc:	2b04      	cmp	r3, #4
 8013bfe:	d014      	beq.n	8013c2a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f003 0320 	and.w	r3, r3, #32
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00f      	beq.n	8013c2a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	699a      	ldr	r2, [r3, #24]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f042 0220 	orr.w	r2, r2, #32
 8013c28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	2b03      	cmp	r3, #3
 8013c34:	d014      	beq.n	8013c60 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00f      	beq.n	8013c60 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c46:	f043 0204 	orr.w	r2, r3, #4
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	699a      	ldr	r2, [r3, #24]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d00f      	beq.n	8013c8a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c70:	f043 0201 	orr.w	r2, r3, #1
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	699a      	ldr	r2, [r3, #24]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00f      	beq.n	8013cb4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c9a:	f043 0208 	orr.w	r2, r3, #8
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	699a      	ldr	r2, [r3, #24]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013cb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8013cc4:	bf00      	nop
 8013cc6:	3714      	adds	r7, #20
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr
 8013cd0:	fffffc90 	.word	0xfffffc90

08013cd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b085      	sub	sp, #20
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ce0:	095b      	lsrs	r3, r3, #5
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	3301      	adds	r3, #1
 8013cec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	3307      	adds	r3, #7
 8013cf2:	08db      	lsrs	r3, r3, #3
 8013cf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	68fa      	ldr	r2, [r7, #12]
 8013cfa:	fb02 f303 	mul.w	r3, r2, r3
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3714      	adds	r7, #20
 8013d02:	46bd      	mov	sp, r7
 8013d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d08:	4770      	bx	lr

08013d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b082      	sub	sp, #8
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d101      	bne.n	8013d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	e049      	b.n	8013db0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d106      	bne.n	8013d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f7f1 fd15 	bl	8005760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2202      	movs	r2, #2
 8013d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	3304      	adds	r3, #4
 8013d46:	4619      	mov	r1, r3
 8013d48:	4610      	mov	r0, r2
 8013d4a:	f000 fe7d 	bl	8014a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2201      	movs	r2, #1
 8013d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2201      	movs	r2, #1
 8013d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2201      	movs	r2, #1
 8013d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2201      	movs	r2, #1
 8013d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2201      	movs	r2, #1
 8013d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2201      	movs	r2, #1
 8013d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2201      	movs	r2, #1
 8013d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2201      	movs	r2, #1
 8013d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2201      	movs	r2, #1
 8013da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2201      	movs	r2, #1
 8013daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013dae:	2300      	movs	r3, #0
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b085      	sub	sp, #20
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d001      	beq.n	8013dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013dcc:	2301      	movs	r3, #1
 8013dce:	e054      	b.n	8013e7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2202      	movs	r2, #2
 8013dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	68da      	ldr	r2, [r3, #12]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f042 0201 	orr.w	r2, r2, #1
 8013de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a26      	ldr	r2, [pc, #152]	; (8013e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d022      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013dfa:	d01d      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	4a22      	ldr	r2, [pc, #136]	; (8013e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d018      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	4a21      	ldr	r2, [pc, #132]	; (8013e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d013      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4a1f      	ldr	r2, [pc, #124]	; (8013e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8013e16:	4293      	cmp	r3, r2
 8013e18:	d00e      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	4a1e      	ldr	r2, [pc, #120]	; (8013e98 <HAL_TIM_Base_Start_IT+0xe0>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d009      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4a1c      	ldr	r2, [pc, #112]	; (8013e9c <HAL_TIM_Base_Start_IT+0xe4>)
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d004      	beq.n	8013e38 <HAL_TIM_Base_Start_IT+0x80>
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4a1b      	ldr	r2, [pc, #108]	; (8013ea0 <HAL_TIM_Base_Start_IT+0xe8>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d115      	bne.n	8013e64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	689a      	ldr	r2, [r3, #8]
 8013e3e:	4b19      	ldr	r3, [pc, #100]	; (8013ea4 <HAL_TIM_Base_Start_IT+0xec>)
 8013e40:	4013      	ands	r3, r2
 8013e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	2b06      	cmp	r3, #6
 8013e48:	d015      	beq.n	8013e76 <HAL_TIM_Base_Start_IT+0xbe>
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e50:	d011      	beq.n	8013e76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f042 0201 	orr.w	r2, r2, #1
 8013e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e62:	e008      	b.n	8013e76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f042 0201 	orr.w	r2, r2, #1
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	e000      	b.n	8013e78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013e78:	2300      	movs	r3, #0
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3714      	adds	r7, #20
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr
 8013e86:	bf00      	nop
 8013e88:	40010000 	.word	0x40010000
 8013e8c:	40000400 	.word	0x40000400
 8013e90:	40000800 	.word	0x40000800
 8013e94:	40000c00 	.word	0x40000c00
 8013e98:	40010400 	.word	0x40010400
 8013e9c:	40001800 	.word	0x40001800
 8013ea0:	40014000 	.word	0x40014000
 8013ea4:	00010007 	.word	0x00010007

08013ea8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b084      	sub	sp, #16
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d109      	bne.n	8013ed0 <HAL_TIM_OC_Start_IT+0x28>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013ec2:	b2db      	uxtb	r3, r3
 8013ec4:	2b01      	cmp	r3, #1
 8013ec6:	bf14      	ite	ne
 8013ec8:	2301      	movne	r3, #1
 8013eca:	2300      	moveq	r3, #0
 8013ecc:	b2db      	uxtb	r3, r3
 8013ece:	e03c      	b.n	8013f4a <HAL_TIM_OC_Start_IT+0xa2>
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	2b04      	cmp	r3, #4
 8013ed4:	d109      	bne.n	8013eea <HAL_TIM_OC_Start_IT+0x42>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	bf14      	ite	ne
 8013ee2:	2301      	movne	r3, #1
 8013ee4:	2300      	moveq	r3, #0
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	e02f      	b.n	8013f4a <HAL_TIM_OC_Start_IT+0xa2>
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	2b08      	cmp	r3, #8
 8013eee:	d109      	bne.n	8013f04 <HAL_TIM_OC_Start_IT+0x5c>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013ef6:	b2db      	uxtb	r3, r3
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	bf14      	ite	ne
 8013efc:	2301      	movne	r3, #1
 8013efe:	2300      	moveq	r3, #0
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	e022      	b.n	8013f4a <HAL_TIM_OC_Start_IT+0xa2>
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	2b0c      	cmp	r3, #12
 8013f08:	d109      	bne.n	8013f1e <HAL_TIM_OC_Start_IT+0x76>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	bf14      	ite	ne
 8013f16:	2301      	movne	r3, #1
 8013f18:	2300      	moveq	r3, #0
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	e015      	b.n	8013f4a <HAL_TIM_OC_Start_IT+0xa2>
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b10      	cmp	r3, #16
 8013f22:	d109      	bne.n	8013f38 <HAL_TIM_OC_Start_IT+0x90>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	bf14      	ite	ne
 8013f30:	2301      	movne	r3, #1
 8013f32:	2300      	moveq	r3, #0
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	e008      	b.n	8013f4a <HAL_TIM_OC_Start_IT+0xa2>
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	bf14      	ite	ne
 8013f44:	2301      	movne	r3, #1
 8013f46:	2300      	moveq	r3, #0
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d001      	beq.n	8013f52 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8013f4e:	2301      	movs	r3, #1
 8013f50:	e0ec      	b.n	801412c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d104      	bne.n	8013f62 <HAL_TIM_OC_Start_IT+0xba>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2202      	movs	r2, #2
 8013f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013f60:	e023      	b.n	8013faa <HAL_TIM_OC_Start_IT+0x102>
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	2b04      	cmp	r3, #4
 8013f66:	d104      	bne.n	8013f72 <HAL_TIM_OC_Start_IT+0xca>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013f70:	e01b      	b.n	8013faa <HAL_TIM_OC_Start_IT+0x102>
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2b08      	cmp	r3, #8
 8013f76:	d104      	bne.n	8013f82 <HAL_TIM_OC_Start_IT+0xda>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2202      	movs	r2, #2
 8013f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f80:	e013      	b.n	8013faa <HAL_TIM_OC_Start_IT+0x102>
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	2b0c      	cmp	r3, #12
 8013f86:	d104      	bne.n	8013f92 <HAL_TIM_OC_Start_IT+0xea>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2202      	movs	r2, #2
 8013f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013f90:	e00b      	b.n	8013faa <HAL_TIM_OC_Start_IT+0x102>
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	2b10      	cmp	r3, #16
 8013f96:	d104      	bne.n	8013fa2 <HAL_TIM_OC_Start_IT+0xfa>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2202      	movs	r2, #2
 8013f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013fa0:	e003      	b.n	8013faa <HAL_TIM_OC_Start_IT+0x102>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2202      	movs	r2, #2
 8013fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	2b0c      	cmp	r3, #12
 8013fae:	d841      	bhi.n	8014034 <HAL_TIM_OC_Start_IT+0x18c>
 8013fb0:	a201      	add	r2, pc, #4	; (adr r2, 8013fb8 <HAL_TIM_OC_Start_IT+0x110>)
 8013fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb6:	bf00      	nop
 8013fb8:	08013fed 	.word	0x08013fed
 8013fbc:	08014035 	.word	0x08014035
 8013fc0:	08014035 	.word	0x08014035
 8013fc4:	08014035 	.word	0x08014035
 8013fc8:	08013fff 	.word	0x08013fff
 8013fcc:	08014035 	.word	0x08014035
 8013fd0:	08014035 	.word	0x08014035
 8013fd4:	08014035 	.word	0x08014035
 8013fd8:	08014011 	.word	0x08014011
 8013fdc:	08014035 	.word	0x08014035
 8013fe0:	08014035 	.word	0x08014035
 8013fe4:	08014035 	.word	0x08014035
 8013fe8:	08014023 	.word	0x08014023
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	68da      	ldr	r2, [r3, #12]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f042 0202 	orr.w	r2, r2, #2
 8013ffa:	60da      	str	r2, [r3, #12]
      break;
 8013ffc:	e01d      	b.n	801403a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	68da      	ldr	r2, [r3, #12]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	f042 0204 	orr.w	r2, r2, #4
 801400c:	60da      	str	r2, [r3, #12]
      break;
 801400e:	e014      	b.n	801403a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	68da      	ldr	r2, [r3, #12]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f042 0208 	orr.w	r2, r2, #8
 801401e:	60da      	str	r2, [r3, #12]
      break;
 8014020:	e00b      	b.n	801403a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	68da      	ldr	r2, [r3, #12]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f042 0210 	orr.w	r2, r2, #16
 8014030:	60da      	str	r2, [r3, #12]
      break;
 8014032:	e002      	b.n	801403a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8014034:	2301      	movs	r3, #1
 8014036:	73fb      	strb	r3, [r7, #15]
      break;
 8014038:	bf00      	nop
  }

  if (status == HAL_OK)
 801403a:	7bfb      	ldrb	r3, [r7, #15]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d174      	bne.n	801412a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	2201      	movs	r2, #1
 8014046:	6839      	ldr	r1, [r7, #0]
 8014048:	4618      	mov	r0, r3
 801404a:	f001 f917 	bl	801527c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4a38      	ldr	r2, [pc, #224]	; (8014134 <HAL_TIM_OC_Start_IT+0x28c>)
 8014054:	4293      	cmp	r3, r2
 8014056:	d013      	beq.n	8014080 <HAL_TIM_OC_Start_IT+0x1d8>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4a36      	ldr	r2, [pc, #216]	; (8014138 <HAL_TIM_OC_Start_IT+0x290>)
 801405e:	4293      	cmp	r3, r2
 8014060:	d00e      	beq.n	8014080 <HAL_TIM_OC_Start_IT+0x1d8>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	4a35      	ldr	r2, [pc, #212]	; (801413c <HAL_TIM_OC_Start_IT+0x294>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d009      	beq.n	8014080 <HAL_TIM_OC_Start_IT+0x1d8>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	4a33      	ldr	r2, [pc, #204]	; (8014140 <HAL_TIM_OC_Start_IT+0x298>)
 8014072:	4293      	cmp	r3, r2
 8014074:	d004      	beq.n	8014080 <HAL_TIM_OC_Start_IT+0x1d8>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	4a32      	ldr	r2, [pc, #200]	; (8014144 <HAL_TIM_OC_Start_IT+0x29c>)
 801407c:	4293      	cmp	r3, r2
 801407e:	d101      	bne.n	8014084 <HAL_TIM_OC_Start_IT+0x1dc>
 8014080:	2301      	movs	r3, #1
 8014082:	e000      	b.n	8014086 <HAL_TIM_OC_Start_IT+0x1de>
 8014084:	2300      	movs	r3, #0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d007      	beq.n	801409a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4a25      	ldr	r2, [pc, #148]	; (8014134 <HAL_TIM_OC_Start_IT+0x28c>)
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d022      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80140ac:	d01d      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4a25      	ldr	r2, [pc, #148]	; (8014148 <HAL_TIM_OC_Start_IT+0x2a0>)
 80140b4:	4293      	cmp	r3, r2
 80140b6:	d018      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4a23      	ldr	r2, [pc, #140]	; (801414c <HAL_TIM_OC_Start_IT+0x2a4>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d013      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a22      	ldr	r2, [pc, #136]	; (8014150 <HAL_TIM_OC_Start_IT+0x2a8>)
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d00e      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	4a19      	ldr	r2, [pc, #100]	; (8014138 <HAL_TIM_OC_Start_IT+0x290>)
 80140d2:	4293      	cmp	r3, r2
 80140d4:	d009      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	4a1e      	ldr	r2, [pc, #120]	; (8014154 <HAL_TIM_OC_Start_IT+0x2ac>)
 80140dc:	4293      	cmp	r3, r2
 80140de:	d004      	beq.n	80140ea <HAL_TIM_OC_Start_IT+0x242>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	4a15      	ldr	r2, [pc, #84]	; (801413c <HAL_TIM_OC_Start_IT+0x294>)
 80140e6:	4293      	cmp	r3, r2
 80140e8:	d115      	bne.n	8014116 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	689a      	ldr	r2, [r3, #8]
 80140f0:	4b19      	ldr	r3, [pc, #100]	; (8014158 <HAL_TIM_OC_Start_IT+0x2b0>)
 80140f2:	4013      	ands	r3, r2
 80140f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	2b06      	cmp	r3, #6
 80140fa:	d015      	beq.n	8014128 <HAL_TIM_OC_Start_IT+0x280>
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014102:	d011      	beq.n	8014128 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	681a      	ldr	r2, [r3, #0]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	f042 0201 	orr.w	r2, r2, #1
 8014112:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014114:	e008      	b.n	8014128 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f042 0201 	orr.w	r2, r2, #1
 8014124:	601a      	str	r2, [r3, #0]
 8014126:	e000      	b.n	801412a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014128:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801412a:	7bfb      	ldrb	r3, [r7, #15]
}
 801412c:	4618      	mov	r0, r3
 801412e:	3710      	adds	r7, #16
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	40010000 	.word	0x40010000
 8014138:	40010400 	.word	0x40010400
 801413c:	40014000 	.word	0x40014000
 8014140:	40014400 	.word	0x40014400
 8014144:	40014800 	.word	0x40014800
 8014148:	40000400 	.word	0x40000400
 801414c:	40000800 	.word	0x40000800
 8014150:	40000c00 	.word	0x40000c00
 8014154:	40001800 	.word	0x40001800
 8014158:	00010007 	.word	0x00010007

0801415c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014166:	2300      	movs	r3, #0
 8014168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	2b0c      	cmp	r3, #12
 801416e:	d841      	bhi.n	80141f4 <HAL_TIM_OC_Stop_IT+0x98>
 8014170:	a201      	add	r2, pc, #4	; (adr r2, 8014178 <HAL_TIM_OC_Stop_IT+0x1c>)
 8014172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014176:	bf00      	nop
 8014178:	080141ad 	.word	0x080141ad
 801417c:	080141f5 	.word	0x080141f5
 8014180:	080141f5 	.word	0x080141f5
 8014184:	080141f5 	.word	0x080141f5
 8014188:	080141bf 	.word	0x080141bf
 801418c:	080141f5 	.word	0x080141f5
 8014190:	080141f5 	.word	0x080141f5
 8014194:	080141f5 	.word	0x080141f5
 8014198:	080141d1 	.word	0x080141d1
 801419c:	080141f5 	.word	0x080141f5
 80141a0:	080141f5 	.word	0x080141f5
 80141a4:	080141f5 	.word	0x080141f5
 80141a8:	080141e3 	.word	0x080141e3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	68da      	ldr	r2, [r3, #12]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f022 0202 	bic.w	r2, r2, #2
 80141ba:	60da      	str	r2, [r3, #12]
      break;
 80141bc:	e01d      	b.n	80141fa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	68da      	ldr	r2, [r3, #12]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	f022 0204 	bic.w	r2, r2, #4
 80141cc:	60da      	str	r2, [r3, #12]
      break;
 80141ce:	e014      	b.n	80141fa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	68da      	ldr	r2, [r3, #12]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f022 0208 	bic.w	r2, r2, #8
 80141de:	60da      	str	r2, [r3, #12]
      break;
 80141e0:	e00b      	b.n	80141fa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	68da      	ldr	r2, [r3, #12]
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	f022 0210 	bic.w	r2, r2, #16
 80141f0:	60da      	str	r2, [r3, #12]
      break;
 80141f2:	e002      	b.n	80141fa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80141f4:	2301      	movs	r3, #1
 80141f6:	73fb      	strb	r3, [r7, #15]
      break;
 80141f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80141fa:	7bfb      	ldrb	r3, [r7, #15]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	f040 8081 	bne.w	8014304 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	2200      	movs	r2, #0
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	4618      	mov	r0, r3
 801420c:	f001 f836 	bl	801527c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a3e      	ldr	r2, [pc, #248]	; (8014310 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d013      	beq.n	8014242 <HAL_TIM_OC_Stop_IT+0xe6>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4a3d      	ldr	r2, [pc, #244]	; (8014314 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8014220:	4293      	cmp	r3, r2
 8014222:	d00e      	beq.n	8014242 <HAL_TIM_OC_Stop_IT+0xe6>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4a3b      	ldr	r2, [pc, #236]	; (8014318 <HAL_TIM_OC_Stop_IT+0x1bc>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d009      	beq.n	8014242 <HAL_TIM_OC_Stop_IT+0xe6>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a3a      	ldr	r2, [pc, #232]	; (801431c <HAL_TIM_OC_Stop_IT+0x1c0>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d004      	beq.n	8014242 <HAL_TIM_OC_Stop_IT+0xe6>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a38      	ldr	r2, [pc, #224]	; (8014320 <HAL_TIM_OC_Stop_IT+0x1c4>)
 801423e:	4293      	cmp	r3, r2
 8014240:	d101      	bne.n	8014246 <HAL_TIM_OC_Stop_IT+0xea>
 8014242:	2301      	movs	r3, #1
 8014244:	e000      	b.n	8014248 <HAL_TIM_OC_Stop_IT+0xec>
 8014246:	2300      	movs	r3, #0
 8014248:	2b00      	cmp	r3, #0
 801424a:	d017      	beq.n	801427c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	6a1a      	ldr	r2, [r3, #32]
 8014252:	f241 1311 	movw	r3, #4369	; 0x1111
 8014256:	4013      	ands	r3, r2
 8014258:	2b00      	cmp	r3, #0
 801425a:	d10f      	bne.n	801427c <HAL_TIM_OC_Stop_IT+0x120>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	6a1a      	ldr	r2, [r3, #32]
 8014262:	f240 4344 	movw	r3, #1092	; 0x444
 8014266:	4013      	ands	r3, r2
 8014268:	2b00      	cmp	r3, #0
 801426a:	d107      	bne.n	801427c <HAL_TIM_OC_Stop_IT+0x120>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801427a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	6a1a      	ldr	r2, [r3, #32]
 8014282:	f241 1311 	movw	r3, #4369	; 0x1111
 8014286:	4013      	ands	r3, r2
 8014288:	2b00      	cmp	r3, #0
 801428a:	d10f      	bne.n	80142ac <HAL_TIM_OC_Stop_IT+0x150>
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	6a1a      	ldr	r2, [r3, #32]
 8014292:	f240 4344 	movw	r3, #1092	; 0x444
 8014296:	4013      	ands	r3, r2
 8014298:	2b00      	cmp	r3, #0
 801429a:	d107      	bne.n	80142ac <HAL_TIM_OC_Stop_IT+0x150>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f022 0201 	bic.w	r2, r2, #1
 80142aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d104      	bne.n	80142bc <HAL_TIM_OC_Stop_IT+0x160>
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2201      	movs	r2, #1
 80142b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80142ba:	e023      	b.n	8014304 <HAL_TIM_OC_Stop_IT+0x1a8>
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	2b04      	cmp	r3, #4
 80142c0:	d104      	bne.n	80142cc <HAL_TIM_OC_Stop_IT+0x170>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2201      	movs	r2, #1
 80142c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80142ca:	e01b      	b.n	8014304 <HAL_TIM_OC_Stop_IT+0x1a8>
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	2b08      	cmp	r3, #8
 80142d0:	d104      	bne.n	80142dc <HAL_TIM_OC_Stop_IT+0x180>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2201      	movs	r2, #1
 80142d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80142da:	e013      	b.n	8014304 <HAL_TIM_OC_Stop_IT+0x1a8>
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	2b0c      	cmp	r3, #12
 80142e0:	d104      	bne.n	80142ec <HAL_TIM_OC_Stop_IT+0x190>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2201      	movs	r2, #1
 80142e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80142ea:	e00b      	b.n	8014304 <HAL_TIM_OC_Stop_IT+0x1a8>
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	2b10      	cmp	r3, #16
 80142f0:	d104      	bne.n	80142fc <HAL_TIM_OC_Stop_IT+0x1a0>
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2201      	movs	r2, #1
 80142f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80142fa:	e003      	b.n	8014304 <HAL_TIM_OC_Stop_IT+0x1a8>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2201      	movs	r2, #1
 8014300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8014304:	7bfb      	ldrb	r3, [r7, #15]
}
 8014306:	4618      	mov	r0, r3
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	40010000 	.word	0x40010000
 8014314:	40010400 	.word	0x40010400
 8014318:	40014000 	.word	0x40014000
 801431c:	40014400 	.word	0x40014400
 8014320:	40014800 	.word	0x40014800

08014324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d101      	bne.n	8014336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014332:	2301      	movs	r3, #1
 8014334:	e049      	b.n	80143ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801433c:	b2db      	uxtb	r3, r3
 801433e:	2b00      	cmp	r3, #0
 8014340:	d106      	bne.n	8014350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2200      	movs	r2, #0
 8014346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f000 f841 	bl	80143d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2202      	movs	r2, #2
 8014354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	3304      	adds	r3, #4
 8014360:	4619      	mov	r1, r3
 8014362:	4610      	mov	r0, r2
 8014364:	f000 fb70 	bl	8014a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2201      	movs	r2, #1
 801436c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2201      	movs	r2, #1
 8014374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2201      	movs	r2, #1
 801437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2201      	movs	r2, #1
 8014384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2201      	movs	r2, #1
 801438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2201      	movs	r2, #1
 8014394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2201      	movs	r2, #1
 801439c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2201      	movs	r2, #1
 80143a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2201      	movs	r2, #1
 80143ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2201      	movs	r2, #1
 80143b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2201      	movs	r2, #1
 80143bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2201      	movs	r2, #1
 80143c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b083      	sub	sp, #12
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80143da:	bf00      	nop
 80143dc:	370c      	adds	r7, #12
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b084      	sub	sp, #16
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	68db      	ldr	r3, [r3, #12]
 80143f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	691b      	ldr	r3, [r3, #16]
 80143fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80143fe:	68bb      	ldr	r3, [r7, #8]
 8014400:	f003 0302 	and.w	r3, r3, #2
 8014404:	2b00      	cmp	r3, #0
 8014406:	d020      	beq.n	801444a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f003 0302 	and.w	r3, r3, #2
 801440e:	2b00      	cmp	r3, #0
 8014410:	d01b      	beq.n	801444a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	f06f 0202 	mvn.w	r2, #2
 801441a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2201      	movs	r2, #1
 8014420:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	699b      	ldr	r3, [r3, #24]
 8014428:	f003 0303 	and.w	r3, r3, #3
 801442c:	2b00      	cmp	r3, #0
 801442e:	d003      	beq.n	8014438 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f000 faeb 	bl	8014a0c <HAL_TIM_IC_CaptureCallback>
 8014436:	e005      	b.n	8014444 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7ee fcd3 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 faee 	bl	8014a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2200      	movs	r2, #0
 8014448:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	f003 0304 	and.w	r3, r3, #4
 8014450:	2b00      	cmp	r3, #0
 8014452:	d020      	beq.n	8014496 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	f003 0304 	and.w	r3, r3, #4
 801445a:	2b00      	cmp	r3, #0
 801445c:	d01b      	beq.n	8014496 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f06f 0204 	mvn.w	r2, #4
 8014466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2202      	movs	r2, #2
 801446c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	699b      	ldr	r3, [r3, #24]
 8014474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014478:	2b00      	cmp	r3, #0
 801447a:	d003      	beq.n	8014484 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 fac5 	bl	8014a0c <HAL_TIM_IC_CaptureCallback>
 8014482:	e005      	b.n	8014490 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7ee fcad 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 fac8 	bl	8014a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	f003 0308 	and.w	r3, r3, #8
 801449c:	2b00      	cmp	r3, #0
 801449e:	d020      	beq.n	80144e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	f003 0308 	and.w	r3, r3, #8
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d01b      	beq.n	80144e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	f06f 0208 	mvn.w	r2, #8
 80144b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2204      	movs	r2, #4
 80144b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	69db      	ldr	r3, [r3, #28]
 80144c0:	f003 0303 	and.w	r3, r3, #3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d003      	beq.n	80144d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 fa9f 	bl	8014a0c <HAL_TIM_IC_CaptureCallback>
 80144ce:	e005      	b.n	80144dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f7ee fc87 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f000 faa2 	bl	8014a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	f003 0310 	and.w	r3, r3, #16
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d020      	beq.n	801452e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f003 0310 	and.w	r3, r3, #16
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d01b      	beq.n	801452e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	f06f 0210 	mvn.w	r2, #16
 80144fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2208      	movs	r2, #8
 8014504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	69db      	ldr	r3, [r3, #28]
 801450c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014510:	2b00      	cmp	r3, #0
 8014512:	d003      	beq.n	801451c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 fa79 	bl	8014a0c <HAL_TIM_IC_CaptureCallback>
 801451a:	e005      	b.n	8014528 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7ee fc61 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f000 fa7c 	bl	8014a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	f003 0301 	and.w	r3, r3, #1
 8014534:	2b00      	cmp	r3, #0
 8014536:	d00c      	beq.n	8014552 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f003 0301 	and.w	r3, r3, #1
 801453e:	2b00      	cmp	r3, #0
 8014540:	d007      	beq.n	8014552 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f06f 0201 	mvn.w	r2, #1
 801454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f7ef fa85 	bl	8003a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014558:	2b00      	cmp	r3, #0
 801455a:	d104      	bne.n	8014566 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00c      	beq.n	8014580 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801456c:	2b00      	cmp	r3, #0
 801456e:	d007      	beq.n	8014580 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8014578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 ffba 	bl	80154f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014586:	2b00      	cmp	r3, #0
 8014588:	d00c      	beq.n	80145a4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014590:	2b00      	cmp	r3, #0
 8014592:	d007      	beq.n	80145a4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 ffb2 	bl	8015508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d00c      	beq.n	80145c8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d007      	beq.n	80145c8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80145c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f000 fa36 	bl	8014a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	f003 0320 	and.w	r3, r3, #32
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00c      	beq.n	80145ec <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	f003 0320 	and.w	r3, r3, #32
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d007      	beq.n	80145ec <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f06f 0220 	mvn.w	r2, #32
 80145e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f000 ff7a 	bl	80154e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80145ec:	bf00      	nop
 80145ee:	3710      	adds	r7, #16
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b086      	sub	sp, #24
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014600:	2300      	movs	r3, #0
 8014602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801460a:	2b01      	cmp	r3, #1
 801460c:	d101      	bne.n	8014612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801460e:	2302      	movs	r3, #2
 8014610:	e0ff      	b.n	8014812 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2201      	movs	r2, #1
 8014616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2b14      	cmp	r3, #20
 801461e:	f200 80f0 	bhi.w	8014802 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8014622:	a201      	add	r2, pc, #4	; (adr r2, 8014628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014628:	0801467d 	.word	0x0801467d
 801462c:	08014803 	.word	0x08014803
 8014630:	08014803 	.word	0x08014803
 8014634:	08014803 	.word	0x08014803
 8014638:	080146bd 	.word	0x080146bd
 801463c:	08014803 	.word	0x08014803
 8014640:	08014803 	.word	0x08014803
 8014644:	08014803 	.word	0x08014803
 8014648:	080146ff 	.word	0x080146ff
 801464c:	08014803 	.word	0x08014803
 8014650:	08014803 	.word	0x08014803
 8014654:	08014803 	.word	0x08014803
 8014658:	0801473f 	.word	0x0801473f
 801465c:	08014803 	.word	0x08014803
 8014660:	08014803 	.word	0x08014803
 8014664:	08014803 	.word	0x08014803
 8014668:	08014781 	.word	0x08014781
 801466c:	08014803 	.word	0x08014803
 8014670:	08014803 	.word	0x08014803
 8014674:	08014803 	.word	0x08014803
 8014678:	080147c1 	.word	0x080147c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	68b9      	ldr	r1, [r7, #8]
 8014682:	4618      	mov	r0, r3
 8014684:	f000 fa86 	bl	8014b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	699a      	ldr	r2, [r3, #24]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f042 0208 	orr.w	r2, r2, #8
 8014696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	699a      	ldr	r2, [r3, #24]
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	f022 0204 	bic.w	r2, r2, #4
 80146a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	6999      	ldr	r1, [r3, #24]
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	691a      	ldr	r2, [r3, #16]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	430a      	orrs	r2, r1
 80146b8:	619a      	str	r2, [r3, #24]
      break;
 80146ba:	e0a5      	b.n	8014808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	68b9      	ldr	r1, [r7, #8]
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 faf6 	bl	8014cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	699a      	ldr	r2, [r3, #24]
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80146d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	699a      	ldr	r2, [r3, #24]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80146e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	6999      	ldr	r1, [r3, #24]
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	021a      	lsls	r2, r3, #8
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	430a      	orrs	r2, r1
 80146fa:	619a      	str	r2, [r3, #24]
      break;
 80146fc:	e084      	b.n	8014808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	68b9      	ldr	r1, [r7, #8]
 8014704:	4618      	mov	r0, r3
 8014706:	f000 fb5f 	bl	8014dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	69da      	ldr	r2, [r3, #28]
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	f042 0208 	orr.w	r2, r2, #8
 8014718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	69da      	ldr	r2, [r3, #28]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	f022 0204 	bic.w	r2, r2, #4
 8014728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	69d9      	ldr	r1, [r3, #28]
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	691a      	ldr	r2, [r3, #16]
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	430a      	orrs	r2, r1
 801473a:	61da      	str	r2, [r3, #28]
      break;
 801473c:	e064      	b.n	8014808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	68b9      	ldr	r1, [r7, #8]
 8014744:	4618      	mov	r0, r3
 8014746:	f000 fbc7 	bl	8014ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	69da      	ldr	r2, [r3, #28]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	69da      	ldr	r2, [r3, #28]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	69d9      	ldr	r1, [r3, #28]
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	021a      	lsls	r2, r3, #8
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	430a      	orrs	r2, r1
 801477c:	61da      	str	r2, [r3, #28]
      break;
 801477e:	e043      	b.n	8014808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68b9      	ldr	r1, [r7, #8]
 8014786:	4618      	mov	r0, r3
 8014788:	f000 fc10 	bl	8014fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f042 0208 	orr.w	r2, r2, #8
 801479a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	f022 0204 	bic.w	r2, r2, #4
 80147aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	691a      	ldr	r2, [r3, #16]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	430a      	orrs	r2, r1
 80147bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80147be:	e023      	b.n	8014808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	68b9      	ldr	r1, [r7, #8]
 80147c6:	4618      	mov	r0, r3
 80147c8:	f000 fc54 	bl	8015074 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80147da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80147ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	691b      	ldr	r3, [r3, #16]
 80147f6:	021a      	lsls	r2, r3, #8
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	430a      	orrs	r2, r1
 80147fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014800:	e002      	b.n	8014808 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014802:	2301      	movs	r3, #1
 8014804:	75fb      	strb	r3, [r7, #23]
      break;
 8014806:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	2200      	movs	r2, #0
 801480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014810:	7dfb      	ldrb	r3, [r7, #23]
}
 8014812:	4618      	mov	r0, r3
 8014814:	3718      	adds	r7, #24
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop

0801481c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014826:	2300      	movs	r3, #0
 8014828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014830:	2b01      	cmp	r3, #1
 8014832:	d101      	bne.n	8014838 <HAL_TIM_ConfigClockSource+0x1c>
 8014834:	2302      	movs	r3, #2
 8014836:	e0dc      	b.n	80149f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2201      	movs	r2, #1
 801483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2202      	movs	r2, #2
 8014844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	689b      	ldr	r3, [r3, #8]
 801484e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014850:	68ba      	ldr	r2, [r7, #8]
 8014852:	4b6a      	ldr	r3, [pc, #424]	; (80149fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8014854:	4013      	ands	r3, r2
 8014856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801485e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	68ba      	ldr	r2, [r7, #8]
 8014866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	4a64      	ldr	r2, [pc, #400]	; (8014a00 <HAL_TIM_ConfigClockSource+0x1e4>)
 801486e:	4293      	cmp	r3, r2
 8014870:	f000 80a9 	beq.w	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8014874:	4a62      	ldr	r2, [pc, #392]	; (8014a00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8014876:	4293      	cmp	r3, r2
 8014878:	f200 80ae 	bhi.w	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 801487c:	4a61      	ldr	r2, [pc, #388]	; (8014a04 <HAL_TIM_ConfigClockSource+0x1e8>)
 801487e:	4293      	cmp	r3, r2
 8014880:	f000 80a1 	beq.w	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8014884:	4a5f      	ldr	r2, [pc, #380]	; (8014a04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8014886:	4293      	cmp	r3, r2
 8014888:	f200 80a6 	bhi.w	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 801488c:	4a5e      	ldr	r2, [pc, #376]	; (8014a08 <HAL_TIM_ConfigClockSource+0x1ec>)
 801488e:	4293      	cmp	r3, r2
 8014890:	f000 8099 	beq.w	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8014894:	4a5c      	ldr	r2, [pc, #368]	; (8014a08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8014896:	4293      	cmp	r3, r2
 8014898:	f200 809e 	bhi.w	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 801489c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80148a0:	f000 8091 	beq.w	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80148a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80148a8:	f200 8096 	bhi.w	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80148b0:	f000 8089 	beq.w	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80148b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80148b8:	f200 808e 	bhi.w	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148c0:	d03e      	beq.n	8014940 <HAL_TIM_ConfigClockSource+0x124>
 80148c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148c6:	f200 8087 	bhi.w	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148ce:	f000 8086 	beq.w	80149de <HAL_TIM_ConfigClockSource+0x1c2>
 80148d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148d6:	d87f      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148d8:	2b70      	cmp	r3, #112	; 0x70
 80148da:	d01a      	beq.n	8014912 <HAL_TIM_ConfigClockSource+0xf6>
 80148dc:	2b70      	cmp	r3, #112	; 0x70
 80148de:	d87b      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148e0:	2b60      	cmp	r3, #96	; 0x60
 80148e2:	d050      	beq.n	8014986 <HAL_TIM_ConfigClockSource+0x16a>
 80148e4:	2b60      	cmp	r3, #96	; 0x60
 80148e6:	d877      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148e8:	2b50      	cmp	r3, #80	; 0x50
 80148ea:	d03c      	beq.n	8014966 <HAL_TIM_ConfigClockSource+0x14a>
 80148ec:	2b50      	cmp	r3, #80	; 0x50
 80148ee:	d873      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148f0:	2b40      	cmp	r3, #64	; 0x40
 80148f2:	d058      	beq.n	80149a6 <HAL_TIM_ConfigClockSource+0x18a>
 80148f4:	2b40      	cmp	r3, #64	; 0x40
 80148f6:	d86f      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80148f8:	2b30      	cmp	r3, #48	; 0x30
 80148fa:	d064      	beq.n	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80148fc:	2b30      	cmp	r3, #48	; 0x30
 80148fe:	d86b      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8014900:	2b20      	cmp	r3, #32
 8014902:	d060      	beq.n	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8014904:	2b20      	cmp	r3, #32
 8014906:	d867      	bhi.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8014908:	2b00      	cmp	r3, #0
 801490a:	d05c      	beq.n	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 801490c:	2b10      	cmp	r3, #16
 801490e:	d05a      	beq.n	80149c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8014910:	e062      	b.n	80149d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6818      	ldr	r0, [r3, #0]
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	6899      	ldr	r1, [r3, #8]
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	685a      	ldr	r2, [r3, #4]
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	f000 fc8b 	bl	801523c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	689b      	ldr	r3, [r3, #8]
 801492c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	609a      	str	r2, [r3, #8]
      break;
 801493e:	e04f      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6818      	ldr	r0, [r3, #0]
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	6899      	ldr	r1, [r3, #8]
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	685a      	ldr	r2, [r3, #4]
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	68db      	ldr	r3, [r3, #12]
 8014950:	f000 fc74 	bl	801523c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	689a      	ldr	r2, [r3, #8]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014962:	609a      	str	r2, [r3, #8]
      break;
 8014964:	e03c      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6818      	ldr	r0, [r3, #0]
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	6859      	ldr	r1, [r3, #4]
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	461a      	mov	r2, r3
 8014974:	f000 fbe4 	bl	8015140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2150      	movs	r1, #80	; 0x50
 801497e:	4618      	mov	r0, r3
 8014980:	f000 fc3e 	bl	8015200 <TIM_ITRx_SetConfig>
      break;
 8014984:	e02c      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6818      	ldr	r0, [r3, #0]
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	6859      	ldr	r1, [r3, #4]
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	461a      	mov	r2, r3
 8014994:	f000 fc03 	bl	801519e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2160      	movs	r1, #96	; 0x60
 801499e:	4618      	mov	r0, r3
 80149a0:	f000 fc2e 	bl	8015200 <TIM_ITRx_SetConfig>
      break;
 80149a4:	e01c      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6818      	ldr	r0, [r3, #0]
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	6859      	ldr	r1, [r3, #4]
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	461a      	mov	r2, r3
 80149b4:	f000 fbc4 	bl	8015140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	2140      	movs	r1, #64	; 0x40
 80149be:	4618      	mov	r0, r3
 80149c0:	f000 fc1e 	bl	8015200 <TIM_ITRx_SetConfig>
      break;
 80149c4:	e00c      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	4619      	mov	r1, r3
 80149d0:	4610      	mov	r0, r2
 80149d2:	f000 fc15 	bl	8015200 <TIM_ITRx_SetConfig>
      break;
 80149d6:	e003      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80149d8:	2301      	movs	r3, #1
 80149da:	73fb      	strb	r3, [r7, #15]
      break;
 80149dc:	e000      	b.n	80149e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80149de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2201      	movs	r2, #1
 80149e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80149f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3710      	adds	r7, #16
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	ffceff88 	.word	0xffceff88
 8014a00:	00100040 	.word	0x00100040
 8014a04:	00100030 	.word	0x00100030
 8014a08:	00100020 	.word	0x00100020

08014a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014a14:	bf00      	nop
 8014a16:	370c      	adds	r7, #12
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr

08014a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014a20:	b480      	push	{r7}
 8014a22:	b083      	sub	sp, #12
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014a28:	bf00      	nop
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014a3c:	bf00      	nop
 8014a3e:	370c      	adds	r7, #12
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr

08014a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b085      	sub	sp, #20
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	4a46      	ldr	r2, [pc, #280]	; (8014b74 <TIM_Base_SetConfig+0x12c>)
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	d013      	beq.n	8014a88 <TIM_Base_SetConfig+0x40>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a66:	d00f      	beq.n	8014a88 <TIM_Base_SetConfig+0x40>
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	4a43      	ldr	r2, [pc, #268]	; (8014b78 <TIM_Base_SetConfig+0x130>)
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	d00b      	beq.n	8014a88 <TIM_Base_SetConfig+0x40>
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	4a42      	ldr	r2, [pc, #264]	; (8014b7c <TIM_Base_SetConfig+0x134>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d007      	beq.n	8014a88 <TIM_Base_SetConfig+0x40>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	4a41      	ldr	r2, [pc, #260]	; (8014b80 <TIM_Base_SetConfig+0x138>)
 8014a7c:	4293      	cmp	r3, r2
 8014a7e:	d003      	beq.n	8014a88 <TIM_Base_SetConfig+0x40>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	4a40      	ldr	r2, [pc, #256]	; (8014b84 <TIM_Base_SetConfig+0x13c>)
 8014a84:	4293      	cmp	r3, r2
 8014a86:	d108      	bne.n	8014a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	4313      	orrs	r3, r2
 8014a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4a35      	ldr	r2, [pc, #212]	; (8014b74 <TIM_Base_SetConfig+0x12c>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d01f      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014aa8:	d01b      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4a32      	ldr	r2, [pc, #200]	; (8014b78 <TIM_Base_SetConfig+0x130>)
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	d017      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4a31      	ldr	r2, [pc, #196]	; (8014b7c <TIM_Base_SetConfig+0x134>)
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	d013      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4a30      	ldr	r2, [pc, #192]	; (8014b80 <TIM_Base_SetConfig+0x138>)
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d00f      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4a2f      	ldr	r2, [pc, #188]	; (8014b84 <TIM_Base_SetConfig+0x13c>)
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	d00b      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4a2e      	ldr	r2, [pc, #184]	; (8014b88 <TIM_Base_SetConfig+0x140>)
 8014ace:	4293      	cmp	r3, r2
 8014ad0:	d007      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	4a2d      	ldr	r2, [pc, #180]	; (8014b8c <TIM_Base_SetConfig+0x144>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d003      	beq.n	8014ae2 <TIM_Base_SetConfig+0x9a>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4a2c      	ldr	r2, [pc, #176]	; (8014b90 <TIM_Base_SetConfig+0x148>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d108      	bne.n	8014af4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	68db      	ldr	r3, [r3, #12]
 8014aee:	68fa      	ldr	r2, [r7, #12]
 8014af0:	4313      	orrs	r3, r2
 8014af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	695b      	ldr	r3, [r3, #20]
 8014afe:	4313      	orrs	r3, r2
 8014b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	689a      	ldr	r2, [r3, #8]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	681a      	ldr	r2, [r3, #0]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	4a16      	ldr	r2, [pc, #88]	; (8014b74 <TIM_Base_SetConfig+0x12c>)
 8014b1c:	4293      	cmp	r3, r2
 8014b1e:	d00f      	beq.n	8014b40 <TIM_Base_SetConfig+0xf8>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	4a18      	ldr	r2, [pc, #96]	; (8014b84 <TIM_Base_SetConfig+0x13c>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d00b      	beq.n	8014b40 <TIM_Base_SetConfig+0xf8>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4a17      	ldr	r2, [pc, #92]	; (8014b88 <TIM_Base_SetConfig+0x140>)
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	d007      	beq.n	8014b40 <TIM_Base_SetConfig+0xf8>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4a16      	ldr	r2, [pc, #88]	; (8014b8c <TIM_Base_SetConfig+0x144>)
 8014b34:	4293      	cmp	r3, r2
 8014b36:	d003      	beq.n	8014b40 <TIM_Base_SetConfig+0xf8>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	4a15      	ldr	r2, [pc, #84]	; (8014b90 <TIM_Base_SetConfig+0x148>)
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	d103      	bne.n	8014b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	691a      	ldr	r2, [r3, #16]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	691b      	ldr	r3, [r3, #16]
 8014b52:	f003 0301 	and.w	r3, r3, #1
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d105      	bne.n	8014b66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	691b      	ldr	r3, [r3, #16]
 8014b5e:	f023 0201 	bic.w	r2, r3, #1
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	611a      	str	r2, [r3, #16]
  }
}
 8014b66:	bf00      	nop
 8014b68:	3714      	adds	r7, #20
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop
 8014b74:	40010000 	.word	0x40010000
 8014b78:	40000400 	.word	0x40000400
 8014b7c:	40000800 	.word	0x40000800
 8014b80:	40000c00 	.word	0x40000c00
 8014b84:	40010400 	.word	0x40010400
 8014b88:	40014000 	.word	0x40014000
 8014b8c:	40014400 	.word	0x40014400
 8014b90:	40014800 	.word	0x40014800

08014b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014b94:	b480      	push	{r7}
 8014b96:	b087      	sub	sp, #28
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6a1b      	ldr	r3, [r3, #32]
 8014ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6a1b      	ldr	r3, [r3, #32]
 8014ba8:	f023 0201 	bic.w	r2, r3, #1
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	699b      	ldr	r3, [r3, #24]
 8014bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014bbc:	68fa      	ldr	r2, [r7, #12]
 8014bbe:	4b37      	ldr	r3, [pc, #220]	; (8014c9c <TIM_OC1_SetConfig+0x108>)
 8014bc0:	4013      	ands	r3, r2
 8014bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	f023 0303 	bic.w	r3, r3, #3
 8014bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	f023 0302 	bic.w	r3, r3, #2
 8014bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	689b      	ldr	r3, [r3, #8]
 8014be2:	697a      	ldr	r2, [r7, #20]
 8014be4:	4313      	orrs	r3, r2
 8014be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	4a2d      	ldr	r2, [pc, #180]	; (8014ca0 <TIM_OC1_SetConfig+0x10c>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d00f      	beq.n	8014c10 <TIM_OC1_SetConfig+0x7c>
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	4a2c      	ldr	r2, [pc, #176]	; (8014ca4 <TIM_OC1_SetConfig+0x110>)
 8014bf4:	4293      	cmp	r3, r2
 8014bf6:	d00b      	beq.n	8014c10 <TIM_OC1_SetConfig+0x7c>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	4a2b      	ldr	r2, [pc, #172]	; (8014ca8 <TIM_OC1_SetConfig+0x114>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d007      	beq.n	8014c10 <TIM_OC1_SetConfig+0x7c>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	4a2a      	ldr	r2, [pc, #168]	; (8014cac <TIM_OC1_SetConfig+0x118>)
 8014c04:	4293      	cmp	r3, r2
 8014c06:	d003      	beq.n	8014c10 <TIM_OC1_SetConfig+0x7c>
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	4a29      	ldr	r2, [pc, #164]	; (8014cb0 <TIM_OC1_SetConfig+0x11c>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d10c      	bne.n	8014c2a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	f023 0308 	bic.w	r3, r3, #8
 8014c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	697a      	ldr	r2, [r7, #20]
 8014c1e:	4313      	orrs	r3, r2
 8014c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	f023 0304 	bic.w	r3, r3, #4
 8014c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	4a1c      	ldr	r2, [pc, #112]	; (8014ca0 <TIM_OC1_SetConfig+0x10c>)
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d00f      	beq.n	8014c52 <TIM_OC1_SetConfig+0xbe>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	4a1b      	ldr	r2, [pc, #108]	; (8014ca4 <TIM_OC1_SetConfig+0x110>)
 8014c36:	4293      	cmp	r3, r2
 8014c38:	d00b      	beq.n	8014c52 <TIM_OC1_SetConfig+0xbe>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	4a1a      	ldr	r2, [pc, #104]	; (8014ca8 <TIM_OC1_SetConfig+0x114>)
 8014c3e:	4293      	cmp	r3, r2
 8014c40:	d007      	beq.n	8014c52 <TIM_OC1_SetConfig+0xbe>
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	4a19      	ldr	r2, [pc, #100]	; (8014cac <TIM_OC1_SetConfig+0x118>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d003      	beq.n	8014c52 <TIM_OC1_SetConfig+0xbe>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	4a18      	ldr	r2, [pc, #96]	; (8014cb0 <TIM_OC1_SetConfig+0x11c>)
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d111      	bne.n	8014c76 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	695b      	ldr	r3, [r3, #20]
 8014c66:	693a      	ldr	r2, [r7, #16]
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	699b      	ldr	r3, [r3, #24]
 8014c70:	693a      	ldr	r2, [r7, #16]
 8014c72:	4313      	orrs	r3, r2
 8014c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	693a      	ldr	r2, [r7, #16]
 8014c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	68fa      	ldr	r2, [r7, #12]
 8014c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	685a      	ldr	r2, [r3, #4]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	697a      	ldr	r2, [r7, #20]
 8014c8e:	621a      	str	r2, [r3, #32]
}
 8014c90:	bf00      	nop
 8014c92:	371c      	adds	r7, #28
 8014c94:	46bd      	mov	sp, r7
 8014c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9a:	4770      	bx	lr
 8014c9c:	fffeff8f 	.word	0xfffeff8f
 8014ca0:	40010000 	.word	0x40010000
 8014ca4:	40010400 	.word	0x40010400
 8014ca8:	40014000 	.word	0x40014000
 8014cac:	40014400 	.word	0x40014400
 8014cb0:	40014800 	.word	0x40014800

08014cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b087      	sub	sp, #28
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6a1b      	ldr	r3, [r3, #32]
 8014cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6a1b      	ldr	r3, [r3, #32]
 8014cc8:	f023 0210 	bic.w	r2, r3, #16
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	699b      	ldr	r3, [r3, #24]
 8014cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014cdc:	68fa      	ldr	r2, [r7, #12]
 8014cde:	4b34      	ldr	r3, [pc, #208]	; (8014db0 <TIM_OC2_SetConfig+0xfc>)
 8014ce0:	4013      	ands	r3, r2
 8014ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	021b      	lsls	r3, r3, #8
 8014cf2:	68fa      	ldr	r2, [r7, #12]
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	f023 0320 	bic.w	r3, r3, #32
 8014cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	689b      	ldr	r3, [r3, #8]
 8014d04:	011b      	lsls	r3, r3, #4
 8014d06:	697a      	ldr	r2, [r7, #20]
 8014d08:	4313      	orrs	r3, r2
 8014d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	4a29      	ldr	r2, [pc, #164]	; (8014db4 <TIM_OC2_SetConfig+0x100>)
 8014d10:	4293      	cmp	r3, r2
 8014d12:	d003      	beq.n	8014d1c <TIM_OC2_SetConfig+0x68>
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	4a28      	ldr	r2, [pc, #160]	; (8014db8 <TIM_OC2_SetConfig+0x104>)
 8014d18:	4293      	cmp	r3, r2
 8014d1a:	d10d      	bne.n	8014d38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	011b      	lsls	r3, r3, #4
 8014d2a:	697a      	ldr	r2, [r7, #20]
 8014d2c:	4313      	orrs	r3, r2
 8014d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	4a1e      	ldr	r2, [pc, #120]	; (8014db4 <TIM_OC2_SetConfig+0x100>)
 8014d3c:	4293      	cmp	r3, r2
 8014d3e:	d00f      	beq.n	8014d60 <TIM_OC2_SetConfig+0xac>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	4a1d      	ldr	r2, [pc, #116]	; (8014db8 <TIM_OC2_SetConfig+0x104>)
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d00b      	beq.n	8014d60 <TIM_OC2_SetConfig+0xac>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	4a1c      	ldr	r2, [pc, #112]	; (8014dbc <TIM_OC2_SetConfig+0x108>)
 8014d4c:	4293      	cmp	r3, r2
 8014d4e:	d007      	beq.n	8014d60 <TIM_OC2_SetConfig+0xac>
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	4a1b      	ldr	r2, [pc, #108]	; (8014dc0 <TIM_OC2_SetConfig+0x10c>)
 8014d54:	4293      	cmp	r3, r2
 8014d56:	d003      	beq.n	8014d60 <TIM_OC2_SetConfig+0xac>
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4a1a      	ldr	r2, [pc, #104]	; (8014dc4 <TIM_OC2_SetConfig+0x110>)
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d113      	bne.n	8014d88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	695b      	ldr	r3, [r3, #20]
 8014d74:	009b      	lsls	r3, r3, #2
 8014d76:	693a      	ldr	r2, [r7, #16]
 8014d78:	4313      	orrs	r3, r2
 8014d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	699b      	ldr	r3, [r3, #24]
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	693a      	ldr	r2, [r7, #16]
 8014d84:	4313      	orrs	r3, r2
 8014d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	693a      	ldr	r2, [r7, #16]
 8014d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	685a      	ldr	r2, [r3, #4]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	697a      	ldr	r2, [r7, #20]
 8014da0:	621a      	str	r2, [r3, #32]
}
 8014da2:	bf00      	nop
 8014da4:	371c      	adds	r7, #28
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr
 8014dae:	bf00      	nop
 8014db0:	feff8fff 	.word	0xfeff8fff
 8014db4:	40010000 	.word	0x40010000
 8014db8:	40010400 	.word	0x40010400
 8014dbc:	40014000 	.word	0x40014000
 8014dc0:	40014400 	.word	0x40014400
 8014dc4:	40014800 	.word	0x40014800

08014dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b087      	sub	sp, #28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6a1b      	ldr	r3, [r3, #32]
 8014dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	6a1b      	ldr	r3, [r3, #32]
 8014ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	69db      	ldr	r3, [r3, #28]
 8014dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014df0:	68fa      	ldr	r2, [r7, #12]
 8014df2:	4b33      	ldr	r3, [pc, #204]	; (8014ec0 <TIM_OC3_SetConfig+0xf8>)
 8014df4:	4013      	ands	r3, r2
 8014df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f023 0303 	bic.w	r3, r3, #3
 8014dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	68fa      	ldr	r2, [r7, #12]
 8014e06:	4313      	orrs	r3, r2
 8014e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	689b      	ldr	r3, [r3, #8]
 8014e16:	021b      	lsls	r3, r3, #8
 8014e18:	697a      	ldr	r2, [r7, #20]
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4a28      	ldr	r2, [pc, #160]	; (8014ec4 <TIM_OC3_SetConfig+0xfc>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d003      	beq.n	8014e2e <TIM_OC3_SetConfig+0x66>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4a27      	ldr	r2, [pc, #156]	; (8014ec8 <TIM_OC3_SetConfig+0x100>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d10d      	bne.n	8014e4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	021b      	lsls	r3, r3, #8
 8014e3c:	697a      	ldr	r2, [r7, #20]
 8014e3e:	4313      	orrs	r3, r2
 8014e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	4a1d      	ldr	r2, [pc, #116]	; (8014ec4 <TIM_OC3_SetConfig+0xfc>)
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d00f      	beq.n	8014e72 <TIM_OC3_SetConfig+0xaa>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4a1c      	ldr	r2, [pc, #112]	; (8014ec8 <TIM_OC3_SetConfig+0x100>)
 8014e56:	4293      	cmp	r3, r2
 8014e58:	d00b      	beq.n	8014e72 <TIM_OC3_SetConfig+0xaa>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4a1b      	ldr	r2, [pc, #108]	; (8014ecc <TIM_OC3_SetConfig+0x104>)
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d007      	beq.n	8014e72 <TIM_OC3_SetConfig+0xaa>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4a1a      	ldr	r2, [pc, #104]	; (8014ed0 <TIM_OC3_SetConfig+0x108>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d003      	beq.n	8014e72 <TIM_OC3_SetConfig+0xaa>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	4a19      	ldr	r2, [pc, #100]	; (8014ed4 <TIM_OC3_SetConfig+0x10c>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d113      	bne.n	8014e9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	695b      	ldr	r3, [r3, #20]
 8014e86:	011b      	lsls	r3, r3, #4
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	4313      	orrs	r3, r2
 8014e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	699b      	ldr	r3, [r3, #24]
 8014e92:	011b      	lsls	r3, r3, #4
 8014e94:	693a      	ldr	r2, [r7, #16]
 8014e96:	4313      	orrs	r3, r2
 8014e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	693a      	ldr	r2, [r7, #16]
 8014e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	68fa      	ldr	r2, [r7, #12]
 8014ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	685a      	ldr	r2, [r3, #4]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	697a      	ldr	r2, [r7, #20]
 8014eb2:	621a      	str	r2, [r3, #32]
}
 8014eb4:	bf00      	nop
 8014eb6:	371c      	adds	r7, #28
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebe:	4770      	bx	lr
 8014ec0:	fffeff8f 	.word	0xfffeff8f
 8014ec4:	40010000 	.word	0x40010000
 8014ec8:	40010400 	.word	0x40010400
 8014ecc:	40014000 	.word	0x40014000
 8014ed0:	40014400 	.word	0x40014400
 8014ed4:	40014800 	.word	0x40014800

08014ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b087      	sub	sp, #28
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6a1b      	ldr	r3, [r3, #32]
 8014ee6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6a1b      	ldr	r3, [r3, #32]
 8014eec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	685b      	ldr	r3, [r3, #4]
 8014ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	69db      	ldr	r3, [r3, #28]
 8014efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014f00:	68fa      	ldr	r2, [r7, #12]
 8014f02:	4b24      	ldr	r3, [pc, #144]	; (8014f94 <TIM_OC4_SetConfig+0xbc>)
 8014f04:	4013      	ands	r3, r2
 8014f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	021b      	lsls	r3, r3, #8
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	689b      	ldr	r3, [r3, #8]
 8014f28:	031b      	lsls	r3, r3, #12
 8014f2a:	693a      	ldr	r2, [r7, #16]
 8014f2c:	4313      	orrs	r3, r2
 8014f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	4a19      	ldr	r2, [pc, #100]	; (8014f98 <TIM_OC4_SetConfig+0xc0>)
 8014f34:	4293      	cmp	r3, r2
 8014f36:	d00f      	beq.n	8014f58 <TIM_OC4_SetConfig+0x80>
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	4a18      	ldr	r2, [pc, #96]	; (8014f9c <TIM_OC4_SetConfig+0xc4>)
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d00b      	beq.n	8014f58 <TIM_OC4_SetConfig+0x80>
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	4a17      	ldr	r2, [pc, #92]	; (8014fa0 <TIM_OC4_SetConfig+0xc8>)
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d007      	beq.n	8014f58 <TIM_OC4_SetConfig+0x80>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	4a16      	ldr	r2, [pc, #88]	; (8014fa4 <TIM_OC4_SetConfig+0xcc>)
 8014f4c:	4293      	cmp	r3, r2
 8014f4e:	d003      	beq.n	8014f58 <TIM_OC4_SetConfig+0x80>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4a15      	ldr	r2, [pc, #84]	; (8014fa8 <TIM_OC4_SetConfig+0xd0>)
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d109      	bne.n	8014f6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	695b      	ldr	r3, [r3, #20]
 8014f64:	019b      	lsls	r3, r3, #6
 8014f66:	697a      	ldr	r2, [r7, #20]
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	697a      	ldr	r2, [r7, #20]
 8014f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	68fa      	ldr	r2, [r7, #12]
 8014f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	685a      	ldr	r2, [r3, #4]
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	693a      	ldr	r2, [r7, #16]
 8014f84:	621a      	str	r2, [r3, #32]
}
 8014f86:	bf00      	nop
 8014f88:	371c      	adds	r7, #28
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop
 8014f94:	feff8fff 	.word	0xfeff8fff
 8014f98:	40010000 	.word	0x40010000
 8014f9c:	40010400 	.word	0x40010400
 8014fa0:	40014000 	.word	0x40014000
 8014fa4:	40014400 	.word	0x40014400
 8014fa8:	40014800 	.word	0x40014800

08014fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b087      	sub	sp, #28
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
 8014fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6a1b      	ldr	r3, [r3, #32]
 8014fba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6a1b      	ldr	r3, [r3, #32]
 8014fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014fd4:	68fa      	ldr	r2, [r7, #12]
 8014fd6:	4b21      	ldr	r3, [pc, #132]	; (801505c <TIM_OC5_SetConfig+0xb0>)
 8014fd8:	4013      	ands	r3, r2
 8014fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	68fa      	ldr	r2, [r7, #12]
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8014fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	689b      	ldr	r3, [r3, #8]
 8014ff2:	041b      	lsls	r3, r3, #16
 8014ff4:	693a      	ldr	r2, [r7, #16]
 8014ff6:	4313      	orrs	r3, r2
 8014ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	4a18      	ldr	r2, [pc, #96]	; (8015060 <TIM_OC5_SetConfig+0xb4>)
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d00f      	beq.n	8015022 <TIM_OC5_SetConfig+0x76>
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	4a17      	ldr	r2, [pc, #92]	; (8015064 <TIM_OC5_SetConfig+0xb8>)
 8015006:	4293      	cmp	r3, r2
 8015008:	d00b      	beq.n	8015022 <TIM_OC5_SetConfig+0x76>
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	4a16      	ldr	r2, [pc, #88]	; (8015068 <TIM_OC5_SetConfig+0xbc>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d007      	beq.n	8015022 <TIM_OC5_SetConfig+0x76>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	4a15      	ldr	r2, [pc, #84]	; (801506c <TIM_OC5_SetConfig+0xc0>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d003      	beq.n	8015022 <TIM_OC5_SetConfig+0x76>
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	4a14      	ldr	r2, [pc, #80]	; (8015070 <TIM_OC5_SetConfig+0xc4>)
 801501e:	4293      	cmp	r3, r2
 8015020:	d109      	bne.n	8015036 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	695b      	ldr	r3, [r3, #20]
 801502e:	021b      	lsls	r3, r3, #8
 8015030:	697a      	ldr	r2, [r7, #20]
 8015032:	4313      	orrs	r3, r2
 8015034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	697a      	ldr	r2, [r7, #20]
 801503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	685a      	ldr	r2, [r3, #4]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	693a      	ldr	r2, [r7, #16]
 801504e:	621a      	str	r2, [r3, #32]
}
 8015050:	bf00      	nop
 8015052:	371c      	adds	r7, #28
 8015054:	46bd      	mov	sp, r7
 8015056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505a:	4770      	bx	lr
 801505c:	fffeff8f 	.word	0xfffeff8f
 8015060:	40010000 	.word	0x40010000
 8015064:	40010400 	.word	0x40010400
 8015068:	40014000 	.word	0x40014000
 801506c:	40014400 	.word	0x40014400
 8015070:	40014800 	.word	0x40014800

08015074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8015074:	b480      	push	{r7}
 8015076:	b087      	sub	sp, #28
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6a1b      	ldr	r3, [r3, #32]
 8015082:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a1b      	ldr	r3, [r3, #32]
 8015088:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	685b      	ldr	r3, [r3, #4]
 8015094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801509c:	68fa      	ldr	r2, [r7, #12]
 801509e:	4b22      	ldr	r3, [pc, #136]	; (8015128 <TIM_OC6_SetConfig+0xb4>)
 80150a0:	4013      	ands	r3, r2
 80150a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	021b      	lsls	r3, r3, #8
 80150aa:	68fa      	ldr	r2, [r7, #12]
 80150ac:	4313      	orrs	r3, r2
 80150ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80150b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	689b      	ldr	r3, [r3, #8]
 80150bc:	051b      	lsls	r3, r3, #20
 80150be:	693a      	ldr	r2, [r7, #16]
 80150c0:	4313      	orrs	r3, r2
 80150c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	4a19      	ldr	r2, [pc, #100]	; (801512c <TIM_OC6_SetConfig+0xb8>)
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d00f      	beq.n	80150ec <TIM_OC6_SetConfig+0x78>
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	4a18      	ldr	r2, [pc, #96]	; (8015130 <TIM_OC6_SetConfig+0xbc>)
 80150d0:	4293      	cmp	r3, r2
 80150d2:	d00b      	beq.n	80150ec <TIM_OC6_SetConfig+0x78>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	4a17      	ldr	r2, [pc, #92]	; (8015134 <TIM_OC6_SetConfig+0xc0>)
 80150d8:	4293      	cmp	r3, r2
 80150da:	d007      	beq.n	80150ec <TIM_OC6_SetConfig+0x78>
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	4a16      	ldr	r2, [pc, #88]	; (8015138 <TIM_OC6_SetConfig+0xc4>)
 80150e0:	4293      	cmp	r3, r2
 80150e2:	d003      	beq.n	80150ec <TIM_OC6_SetConfig+0x78>
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	4a15      	ldr	r2, [pc, #84]	; (801513c <TIM_OC6_SetConfig+0xc8>)
 80150e8:	4293      	cmp	r3, r2
 80150ea:	d109      	bne.n	8015100 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80150f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	695b      	ldr	r3, [r3, #20]
 80150f8:	029b      	lsls	r3, r3, #10
 80150fa:	697a      	ldr	r2, [r7, #20]
 80150fc:	4313      	orrs	r3, r2
 80150fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	697a      	ldr	r2, [r7, #20]
 8015104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	68fa      	ldr	r2, [r7, #12]
 801510a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	685a      	ldr	r2, [r3, #4]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	693a      	ldr	r2, [r7, #16]
 8015118:	621a      	str	r2, [r3, #32]
}
 801511a:	bf00      	nop
 801511c:	371c      	adds	r7, #28
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	feff8fff 	.word	0xfeff8fff
 801512c:	40010000 	.word	0x40010000
 8015130:	40010400 	.word	0x40010400
 8015134:	40014000 	.word	0x40014000
 8015138:	40014400 	.word	0x40014400
 801513c:	40014800 	.word	0x40014800

08015140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015140:	b480      	push	{r7}
 8015142:	b087      	sub	sp, #28
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	6a1b      	ldr	r3, [r3, #32]
 8015150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	6a1b      	ldr	r3, [r3, #32]
 8015156:	f023 0201 	bic.w	r2, r3, #1
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	699b      	ldr	r3, [r3, #24]
 8015162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801516a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	011b      	lsls	r3, r3, #4
 8015170:	693a      	ldr	r2, [r7, #16]
 8015172:	4313      	orrs	r3, r2
 8015174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	f023 030a 	bic.w	r3, r3, #10
 801517c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801517e:	697a      	ldr	r2, [r7, #20]
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	4313      	orrs	r3, r2
 8015184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	693a      	ldr	r2, [r7, #16]
 801518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	697a      	ldr	r2, [r7, #20]
 8015190:	621a      	str	r2, [r3, #32]
}
 8015192:	bf00      	nop
 8015194:	371c      	adds	r7, #28
 8015196:	46bd      	mov	sp, r7
 8015198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519c:	4770      	bx	lr

0801519e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801519e:	b480      	push	{r7}
 80151a0:	b087      	sub	sp, #28
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	60f8      	str	r0, [r7, #12]
 80151a6:	60b9      	str	r1, [r7, #8]
 80151a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	6a1b      	ldr	r3, [r3, #32]
 80151ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	6a1b      	ldr	r3, [r3, #32]
 80151b4:	f023 0210 	bic.w	r2, r3, #16
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	699b      	ldr	r3, [r3, #24]
 80151c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80151c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	031b      	lsls	r3, r3, #12
 80151ce:	693a      	ldr	r2, [r7, #16]
 80151d0:	4313      	orrs	r3, r2
 80151d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80151da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	011b      	lsls	r3, r3, #4
 80151e0:	697a      	ldr	r2, [r7, #20]
 80151e2:	4313      	orrs	r3, r2
 80151e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	693a      	ldr	r2, [r7, #16]
 80151ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	697a      	ldr	r2, [r7, #20]
 80151f0:	621a      	str	r2, [r3, #32]
}
 80151f2:	bf00      	nop
 80151f4:	371c      	adds	r7, #28
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr
	...

08015200 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	689b      	ldr	r3, [r3, #8]
 801520e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	4b09      	ldr	r3, [pc, #36]	; (8015238 <TIM_ITRx_SetConfig+0x38>)
 8015214:	4013      	ands	r3, r2
 8015216:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015218:	683a      	ldr	r2, [r7, #0]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	4313      	orrs	r3, r2
 801521e:	f043 0307 	orr.w	r3, r3, #7
 8015222:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	609a      	str	r2, [r3, #8]
}
 801522a:	bf00      	nop
 801522c:	3714      	adds	r7, #20
 801522e:	46bd      	mov	sp, r7
 8015230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015234:	4770      	bx	lr
 8015236:	bf00      	nop
 8015238:	ffcfff8f 	.word	0xffcfff8f

0801523c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801523c:	b480      	push	{r7}
 801523e:	b087      	sub	sp, #28
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	60b9      	str	r1, [r7, #8]
 8015246:	607a      	str	r2, [r7, #4]
 8015248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	689b      	ldr	r3, [r3, #8]
 801524e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	021a      	lsls	r2, r3, #8
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	431a      	orrs	r2, r3
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	4313      	orrs	r3, r2
 8015264:	697a      	ldr	r2, [r7, #20]
 8015266:	4313      	orrs	r3, r2
 8015268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	697a      	ldr	r2, [r7, #20]
 801526e:	609a      	str	r2, [r3, #8]
}
 8015270:	bf00      	nop
 8015272:	371c      	adds	r7, #28
 8015274:	46bd      	mov	sp, r7
 8015276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527a:	4770      	bx	lr

0801527c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801527c:	b480      	push	{r7}
 801527e:	b087      	sub	sp, #28
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	f003 031f 	and.w	r3, r3, #31
 801528e:	2201      	movs	r2, #1
 8015290:	fa02 f303 	lsl.w	r3, r2, r3
 8015294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	6a1a      	ldr	r2, [r3, #32]
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	43db      	mvns	r3, r3
 801529e:	401a      	ands	r2, r3
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	6a1a      	ldr	r2, [r3, #32]
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	f003 031f 	and.w	r3, r3, #31
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	fa01 f303 	lsl.w	r3, r1, r3
 80152b4:	431a      	orrs	r2, r3
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	621a      	str	r2, [r3, #32]
}
 80152ba:	bf00      	nop
 80152bc:	371c      	adds	r7, #28
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr
	...

080152c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80152c8:	b480      	push	{r7}
 80152ca:	b085      	sub	sp, #20
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d101      	bne.n	80152e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80152dc:	2302      	movs	r3, #2
 80152de:	e06d      	b.n	80153bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2201      	movs	r2, #1
 80152e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2202      	movs	r2, #2
 80152ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	689b      	ldr	r3, [r3, #8]
 80152fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	4a30      	ldr	r2, [pc, #192]	; (80153c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d004      	beq.n	8015314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	4a2f      	ldr	r2, [pc, #188]	; (80153cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015310:	4293      	cmp	r3, r2
 8015312:	d108      	bne.n	8015326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801531a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	68fa      	ldr	r2, [r7, #12]
 8015322:	4313      	orrs	r3, r2
 8015324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801532c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	68fa      	ldr	r2, [r7, #12]
 8015334:	4313      	orrs	r3, r2
 8015336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	68fa      	ldr	r2, [r7, #12]
 801533e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4a20      	ldr	r2, [pc, #128]	; (80153c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d022      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015352:	d01d      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	4a1d      	ldr	r2, [pc, #116]	; (80153d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801535a:	4293      	cmp	r3, r2
 801535c:	d018      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4a1c      	ldr	r2, [pc, #112]	; (80153d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015364:	4293      	cmp	r3, r2
 8015366:	d013      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a1a      	ldr	r2, [pc, #104]	; (80153d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d00e      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	4a15      	ldr	r2, [pc, #84]	; (80153cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015378:	4293      	cmp	r3, r2
 801537a:	d009      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	4a16      	ldr	r2, [pc, #88]	; (80153dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8015382:	4293      	cmp	r3, r2
 8015384:	d004      	beq.n	8015390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	4a15      	ldr	r2, [pc, #84]	; (80153e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d10c      	bne.n	80153aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	689b      	ldr	r3, [r3, #8]
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	4313      	orrs	r3, r2
 80153a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2201      	movs	r2, #1
 80153ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2200      	movs	r2, #0
 80153b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80153ba:	2300      	movs	r3, #0
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3714      	adds	r7, #20
 80153c0:	46bd      	mov	sp, r7
 80153c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c6:	4770      	bx	lr
 80153c8:	40010000 	.word	0x40010000
 80153cc:	40010400 	.word	0x40010400
 80153d0:	40000400 	.word	0x40000400
 80153d4:	40000800 	.word	0x40000800
 80153d8:	40000c00 	.word	0x40000c00
 80153dc:	40001800 	.word	0x40001800
 80153e0:	40014000 	.word	0x40014000

080153e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80153e4:	b480      	push	{r7}
 80153e6:	b085      	sub	sp, #20
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80153ee:	2300      	movs	r3, #0
 80153f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153f8:	2b01      	cmp	r3, #1
 80153fa:	d101      	bne.n	8015400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80153fc:	2302      	movs	r3, #2
 80153fe:	e065      	b.n	80154cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2201      	movs	r2, #1
 8015404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	4313      	orrs	r3, r2
 8015414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	4313      	orrs	r3, r2
 8015422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	4313      	orrs	r3, r2
 8015430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	4313      	orrs	r3, r2
 801543e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	691b      	ldr	r3, [r3, #16]
 801544a:	4313      	orrs	r3, r2
 801544c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	695b      	ldr	r3, [r3, #20]
 8015458:	4313      	orrs	r3, r2
 801545a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015466:	4313      	orrs	r3, r2
 8015468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	699b      	ldr	r3, [r3, #24]
 8015474:	041b      	lsls	r3, r3, #16
 8015476:	4313      	orrs	r3, r2
 8015478:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	4a16      	ldr	r2, [pc, #88]	; (80154d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8015480:	4293      	cmp	r3, r2
 8015482:	d004      	beq.n	801548e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	4a14      	ldr	r2, [pc, #80]	; (80154dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801548a:	4293      	cmp	r3, r2
 801548c:	d115      	bne.n	80154ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015498:	051b      	lsls	r3, r3, #20
 801549a:	4313      	orrs	r3, r2
 801549c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	69db      	ldr	r3, [r3, #28]
 80154a8:	4313      	orrs	r3, r2
 80154aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	6a1b      	ldr	r3, [r3, #32]
 80154b6:	4313      	orrs	r3, r2
 80154b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	68fa      	ldr	r2, [r7, #12]
 80154c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2200      	movs	r2, #0
 80154c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80154ca:	2300      	movs	r3, #0
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3714      	adds	r7, #20
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr
 80154d8:	40010000 	.word	0x40010000
 80154dc:	40010400 	.word	0x40010400

080154e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80154e8:	bf00      	nop
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80154fc:	bf00      	nop
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015510:	bf00      	nop
 8015512:	370c      	adds	r7, #12
 8015514:	46bd      	mov	sp, r7
 8015516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551a:	4770      	bx	lr

0801551c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d101      	bne.n	801552e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801552a:	2301      	movs	r3, #1
 801552c:	e042      	b.n	80155b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015534:	2b00      	cmp	r3, #0
 8015536:	d106      	bne.n	8015546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2200      	movs	r2, #0
 801553c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f7f0 fca1 	bl	8005e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2224      	movs	r2, #36	; 0x24
 801554a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	f022 0201 	bic.w	r2, r2, #1
 801555c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015562:	2b00      	cmp	r3, #0
 8015564:	d002      	beq.n	801556c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f001 fbc2 	bl	8016cf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f000 fe57 	bl	8016220 <UART_SetConfig>
 8015572:	4603      	mov	r3, r0
 8015574:	2b01      	cmp	r3, #1
 8015576:	d101      	bne.n	801557c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8015578:	2301      	movs	r3, #1
 801557a:	e01b      	b.n	80155b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	685a      	ldr	r2, [r3, #4]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801558a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	689a      	ldr	r2, [r3, #8]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801559a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	681a      	ldr	r2, [r3, #0]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	f042 0201 	orr.w	r2, r2, #1
 80155aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f001 fc41 	bl	8016e34 <UART_CheckIdleState>
 80155b2:	4603      	mov	r3, r0
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b08a      	sub	sp, #40	; 0x28
 80155c0:	af02      	add	r7, sp, #8
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	603b      	str	r3, [r7, #0]
 80155c8:	4613      	mov	r3, r2
 80155ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155d2:	2b20      	cmp	r3, #32
 80155d4:	d17b      	bne.n	80156ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d002      	beq.n	80155e2 <HAL_UART_Transmit+0x26>
 80155dc:	88fb      	ldrh	r3, [r7, #6]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d101      	bne.n	80155e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80155e2:	2301      	movs	r3, #1
 80155e4:	e074      	b.n	80156d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2200      	movs	r2, #0
 80155ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2221      	movs	r2, #33	; 0x21
 80155f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80155f6:	f7f1 fa2b 	bl	8006a50 <HAL_GetTick>
 80155fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	88fa      	ldrh	r2, [r7, #6]
 8015600:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	88fa      	ldrh	r2, [r7, #6]
 8015608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	689b      	ldr	r3, [r3, #8]
 8015610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015614:	d108      	bne.n	8015628 <HAL_UART_Transmit+0x6c>
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	691b      	ldr	r3, [r3, #16]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d104      	bne.n	8015628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801561e:	2300      	movs	r3, #0
 8015620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	61bb      	str	r3, [r7, #24]
 8015626:	e003      	b.n	8015630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801562c:	2300      	movs	r3, #0
 801562e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015630:	e030      	b.n	8015694 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	2200      	movs	r2, #0
 801563a:	2180      	movs	r1, #128	; 0x80
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f001 fca3 	bl	8016f88 <UART_WaitOnFlagUntilTimeout>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d005      	beq.n	8015654 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2220      	movs	r2, #32
 801564c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8015650:	2303      	movs	r3, #3
 8015652:	e03d      	b.n	80156d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d10b      	bne.n	8015672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	881b      	ldrh	r3, [r3, #0]
 801565e:	461a      	mov	r2, r3
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	3302      	adds	r3, #2
 801566e:	61bb      	str	r3, [r7, #24]
 8015670:	e007      	b.n	8015682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	781a      	ldrb	r2, [r3, #0]
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	3301      	adds	r3, #1
 8015680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015688:	b29b      	uxth	r3, r3
 801568a:	3b01      	subs	r3, #1
 801568c:	b29a      	uxth	r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801569a:	b29b      	uxth	r3, r3
 801569c:	2b00      	cmp	r3, #0
 801569e:	d1c8      	bne.n	8015632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	2200      	movs	r2, #0
 80156a8:	2140      	movs	r1, #64	; 0x40
 80156aa:	68f8      	ldr	r0, [r7, #12]
 80156ac:	f001 fc6c 	bl	8016f88 <UART_WaitOnFlagUntilTimeout>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d005      	beq.n	80156c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2220      	movs	r2, #32
 80156ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80156be:	2303      	movs	r3, #3
 80156c0:	e006      	b.n	80156d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2220      	movs	r2, #32
 80156c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80156ca:	2300      	movs	r3, #0
 80156cc:	e000      	b.n	80156d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80156ce:	2302      	movs	r3, #2
  }
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3720      	adds	r7, #32
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b08a      	sub	sp, #40	; 0x28
 80156dc:	af02      	add	r7, sp, #8
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	603b      	str	r3, [r7, #0]
 80156e4:	4613      	mov	r3, r2
 80156e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156ee:	2b20      	cmp	r3, #32
 80156f0:	f040 80b5 	bne.w	801585e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d002      	beq.n	8015700 <HAL_UART_Receive+0x28>
 80156fa:	88fb      	ldrh	r3, [r7, #6]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d101      	bne.n	8015704 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8015700:	2301      	movs	r3, #1
 8015702:	e0ad      	b.n	8015860 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2200      	movs	r2, #0
 8015708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2222      	movs	r2, #34	; 0x22
 8015710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	2200      	movs	r2, #0
 8015718:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801571a:	f7f1 f999 	bl	8006a50 <HAL_GetTick>
 801571e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	88fa      	ldrh	r2, [r7, #6]
 8015724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	88fa      	ldrh	r2, [r7, #6]
 801572c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	689b      	ldr	r3, [r3, #8]
 8015734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015738:	d10e      	bne.n	8015758 <HAL_UART_Receive+0x80>
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	691b      	ldr	r3, [r3, #16]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d105      	bne.n	801574e <HAL_UART_Receive+0x76>
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015748:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801574c:	e02d      	b.n	80157aa <HAL_UART_Receive+0xd2>
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	22ff      	movs	r2, #255	; 0xff
 8015752:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015756:	e028      	b.n	80157aa <HAL_UART_Receive+0xd2>
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	689b      	ldr	r3, [r3, #8]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10d      	bne.n	801577c <HAL_UART_Receive+0xa4>
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d104      	bne.n	8015772 <HAL_UART_Receive+0x9a>
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	22ff      	movs	r2, #255	; 0xff
 801576c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015770:	e01b      	b.n	80157aa <HAL_UART_Receive+0xd2>
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	227f      	movs	r2, #127	; 0x7f
 8015776:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801577a:	e016      	b.n	80157aa <HAL_UART_Receive+0xd2>
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	689b      	ldr	r3, [r3, #8]
 8015780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015784:	d10d      	bne.n	80157a2 <HAL_UART_Receive+0xca>
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	691b      	ldr	r3, [r3, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d104      	bne.n	8015798 <HAL_UART_Receive+0xc0>
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	227f      	movs	r2, #127	; 0x7f
 8015792:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015796:	e008      	b.n	80157aa <HAL_UART_Receive+0xd2>
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	223f      	movs	r2, #63	; 0x3f
 801579c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80157a0:	e003      	b.n	80157aa <HAL_UART_Receive+0xd2>
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	2200      	movs	r2, #0
 80157a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	689b      	ldr	r3, [r3, #8]
 80157b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157ba:	d108      	bne.n	80157ce <HAL_UART_Receive+0xf6>
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	691b      	ldr	r3, [r3, #16]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d104      	bne.n	80157ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80157c4:	2300      	movs	r3, #0
 80157c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	61bb      	str	r3, [r7, #24]
 80157cc:	e003      	b.n	80157d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80157d2:	2300      	movs	r3, #0
 80157d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80157d6:	e036      	b.n	8015846 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	9300      	str	r3, [sp, #0]
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	2200      	movs	r2, #0
 80157e0:	2120      	movs	r1, #32
 80157e2:	68f8      	ldr	r0, [r7, #12]
 80157e4:	f001 fbd0 	bl	8016f88 <UART_WaitOnFlagUntilTimeout>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d005      	beq.n	80157fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2220      	movs	r2, #32
 80157f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80157f6:	2303      	movs	r3, #3
 80157f8:	e032      	b.n	8015860 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d10c      	bne.n	801581a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015806:	b29a      	uxth	r2, r3
 8015808:	8a7b      	ldrh	r3, [r7, #18]
 801580a:	4013      	ands	r3, r2
 801580c:	b29a      	uxth	r2, r3
 801580e:	69bb      	ldr	r3, [r7, #24]
 8015810:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015812:	69bb      	ldr	r3, [r7, #24]
 8015814:	3302      	adds	r3, #2
 8015816:	61bb      	str	r3, [r7, #24]
 8015818:	e00c      	b.n	8015834 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015820:	b2da      	uxtb	r2, r3
 8015822:	8a7b      	ldrh	r3, [r7, #18]
 8015824:	b2db      	uxtb	r3, r3
 8015826:	4013      	ands	r3, r2
 8015828:	b2da      	uxtb	r2, r3
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	3301      	adds	r3, #1
 8015832:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801583a:	b29b      	uxth	r3, r3
 801583c:	3b01      	subs	r3, #1
 801583e:	b29a      	uxth	r2, r3
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801584c:	b29b      	uxth	r3, r3
 801584e:	2b00      	cmp	r3, #0
 8015850:	d1c2      	bne.n	80157d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	2220      	movs	r2, #32
 8015856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801585a:	2300      	movs	r3, #0
 801585c:	e000      	b.n	8015860 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801585e:	2302      	movs	r3, #2
  }
}
 8015860:	4618      	mov	r0, r3
 8015862:	3720      	adds	r7, #32
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08a      	sub	sp, #40	; 0x28
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	4613      	mov	r3, r2
 8015874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801587c:	2b20      	cmp	r3, #32
 801587e:	d137      	bne.n	80158f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d002      	beq.n	801588c <HAL_UART_Receive_IT+0x24>
 8015886:	88fb      	ldrh	r3, [r7, #6]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d101      	bne.n	8015890 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801588c:	2301      	movs	r3, #1
 801588e:	e030      	b.n	80158f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2200      	movs	r2, #0
 8015894:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	4a18      	ldr	r2, [pc, #96]	; (80158fc <HAL_UART_Receive_IT+0x94>)
 801589c:	4293      	cmp	r3, r2
 801589e:	d01f      	beq.n	80158e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d018      	beq.n	80158e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	e853 3f00 	ldrex	r3, [r3]
 80158ba:	613b      	str	r3, [r7, #16]
   return(result);
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80158c2:	627b      	str	r3, [r7, #36]	; 0x24
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	461a      	mov	r2, r3
 80158ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158cc:	623b      	str	r3, [r7, #32]
 80158ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158d0:	69f9      	ldr	r1, [r7, #28]
 80158d2:	6a3a      	ldr	r2, [r7, #32]
 80158d4:	e841 2300 	strex	r3, r2, [r1]
 80158d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d1e6      	bne.n	80158ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80158e0:	88fb      	ldrh	r3, [r7, #6]
 80158e2:	461a      	mov	r2, r3
 80158e4:	68b9      	ldr	r1, [r7, #8]
 80158e6:	68f8      	ldr	r0, [r7, #12]
 80158e8:	f001 fbbc 	bl	8017064 <UART_Start_Receive_IT>
 80158ec:	4603      	mov	r3, r0
 80158ee:	e000      	b.n	80158f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80158f0:	2302      	movs	r3, #2
  }
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3728      	adds	r7, #40	; 0x28
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	58000c00 	.word	0x58000c00

08015900 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b09a      	sub	sp, #104	; 0x68
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015910:	e853 3f00 	ldrex	r3, [r3]
 8015914:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801591c:	667b      	str	r3, [r7, #100]	; 0x64
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	461a      	mov	r2, r3
 8015924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015926:	657b      	str	r3, [r7, #84]	; 0x54
 8015928:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801592a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801592c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801592e:	e841 2300 	strex	r3, r2, [r1]
 8015932:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015936:	2b00      	cmp	r3, #0
 8015938:	d1e6      	bne.n	8015908 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	3308      	adds	r3, #8
 8015940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015944:	e853 3f00 	ldrex	r3, [r3]
 8015948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801594a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801594c:	4b46      	ldr	r3, [pc, #280]	; (8015a68 <HAL_UART_AbortReceive+0x168>)
 801594e:	4013      	ands	r3, r2
 8015950:	663b      	str	r3, [r7, #96]	; 0x60
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	3308      	adds	r3, #8
 8015958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801595a:	643a      	str	r2, [r7, #64]	; 0x40
 801595c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801595e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015962:	e841 2300 	strex	r3, r2, [r1]
 8015966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801596a:	2b00      	cmp	r3, #0
 801596c:	d1e5      	bne.n	801593a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015972:	2b01      	cmp	r3, #1
 8015974:	d118      	bne.n	80159a8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801597c:	6a3b      	ldr	r3, [r7, #32]
 801597e:	e853 3f00 	ldrex	r3, [r3]
 8015982:	61fb      	str	r3, [r7, #28]
   return(result);
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	f023 0310 	bic.w	r3, r3, #16
 801598a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	461a      	mov	r2, r3
 8015992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015996:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801599a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801599c:	e841 2300 	strex	r3, r2, [r1]
 80159a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d1e6      	bne.n	8015976 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	689b      	ldr	r3, [r3, #8]
 80159ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159b2:	2b40      	cmp	r3, #64	; 0x40
 80159b4:	d13b      	bne.n	8015a2e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	3308      	adds	r3, #8
 80159bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	e853 3f00 	ldrex	r3, [r3]
 80159c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80159cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	3308      	adds	r3, #8
 80159d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80159d6:	61ba      	str	r2, [r7, #24]
 80159d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159da:	6979      	ldr	r1, [r7, #20]
 80159dc:	69ba      	ldr	r2, [r7, #24]
 80159de:	e841 2300 	strex	r3, r2, [r1]
 80159e2:	613b      	str	r3, [r7, #16]
   return(result);
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d1e5      	bne.n	80159b6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d01c      	beq.n	8015a2e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159fa:	2200      	movs	r2, #0
 80159fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7f3 ff11 	bl	800982c <HAL_DMA_Abort>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d00e      	beq.n	8015a2e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015a16:	4618      	mov	r0, r3
 8015a18:	f7f5 fba4 	bl	800b164 <HAL_DMA_GetError>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b20      	cmp	r3, #32
 8015a20:	d105      	bne.n	8015a2e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2210      	movs	r2, #16
 8015a26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8015a2a:	2303      	movs	r3, #3
 8015a2c:	e017      	b.n	8015a5e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2200      	movs	r2, #0
 8015a32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	220f      	movs	r2, #15
 8015a3c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	699a      	ldr	r2, [r3, #24]
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	f042 0208 	orr.w	r2, r2, #8
 8015a4c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2220      	movs	r2, #32
 8015a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8015a5c:	2300      	movs	r3, #0
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3768      	adds	r7, #104	; 0x68
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	effffffe 	.word	0xeffffffe

08015a6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b0ba      	sub	sp, #232	; 0xe8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	69db      	ldr	r3, [r3, #28]
 8015a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	689b      	ldr	r3, [r3, #8]
 8015a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015a92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8015a9a:	4013      	ands	r3, r2
 8015a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8015aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d11b      	bne.n	8015ae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015aac:	f003 0320 	and.w	r3, r3, #32
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d015      	beq.n	8015ae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ab8:	f003 0320 	and.w	r3, r3, #32
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d105      	bne.n	8015acc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d009      	beq.n	8015ae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	f000 8377 	beq.w	80161c4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	4798      	blx	r3
      }
      return;
 8015ade:	e371      	b.n	80161c4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f000 8123 	beq.w	8015d30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015aea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015aee:	4b8d      	ldr	r3, [pc, #564]	; (8015d24 <HAL_UART_IRQHandler+0x2b8>)
 8015af0:	4013      	ands	r3, r2
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d106      	bne.n	8015b04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015afa:	4b8b      	ldr	r3, [pc, #556]	; (8015d28 <HAL_UART_IRQHandler+0x2bc>)
 8015afc:	4013      	ands	r3, r2
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	f000 8116 	beq.w	8015d30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b08:	f003 0301 	and.w	r3, r3, #1
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d011      	beq.n	8015b34 <HAL_UART_IRQHandler+0xc8>
 8015b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d00b      	beq.n	8015b34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	2201      	movs	r2, #1
 8015b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b2a:	f043 0201 	orr.w	r2, r3, #1
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b38:	f003 0302 	and.w	r3, r3, #2
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d011      	beq.n	8015b64 <HAL_UART_IRQHandler+0xf8>
 8015b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015b44:	f003 0301 	and.w	r3, r3, #1
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d00b      	beq.n	8015b64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	2202      	movs	r2, #2
 8015b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b5a:	f043 0204 	orr.w	r2, r3, #4
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b68:	f003 0304 	and.w	r3, r3, #4
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d011      	beq.n	8015b94 <HAL_UART_IRQHandler+0x128>
 8015b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015b74:	f003 0301 	and.w	r3, r3, #1
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d00b      	beq.n	8015b94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2204      	movs	r2, #4
 8015b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b8a:	f043 0202 	orr.w	r2, r3, #2
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b98:	f003 0308 	and.w	r3, r3, #8
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d017      	beq.n	8015bd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ba4:	f003 0320 	and.w	r3, r3, #32
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d105      	bne.n	8015bb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015bac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015bb0:	4b5c      	ldr	r3, [pc, #368]	; (8015d24 <HAL_UART_IRQHandler+0x2b8>)
 8015bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d00b      	beq.n	8015bd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	2208      	movs	r2, #8
 8015bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bc6:	f043 0208 	orr.w	r2, r3, #8
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d012      	beq.n	8015c02 <HAL_UART_IRQHandler+0x196>
 8015bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d00c      	beq.n	8015c02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bf8:	f043 0220 	orr.w	r2, r3, #32
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	f000 82dd 	beq.w	80161c8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c12:	f003 0320 	and.w	r3, r3, #32
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d013      	beq.n	8015c42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015c1e:	f003 0320 	and.w	r3, r3, #32
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d105      	bne.n	8015c32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d007      	beq.n	8015c42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d003      	beq.n	8015c42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	689b      	ldr	r3, [r3, #8]
 8015c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c56:	2b40      	cmp	r3, #64	; 0x40
 8015c58:	d005      	beq.n	8015c66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d054      	beq.n	8015d10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f001 fb1e 	bl	80172a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	689b      	ldr	r3, [r3, #8]
 8015c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c76:	2b40      	cmp	r3, #64	; 0x40
 8015c78:	d146      	bne.n	8015d08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	3308      	adds	r3, #8
 8015c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c88:	e853 3f00 	ldrex	r3, [r3]
 8015c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	3308      	adds	r3, #8
 8015ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015cb6:	e841 2300 	strex	r3, r2, [r1]
 8015cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d1d9      	bne.n	8015c7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d017      	beq.n	8015d00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015cd6:	4a15      	ldr	r2, [pc, #84]	; (8015d2c <HAL_UART_IRQHandler+0x2c0>)
 8015cd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f4 f8c1 	bl	8009e68 <HAL_DMA_Abort_IT>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d019      	beq.n	8015d20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015cfa:	4610      	mov	r0, r2
 8015cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cfe:	e00f      	b.n	8015d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f000 fa77 	bl	80161f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d06:	e00b      	b.n	8015d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f000 fa73 	bl	80161f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d0e:	e007      	b.n	8015d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f000 fa6f 	bl	80161f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8015d1e:	e253      	b.n	80161c8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d20:	bf00      	nop
    return;
 8015d22:	e251      	b.n	80161c8 <HAL_UART_IRQHandler+0x75c>
 8015d24:	10000001 	.word	0x10000001
 8015d28:	04000120 	.word	0x04000120
 8015d2c:	08017375 	.word	0x08017375

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	f040 81e7 	bne.w	8016108 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d3e:	f003 0310 	and.w	r3, r3, #16
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	f000 81e0 	beq.w	8016108 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d4c:	f003 0310 	and.w	r3, r3, #16
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	f000 81d9 	beq.w	8016108 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2210      	movs	r2, #16
 8015d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	689b      	ldr	r3, [r3, #8]
 8015d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d68:	2b40      	cmp	r3, #64	; 0x40
 8015d6a:	f040 8151 	bne.w	8016010 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	4a96      	ldr	r2, [pc, #600]	; (8015fd0 <HAL_UART_IRQHandler+0x564>)
 8015d78:	4293      	cmp	r3, r2
 8015d7a:	d068      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	4a93      	ldr	r2, [pc, #588]	; (8015fd4 <HAL_UART_IRQHandler+0x568>)
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d061      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	4a91      	ldr	r2, [pc, #580]	; (8015fd8 <HAL_UART_IRQHandler+0x56c>)
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d05a      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	4a8e      	ldr	r2, [pc, #568]	; (8015fdc <HAL_UART_IRQHandler+0x570>)
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d053      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	4a8c      	ldr	r2, [pc, #560]	; (8015fe0 <HAL_UART_IRQHandler+0x574>)
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d04c      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	4a89      	ldr	r2, [pc, #548]	; (8015fe4 <HAL_UART_IRQHandler+0x578>)
 8015dbe:	4293      	cmp	r3, r2
 8015dc0:	d045      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	4a87      	ldr	r2, [pc, #540]	; (8015fe8 <HAL_UART_IRQHandler+0x57c>)
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d03e      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4a84      	ldr	r2, [pc, #528]	; (8015fec <HAL_UART_IRQHandler+0x580>)
 8015dda:	4293      	cmp	r3, r2
 8015ddc:	d037      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4a82      	ldr	r2, [pc, #520]	; (8015ff0 <HAL_UART_IRQHandler+0x584>)
 8015de8:	4293      	cmp	r3, r2
 8015dea:	d030      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	4a7f      	ldr	r2, [pc, #508]	; (8015ff4 <HAL_UART_IRQHandler+0x588>)
 8015df6:	4293      	cmp	r3, r2
 8015df8:	d029      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	4a7d      	ldr	r2, [pc, #500]	; (8015ff8 <HAL_UART_IRQHandler+0x58c>)
 8015e04:	4293      	cmp	r3, r2
 8015e06:	d022      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	4a7a      	ldr	r2, [pc, #488]	; (8015ffc <HAL_UART_IRQHandler+0x590>)
 8015e12:	4293      	cmp	r3, r2
 8015e14:	d01b      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	4a78      	ldr	r2, [pc, #480]	; (8016000 <HAL_UART_IRQHandler+0x594>)
 8015e20:	4293      	cmp	r3, r2
 8015e22:	d014      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	4a75      	ldr	r2, [pc, #468]	; (8016004 <HAL_UART_IRQHandler+0x598>)
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d00d      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	4a73      	ldr	r2, [pc, #460]	; (8016008 <HAL_UART_IRQHandler+0x59c>)
 8015e3c:	4293      	cmp	r3, r2
 8015e3e:	d006      	beq.n	8015e4e <HAL_UART_IRQHandler+0x3e2>
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	4a70      	ldr	r2, [pc, #448]	; (801600c <HAL_UART_IRQHandler+0x5a0>)
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	d106      	bne.n	8015e5c <HAL_UART_IRQHandler+0x3f0>
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	685b      	ldr	r3, [r3, #4]
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	e005      	b.n	8015e68 <HAL_UART_IRQHandler+0x3fc>
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	f000 81ab 	beq.w	80161cc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015e7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015e80:	429a      	cmp	r2, r3
 8015e82:	f080 81a3 	bcs.w	80161cc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e96:	69db      	ldr	r3, [r3, #28]
 8015e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e9c:	f000 8087 	beq.w	8015fae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015eac:	e853 3f00 	ldrex	r3, [r3]
 8015eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015ece:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015eda:	e841 2300 	strex	r3, r2, [r1]
 8015ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d1da      	bne.n	8015ea0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	3308      	adds	r3, #8
 8015ef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ef4:	e853 3f00 	ldrex	r3, [r3]
 8015ef8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015efc:	f023 0301 	bic.w	r3, r3, #1
 8015f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	3308      	adds	r3, #8
 8015f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015f0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015f12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015f1a:	e841 2300 	strex	r3, r2, [r1]
 8015f1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d1e1      	bne.n	8015eea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	3308      	adds	r3, #8
 8015f2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f30:	e853 3f00 	ldrex	r3, [r3]
 8015f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	3308      	adds	r3, #8
 8015f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015f4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015f4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f52:	e841 2300 	strex	r3, r2, [r1]
 8015f56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d1e3      	bne.n	8015f26 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2220      	movs	r2, #32
 8015f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f74:	e853 3f00 	ldrex	r3, [r3]
 8015f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f7c:	f023 0310 	bic.w	r3, r3, #16
 8015f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	461a      	mov	r2, r3
 8015f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015f90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f96:	e841 2300 	strex	r3, r2, [r1]
 8015f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d1e4      	bne.n	8015f6c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f3 fc3f 	bl	800982c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2202      	movs	r2, #2
 8015fb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	1ad3      	subs	r3, r2, r3
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f000 f91d 	bl	8016208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015fce:	e0fd      	b.n	80161cc <HAL_UART_IRQHandler+0x760>
 8015fd0:	40020010 	.word	0x40020010
 8015fd4:	40020028 	.word	0x40020028
 8015fd8:	40020040 	.word	0x40020040
 8015fdc:	40020058 	.word	0x40020058
 8015fe0:	40020070 	.word	0x40020070
 8015fe4:	40020088 	.word	0x40020088
 8015fe8:	400200a0 	.word	0x400200a0
 8015fec:	400200b8 	.word	0x400200b8
 8015ff0:	40020410 	.word	0x40020410
 8015ff4:	40020428 	.word	0x40020428
 8015ff8:	40020440 	.word	0x40020440
 8015ffc:	40020458 	.word	0x40020458
 8016000:	40020470 	.word	0x40020470
 8016004:	40020488 	.word	0x40020488
 8016008:	400204a0 	.word	0x400204a0
 801600c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801601c:	b29b      	uxth	r3, r3
 801601e:	1ad3      	subs	r3, r2, r3
 8016020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801602a:	b29b      	uxth	r3, r3
 801602c:	2b00      	cmp	r3, #0
 801602e:	f000 80cf 	beq.w	80161d0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8016032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016036:	2b00      	cmp	r3, #0
 8016038:	f000 80ca 	beq.w	80161d0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016044:	e853 3f00 	ldrex	r3, [r3]
 8016048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801604c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	461a      	mov	r2, r3
 801605a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801605e:	647b      	str	r3, [r7, #68]	; 0x44
 8016060:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016066:	e841 2300 	strex	r3, r2, [r1]
 801606a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1e4      	bne.n	801603c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	3308      	adds	r3, #8
 8016078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607c:	e853 3f00 	ldrex	r3, [r3]
 8016080:	623b      	str	r3, [r7, #32]
   return(result);
 8016082:	6a3a      	ldr	r2, [r7, #32]
 8016084:	4b55      	ldr	r3, [pc, #340]	; (80161dc <HAL_UART_IRQHandler+0x770>)
 8016086:	4013      	ands	r3, r2
 8016088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	3308      	adds	r3, #8
 8016092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016096:	633a      	str	r2, [r7, #48]	; 0x30
 8016098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801609a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801609c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801609e:	e841 2300 	strex	r3, r2, [r1]
 80160a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80160a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d1e3      	bne.n	8016072 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2220      	movs	r2, #32
 80160ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2200      	movs	r2, #0
 80160b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2200      	movs	r2, #0
 80160bc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	e853 3f00 	ldrex	r3, [r3]
 80160ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f023 0310 	bic.w	r3, r3, #16
 80160d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	461a      	mov	r2, r3
 80160dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80160e0:	61fb      	str	r3, [r7, #28]
 80160e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160e4:	69b9      	ldr	r1, [r7, #24]
 80160e6:	69fa      	ldr	r2, [r7, #28]
 80160e8:	e841 2300 	strex	r3, r2, [r1]
 80160ec:	617b      	str	r3, [r7, #20]
   return(result);
 80160ee:	697b      	ldr	r3, [r7, #20]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d1e4      	bne.n	80160be <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2202      	movs	r2, #2
 80160f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80160fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80160fe:	4619      	mov	r1, r3
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 f881 	bl	8016208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016106:	e063      	b.n	80161d0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801610c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016110:	2b00      	cmp	r3, #0
 8016112:	d00e      	beq.n	8016132 <HAL_UART_IRQHandler+0x6c6>
 8016114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801611c:	2b00      	cmp	r3, #0
 801611e:	d008      	beq.n	8016132 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f001 fe80 	bl	8017e30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016130:	e051      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801613a:	2b00      	cmp	r3, #0
 801613c:	d014      	beq.n	8016168 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801613e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016146:	2b00      	cmp	r3, #0
 8016148:	d105      	bne.n	8016156 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801614a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801614e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016152:	2b00      	cmp	r3, #0
 8016154:	d008      	beq.n	8016168 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801615a:	2b00      	cmp	r3, #0
 801615c:	d03a      	beq.n	80161d4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	4798      	blx	r3
    }
    return;
 8016166:	e035      	b.n	80161d4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016170:	2b00      	cmp	r3, #0
 8016172:	d009      	beq.n	8016188 <HAL_UART_IRQHandler+0x71c>
 8016174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801617c:	2b00      	cmp	r3, #0
 801617e:	d003      	beq.n	8016188 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f001 f90d 	bl	80173a0 <UART_EndTransmit_IT>
    return;
 8016186:	e026      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801618c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016190:	2b00      	cmp	r3, #0
 8016192:	d009      	beq.n	80161a8 <HAL_UART_IRQHandler+0x73c>
 8016194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016198:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801619c:	2b00      	cmp	r3, #0
 801619e:	d003      	beq.n	80161a8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f001 fe59 	bl	8017e58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80161a6:	e016      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80161a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d010      	beq.n	80161d6 <HAL_UART_IRQHandler+0x76a>
 80161b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	da0c      	bge.n	80161d6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f001 fe41 	bl	8017e44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80161c2:	e008      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80161c4:	bf00      	nop
 80161c6:	e006      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80161c8:	bf00      	nop
 80161ca:	e004      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80161cc:	bf00      	nop
 80161ce:	e002      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80161d0:	bf00      	nop
 80161d2:	e000      	b.n	80161d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80161d4:	bf00      	nop
  }
}
 80161d6:	37e8      	adds	r7, #232	; 0xe8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	effffffe 	.word	0xeffffffe

080161e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b083      	sub	sp, #12
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80161e8:	bf00      	nop
 80161ea:	370c      	adds	r7, #12
 80161ec:	46bd      	mov	sp, r7
 80161ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f2:	4770      	bx	lr

080161f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80161f4:	b480      	push	{r7}
 80161f6:	b083      	sub	sp, #12
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80161fc:	bf00      	nop
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr

08016208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016208:	b480      	push	{r7}
 801620a:	b083      	sub	sp, #12
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	460b      	mov	r3, r1
 8016212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016214:	bf00      	nop
 8016216:	370c      	adds	r7, #12
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr

08016220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016224:	b092      	sub	sp, #72	; 0x48
 8016226:	af00      	add	r7, sp, #0
 8016228:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801622a:	2300      	movs	r3, #0
 801622c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	689a      	ldr	r2, [r3, #8]
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	691b      	ldr	r3, [r3, #16]
 8016238:	431a      	orrs	r2, r3
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	695b      	ldr	r3, [r3, #20]
 801623e:	431a      	orrs	r2, r3
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	69db      	ldr	r3, [r3, #28]
 8016244:	4313      	orrs	r3, r2
 8016246:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016248:	697b      	ldr	r3, [r7, #20]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	681a      	ldr	r2, [r3, #0]
 801624e:	4bbe      	ldr	r3, [pc, #760]	; (8016548 <UART_SetConfig+0x328>)
 8016250:	4013      	ands	r3, r2
 8016252:	697a      	ldr	r2, [r7, #20]
 8016254:	6812      	ldr	r2, [r2, #0]
 8016256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016258:	430b      	orrs	r3, r1
 801625a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016266:	697b      	ldr	r3, [r7, #20]
 8016268:	68da      	ldr	r2, [r3, #12]
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	430a      	orrs	r2, r1
 8016270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016272:	697b      	ldr	r3, [r7, #20]
 8016274:	699b      	ldr	r3, [r3, #24]
 8016276:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016278:	697b      	ldr	r3, [r7, #20]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	4ab3      	ldr	r2, [pc, #716]	; (801654c <UART_SetConfig+0x32c>)
 801627e:	4293      	cmp	r3, r2
 8016280:	d004      	beq.n	801628c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	6a1b      	ldr	r3, [r3, #32]
 8016286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016288:	4313      	orrs	r3, r2
 801628a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801628c:	697b      	ldr	r3, [r7, #20]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	689a      	ldr	r2, [r3, #8]
 8016292:	4baf      	ldr	r3, [pc, #700]	; (8016550 <UART_SetConfig+0x330>)
 8016294:	4013      	ands	r3, r2
 8016296:	697a      	ldr	r2, [r7, #20]
 8016298:	6812      	ldr	r2, [r2, #0]
 801629a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801629c:	430b      	orrs	r3, r1
 801629e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162a6:	f023 010f 	bic.w	r1, r3, #15
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	430a      	orrs	r2, r1
 80162b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	4aa6      	ldr	r2, [pc, #664]	; (8016554 <UART_SetConfig+0x334>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	d177      	bne.n	80163b0 <UART_SetConfig+0x190>
 80162c0:	4ba5      	ldr	r3, [pc, #660]	; (8016558 <UART_SetConfig+0x338>)
 80162c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80162c8:	2b28      	cmp	r3, #40	; 0x28
 80162ca:	d86d      	bhi.n	80163a8 <UART_SetConfig+0x188>
 80162cc:	a201      	add	r2, pc, #4	; (adr r2, 80162d4 <UART_SetConfig+0xb4>)
 80162ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162d2:	bf00      	nop
 80162d4:	08016379 	.word	0x08016379
 80162d8:	080163a9 	.word	0x080163a9
 80162dc:	080163a9 	.word	0x080163a9
 80162e0:	080163a9 	.word	0x080163a9
 80162e4:	080163a9 	.word	0x080163a9
 80162e8:	080163a9 	.word	0x080163a9
 80162ec:	080163a9 	.word	0x080163a9
 80162f0:	080163a9 	.word	0x080163a9
 80162f4:	08016381 	.word	0x08016381
 80162f8:	080163a9 	.word	0x080163a9
 80162fc:	080163a9 	.word	0x080163a9
 8016300:	080163a9 	.word	0x080163a9
 8016304:	080163a9 	.word	0x080163a9
 8016308:	080163a9 	.word	0x080163a9
 801630c:	080163a9 	.word	0x080163a9
 8016310:	080163a9 	.word	0x080163a9
 8016314:	08016389 	.word	0x08016389
 8016318:	080163a9 	.word	0x080163a9
 801631c:	080163a9 	.word	0x080163a9
 8016320:	080163a9 	.word	0x080163a9
 8016324:	080163a9 	.word	0x080163a9
 8016328:	080163a9 	.word	0x080163a9
 801632c:	080163a9 	.word	0x080163a9
 8016330:	080163a9 	.word	0x080163a9
 8016334:	08016391 	.word	0x08016391
 8016338:	080163a9 	.word	0x080163a9
 801633c:	080163a9 	.word	0x080163a9
 8016340:	080163a9 	.word	0x080163a9
 8016344:	080163a9 	.word	0x080163a9
 8016348:	080163a9 	.word	0x080163a9
 801634c:	080163a9 	.word	0x080163a9
 8016350:	080163a9 	.word	0x080163a9
 8016354:	08016399 	.word	0x08016399
 8016358:	080163a9 	.word	0x080163a9
 801635c:	080163a9 	.word	0x080163a9
 8016360:	080163a9 	.word	0x080163a9
 8016364:	080163a9 	.word	0x080163a9
 8016368:	080163a9 	.word	0x080163a9
 801636c:	080163a9 	.word	0x080163a9
 8016370:	080163a9 	.word	0x080163a9
 8016374:	080163a1 	.word	0x080163a1
 8016378:	2301      	movs	r3, #1
 801637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801637e:	e222      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016380:	2304      	movs	r3, #4
 8016382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016386:	e21e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016388:	2308      	movs	r3, #8
 801638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801638e:	e21a      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016390:	2310      	movs	r3, #16
 8016392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016396:	e216      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016398:	2320      	movs	r3, #32
 801639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801639e:	e212      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80163a0:	2340      	movs	r3, #64	; 0x40
 80163a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163a6:	e20e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80163a8:	2380      	movs	r3, #128	; 0x80
 80163aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163ae:	e20a      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4a69      	ldr	r2, [pc, #420]	; (801655c <UART_SetConfig+0x33c>)
 80163b6:	4293      	cmp	r3, r2
 80163b8:	d130      	bne.n	801641c <UART_SetConfig+0x1fc>
 80163ba:	4b67      	ldr	r3, [pc, #412]	; (8016558 <UART_SetConfig+0x338>)
 80163bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163be:	f003 0307 	and.w	r3, r3, #7
 80163c2:	2b05      	cmp	r3, #5
 80163c4:	d826      	bhi.n	8016414 <UART_SetConfig+0x1f4>
 80163c6:	a201      	add	r2, pc, #4	; (adr r2, 80163cc <UART_SetConfig+0x1ac>)
 80163c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163cc:	080163e5 	.word	0x080163e5
 80163d0:	080163ed 	.word	0x080163ed
 80163d4:	080163f5 	.word	0x080163f5
 80163d8:	080163fd 	.word	0x080163fd
 80163dc:	08016405 	.word	0x08016405
 80163e0:	0801640d 	.word	0x0801640d
 80163e4:	2300      	movs	r3, #0
 80163e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163ea:	e1ec      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80163ec:	2304      	movs	r3, #4
 80163ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163f2:	e1e8      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80163f4:	2308      	movs	r3, #8
 80163f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163fa:	e1e4      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80163fc:	2310      	movs	r3, #16
 80163fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016402:	e1e0      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016404:	2320      	movs	r3, #32
 8016406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801640a:	e1dc      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801640c:	2340      	movs	r3, #64	; 0x40
 801640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016412:	e1d8      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016414:	2380      	movs	r3, #128	; 0x80
 8016416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801641a:	e1d4      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	4a4f      	ldr	r2, [pc, #316]	; (8016560 <UART_SetConfig+0x340>)
 8016422:	4293      	cmp	r3, r2
 8016424:	d130      	bne.n	8016488 <UART_SetConfig+0x268>
 8016426:	4b4c      	ldr	r3, [pc, #304]	; (8016558 <UART_SetConfig+0x338>)
 8016428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801642a:	f003 0307 	and.w	r3, r3, #7
 801642e:	2b05      	cmp	r3, #5
 8016430:	d826      	bhi.n	8016480 <UART_SetConfig+0x260>
 8016432:	a201      	add	r2, pc, #4	; (adr r2, 8016438 <UART_SetConfig+0x218>)
 8016434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016438:	08016451 	.word	0x08016451
 801643c:	08016459 	.word	0x08016459
 8016440:	08016461 	.word	0x08016461
 8016444:	08016469 	.word	0x08016469
 8016448:	08016471 	.word	0x08016471
 801644c:	08016479 	.word	0x08016479
 8016450:	2300      	movs	r3, #0
 8016452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016456:	e1b6      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016458:	2304      	movs	r3, #4
 801645a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801645e:	e1b2      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016460:	2308      	movs	r3, #8
 8016462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016466:	e1ae      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016468:	2310      	movs	r3, #16
 801646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801646e:	e1aa      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016470:	2320      	movs	r3, #32
 8016472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016476:	e1a6      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016478:	2340      	movs	r3, #64	; 0x40
 801647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801647e:	e1a2      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016480:	2380      	movs	r3, #128	; 0x80
 8016482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016486:	e19e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	4a35      	ldr	r2, [pc, #212]	; (8016564 <UART_SetConfig+0x344>)
 801648e:	4293      	cmp	r3, r2
 8016490:	d130      	bne.n	80164f4 <UART_SetConfig+0x2d4>
 8016492:	4b31      	ldr	r3, [pc, #196]	; (8016558 <UART_SetConfig+0x338>)
 8016494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016496:	f003 0307 	and.w	r3, r3, #7
 801649a:	2b05      	cmp	r3, #5
 801649c:	d826      	bhi.n	80164ec <UART_SetConfig+0x2cc>
 801649e:	a201      	add	r2, pc, #4	; (adr r2, 80164a4 <UART_SetConfig+0x284>)
 80164a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164a4:	080164bd 	.word	0x080164bd
 80164a8:	080164c5 	.word	0x080164c5
 80164ac:	080164cd 	.word	0x080164cd
 80164b0:	080164d5 	.word	0x080164d5
 80164b4:	080164dd 	.word	0x080164dd
 80164b8:	080164e5 	.word	0x080164e5
 80164bc:	2300      	movs	r3, #0
 80164be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164c2:	e180      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164c4:	2304      	movs	r3, #4
 80164c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164ca:	e17c      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164cc:	2308      	movs	r3, #8
 80164ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164d2:	e178      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164d4:	2310      	movs	r3, #16
 80164d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164da:	e174      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164dc:	2320      	movs	r3, #32
 80164de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164e2:	e170      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164e4:	2340      	movs	r3, #64	; 0x40
 80164e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164ea:	e16c      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164ec:	2380      	movs	r3, #128	; 0x80
 80164ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164f2:	e168      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	4a1b      	ldr	r2, [pc, #108]	; (8016568 <UART_SetConfig+0x348>)
 80164fa:	4293      	cmp	r3, r2
 80164fc:	d142      	bne.n	8016584 <UART_SetConfig+0x364>
 80164fe:	4b16      	ldr	r3, [pc, #88]	; (8016558 <UART_SetConfig+0x338>)
 8016500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016502:	f003 0307 	and.w	r3, r3, #7
 8016506:	2b05      	cmp	r3, #5
 8016508:	d838      	bhi.n	801657c <UART_SetConfig+0x35c>
 801650a:	a201      	add	r2, pc, #4	; (adr r2, 8016510 <UART_SetConfig+0x2f0>)
 801650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016510:	08016529 	.word	0x08016529
 8016514:	08016531 	.word	0x08016531
 8016518:	08016539 	.word	0x08016539
 801651c:	08016541 	.word	0x08016541
 8016520:	0801656d 	.word	0x0801656d
 8016524:	08016575 	.word	0x08016575
 8016528:	2300      	movs	r3, #0
 801652a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801652e:	e14a      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016530:	2304      	movs	r3, #4
 8016532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016536:	e146      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016538:	2308      	movs	r3, #8
 801653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801653e:	e142      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016540:	2310      	movs	r3, #16
 8016542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016546:	e13e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016548:	cfff69f3 	.word	0xcfff69f3
 801654c:	58000c00 	.word	0x58000c00
 8016550:	11fff4ff 	.word	0x11fff4ff
 8016554:	40011000 	.word	0x40011000
 8016558:	58024400 	.word	0x58024400
 801655c:	40004400 	.word	0x40004400
 8016560:	40004800 	.word	0x40004800
 8016564:	40004c00 	.word	0x40004c00
 8016568:	40005000 	.word	0x40005000
 801656c:	2320      	movs	r3, #32
 801656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016572:	e128      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016574:	2340      	movs	r3, #64	; 0x40
 8016576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801657a:	e124      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801657c:	2380      	movs	r3, #128	; 0x80
 801657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016582:	e120      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	4acb      	ldr	r2, [pc, #812]	; (80168b8 <UART_SetConfig+0x698>)
 801658a:	4293      	cmp	r3, r2
 801658c:	d176      	bne.n	801667c <UART_SetConfig+0x45c>
 801658e:	4bcb      	ldr	r3, [pc, #812]	; (80168bc <UART_SetConfig+0x69c>)
 8016590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016596:	2b28      	cmp	r3, #40	; 0x28
 8016598:	d86c      	bhi.n	8016674 <UART_SetConfig+0x454>
 801659a:	a201      	add	r2, pc, #4	; (adr r2, 80165a0 <UART_SetConfig+0x380>)
 801659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165a0:	08016645 	.word	0x08016645
 80165a4:	08016675 	.word	0x08016675
 80165a8:	08016675 	.word	0x08016675
 80165ac:	08016675 	.word	0x08016675
 80165b0:	08016675 	.word	0x08016675
 80165b4:	08016675 	.word	0x08016675
 80165b8:	08016675 	.word	0x08016675
 80165bc:	08016675 	.word	0x08016675
 80165c0:	0801664d 	.word	0x0801664d
 80165c4:	08016675 	.word	0x08016675
 80165c8:	08016675 	.word	0x08016675
 80165cc:	08016675 	.word	0x08016675
 80165d0:	08016675 	.word	0x08016675
 80165d4:	08016675 	.word	0x08016675
 80165d8:	08016675 	.word	0x08016675
 80165dc:	08016675 	.word	0x08016675
 80165e0:	08016655 	.word	0x08016655
 80165e4:	08016675 	.word	0x08016675
 80165e8:	08016675 	.word	0x08016675
 80165ec:	08016675 	.word	0x08016675
 80165f0:	08016675 	.word	0x08016675
 80165f4:	08016675 	.word	0x08016675
 80165f8:	08016675 	.word	0x08016675
 80165fc:	08016675 	.word	0x08016675
 8016600:	0801665d 	.word	0x0801665d
 8016604:	08016675 	.word	0x08016675
 8016608:	08016675 	.word	0x08016675
 801660c:	08016675 	.word	0x08016675
 8016610:	08016675 	.word	0x08016675
 8016614:	08016675 	.word	0x08016675
 8016618:	08016675 	.word	0x08016675
 801661c:	08016675 	.word	0x08016675
 8016620:	08016665 	.word	0x08016665
 8016624:	08016675 	.word	0x08016675
 8016628:	08016675 	.word	0x08016675
 801662c:	08016675 	.word	0x08016675
 8016630:	08016675 	.word	0x08016675
 8016634:	08016675 	.word	0x08016675
 8016638:	08016675 	.word	0x08016675
 801663c:	08016675 	.word	0x08016675
 8016640:	0801666d 	.word	0x0801666d
 8016644:	2301      	movs	r3, #1
 8016646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801664a:	e0bc      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801664c:	2304      	movs	r3, #4
 801664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016652:	e0b8      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016654:	2308      	movs	r3, #8
 8016656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801665a:	e0b4      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801665c:	2310      	movs	r3, #16
 801665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016662:	e0b0      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016664:	2320      	movs	r3, #32
 8016666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801666a:	e0ac      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801666c:	2340      	movs	r3, #64	; 0x40
 801666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016672:	e0a8      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016674:	2380      	movs	r3, #128	; 0x80
 8016676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801667a:	e0a4      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a8f      	ldr	r2, [pc, #572]	; (80168c0 <UART_SetConfig+0x6a0>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d130      	bne.n	80166e8 <UART_SetConfig+0x4c8>
 8016686:	4b8d      	ldr	r3, [pc, #564]	; (80168bc <UART_SetConfig+0x69c>)
 8016688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801668a:	f003 0307 	and.w	r3, r3, #7
 801668e:	2b05      	cmp	r3, #5
 8016690:	d826      	bhi.n	80166e0 <UART_SetConfig+0x4c0>
 8016692:	a201      	add	r2, pc, #4	; (adr r2, 8016698 <UART_SetConfig+0x478>)
 8016694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016698:	080166b1 	.word	0x080166b1
 801669c:	080166b9 	.word	0x080166b9
 80166a0:	080166c1 	.word	0x080166c1
 80166a4:	080166c9 	.word	0x080166c9
 80166a8:	080166d1 	.word	0x080166d1
 80166ac:	080166d9 	.word	0x080166d9
 80166b0:	2300      	movs	r3, #0
 80166b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166b6:	e086      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166b8:	2304      	movs	r3, #4
 80166ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166be:	e082      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166c0:	2308      	movs	r3, #8
 80166c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166c6:	e07e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166c8:	2310      	movs	r3, #16
 80166ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166ce:	e07a      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166d0:	2320      	movs	r3, #32
 80166d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166d6:	e076      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166d8:	2340      	movs	r3, #64	; 0x40
 80166da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166de:	e072      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166e0:	2380      	movs	r3, #128	; 0x80
 80166e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166e6:	e06e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80166e8:	697b      	ldr	r3, [r7, #20]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a75      	ldr	r2, [pc, #468]	; (80168c4 <UART_SetConfig+0x6a4>)
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d130      	bne.n	8016754 <UART_SetConfig+0x534>
 80166f2:	4b72      	ldr	r3, [pc, #456]	; (80168bc <UART_SetConfig+0x69c>)
 80166f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166f6:	f003 0307 	and.w	r3, r3, #7
 80166fa:	2b05      	cmp	r3, #5
 80166fc:	d826      	bhi.n	801674c <UART_SetConfig+0x52c>
 80166fe:	a201      	add	r2, pc, #4	; (adr r2, 8016704 <UART_SetConfig+0x4e4>)
 8016700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016704:	0801671d 	.word	0x0801671d
 8016708:	08016725 	.word	0x08016725
 801670c:	0801672d 	.word	0x0801672d
 8016710:	08016735 	.word	0x08016735
 8016714:	0801673d 	.word	0x0801673d
 8016718:	08016745 	.word	0x08016745
 801671c:	2300      	movs	r3, #0
 801671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016722:	e050      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016724:	2304      	movs	r3, #4
 8016726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801672a:	e04c      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801672c:	2308      	movs	r3, #8
 801672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016732:	e048      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016734:	2310      	movs	r3, #16
 8016736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801673a:	e044      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801673c:	2320      	movs	r3, #32
 801673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016742:	e040      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016744:	2340      	movs	r3, #64	; 0x40
 8016746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801674a:	e03c      	b.n	80167c6 <UART_SetConfig+0x5a6>
 801674c:	2380      	movs	r3, #128	; 0x80
 801674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016752:	e038      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016754:	697b      	ldr	r3, [r7, #20]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4a5b      	ldr	r2, [pc, #364]	; (80168c8 <UART_SetConfig+0x6a8>)
 801675a:	4293      	cmp	r3, r2
 801675c:	d130      	bne.n	80167c0 <UART_SetConfig+0x5a0>
 801675e:	4b57      	ldr	r3, [pc, #348]	; (80168bc <UART_SetConfig+0x69c>)
 8016760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016762:	f003 0307 	and.w	r3, r3, #7
 8016766:	2b05      	cmp	r3, #5
 8016768:	d826      	bhi.n	80167b8 <UART_SetConfig+0x598>
 801676a:	a201      	add	r2, pc, #4	; (adr r2, 8016770 <UART_SetConfig+0x550>)
 801676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016770:	08016789 	.word	0x08016789
 8016774:	08016791 	.word	0x08016791
 8016778:	08016799 	.word	0x08016799
 801677c:	080167a1 	.word	0x080167a1
 8016780:	080167a9 	.word	0x080167a9
 8016784:	080167b1 	.word	0x080167b1
 8016788:	2302      	movs	r3, #2
 801678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801678e:	e01a      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016790:	2304      	movs	r3, #4
 8016792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016796:	e016      	b.n	80167c6 <UART_SetConfig+0x5a6>
 8016798:	2308      	movs	r3, #8
 801679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801679e:	e012      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80167a0:	2310      	movs	r3, #16
 80167a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167a6:	e00e      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80167a8:	2320      	movs	r3, #32
 80167aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167ae:	e00a      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80167b0:	2340      	movs	r3, #64	; 0x40
 80167b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167b6:	e006      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80167b8:	2380      	movs	r3, #128	; 0x80
 80167ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167be:	e002      	b.n	80167c6 <UART_SetConfig+0x5a6>
 80167c0:	2380      	movs	r3, #128	; 0x80
 80167c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4a3f      	ldr	r2, [pc, #252]	; (80168c8 <UART_SetConfig+0x6a8>)
 80167cc:	4293      	cmp	r3, r2
 80167ce:	f040 80f8 	bne.w	80169c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80167d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80167d6:	2b20      	cmp	r3, #32
 80167d8:	dc46      	bgt.n	8016868 <UART_SetConfig+0x648>
 80167da:	2b02      	cmp	r3, #2
 80167dc:	f2c0 8082 	blt.w	80168e4 <UART_SetConfig+0x6c4>
 80167e0:	3b02      	subs	r3, #2
 80167e2:	2b1e      	cmp	r3, #30
 80167e4:	d87e      	bhi.n	80168e4 <UART_SetConfig+0x6c4>
 80167e6:	a201      	add	r2, pc, #4	; (adr r2, 80167ec <UART_SetConfig+0x5cc>)
 80167e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167ec:	0801686f 	.word	0x0801686f
 80167f0:	080168e5 	.word	0x080168e5
 80167f4:	08016877 	.word	0x08016877
 80167f8:	080168e5 	.word	0x080168e5
 80167fc:	080168e5 	.word	0x080168e5
 8016800:	080168e5 	.word	0x080168e5
 8016804:	08016887 	.word	0x08016887
 8016808:	080168e5 	.word	0x080168e5
 801680c:	080168e5 	.word	0x080168e5
 8016810:	080168e5 	.word	0x080168e5
 8016814:	080168e5 	.word	0x080168e5
 8016818:	080168e5 	.word	0x080168e5
 801681c:	080168e5 	.word	0x080168e5
 8016820:	080168e5 	.word	0x080168e5
 8016824:	08016897 	.word	0x08016897
 8016828:	080168e5 	.word	0x080168e5
 801682c:	080168e5 	.word	0x080168e5
 8016830:	080168e5 	.word	0x080168e5
 8016834:	080168e5 	.word	0x080168e5
 8016838:	080168e5 	.word	0x080168e5
 801683c:	080168e5 	.word	0x080168e5
 8016840:	080168e5 	.word	0x080168e5
 8016844:	080168e5 	.word	0x080168e5
 8016848:	080168e5 	.word	0x080168e5
 801684c:	080168e5 	.word	0x080168e5
 8016850:	080168e5 	.word	0x080168e5
 8016854:	080168e5 	.word	0x080168e5
 8016858:	080168e5 	.word	0x080168e5
 801685c:	080168e5 	.word	0x080168e5
 8016860:	080168e5 	.word	0x080168e5
 8016864:	080168d7 	.word	0x080168d7
 8016868:	2b40      	cmp	r3, #64	; 0x40
 801686a:	d037      	beq.n	80168dc <UART_SetConfig+0x6bc>
 801686c:	e03a      	b.n	80168e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801686e:	f7fb fc17 	bl	80120a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8016872:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016874:	e03c      	b.n	80168f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801687a:	4618      	mov	r0, r3
 801687c:	f7fb fc26 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016884:	e034      	b.n	80168f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016886:	f107 0318 	add.w	r3, r7, #24
 801688a:	4618      	mov	r0, r3
 801688c:	f7fb fd72 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016894:	e02c      	b.n	80168f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016896:	4b09      	ldr	r3, [pc, #36]	; (80168bc <UART_SetConfig+0x69c>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	f003 0320 	and.w	r3, r3, #32
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d016      	beq.n	80168d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80168a2:	4b06      	ldr	r3, [pc, #24]	; (80168bc <UART_SetConfig+0x69c>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	08db      	lsrs	r3, r3, #3
 80168a8:	f003 0303 	and.w	r3, r3, #3
 80168ac:	4a07      	ldr	r2, [pc, #28]	; (80168cc <UART_SetConfig+0x6ac>)
 80168ae:	fa22 f303 	lsr.w	r3, r2, r3
 80168b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80168b4:	e01c      	b.n	80168f0 <UART_SetConfig+0x6d0>
 80168b6:	bf00      	nop
 80168b8:	40011400 	.word	0x40011400
 80168bc:	58024400 	.word	0x58024400
 80168c0:	40007800 	.word	0x40007800
 80168c4:	40007c00 	.word	0x40007c00
 80168c8:	58000c00 	.word	0x58000c00
 80168cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80168d0:	4b9d      	ldr	r3, [pc, #628]	; (8016b48 <UART_SetConfig+0x928>)
 80168d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80168d4:	e00c      	b.n	80168f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80168d6:	4b9d      	ldr	r3, [pc, #628]	; (8016b4c <UART_SetConfig+0x92c>)
 80168d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80168da:	e009      	b.n	80168f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80168dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80168e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80168e2:	e005      	b.n	80168f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80168e4:	2300      	movs	r3, #0
 80168e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80168e8:	2301      	movs	r3, #1
 80168ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80168ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80168f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f000 81de 	beq.w	8016cb4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168fc:	4a94      	ldr	r2, [pc, #592]	; (8016b50 <UART_SetConfig+0x930>)
 80168fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016902:	461a      	mov	r2, r3
 8016904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016906:	fbb3 f3f2 	udiv	r3, r3, r2
 801690a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	685a      	ldr	r2, [r3, #4]
 8016910:	4613      	mov	r3, r2
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	4413      	add	r3, r2
 8016916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016918:	429a      	cmp	r2, r3
 801691a:	d305      	bcc.n	8016928 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016924:	429a      	cmp	r2, r3
 8016926:	d903      	bls.n	8016930 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8016928:	2301      	movs	r3, #1
 801692a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801692e:	e1c1      	b.n	8016cb4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016932:	2200      	movs	r2, #0
 8016934:	60bb      	str	r3, [r7, #8]
 8016936:	60fa      	str	r2, [r7, #12]
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801693c:	4a84      	ldr	r2, [pc, #528]	; (8016b50 <UART_SetConfig+0x930>)
 801693e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016942:	b29b      	uxth	r3, r3
 8016944:	2200      	movs	r2, #0
 8016946:	603b      	str	r3, [r7, #0]
 8016948:	607a      	str	r2, [r7, #4]
 801694a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801694e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016952:	f7e9 fcc5 	bl	80002e0 <__aeabi_uldivmod>
 8016956:	4602      	mov	r2, r0
 8016958:	460b      	mov	r3, r1
 801695a:	4610      	mov	r0, r2
 801695c:	4619      	mov	r1, r3
 801695e:	f04f 0200 	mov.w	r2, #0
 8016962:	f04f 0300 	mov.w	r3, #0
 8016966:	020b      	lsls	r3, r1, #8
 8016968:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801696c:	0202      	lsls	r2, r0, #8
 801696e:	6979      	ldr	r1, [r7, #20]
 8016970:	6849      	ldr	r1, [r1, #4]
 8016972:	0849      	lsrs	r1, r1, #1
 8016974:	2000      	movs	r0, #0
 8016976:	460c      	mov	r4, r1
 8016978:	4605      	mov	r5, r0
 801697a:	eb12 0804 	adds.w	r8, r2, r4
 801697e:	eb43 0905 	adc.w	r9, r3, r5
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	685b      	ldr	r3, [r3, #4]
 8016986:	2200      	movs	r2, #0
 8016988:	469a      	mov	sl, r3
 801698a:	4693      	mov	fp, r2
 801698c:	4652      	mov	r2, sl
 801698e:	465b      	mov	r3, fp
 8016990:	4640      	mov	r0, r8
 8016992:	4649      	mov	r1, r9
 8016994:	f7e9 fca4 	bl	80002e0 <__aeabi_uldivmod>
 8016998:	4602      	mov	r2, r0
 801699a:	460b      	mov	r3, r1
 801699c:	4613      	mov	r3, r2
 801699e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80169a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80169a6:	d308      	bcc.n	80169ba <UART_SetConfig+0x79a>
 80169a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80169ae:	d204      	bcs.n	80169ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169b6:	60da      	str	r2, [r3, #12]
 80169b8:	e17c      	b.n	8016cb4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80169ba:	2301      	movs	r3, #1
 80169bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80169c0:	e178      	b.n	8016cb4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	69db      	ldr	r3, [r3, #28]
 80169c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80169ca:	f040 80c5 	bne.w	8016b58 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80169ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80169d2:	2b20      	cmp	r3, #32
 80169d4:	dc48      	bgt.n	8016a68 <UART_SetConfig+0x848>
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	db7b      	blt.n	8016ad2 <UART_SetConfig+0x8b2>
 80169da:	2b20      	cmp	r3, #32
 80169dc:	d879      	bhi.n	8016ad2 <UART_SetConfig+0x8b2>
 80169de:	a201      	add	r2, pc, #4	; (adr r2, 80169e4 <UART_SetConfig+0x7c4>)
 80169e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169e4:	08016a6f 	.word	0x08016a6f
 80169e8:	08016a77 	.word	0x08016a77
 80169ec:	08016ad3 	.word	0x08016ad3
 80169f0:	08016ad3 	.word	0x08016ad3
 80169f4:	08016a7f 	.word	0x08016a7f
 80169f8:	08016ad3 	.word	0x08016ad3
 80169fc:	08016ad3 	.word	0x08016ad3
 8016a00:	08016ad3 	.word	0x08016ad3
 8016a04:	08016a8f 	.word	0x08016a8f
 8016a08:	08016ad3 	.word	0x08016ad3
 8016a0c:	08016ad3 	.word	0x08016ad3
 8016a10:	08016ad3 	.word	0x08016ad3
 8016a14:	08016ad3 	.word	0x08016ad3
 8016a18:	08016ad3 	.word	0x08016ad3
 8016a1c:	08016ad3 	.word	0x08016ad3
 8016a20:	08016ad3 	.word	0x08016ad3
 8016a24:	08016a9f 	.word	0x08016a9f
 8016a28:	08016ad3 	.word	0x08016ad3
 8016a2c:	08016ad3 	.word	0x08016ad3
 8016a30:	08016ad3 	.word	0x08016ad3
 8016a34:	08016ad3 	.word	0x08016ad3
 8016a38:	08016ad3 	.word	0x08016ad3
 8016a3c:	08016ad3 	.word	0x08016ad3
 8016a40:	08016ad3 	.word	0x08016ad3
 8016a44:	08016ad3 	.word	0x08016ad3
 8016a48:	08016ad3 	.word	0x08016ad3
 8016a4c:	08016ad3 	.word	0x08016ad3
 8016a50:	08016ad3 	.word	0x08016ad3
 8016a54:	08016ad3 	.word	0x08016ad3
 8016a58:	08016ad3 	.word	0x08016ad3
 8016a5c:	08016ad3 	.word	0x08016ad3
 8016a60:	08016ad3 	.word	0x08016ad3
 8016a64:	08016ac5 	.word	0x08016ac5
 8016a68:	2b40      	cmp	r3, #64	; 0x40
 8016a6a:	d02e      	beq.n	8016aca <UART_SetConfig+0x8aa>
 8016a6c:	e031      	b.n	8016ad2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016a6e:	f7f9 fb1f 	bl	80100b0 <HAL_RCC_GetPCLK1Freq>
 8016a72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016a74:	e033      	b.n	8016ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016a76:	f7f9 fb31 	bl	80100dc <HAL_RCC_GetPCLK2Freq>
 8016a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016a7c:	e02f      	b.n	8016ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7fb fb22 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a8c:	e027      	b.n	8016ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016a8e:	f107 0318 	add.w	r3, r7, #24
 8016a92:	4618      	mov	r0, r3
 8016a94:	f7fb fc6e 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016a98:	69fb      	ldr	r3, [r7, #28]
 8016a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a9c:	e01f      	b.n	8016ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016a9e:	4b2d      	ldr	r3, [pc, #180]	; (8016b54 <UART_SetConfig+0x934>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	f003 0320 	and.w	r3, r3, #32
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d009      	beq.n	8016abe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016aaa:	4b2a      	ldr	r3, [pc, #168]	; (8016b54 <UART_SetConfig+0x934>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	08db      	lsrs	r3, r3, #3
 8016ab0:	f003 0303 	and.w	r3, r3, #3
 8016ab4:	4a24      	ldr	r2, [pc, #144]	; (8016b48 <UART_SetConfig+0x928>)
 8016ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8016aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016abc:	e00f      	b.n	8016ade <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8016abe:	4b22      	ldr	r3, [pc, #136]	; (8016b48 <UART_SetConfig+0x928>)
 8016ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ac2:	e00c      	b.n	8016ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016ac4:	4b21      	ldr	r3, [pc, #132]	; (8016b4c <UART_SetConfig+0x92c>)
 8016ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ac8:	e009      	b.n	8016ade <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ad0:	e005      	b.n	8016ade <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	f000 80e7 	beq.w	8016cb4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aea:	4a19      	ldr	r2, [pc, #100]	; (8016b50 <UART_SetConfig+0x930>)
 8016aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016af0:	461a      	mov	r2, r3
 8016af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8016af8:	005a      	lsls	r2, r3, #1
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	085b      	lsrs	r3, r3, #1
 8016b00:	441a      	add	r2, r3
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b0e:	2b0f      	cmp	r3, #15
 8016b10:	d916      	bls.n	8016b40 <UART_SetConfig+0x920>
 8016b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b18:	d212      	bcs.n	8016b40 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	f023 030f 	bic.w	r3, r3, #15
 8016b22:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b26:	085b      	lsrs	r3, r3, #1
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	f003 0307 	and.w	r3, r3, #7
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016b32:	4313      	orrs	r3, r2
 8016b34:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8016b36:	697b      	ldr	r3, [r7, #20]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016b3c:	60da      	str	r2, [r3, #12]
 8016b3e:	e0b9      	b.n	8016cb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016b40:	2301      	movs	r3, #1
 8016b42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016b46:	e0b5      	b.n	8016cb4 <UART_SetConfig+0xa94>
 8016b48:	03d09000 	.word	0x03d09000
 8016b4c:	003d0900 	.word	0x003d0900
 8016b50:	0801bdd0 	.word	0x0801bdd0
 8016b54:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8016b58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016b5c:	2b20      	cmp	r3, #32
 8016b5e:	dc49      	bgt.n	8016bf4 <UART_SetConfig+0x9d4>
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	db7c      	blt.n	8016c5e <UART_SetConfig+0xa3e>
 8016b64:	2b20      	cmp	r3, #32
 8016b66:	d87a      	bhi.n	8016c5e <UART_SetConfig+0xa3e>
 8016b68:	a201      	add	r2, pc, #4	; (adr r2, 8016b70 <UART_SetConfig+0x950>)
 8016b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6e:	bf00      	nop
 8016b70:	08016bfb 	.word	0x08016bfb
 8016b74:	08016c03 	.word	0x08016c03
 8016b78:	08016c5f 	.word	0x08016c5f
 8016b7c:	08016c5f 	.word	0x08016c5f
 8016b80:	08016c0b 	.word	0x08016c0b
 8016b84:	08016c5f 	.word	0x08016c5f
 8016b88:	08016c5f 	.word	0x08016c5f
 8016b8c:	08016c5f 	.word	0x08016c5f
 8016b90:	08016c1b 	.word	0x08016c1b
 8016b94:	08016c5f 	.word	0x08016c5f
 8016b98:	08016c5f 	.word	0x08016c5f
 8016b9c:	08016c5f 	.word	0x08016c5f
 8016ba0:	08016c5f 	.word	0x08016c5f
 8016ba4:	08016c5f 	.word	0x08016c5f
 8016ba8:	08016c5f 	.word	0x08016c5f
 8016bac:	08016c5f 	.word	0x08016c5f
 8016bb0:	08016c2b 	.word	0x08016c2b
 8016bb4:	08016c5f 	.word	0x08016c5f
 8016bb8:	08016c5f 	.word	0x08016c5f
 8016bbc:	08016c5f 	.word	0x08016c5f
 8016bc0:	08016c5f 	.word	0x08016c5f
 8016bc4:	08016c5f 	.word	0x08016c5f
 8016bc8:	08016c5f 	.word	0x08016c5f
 8016bcc:	08016c5f 	.word	0x08016c5f
 8016bd0:	08016c5f 	.word	0x08016c5f
 8016bd4:	08016c5f 	.word	0x08016c5f
 8016bd8:	08016c5f 	.word	0x08016c5f
 8016bdc:	08016c5f 	.word	0x08016c5f
 8016be0:	08016c5f 	.word	0x08016c5f
 8016be4:	08016c5f 	.word	0x08016c5f
 8016be8:	08016c5f 	.word	0x08016c5f
 8016bec:	08016c5f 	.word	0x08016c5f
 8016bf0:	08016c51 	.word	0x08016c51
 8016bf4:	2b40      	cmp	r3, #64	; 0x40
 8016bf6:	d02e      	beq.n	8016c56 <UART_SetConfig+0xa36>
 8016bf8:	e031      	b.n	8016c5e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016bfa:	f7f9 fa59 	bl	80100b0 <HAL_RCC_GetPCLK1Freq>
 8016bfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016c00:	e033      	b.n	8016c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016c02:	f7f9 fa6b 	bl	80100dc <HAL_RCC_GetPCLK2Freq>
 8016c06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016c08:	e02f      	b.n	8016c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7fb fa5c 	bl	80120cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c18:	e027      	b.n	8016c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016c1a:	f107 0318 	add.w	r3, r7, #24
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f7fb fba8 	bl	8012374 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016c24:	69fb      	ldr	r3, [r7, #28]
 8016c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c28:	e01f      	b.n	8016c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016c2a:	4b2d      	ldr	r3, [pc, #180]	; (8016ce0 <UART_SetConfig+0xac0>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f003 0320 	and.w	r3, r3, #32
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d009      	beq.n	8016c4a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016c36:	4b2a      	ldr	r3, [pc, #168]	; (8016ce0 <UART_SetConfig+0xac0>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	08db      	lsrs	r3, r3, #3
 8016c3c:	f003 0303 	and.w	r3, r3, #3
 8016c40:	4a28      	ldr	r2, [pc, #160]	; (8016ce4 <UART_SetConfig+0xac4>)
 8016c42:	fa22 f303 	lsr.w	r3, r2, r3
 8016c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016c48:	e00f      	b.n	8016c6a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8016c4a:	4b26      	ldr	r3, [pc, #152]	; (8016ce4 <UART_SetConfig+0xac4>)
 8016c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c4e:	e00c      	b.n	8016c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016c50:	4b25      	ldr	r3, [pc, #148]	; (8016ce8 <UART_SetConfig+0xac8>)
 8016c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c54:	e009      	b.n	8016c6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c5c:	e005      	b.n	8016c6a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016c62:	2301      	movs	r3, #1
 8016c64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016c68:	bf00      	nop
    }

    if (pclk != 0U)
 8016c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d021      	beq.n	8016cb4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c74:	4a1d      	ldr	r2, [pc, #116]	; (8016cec <UART_SetConfig+0xacc>)
 8016c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8016c82:	697b      	ldr	r3, [r7, #20]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	085b      	lsrs	r3, r3, #1
 8016c88:	441a      	add	r2, r3
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c96:	2b0f      	cmp	r3, #15
 8016c98:	d909      	bls.n	8016cae <UART_SetConfig+0xa8e>
 8016c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ca0:	d205      	bcs.n	8016cae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca4:	b29a      	uxth	r2, r3
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	60da      	str	r2, [r3, #12]
 8016cac:	e002      	b.n	8016cb4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016cae:	2301      	movs	r3, #1
 8016cb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	2201      	movs	r2, #1
 8016cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8016cd0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3748      	adds	r7, #72	; 0x48
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016cde:	bf00      	nop
 8016ce0:	58024400 	.word	0x58024400
 8016ce4:	03d09000 	.word	0x03d09000
 8016ce8:	003d0900 	.word	0x003d0900
 8016cec:	0801bdd0 	.word	0x0801bdd0

08016cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	b083      	sub	sp, #12
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cfc:	f003 0308 	and.w	r3, r3, #8
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d00a      	beq.n	8016d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	430a      	orrs	r2, r1
 8016d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d1e:	f003 0301 	and.w	r3, r3, #1
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d00a      	beq.n	8016d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	685b      	ldr	r3, [r3, #4]
 8016d2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	430a      	orrs	r2, r1
 8016d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d40:	f003 0302 	and.w	r3, r3, #2
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d00a      	beq.n	8016d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	430a      	orrs	r2, r1
 8016d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d62:	f003 0304 	and.w	r3, r3, #4
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d00a      	beq.n	8016d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	685b      	ldr	r3, [r3, #4]
 8016d70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	430a      	orrs	r2, r1
 8016d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d84:	f003 0310 	and.w	r3, r3, #16
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d00a      	beq.n	8016da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	689b      	ldr	r3, [r3, #8]
 8016d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	430a      	orrs	r2, r1
 8016da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016da6:	f003 0320 	and.w	r3, r3, #32
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d00a      	beq.n	8016dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	430a      	orrs	r2, r1
 8016dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d01a      	beq.n	8016e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	430a      	orrs	r2, r1
 8016de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016dee:	d10a      	bne.n	8016e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	430a      	orrs	r2, r1
 8016e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d00a      	beq.n	8016e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	685b      	ldr	r3, [r3, #4]
 8016e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	430a      	orrs	r2, r1
 8016e26:	605a      	str	r2, [r3, #4]
  }
}
 8016e28:	bf00      	nop
 8016e2a:	370c      	adds	r7, #12
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr

08016e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b098      	sub	sp, #96	; 0x60
 8016e38:	af02      	add	r7, sp, #8
 8016e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016e44:	f7ef fe04 	bl	8006a50 <HAL_GetTick>
 8016e48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	f003 0308 	and.w	r3, r3, #8
 8016e54:	2b08      	cmp	r3, #8
 8016e56:	d12f      	bne.n	8016eb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016e5c:	9300      	str	r3, [sp, #0]
 8016e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e60:	2200      	movs	r2, #0
 8016e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f000 f88e 	bl	8016f88 <UART_WaitOnFlagUntilTimeout>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d022      	beq.n	8016eb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7a:	e853 3f00 	ldrex	r3, [r3]
 8016e7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016e86:	653b      	str	r3, [r7, #80]	; 0x50
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	461a      	mov	r2, r3
 8016e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e90:	647b      	str	r3, [r7, #68]	; 0x44
 8016e92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e98:	e841 2300 	strex	r3, r2, [r1]
 8016e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d1e6      	bne.n	8016e72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2220      	movs	r2, #32
 8016ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2200      	movs	r2, #0
 8016eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016eb4:	2303      	movs	r3, #3
 8016eb6:	e063      	b.n	8016f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	f003 0304 	and.w	r3, r3, #4
 8016ec2:	2b04      	cmp	r3, #4
 8016ec4:	d149      	bne.n	8016f5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016ec6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016eca:	9300      	str	r3, [sp, #0]
 8016ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ece:	2200      	movs	r2, #0
 8016ed0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 f857 	bl	8016f88 <UART_WaitOnFlagUntilTimeout>
 8016eda:	4603      	mov	r3, r0
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d03c      	beq.n	8016f5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee8:	e853 3f00 	ldrex	r3, [r3]
 8016eec:	623b      	str	r3, [r7, #32]
   return(result);
 8016eee:	6a3b      	ldr	r3, [r7, #32]
 8016ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	461a      	mov	r2, r3
 8016efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016efe:	633b      	str	r3, [r7, #48]	; 0x30
 8016f00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f06:	e841 2300 	strex	r3, r2, [r1]
 8016f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d1e6      	bne.n	8016ee0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	3308      	adds	r3, #8
 8016f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	e853 3f00 	ldrex	r3, [r3]
 8016f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	f023 0301 	bic.w	r3, r3, #1
 8016f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	3308      	adds	r3, #8
 8016f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f32:	61fa      	str	r2, [r7, #28]
 8016f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f36:	69b9      	ldr	r1, [r7, #24]
 8016f38:	69fa      	ldr	r2, [r7, #28]
 8016f3a:	e841 2300 	strex	r3, r2, [r1]
 8016f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d1e5      	bne.n	8016f12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	2220      	movs	r2, #32
 8016f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	2200      	movs	r2, #0
 8016f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016f56:	2303      	movs	r3, #3
 8016f58:	e012      	b.n	8016f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2220      	movs	r2, #32
 8016f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2220      	movs	r2, #32
 8016f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2200      	movs	r2, #0
 8016f74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2200      	movs	r2, #0
 8016f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f7e:	2300      	movs	r3, #0
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3758      	adds	r7, #88	; 0x58
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	603b      	str	r3, [r7, #0]
 8016f94:	4613      	mov	r3, r2
 8016f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016f98:	e04f      	b.n	801703a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016f9a:	69bb      	ldr	r3, [r7, #24]
 8016f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016fa0:	d04b      	beq.n	801703a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016fa2:	f7ef fd55 	bl	8006a50 <HAL_GetTick>
 8016fa6:	4602      	mov	r2, r0
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	1ad3      	subs	r3, r2, r3
 8016fac:	69ba      	ldr	r2, [r7, #24]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d302      	bcc.n	8016fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8016fb2:	69bb      	ldr	r3, [r7, #24]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d101      	bne.n	8016fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016fb8:	2303      	movs	r3, #3
 8016fba:	e04e      	b.n	801705a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f003 0304 	and.w	r3, r3, #4
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d037      	beq.n	801703a <UART_WaitOnFlagUntilTimeout+0xb2>
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	2b80      	cmp	r3, #128	; 0x80
 8016fce:	d034      	beq.n	801703a <UART_WaitOnFlagUntilTimeout+0xb2>
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	2b40      	cmp	r3, #64	; 0x40
 8016fd4:	d031      	beq.n	801703a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	69db      	ldr	r3, [r3, #28]
 8016fdc:	f003 0308 	and.w	r3, r3, #8
 8016fe0:	2b08      	cmp	r3, #8
 8016fe2:	d110      	bne.n	8017006 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	2208      	movs	r2, #8
 8016fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016fec:	68f8      	ldr	r0, [r7, #12]
 8016fee:	f000 f95b 	bl	80172a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	2208      	movs	r2, #8
 8016ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8017002:	2301      	movs	r3, #1
 8017004:	e029      	b.n	801705a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	69db      	ldr	r3, [r3, #28]
 801700c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017014:	d111      	bne.n	801703a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801701e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017020:	68f8      	ldr	r0, [r7, #12]
 8017022:	f000 f941 	bl	80172a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2220      	movs	r2, #32
 801702a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	2200      	movs	r2, #0
 8017032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8017036:	2303      	movs	r3, #3
 8017038:	e00f      	b.n	801705a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	69da      	ldr	r2, [r3, #28]
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	4013      	ands	r3, r2
 8017044:	68ba      	ldr	r2, [r7, #8]
 8017046:	429a      	cmp	r2, r3
 8017048:	bf0c      	ite	eq
 801704a:	2301      	moveq	r3, #1
 801704c:	2300      	movne	r3, #0
 801704e:	b2db      	uxtb	r3, r3
 8017050:	461a      	mov	r2, r3
 8017052:	79fb      	ldrb	r3, [r7, #7]
 8017054:	429a      	cmp	r2, r3
 8017056:	d0a0      	beq.n	8016f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017058:	2300      	movs	r3, #0
}
 801705a:	4618      	mov	r0, r3
 801705c:	3710      	adds	r7, #16
 801705e:	46bd      	mov	sp, r7
 8017060:	bd80      	pop	{r7, pc}
	...

08017064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017064:	b480      	push	{r7}
 8017066:	b0a3      	sub	sp, #140	; 0x8c
 8017068:	af00      	add	r7, sp, #0
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	4613      	mov	r3, r2
 8017070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	68ba      	ldr	r2, [r7, #8]
 8017076:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	88fa      	ldrh	r2, [r7, #6]
 801707c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	88fa      	ldrh	r2, [r7, #6]
 8017084:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2200      	movs	r2, #0
 801708c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	689b      	ldr	r3, [r3, #8]
 8017092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017096:	d10e      	bne.n	80170b6 <UART_Start_Receive_IT+0x52>
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	691b      	ldr	r3, [r3, #16]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d105      	bne.n	80170ac <UART_Start_Receive_IT+0x48>
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80170a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170aa:	e02d      	b.n	8017108 <UART_Start_Receive_IT+0xa4>
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	22ff      	movs	r2, #255	; 0xff
 80170b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170b4:	e028      	b.n	8017108 <UART_Start_Receive_IT+0xa4>
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	689b      	ldr	r3, [r3, #8]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d10d      	bne.n	80170da <UART_Start_Receive_IT+0x76>
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	691b      	ldr	r3, [r3, #16]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d104      	bne.n	80170d0 <UART_Start_Receive_IT+0x6c>
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	22ff      	movs	r2, #255	; 0xff
 80170ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170ce:	e01b      	b.n	8017108 <UART_Start_Receive_IT+0xa4>
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	227f      	movs	r2, #127	; 0x7f
 80170d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170d8:	e016      	b.n	8017108 <UART_Start_Receive_IT+0xa4>
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	689b      	ldr	r3, [r3, #8]
 80170de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80170e2:	d10d      	bne.n	8017100 <UART_Start_Receive_IT+0x9c>
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	691b      	ldr	r3, [r3, #16]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d104      	bne.n	80170f6 <UART_Start_Receive_IT+0x92>
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	227f      	movs	r2, #127	; 0x7f
 80170f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170f4:	e008      	b.n	8017108 <UART_Start_Receive_IT+0xa4>
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	223f      	movs	r2, #63	; 0x3f
 80170fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170fe:	e003      	b.n	8017108 <UART_Start_Receive_IT+0xa4>
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2200      	movs	r2, #0
 8017104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	2200      	movs	r2, #0
 801710c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2222      	movs	r2, #34	; 0x22
 8017114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	3308      	adds	r3, #8
 801711e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017122:	e853 3f00 	ldrex	r3, [r3]
 8017126:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801712a:	f043 0301 	orr.w	r3, r3, #1
 801712e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	3308      	adds	r3, #8
 8017138:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801713c:	673a      	str	r2, [r7, #112]	; 0x70
 801713e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017140:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8017142:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017144:	e841 2300 	strex	r3, r2, [r1]
 8017148:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801714a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801714c:	2b00      	cmp	r3, #0
 801714e:	d1e3      	bne.n	8017118 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017158:	d14f      	bne.n	80171fa <UART_Start_Receive_IT+0x196>
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017160:	88fa      	ldrh	r2, [r7, #6]
 8017162:	429a      	cmp	r2, r3
 8017164:	d349      	bcc.n	80171fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	689b      	ldr	r3, [r3, #8]
 801716a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801716e:	d107      	bne.n	8017180 <UART_Start_Receive_IT+0x11c>
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	691b      	ldr	r3, [r3, #16]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d103      	bne.n	8017180 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	4a47      	ldr	r2, [pc, #284]	; (8017298 <UART_Start_Receive_IT+0x234>)
 801717c:	675a      	str	r2, [r3, #116]	; 0x74
 801717e:	e002      	b.n	8017186 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	4a46      	ldr	r2, [pc, #280]	; (801729c <UART_Start_Receive_IT+0x238>)
 8017184:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	691b      	ldr	r3, [r3, #16]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d01a      	beq.n	80171c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017196:	e853 3f00 	ldrex	r3, [r3]
 801719a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801719c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801719e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80171a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	461a      	mov	r2, r3
 80171ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80171b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80171b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80171b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80171b8:	e841 2300 	strex	r3, r2, [r1]
 80171bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80171be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d1e4      	bne.n	801718e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	3308      	adds	r3, #8
 80171ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171ce:	e853 3f00 	ldrex	r3, [r3]
 80171d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80171d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80171da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	3308      	adds	r3, #8
 80171e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80171e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80171e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80171ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171ec:	e841 2300 	strex	r3, r2, [r1]
 80171f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80171f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d1e5      	bne.n	80171c4 <UART_Start_Receive_IT+0x160>
 80171f8:	e046      	b.n	8017288 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	689b      	ldr	r3, [r3, #8]
 80171fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017202:	d107      	bne.n	8017214 <UART_Start_Receive_IT+0x1b0>
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	691b      	ldr	r3, [r3, #16]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d103      	bne.n	8017214 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	4a24      	ldr	r2, [pc, #144]	; (80172a0 <UART_Start_Receive_IT+0x23c>)
 8017210:	675a      	str	r2, [r3, #116]	; 0x74
 8017212:	e002      	b.n	801721a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	4a23      	ldr	r2, [pc, #140]	; (80172a4 <UART_Start_Receive_IT+0x240>)
 8017218:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	691b      	ldr	r3, [r3, #16]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d019      	beq.n	8017256 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722a:	e853 3f00 	ldrex	r3, [r3]
 801722e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017232:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8017236:	677b      	str	r3, [r7, #116]	; 0x74
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	461a      	mov	r2, r3
 801723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017240:	637b      	str	r3, [r7, #52]	; 0x34
 8017242:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017248:	e841 2300 	strex	r3, r2, [r1]
 801724c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017250:	2b00      	cmp	r3, #0
 8017252:	d1e6      	bne.n	8017222 <UART_Start_Receive_IT+0x1be>
 8017254:	e018      	b.n	8017288 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	e853 3f00 	ldrex	r3, [r3]
 8017262:	613b      	str	r3, [r7, #16]
   return(result);
 8017264:	693b      	ldr	r3, [r7, #16]
 8017266:	f043 0320 	orr.w	r3, r3, #32
 801726a:	67bb      	str	r3, [r7, #120]	; 0x78
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	461a      	mov	r2, r3
 8017272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017274:	623b      	str	r3, [r7, #32]
 8017276:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017278:	69f9      	ldr	r1, [r7, #28]
 801727a:	6a3a      	ldr	r2, [r7, #32]
 801727c:	e841 2300 	strex	r3, r2, [r1]
 8017280:	61bb      	str	r3, [r7, #24]
   return(result);
 8017282:	69bb      	ldr	r3, [r7, #24]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d1e6      	bne.n	8017256 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8017288:	2300      	movs	r3, #0
}
 801728a:	4618      	mov	r0, r3
 801728c:	378c      	adds	r7, #140	; 0x8c
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr
 8017296:	bf00      	nop
 8017298:	08017ac9 	.word	0x08017ac9
 801729c:	08017769 	.word	0x08017769
 80172a0:	080175b1 	.word	0x080175b1
 80172a4:	080173f9 	.word	0x080173f9

080172a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80172a8:	b480      	push	{r7}
 80172aa:	b095      	sub	sp, #84	; 0x54
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172b8:	e853 3f00 	ldrex	r3, [r3]
 80172bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80172be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80172c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	461a      	mov	r2, r3
 80172cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172ce:	643b      	str	r3, [r7, #64]	; 0x40
 80172d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80172d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80172d6:	e841 2300 	strex	r3, r2, [r1]
 80172da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80172dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d1e6      	bne.n	80172b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	3308      	adds	r3, #8
 80172e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172ea:	6a3b      	ldr	r3, [r7, #32]
 80172ec:	e853 3f00 	ldrex	r3, [r3]
 80172f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80172f2:	69fa      	ldr	r2, [r7, #28]
 80172f4:	4b1e      	ldr	r3, [pc, #120]	; (8017370 <UART_EndRxTransfer+0xc8>)
 80172f6:	4013      	ands	r3, r2
 80172f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	3308      	adds	r3, #8
 8017300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801730a:	e841 2300 	strex	r3, r2, [r1]
 801730e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017312:	2b00      	cmp	r3, #0
 8017314:	d1e5      	bne.n	80172e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801731a:	2b01      	cmp	r3, #1
 801731c:	d118      	bne.n	8017350 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	e853 3f00 	ldrex	r3, [r3]
 801732a:	60bb      	str	r3, [r7, #8]
   return(result);
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	f023 0310 	bic.w	r3, r3, #16
 8017332:	647b      	str	r3, [r7, #68]	; 0x44
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	461a      	mov	r2, r3
 801733a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801733c:	61bb      	str	r3, [r7, #24]
 801733e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017340:	6979      	ldr	r1, [r7, #20]
 8017342:	69ba      	ldr	r2, [r7, #24]
 8017344:	e841 2300 	strex	r3, r2, [r1]
 8017348:	613b      	str	r3, [r7, #16]
   return(result);
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d1e6      	bne.n	801731e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2220      	movs	r2, #32
 8017354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2200      	movs	r2, #0
 801735c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2200      	movs	r2, #0
 8017362:	675a      	str	r2, [r3, #116]	; 0x74
}
 8017364:	bf00      	nop
 8017366:	3754      	adds	r7, #84	; 0x54
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	effffffe 	.word	0xeffffffe

08017374 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b084      	sub	sp, #16
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	2200      	movs	r2, #0
 8017386:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	2200      	movs	r2, #0
 801738e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017392:	68f8      	ldr	r0, [r7, #12]
 8017394:	f7fe ff2e 	bl	80161f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017398:	bf00      	nop
 801739a:	3710      	adds	r7, #16
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}

080173a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b088      	sub	sp, #32
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	e853 3f00 	ldrex	r3, [r3]
 80173b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80173bc:	61fb      	str	r3, [r7, #28]
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	461a      	mov	r2, r3
 80173c4:	69fb      	ldr	r3, [r7, #28]
 80173c6:	61bb      	str	r3, [r7, #24]
 80173c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173ca:	6979      	ldr	r1, [r7, #20]
 80173cc:	69ba      	ldr	r2, [r7, #24]
 80173ce:	e841 2300 	strex	r3, r2, [r1]
 80173d2:	613b      	str	r3, [r7, #16]
   return(result);
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d1e6      	bne.n	80173a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2220      	movs	r2, #32
 80173de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	2200      	movs	r2, #0
 80173e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	f7fe fef9 	bl	80161e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80173ee:	bf00      	nop
 80173f0:	3720      	adds	r7, #32
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}
	...

080173f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b09c      	sub	sp, #112	; 0x70
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017406:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017410:	2b22      	cmp	r3, #34	; 0x22
 8017412:	f040 80be 	bne.w	8017592 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801741c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017420:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8017424:	b2d9      	uxtb	r1, r3
 8017426:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801742a:	b2da      	uxtb	r2, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017430:	400a      	ands	r2, r1
 8017432:	b2d2      	uxtb	r2, r2
 8017434:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801743a:	1c5a      	adds	r2, r3, #1
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017446:	b29b      	uxth	r3, r3
 8017448:	3b01      	subs	r3, #1
 801744a:	b29a      	uxth	r2, r3
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017458:	b29b      	uxth	r3, r3
 801745a:	2b00      	cmp	r3, #0
 801745c:	f040 80a1 	bne.w	80175a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017468:	e853 3f00 	ldrex	r3, [r3]
 801746c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801746e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017474:	66bb      	str	r3, [r7, #104]	; 0x68
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	461a      	mov	r2, r3
 801747c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801747e:	65bb      	str	r3, [r7, #88]	; 0x58
 8017480:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017486:	e841 2300 	strex	r3, r2, [r1]
 801748a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801748c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801748e:	2b00      	cmp	r3, #0
 8017490:	d1e6      	bne.n	8017460 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	3308      	adds	r3, #8
 8017498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801749c:	e853 3f00 	ldrex	r3, [r3]
 80174a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80174a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a4:	f023 0301 	bic.w	r3, r3, #1
 80174a8:	667b      	str	r3, [r7, #100]	; 0x64
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	3308      	adds	r3, #8
 80174b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80174b2:	647a      	str	r2, [r7, #68]	; 0x44
 80174b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80174b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174ba:	e841 2300 	strex	r3, r2, [r1]
 80174be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80174c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1e5      	bne.n	8017492 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2220      	movs	r2, #32
 80174ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2200      	movs	r2, #0
 80174d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	4a33      	ldr	r2, [pc, #204]	; (80175ac <UART_RxISR_8BIT+0x1b4>)
 80174e0:	4293      	cmp	r3, r2
 80174e2:	d01f      	beq.n	8017524 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	685b      	ldr	r3, [r3, #4]
 80174ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d018      	beq.n	8017524 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174fa:	e853 3f00 	ldrex	r3, [r3]
 80174fe:	623b      	str	r3, [r7, #32]
   return(result);
 8017500:	6a3b      	ldr	r3, [r7, #32]
 8017502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017506:	663b      	str	r3, [r7, #96]	; 0x60
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	461a      	mov	r2, r3
 801750e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017510:	633b      	str	r3, [r7, #48]	; 0x30
 8017512:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017518:	e841 2300 	strex	r3, r2, [r1]
 801751c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017520:	2b00      	cmp	r3, #0
 8017522:	d1e6      	bne.n	80174f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017528:	2b01      	cmp	r3, #1
 801752a:	d12e      	bne.n	801758a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2200      	movs	r2, #0
 8017530:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	e853 3f00 	ldrex	r3, [r3]
 801753e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	f023 0310 	bic.w	r3, r3, #16
 8017546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	461a      	mov	r2, r3
 801754e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017550:	61fb      	str	r3, [r7, #28]
 8017552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017554:	69b9      	ldr	r1, [r7, #24]
 8017556:	69fa      	ldr	r2, [r7, #28]
 8017558:	e841 2300 	strex	r3, r2, [r1]
 801755c:	617b      	str	r3, [r7, #20]
   return(result);
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d1e6      	bne.n	8017532 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	69db      	ldr	r3, [r3, #28]
 801756a:	f003 0310 	and.w	r3, r3, #16
 801756e:	2b10      	cmp	r3, #16
 8017570:	d103      	bne.n	801757a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	2210      	movs	r2, #16
 8017578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017580:	4619      	mov	r1, r3
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f7fe fe40 	bl	8016208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017588:	e00b      	b.n	80175a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f7eb fc7a 	bl	8002e84 <HAL_UART_RxCpltCallback>
}
 8017590:	e007      	b.n	80175a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	699a      	ldr	r2, [r3, #24]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f042 0208 	orr.w	r2, r2, #8
 80175a0:	619a      	str	r2, [r3, #24]
}
 80175a2:	bf00      	nop
 80175a4:	3770      	adds	r7, #112	; 0x70
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	58000c00 	.word	0x58000c00

080175b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b09c      	sub	sp, #112	; 0x70
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80175be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175c8:	2b22      	cmp	r3, #34	; 0x22
 80175ca:	f040 80be 	bne.w	801774a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80175dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80175de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80175e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80175e6:	4013      	ands	r3, r2
 80175e8:	b29a      	uxth	r2, r3
 80175ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80175f2:	1c9a      	adds	r2, r3, #2
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80175fe:	b29b      	uxth	r3, r3
 8017600:	3b01      	subs	r3, #1
 8017602:	b29a      	uxth	r2, r3
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017610:	b29b      	uxth	r3, r3
 8017612:	2b00      	cmp	r3, #0
 8017614:	f040 80a1 	bne.w	801775a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801761e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017620:	e853 3f00 	ldrex	r3, [r3]
 8017624:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801762c:	667b      	str	r3, [r7, #100]	; 0x64
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	461a      	mov	r2, r3
 8017634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017636:	657b      	str	r3, [r7, #84]	; 0x54
 8017638:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801763a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801763c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801763e:	e841 2300 	strex	r3, r2, [r1]
 8017642:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017646:	2b00      	cmp	r3, #0
 8017648:	d1e6      	bne.n	8017618 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	3308      	adds	r3, #8
 8017650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017654:	e853 3f00 	ldrex	r3, [r3]
 8017658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801765c:	f023 0301 	bic.w	r3, r3, #1
 8017660:	663b      	str	r3, [r7, #96]	; 0x60
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	3308      	adds	r3, #8
 8017668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801766a:	643a      	str	r2, [r7, #64]	; 0x40
 801766c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801766e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017672:	e841 2300 	strex	r3, r2, [r1]
 8017676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801767a:	2b00      	cmp	r3, #0
 801767c:	d1e5      	bne.n	801764a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2220      	movs	r2, #32
 8017682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2200      	movs	r2, #0
 801768a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2200      	movs	r2, #0
 8017690:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	4a33      	ldr	r2, [pc, #204]	; (8017764 <UART_RxISR_16BIT+0x1b4>)
 8017698:	4293      	cmp	r3, r2
 801769a:	d01f      	beq.n	80176dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d018      	beq.n	80176dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	e853 3f00 	ldrex	r3, [r3]
 80176b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80176b8:	69fb      	ldr	r3, [r7, #28]
 80176ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80176be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	461a      	mov	r2, r3
 80176c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80176ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176d0:	e841 2300 	strex	r3, r2, [r1]
 80176d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80176d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d1e6      	bne.n	80176aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176e0:	2b01      	cmp	r3, #1
 80176e2:	d12e      	bne.n	8017742 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2200      	movs	r2, #0
 80176e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	e853 3f00 	ldrex	r3, [r3]
 80176f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80176f8:	68bb      	ldr	r3, [r7, #8]
 80176fa:	f023 0310 	bic.w	r3, r3, #16
 80176fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	461a      	mov	r2, r3
 8017706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017708:	61bb      	str	r3, [r7, #24]
 801770a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801770c:	6979      	ldr	r1, [r7, #20]
 801770e:	69ba      	ldr	r2, [r7, #24]
 8017710:	e841 2300 	strex	r3, r2, [r1]
 8017714:	613b      	str	r3, [r7, #16]
   return(result);
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d1e6      	bne.n	80176ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	69db      	ldr	r3, [r3, #28]
 8017722:	f003 0310 	and.w	r3, r3, #16
 8017726:	2b10      	cmp	r3, #16
 8017728:	d103      	bne.n	8017732 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2210      	movs	r2, #16
 8017730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017738:	4619      	mov	r1, r3
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7fe fd64 	bl	8016208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017740:	e00b      	b.n	801775a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7eb fb9e 	bl	8002e84 <HAL_UART_RxCpltCallback>
}
 8017748:	e007      	b.n	801775a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	699a      	ldr	r2, [r3, #24]
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	f042 0208 	orr.w	r2, r2, #8
 8017758:	619a      	str	r2, [r3, #24]
}
 801775a:	bf00      	nop
 801775c:	3770      	adds	r7, #112	; 0x70
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}
 8017762:	bf00      	nop
 8017764:	58000c00 	.word	0x58000c00

08017768 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b0ac      	sub	sp, #176	; 0xb0
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017776:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	69db      	ldr	r3, [r3, #28]
 8017780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	689b      	ldr	r3, [r3, #8]
 8017794:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801779e:	2b22      	cmp	r3, #34	; 0x22
 80177a0:	f040 8180 	bne.w	8017aa4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80177aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80177ae:	e123      	b.n	80179f8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80177ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80177be:	b2d9      	uxtb	r1, r3
 80177c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80177c4:	b2da      	uxtb	r2, r3
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177ca:	400a      	ands	r2, r1
 80177cc:	b2d2      	uxtb	r2, r2
 80177ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177d4:	1c5a      	adds	r2, r3, #1
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	3b01      	subs	r3, #1
 80177e4:	b29a      	uxth	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	69db      	ldr	r3, [r3, #28]
 80177f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80177f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177fa:	f003 0307 	and.w	r3, r3, #7
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d053      	beq.n	80178aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017806:	f003 0301 	and.w	r3, r3, #1
 801780a:	2b00      	cmp	r3, #0
 801780c:	d011      	beq.n	8017832 <UART_RxISR_8BIT_FIFOEN+0xca>
 801780e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017816:	2b00      	cmp	r3, #0
 8017818:	d00b      	beq.n	8017832 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2201      	movs	r2, #1
 8017820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017828:	f043 0201 	orr.w	r2, r3, #1
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017836:	f003 0302 	and.w	r3, r3, #2
 801783a:	2b00      	cmp	r3, #0
 801783c:	d011      	beq.n	8017862 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801783e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017842:	f003 0301 	and.w	r3, r3, #1
 8017846:	2b00      	cmp	r3, #0
 8017848:	d00b      	beq.n	8017862 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	2202      	movs	r2, #2
 8017850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017858:	f043 0204 	orr.w	r2, r3, #4
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017866:	f003 0304 	and.w	r3, r3, #4
 801786a:	2b00      	cmp	r3, #0
 801786c:	d011      	beq.n	8017892 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801786e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017872:	f003 0301 	and.w	r3, r3, #1
 8017876:	2b00      	cmp	r3, #0
 8017878:	d00b      	beq.n	8017892 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	2204      	movs	r2, #4
 8017880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017888:	f043 0202 	orr.w	r2, r3, #2
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017898:	2b00      	cmp	r3, #0
 801789a:	d006      	beq.n	80178aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801789c:	6878      	ldr	r0, [r7, #4]
 801789e:	f7fe fca9 	bl	80161f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2200      	movs	r2, #0
 80178a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80178b0:	b29b      	uxth	r3, r3
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	f040 80a0 	bne.w	80179f8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80178c0:	e853 3f00 	ldrex	r3, [r3]
 80178c4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80178c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80178cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	461a      	mov	r2, r3
 80178d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80178da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80178dc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80178e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80178e2:	e841 2300 	strex	r3, r2, [r1]
 80178e6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80178e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d1e4      	bne.n	80178b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	3308      	adds	r3, #8
 80178f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80178f8:	e853 3f00 	ldrex	r3, [r3]
 80178fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80178fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017900:	4b6e      	ldr	r3, [pc, #440]	; (8017abc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8017902:	4013      	ands	r3, r2
 8017904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	3308      	adds	r3, #8
 801790e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017912:	66ba      	str	r2, [r7, #104]	; 0x68
 8017914:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017916:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017918:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801791a:	e841 2300 	strex	r3, r2, [r1]
 801791e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017922:	2b00      	cmp	r3, #0
 8017924:	d1e3      	bne.n	80178ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	2220      	movs	r2, #32
 801792a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2200      	movs	r2, #0
 8017932:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2200      	movs	r2, #0
 8017938:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	4a60      	ldr	r2, [pc, #384]	; (8017ac0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8017940:	4293      	cmp	r3, r2
 8017942:	d021      	beq.n	8017988 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	685b      	ldr	r3, [r3, #4]
 801794a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801794e:	2b00      	cmp	r3, #0
 8017950:	d01a      	beq.n	8017988 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801795a:	e853 3f00 	ldrex	r3, [r3]
 801795e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017962:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	461a      	mov	r2, r3
 8017970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017974:	657b      	str	r3, [r7, #84]	; 0x54
 8017976:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017978:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801797a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801797c:	e841 2300 	strex	r3, r2, [r1]
 8017980:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017984:	2b00      	cmp	r3, #0
 8017986:	d1e4      	bne.n	8017952 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801798c:	2b01      	cmp	r3, #1
 801798e:	d130      	bne.n	80179f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2200      	movs	r2, #0
 8017994:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801799e:	e853 3f00 	ldrex	r3, [r3]
 80179a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80179a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a6:	f023 0310 	bic.w	r3, r3, #16
 80179aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	461a      	mov	r2, r3
 80179b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80179b8:	643b      	str	r3, [r7, #64]	; 0x40
 80179ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80179be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80179c0:	e841 2300 	strex	r3, r2, [r1]
 80179c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80179c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d1e4      	bne.n	8017996 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	69db      	ldr	r3, [r3, #28]
 80179d2:	f003 0310 	and.w	r3, r3, #16
 80179d6:	2b10      	cmp	r3, #16
 80179d8:	d103      	bne.n	80179e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	2210      	movs	r2, #16
 80179e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80179e8:	4619      	mov	r1, r3
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f7fe fc0c 	bl	8016208 <HAL_UARTEx_RxEventCallback>
 80179f0:	e002      	b.n	80179f8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f7eb fa46 	bl	8002e84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80179f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d006      	beq.n	8017a0e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8017a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017a04:	f003 0320 	and.w	r3, r3, #32
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	f47f aed1 	bne.w	80177b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017a14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017a18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d049      	beq.n	8017ab4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017a26:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d242      	bcs.n	8017ab4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	3308      	adds	r3, #8
 8017a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	e853 3f00 	ldrex	r3, [r3]
 8017a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a3e:	69fb      	ldr	r3, [r7, #28]
 8017a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	3308      	adds	r3, #8
 8017a4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a5a:	e841 2300 	strex	r3, r2, [r1]
 8017a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d1e3      	bne.n	8017a2e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	4a16      	ldr	r2, [pc, #88]	; (8017ac4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8017a6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	e853 3f00 	ldrex	r3, [r3]
 8017a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	f043 0320 	orr.w	r3, r3, #32
 8017a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	461a      	mov	r2, r3
 8017a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017a8e:	61bb      	str	r3, [r7, #24]
 8017a90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a92:	6979      	ldr	r1, [r7, #20]
 8017a94:	69ba      	ldr	r2, [r7, #24]
 8017a96:	e841 2300 	strex	r3, r2, [r1]
 8017a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8017a9c:	693b      	ldr	r3, [r7, #16]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d1e4      	bne.n	8017a6c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017aa2:	e007      	b.n	8017ab4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	699a      	ldr	r2, [r3, #24]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	f042 0208 	orr.w	r2, r2, #8
 8017ab2:	619a      	str	r2, [r3, #24]
}
 8017ab4:	bf00      	nop
 8017ab6:	37b0      	adds	r7, #176	; 0xb0
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}
 8017abc:	effffffe 	.word	0xeffffffe
 8017ac0:	58000c00 	.word	0x58000c00
 8017ac4:	080173f9 	.word	0x080173f9

08017ac8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b0ae      	sub	sp, #184	; 0xb8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017ad6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	69db      	ldr	r3, [r3, #28]
 8017ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	689b      	ldr	r3, [r3, #8]
 8017af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017afe:	2b22      	cmp	r3, #34	; 0x22
 8017b00:	f040 8184 	bne.w	8017e0c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017b0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017b0e:	e127      	b.n	8017d60 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b16:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8017b22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8017b26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8017b2a:	4013      	ands	r3, r2
 8017b2c:	b29a      	uxth	r2, r3
 8017b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017b32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017b38:	1c9a      	adds	r2, r3, #2
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017b44:	b29b      	uxth	r3, r3
 8017b46:	3b01      	subs	r3, #1
 8017b48:	b29a      	uxth	r2, r3
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	69db      	ldr	r3, [r3, #28]
 8017b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b5e:	f003 0307 	and.w	r3, r3, #7
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d053      	beq.n	8017c0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b6a:	f003 0301 	and.w	r3, r3, #1
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d011      	beq.n	8017b96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8017b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d00b      	beq.n	8017b96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	2201      	movs	r2, #1
 8017b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b8c:	f043 0201 	orr.w	r2, r3, #1
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b9a:	f003 0302 	and.w	r3, r3, #2
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d011      	beq.n	8017bc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8017ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017ba6:	f003 0301 	and.w	r3, r3, #1
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d00b      	beq.n	8017bc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	2202      	movs	r2, #2
 8017bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bbc:	f043 0204 	orr.w	r2, r3, #4
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017bca:	f003 0304 	and.w	r3, r3, #4
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d011      	beq.n	8017bf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8017bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017bd6:	f003 0301 	and.w	r3, r3, #1
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d00b      	beq.n	8017bf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	2204      	movs	r2, #4
 8017be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bec:	f043 0202 	orr.w	r2, r3, #2
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d006      	beq.n	8017c0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7fe faf7 	bl	80161f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2200      	movs	r2, #0
 8017c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017c14:	b29b      	uxth	r3, r3
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	f040 80a2 	bne.w	8017d60 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017c24:	e853 3f00 	ldrex	r3, [r3]
 8017c28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	461a      	mov	r2, r3
 8017c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017c42:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017c4a:	e841 2300 	strex	r3, r2, [r1]
 8017c4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d1e2      	bne.n	8017c1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	3308      	adds	r3, #8
 8017c5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c60:	e853 3f00 	ldrex	r3, [r3]
 8017c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017c66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017c68:	4b6e      	ldr	r3, [pc, #440]	; (8017e24 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8017c6a:	4013      	ands	r3, r2
 8017c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	3308      	adds	r3, #8
 8017c76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017c7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017c82:	e841 2300 	strex	r3, r2, [r1]
 8017c86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d1e3      	bne.n	8017c56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2220      	movs	r2, #32
 8017c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2200      	movs	r2, #0
 8017c9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	4a60      	ldr	r2, [pc, #384]	; (8017e28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	d021      	beq.n	8017cf0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	685b      	ldr	r3, [r3, #4]
 8017cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d01a      	beq.n	8017cf0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cc2:	e853 3f00 	ldrex	r3, [r3]
 8017cc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	461a      	mov	r2, r3
 8017cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8017cde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017ce4:	e841 2300 	strex	r3, r2, [r1]
 8017ce8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d1e4      	bne.n	8017cba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cf4:	2b01      	cmp	r3, #1
 8017cf6:	d130      	bne.n	8017d5a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d06:	e853 3f00 	ldrex	r3, [r3]
 8017d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d0e:	f023 0310 	bic.w	r3, r3, #16
 8017d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017d20:	647b      	str	r3, [r7, #68]	; 0x44
 8017d22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d28:	e841 2300 	strex	r3, r2, [r1]
 8017d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d1e4      	bne.n	8017cfe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	69db      	ldr	r3, [r3, #28]
 8017d3a:	f003 0310 	and.w	r3, r3, #16
 8017d3e:	2b10      	cmp	r3, #16
 8017d40:	d103      	bne.n	8017d4a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2210      	movs	r2, #16
 8017d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017d50:	4619      	mov	r1, r3
 8017d52:	6878      	ldr	r0, [r7, #4]
 8017d54:	f7fe fa58 	bl	8016208 <HAL_UARTEx_RxEventCallback>
 8017d58:	e002      	b.n	8017d60 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f7eb f892 	bl	8002e84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017d60:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d006      	beq.n	8017d76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8017d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017d6c:	f003 0320 	and.w	r3, r3, #32
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f47f aecd 	bne.w	8017b10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017d7c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017d80:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d049      	beq.n	8017e1c <UART_RxISR_16BIT_FIFOEN+0x354>
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017d8e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d242      	bcs.n	8017e1c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	3308      	adds	r3, #8
 8017d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da0:	e853 3f00 	ldrex	r3, [r3]
 8017da4:	623b      	str	r3, [r7, #32]
   return(result);
 8017da6:	6a3b      	ldr	r3, [r7, #32]
 8017da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	3308      	adds	r3, #8
 8017db6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017dba:	633a      	str	r2, [r7, #48]	; 0x30
 8017dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017dc2:	e841 2300 	strex	r3, r2, [r1]
 8017dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d1e3      	bne.n	8017d96 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	4a16      	ldr	r2, [pc, #88]	; (8017e2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8017dd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	e853 3f00 	ldrex	r3, [r3]
 8017de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	f043 0320 	orr.w	r3, r3, #32
 8017de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	461a      	mov	r2, r3
 8017df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017df6:	61fb      	str	r3, [r7, #28]
 8017df8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dfa:	69b9      	ldr	r1, [r7, #24]
 8017dfc:	69fa      	ldr	r2, [r7, #28]
 8017dfe:	e841 2300 	strex	r3, r2, [r1]
 8017e02:	617b      	str	r3, [r7, #20]
   return(result);
 8017e04:	697b      	ldr	r3, [r7, #20]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d1e4      	bne.n	8017dd4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017e0a:	e007      	b.n	8017e1c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	699a      	ldr	r2, [r3, #24]
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	f042 0208 	orr.w	r2, r2, #8
 8017e1a:	619a      	str	r2, [r3, #24]
}
 8017e1c:	bf00      	nop
 8017e1e:	37b8      	adds	r7, #184	; 0xb8
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}
 8017e24:	effffffe 	.word	0xeffffffe
 8017e28:	58000c00 	.word	0x58000c00
 8017e2c:	080175b1 	.word	0x080175b1

08017e30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b083      	sub	sp, #12
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017e38:	bf00      	nop
 8017e3a:	370c      	adds	r7, #12
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e42:	4770      	bx	lr

08017e44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017e44:	b480      	push	{r7}
 8017e46:	b083      	sub	sp, #12
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8017e4c:	bf00      	nop
 8017e4e:	370c      	adds	r7, #12
 8017e50:	46bd      	mov	sp, r7
 8017e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e56:	4770      	bx	lr

08017e58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8017e58:	b480      	push	{r7}
 8017e5a:	b083      	sub	sp, #12
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8017e60:	bf00      	nop
 8017e62:	370c      	adds	r7, #12
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8017e6c:	b480      	push	{r7}
 8017e6e:	b089      	sub	sp, #36	; 0x24
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017e7a:	2b01      	cmp	r3, #1
 8017e7c:	d101      	bne.n	8017e82 <HAL_UARTEx_EnableStopMode+0x16>
 8017e7e:	2302      	movs	r3, #2
 8017e80:	e021      	b.n	8017ec6 <HAL_UARTEx_EnableStopMode+0x5a>
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2201      	movs	r2, #1
 8017e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	e853 3f00 	ldrex	r3, [r3]
 8017e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	f043 0302 	orr.w	r3, r3, #2
 8017e9e:	61fb      	str	r3, [r7, #28]
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	69fb      	ldr	r3, [r7, #28]
 8017ea8:	61bb      	str	r3, [r7, #24]
 8017eaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017eac:	6979      	ldr	r1, [r7, #20]
 8017eae:	69ba      	ldr	r2, [r7, #24]
 8017eb0:	e841 2300 	strex	r3, r2, [r1]
 8017eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d1e6      	bne.n	8017e8a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017ec4:	2300      	movs	r3, #0
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3724      	adds	r7, #36	; 0x24
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr

08017ed2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8017ed2:	b580      	push	{r7, lr}
 8017ed4:	b084      	sub	sp, #16
 8017ed6:	af00      	add	r7, sp, #0
 8017ed8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017ee0:	2b01      	cmp	r3, #1
 8017ee2:	d101      	bne.n	8017ee8 <HAL_UARTEx_EnableFifoMode+0x16>
 8017ee4:	2302      	movs	r3, #2
 8017ee6:	e02b      	b.n	8017f40 <HAL_UARTEx_EnableFifoMode+0x6e>
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2201      	movs	r2, #1
 8017eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2224      	movs	r2, #36	; 0x24
 8017ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	681a      	ldr	r2, [r3, #0]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	f022 0201 	bic.w	r2, r2, #1
 8017f0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017f16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8017f1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	68fa      	ldr	r2, [r7, #12]
 8017f26:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f000 f8c3 	bl	80180b4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2220      	movs	r2, #32
 8017f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2200      	movs	r2, #0
 8017f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017f3e:	2300      	movs	r3, #0
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3710      	adds	r7, #16
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}

08017f48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b085      	sub	sp, #20
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017f56:	2b01      	cmp	r3, #1
 8017f58:	d101      	bne.n	8017f5e <HAL_UARTEx_DisableFifoMode+0x16>
 8017f5a:	2302      	movs	r3, #2
 8017f5c:	e027      	b.n	8017fae <HAL_UARTEx_DisableFifoMode+0x66>
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	2201      	movs	r2, #1
 8017f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	2224      	movs	r2, #36	; 0x24
 8017f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	f022 0201 	bic.w	r2, r2, #1
 8017f84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017f8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	2200      	movs	r2, #0
 8017f92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	68fa      	ldr	r2, [r7, #12]
 8017f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2220      	movs	r2, #32
 8017fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017fac:	2300      	movs	r3, #0
}
 8017fae:	4618      	mov	r0, r3
 8017fb0:	3714      	adds	r7, #20
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr

08017fba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017fba:	b580      	push	{r7, lr}
 8017fbc:	b084      	sub	sp, #16
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
 8017fc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d101      	bne.n	8017fd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017fce:	2302      	movs	r3, #2
 8017fd0:	e02d      	b.n	801802e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	2201      	movs	r2, #1
 8017fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2224      	movs	r2, #36	; 0x24
 8017fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	681a      	ldr	r2, [r3, #0]
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	f022 0201 	bic.w	r2, r2, #1
 8017ff8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	689b      	ldr	r3, [r3, #8]
 8018000:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	683a      	ldr	r2, [r7, #0]
 801800a:	430a      	orrs	r2, r1
 801800c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801800e:	6878      	ldr	r0, [r7, #4]
 8018010:	f000 f850 	bl	80180b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	68fa      	ldr	r2, [r7, #12]
 801801a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2220      	movs	r2, #32
 8018020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2200      	movs	r2, #0
 8018028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801802c:	2300      	movs	r3, #0
}
 801802e:	4618      	mov	r0, r3
 8018030:	3710      	adds	r7, #16
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018036:	b580      	push	{r7, lr}
 8018038:	b084      	sub	sp, #16
 801803a:	af00      	add	r7, sp, #0
 801803c:	6078      	str	r0, [r7, #4]
 801803e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018046:	2b01      	cmp	r3, #1
 8018048:	d101      	bne.n	801804e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801804a:	2302      	movs	r3, #2
 801804c:	e02d      	b.n	80180aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	2201      	movs	r2, #1
 8018052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	2224      	movs	r2, #36	; 0x24
 801805a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	681a      	ldr	r2, [r3, #0]
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f022 0201 	bic.w	r2, r2, #1
 8018074:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	689b      	ldr	r3, [r3, #8]
 801807c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	683a      	ldr	r2, [r7, #0]
 8018086:	430a      	orrs	r2, r1
 8018088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f000 f812 	bl	80180b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	68fa      	ldr	r2, [r7, #12]
 8018096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2220      	movs	r2, #32
 801809c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2200      	movs	r2, #0
 80180a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80180a8:	2300      	movs	r3, #0
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3710      	adds	r7, #16
 80180ae:	46bd      	mov	sp, r7
 80180b0:	bd80      	pop	{r7, pc}
	...

080180b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80180b4:	b480      	push	{r7}
 80180b6:	b085      	sub	sp, #20
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d108      	bne.n	80180d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	2201      	movs	r2, #1
 80180c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2201      	movs	r2, #1
 80180d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80180d4:	e031      	b.n	801813a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80180d6:	2310      	movs	r3, #16
 80180d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80180da:	2310      	movs	r3, #16
 80180dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	689b      	ldr	r3, [r3, #8]
 80180e4:	0e5b      	lsrs	r3, r3, #25
 80180e6:	b2db      	uxtb	r3, r3
 80180e8:	f003 0307 	and.w	r3, r3, #7
 80180ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	689b      	ldr	r3, [r3, #8]
 80180f4:	0f5b      	lsrs	r3, r3, #29
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	f003 0307 	and.w	r3, r3, #7
 80180fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80180fe:	7bbb      	ldrb	r3, [r7, #14]
 8018100:	7b3a      	ldrb	r2, [r7, #12]
 8018102:	4911      	ldr	r1, [pc, #68]	; (8018148 <UARTEx_SetNbDataToProcess+0x94>)
 8018104:	5c8a      	ldrb	r2, [r1, r2]
 8018106:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801810a:	7b3a      	ldrb	r2, [r7, #12]
 801810c:	490f      	ldr	r1, [pc, #60]	; (801814c <UARTEx_SetNbDataToProcess+0x98>)
 801810e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018110:	fb93 f3f2 	sdiv	r3, r3, r2
 8018114:	b29a      	uxth	r2, r3
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801811c:	7bfb      	ldrb	r3, [r7, #15]
 801811e:	7b7a      	ldrb	r2, [r7, #13]
 8018120:	4909      	ldr	r1, [pc, #36]	; (8018148 <UARTEx_SetNbDataToProcess+0x94>)
 8018122:	5c8a      	ldrb	r2, [r1, r2]
 8018124:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018128:	7b7a      	ldrb	r2, [r7, #13]
 801812a:	4908      	ldr	r1, [pc, #32]	; (801814c <UARTEx_SetNbDataToProcess+0x98>)
 801812c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801812e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018132:	b29a      	uxth	r2, r3
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801813a:	bf00      	nop
 801813c:	3714      	adds	r7, #20
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr
 8018146:	bf00      	nop
 8018148:	0801bde8 	.word	0x0801bde8
 801814c:	0801bdf0 	.word	0x0801bdf0

08018150 <__NVIC_SetPriority>:
{
 8018150:	b480      	push	{r7}
 8018152:	b083      	sub	sp, #12
 8018154:	af00      	add	r7, sp, #0
 8018156:	4603      	mov	r3, r0
 8018158:	6039      	str	r1, [r7, #0]
 801815a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801815c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018160:	2b00      	cmp	r3, #0
 8018162:	db0a      	blt.n	801817a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	b2da      	uxtb	r2, r3
 8018168:	490c      	ldr	r1, [pc, #48]	; (801819c <__NVIC_SetPriority+0x4c>)
 801816a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801816e:	0112      	lsls	r2, r2, #4
 8018170:	b2d2      	uxtb	r2, r2
 8018172:	440b      	add	r3, r1
 8018174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018178:	e00a      	b.n	8018190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	b2da      	uxtb	r2, r3
 801817e:	4908      	ldr	r1, [pc, #32]	; (80181a0 <__NVIC_SetPriority+0x50>)
 8018180:	88fb      	ldrh	r3, [r7, #6]
 8018182:	f003 030f 	and.w	r3, r3, #15
 8018186:	3b04      	subs	r3, #4
 8018188:	0112      	lsls	r2, r2, #4
 801818a:	b2d2      	uxtb	r2, r2
 801818c:	440b      	add	r3, r1
 801818e:	761a      	strb	r2, [r3, #24]
}
 8018190:	bf00      	nop
 8018192:	370c      	adds	r7, #12
 8018194:	46bd      	mov	sp, r7
 8018196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819a:	4770      	bx	lr
 801819c:	e000e100 	.word	0xe000e100
 80181a0:	e000ed00 	.word	0xe000ed00

080181a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80181a4:	b580      	push	{r7, lr}
 80181a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80181a8:	4b05      	ldr	r3, [pc, #20]	; (80181c0 <SysTick_Handler+0x1c>)
 80181aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80181ac:	f002 fbde 	bl	801a96c <xTaskGetSchedulerState>
 80181b0:	4603      	mov	r3, r0
 80181b2:	2b01      	cmp	r3, #1
 80181b4:	d001      	beq.n	80181ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80181b6:	f003 f9ff 	bl	801b5b8 <xPortSysTickHandler>
  }
}
 80181ba:	bf00      	nop
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	e000e010 	.word	0xe000e010

080181c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80181c4:	b580      	push	{r7, lr}
 80181c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80181c8:	2100      	movs	r1, #0
 80181ca:	f06f 0004 	mvn.w	r0, #4
 80181ce:	f7ff ffbf 	bl	8018150 <__NVIC_SetPriority>
#endif
}
 80181d2:	bf00      	nop
 80181d4:	bd80      	pop	{r7, pc}
	...

080181d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80181d8:	b480      	push	{r7}
 80181da:	b083      	sub	sp, #12
 80181dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80181de:	f3ef 8305 	mrs	r3, IPSR
 80181e2:	603b      	str	r3, [r7, #0]
  return(result);
 80181e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d003      	beq.n	80181f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80181ea:	f06f 0305 	mvn.w	r3, #5
 80181ee:	607b      	str	r3, [r7, #4]
 80181f0:	e00c      	b.n	801820c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80181f2:	4b0a      	ldr	r3, [pc, #40]	; (801821c <osKernelInitialize+0x44>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d105      	bne.n	8018206 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80181fa:	4b08      	ldr	r3, [pc, #32]	; (801821c <osKernelInitialize+0x44>)
 80181fc:	2201      	movs	r2, #1
 80181fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018200:	2300      	movs	r3, #0
 8018202:	607b      	str	r3, [r7, #4]
 8018204:	e002      	b.n	801820c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8018206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801820a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801820c:	687b      	ldr	r3, [r7, #4]
}
 801820e:	4618      	mov	r0, r3
 8018210:	370c      	adds	r7, #12
 8018212:	46bd      	mov	sp, r7
 8018214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018218:	4770      	bx	lr
 801821a:	bf00      	nop
 801821c:	24002710 	.word	0x24002710

08018220 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018226:	f3ef 8305 	mrs	r3, IPSR
 801822a:	603b      	str	r3, [r7, #0]
  return(result);
 801822c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801822e:	2b00      	cmp	r3, #0
 8018230:	d003      	beq.n	801823a <osKernelStart+0x1a>
    stat = osErrorISR;
 8018232:	f06f 0305 	mvn.w	r3, #5
 8018236:	607b      	str	r3, [r7, #4]
 8018238:	e010      	b.n	801825c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801823a:	4b0b      	ldr	r3, [pc, #44]	; (8018268 <osKernelStart+0x48>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	2b01      	cmp	r3, #1
 8018240:	d109      	bne.n	8018256 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8018242:	f7ff ffbf 	bl	80181c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018246:	4b08      	ldr	r3, [pc, #32]	; (8018268 <osKernelStart+0x48>)
 8018248:	2202      	movs	r2, #2
 801824a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801824c:	f001 fe92 	bl	8019f74 <vTaskStartScheduler>
      stat = osOK;
 8018250:	2300      	movs	r3, #0
 8018252:	607b      	str	r3, [r7, #4]
 8018254:	e002      	b.n	801825c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8018256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801825a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801825c:	687b      	ldr	r3, [r7, #4]
}
 801825e:	4618      	mov	r0, r3
 8018260:	3708      	adds	r7, #8
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
 8018266:	bf00      	nop
 8018268:	24002710 	.word	0x24002710

0801826c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801826c:	b580      	push	{r7, lr}
 801826e:	b08e      	sub	sp, #56	; 0x38
 8018270:	af04      	add	r7, sp, #16
 8018272:	60f8      	str	r0, [r7, #12]
 8018274:	60b9      	str	r1, [r7, #8]
 8018276:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018278:	2300      	movs	r3, #0
 801827a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801827c:	f3ef 8305 	mrs	r3, IPSR
 8018280:	617b      	str	r3, [r7, #20]
  return(result);
 8018282:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8018284:	2b00      	cmp	r3, #0
 8018286:	d17e      	bne.n	8018386 <osThreadNew+0x11a>
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d07b      	beq.n	8018386 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801828e:	2380      	movs	r3, #128	; 0x80
 8018290:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8018292:	2318      	movs	r3, #24
 8018294:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8018296:	2300      	movs	r3, #0
 8018298:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801829a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801829e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d045      	beq.n	8018332 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d002      	beq.n	80182b4 <osThreadNew+0x48>
        name = attr->name;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	699b      	ldr	r3, [r3, #24]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d002      	beq.n	80182c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	699b      	ldr	r3, [r3, #24]
 80182c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d008      	beq.n	80182da <osThreadNew+0x6e>
 80182c8:	69fb      	ldr	r3, [r7, #28]
 80182ca:	2b38      	cmp	r3, #56	; 0x38
 80182cc:	d805      	bhi.n	80182da <osThreadNew+0x6e>
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	685b      	ldr	r3, [r3, #4]
 80182d2:	f003 0301 	and.w	r3, r3, #1
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d001      	beq.n	80182de <osThreadNew+0x72>
        return (NULL);
 80182da:	2300      	movs	r3, #0
 80182dc:	e054      	b.n	8018388 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	695b      	ldr	r3, [r3, #20]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d003      	beq.n	80182ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	695b      	ldr	r3, [r3, #20]
 80182ea:	089b      	lsrs	r3, r3, #2
 80182ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	689b      	ldr	r3, [r3, #8]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d00e      	beq.n	8018314 <osThreadNew+0xa8>
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	2b5b      	cmp	r3, #91	; 0x5b
 80182fc:	d90a      	bls.n	8018314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018302:	2b00      	cmp	r3, #0
 8018304:	d006      	beq.n	8018314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	695b      	ldr	r3, [r3, #20]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d002      	beq.n	8018314 <osThreadNew+0xa8>
        mem = 1;
 801830e:	2301      	movs	r3, #1
 8018310:	61bb      	str	r3, [r7, #24]
 8018312:	e010      	b.n	8018336 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	689b      	ldr	r3, [r3, #8]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d10c      	bne.n	8018336 <osThreadNew+0xca>
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	68db      	ldr	r3, [r3, #12]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d108      	bne.n	8018336 <osThreadNew+0xca>
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	691b      	ldr	r3, [r3, #16]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d104      	bne.n	8018336 <osThreadNew+0xca>
          mem = 0;
 801832c:	2300      	movs	r3, #0
 801832e:	61bb      	str	r3, [r7, #24]
 8018330:	e001      	b.n	8018336 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8018332:	2300      	movs	r3, #0
 8018334:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	2b01      	cmp	r3, #1
 801833a:	d110      	bne.n	801835e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018340:	687a      	ldr	r2, [r7, #4]
 8018342:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018344:	9202      	str	r2, [sp, #8]
 8018346:	9301      	str	r3, [sp, #4]
 8018348:	69fb      	ldr	r3, [r7, #28]
 801834a:	9300      	str	r3, [sp, #0]
 801834c:	68bb      	ldr	r3, [r7, #8]
 801834e:	6a3a      	ldr	r2, [r7, #32]
 8018350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018352:	68f8      	ldr	r0, [r7, #12]
 8018354:	f001 fb32 	bl	80199bc <xTaskCreateStatic>
 8018358:	4603      	mov	r3, r0
 801835a:	613b      	str	r3, [r7, #16]
 801835c:	e013      	b.n	8018386 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801835e:	69bb      	ldr	r3, [r7, #24]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d110      	bne.n	8018386 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018364:	6a3b      	ldr	r3, [r7, #32]
 8018366:	b29a      	uxth	r2, r3
 8018368:	f107 0310 	add.w	r3, r7, #16
 801836c:	9301      	str	r3, [sp, #4]
 801836e:	69fb      	ldr	r3, [r7, #28]
 8018370:	9300      	str	r3, [sp, #0]
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018376:	68f8      	ldr	r0, [r7, #12]
 8018378:	f001 fb7d 	bl	8019a76 <xTaskCreate>
 801837c:	4603      	mov	r3, r0
 801837e:	2b01      	cmp	r3, #1
 8018380:	d001      	beq.n	8018386 <osThreadNew+0x11a>
            hTask = NULL;
 8018382:	2300      	movs	r3, #0
 8018384:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018386:	693b      	ldr	r3, [r7, #16]
}
 8018388:	4618      	mov	r0, r3
 801838a:	3728      	adds	r7, #40	; 0x28
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}

08018390 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8018390:	b480      	push	{r7}
 8018392:	b083      	sub	sp, #12
 8018394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018396:	f3ef 8305 	mrs	r3, IPSR
 801839a:	603b      	str	r3, [r7, #0]
  return(result);
 801839c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d003      	beq.n	80183aa <osThreadYield+0x1a>
    stat = osErrorISR;
 80183a2:	f06f 0305 	mvn.w	r3, #5
 80183a6:	607b      	str	r3, [r7, #4]
 80183a8:	e009      	b.n	80183be <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80183aa:	2300      	movs	r3, #0
 80183ac:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80183ae:	4b07      	ldr	r3, [pc, #28]	; (80183cc <osThreadYield+0x3c>)
 80183b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183b4:	601a      	str	r2, [r3, #0]
 80183b6:	f3bf 8f4f 	dsb	sy
 80183ba:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80183be:	687b      	ldr	r3, [r7, #4]
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	370c      	adds	r7, #12
 80183c4:	46bd      	mov	sp, r7
 80183c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ca:	4770      	bx	lr
 80183cc:	e000ed04 	.word	0xe000ed04

080183d0 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b086      	sub	sp, #24
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80183dc:	f3ef 8305 	mrs	r3, IPSR
 80183e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80183e2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d003      	beq.n	80183f0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80183e8:	f06f 0305 	mvn.w	r3, #5
 80183ec:	617b      	str	r3, [r7, #20]
 80183ee:	e00b      	b.n	8018408 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80183f0:	693b      	ldr	r3, [r7, #16]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d103      	bne.n	80183fe <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80183f6:	f06f 0303 	mvn.w	r3, #3
 80183fa:	617b      	str	r3, [r7, #20]
 80183fc:	e004      	b.n	8018408 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80183fe:	2300      	movs	r3, #0
 8018400:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8018402:	6938      	ldr	r0, [r7, #16]
 8018404:	f001 fcb0 	bl	8019d68 <vTaskSuspend>
  }

  return (stat);
 8018408:	697b      	ldr	r3, [r7, #20]
}
 801840a:	4618      	mov	r0, r3
 801840c:	3718      	adds	r7, #24
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}

08018412 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8018412:	b580      	push	{r7, lr}
 8018414:	b086      	sub	sp, #24
 8018416:	af00      	add	r7, sp, #0
 8018418:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801841e:	f3ef 8305 	mrs	r3, IPSR
 8018422:	60fb      	str	r3, [r7, #12]
  return(result);
 8018424:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018426:	2b00      	cmp	r3, #0
 8018428:	d003      	beq.n	8018432 <osThreadResume+0x20>
    stat = osErrorISR;
 801842a:	f06f 0305 	mvn.w	r3, #5
 801842e:	617b      	str	r3, [r7, #20]
 8018430:	e00b      	b.n	801844a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d103      	bne.n	8018440 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8018438:	f06f 0303 	mvn.w	r3, #3
 801843c:	617b      	str	r3, [r7, #20]
 801843e:	e004      	b.n	801844a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8018440:	2300      	movs	r3, #0
 8018442:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8018444:	6938      	ldr	r0, [r7, #16]
 8018446:	f001 fd37 	bl	8019eb8 <vTaskResume>
  }

  return (stat);
 801844a:	697b      	ldr	r3, [r7, #20]
}
 801844c:	4618      	mov	r0, r3
 801844e:	3718      	adds	r7, #24
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018454:	b580      	push	{r7, lr}
 8018456:	b084      	sub	sp, #16
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801845c:	f3ef 8305 	mrs	r3, IPSR
 8018460:	60bb      	str	r3, [r7, #8]
  return(result);
 8018462:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018464:	2b00      	cmp	r3, #0
 8018466:	d003      	beq.n	8018470 <osDelay+0x1c>
    stat = osErrorISR;
 8018468:	f06f 0305 	mvn.w	r3, #5
 801846c:	60fb      	str	r3, [r7, #12]
 801846e:	e007      	b.n	8018480 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018470:	2300      	movs	r3, #0
 8018472:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d002      	beq.n	8018480 <osDelay+0x2c>
      vTaskDelay(ticks);
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f001 fc40 	bl	8019d00 <vTaskDelay>
    }
  }

  return (stat);
 8018480:	68fb      	ldr	r3, [r7, #12]
}
 8018482:	4618      	mov	r0, r3
 8018484:	3710      	adds	r7, #16
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}

0801848a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801848a:	b580      	push	{r7, lr}
 801848c:	b086      	sub	sp, #24
 801848e:	af00      	add	r7, sp, #0
 8018490:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8018492:	2300      	movs	r3, #0
 8018494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018496:	f3ef 8305 	mrs	r3, IPSR
 801849a:	60fb      	str	r3, [r7, #12]
  return(result);
 801849c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d12d      	bne.n	80184fe <osEventFlagsNew+0x74>
    mem = -1;
 80184a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184a6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d015      	beq.n	80184da <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	689b      	ldr	r3, [r3, #8]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d006      	beq.n	80184c4 <osEventFlagsNew+0x3a>
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	68db      	ldr	r3, [r3, #12]
 80184ba:	2b1f      	cmp	r3, #31
 80184bc:	d902      	bls.n	80184c4 <osEventFlagsNew+0x3a>
        mem = 1;
 80184be:	2301      	movs	r3, #1
 80184c0:	613b      	str	r3, [r7, #16]
 80184c2:	e00c      	b.n	80184de <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	689b      	ldr	r3, [r3, #8]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d108      	bne.n	80184de <osEventFlagsNew+0x54>
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	68db      	ldr	r3, [r3, #12]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d104      	bne.n	80184de <osEventFlagsNew+0x54>
          mem = 0;
 80184d4:	2300      	movs	r3, #0
 80184d6:	613b      	str	r3, [r7, #16]
 80184d8:	e001      	b.n	80184de <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80184da:	2300      	movs	r3, #0
 80184dc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80184de:	693b      	ldr	r3, [r7, #16]
 80184e0:	2b01      	cmp	r3, #1
 80184e2:	d106      	bne.n	80184f2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	689b      	ldr	r3, [r3, #8]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f000 f9db 	bl	80188a4 <xEventGroupCreateStatic>
 80184ee:	6178      	str	r0, [r7, #20]
 80184f0:	e005      	b.n	80184fe <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80184f2:	693b      	ldr	r3, [r7, #16]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d102      	bne.n	80184fe <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80184f8:	f000 fa0b 	bl	8018912 <xEventGroupCreate>
 80184fc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80184fe:	697b      	ldr	r3, [r7, #20]
}
 8018500:	4618      	mov	r0, r3
 8018502:	3718      	adds	r7, #24
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8018508:	b580      	push	{r7, lr}
 801850a:	b086      	sub	sp, #24
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
 8018510:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018516:	693b      	ldr	r3, [r7, #16]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d004      	beq.n	8018526 <osEventFlagsSet+0x1e>
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018522:	2b00      	cmp	r3, #0
 8018524:	d003      	beq.n	801852e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018526:	f06f 0303 	mvn.w	r3, #3
 801852a:	617b      	str	r3, [r7, #20]
 801852c:	e028      	b.n	8018580 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801852e:	f3ef 8305 	mrs	r3, IPSR
 8018532:	60fb      	str	r3, [r7, #12]
  return(result);
 8018534:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018536:	2b00      	cmp	r3, #0
 8018538:	d01d      	beq.n	8018576 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801853a:	2300      	movs	r3, #0
 801853c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801853e:	f107 0308 	add.w	r3, r7, #8
 8018542:	461a      	mov	r2, r3
 8018544:	6839      	ldr	r1, [r7, #0]
 8018546:	6938      	ldr	r0, [r7, #16]
 8018548:	f000 fc04 	bl	8018d54 <xEventGroupSetBitsFromISR>
 801854c:	4603      	mov	r3, r0
 801854e:	2b00      	cmp	r3, #0
 8018550:	d103      	bne.n	801855a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8018552:	f06f 0302 	mvn.w	r3, #2
 8018556:	617b      	str	r3, [r7, #20]
 8018558:	e012      	b.n	8018580 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801855a:	683b      	ldr	r3, [r7, #0]
 801855c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801855e:	68bb      	ldr	r3, [r7, #8]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d00d      	beq.n	8018580 <osEventFlagsSet+0x78>
 8018564:	4b09      	ldr	r3, [pc, #36]	; (801858c <osEventFlagsSet+0x84>)
 8018566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801856a:	601a      	str	r2, [r3, #0]
 801856c:	f3bf 8f4f 	dsb	sy
 8018570:	f3bf 8f6f 	isb	sy
 8018574:	e004      	b.n	8018580 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8018576:	6839      	ldr	r1, [r7, #0]
 8018578:	6938      	ldr	r0, [r7, #16]
 801857a:	f000 fb23 	bl	8018bc4 <xEventGroupSetBits>
 801857e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018580:	697b      	ldr	r3, [r7, #20]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3718      	adds	r7, #24
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}
 801858a:	bf00      	nop
 801858c:	e000ed04 	.word	0xe000ed04

08018590 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8018590:	b580      	push	{r7, lr}
 8018592:	b086      	sub	sp, #24
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d004      	beq.n	80185ae <osEventFlagsClear+0x1e>
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d003      	beq.n	80185b6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80185ae:	f06f 0303 	mvn.w	r3, #3
 80185b2:	617b      	str	r3, [r7, #20]
 80185b4:	e019      	b.n	80185ea <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80185b6:	f3ef 8305 	mrs	r3, IPSR
 80185ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80185bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d00e      	beq.n	80185e0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80185c2:	6938      	ldr	r0, [r7, #16]
 80185c4:	f000 fada 	bl	8018b7c <xEventGroupGetBitsFromISR>
 80185c8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80185ca:	6839      	ldr	r1, [r7, #0]
 80185cc:	6938      	ldr	r0, [r7, #16]
 80185ce:	f000 fac1 	bl	8018b54 <xEventGroupClearBitsFromISR>
 80185d2:	4603      	mov	r3, r0
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d108      	bne.n	80185ea <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80185d8:	f06f 0302 	mvn.w	r3, #2
 80185dc:	617b      	str	r3, [r7, #20]
 80185de:	e004      	b.n	80185ea <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80185e0:	6839      	ldr	r1, [r7, #0]
 80185e2:	6938      	ldr	r0, [r7, #16]
 80185e4:	f000 fa7e 	bl	8018ae4 <xEventGroupClearBits>
 80185e8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80185ea:	697b      	ldr	r3, [r7, #20]
}
 80185ec:	4618      	mov	r0, r3
 80185ee:	3718      	adds	r7, #24
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b08c      	sub	sp, #48	; 0x30
 80185f8:	af02      	add	r7, sp, #8
 80185fa:	60f8      	str	r0, [r7, #12]
 80185fc:	60b9      	str	r1, [r7, #8]
 80185fe:	607a      	str	r2, [r7, #4]
 8018600:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018606:	69bb      	ldr	r3, [r7, #24]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d004      	beq.n	8018616 <osEventFlagsWait+0x22>
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018612:	2b00      	cmp	r3, #0
 8018614:	d003      	beq.n	801861e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8018616:	f06f 0303 	mvn.w	r3, #3
 801861a:	61fb      	str	r3, [r7, #28]
 801861c:	e04b      	b.n	80186b6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801861e:	f3ef 8305 	mrs	r3, IPSR
 8018622:	617b      	str	r3, [r7, #20]
  return(result);
 8018624:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8018626:	2b00      	cmp	r3, #0
 8018628:	d003      	beq.n	8018632 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801862a:	f06f 0305 	mvn.w	r3, #5
 801862e:	61fb      	str	r3, [r7, #28]
 8018630:	e041      	b.n	80186b6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f003 0301 	and.w	r3, r3, #1
 8018638:	2b00      	cmp	r3, #0
 801863a:	d002      	beq.n	8018642 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801863c:	2301      	movs	r3, #1
 801863e:	627b      	str	r3, [r7, #36]	; 0x24
 8018640:	e001      	b.n	8018646 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8018642:	2300      	movs	r3, #0
 8018644:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	f003 0302 	and.w	r3, r3, #2
 801864c:	2b00      	cmp	r3, #0
 801864e:	d002      	beq.n	8018656 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8018650:	2300      	movs	r3, #0
 8018652:	623b      	str	r3, [r7, #32]
 8018654:	e001      	b.n	801865a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8018656:	2301      	movs	r3, #1
 8018658:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	9300      	str	r3, [sp, #0]
 801865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018660:	6a3a      	ldr	r2, [r7, #32]
 8018662:	68b9      	ldr	r1, [r7, #8]
 8018664:	69b8      	ldr	r0, [r7, #24]
 8018666:	f000 f96f 	bl	8018948 <xEventGroupWaitBits>
 801866a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f003 0301 	and.w	r3, r3, #1
 8018672:	2b00      	cmp	r3, #0
 8018674:	d010      	beq.n	8018698 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8018676:	68ba      	ldr	r2, [r7, #8]
 8018678:	69fb      	ldr	r3, [r7, #28]
 801867a:	4013      	ands	r3, r2
 801867c:	68ba      	ldr	r2, [r7, #8]
 801867e:	429a      	cmp	r2, r3
 8018680:	d019      	beq.n	80186b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018682:	683b      	ldr	r3, [r7, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d003      	beq.n	8018690 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8018688:	f06f 0301 	mvn.w	r3, #1
 801868c:	61fb      	str	r3, [r7, #28]
 801868e:	e012      	b.n	80186b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018690:	f06f 0302 	mvn.w	r3, #2
 8018694:	61fb      	str	r3, [r7, #28]
 8018696:	e00e      	b.n	80186b6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8018698:	68ba      	ldr	r2, [r7, #8]
 801869a:	69fb      	ldr	r3, [r7, #28]
 801869c:	4013      	ands	r3, r2
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d109      	bne.n	80186b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d003      	beq.n	80186b0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80186a8:	f06f 0301 	mvn.w	r3, #1
 80186ac:	61fb      	str	r3, [r7, #28]
 80186ae:	e002      	b.n	80186b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80186b0:	f06f 0302 	mvn.w	r3, #2
 80186b4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80186b6:	69fb      	ldr	r3, [r7, #28]
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	3728      	adds	r7, #40	; 0x28
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}

080186c0 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b088      	sub	sp, #32
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	603b      	str	r3, [r7, #0]
 80186cc:	4613      	mov	r3, r2
 80186ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80186d4:	2300      	movs	r3, #0
 80186d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80186d8:	f3ef 8305 	mrs	r3, IPSR
 80186dc:	617b      	str	r3, [r7, #20]
  return(result);
 80186de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d028      	beq.n	8018736 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80186e4:	69bb      	ldr	r3, [r7, #24]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d005      	beq.n	80186f6 <osMessageQueuePut+0x36>
 80186ea:	68bb      	ldr	r3, [r7, #8]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d002      	beq.n	80186f6 <osMessageQueuePut+0x36>
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d003      	beq.n	80186fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80186f6:	f06f 0303 	mvn.w	r3, #3
 80186fa:	61fb      	str	r3, [r7, #28]
 80186fc:	e038      	b.n	8018770 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80186fe:	2300      	movs	r3, #0
 8018700:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018702:	f107 0210 	add.w	r2, r7, #16
 8018706:	2300      	movs	r3, #0
 8018708:	68b9      	ldr	r1, [r7, #8]
 801870a:	69b8      	ldr	r0, [r7, #24]
 801870c:	f000 fdec 	bl	80192e8 <xQueueGenericSendFromISR>
 8018710:	4603      	mov	r3, r0
 8018712:	2b01      	cmp	r3, #1
 8018714:	d003      	beq.n	801871e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8018716:	f06f 0302 	mvn.w	r3, #2
 801871a:	61fb      	str	r3, [r7, #28]
 801871c:	e028      	b.n	8018770 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801871e:	693b      	ldr	r3, [r7, #16]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d025      	beq.n	8018770 <osMessageQueuePut+0xb0>
 8018724:	4b15      	ldr	r3, [pc, #84]	; (801877c <osMessageQueuePut+0xbc>)
 8018726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801872a:	601a      	str	r2, [r3, #0]
 801872c:	f3bf 8f4f 	dsb	sy
 8018730:	f3bf 8f6f 	isb	sy
 8018734:	e01c      	b.n	8018770 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018736:	69bb      	ldr	r3, [r7, #24]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d002      	beq.n	8018742 <osMessageQueuePut+0x82>
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d103      	bne.n	801874a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8018742:	f06f 0303 	mvn.w	r3, #3
 8018746:	61fb      	str	r3, [r7, #28]
 8018748:	e012      	b.n	8018770 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801874a:	2300      	movs	r3, #0
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	68b9      	ldr	r1, [r7, #8]
 8018750:	69b8      	ldr	r0, [r7, #24]
 8018752:	f000 fccb 	bl	80190ec <xQueueGenericSend>
 8018756:	4603      	mov	r3, r0
 8018758:	2b01      	cmp	r3, #1
 801875a:	d009      	beq.n	8018770 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801875c:	683b      	ldr	r3, [r7, #0]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d003      	beq.n	801876a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8018762:	f06f 0301 	mvn.w	r3, #1
 8018766:	61fb      	str	r3, [r7, #28]
 8018768:	e002      	b.n	8018770 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801876a:	f06f 0302 	mvn.w	r3, #2
 801876e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8018770:	69fb      	ldr	r3, [r7, #28]
}
 8018772:	4618      	mov	r0, r3
 8018774:	3720      	adds	r7, #32
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}
 801877a:	bf00      	nop
 801877c:	e000ed04 	.word	0xe000ed04

08018780 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8018780:	b580      	push	{r7, lr}
 8018782:	b088      	sub	sp, #32
 8018784:	af00      	add	r7, sp, #0
 8018786:	60f8      	str	r0, [r7, #12]
 8018788:	60b9      	str	r1, [r7, #8]
 801878a:	607a      	str	r2, [r7, #4]
 801878c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8018792:	2300      	movs	r3, #0
 8018794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018796:	f3ef 8305 	mrs	r3, IPSR
 801879a:	617b      	str	r3, [r7, #20]
  return(result);
 801879c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d028      	beq.n	80187f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d005      	beq.n	80187b4 <osMessageQueueGet+0x34>
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d002      	beq.n	80187b4 <osMessageQueueGet+0x34>
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d003      	beq.n	80187bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80187b4:	f06f 0303 	mvn.w	r3, #3
 80187b8:	61fb      	str	r3, [r7, #28]
 80187ba:	e037      	b.n	801882c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80187bc:	2300      	movs	r3, #0
 80187be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80187c0:	f107 0310 	add.w	r3, r7, #16
 80187c4:	461a      	mov	r2, r3
 80187c6:	68b9      	ldr	r1, [r7, #8]
 80187c8:	69b8      	ldr	r0, [r7, #24]
 80187ca:	f000 ff09 	bl	80195e0 <xQueueReceiveFromISR>
 80187ce:	4603      	mov	r3, r0
 80187d0:	2b01      	cmp	r3, #1
 80187d2:	d003      	beq.n	80187dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80187d4:	f06f 0302 	mvn.w	r3, #2
 80187d8:	61fb      	str	r3, [r7, #28]
 80187da:	e027      	b.n	801882c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d024      	beq.n	801882c <osMessageQueueGet+0xac>
 80187e2:	4b15      	ldr	r3, [pc, #84]	; (8018838 <osMessageQueueGet+0xb8>)
 80187e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187e8:	601a      	str	r2, [r3, #0]
 80187ea:	f3bf 8f4f 	dsb	sy
 80187ee:	f3bf 8f6f 	isb	sy
 80187f2:	e01b      	b.n	801882c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80187f4:	69bb      	ldr	r3, [r7, #24]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d002      	beq.n	8018800 <osMessageQueueGet+0x80>
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d103      	bne.n	8018808 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8018800:	f06f 0303 	mvn.w	r3, #3
 8018804:	61fb      	str	r3, [r7, #28]
 8018806:	e011      	b.n	801882c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018808:	683a      	ldr	r2, [r7, #0]
 801880a:	68b9      	ldr	r1, [r7, #8]
 801880c:	69b8      	ldr	r0, [r7, #24]
 801880e:	f000 fe07 	bl	8019420 <xQueueReceive>
 8018812:	4603      	mov	r3, r0
 8018814:	2b01      	cmp	r3, #1
 8018816:	d009      	beq.n	801882c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d003      	beq.n	8018826 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801881e:	f06f 0301 	mvn.w	r3, #1
 8018822:	61fb      	str	r3, [r7, #28]
 8018824:	e002      	b.n	801882c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8018826:	f06f 0302 	mvn.w	r3, #2
 801882a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801882c:	69fb      	ldr	r3, [r7, #28]
}
 801882e:	4618      	mov	r0, r3
 8018830:	3720      	adds	r7, #32
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}
 8018836:	bf00      	nop
 8018838:	e000ed04 	.word	0xe000ed04

0801883c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801883c:	b480      	push	{r7}
 801883e:	b085      	sub	sp, #20
 8018840:	af00      	add	r7, sp, #0
 8018842:	60f8      	str	r0, [r7, #12]
 8018844:	60b9      	str	r1, [r7, #8]
 8018846:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	4a07      	ldr	r2, [pc, #28]	; (8018868 <vApplicationGetIdleTaskMemory+0x2c>)
 801884c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801884e:	68bb      	ldr	r3, [r7, #8]
 8018850:	4a06      	ldr	r2, [pc, #24]	; (801886c <vApplicationGetIdleTaskMemory+0x30>)
 8018852:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	2280      	movs	r2, #128	; 0x80
 8018858:	601a      	str	r2, [r3, #0]
}
 801885a:	bf00      	nop
 801885c:	3714      	adds	r7, #20
 801885e:	46bd      	mov	sp, r7
 8018860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018864:	4770      	bx	lr
 8018866:	bf00      	nop
 8018868:	24002714 	.word	0x24002714
 801886c:	24002770 	.word	0x24002770

08018870 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8018870:	b480      	push	{r7}
 8018872:	b085      	sub	sp, #20
 8018874:	af00      	add	r7, sp, #0
 8018876:	60f8      	str	r0, [r7, #12]
 8018878:	60b9      	str	r1, [r7, #8]
 801887a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	4a07      	ldr	r2, [pc, #28]	; (801889c <vApplicationGetTimerTaskMemory+0x2c>)
 8018880:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	4a06      	ldr	r2, [pc, #24]	; (80188a0 <vApplicationGetTimerTaskMemory+0x30>)
 8018886:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801888e:	601a      	str	r2, [r3, #0]
}
 8018890:	bf00      	nop
 8018892:	3714      	adds	r7, #20
 8018894:	46bd      	mov	sp, r7
 8018896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889a:	4770      	bx	lr
 801889c:	24002970 	.word	0x24002970
 80188a0:	240029cc 	.word	0x240029cc

080188a4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b086      	sub	sp, #24
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d10a      	bne.n	80188c8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80188b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b6:	f383 8811 	msr	BASEPRI, r3
 80188ba:	f3bf 8f6f 	isb	sy
 80188be:	f3bf 8f4f 	dsb	sy
 80188c2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80188c4:	bf00      	nop
 80188c6:	e7fe      	b.n	80188c6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80188c8:	2320      	movs	r3, #32
 80188ca:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80188cc:	68bb      	ldr	r3, [r7, #8]
 80188ce:	2b20      	cmp	r3, #32
 80188d0:	d00a      	beq.n	80188e8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80188d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d6:	f383 8811 	msr	BASEPRI, r3
 80188da:	f3bf 8f6f 	isb	sy
 80188de:	f3bf 8f4f 	dsb	sy
 80188e2:	60fb      	str	r3, [r7, #12]
}
 80188e4:	bf00      	nop
 80188e6:	e7fe      	b.n	80188e6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d00a      	beq.n	8018908 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80188f2:	697b      	ldr	r3, [r7, #20]
 80188f4:	2200      	movs	r2, #0
 80188f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80188f8:	697b      	ldr	r3, [r7, #20]
 80188fa:	3304      	adds	r3, #4
 80188fc:	4618      	mov	r0, r3
 80188fe:	f000 fa3d 	bl	8018d7c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	2201      	movs	r2, #1
 8018906:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8018908:	697b      	ldr	r3, [r7, #20]
	}
 801890a:	4618      	mov	r0, r3
 801890c:	3718      	adds	r7, #24
 801890e:	46bd      	mov	sp, r7
 8018910:	bd80      	pop	{r7, pc}

08018912 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8018912:	b580      	push	{r7, lr}
 8018914:	b082      	sub	sp, #8
 8018916:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8018918:	2020      	movs	r0, #32
 801891a:	f002 fedd 	bl	801b6d8 <pvPortMalloc>
 801891e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d00a      	beq.n	801893c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2200      	movs	r2, #0
 801892a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	3304      	adds	r3, #4
 8018930:	4618      	mov	r0, r3
 8018932:	f000 fa23 	bl	8018d7c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	2200      	movs	r2, #0
 801893a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801893c:	687b      	ldr	r3, [r7, #4]
	}
 801893e:	4618      	mov	r0, r3
 8018940:	3708      	adds	r7, #8
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
	...

08018948 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b090      	sub	sp, #64	; 0x40
 801894c:	af00      	add	r7, sp, #0
 801894e:	60f8      	str	r0, [r7, #12]
 8018950:	60b9      	str	r1, [r7, #8]
 8018952:	607a      	str	r2, [r7, #4]
 8018954:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801895a:	2300      	movs	r3, #0
 801895c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801895e:	2300      	movs	r3, #0
 8018960:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d10a      	bne.n	801897e <xEventGroupWaitBits+0x36>
	__asm volatile
 8018968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801896c:	f383 8811 	msr	BASEPRI, r3
 8018970:	f3bf 8f6f 	isb	sy
 8018974:	f3bf 8f4f 	dsb	sy
 8018978:	623b      	str	r3, [r7, #32]
}
 801897a:	bf00      	nop
 801897c:	e7fe      	b.n	801897c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018984:	2b00      	cmp	r3, #0
 8018986:	d00a      	beq.n	801899e <xEventGroupWaitBits+0x56>
	__asm volatile
 8018988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801898c:	f383 8811 	msr	BASEPRI, r3
 8018990:	f3bf 8f6f 	isb	sy
 8018994:	f3bf 8f4f 	dsb	sy
 8018998:	61fb      	str	r3, [r7, #28]
}
 801899a:	bf00      	nop
 801899c:	e7fe      	b.n	801899c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d10a      	bne.n	80189ba <xEventGroupWaitBits+0x72>
	__asm volatile
 80189a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189a8:	f383 8811 	msr	BASEPRI, r3
 80189ac:	f3bf 8f6f 	isb	sy
 80189b0:	f3bf 8f4f 	dsb	sy
 80189b4:	61bb      	str	r3, [r7, #24]
}
 80189b6:	bf00      	nop
 80189b8:	e7fe      	b.n	80189b8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80189ba:	f001 ffd7 	bl	801a96c <xTaskGetSchedulerState>
 80189be:	4603      	mov	r3, r0
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d102      	bne.n	80189ca <xEventGroupWaitBits+0x82>
 80189c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d101      	bne.n	80189ce <xEventGroupWaitBits+0x86>
 80189ca:	2301      	movs	r3, #1
 80189cc:	e000      	b.n	80189d0 <xEventGroupWaitBits+0x88>
 80189ce:	2300      	movs	r3, #0
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d10a      	bne.n	80189ea <xEventGroupWaitBits+0xa2>
	__asm volatile
 80189d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189d8:	f383 8811 	msr	BASEPRI, r3
 80189dc:	f3bf 8f6f 	isb	sy
 80189e0:	f3bf 8f4f 	dsb	sy
 80189e4:	617b      	str	r3, [r7, #20]
}
 80189e6:	bf00      	nop
 80189e8:	e7fe      	b.n	80189e8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80189ea:	f001 fb29 	bl	801a040 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80189ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80189f4:	683a      	ldr	r2, [r7, #0]
 80189f6:	68b9      	ldr	r1, [r7, #8]
 80189f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80189fa:	f000 f988 	bl	8018d0e <prvTestWaitCondition>
 80189fe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8018a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d00e      	beq.n	8018a24 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8018a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a08:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d028      	beq.n	8018a66 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8018a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a16:	681a      	ldr	r2, [r3, #0]
 8018a18:	68bb      	ldr	r3, [r7, #8]
 8018a1a:	43db      	mvns	r3, r3
 8018a1c:	401a      	ands	r2, r3
 8018a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a20:	601a      	str	r2, [r3, #0]
 8018a22:	e020      	b.n	8018a66 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8018a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d104      	bne.n	8018a34 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8018a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8018a2e:	2301      	movs	r3, #1
 8018a30:	633b      	str	r3, [r7, #48]	; 0x30
 8018a32:	e018      	b.n	8018a66 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d003      	beq.n	8018a42 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8018a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018a40:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d003      	beq.n	8018a50 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8018a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018a4e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8018a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a52:	1d18      	adds	r0, r3, #4
 8018a54:	68ba      	ldr	r2, [r7, #8]
 8018a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a58:	4313      	orrs	r3, r2
 8018a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	f001 fcfd 	bl	801a45c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8018a62:	2300      	movs	r3, #0
 8018a64:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8018a66:	f001 faf9 	bl	801a05c <xTaskResumeAll>
 8018a6a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8018a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d031      	beq.n	8018ad6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8018a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d107      	bne.n	8018a88 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8018a78:	4b19      	ldr	r3, [pc, #100]	; (8018ae0 <xEventGroupWaitBits+0x198>)
 8018a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a7e:	601a      	str	r2, [r3, #0]
 8018a80:	f3bf 8f4f 	dsb	sy
 8018a84:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8018a88:	f001 fffc 	bl	801aa84 <uxTaskResetEventItemValue>
 8018a8c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8018a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d11a      	bne.n	8018ace <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8018a98:	f002 fcfc 	bl	801b494 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8018a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8018aa2:	683a      	ldr	r2, [r7, #0]
 8018aa4:	68b9      	ldr	r1, [r7, #8]
 8018aa6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018aa8:	f000 f931 	bl	8018d0e <prvTestWaitCondition>
 8018aac:	4603      	mov	r3, r0
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d009      	beq.n	8018ac6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d006      	beq.n	8018ac6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8018ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aba:	681a      	ldr	r2, [r3, #0]
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	43db      	mvns	r3, r3
 8018ac0:	401a      	ands	r2, r3
 8018ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ac4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8018aca:	f002 fd13 	bl	801b4f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8018ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8018ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8018ad8:	4618      	mov	r0, r3
 8018ada:	3740      	adds	r7, #64	; 0x40
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	e000ed04 	.word	0xe000ed04

08018ae4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b086      	sub	sp, #24
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
 8018aec:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d10a      	bne.n	8018b0e <xEventGroupClearBits+0x2a>
	__asm volatile
 8018af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018afc:	f383 8811 	msr	BASEPRI, r3
 8018b00:	f3bf 8f6f 	isb	sy
 8018b04:	f3bf 8f4f 	dsb	sy
 8018b08:	60fb      	str	r3, [r7, #12]
}
 8018b0a:	bf00      	nop
 8018b0c:	e7fe      	b.n	8018b0c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d00a      	beq.n	8018b2e <xEventGroupClearBits+0x4a>
	__asm volatile
 8018b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1c:	f383 8811 	msr	BASEPRI, r3
 8018b20:	f3bf 8f6f 	isb	sy
 8018b24:	f3bf 8f4f 	dsb	sy
 8018b28:	60bb      	str	r3, [r7, #8]
}
 8018b2a:	bf00      	nop
 8018b2c:	e7fe      	b.n	8018b2c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8018b2e:	f002 fcb1 	bl	801b494 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8018b32:	697b      	ldr	r3, [r7, #20]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8018b38:	697b      	ldr	r3, [r7, #20]
 8018b3a:	681a      	ldr	r2, [r3, #0]
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	43db      	mvns	r3, r3
 8018b40:	401a      	ands	r2, r3
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8018b46:	f002 fcd5 	bl	801b4f4 <vPortExitCritical>

	return uxReturn;
 8018b4a:	693b      	ldr	r3, [r7, #16]
}
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	3718      	adds	r7, #24
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}

08018b54 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b084      	sub	sp, #16
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8018b5e:	2300      	movs	r3, #0
 8018b60:	683a      	ldr	r2, [r7, #0]
 8018b62:	6879      	ldr	r1, [r7, #4]
 8018b64:	4804      	ldr	r0, [pc, #16]	; (8018b78 <xEventGroupClearBitsFromISR+0x24>)
 8018b66:	f002 fb47 	bl	801b1f8 <xTimerPendFunctionCallFromISR>
 8018b6a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
	}
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3710      	adds	r7, #16
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}
 8018b76:	bf00      	nop
 8018b78:	08018cf5 	.word	0x08018cf5

08018b7c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8018b7c:	b480      	push	{r7}
 8018b7e:	b089      	sub	sp, #36	; 0x24
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018b88:	f3ef 8211 	mrs	r2, BASEPRI
 8018b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b90:	f383 8811 	msr	BASEPRI, r3
 8018b94:	f3bf 8f6f 	isb	sy
 8018b98:	f3bf 8f4f 	dsb	sy
 8018b9c:	60fa      	str	r2, [r7, #12]
 8018b9e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018ba0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018ba2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8018ba4:	69fb      	ldr	r3, [r7, #28]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	617b      	str	r3, [r7, #20]
 8018baa:	69bb      	ldr	r3, [r7, #24]
 8018bac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8018bb4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8018bb6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3724      	adds	r7, #36	; 0x24
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc2:	4770      	bx	lr

08018bc4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b08e      	sub	sp, #56	; 0x38
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d10a      	bne.n	8018bf6 <xEventGroupSetBits+0x32>
	__asm volatile
 8018be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be4:	f383 8811 	msr	BASEPRI, r3
 8018be8:	f3bf 8f6f 	isb	sy
 8018bec:	f3bf 8f4f 	dsb	sy
 8018bf0:	613b      	str	r3, [r7, #16]
}
 8018bf2:	bf00      	nop
 8018bf4:	e7fe      	b.n	8018bf4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018bf6:	683b      	ldr	r3, [r7, #0]
 8018bf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d00a      	beq.n	8018c16 <xEventGroupSetBits+0x52>
	__asm volatile
 8018c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c04:	f383 8811 	msr	BASEPRI, r3
 8018c08:	f3bf 8f6f 	isb	sy
 8018c0c:	f3bf 8f4f 	dsb	sy
 8018c10:	60fb      	str	r3, [r7, #12]
}
 8018c12:	bf00      	nop
 8018c14:	e7fe      	b.n	8018c14 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8018c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c18:	3304      	adds	r3, #4
 8018c1a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c1e:	3308      	adds	r3, #8
 8018c20:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8018c22:	f001 fa0d 	bl	801a040 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8018c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c28:	68db      	ldr	r3, [r3, #12]
 8018c2a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8018c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c2e:	681a      	ldr	r2, [r3, #0]
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	431a      	orrs	r2, r3
 8018c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c36:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8018c38:	e03c      	b.n	8018cb4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8018c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c3c:	685b      	ldr	r3, [r3, #4]
 8018c3e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8018c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8018c46:	2300      	movs	r3, #0
 8018c48:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8018c4a:	69bb      	ldr	r3, [r7, #24]
 8018c4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018c50:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8018c52:	69bb      	ldr	r3, [r7, #24]
 8018c54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018c58:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d108      	bne.n	8018c76 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8018c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c66:	681a      	ldr	r2, [r3, #0]
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	4013      	ands	r3, r2
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d00b      	beq.n	8018c88 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8018c70:	2301      	movs	r3, #1
 8018c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c74:	e008      	b.n	8018c88 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8018c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c78:	681a      	ldr	r2, [r3, #0]
 8018c7a:	69bb      	ldr	r3, [r7, #24]
 8018c7c:	4013      	ands	r3, r2
 8018c7e:	69ba      	ldr	r2, [r7, #24]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d101      	bne.n	8018c88 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8018c84:	2301      	movs	r3, #1
 8018c86:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8018c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d010      	beq.n	8018cb0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8018c8e:	697b      	ldr	r3, [r7, #20]
 8018c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d003      	beq.n	8018ca0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8018c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	4313      	orrs	r3, r2
 8018c9e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8018ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018ca8:	4619      	mov	r1, r3
 8018caa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018cac:	f001 fca2 	bl	801a5f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8018cb0:	69fb      	ldr	r3, [r7, #28]
 8018cb2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8018cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018cb6:	6a3b      	ldr	r3, [r7, #32]
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	d1be      	bne.n	8018c3a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8018cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cc2:	43db      	mvns	r3, r3
 8018cc4:	401a      	ands	r2, r3
 8018cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cc8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8018cca:	f001 f9c7 	bl	801a05c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8018cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cd0:	681b      	ldr	r3, [r3, #0]
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3738      	adds	r7, #56	; 0x38
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}

08018cda <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8018cda:	b580      	push	{r7, lr}
 8018cdc:	b082      	sub	sp, #8
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	6078      	str	r0, [r7, #4]
 8018ce2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8018ce4:	6839      	ldr	r1, [r7, #0]
 8018ce6:	6878      	ldr	r0, [r7, #4]
 8018ce8:	f7ff ff6c 	bl	8018bc4 <xEventGroupSetBits>
}
 8018cec:	bf00      	nop
 8018cee:	3708      	adds	r7, #8
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8018cfe:	6839      	ldr	r1, [r7, #0]
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f7ff feef 	bl	8018ae4 <xEventGroupClearBits>
}
 8018d06:	bf00      	nop
 8018d08:	3708      	adds	r7, #8
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bd80      	pop	{r7, pc}

08018d0e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8018d0e:	b480      	push	{r7}
 8018d10:	b087      	sub	sp, #28
 8018d12:	af00      	add	r7, sp, #0
 8018d14:	60f8      	str	r0, [r7, #12]
 8018d16:	60b9      	str	r1, [r7, #8]
 8018d18:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d107      	bne.n	8018d34 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8018d24:	68fa      	ldr	r2, [r7, #12]
 8018d26:	68bb      	ldr	r3, [r7, #8]
 8018d28:	4013      	ands	r3, r2
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d00a      	beq.n	8018d44 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8018d2e:	2301      	movs	r3, #1
 8018d30:	617b      	str	r3, [r7, #20]
 8018d32:	e007      	b.n	8018d44 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8018d34:	68fa      	ldr	r2, [r7, #12]
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	4013      	ands	r3, r2
 8018d3a:	68ba      	ldr	r2, [r7, #8]
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d101      	bne.n	8018d44 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8018d40:	2301      	movs	r3, #1
 8018d42:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8018d44:	697b      	ldr	r3, [r7, #20]
}
 8018d46:	4618      	mov	r0, r3
 8018d48:	371c      	adds	r7, #28
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d50:	4770      	bx	lr
	...

08018d54 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b086      	sub	sp, #24
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	60f8      	str	r0, [r7, #12]
 8018d5c:	60b9      	str	r1, [r7, #8]
 8018d5e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	68ba      	ldr	r2, [r7, #8]
 8018d64:	68f9      	ldr	r1, [r7, #12]
 8018d66:	4804      	ldr	r0, [pc, #16]	; (8018d78 <xEventGroupSetBitsFromISR+0x24>)
 8018d68:	f002 fa46 	bl	801b1f8 <xTimerPendFunctionCallFromISR>
 8018d6c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8018d6e:	697b      	ldr	r3, [r7, #20]
	}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3718      	adds	r7, #24
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}
 8018d78:	08018cdb 	.word	0x08018cdb

08018d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	b083      	sub	sp, #12
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f103 0208 	add.w	r2, r3, #8
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f103 0208 	add.w	r2, r3, #8
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	f103 0208 	add.w	r2, r3, #8
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2200      	movs	r2, #0
 8018dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018db0:	bf00      	nop
 8018db2:	370c      	adds	r7, #12
 8018db4:	46bd      	mov	sp, r7
 8018db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dba:	4770      	bx	lr

08018dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018dbc:	b480      	push	{r7}
 8018dbe:	b083      	sub	sp, #12
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018dca:	bf00      	nop
 8018dcc:	370c      	adds	r7, #12
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd4:	4770      	bx	lr

08018dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018dd6:	b480      	push	{r7}
 8018dd8:	b085      	sub	sp, #20
 8018dda:	af00      	add	r7, sp, #0
 8018ddc:	6078      	str	r0, [r7, #4]
 8018dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	685b      	ldr	r3, [r3, #4]
 8018de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018de6:	683b      	ldr	r3, [r7, #0]
 8018de8:	68fa      	ldr	r2, [r7, #12]
 8018dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	689a      	ldr	r2, [r3, #8]
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	689b      	ldr	r3, [r3, #8]
 8018df8:	683a      	ldr	r2, [r7, #0]
 8018dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	683a      	ldr	r2, [r7, #0]
 8018e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	687a      	ldr	r2, [r7, #4]
 8018e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	1c5a      	adds	r2, r3, #1
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	601a      	str	r2, [r3, #0]
}
 8018e12:	bf00      	nop
 8018e14:	3714      	adds	r7, #20
 8018e16:	46bd      	mov	sp, r7
 8018e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1c:	4770      	bx	lr

08018e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018e1e:	b480      	push	{r7}
 8018e20:	b085      	sub	sp, #20
 8018e22:	af00      	add	r7, sp, #0
 8018e24:	6078      	str	r0, [r7, #4]
 8018e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e34:	d103      	bne.n	8018e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	691b      	ldr	r3, [r3, #16]
 8018e3a:	60fb      	str	r3, [r7, #12]
 8018e3c:	e00c      	b.n	8018e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	3308      	adds	r3, #8
 8018e42:	60fb      	str	r3, [r7, #12]
 8018e44:	e002      	b.n	8018e4c <vListInsert+0x2e>
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	685b      	ldr	r3, [r3, #4]
 8018e4a:	60fb      	str	r3, [r7, #12]
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	429a      	cmp	r2, r3
 8018e56:	d2f6      	bcs.n	8018e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	685a      	ldr	r2, [r3, #4]
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	685b      	ldr	r3, [r3, #4]
 8018e64:	683a      	ldr	r2, [r7, #0]
 8018e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	68fa      	ldr	r2, [r7, #12]
 8018e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	683a      	ldr	r2, [r7, #0]
 8018e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	687a      	ldr	r2, [r7, #4]
 8018e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	1c5a      	adds	r2, r3, #1
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	601a      	str	r2, [r3, #0]
}
 8018e84:	bf00      	nop
 8018e86:	3714      	adds	r7, #20
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018e90:	b480      	push	{r7}
 8018e92:	b085      	sub	sp, #20
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	691b      	ldr	r3, [r3, #16]
 8018e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	687a      	ldr	r2, [r7, #4]
 8018ea4:	6892      	ldr	r2, [r2, #8]
 8018ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	689b      	ldr	r3, [r3, #8]
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	6852      	ldr	r2, [r2, #4]
 8018eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	687a      	ldr	r2, [r7, #4]
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d103      	bne.n	8018ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	689a      	ldr	r2, [r3, #8]
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	1e5a      	subs	r2, r3, #1
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	681b      	ldr	r3, [r3, #0]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3714      	adds	r7, #20
 8018edc:	46bd      	mov	sp, r7
 8018ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee2:	4770      	bx	lr

08018ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b084      	sub	sp, #16
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d10a      	bne.n	8018f0e <xQueueGenericReset+0x2a>
	__asm volatile
 8018ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018efc:	f383 8811 	msr	BASEPRI, r3
 8018f00:	f3bf 8f6f 	isb	sy
 8018f04:	f3bf 8f4f 	dsb	sy
 8018f08:	60bb      	str	r3, [r7, #8]
}
 8018f0a:	bf00      	nop
 8018f0c:	e7fe      	b.n	8018f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018f0e:	f002 fac1 	bl	801b494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	681a      	ldr	r2, [r3, #0]
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f1a:	68f9      	ldr	r1, [r7, #12]
 8018f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018f1e:	fb01 f303 	mul.w	r3, r1, r3
 8018f22:	441a      	add	r2, r3
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	681a      	ldr	r2, [r3, #0]
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	681a      	ldr	r2, [r3, #0]
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f3e:	3b01      	subs	r3, #1
 8018f40:	68f9      	ldr	r1, [r7, #12]
 8018f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018f44:	fb01 f303 	mul.w	r3, r1, r3
 8018f48:	441a      	add	r2, r3
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	22ff      	movs	r2, #255	; 0xff
 8018f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	22ff      	movs	r2, #255	; 0xff
 8018f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d114      	bne.n	8018f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	691b      	ldr	r3, [r3, #16]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d01a      	beq.n	8018fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	3310      	adds	r3, #16
 8018f70:	4618      	mov	r0, r3
 8018f72:	f001 fadb 	bl	801a52c <xTaskRemoveFromEventList>
 8018f76:	4603      	mov	r3, r0
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d012      	beq.n	8018fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018f7c:	4b0c      	ldr	r3, [pc, #48]	; (8018fb0 <xQueueGenericReset+0xcc>)
 8018f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f82:	601a      	str	r2, [r3, #0]
 8018f84:	f3bf 8f4f 	dsb	sy
 8018f88:	f3bf 8f6f 	isb	sy
 8018f8c:	e009      	b.n	8018fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	3310      	adds	r3, #16
 8018f92:	4618      	mov	r0, r3
 8018f94:	f7ff fef2 	bl	8018d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	3324      	adds	r3, #36	; 0x24
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7ff feed 	bl	8018d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018fa2:	f002 faa7 	bl	801b4f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018fa6:	2301      	movs	r3, #1
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	3710      	adds	r7, #16
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}
 8018fb0:	e000ed04 	.word	0xe000ed04

08018fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b08e      	sub	sp, #56	; 0x38
 8018fb8:	af02      	add	r7, sp, #8
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	607a      	str	r2, [r7, #4]
 8018fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d10a      	bne.n	8018fde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8018fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fcc:	f383 8811 	msr	BASEPRI, r3
 8018fd0:	f3bf 8f6f 	isb	sy
 8018fd4:	f3bf 8f4f 	dsb	sy
 8018fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018fda:	bf00      	nop
 8018fdc:	e7fe      	b.n	8018fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d10a      	bne.n	8018ffa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8018fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe8:	f383 8811 	msr	BASEPRI, r3
 8018fec:	f3bf 8f6f 	isb	sy
 8018ff0:	f3bf 8f4f 	dsb	sy
 8018ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018ff6:	bf00      	nop
 8018ff8:	e7fe      	b.n	8018ff8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d002      	beq.n	8019006 <xQueueGenericCreateStatic+0x52>
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d001      	beq.n	801900a <xQueueGenericCreateStatic+0x56>
 8019006:	2301      	movs	r3, #1
 8019008:	e000      	b.n	801900c <xQueueGenericCreateStatic+0x58>
 801900a:	2300      	movs	r3, #0
 801900c:	2b00      	cmp	r3, #0
 801900e:	d10a      	bne.n	8019026 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8019010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019014:	f383 8811 	msr	BASEPRI, r3
 8019018:	f3bf 8f6f 	isb	sy
 801901c:	f3bf 8f4f 	dsb	sy
 8019020:	623b      	str	r3, [r7, #32]
}
 8019022:	bf00      	nop
 8019024:	e7fe      	b.n	8019024 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d102      	bne.n	8019032 <xQueueGenericCreateStatic+0x7e>
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d101      	bne.n	8019036 <xQueueGenericCreateStatic+0x82>
 8019032:	2301      	movs	r3, #1
 8019034:	e000      	b.n	8019038 <xQueueGenericCreateStatic+0x84>
 8019036:	2300      	movs	r3, #0
 8019038:	2b00      	cmp	r3, #0
 801903a:	d10a      	bne.n	8019052 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019040:	f383 8811 	msr	BASEPRI, r3
 8019044:	f3bf 8f6f 	isb	sy
 8019048:	f3bf 8f4f 	dsb	sy
 801904c:	61fb      	str	r3, [r7, #28]
}
 801904e:	bf00      	nop
 8019050:	e7fe      	b.n	8019050 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019052:	2350      	movs	r3, #80	; 0x50
 8019054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019056:	697b      	ldr	r3, [r7, #20]
 8019058:	2b50      	cmp	r3, #80	; 0x50
 801905a:	d00a      	beq.n	8019072 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019060:	f383 8811 	msr	BASEPRI, r3
 8019064:	f3bf 8f6f 	isb	sy
 8019068:	f3bf 8f4f 	dsb	sy
 801906c:	61bb      	str	r3, [r7, #24]
}
 801906e:	bf00      	nop
 8019070:	e7fe      	b.n	8019070 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019072:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801907a:	2b00      	cmp	r3, #0
 801907c:	d00d      	beq.n	801909a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019080:	2201      	movs	r2, #1
 8019082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019086:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908c:	9300      	str	r3, [sp, #0]
 801908e:	4613      	mov	r3, r2
 8019090:	687a      	ldr	r2, [r7, #4]
 8019092:	68b9      	ldr	r1, [r7, #8]
 8019094:	68f8      	ldr	r0, [r7, #12]
 8019096:	f000 f805 	bl	80190a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801909c:	4618      	mov	r0, r3
 801909e:	3730      	adds	r7, #48	; 0x30
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b084      	sub	sp, #16
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	60b9      	str	r1, [r7, #8]
 80190ae:	607a      	str	r2, [r7, #4]
 80190b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d103      	bne.n	80190c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80190b8:	69bb      	ldr	r3, [r7, #24]
 80190ba:	69ba      	ldr	r2, [r7, #24]
 80190bc:	601a      	str	r2, [r3, #0]
 80190be:	e002      	b.n	80190c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80190c0:	69bb      	ldr	r3, [r7, #24]
 80190c2:	687a      	ldr	r2, [r7, #4]
 80190c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80190c6:	69bb      	ldr	r3, [r7, #24]
 80190c8:	68fa      	ldr	r2, [r7, #12]
 80190ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80190cc:	69bb      	ldr	r3, [r7, #24]
 80190ce:	68ba      	ldr	r2, [r7, #8]
 80190d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80190d2:	2101      	movs	r1, #1
 80190d4:	69b8      	ldr	r0, [r7, #24]
 80190d6:	f7ff ff05 	bl	8018ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80190da:	69bb      	ldr	r3, [r7, #24]
 80190dc:	78fa      	ldrb	r2, [r7, #3]
 80190de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80190e2:	bf00      	nop
 80190e4:	3710      	adds	r7, #16
 80190e6:	46bd      	mov	sp, r7
 80190e8:	bd80      	pop	{r7, pc}
	...

080190ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b08e      	sub	sp, #56	; 0x38
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	60f8      	str	r0, [r7, #12]
 80190f4:	60b9      	str	r1, [r7, #8]
 80190f6:	607a      	str	r2, [r7, #4]
 80190f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80190fa:	2300      	movs	r3, #0
 80190fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019104:	2b00      	cmp	r3, #0
 8019106:	d10a      	bne.n	801911e <xQueueGenericSend+0x32>
	__asm volatile
 8019108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801910c:	f383 8811 	msr	BASEPRI, r3
 8019110:	f3bf 8f6f 	isb	sy
 8019114:	f3bf 8f4f 	dsb	sy
 8019118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801911a:	bf00      	nop
 801911c:	e7fe      	b.n	801911c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801911e:	68bb      	ldr	r3, [r7, #8]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d103      	bne.n	801912c <xQueueGenericSend+0x40>
 8019124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019128:	2b00      	cmp	r3, #0
 801912a:	d101      	bne.n	8019130 <xQueueGenericSend+0x44>
 801912c:	2301      	movs	r3, #1
 801912e:	e000      	b.n	8019132 <xQueueGenericSend+0x46>
 8019130:	2300      	movs	r3, #0
 8019132:	2b00      	cmp	r3, #0
 8019134:	d10a      	bne.n	801914c <xQueueGenericSend+0x60>
	__asm volatile
 8019136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801913a:	f383 8811 	msr	BASEPRI, r3
 801913e:	f3bf 8f6f 	isb	sy
 8019142:	f3bf 8f4f 	dsb	sy
 8019146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019148:	bf00      	nop
 801914a:	e7fe      	b.n	801914a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	2b02      	cmp	r3, #2
 8019150:	d103      	bne.n	801915a <xQueueGenericSend+0x6e>
 8019152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019156:	2b01      	cmp	r3, #1
 8019158:	d101      	bne.n	801915e <xQueueGenericSend+0x72>
 801915a:	2301      	movs	r3, #1
 801915c:	e000      	b.n	8019160 <xQueueGenericSend+0x74>
 801915e:	2300      	movs	r3, #0
 8019160:	2b00      	cmp	r3, #0
 8019162:	d10a      	bne.n	801917a <xQueueGenericSend+0x8e>
	__asm volatile
 8019164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019168:	f383 8811 	msr	BASEPRI, r3
 801916c:	f3bf 8f6f 	isb	sy
 8019170:	f3bf 8f4f 	dsb	sy
 8019174:	623b      	str	r3, [r7, #32]
}
 8019176:	bf00      	nop
 8019178:	e7fe      	b.n	8019178 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801917a:	f001 fbf7 	bl	801a96c <xTaskGetSchedulerState>
 801917e:	4603      	mov	r3, r0
 8019180:	2b00      	cmp	r3, #0
 8019182:	d102      	bne.n	801918a <xQueueGenericSend+0x9e>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d101      	bne.n	801918e <xQueueGenericSend+0xa2>
 801918a:	2301      	movs	r3, #1
 801918c:	e000      	b.n	8019190 <xQueueGenericSend+0xa4>
 801918e:	2300      	movs	r3, #0
 8019190:	2b00      	cmp	r3, #0
 8019192:	d10a      	bne.n	80191aa <xQueueGenericSend+0xbe>
	__asm volatile
 8019194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019198:	f383 8811 	msr	BASEPRI, r3
 801919c:	f3bf 8f6f 	isb	sy
 80191a0:	f3bf 8f4f 	dsb	sy
 80191a4:	61fb      	str	r3, [r7, #28]
}
 80191a6:	bf00      	nop
 80191a8:	e7fe      	b.n	80191a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80191aa:	f002 f973 	bl	801b494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80191ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80191b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d302      	bcc.n	80191c0 <xQueueGenericSend+0xd4>
 80191ba:	683b      	ldr	r3, [r7, #0]
 80191bc:	2b02      	cmp	r3, #2
 80191be:	d129      	bne.n	8019214 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80191c0:	683a      	ldr	r2, [r7, #0]
 80191c2:	68b9      	ldr	r1, [r7, #8]
 80191c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191c6:	f000 fa8b 	bl	80196e0 <prvCopyDataToQueue>
 80191ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80191cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d010      	beq.n	80191f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80191d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d6:	3324      	adds	r3, #36	; 0x24
 80191d8:	4618      	mov	r0, r3
 80191da:	f001 f9a7 	bl	801a52c <xTaskRemoveFromEventList>
 80191de:	4603      	mov	r3, r0
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d013      	beq.n	801920c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80191e4:	4b3f      	ldr	r3, [pc, #252]	; (80192e4 <xQueueGenericSend+0x1f8>)
 80191e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191ea:	601a      	str	r2, [r3, #0]
 80191ec:	f3bf 8f4f 	dsb	sy
 80191f0:	f3bf 8f6f 	isb	sy
 80191f4:	e00a      	b.n	801920c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80191f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d007      	beq.n	801920c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80191fc:	4b39      	ldr	r3, [pc, #228]	; (80192e4 <xQueueGenericSend+0x1f8>)
 80191fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019202:	601a      	str	r2, [r3, #0]
 8019204:	f3bf 8f4f 	dsb	sy
 8019208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801920c:	f002 f972 	bl	801b4f4 <vPortExitCritical>
				return pdPASS;
 8019210:	2301      	movs	r3, #1
 8019212:	e063      	b.n	80192dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d103      	bne.n	8019222 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801921a:	f002 f96b 	bl	801b4f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801921e:	2300      	movs	r3, #0
 8019220:	e05c      	b.n	80192dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019224:	2b00      	cmp	r3, #0
 8019226:	d106      	bne.n	8019236 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019228:	f107 0314 	add.w	r3, r7, #20
 801922c:	4618      	mov	r0, r3
 801922e:	f001 fa43 	bl	801a6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019232:	2301      	movs	r3, #1
 8019234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019236:	f002 f95d 	bl	801b4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801923a:	f000 ff01 	bl	801a040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801923e:	f002 f929 	bl	801b494 <vPortEnterCritical>
 8019242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019248:	b25b      	sxtb	r3, r3
 801924a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801924e:	d103      	bne.n	8019258 <xQueueGenericSend+0x16c>
 8019250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019252:	2200      	movs	r2, #0
 8019254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801925e:	b25b      	sxtb	r3, r3
 8019260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019264:	d103      	bne.n	801926e <xQueueGenericSend+0x182>
 8019266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019268:	2200      	movs	r2, #0
 801926a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801926e:	f002 f941 	bl	801b4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019272:	1d3a      	adds	r2, r7, #4
 8019274:	f107 0314 	add.w	r3, r7, #20
 8019278:	4611      	mov	r1, r2
 801927a:	4618      	mov	r0, r3
 801927c:	f001 fa32 	bl	801a6e4 <xTaskCheckForTimeOut>
 8019280:	4603      	mov	r3, r0
 8019282:	2b00      	cmp	r3, #0
 8019284:	d124      	bne.n	80192d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019288:	f000 fb22 	bl	80198d0 <prvIsQueueFull>
 801928c:	4603      	mov	r3, r0
 801928e:	2b00      	cmp	r3, #0
 8019290:	d018      	beq.n	80192c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019294:	3310      	adds	r3, #16
 8019296:	687a      	ldr	r2, [r7, #4]
 8019298:	4611      	mov	r1, r2
 801929a:	4618      	mov	r0, r3
 801929c:	f001 f8ba 	bl	801a414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80192a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192a2:	f000 faad 	bl	8019800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80192a6:	f000 fed9 	bl	801a05c <xTaskResumeAll>
 80192aa:	4603      	mov	r3, r0
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	f47f af7c 	bne.w	80191aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80192b2:	4b0c      	ldr	r3, [pc, #48]	; (80192e4 <xQueueGenericSend+0x1f8>)
 80192b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192b8:	601a      	str	r2, [r3, #0]
 80192ba:	f3bf 8f4f 	dsb	sy
 80192be:	f3bf 8f6f 	isb	sy
 80192c2:	e772      	b.n	80191aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80192c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192c6:	f000 fa9b 	bl	8019800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80192ca:	f000 fec7 	bl	801a05c <xTaskResumeAll>
 80192ce:	e76c      	b.n	80191aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80192d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192d2:	f000 fa95 	bl	8019800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80192d6:	f000 fec1 	bl	801a05c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80192da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80192dc:	4618      	mov	r0, r3
 80192de:	3738      	adds	r7, #56	; 0x38
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}
 80192e4:	e000ed04 	.word	0xe000ed04

080192e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b090      	sub	sp, #64	; 0x40
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	60f8      	str	r0, [r7, #12]
 80192f0:	60b9      	str	r1, [r7, #8]
 80192f2:	607a      	str	r2, [r7, #4]
 80192f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80192fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d10a      	bne.n	8019316 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8019300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019304:	f383 8811 	msr	BASEPRI, r3
 8019308:	f3bf 8f6f 	isb	sy
 801930c:	f3bf 8f4f 	dsb	sy
 8019310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019312:	bf00      	nop
 8019314:	e7fe      	b.n	8019314 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019316:	68bb      	ldr	r3, [r7, #8]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d103      	bne.n	8019324 <xQueueGenericSendFromISR+0x3c>
 801931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019320:	2b00      	cmp	r3, #0
 8019322:	d101      	bne.n	8019328 <xQueueGenericSendFromISR+0x40>
 8019324:	2301      	movs	r3, #1
 8019326:	e000      	b.n	801932a <xQueueGenericSendFromISR+0x42>
 8019328:	2300      	movs	r3, #0
 801932a:	2b00      	cmp	r3, #0
 801932c:	d10a      	bne.n	8019344 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019332:	f383 8811 	msr	BASEPRI, r3
 8019336:	f3bf 8f6f 	isb	sy
 801933a:	f3bf 8f4f 	dsb	sy
 801933e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019340:	bf00      	nop
 8019342:	e7fe      	b.n	8019342 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019344:	683b      	ldr	r3, [r7, #0]
 8019346:	2b02      	cmp	r3, #2
 8019348:	d103      	bne.n	8019352 <xQueueGenericSendFromISR+0x6a>
 801934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801934e:	2b01      	cmp	r3, #1
 8019350:	d101      	bne.n	8019356 <xQueueGenericSendFromISR+0x6e>
 8019352:	2301      	movs	r3, #1
 8019354:	e000      	b.n	8019358 <xQueueGenericSendFromISR+0x70>
 8019356:	2300      	movs	r3, #0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d10a      	bne.n	8019372 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019360:	f383 8811 	msr	BASEPRI, r3
 8019364:	f3bf 8f6f 	isb	sy
 8019368:	f3bf 8f4f 	dsb	sy
 801936c:	623b      	str	r3, [r7, #32]
}
 801936e:	bf00      	nop
 8019370:	e7fe      	b.n	8019370 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019372:	f002 f971 	bl	801b658 <vPortValidateInterruptPriority>
	__asm volatile
 8019376:	f3ef 8211 	mrs	r2, BASEPRI
 801937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801937e:	f383 8811 	msr	BASEPRI, r3
 8019382:	f3bf 8f6f 	isb	sy
 8019386:	f3bf 8f4f 	dsb	sy
 801938a:	61fa      	str	r2, [r7, #28]
 801938c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801938e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019390:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801939a:	429a      	cmp	r2, r3
 801939c:	d302      	bcc.n	80193a4 <xQueueGenericSendFromISR+0xbc>
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	2b02      	cmp	r3, #2
 80193a2:	d12f      	bne.n	8019404 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80193a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80193aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80193b4:	683a      	ldr	r2, [r7, #0]
 80193b6:	68b9      	ldr	r1, [r7, #8]
 80193b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80193ba:	f000 f991 	bl	80196e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80193be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80193c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80193c6:	d112      	bne.n	80193ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80193c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d016      	beq.n	80193fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80193d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193d2:	3324      	adds	r3, #36	; 0x24
 80193d4:	4618      	mov	r0, r3
 80193d6:	f001 f8a9 	bl	801a52c <xTaskRemoveFromEventList>
 80193da:	4603      	mov	r3, r0
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d00e      	beq.n	80193fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d00b      	beq.n	80193fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	2201      	movs	r2, #1
 80193ea:	601a      	str	r2, [r3, #0]
 80193ec:	e007      	b.n	80193fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80193ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80193f2:	3301      	adds	r3, #1
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	b25a      	sxtb	r2, r3
 80193f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80193fe:	2301      	movs	r3, #1
 8019400:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8019402:	e001      	b.n	8019408 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019404:	2300      	movs	r3, #0
 8019406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801940a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801940c:	697b      	ldr	r3, [r7, #20]
 801940e:	f383 8811 	msr	BASEPRI, r3
}
 8019412:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019416:	4618      	mov	r0, r3
 8019418:	3740      	adds	r7, #64	; 0x40
 801941a:	46bd      	mov	sp, r7
 801941c:	bd80      	pop	{r7, pc}
	...

08019420 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b08c      	sub	sp, #48	; 0x30
 8019424:	af00      	add	r7, sp, #0
 8019426:	60f8      	str	r0, [r7, #12]
 8019428:	60b9      	str	r1, [r7, #8]
 801942a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801942c:	2300      	movs	r3, #0
 801942e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019436:	2b00      	cmp	r3, #0
 8019438:	d10a      	bne.n	8019450 <xQueueReceive+0x30>
	__asm volatile
 801943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801943e:	f383 8811 	msr	BASEPRI, r3
 8019442:	f3bf 8f6f 	isb	sy
 8019446:	f3bf 8f4f 	dsb	sy
 801944a:	623b      	str	r3, [r7, #32]
}
 801944c:	bf00      	nop
 801944e:	e7fe      	b.n	801944e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d103      	bne.n	801945e <xQueueReceive+0x3e>
 8019456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801945a:	2b00      	cmp	r3, #0
 801945c:	d101      	bne.n	8019462 <xQueueReceive+0x42>
 801945e:	2301      	movs	r3, #1
 8019460:	e000      	b.n	8019464 <xQueueReceive+0x44>
 8019462:	2300      	movs	r3, #0
 8019464:	2b00      	cmp	r3, #0
 8019466:	d10a      	bne.n	801947e <xQueueReceive+0x5e>
	__asm volatile
 8019468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801946c:	f383 8811 	msr	BASEPRI, r3
 8019470:	f3bf 8f6f 	isb	sy
 8019474:	f3bf 8f4f 	dsb	sy
 8019478:	61fb      	str	r3, [r7, #28]
}
 801947a:	bf00      	nop
 801947c:	e7fe      	b.n	801947c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801947e:	f001 fa75 	bl	801a96c <xTaskGetSchedulerState>
 8019482:	4603      	mov	r3, r0
 8019484:	2b00      	cmp	r3, #0
 8019486:	d102      	bne.n	801948e <xQueueReceive+0x6e>
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d101      	bne.n	8019492 <xQueueReceive+0x72>
 801948e:	2301      	movs	r3, #1
 8019490:	e000      	b.n	8019494 <xQueueReceive+0x74>
 8019492:	2300      	movs	r3, #0
 8019494:	2b00      	cmp	r3, #0
 8019496:	d10a      	bne.n	80194ae <xQueueReceive+0x8e>
	__asm volatile
 8019498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801949c:	f383 8811 	msr	BASEPRI, r3
 80194a0:	f3bf 8f6f 	isb	sy
 80194a4:	f3bf 8f4f 	dsb	sy
 80194a8:	61bb      	str	r3, [r7, #24]
}
 80194aa:	bf00      	nop
 80194ac:	e7fe      	b.n	80194ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80194ae:	f001 fff1 	bl	801b494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80194b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80194b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d01f      	beq.n	80194fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80194be:	68b9      	ldr	r1, [r7, #8]
 80194c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194c2:	f000 f977 	bl	80197b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80194c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c8:	1e5a      	subs	r2, r3, #1
 80194ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80194ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d0:	691b      	ldr	r3, [r3, #16]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d00f      	beq.n	80194f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80194d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d8:	3310      	adds	r3, #16
 80194da:	4618      	mov	r0, r3
 80194dc:	f001 f826 	bl	801a52c <xTaskRemoveFromEventList>
 80194e0:	4603      	mov	r3, r0
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d007      	beq.n	80194f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80194e6:	4b3d      	ldr	r3, [pc, #244]	; (80195dc <xQueueReceive+0x1bc>)
 80194e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80194ec:	601a      	str	r2, [r3, #0]
 80194ee:	f3bf 8f4f 	dsb	sy
 80194f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80194f6:	f001 fffd 	bl	801b4f4 <vPortExitCritical>
				return pdPASS;
 80194fa:	2301      	movs	r3, #1
 80194fc:	e069      	b.n	80195d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d103      	bne.n	801950c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019504:	f001 fff6 	bl	801b4f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019508:	2300      	movs	r3, #0
 801950a:	e062      	b.n	80195d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801950e:	2b00      	cmp	r3, #0
 8019510:	d106      	bne.n	8019520 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019512:	f107 0310 	add.w	r3, r7, #16
 8019516:	4618      	mov	r0, r3
 8019518:	f001 f8ce 	bl	801a6b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801951c:	2301      	movs	r3, #1
 801951e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019520:	f001 ffe8 	bl	801b4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019524:	f000 fd8c 	bl	801a040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019528:	f001 ffb4 	bl	801b494 <vPortEnterCritical>
 801952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019532:	b25b      	sxtb	r3, r3
 8019534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019538:	d103      	bne.n	8019542 <xQueueReceive+0x122>
 801953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801953c:	2200      	movs	r2, #0
 801953e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019548:	b25b      	sxtb	r3, r3
 801954a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801954e:	d103      	bne.n	8019558 <xQueueReceive+0x138>
 8019550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019552:	2200      	movs	r2, #0
 8019554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019558:	f001 ffcc 	bl	801b4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801955c:	1d3a      	adds	r2, r7, #4
 801955e:	f107 0310 	add.w	r3, r7, #16
 8019562:	4611      	mov	r1, r2
 8019564:	4618      	mov	r0, r3
 8019566:	f001 f8bd 	bl	801a6e4 <xTaskCheckForTimeOut>
 801956a:	4603      	mov	r3, r0
 801956c:	2b00      	cmp	r3, #0
 801956e:	d123      	bne.n	80195b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019572:	f000 f997 	bl	80198a4 <prvIsQueueEmpty>
 8019576:	4603      	mov	r3, r0
 8019578:	2b00      	cmp	r3, #0
 801957a:	d017      	beq.n	80195ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957e:	3324      	adds	r3, #36	; 0x24
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	4611      	mov	r1, r2
 8019584:	4618      	mov	r0, r3
 8019586:	f000 ff45 	bl	801a414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801958a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801958c:	f000 f938 	bl	8019800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019590:	f000 fd64 	bl	801a05c <xTaskResumeAll>
 8019594:	4603      	mov	r3, r0
 8019596:	2b00      	cmp	r3, #0
 8019598:	d189      	bne.n	80194ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801959a:	4b10      	ldr	r3, [pc, #64]	; (80195dc <xQueueReceive+0x1bc>)
 801959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195a0:	601a      	str	r2, [r3, #0]
 80195a2:	f3bf 8f4f 	dsb	sy
 80195a6:	f3bf 8f6f 	isb	sy
 80195aa:	e780      	b.n	80194ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80195ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195ae:	f000 f927 	bl	8019800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80195b2:	f000 fd53 	bl	801a05c <xTaskResumeAll>
 80195b6:	e77a      	b.n	80194ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80195b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195ba:	f000 f921 	bl	8019800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80195be:	f000 fd4d 	bl	801a05c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80195c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195c4:	f000 f96e 	bl	80198a4 <prvIsQueueEmpty>
 80195c8:	4603      	mov	r3, r0
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	f43f af6f 	beq.w	80194ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80195d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80195d2:	4618      	mov	r0, r3
 80195d4:	3730      	adds	r7, #48	; 0x30
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bd80      	pop	{r7, pc}
 80195da:	bf00      	nop
 80195dc:	e000ed04 	.word	0xe000ed04

080195e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b08e      	sub	sp, #56	; 0x38
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	60f8      	str	r0, [r7, #12]
 80195e8:	60b9      	str	r1, [r7, #8]
 80195ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80195f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d10a      	bne.n	801960c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80195f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195fa:	f383 8811 	msr	BASEPRI, r3
 80195fe:	f3bf 8f6f 	isb	sy
 8019602:	f3bf 8f4f 	dsb	sy
 8019606:	623b      	str	r3, [r7, #32]
}
 8019608:	bf00      	nop
 801960a:	e7fe      	b.n	801960a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801960c:	68bb      	ldr	r3, [r7, #8]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d103      	bne.n	801961a <xQueueReceiveFromISR+0x3a>
 8019612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019616:	2b00      	cmp	r3, #0
 8019618:	d101      	bne.n	801961e <xQueueReceiveFromISR+0x3e>
 801961a:	2301      	movs	r3, #1
 801961c:	e000      	b.n	8019620 <xQueueReceiveFromISR+0x40>
 801961e:	2300      	movs	r3, #0
 8019620:	2b00      	cmp	r3, #0
 8019622:	d10a      	bne.n	801963a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8019624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019628:	f383 8811 	msr	BASEPRI, r3
 801962c:	f3bf 8f6f 	isb	sy
 8019630:	f3bf 8f4f 	dsb	sy
 8019634:	61fb      	str	r3, [r7, #28]
}
 8019636:	bf00      	nop
 8019638:	e7fe      	b.n	8019638 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801963a:	f002 f80d 	bl	801b658 <vPortValidateInterruptPriority>
	__asm volatile
 801963e:	f3ef 8211 	mrs	r2, BASEPRI
 8019642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019646:	f383 8811 	msr	BASEPRI, r3
 801964a:	f3bf 8f6f 	isb	sy
 801964e:	f3bf 8f4f 	dsb	sy
 8019652:	61ba      	str	r2, [r7, #24]
 8019654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801965e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019662:	2b00      	cmp	r3, #0
 8019664:	d02f      	beq.n	80196c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801966c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019670:	68b9      	ldr	r1, [r7, #8]
 8019672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019674:	f000 f89e 	bl	80197b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801967a:	1e5a      	subs	r2, r3, #1
 801967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801967e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019688:	d112      	bne.n	80196b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801968c:	691b      	ldr	r3, [r3, #16]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d016      	beq.n	80196c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019694:	3310      	adds	r3, #16
 8019696:	4618      	mov	r0, r3
 8019698:	f000 ff48 	bl	801a52c <xTaskRemoveFromEventList>
 801969c:	4603      	mov	r3, r0
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d00e      	beq.n	80196c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d00b      	beq.n	80196c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	2201      	movs	r2, #1
 80196ac:	601a      	str	r2, [r3, #0]
 80196ae:	e007      	b.n	80196c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80196b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196b4:	3301      	adds	r3, #1
 80196b6:	b2db      	uxtb	r3, r3
 80196b8:	b25a      	sxtb	r2, r3
 80196ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80196c0:	2301      	movs	r3, #1
 80196c2:	637b      	str	r3, [r7, #52]	; 0x34
 80196c4:	e001      	b.n	80196ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80196c6:	2300      	movs	r3, #0
 80196c8:	637b      	str	r3, [r7, #52]	; 0x34
 80196ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80196ce:	693b      	ldr	r3, [r7, #16]
 80196d0:	f383 8811 	msr	BASEPRI, r3
}
 80196d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80196d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80196d8:	4618      	mov	r0, r3
 80196da:	3738      	adds	r7, #56	; 0x38
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}

080196e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b086      	sub	sp, #24
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	60f8      	str	r0, [r7, #12]
 80196e8:	60b9      	str	r1, [r7, #8]
 80196ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80196ec:	2300      	movs	r3, #0
 80196ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d10d      	bne.n	801971a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d14d      	bne.n	80197a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	689b      	ldr	r3, [r3, #8]
 801970a:	4618      	mov	r0, r3
 801970c:	f001 f94c 	bl	801a9a8 <xTaskPriorityDisinherit>
 8019710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	2200      	movs	r2, #0
 8019716:	609a      	str	r2, [r3, #8]
 8019718:	e043      	b.n	80197a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d119      	bne.n	8019754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	6858      	ldr	r0, [r3, #4]
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019728:	461a      	mov	r2, r3
 801972a:	68b9      	ldr	r1, [r7, #8]
 801972c:	f002 f9e2 	bl	801baf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	685a      	ldr	r2, [r3, #4]
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019738:	441a      	add	r2, r3
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	685a      	ldr	r2, [r3, #4]
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	689b      	ldr	r3, [r3, #8]
 8019746:	429a      	cmp	r2, r3
 8019748:	d32b      	bcc.n	80197a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	681a      	ldr	r2, [r3, #0]
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	605a      	str	r2, [r3, #4]
 8019752:	e026      	b.n	80197a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	68d8      	ldr	r0, [r3, #12]
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801975c:	461a      	mov	r2, r3
 801975e:	68b9      	ldr	r1, [r7, #8]
 8019760:	f002 f9c8 	bl	801baf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	68da      	ldr	r2, [r3, #12]
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801976c:	425b      	negs	r3, r3
 801976e:	441a      	add	r2, r3
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	68da      	ldr	r2, [r3, #12]
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	429a      	cmp	r2, r3
 801977e:	d207      	bcs.n	8019790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	689a      	ldr	r2, [r3, #8]
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019788:	425b      	negs	r3, r3
 801978a:	441a      	add	r2, r3
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b02      	cmp	r3, #2
 8019794:	d105      	bne.n	80197a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019796:	693b      	ldr	r3, [r7, #16]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d002      	beq.n	80197a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801979c:	693b      	ldr	r3, [r7, #16]
 801979e:	3b01      	subs	r3, #1
 80197a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80197a2:	693b      	ldr	r3, [r7, #16]
 80197a4:	1c5a      	adds	r2, r3, #1
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80197aa:	697b      	ldr	r3, [r7, #20]
}
 80197ac:	4618      	mov	r0, r3
 80197ae:	3718      	adds	r7, #24
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}

080197b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b082      	sub	sp, #8
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
 80197bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d018      	beq.n	80197f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	68da      	ldr	r2, [r3, #12]
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197ce:	441a      	add	r2, r3
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	68da      	ldr	r2, [r3, #12]
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	689b      	ldr	r3, [r3, #8]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d303      	bcc.n	80197e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681a      	ldr	r2, [r3, #0]
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	68d9      	ldr	r1, [r3, #12]
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197f0:	461a      	mov	r2, r3
 80197f2:	6838      	ldr	r0, [r7, #0]
 80197f4:	f002 f97e 	bl	801baf4 <memcpy>
	}
}
 80197f8:	bf00      	nop
 80197fa:	3708      	adds	r7, #8
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b084      	sub	sp, #16
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019808:	f001 fe44 	bl	801b494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019814:	e011      	b.n	801983a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801981a:	2b00      	cmp	r3, #0
 801981c:	d012      	beq.n	8019844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	3324      	adds	r3, #36	; 0x24
 8019822:	4618      	mov	r0, r3
 8019824:	f000 fe82 	bl	801a52c <xTaskRemoveFromEventList>
 8019828:	4603      	mov	r3, r0
 801982a:	2b00      	cmp	r3, #0
 801982c:	d001      	beq.n	8019832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801982e:	f000 ffbb 	bl	801a7a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019832:	7bfb      	ldrb	r3, [r7, #15]
 8019834:	3b01      	subs	r3, #1
 8019836:	b2db      	uxtb	r3, r3
 8019838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801983a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801983e:	2b00      	cmp	r3, #0
 8019840:	dce9      	bgt.n	8019816 <prvUnlockQueue+0x16>
 8019842:	e000      	b.n	8019846 <prvUnlockQueue+0x46>
					break;
 8019844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	22ff      	movs	r2, #255	; 0xff
 801984a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801984e:	f001 fe51 	bl	801b4f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019852:	f001 fe1f 	bl	801b494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801985c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801985e:	e011      	b.n	8019884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	691b      	ldr	r3, [r3, #16]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d012      	beq.n	801988e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	3310      	adds	r3, #16
 801986c:	4618      	mov	r0, r3
 801986e:	f000 fe5d 	bl	801a52c <xTaskRemoveFromEventList>
 8019872:	4603      	mov	r3, r0
 8019874:	2b00      	cmp	r3, #0
 8019876:	d001      	beq.n	801987c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019878:	f000 ff96 	bl	801a7a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801987c:	7bbb      	ldrb	r3, [r7, #14]
 801987e:	3b01      	subs	r3, #1
 8019880:	b2db      	uxtb	r3, r3
 8019882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019888:	2b00      	cmp	r3, #0
 801988a:	dce9      	bgt.n	8019860 <prvUnlockQueue+0x60>
 801988c:	e000      	b.n	8019890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801988e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	22ff      	movs	r2, #255	; 0xff
 8019894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019898:	f001 fe2c 	bl	801b4f4 <vPortExitCritical>
}
 801989c:	bf00      	nop
 801989e:	3710      	adds	r7, #16
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}

080198a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b084      	sub	sp, #16
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80198ac:	f001 fdf2 	bl	801b494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d102      	bne.n	80198be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80198b8:	2301      	movs	r3, #1
 80198ba:	60fb      	str	r3, [r7, #12]
 80198bc:	e001      	b.n	80198c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80198be:	2300      	movs	r3, #0
 80198c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80198c2:	f001 fe17 	bl	801b4f4 <vPortExitCritical>

	return xReturn;
 80198c6:	68fb      	ldr	r3, [r7, #12]
}
 80198c8:	4618      	mov	r0, r3
 80198ca:	3710      	adds	r7, #16
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd80      	pop	{r7, pc}

080198d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b084      	sub	sp, #16
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80198d8:	f001 fddc 	bl	801b494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198e4:	429a      	cmp	r2, r3
 80198e6:	d102      	bne.n	80198ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80198e8:	2301      	movs	r3, #1
 80198ea:	60fb      	str	r3, [r7, #12]
 80198ec:	e001      	b.n	80198f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80198ee:	2300      	movs	r3, #0
 80198f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80198f2:	f001 fdff 	bl	801b4f4 <vPortExitCritical>

	return xReturn;
 80198f6:	68fb      	ldr	r3, [r7, #12]
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	3710      	adds	r7, #16
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}

08019900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019900:	b480      	push	{r7}
 8019902:	b085      	sub	sp, #20
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801990a:	2300      	movs	r3, #0
 801990c:	60fb      	str	r3, [r7, #12]
 801990e:	e014      	b.n	801993a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019910:	4a0f      	ldr	r2, [pc, #60]	; (8019950 <vQueueAddToRegistry+0x50>)
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d10b      	bne.n	8019934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801991c:	490c      	ldr	r1, [pc, #48]	; (8019950 <vQueueAddToRegistry+0x50>)
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	683a      	ldr	r2, [r7, #0]
 8019922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019926:	4a0a      	ldr	r2, [pc, #40]	; (8019950 <vQueueAddToRegistry+0x50>)
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	00db      	lsls	r3, r3, #3
 801992c:	4413      	add	r3, r2
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019932:	e006      	b.n	8019942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	3301      	adds	r3, #1
 8019938:	60fb      	str	r3, [r7, #12]
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	2b07      	cmp	r3, #7
 801993e:	d9e7      	bls.n	8019910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019940:	bf00      	nop
 8019942:	bf00      	nop
 8019944:	3714      	adds	r7, #20
 8019946:	46bd      	mov	sp, r7
 8019948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994c:	4770      	bx	lr
 801994e:	bf00      	nop
 8019950:	24002dcc 	.word	0x24002dcc

08019954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019954:	b580      	push	{r7, lr}
 8019956:	b086      	sub	sp, #24
 8019958:	af00      	add	r7, sp, #0
 801995a:	60f8      	str	r0, [r7, #12]
 801995c:	60b9      	str	r1, [r7, #8]
 801995e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019964:	f001 fd96 	bl	801b494 <vPortEnterCritical>
 8019968:	697b      	ldr	r3, [r7, #20]
 801996a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801996e:	b25b      	sxtb	r3, r3
 8019970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019974:	d103      	bne.n	801997e <vQueueWaitForMessageRestricted+0x2a>
 8019976:	697b      	ldr	r3, [r7, #20]
 8019978:	2200      	movs	r2, #0
 801997a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801997e:	697b      	ldr	r3, [r7, #20]
 8019980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019984:	b25b      	sxtb	r3, r3
 8019986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801998a:	d103      	bne.n	8019994 <vQueueWaitForMessageRestricted+0x40>
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	2200      	movs	r2, #0
 8019990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019994:	f001 fdae 	bl	801b4f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801999c:	2b00      	cmp	r3, #0
 801999e:	d106      	bne.n	80199ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	3324      	adds	r3, #36	; 0x24
 80199a4:	687a      	ldr	r2, [r7, #4]
 80199a6:	68b9      	ldr	r1, [r7, #8]
 80199a8:	4618      	mov	r0, r3
 80199aa:	f000 fd93 	bl	801a4d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80199ae:	6978      	ldr	r0, [r7, #20]
 80199b0:	f7ff ff26 	bl	8019800 <prvUnlockQueue>
	}
 80199b4:	bf00      	nop
 80199b6:	3718      	adds	r7, #24
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}

080199bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b08e      	sub	sp, #56	; 0x38
 80199c0:	af04      	add	r7, sp, #16
 80199c2:	60f8      	str	r0, [r7, #12]
 80199c4:	60b9      	str	r1, [r7, #8]
 80199c6:	607a      	str	r2, [r7, #4]
 80199c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80199ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d10a      	bne.n	80199e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80199d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d4:	f383 8811 	msr	BASEPRI, r3
 80199d8:	f3bf 8f6f 	isb	sy
 80199dc:	f3bf 8f4f 	dsb	sy
 80199e0:	623b      	str	r3, [r7, #32]
}
 80199e2:	bf00      	nop
 80199e4:	e7fe      	b.n	80199e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80199e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d10a      	bne.n	8019a02 <xTaskCreateStatic+0x46>
	__asm volatile
 80199ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199f0:	f383 8811 	msr	BASEPRI, r3
 80199f4:	f3bf 8f6f 	isb	sy
 80199f8:	f3bf 8f4f 	dsb	sy
 80199fc:	61fb      	str	r3, [r7, #28]
}
 80199fe:	bf00      	nop
 8019a00:	e7fe      	b.n	8019a00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019a02:	235c      	movs	r3, #92	; 0x5c
 8019a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019a06:	693b      	ldr	r3, [r7, #16]
 8019a08:	2b5c      	cmp	r3, #92	; 0x5c
 8019a0a:	d00a      	beq.n	8019a22 <xTaskCreateStatic+0x66>
	__asm volatile
 8019a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a10:	f383 8811 	msr	BASEPRI, r3
 8019a14:	f3bf 8f6f 	isb	sy
 8019a18:	f3bf 8f4f 	dsb	sy
 8019a1c:	61bb      	str	r3, [r7, #24]
}
 8019a1e:	bf00      	nop
 8019a20:	e7fe      	b.n	8019a20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019a22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d01e      	beq.n	8019a68 <xTaskCreateStatic+0xac>
 8019a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d01b      	beq.n	8019a68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a3c:	2202      	movs	r2, #2
 8019a3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019a42:	2300      	movs	r3, #0
 8019a44:	9303      	str	r3, [sp, #12]
 8019a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a48:	9302      	str	r3, [sp, #8]
 8019a4a:	f107 0314 	add.w	r3, r7, #20
 8019a4e:	9301      	str	r3, [sp, #4]
 8019a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a52:	9300      	str	r3, [sp, #0]
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	687a      	ldr	r2, [r7, #4]
 8019a58:	68b9      	ldr	r1, [r7, #8]
 8019a5a:	68f8      	ldr	r0, [r7, #12]
 8019a5c:	f000 f850 	bl	8019b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a62:	f000 f8dd 	bl	8019c20 <prvAddNewTaskToReadyList>
 8019a66:	e001      	b.n	8019a6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8019a68:	2300      	movs	r3, #0
 8019a6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019a6c:	697b      	ldr	r3, [r7, #20]
	}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	3728      	adds	r7, #40	; 0x28
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}

08019a76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019a76:	b580      	push	{r7, lr}
 8019a78:	b08c      	sub	sp, #48	; 0x30
 8019a7a:	af04      	add	r7, sp, #16
 8019a7c:	60f8      	str	r0, [r7, #12]
 8019a7e:	60b9      	str	r1, [r7, #8]
 8019a80:	603b      	str	r3, [r7, #0]
 8019a82:	4613      	mov	r3, r2
 8019a84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019a86:	88fb      	ldrh	r3, [r7, #6]
 8019a88:	009b      	lsls	r3, r3, #2
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f001 fe24 	bl	801b6d8 <pvPortMalloc>
 8019a90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019a92:	697b      	ldr	r3, [r7, #20]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d00e      	beq.n	8019ab6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019a98:	205c      	movs	r0, #92	; 0x5c
 8019a9a:	f001 fe1d 	bl	801b6d8 <pvPortMalloc>
 8019a9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019aa0:	69fb      	ldr	r3, [r7, #28]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d003      	beq.n	8019aae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019aa6:	69fb      	ldr	r3, [r7, #28]
 8019aa8:	697a      	ldr	r2, [r7, #20]
 8019aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8019aac:	e005      	b.n	8019aba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019aae:	6978      	ldr	r0, [r7, #20]
 8019ab0:	f001 fede 	bl	801b870 <vPortFree>
 8019ab4:	e001      	b.n	8019aba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019aba:	69fb      	ldr	r3, [r7, #28]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d017      	beq.n	8019af0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019ac0:	69fb      	ldr	r3, [r7, #28]
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019ac8:	88fa      	ldrh	r2, [r7, #6]
 8019aca:	2300      	movs	r3, #0
 8019acc:	9303      	str	r3, [sp, #12]
 8019ace:	69fb      	ldr	r3, [r7, #28]
 8019ad0:	9302      	str	r3, [sp, #8]
 8019ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ad4:	9301      	str	r3, [sp, #4]
 8019ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ad8:	9300      	str	r3, [sp, #0]
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	68b9      	ldr	r1, [r7, #8]
 8019ade:	68f8      	ldr	r0, [r7, #12]
 8019ae0:	f000 f80e 	bl	8019b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019ae4:	69f8      	ldr	r0, [r7, #28]
 8019ae6:	f000 f89b 	bl	8019c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019aea:	2301      	movs	r3, #1
 8019aec:	61bb      	str	r3, [r7, #24]
 8019aee:	e002      	b.n	8019af6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019af4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019af6:	69bb      	ldr	r3, [r7, #24]
	}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3720      	adds	r7, #32
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}

08019b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b088      	sub	sp, #32
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	60f8      	str	r0, [r7, #12]
 8019b08:	60b9      	str	r1, [r7, #8]
 8019b0a:	607a      	str	r2, [r7, #4]
 8019b0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	009b      	lsls	r3, r3, #2
 8019b16:	461a      	mov	r2, r3
 8019b18:	21a5      	movs	r1, #165	; 0xa5
 8019b1a:	f001 fff9 	bl	801bb10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019b22:	6879      	ldr	r1, [r7, #4]
 8019b24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019b28:	440b      	add	r3, r1
 8019b2a:	009b      	lsls	r3, r3, #2
 8019b2c:	4413      	add	r3, r2
 8019b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019b30:	69bb      	ldr	r3, [r7, #24]
 8019b32:	f023 0307 	bic.w	r3, r3, #7
 8019b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019b38:	69bb      	ldr	r3, [r7, #24]
 8019b3a:	f003 0307 	and.w	r3, r3, #7
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d00a      	beq.n	8019b58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8019b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b46:	f383 8811 	msr	BASEPRI, r3
 8019b4a:	f3bf 8f6f 	isb	sy
 8019b4e:	f3bf 8f4f 	dsb	sy
 8019b52:	617b      	str	r3, [r7, #20]
}
 8019b54:	bf00      	nop
 8019b56:	e7fe      	b.n	8019b56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d01f      	beq.n	8019b9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019b5e:	2300      	movs	r3, #0
 8019b60:	61fb      	str	r3, [r7, #28]
 8019b62:	e012      	b.n	8019b8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019b64:	68ba      	ldr	r2, [r7, #8]
 8019b66:	69fb      	ldr	r3, [r7, #28]
 8019b68:	4413      	add	r3, r2
 8019b6a:	7819      	ldrb	r1, [r3, #0]
 8019b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b6e:	69fb      	ldr	r3, [r7, #28]
 8019b70:	4413      	add	r3, r2
 8019b72:	3334      	adds	r3, #52	; 0x34
 8019b74:	460a      	mov	r2, r1
 8019b76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019b78:	68ba      	ldr	r2, [r7, #8]
 8019b7a:	69fb      	ldr	r3, [r7, #28]
 8019b7c:	4413      	add	r3, r2
 8019b7e:	781b      	ldrb	r3, [r3, #0]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d006      	beq.n	8019b92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019b84:	69fb      	ldr	r3, [r7, #28]
 8019b86:	3301      	adds	r3, #1
 8019b88:	61fb      	str	r3, [r7, #28]
 8019b8a:	69fb      	ldr	r3, [r7, #28]
 8019b8c:	2b0f      	cmp	r3, #15
 8019b8e:	d9e9      	bls.n	8019b64 <prvInitialiseNewTask+0x64>
 8019b90:	e000      	b.n	8019b94 <prvInitialiseNewTask+0x94>
			{
				break;
 8019b92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b96:	2200      	movs	r2, #0
 8019b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019b9c:	e003      	b.n	8019ba6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba8:	2b37      	cmp	r3, #55	; 0x37
 8019baa:	d901      	bls.n	8019bb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019bac:	2337      	movs	r3, #55	; 0x37
 8019bae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bc4:	3304      	adds	r3, #4
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f7ff f8f8 	bl	8018dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bce:	3318      	adds	r3, #24
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	f7ff f8f3 	bl	8018dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bee:	2200      	movs	r2, #0
 8019bf0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019bfa:	683a      	ldr	r2, [r7, #0]
 8019bfc:	68f9      	ldr	r1, [r7, #12]
 8019bfe:	69b8      	ldr	r0, [r7, #24]
 8019c00:	f001 fb1a 	bl	801b238 <pxPortInitialiseStack>
 8019c04:	4602      	mov	r2, r0
 8019c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d002      	beq.n	8019c16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019c16:	bf00      	nop
 8019c18:	3720      	adds	r7, #32
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd80      	pop	{r7, pc}
	...

08019c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b082      	sub	sp, #8
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019c28:	f001 fc34 	bl	801b494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019c2c:	4b2d      	ldr	r3, [pc, #180]	; (8019ce4 <prvAddNewTaskToReadyList+0xc4>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	3301      	adds	r3, #1
 8019c32:	4a2c      	ldr	r2, [pc, #176]	; (8019ce4 <prvAddNewTaskToReadyList+0xc4>)
 8019c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019c36:	4b2c      	ldr	r3, [pc, #176]	; (8019ce8 <prvAddNewTaskToReadyList+0xc8>)
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d109      	bne.n	8019c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019c3e:	4a2a      	ldr	r2, [pc, #168]	; (8019ce8 <prvAddNewTaskToReadyList+0xc8>)
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019c44:	4b27      	ldr	r3, [pc, #156]	; (8019ce4 <prvAddNewTaskToReadyList+0xc4>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	2b01      	cmp	r3, #1
 8019c4a:	d110      	bne.n	8019c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019c4c:	f000 fdd0 	bl	801a7f0 <prvInitialiseTaskLists>
 8019c50:	e00d      	b.n	8019c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019c52:	4b26      	ldr	r3, [pc, #152]	; (8019cec <prvAddNewTaskToReadyList+0xcc>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d109      	bne.n	8019c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019c5a:	4b23      	ldr	r3, [pc, #140]	; (8019ce8 <prvAddNewTaskToReadyList+0xc8>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c64:	429a      	cmp	r2, r3
 8019c66:	d802      	bhi.n	8019c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019c68:	4a1f      	ldr	r2, [pc, #124]	; (8019ce8 <prvAddNewTaskToReadyList+0xc8>)
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019c6e:	4b20      	ldr	r3, [pc, #128]	; (8019cf0 <prvAddNewTaskToReadyList+0xd0>)
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	3301      	adds	r3, #1
 8019c74:	4a1e      	ldr	r2, [pc, #120]	; (8019cf0 <prvAddNewTaskToReadyList+0xd0>)
 8019c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019c78:	4b1d      	ldr	r3, [pc, #116]	; (8019cf0 <prvAddNewTaskToReadyList+0xd0>)
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c84:	4b1b      	ldr	r3, [pc, #108]	; (8019cf4 <prvAddNewTaskToReadyList+0xd4>)
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d903      	bls.n	8019c94 <prvAddNewTaskToReadyList+0x74>
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c90:	4a18      	ldr	r2, [pc, #96]	; (8019cf4 <prvAddNewTaskToReadyList+0xd4>)
 8019c92:	6013      	str	r3, [r2, #0]
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c98:	4613      	mov	r3, r2
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	4413      	add	r3, r2
 8019c9e:	009b      	lsls	r3, r3, #2
 8019ca0:	4a15      	ldr	r2, [pc, #84]	; (8019cf8 <prvAddNewTaskToReadyList+0xd8>)
 8019ca2:	441a      	add	r2, r3
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	3304      	adds	r3, #4
 8019ca8:	4619      	mov	r1, r3
 8019caa:	4610      	mov	r0, r2
 8019cac:	f7ff f893 	bl	8018dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019cb0:	f001 fc20 	bl	801b4f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019cb4:	4b0d      	ldr	r3, [pc, #52]	; (8019cec <prvAddNewTaskToReadyList+0xcc>)
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d00e      	beq.n	8019cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019cbc:	4b0a      	ldr	r3, [pc, #40]	; (8019ce8 <prvAddNewTaskToReadyList+0xc8>)
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	d207      	bcs.n	8019cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019cca:	4b0c      	ldr	r3, [pc, #48]	; (8019cfc <prvAddNewTaskToReadyList+0xdc>)
 8019ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019cd0:	601a      	str	r2, [r3, #0]
 8019cd2:	f3bf 8f4f 	dsb	sy
 8019cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019cda:	bf00      	nop
 8019cdc:	3708      	adds	r7, #8
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	bd80      	pop	{r7, pc}
 8019ce2:	bf00      	nop
 8019ce4:	240032e0 	.word	0x240032e0
 8019ce8:	24002e0c 	.word	0x24002e0c
 8019cec:	240032ec 	.word	0x240032ec
 8019cf0:	240032fc 	.word	0x240032fc
 8019cf4:	240032e8 	.word	0x240032e8
 8019cf8:	24002e10 	.word	0x24002e10
 8019cfc:	e000ed04 	.word	0xe000ed04

08019d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b084      	sub	sp, #16
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019d08:	2300      	movs	r3, #0
 8019d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d017      	beq.n	8019d42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019d12:	4b13      	ldr	r3, [pc, #76]	; (8019d60 <vTaskDelay+0x60>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d00a      	beq.n	8019d30 <vTaskDelay+0x30>
	__asm volatile
 8019d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d1e:	f383 8811 	msr	BASEPRI, r3
 8019d22:	f3bf 8f6f 	isb	sy
 8019d26:	f3bf 8f4f 	dsb	sy
 8019d2a:	60bb      	str	r3, [r7, #8]
}
 8019d2c:	bf00      	nop
 8019d2e:	e7fe      	b.n	8019d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019d30:	f000 f986 	bl	801a040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019d34:	2100      	movs	r1, #0
 8019d36:	6878      	ldr	r0, [r7, #4]
 8019d38:	f000 febc 	bl	801aab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019d3c:	f000 f98e 	bl	801a05c <xTaskResumeAll>
 8019d40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d107      	bne.n	8019d58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8019d48:	4b06      	ldr	r3, [pc, #24]	; (8019d64 <vTaskDelay+0x64>)
 8019d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d4e:	601a      	str	r2, [r3, #0]
 8019d50:	f3bf 8f4f 	dsb	sy
 8019d54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019d58:	bf00      	nop
 8019d5a:	3710      	adds	r7, #16
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	bd80      	pop	{r7, pc}
 8019d60:	24003308 	.word	0x24003308
 8019d64:	e000ed04 	.word	0xe000ed04

08019d68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019d70:	f001 fb90 	bl	801b494 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d102      	bne.n	8019d80 <vTaskSuspend+0x18>
 8019d7a:	4b30      	ldr	r3, [pc, #192]	; (8019e3c <vTaskSuspend+0xd4>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	e000      	b.n	8019d82 <vTaskSuspend+0x1a>
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	3304      	adds	r3, #4
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f7ff f881 	bl	8018e90 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d004      	beq.n	8019da0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	3318      	adds	r3, #24
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	f7ff f878 	bl	8018e90 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	3304      	adds	r3, #4
 8019da4:	4619      	mov	r1, r3
 8019da6:	4826      	ldr	r0, [pc, #152]	; (8019e40 <vTaskSuspend+0xd8>)
 8019da8:	f7ff f815 	bl	8018dd6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019db2:	b2db      	uxtb	r3, r3
 8019db4:	2b01      	cmp	r3, #1
 8019db6:	d103      	bne.n	8019dc0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8019dc0:	f001 fb98 	bl	801b4f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8019dc4:	4b1f      	ldr	r3, [pc, #124]	; (8019e44 <vTaskSuspend+0xdc>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d005      	beq.n	8019dd8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8019dcc:	f001 fb62 	bl	801b494 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8019dd0:	f000 fdac 	bl	801a92c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8019dd4:	f001 fb8e 	bl	801b4f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8019dd8:	4b18      	ldr	r3, [pc, #96]	; (8019e3c <vTaskSuspend+0xd4>)
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	68fa      	ldr	r2, [r7, #12]
 8019dde:	429a      	cmp	r2, r3
 8019de0:	d127      	bne.n	8019e32 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8019de2:	4b18      	ldr	r3, [pc, #96]	; (8019e44 <vTaskSuspend+0xdc>)
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d017      	beq.n	8019e1a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8019dea:	4b17      	ldr	r3, [pc, #92]	; (8019e48 <vTaskSuspend+0xe0>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d00a      	beq.n	8019e08 <vTaskSuspend+0xa0>
	__asm volatile
 8019df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019df6:	f383 8811 	msr	BASEPRI, r3
 8019dfa:	f3bf 8f6f 	isb	sy
 8019dfe:	f3bf 8f4f 	dsb	sy
 8019e02:	60bb      	str	r3, [r7, #8]
}
 8019e04:	bf00      	nop
 8019e06:	e7fe      	b.n	8019e06 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8019e08:	4b10      	ldr	r3, [pc, #64]	; (8019e4c <vTaskSuspend+0xe4>)
 8019e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e0e:	601a      	str	r2, [r3, #0]
 8019e10:	f3bf 8f4f 	dsb	sy
 8019e14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e18:	e00b      	b.n	8019e32 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8019e1a:	4b09      	ldr	r3, [pc, #36]	; (8019e40 <vTaskSuspend+0xd8>)
 8019e1c:	681a      	ldr	r2, [r3, #0]
 8019e1e:	4b0c      	ldr	r3, [pc, #48]	; (8019e50 <vTaskSuspend+0xe8>)
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d103      	bne.n	8019e2e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8019e26:	4b05      	ldr	r3, [pc, #20]	; (8019e3c <vTaskSuspend+0xd4>)
 8019e28:	2200      	movs	r2, #0
 8019e2a:	601a      	str	r2, [r3, #0]
	}
 8019e2c:	e001      	b.n	8019e32 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8019e2e:	f000 fa85 	bl	801a33c <vTaskSwitchContext>
	}
 8019e32:	bf00      	nop
 8019e34:	3710      	adds	r7, #16
 8019e36:	46bd      	mov	sp, r7
 8019e38:	bd80      	pop	{r7, pc}
 8019e3a:	bf00      	nop
 8019e3c:	24002e0c 	.word	0x24002e0c
 8019e40:	240032cc 	.word	0x240032cc
 8019e44:	240032ec 	.word	0x240032ec
 8019e48:	24003308 	.word	0x24003308
 8019e4c:	e000ed04 	.word	0xe000ed04
 8019e50:	240032e0 	.word	0x240032e0

08019e54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8019e54:	b480      	push	{r7}
 8019e56:	b087      	sub	sp, #28
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d10a      	bne.n	8019e80 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8019e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e6e:	f383 8811 	msr	BASEPRI, r3
 8019e72:	f3bf 8f6f 	isb	sy
 8019e76:	f3bf 8f4f 	dsb	sy
 8019e7a:	60fb      	str	r3, [r7, #12]
}
 8019e7c:	bf00      	nop
 8019e7e:	e7fe      	b.n	8019e7e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019e80:	693b      	ldr	r3, [r7, #16]
 8019e82:	695b      	ldr	r3, [r3, #20]
 8019e84:	4a0a      	ldr	r2, [pc, #40]	; (8019eb0 <prvTaskIsTaskSuspended+0x5c>)
 8019e86:	4293      	cmp	r3, r2
 8019e88:	d10a      	bne.n	8019ea0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8019e8a:	693b      	ldr	r3, [r7, #16]
 8019e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e8e:	4a09      	ldr	r2, [pc, #36]	; (8019eb4 <prvTaskIsTaskSuspended+0x60>)
 8019e90:	4293      	cmp	r3, r2
 8019e92:	d005      	beq.n	8019ea0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d101      	bne.n	8019ea0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019ea0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	371c      	adds	r7, #28
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eac:	4770      	bx	lr
 8019eae:	bf00      	nop
 8019eb0:	240032cc 	.word	0x240032cc
 8019eb4:	240032a0 	.word	0x240032a0

08019eb8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d10a      	bne.n	8019ee0 <vTaskResume+0x28>
	__asm volatile
 8019eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ece:	f383 8811 	msr	BASEPRI, r3
 8019ed2:	f3bf 8f6f 	isb	sy
 8019ed6:	f3bf 8f4f 	dsb	sy
 8019eda:	60bb      	str	r3, [r7, #8]
}
 8019edc:	bf00      	nop
 8019ede:	e7fe      	b.n	8019ede <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8019ee0:	4b20      	ldr	r3, [pc, #128]	; (8019f64 <vTaskResume+0xac>)
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	68fa      	ldr	r2, [r7, #12]
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d038      	beq.n	8019f5c <vTaskResume+0xa4>
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d035      	beq.n	8019f5c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8019ef0:	f001 fad0 	bl	801b494 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8019ef4:	68f8      	ldr	r0, [r7, #12]
 8019ef6:	f7ff ffad 	bl	8019e54 <prvTaskIsTaskSuspended>
 8019efa:	4603      	mov	r3, r0
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d02b      	beq.n	8019f58 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	3304      	adds	r3, #4
 8019f04:	4618      	mov	r0, r3
 8019f06:	f7fe ffc3 	bl	8018e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f0e:	4b16      	ldr	r3, [pc, #88]	; (8019f68 <vTaskResume+0xb0>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	429a      	cmp	r2, r3
 8019f14:	d903      	bls.n	8019f1e <vTaskResume+0x66>
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f1a:	4a13      	ldr	r2, [pc, #76]	; (8019f68 <vTaskResume+0xb0>)
 8019f1c:	6013      	str	r3, [r2, #0]
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f22:	4613      	mov	r3, r2
 8019f24:	009b      	lsls	r3, r3, #2
 8019f26:	4413      	add	r3, r2
 8019f28:	009b      	lsls	r3, r3, #2
 8019f2a:	4a10      	ldr	r2, [pc, #64]	; (8019f6c <vTaskResume+0xb4>)
 8019f2c:	441a      	add	r2, r3
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	3304      	adds	r3, #4
 8019f32:	4619      	mov	r1, r3
 8019f34:	4610      	mov	r0, r2
 8019f36:	f7fe ff4e 	bl	8018dd6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f3e:	4b09      	ldr	r3, [pc, #36]	; (8019f64 <vTaskResume+0xac>)
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f44:	429a      	cmp	r2, r3
 8019f46:	d307      	bcc.n	8019f58 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8019f48:	4b09      	ldr	r3, [pc, #36]	; (8019f70 <vTaskResume+0xb8>)
 8019f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f4e:	601a      	str	r2, [r3, #0]
 8019f50:	f3bf 8f4f 	dsb	sy
 8019f54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8019f58:	f001 facc 	bl	801b4f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019f5c:	bf00      	nop
 8019f5e:	3710      	adds	r7, #16
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bd80      	pop	{r7, pc}
 8019f64:	24002e0c 	.word	0x24002e0c
 8019f68:	240032e8 	.word	0x240032e8
 8019f6c:	24002e10 	.word	0x24002e10
 8019f70:	e000ed04 	.word	0xe000ed04

08019f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b08a      	sub	sp, #40	; 0x28
 8019f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019f82:	463a      	mov	r2, r7
 8019f84:	1d39      	adds	r1, r7, #4
 8019f86:	f107 0308 	add.w	r3, r7, #8
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	f7fe fc56 	bl	801883c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019f90:	6839      	ldr	r1, [r7, #0]
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	68ba      	ldr	r2, [r7, #8]
 8019f96:	9202      	str	r2, [sp, #8]
 8019f98:	9301      	str	r3, [sp, #4]
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	9300      	str	r3, [sp, #0]
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	460a      	mov	r2, r1
 8019fa2:	4921      	ldr	r1, [pc, #132]	; (801a028 <vTaskStartScheduler+0xb4>)
 8019fa4:	4821      	ldr	r0, [pc, #132]	; (801a02c <vTaskStartScheduler+0xb8>)
 8019fa6:	f7ff fd09 	bl	80199bc <xTaskCreateStatic>
 8019faa:	4603      	mov	r3, r0
 8019fac:	4a20      	ldr	r2, [pc, #128]	; (801a030 <vTaskStartScheduler+0xbc>)
 8019fae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019fb0:	4b1f      	ldr	r3, [pc, #124]	; (801a030 <vTaskStartScheduler+0xbc>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d002      	beq.n	8019fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019fb8:	2301      	movs	r3, #1
 8019fba:	617b      	str	r3, [r7, #20]
 8019fbc:	e001      	b.n	8019fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019fc2:	697b      	ldr	r3, [r7, #20]
 8019fc4:	2b01      	cmp	r3, #1
 8019fc6:	d102      	bne.n	8019fce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019fc8:	f000 fdc8 	bl	801ab5c <xTimerCreateTimerTask>
 8019fcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019fce:	697b      	ldr	r3, [r7, #20]
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d116      	bne.n	801a002 <vTaskStartScheduler+0x8e>
	__asm volatile
 8019fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fd8:	f383 8811 	msr	BASEPRI, r3
 8019fdc:	f3bf 8f6f 	isb	sy
 8019fe0:	f3bf 8f4f 	dsb	sy
 8019fe4:	613b      	str	r3, [r7, #16]
}
 8019fe6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019fe8:	4b12      	ldr	r3, [pc, #72]	; (801a034 <vTaskStartScheduler+0xc0>)
 8019fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019fee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019ff0:	4b11      	ldr	r3, [pc, #68]	; (801a038 <vTaskStartScheduler+0xc4>)
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019ff6:	4b11      	ldr	r3, [pc, #68]	; (801a03c <vTaskStartScheduler+0xc8>)
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019ffc:	f001 f9a8 	bl	801b350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a000:	e00e      	b.n	801a020 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a008:	d10a      	bne.n	801a020 <vTaskStartScheduler+0xac>
	__asm volatile
 801a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a00e:	f383 8811 	msr	BASEPRI, r3
 801a012:	f3bf 8f6f 	isb	sy
 801a016:	f3bf 8f4f 	dsb	sy
 801a01a:	60fb      	str	r3, [r7, #12]
}
 801a01c:	bf00      	nop
 801a01e:	e7fe      	b.n	801a01e <vTaskStartScheduler+0xaa>
}
 801a020:	bf00      	nop
 801a022:	3718      	adds	r7, #24
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}
 801a028:	0801bbcc 	.word	0x0801bbcc
 801a02c:	0801a7c1 	.word	0x0801a7c1
 801a030:	24003304 	.word	0x24003304
 801a034:	24003300 	.word	0x24003300
 801a038:	240032ec 	.word	0x240032ec
 801a03c:	240032e4 	.word	0x240032e4

0801a040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a040:	b480      	push	{r7}
 801a042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a044:	4b04      	ldr	r3, [pc, #16]	; (801a058 <vTaskSuspendAll+0x18>)
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	3301      	adds	r3, #1
 801a04a:	4a03      	ldr	r2, [pc, #12]	; (801a058 <vTaskSuspendAll+0x18>)
 801a04c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a04e:	bf00      	nop
 801a050:	46bd      	mov	sp, r7
 801a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a056:	4770      	bx	lr
 801a058:	24003308 	.word	0x24003308

0801a05c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b084      	sub	sp, #16
 801a060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a062:	2300      	movs	r3, #0
 801a064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a066:	2300      	movs	r3, #0
 801a068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a06a:	4b42      	ldr	r3, [pc, #264]	; (801a174 <xTaskResumeAll+0x118>)
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d10a      	bne.n	801a088 <xTaskResumeAll+0x2c>
	__asm volatile
 801a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a076:	f383 8811 	msr	BASEPRI, r3
 801a07a:	f3bf 8f6f 	isb	sy
 801a07e:	f3bf 8f4f 	dsb	sy
 801a082:	603b      	str	r3, [r7, #0]
}
 801a084:	bf00      	nop
 801a086:	e7fe      	b.n	801a086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a088:	f001 fa04 	bl	801b494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a08c:	4b39      	ldr	r3, [pc, #228]	; (801a174 <xTaskResumeAll+0x118>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	3b01      	subs	r3, #1
 801a092:	4a38      	ldr	r2, [pc, #224]	; (801a174 <xTaskResumeAll+0x118>)
 801a094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a096:	4b37      	ldr	r3, [pc, #220]	; (801a174 <xTaskResumeAll+0x118>)
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d162      	bne.n	801a164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a09e:	4b36      	ldr	r3, [pc, #216]	; (801a178 <xTaskResumeAll+0x11c>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d05e      	beq.n	801a164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a0a6:	e02f      	b.n	801a108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a0a8:	4b34      	ldr	r3, [pc, #208]	; (801a17c <xTaskResumeAll+0x120>)
 801a0aa:	68db      	ldr	r3, [r3, #12]
 801a0ac:	68db      	ldr	r3, [r3, #12]
 801a0ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	3318      	adds	r3, #24
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7fe feeb 	bl	8018e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	3304      	adds	r3, #4
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f7fe fee6 	bl	8018e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a0c8:	4b2d      	ldr	r3, [pc, #180]	; (801a180 <xTaskResumeAll+0x124>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	d903      	bls.n	801a0d8 <xTaskResumeAll+0x7c>
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0d4:	4a2a      	ldr	r2, [pc, #168]	; (801a180 <xTaskResumeAll+0x124>)
 801a0d6:	6013      	str	r3, [r2, #0]
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a0dc:	4613      	mov	r3, r2
 801a0de:	009b      	lsls	r3, r3, #2
 801a0e0:	4413      	add	r3, r2
 801a0e2:	009b      	lsls	r3, r3, #2
 801a0e4:	4a27      	ldr	r2, [pc, #156]	; (801a184 <xTaskResumeAll+0x128>)
 801a0e6:	441a      	add	r2, r3
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	3304      	adds	r3, #4
 801a0ec:	4619      	mov	r1, r3
 801a0ee:	4610      	mov	r0, r2
 801a0f0:	f7fe fe71 	bl	8018dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a0f8:	4b23      	ldr	r3, [pc, #140]	; (801a188 <xTaskResumeAll+0x12c>)
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0fe:	429a      	cmp	r2, r3
 801a100:	d302      	bcc.n	801a108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801a102:	4b22      	ldr	r3, [pc, #136]	; (801a18c <xTaskResumeAll+0x130>)
 801a104:	2201      	movs	r2, #1
 801a106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a108:	4b1c      	ldr	r3, [pc, #112]	; (801a17c <xTaskResumeAll+0x120>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d1cb      	bne.n	801a0a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d001      	beq.n	801a11a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a116:	f000 fc09 	bl	801a92c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a11a:	4b1d      	ldr	r3, [pc, #116]	; (801a190 <xTaskResumeAll+0x134>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d010      	beq.n	801a148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a126:	f000 f847 	bl	801a1b8 <xTaskIncrementTick>
 801a12a:	4603      	mov	r3, r0
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d002      	beq.n	801a136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801a130:	4b16      	ldr	r3, [pc, #88]	; (801a18c <xTaskResumeAll+0x130>)
 801a132:	2201      	movs	r2, #1
 801a134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	3b01      	subs	r3, #1
 801a13a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d1f1      	bne.n	801a126 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801a142:	4b13      	ldr	r3, [pc, #76]	; (801a190 <xTaskResumeAll+0x134>)
 801a144:	2200      	movs	r2, #0
 801a146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a148:	4b10      	ldr	r3, [pc, #64]	; (801a18c <xTaskResumeAll+0x130>)
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d009      	beq.n	801a164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a150:	2301      	movs	r3, #1
 801a152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a154:	4b0f      	ldr	r3, [pc, #60]	; (801a194 <xTaskResumeAll+0x138>)
 801a156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a15a:	601a      	str	r2, [r3, #0]
 801a15c:	f3bf 8f4f 	dsb	sy
 801a160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a164:	f001 f9c6 	bl	801b4f4 <vPortExitCritical>

	return xAlreadyYielded;
 801a168:	68bb      	ldr	r3, [r7, #8]
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	3710      	adds	r7, #16
 801a16e:	46bd      	mov	sp, r7
 801a170:	bd80      	pop	{r7, pc}
 801a172:	bf00      	nop
 801a174:	24003308 	.word	0x24003308
 801a178:	240032e0 	.word	0x240032e0
 801a17c:	240032a0 	.word	0x240032a0
 801a180:	240032e8 	.word	0x240032e8
 801a184:	24002e10 	.word	0x24002e10
 801a188:	24002e0c 	.word	0x24002e0c
 801a18c:	240032f4 	.word	0x240032f4
 801a190:	240032f0 	.word	0x240032f0
 801a194:	e000ed04 	.word	0xe000ed04

0801a198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a198:	b480      	push	{r7}
 801a19a:	b083      	sub	sp, #12
 801a19c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a19e:	4b05      	ldr	r3, [pc, #20]	; (801a1b4 <xTaskGetTickCount+0x1c>)
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a1a4:	687b      	ldr	r3, [r7, #4]
}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	370c      	adds	r7, #12
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b0:	4770      	bx	lr
 801a1b2:	bf00      	nop
 801a1b4:	240032e4 	.word	0x240032e4

0801a1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b086      	sub	sp, #24
 801a1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1c2:	4b53      	ldr	r3, [pc, #332]	; (801a310 <xTaskIncrementTick+0x158>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	f040 8095 	bne.w	801a2f6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a1cc:	4b51      	ldr	r3, [pc, #324]	; (801a314 <xTaskIncrementTick+0x15c>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	3301      	adds	r3, #1
 801a1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a1d4:	4a4f      	ldr	r2, [pc, #316]	; (801a314 <xTaskIncrementTick+0x15c>)
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a1da:	693b      	ldr	r3, [r7, #16]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d120      	bne.n	801a222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a1e0:	4b4d      	ldr	r3, [pc, #308]	; (801a318 <xTaskIncrementTick+0x160>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d00a      	beq.n	801a200 <xTaskIncrementTick+0x48>
	__asm volatile
 801a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ee:	f383 8811 	msr	BASEPRI, r3
 801a1f2:	f3bf 8f6f 	isb	sy
 801a1f6:	f3bf 8f4f 	dsb	sy
 801a1fa:	603b      	str	r3, [r7, #0]
}
 801a1fc:	bf00      	nop
 801a1fe:	e7fe      	b.n	801a1fe <xTaskIncrementTick+0x46>
 801a200:	4b45      	ldr	r3, [pc, #276]	; (801a318 <xTaskIncrementTick+0x160>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	60fb      	str	r3, [r7, #12]
 801a206:	4b45      	ldr	r3, [pc, #276]	; (801a31c <xTaskIncrementTick+0x164>)
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	4a43      	ldr	r2, [pc, #268]	; (801a318 <xTaskIncrementTick+0x160>)
 801a20c:	6013      	str	r3, [r2, #0]
 801a20e:	4a43      	ldr	r2, [pc, #268]	; (801a31c <xTaskIncrementTick+0x164>)
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	6013      	str	r3, [r2, #0]
 801a214:	4b42      	ldr	r3, [pc, #264]	; (801a320 <xTaskIncrementTick+0x168>)
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	3301      	adds	r3, #1
 801a21a:	4a41      	ldr	r2, [pc, #260]	; (801a320 <xTaskIncrementTick+0x168>)
 801a21c:	6013      	str	r3, [r2, #0]
 801a21e:	f000 fb85 	bl	801a92c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a222:	4b40      	ldr	r3, [pc, #256]	; (801a324 <xTaskIncrementTick+0x16c>)
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	693a      	ldr	r2, [r7, #16]
 801a228:	429a      	cmp	r2, r3
 801a22a:	d349      	bcc.n	801a2c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a22c:	4b3a      	ldr	r3, [pc, #232]	; (801a318 <xTaskIncrementTick+0x160>)
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d104      	bne.n	801a240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a236:	4b3b      	ldr	r3, [pc, #236]	; (801a324 <xTaskIncrementTick+0x16c>)
 801a238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a23c:	601a      	str	r2, [r3, #0]
					break;
 801a23e:	e03f      	b.n	801a2c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a240:	4b35      	ldr	r3, [pc, #212]	; (801a318 <xTaskIncrementTick+0x160>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	68db      	ldr	r3, [r3, #12]
 801a246:	68db      	ldr	r3, [r3, #12]
 801a248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	685b      	ldr	r3, [r3, #4]
 801a24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a250:	693a      	ldr	r2, [r7, #16]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	429a      	cmp	r2, r3
 801a256:	d203      	bcs.n	801a260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a258:	4a32      	ldr	r2, [pc, #200]	; (801a324 <xTaskIncrementTick+0x16c>)
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a25e:	e02f      	b.n	801a2c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	3304      	adds	r3, #4
 801a264:	4618      	mov	r0, r3
 801a266:	f7fe fe13 	bl	8018e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d004      	beq.n	801a27c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	3318      	adds	r3, #24
 801a276:	4618      	mov	r0, r3
 801a278:	f7fe fe0a 	bl	8018e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a280:	4b29      	ldr	r3, [pc, #164]	; (801a328 <xTaskIncrementTick+0x170>)
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	429a      	cmp	r2, r3
 801a286:	d903      	bls.n	801a290 <xTaskIncrementTick+0xd8>
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a28c:	4a26      	ldr	r2, [pc, #152]	; (801a328 <xTaskIncrementTick+0x170>)
 801a28e:	6013      	str	r3, [r2, #0]
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a294:	4613      	mov	r3, r2
 801a296:	009b      	lsls	r3, r3, #2
 801a298:	4413      	add	r3, r2
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	4a23      	ldr	r2, [pc, #140]	; (801a32c <xTaskIncrementTick+0x174>)
 801a29e:	441a      	add	r2, r3
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	3304      	adds	r3, #4
 801a2a4:	4619      	mov	r1, r3
 801a2a6:	4610      	mov	r0, r2
 801a2a8:	f7fe fd95 	bl	8018dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2b0:	4b1f      	ldr	r3, [pc, #124]	; (801a330 <xTaskIncrementTick+0x178>)
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d3b8      	bcc.n	801a22c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a2ba:	2301      	movs	r3, #1
 801a2bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a2be:	e7b5      	b.n	801a22c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a2c0:	4b1b      	ldr	r3, [pc, #108]	; (801a330 <xTaskIncrementTick+0x178>)
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2c6:	4919      	ldr	r1, [pc, #100]	; (801a32c <xTaskIncrementTick+0x174>)
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	009b      	lsls	r3, r3, #2
 801a2cc:	4413      	add	r3, r2
 801a2ce:	009b      	lsls	r3, r3, #2
 801a2d0:	440b      	add	r3, r1
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	2b01      	cmp	r3, #1
 801a2d6:	d901      	bls.n	801a2dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a2d8:	2301      	movs	r3, #1
 801a2da:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801a2dc:	4b15      	ldr	r3, [pc, #84]	; (801a334 <xTaskIncrementTick+0x17c>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d101      	bne.n	801a2e8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801a2e4:	f7e8 f860 	bl	80023a8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a2e8:	4b13      	ldr	r3, [pc, #76]	; (801a338 <xTaskIncrementTick+0x180>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d009      	beq.n	801a304 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801a2f0:	2301      	movs	r3, #1
 801a2f2:	617b      	str	r3, [r7, #20]
 801a2f4:	e006      	b.n	801a304 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a2f6:	4b0f      	ldr	r3, [pc, #60]	; (801a334 <xTaskIncrementTick+0x17c>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	4a0d      	ldr	r2, [pc, #52]	; (801a334 <xTaskIncrementTick+0x17c>)
 801a2fe:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801a300:	f7e8 f852 	bl	80023a8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801a304:	697b      	ldr	r3, [r7, #20]
}
 801a306:	4618      	mov	r0, r3
 801a308:	3718      	adds	r7, #24
 801a30a:	46bd      	mov	sp, r7
 801a30c:	bd80      	pop	{r7, pc}
 801a30e:	bf00      	nop
 801a310:	24003308 	.word	0x24003308
 801a314:	240032e4 	.word	0x240032e4
 801a318:	24003298 	.word	0x24003298
 801a31c:	2400329c 	.word	0x2400329c
 801a320:	240032f8 	.word	0x240032f8
 801a324:	24003300 	.word	0x24003300
 801a328:	240032e8 	.word	0x240032e8
 801a32c:	24002e10 	.word	0x24002e10
 801a330:	24002e0c 	.word	0x24002e0c
 801a334:	240032f0 	.word	0x240032f0
 801a338:	240032f4 	.word	0x240032f4

0801a33c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b084      	sub	sp, #16
 801a340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a342:	4b2f      	ldr	r3, [pc, #188]	; (801a400 <vTaskSwitchContext+0xc4>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d003      	beq.n	801a352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a34a:	4b2e      	ldr	r3, [pc, #184]	; (801a404 <vTaskSwitchContext+0xc8>)
 801a34c:	2201      	movs	r2, #1
 801a34e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a350:	e052      	b.n	801a3f8 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801a352:	4b2c      	ldr	r3, [pc, #176]	; (801a404 <vTaskSwitchContext+0xc8>)
 801a354:	2200      	movs	r2, #0
 801a356:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801a358:	4b2b      	ldr	r3, [pc, #172]	; (801a408 <vTaskSwitchContext+0xcc>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	681a      	ldr	r2, [r3, #0]
 801a35e:	4b2a      	ldr	r3, [pc, #168]	; (801a408 <vTaskSwitchContext+0xcc>)
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a364:	429a      	cmp	r2, r3
 801a366:	d808      	bhi.n	801a37a <vTaskSwitchContext+0x3e>
 801a368:	4b27      	ldr	r3, [pc, #156]	; (801a408 <vTaskSwitchContext+0xcc>)
 801a36a:	681a      	ldr	r2, [r3, #0]
 801a36c:	4b26      	ldr	r3, [pc, #152]	; (801a408 <vTaskSwitchContext+0xcc>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	3334      	adds	r3, #52	; 0x34
 801a372:	4619      	mov	r1, r3
 801a374:	4610      	mov	r0, r2
 801a376:	f7e8 f825 	bl	80023c4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a37a:	4b24      	ldr	r3, [pc, #144]	; (801a40c <vTaskSwitchContext+0xd0>)
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	60fb      	str	r3, [r7, #12]
 801a380:	e010      	b.n	801a3a4 <vTaskSwitchContext+0x68>
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d10a      	bne.n	801a39e <vTaskSwitchContext+0x62>
	__asm volatile
 801a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a38c:	f383 8811 	msr	BASEPRI, r3
 801a390:	f3bf 8f6f 	isb	sy
 801a394:	f3bf 8f4f 	dsb	sy
 801a398:	607b      	str	r3, [r7, #4]
}
 801a39a:	bf00      	nop
 801a39c:	e7fe      	b.n	801a39c <vTaskSwitchContext+0x60>
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	3b01      	subs	r3, #1
 801a3a2:	60fb      	str	r3, [r7, #12]
 801a3a4:	491a      	ldr	r1, [pc, #104]	; (801a410 <vTaskSwitchContext+0xd4>)
 801a3a6:	68fa      	ldr	r2, [r7, #12]
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4413      	add	r3, r2
 801a3ae:	009b      	lsls	r3, r3, #2
 801a3b0:	440b      	add	r3, r1
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d0e4      	beq.n	801a382 <vTaskSwitchContext+0x46>
 801a3b8:	68fa      	ldr	r2, [r7, #12]
 801a3ba:	4613      	mov	r3, r2
 801a3bc:	009b      	lsls	r3, r3, #2
 801a3be:	4413      	add	r3, r2
 801a3c0:	009b      	lsls	r3, r3, #2
 801a3c2:	4a13      	ldr	r2, [pc, #76]	; (801a410 <vTaskSwitchContext+0xd4>)
 801a3c4:	4413      	add	r3, r2
 801a3c6:	60bb      	str	r3, [r7, #8]
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	685a      	ldr	r2, [r3, #4]
 801a3ce:	68bb      	ldr	r3, [r7, #8]
 801a3d0:	605a      	str	r2, [r3, #4]
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	685a      	ldr	r2, [r3, #4]
 801a3d6:	68bb      	ldr	r3, [r7, #8]
 801a3d8:	3308      	adds	r3, #8
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	d104      	bne.n	801a3e8 <vTaskSwitchContext+0xac>
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	685a      	ldr	r2, [r3, #4]
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	605a      	str	r2, [r3, #4]
 801a3e8:	68bb      	ldr	r3, [r7, #8]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	68db      	ldr	r3, [r3, #12]
 801a3ee:	4a06      	ldr	r2, [pc, #24]	; (801a408 <vTaskSwitchContext+0xcc>)
 801a3f0:	6013      	str	r3, [r2, #0]
 801a3f2:	4a06      	ldr	r2, [pc, #24]	; (801a40c <vTaskSwitchContext+0xd0>)
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	6013      	str	r3, [r2, #0]
}
 801a3f8:	bf00      	nop
 801a3fa:	3710      	adds	r7, #16
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}
 801a400:	24003308 	.word	0x24003308
 801a404:	240032f4 	.word	0x240032f4
 801a408:	24002e0c 	.word	0x24002e0c
 801a40c:	240032e8 	.word	0x240032e8
 801a410:	24002e10 	.word	0x24002e10

0801a414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b084      	sub	sp, #16
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
 801a41c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d10a      	bne.n	801a43a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a428:	f383 8811 	msr	BASEPRI, r3
 801a42c:	f3bf 8f6f 	isb	sy
 801a430:	f3bf 8f4f 	dsb	sy
 801a434:	60fb      	str	r3, [r7, #12]
}
 801a436:	bf00      	nop
 801a438:	e7fe      	b.n	801a438 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a43a:	4b07      	ldr	r3, [pc, #28]	; (801a458 <vTaskPlaceOnEventList+0x44>)
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	3318      	adds	r3, #24
 801a440:	4619      	mov	r1, r3
 801a442:	6878      	ldr	r0, [r7, #4]
 801a444:	f7fe fceb 	bl	8018e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a448:	2101      	movs	r1, #1
 801a44a:	6838      	ldr	r0, [r7, #0]
 801a44c:	f000 fb32 	bl	801aab4 <prvAddCurrentTaskToDelayedList>
}
 801a450:	bf00      	nop
 801a452:	3710      	adds	r7, #16
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}
 801a458:	24002e0c 	.word	0x24002e0c

0801a45c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b086      	sub	sp, #24
 801a460:	af00      	add	r7, sp, #0
 801a462:	60f8      	str	r0, [r7, #12]
 801a464:	60b9      	str	r1, [r7, #8]
 801a466:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d10a      	bne.n	801a484 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a472:	f383 8811 	msr	BASEPRI, r3
 801a476:	f3bf 8f6f 	isb	sy
 801a47a:	f3bf 8f4f 	dsb	sy
 801a47e:	617b      	str	r3, [r7, #20]
}
 801a480:	bf00      	nop
 801a482:	e7fe      	b.n	801a482 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801a484:	4b11      	ldr	r3, [pc, #68]	; (801a4cc <vTaskPlaceOnUnorderedEventList+0x70>)
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d10a      	bne.n	801a4a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a490:	f383 8811 	msr	BASEPRI, r3
 801a494:	f3bf 8f6f 	isb	sy
 801a498:	f3bf 8f4f 	dsb	sy
 801a49c:	613b      	str	r3, [r7, #16]
}
 801a49e:	bf00      	nop
 801a4a0:	e7fe      	b.n	801a4a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a4a2:	4b0b      	ldr	r3, [pc, #44]	; (801a4d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	68ba      	ldr	r2, [r7, #8]
 801a4a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801a4ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a4ae:	4b08      	ldr	r3, [pc, #32]	; (801a4d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	3318      	adds	r3, #24
 801a4b4:	4619      	mov	r1, r3
 801a4b6:	68f8      	ldr	r0, [r7, #12]
 801a4b8:	f7fe fc8d 	bl	8018dd6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a4bc:	2101      	movs	r1, #1
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f000 faf8 	bl	801aab4 <prvAddCurrentTaskToDelayedList>
}
 801a4c4:	bf00      	nop
 801a4c6:	3718      	adds	r7, #24
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	24003308 	.word	0x24003308
 801a4d0:	24002e0c 	.word	0x24002e0c

0801a4d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b086      	sub	sp, #24
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	60f8      	str	r0, [r7, #12]
 801a4dc:	60b9      	str	r1, [r7, #8]
 801a4de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d10a      	bne.n	801a4fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4ea:	f383 8811 	msr	BASEPRI, r3
 801a4ee:	f3bf 8f6f 	isb	sy
 801a4f2:	f3bf 8f4f 	dsb	sy
 801a4f6:	617b      	str	r3, [r7, #20]
}
 801a4f8:	bf00      	nop
 801a4fa:	e7fe      	b.n	801a4fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a4fc:	4b0a      	ldr	r3, [pc, #40]	; (801a528 <vTaskPlaceOnEventListRestricted+0x54>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	3318      	adds	r3, #24
 801a502:	4619      	mov	r1, r3
 801a504:	68f8      	ldr	r0, [r7, #12]
 801a506:	f7fe fc66 	bl	8018dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d002      	beq.n	801a516 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a514:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a516:	6879      	ldr	r1, [r7, #4]
 801a518:	68b8      	ldr	r0, [r7, #8]
 801a51a:	f000 facb 	bl	801aab4 <prvAddCurrentTaskToDelayedList>
	}
 801a51e:	bf00      	nop
 801a520:	3718      	adds	r7, #24
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}
 801a526:	bf00      	nop
 801a528:	24002e0c 	.word	0x24002e0c

0801a52c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b086      	sub	sp, #24
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	68db      	ldr	r3, [r3, #12]
 801a538:	68db      	ldr	r3, [r3, #12]
 801a53a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a53c:	693b      	ldr	r3, [r7, #16]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d10a      	bne.n	801a558 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a546:	f383 8811 	msr	BASEPRI, r3
 801a54a:	f3bf 8f6f 	isb	sy
 801a54e:	f3bf 8f4f 	dsb	sy
 801a552:	60fb      	str	r3, [r7, #12]
}
 801a554:	bf00      	nop
 801a556:	e7fe      	b.n	801a556 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a558:	693b      	ldr	r3, [r7, #16]
 801a55a:	3318      	adds	r3, #24
 801a55c:	4618      	mov	r0, r3
 801a55e:	f7fe fc97 	bl	8018e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a562:	4b1e      	ldr	r3, [pc, #120]	; (801a5dc <xTaskRemoveFromEventList+0xb0>)
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d11d      	bne.n	801a5a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a56a:	693b      	ldr	r3, [r7, #16]
 801a56c:	3304      	adds	r3, #4
 801a56e:	4618      	mov	r0, r3
 801a570:	f7fe fc8e 	bl	8018e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a574:	693b      	ldr	r3, [r7, #16]
 801a576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a578:	4b19      	ldr	r3, [pc, #100]	; (801a5e0 <xTaskRemoveFromEventList+0xb4>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d903      	bls.n	801a588 <xTaskRemoveFromEventList+0x5c>
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a584:	4a16      	ldr	r2, [pc, #88]	; (801a5e0 <xTaskRemoveFromEventList+0xb4>)
 801a586:	6013      	str	r3, [r2, #0]
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a58c:	4613      	mov	r3, r2
 801a58e:	009b      	lsls	r3, r3, #2
 801a590:	4413      	add	r3, r2
 801a592:	009b      	lsls	r3, r3, #2
 801a594:	4a13      	ldr	r2, [pc, #76]	; (801a5e4 <xTaskRemoveFromEventList+0xb8>)
 801a596:	441a      	add	r2, r3
 801a598:	693b      	ldr	r3, [r7, #16]
 801a59a:	3304      	adds	r3, #4
 801a59c:	4619      	mov	r1, r3
 801a59e:	4610      	mov	r0, r2
 801a5a0:	f7fe fc19 	bl	8018dd6 <vListInsertEnd>
 801a5a4:	e005      	b.n	801a5b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a5a6:	693b      	ldr	r3, [r7, #16]
 801a5a8:	3318      	adds	r3, #24
 801a5aa:	4619      	mov	r1, r3
 801a5ac:	480e      	ldr	r0, [pc, #56]	; (801a5e8 <xTaskRemoveFromEventList+0xbc>)
 801a5ae:	f7fe fc12 	bl	8018dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a5b2:	693b      	ldr	r3, [r7, #16]
 801a5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5b6:	4b0d      	ldr	r3, [pc, #52]	; (801a5ec <xTaskRemoveFromEventList+0xc0>)
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5bc:	429a      	cmp	r2, r3
 801a5be:	d905      	bls.n	801a5cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a5c4:	4b0a      	ldr	r3, [pc, #40]	; (801a5f0 <xTaskRemoveFromEventList+0xc4>)
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	601a      	str	r2, [r3, #0]
 801a5ca:	e001      	b.n	801a5d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a5d0:	697b      	ldr	r3, [r7, #20]
}
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	3718      	adds	r7, #24
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	bd80      	pop	{r7, pc}
 801a5da:	bf00      	nop
 801a5dc:	24003308 	.word	0x24003308
 801a5e0:	240032e8 	.word	0x240032e8
 801a5e4:	24002e10 	.word	0x24002e10
 801a5e8:	240032a0 	.word	0x240032a0
 801a5ec:	24002e0c 	.word	0x24002e0c
 801a5f0:	240032f4 	.word	0x240032f4

0801a5f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b086      	sub	sp, #24
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
 801a5fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801a5fe:	4b29      	ldr	r3, [pc, #164]	; (801a6a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d10a      	bne.n	801a61c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a60a:	f383 8811 	msr	BASEPRI, r3
 801a60e:	f3bf 8f6f 	isb	sy
 801a612:	f3bf 8f4f 	dsb	sy
 801a616:	613b      	str	r3, [r7, #16]
}
 801a618:	bf00      	nop
 801a61a:	e7fe      	b.n	801a61a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a61c:	683b      	ldr	r3, [r7, #0]
 801a61e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	68db      	ldr	r3, [r3, #12]
 801a62a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d10a      	bne.n	801a648 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a636:	f383 8811 	msr	BASEPRI, r3
 801a63a:	f3bf 8f6f 	isb	sy
 801a63e:	f3bf 8f4f 	dsb	sy
 801a642:	60fb      	str	r3, [r7, #12]
}
 801a644:	bf00      	nop
 801a646:	e7fe      	b.n	801a646 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801a648:	6878      	ldr	r0, [r7, #4]
 801a64a:	f7fe fc21 	bl	8018e90 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a64e:	697b      	ldr	r3, [r7, #20]
 801a650:	3304      	adds	r3, #4
 801a652:	4618      	mov	r0, r3
 801a654:	f7fe fc1c 	bl	8018e90 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801a658:	697b      	ldr	r3, [r7, #20]
 801a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a65c:	4b12      	ldr	r3, [pc, #72]	; (801a6a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	429a      	cmp	r2, r3
 801a662:	d903      	bls.n	801a66c <vTaskRemoveFromUnorderedEventList+0x78>
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a668:	4a0f      	ldr	r2, [pc, #60]	; (801a6a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a66a:	6013      	str	r3, [r2, #0]
 801a66c:	697b      	ldr	r3, [r7, #20]
 801a66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a670:	4613      	mov	r3, r2
 801a672:	009b      	lsls	r3, r3, #2
 801a674:	4413      	add	r3, r2
 801a676:	009b      	lsls	r3, r3, #2
 801a678:	4a0c      	ldr	r2, [pc, #48]	; (801a6ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 801a67a:	441a      	add	r2, r3
 801a67c:	697b      	ldr	r3, [r7, #20]
 801a67e:	3304      	adds	r3, #4
 801a680:	4619      	mov	r1, r3
 801a682:	4610      	mov	r0, r2
 801a684:	f7fe fba7 	bl	8018dd6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a688:	697b      	ldr	r3, [r7, #20]
 801a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a68c:	4b08      	ldr	r3, [pc, #32]	; (801a6b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a692:	429a      	cmp	r2, r3
 801a694:	d902      	bls.n	801a69c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801a696:	4b07      	ldr	r3, [pc, #28]	; (801a6b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801a698:	2201      	movs	r2, #1
 801a69a:	601a      	str	r2, [r3, #0]
	}
}
 801a69c:	bf00      	nop
 801a69e:	3718      	adds	r7, #24
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bd80      	pop	{r7, pc}
 801a6a4:	24003308 	.word	0x24003308
 801a6a8:	240032e8 	.word	0x240032e8
 801a6ac:	24002e10 	.word	0x24002e10
 801a6b0:	24002e0c 	.word	0x24002e0c
 801a6b4:	240032f4 	.word	0x240032f4

0801a6b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a6b8:	b480      	push	{r7}
 801a6ba:	b083      	sub	sp, #12
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a6c0:	4b06      	ldr	r3, [pc, #24]	; (801a6dc <vTaskInternalSetTimeOutState+0x24>)
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a6c8:	4b05      	ldr	r3, [pc, #20]	; (801a6e0 <vTaskInternalSetTimeOutState+0x28>)
 801a6ca:	681a      	ldr	r2, [r3, #0]
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	605a      	str	r2, [r3, #4]
}
 801a6d0:	bf00      	nop
 801a6d2:	370c      	adds	r7, #12
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6da:	4770      	bx	lr
 801a6dc:	240032f8 	.word	0x240032f8
 801a6e0:	240032e4 	.word	0x240032e4

0801a6e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b088      	sub	sp, #32
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
 801a6ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d10a      	bne.n	801a70a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6f8:	f383 8811 	msr	BASEPRI, r3
 801a6fc:	f3bf 8f6f 	isb	sy
 801a700:	f3bf 8f4f 	dsb	sy
 801a704:	613b      	str	r3, [r7, #16]
}
 801a706:	bf00      	nop
 801a708:	e7fe      	b.n	801a708 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d10a      	bne.n	801a726 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a714:	f383 8811 	msr	BASEPRI, r3
 801a718:	f3bf 8f6f 	isb	sy
 801a71c:	f3bf 8f4f 	dsb	sy
 801a720:	60fb      	str	r3, [r7, #12]
}
 801a722:	bf00      	nop
 801a724:	e7fe      	b.n	801a724 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a726:	f000 feb5 	bl	801b494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a72a:	4b1d      	ldr	r3, [pc, #116]	; (801a7a0 <xTaskCheckForTimeOut+0xbc>)
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	685b      	ldr	r3, [r3, #4]
 801a734:	69ba      	ldr	r2, [r7, #24]
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a742:	d102      	bne.n	801a74a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a744:	2300      	movs	r3, #0
 801a746:	61fb      	str	r3, [r7, #28]
 801a748:	e023      	b.n	801a792 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	681a      	ldr	r2, [r3, #0]
 801a74e:	4b15      	ldr	r3, [pc, #84]	; (801a7a4 <xTaskCheckForTimeOut+0xc0>)
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	429a      	cmp	r2, r3
 801a754:	d007      	beq.n	801a766 <xTaskCheckForTimeOut+0x82>
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	685b      	ldr	r3, [r3, #4]
 801a75a:	69ba      	ldr	r2, [r7, #24]
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d302      	bcc.n	801a766 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a760:	2301      	movs	r3, #1
 801a762:	61fb      	str	r3, [r7, #28]
 801a764:	e015      	b.n	801a792 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	697a      	ldr	r2, [r7, #20]
 801a76c:	429a      	cmp	r2, r3
 801a76e:	d20b      	bcs.n	801a788 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	681a      	ldr	r2, [r3, #0]
 801a774:	697b      	ldr	r3, [r7, #20]
 801a776:	1ad2      	subs	r2, r2, r3
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a77c:	6878      	ldr	r0, [r7, #4]
 801a77e:	f7ff ff9b 	bl	801a6b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a782:	2300      	movs	r3, #0
 801a784:	61fb      	str	r3, [r7, #28]
 801a786:	e004      	b.n	801a792 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	2200      	movs	r2, #0
 801a78c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a78e:	2301      	movs	r3, #1
 801a790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a792:	f000 feaf 	bl	801b4f4 <vPortExitCritical>

	return xReturn;
 801a796:	69fb      	ldr	r3, [r7, #28]
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3720      	adds	r7, #32
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	240032e4 	.word	0x240032e4
 801a7a4:	240032f8 	.word	0x240032f8

0801a7a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a7a8:	b480      	push	{r7}
 801a7aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a7ac:	4b03      	ldr	r3, [pc, #12]	; (801a7bc <vTaskMissedYield+0x14>)
 801a7ae:	2201      	movs	r2, #1
 801a7b0:	601a      	str	r2, [r3, #0]
}
 801a7b2:	bf00      	nop
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr
 801a7bc:	240032f4 	.word	0x240032f4

0801a7c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b082      	sub	sp, #8
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a7c8:	f000 f852 	bl	801a870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a7cc:	4b06      	ldr	r3, [pc, #24]	; (801a7e8 <prvIdleTask+0x28>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	2b01      	cmp	r3, #1
 801a7d2:	d9f9      	bls.n	801a7c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a7d4:	4b05      	ldr	r3, [pc, #20]	; (801a7ec <prvIdleTask+0x2c>)
 801a7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7da:	601a      	str	r2, [r3, #0]
 801a7dc:	f3bf 8f4f 	dsb	sy
 801a7e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a7e4:	e7f0      	b.n	801a7c8 <prvIdleTask+0x8>
 801a7e6:	bf00      	nop
 801a7e8:	24002e10 	.word	0x24002e10
 801a7ec:	e000ed04 	.word	0xe000ed04

0801a7f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	607b      	str	r3, [r7, #4]
 801a7fa:	e00c      	b.n	801a816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a7fc:	687a      	ldr	r2, [r7, #4]
 801a7fe:	4613      	mov	r3, r2
 801a800:	009b      	lsls	r3, r3, #2
 801a802:	4413      	add	r3, r2
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	4a12      	ldr	r2, [pc, #72]	; (801a850 <prvInitialiseTaskLists+0x60>)
 801a808:	4413      	add	r3, r2
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7fe fab6 	bl	8018d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	3301      	adds	r3, #1
 801a814:	607b      	str	r3, [r7, #4]
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	2b37      	cmp	r3, #55	; 0x37
 801a81a:	d9ef      	bls.n	801a7fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a81c:	480d      	ldr	r0, [pc, #52]	; (801a854 <prvInitialiseTaskLists+0x64>)
 801a81e:	f7fe faad 	bl	8018d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a822:	480d      	ldr	r0, [pc, #52]	; (801a858 <prvInitialiseTaskLists+0x68>)
 801a824:	f7fe faaa 	bl	8018d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a828:	480c      	ldr	r0, [pc, #48]	; (801a85c <prvInitialiseTaskLists+0x6c>)
 801a82a:	f7fe faa7 	bl	8018d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a82e:	480c      	ldr	r0, [pc, #48]	; (801a860 <prvInitialiseTaskLists+0x70>)
 801a830:	f7fe faa4 	bl	8018d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a834:	480b      	ldr	r0, [pc, #44]	; (801a864 <prvInitialiseTaskLists+0x74>)
 801a836:	f7fe faa1 	bl	8018d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a83a:	4b0b      	ldr	r3, [pc, #44]	; (801a868 <prvInitialiseTaskLists+0x78>)
 801a83c:	4a05      	ldr	r2, [pc, #20]	; (801a854 <prvInitialiseTaskLists+0x64>)
 801a83e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a840:	4b0a      	ldr	r3, [pc, #40]	; (801a86c <prvInitialiseTaskLists+0x7c>)
 801a842:	4a05      	ldr	r2, [pc, #20]	; (801a858 <prvInitialiseTaskLists+0x68>)
 801a844:	601a      	str	r2, [r3, #0]
}
 801a846:	bf00      	nop
 801a848:	3708      	adds	r7, #8
 801a84a:	46bd      	mov	sp, r7
 801a84c:	bd80      	pop	{r7, pc}
 801a84e:	bf00      	nop
 801a850:	24002e10 	.word	0x24002e10
 801a854:	24003270 	.word	0x24003270
 801a858:	24003284 	.word	0x24003284
 801a85c:	240032a0 	.word	0x240032a0
 801a860:	240032b4 	.word	0x240032b4
 801a864:	240032cc 	.word	0x240032cc
 801a868:	24003298 	.word	0x24003298
 801a86c:	2400329c 	.word	0x2400329c

0801a870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b082      	sub	sp, #8
 801a874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a876:	e019      	b.n	801a8ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a878:	f000 fe0c 	bl	801b494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a87c:	4b10      	ldr	r3, [pc, #64]	; (801a8c0 <prvCheckTasksWaitingTermination+0x50>)
 801a87e:	68db      	ldr	r3, [r3, #12]
 801a880:	68db      	ldr	r3, [r3, #12]
 801a882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	3304      	adds	r3, #4
 801a888:	4618      	mov	r0, r3
 801a88a:	f7fe fb01 	bl	8018e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a88e:	4b0d      	ldr	r3, [pc, #52]	; (801a8c4 <prvCheckTasksWaitingTermination+0x54>)
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	3b01      	subs	r3, #1
 801a894:	4a0b      	ldr	r2, [pc, #44]	; (801a8c4 <prvCheckTasksWaitingTermination+0x54>)
 801a896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a898:	4b0b      	ldr	r3, [pc, #44]	; (801a8c8 <prvCheckTasksWaitingTermination+0x58>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	3b01      	subs	r3, #1
 801a89e:	4a0a      	ldr	r2, [pc, #40]	; (801a8c8 <prvCheckTasksWaitingTermination+0x58>)
 801a8a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a8a2:	f000 fe27 	bl	801b4f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a8a6:	6878      	ldr	r0, [r7, #4]
 801a8a8:	f000 f810 	bl	801a8cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a8ac:	4b06      	ldr	r3, [pc, #24]	; (801a8c8 <prvCheckTasksWaitingTermination+0x58>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d1e1      	bne.n	801a878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a8b4:	bf00      	nop
 801a8b6:	bf00      	nop
 801a8b8:	3708      	adds	r7, #8
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}
 801a8be:	bf00      	nop
 801a8c0:	240032b4 	.word	0x240032b4
 801a8c4:	240032e0 	.word	0x240032e0
 801a8c8:	240032c8 	.word	0x240032c8

0801a8cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b084      	sub	sp, #16
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d108      	bne.n	801a8f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f000 ffc4 	bl	801b870 <vPortFree>
				vPortFree( pxTCB );
 801a8e8:	6878      	ldr	r0, [r7, #4]
 801a8ea:	f000 ffc1 	bl	801b870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a8ee:	e018      	b.n	801a922 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d103      	bne.n	801a902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f000 ffb8 	bl	801b870 <vPortFree>
	}
 801a900:	e00f      	b.n	801a922 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a908:	2b02      	cmp	r3, #2
 801a90a:	d00a      	beq.n	801a922 <prvDeleteTCB+0x56>
	__asm volatile
 801a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a910:	f383 8811 	msr	BASEPRI, r3
 801a914:	f3bf 8f6f 	isb	sy
 801a918:	f3bf 8f4f 	dsb	sy
 801a91c:	60fb      	str	r3, [r7, #12]
}
 801a91e:	bf00      	nop
 801a920:	e7fe      	b.n	801a920 <prvDeleteTCB+0x54>
	}
 801a922:	bf00      	nop
 801a924:	3710      	adds	r7, #16
 801a926:	46bd      	mov	sp, r7
 801a928:	bd80      	pop	{r7, pc}
	...

0801a92c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a92c:	b480      	push	{r7}
 801a92e:	b083      	sub	sp, #12
 801a930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a932:	4b0c      	ldr	r3, [pc, #48]	; (801a964 <prvResetNextTaskUnblockTime+0x38>)
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d104      	bne.n	801a946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a93c:	4b0a      	ldr	r3, [pc, #40]	; (801a968 <prvResetNextTaskUnblockTime+0x3c>)
 801a93e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a944:	e008      	b.n	801a958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a946:	4b07      	ldr	r3, [pc, #28]	; (801a964 <prvResetNextTaskUnblockTime+0x38>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	68db      	ldr	r3, [r3, #12]
 801a94c:	68db      	ldr	r3, [r3, #12]
 801a94e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	685b      	ldr	r3, [r3, #4]
 801a954:	4a04      	ldr	r2, [pc, #16]	; (801a968 <prvResetNextTaskUnblockTime+0x3c>)
 801a956:	6013      	str	r3, [r2, #0]
}
 801a958:	bf00      	nop
 801a95a:	370c      	adds	r7, #12
 801a95c:	46bd      	mov	sp, r7
 801a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a962:	4770      	bx	lr
 801a964:	24003298 	.word	0x24003298
 801a968:	24003300 	.word	0x24003300

0801a96c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a96c:	b480      	push	{r7}
 801a96e:	b083      	sub	sp, #12
 801a970:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a972:	4b0b      	ldr	r3, [pc, #44]	; (801a9a0 <xTaskGetSchedulerState+0x34>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d102      	bne.n	801a980 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a97a:	2301      	movs	r3, #1
 801a97c:	607b      	str	r3, [r7, #4]
 801a97e:	e008      	b.n	801a992 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a980:	4b08      	ldr	r3, [pc, #32]	; (801a9a4 <xTaskGetSchedulerState+0x38>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d102      	bne.n	801a98e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a988:	2302      	movs	r3, #2
 801a98a:	607b      	str	r3, [r7, #4]
 801a98c:	e001      	b.n	801a992 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a98e:	2300      	movs	r3, #0
 801a990:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a992:	687b      	ldr	r3, [r7, #4]
	}
 801a994:	4618      	mov	r0, r3
 801a996:	370c      	adds	r7, #12
 801a998:	46bd      	mov	sp, r7
 801a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99e:	4770      	bx	lr
 801a9a0:	240032ec 	.word	0x240032ec
 801a9a4:	24003308 	.word	0x24003308

0801a9a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b086      	sub	sp, #24
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d056      	beq.n	801aa6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a9be:	4b2e      	ldr	r3, [pc, #184]	; (801aa78 <xTaskPriorityDisinherit+0xd0>)
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	693a      	ldr	r2, [r7, #16]
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d00a      	beq.n	801a9de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9cc:	f383 8811 	msr	BASEPRI, r3
 801a9d0:	f3bf 8f6f 	isb	sy
 801a9d4:	f3bf 8f4f 	dsb	sy
 801a9d8:	60fb      	str	r3, [r7, #12]
}
 801a9da:	bf00      	nop
 801a9dc:	e7fe      	b.n	801a9dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d10a      	bne.n	801a9fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9ea:	f383 8811 	msr	BASEPRI, r3
 801a9ee:	f3bf 8f6f 	isb	sy
 801a9f2:	f3bf 8f4f 	dsb	sy
 801a9f6:	60bb      	str	r3, [r7, #8]
}
 801a9f8:	bf00      	nop
 801a9fa:	e7fe      	b.n	801a9fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801a9fc:	693b      	ldr	r3, [r7, #16]
 801a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa00:	1e5a      	subs	r2, r3, #1
 801aa02:	693b      	ldr	r3, [r7, #16]
 801aa04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801aa06:	693b      	ldr	r3, [r7, #16]
 801aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa0a:	693b      	ldr	r3, [r7, #16]
 801aa0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d02c      	beq.n	801aa6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801aa12:	693b      	ldr	r3, [r7, #16]
 801aa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d128      	bne.n	801aa6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	3304      	adds	r3, #4
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7fe fa36 	bl	8018e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801aa24:	693b      	ldr	r3, [r7, #16]
 801aa26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aa28:	693b      	ldr	r3, [r7, #16]
 801aa2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa2c:	693b      	ldr	r3, [r7, #16]
 801aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801aa38:	693b      	ldr	r3, [r7, #16]
 801aa3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa3c:	4b0f      	ldr	r3, [pc, #60]	; (801aa7c <xTaskPriorityDisinherit+0xd4>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d903      	bls.n	801aa4c <xTaskPriorityDisinherit+0xa4>
 801aa44:	693b      	ldr	r3, [r7, #16]
 801aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa48:	4a0c      	ldr	r2, [pc, #48]	; (801aa7c <xTaskPriorityDisinherit+0xd4>)
 801aa4a:	6013      	str	r3, [r2, #0]
 801aa4c:	693b      	ldr	r3, [r7, #16]
 801aa4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa50:	4613      	mov	r3, r2
 801aa52:	009b      	lsls	r3, r3, #2
 801aa54:	4413      	add	r3, r2
 801aa56:	009b      	lsls	r3, r3, #2
 801aa58:	4a09      	ldr	r2, [pc, #36]	; (801aa80 <xTaskPriorityDisinherit+0xd8>)
 801aa5a:	441a      	add	r2, r3
 801aa5c:	693b      	ldr	r3, [r7, #16]
 801aa5e:	3304      	adds	r3, #4
 801aa60:	4619      	mov	r1, r3
 801aa62:	4610      	mov	r0, r2
 801aa64:	f7fe f9b7 	bl	8018dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801aa68:	2301      	movs	r3, #1
 801aa6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801aa6c:	697b      	ldr	r3, [r7, #20]
	}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	3718      	adds	r7, #24
 801aa72:	46bd      	mov	sp, r7
 801aa74:	bd80      	pop	{r7, pc}
 801aa76:	bf00      	nop
 801aa78:	24002e0c 	.word	0x24002e0c
 801aa7c:	240032e8 	.word	0x240032e8
 801aa80:	24002e10 	.word	0x24002e10

0801aa84 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801aa84:	b480      	push	{r7}
 801aa86:	b083      	sub	sp, #12
 801aa88:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801aa8a:	4b09      	ldr	r3, [pc, #36]	; (801aab0 <uxTaskResetEventItemValue+0x2c>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	699b      	ldr	r3, [r3, #24]
 801aa90:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa92:	4b07      	ldr	r3, [pc, #28]	; (801aab0 <uxTaskResetEventItemValue+0x2c>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa98:	4b05      	ldr	r3, [pc, #20]	; (801aab0 <uxTaskResetEventItemValue+0x2c>)
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801aaa0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801aaa2:	687b      	ldr	r3, [r7, #4]
}
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	370c      	adds	r7, #12
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaae:	4770      	bx	lr
 801aab0:	24002e0c 	.word	0x24002e0c

0801aab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b084      	sub	sp, #16
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	6078      	str	r0, [r7, #4]
 801aabc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801aabe:	4b21      	ldr	r3, [pc, #132]	; (801ab44 <prvAddCurrentTaskToDelayedList+0x90>)
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aac4:	4b20      	ldr	r3, [pc, #128]	; (801ab48 <prvAddCurrentTaskToDelayedList+0x94>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	3304      	adds	r3, #4
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7fe f9e0 	bl	8018e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aad6:	d10a      	bne.n	801aaee <prvAddCurrentTaskToDelayedList+0x3a>
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d007      	beq.n	801aaee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aade:	4b1a      	ldr	r3, [pc, #104]	; (801ab48 <prvAddCurrentTaskToDelayedList+0x94>)
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	3304      	adds	r3, #4
 801aae4:	4619      	mov	r1, r3
 801aae6:	4819      	ldr	r0, [pc, #100]	; (801ab4c <prvAddCurrentTaskToDelayedList+0x98>)
 801aae8:	f7fe f975 	bl	8018dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801aaec:	e026      	b.n	801ab3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801aaee:	68fa      	ldr	r2, [r7, #12]
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	4413      	add	r3, r2
 801aaf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801aaf6:	4b14      	ldr	r3, [pc, #80]	; (801ab48 <prvAddCurrentTaskToDelayedList+0x94>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	68ba      	ldr	r2, [r7, #8]
 801aafc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801aafe:	68ba      	ldr	r2, [r7, #8]
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	429a      	cmp	r2, r3
 801ab04:	d209      	bcs.n	801ab1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ab06:	4b12      	ldr	r3, [pc, #72]	; (801ab50 <prvAddCurrentTaskToDelayedList+0x9c>)
 801ab08:	681a      	ldr	r2, [r3, #0]
 801ab0a:	4b0f      	ldr	r3, [pc, #60]	; (801ab48 <prvAddCurrentTaskToDelayedList+0x94>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	3304      	adds	r3, #4
 801ab10:	4619      	mov	r1, r3
 801ab12:	4610      	mov	r0, r2
 801ab14:	f7fe f983 	bl	8018e1e <vListInsert>
}
 801ab18:	e010      	b.n	801ab3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ab1a:	4b0e      	ldr	r3, [pc, #56]	; (801ab54 <prvAddCurrentTaskToDelayedList+0xa0>)
 801ab1c:	681a      	ldr	r2, [r3, #0]
 801ab1e:	4b0a      	ldr	r3, [pc, #40]	; (801ab48 <prvAddCurrentTaskToDelayedList+0x94>)
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	3304      	adds	r3, #4
 801ab24:	4619      	mov	r1, r3
 801ab26:	4610      	mov	r0, r2
 801ab28:	f7fe f979 	bl	8018e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ab2c:	4b0a      	ldr	r3, [pc, #40]	; (801ab58 <prvAddCurrentTaskToDelayedList+0xa4>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	68ba      	ldr	r2, [r7, #8]
 801ab32:	429a      	cmp	r2, r3
 801ab34:	d202      	bcs.n	801ab3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801ab36:	4a08      	ldr	r2, [pc, #32]	; (801ab58 <prvAddCurrentTaskToDelayedList+0xa4>)
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	6013      	str	r3, [r2, #0]
}
 801ab3c:	bf00      	nop
 801ab3e:	3710      	adds	r7, #16
 801ab40:	46bd      	mov	sp, r7
 801ab42:	bd80      	pop	{r7, pc}
 801ab44:	240032e4 	.word	0x240032e4
 801ab48:	24002e0c 	.word	0x24002e0c
 801ab4c:	240032cc 	.word	0x240032cc
 801ab50:	2400329c 	.word	0x2400329c
 801ab54:	24003298 	.word	0x24003298
 801ab58:	24003300 	.word	0x24003300

0801ab5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b08a      	sub	sp, #40	; 0x28
 801ab60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801ab62:	2300      	movs	r3, #0
 801ab64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801ab66:	f000 fb07 	bl	801b178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801ab6a:	4b1c      	ldr	r3, [pc, #112]	; (801abdc <xTimerCreateTimerTask+0x80>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d021      	beq.n	801abb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801ab72:	2300      	movs	r3, #0
 801ab74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801ab76:	2300      	movs	r3, #0
 801ab78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801ab7a:	1d3a      	adds	r2, r7, #4
 801ab7c:	f107 0108 	add.w	r1, r7, #8
 801ab80:	f107 030c 	add.w	r3, r7, #12
 801ab84:	4618      	mov	r0, r3
 801ab86:	f7fd fe73 	bl	8018870 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ab8a:	6879      	ldr	r1, [r7, #4]
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	68fa      	ldr	r2, [r7, #12]
 801ab90:	9202      	str	r2, [sp, #8]
 801ab92:	9301      	str	r3, [sp, #4]
 801ab94:	2302      	movs	r3, #2
 801ab96:	9300      	str	r3, [sp, #0]
 801ab98:	2300      	movs	r3, #0
 801ab9a:	460a      	mov	r2, r1
 801ab9c:	4910      	ldr	r1, [pc, #64]	; (801abe0 <xTimerCreateTimerTask+0x84>)
 801ab9e:	4811      	ldr	r0, [pc, #68]	; (801abe4 <xTimerCreateTimerTask+0x88>)
 801aba0:	f7fe ff0c 	bl	80199bc <xTaskCreateStatic>
 801aba4:	4603      	mov	r3, r0
 801aba6:	4a10      	ldr	r2, [pc, #64]	; (801abe8 <xTimerCreateTimerTask+0x8c>)
 801aba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801abaa:	4b0f      	ldr	r3, [pc, #60]	; (801abe8 <xTimerCreateTimerTask+0x8c>)
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d001      	beq.n	801abb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801abb2:	2301      	movs	r3, #1
 801abb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d10a      	bne.n	801abd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abc0:	f383 8811 	msr	BASEPRI, r3
 801abc4:	f3bf 8f6f 	isb	sy
 801abc8:	f3bf 8f4f 	dsb	sy
 801abcc:	613b      	str	r3, [r7, #16]
}
 801abce:	bf00      	nop
 801abd0:	e7fe      	b.n	801abd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801abd2:	697b      	ldr	r3, [r7, #20]
}
 801abd4:	4618      	mov	r0, r3
 801abd6:	3718      	adds	r7, #24
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}
 801abdc:	2400333c 	.word	0x2400333c
 801abe0:	0801bbd4 	.word	0x0801bbd4
 801abe4:	0801ad21 	.word	0x0801ad21
 801abe8:	24003340 	.word	0x24003340

0801abec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b08a      	sub	sp, #40	; 0x28
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	60f8      	str	r0, [r7, #12]
 801abf4:	60b9      	str	r1, [r7, #8]
 801abf6:	607a      	str	r2, [r7, #4]
 801abf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801abfa:	2300      	movs	r3, #0
 801abfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d10a      	bne.n	801ac1a <xTimerGenericCommand+0x2e>
	__asm volatile
 801ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac08:	f383 8811 	msr	BASEPRI, r3
 801ac0c:	f3bf 8f6f 	isb	sy
 801ac10:	f3bf 8f4f 	dsb	sy
 801ac14:	623b      	str	r3, [r7, #32]
}
 801ac16:	bf00      	nop
 801ac18:	e7fe      	b.n	801ac18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801ac1a:	4b1a      	ldr	r3, [pc, #104]	; (801ac84 <xTimerGenericCommand+0x98>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d02a      	beq.n	801ac78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801ac22:	68bb      	ldr	r3, [r7, #8]
 801ac24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	2b05      	cmp	r3, #5
 801ac32:	dc18      	bgt.n	801ac66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801ac34:	f7ff fe9a 	bl	801a96c <xTaskGetSchedulerState>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	2b02      	cmp	r3, #2
 801ac3c:	d109      	bne.n	801ac52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801ac3e:	4b11      	ldr	r3, [pc, #68]	; (801ac84 <xTimerGenericCommand+0x98>)
 801ac40:	6818      	ldr	r0, [r3, #0]
 801ac42:	f107 0110 	add.w	r1, r7, #16
 801ac46:	2300      	movs	r3, #0
 801ac48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac4a:	f7fe fa4f 	bl	80190ec <xQueueGenericSend>
 801ac4e:	6278      	str	r0, [r7, #36]	; 0x24
 801ac50:	e012      	b.n	801ac78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801ac52:	4b0c      	ldr	r3, [pc, #48]	; (801ac84 <xTimerGenericCommand+0x98>)
 801ac54:	6818      	ldr	r0, [r3, #0]
 801ac56:	f107 0110 	add.w	r1, r7, #16
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	2200      	movs	r2, #0
 801ac5e:	f7fe fa45 	bl	80190ec <xQueueGenericSend>
 801ac62:	6278      	str	r0, [r7, #36]	; 0x24
 801ac64:	e008      	b.n	801ac78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801ac66:	4b07      	ldr	r3, [pc, #28]	; (801ac84 <xTimerGenericCommand+0x98>)
 801ac68:	6818      	ldr	r0, [r3, #0]
 801ac6a:	f107 0110 	add.w	r1, r7, #16
 801ac6e:	2300      	movs	r3, #0
 801ac70:	683a      	ldr	r2, [r7, #0]
 801ac72:	f7fe fb39 	bl	80192e8 <xQueueGenericSendFromISR>
 801ac76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	3728      	adds	r7, #40	; 0x28
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bd80      	pop	{r7, pc}
 801ac82:	bf00      	nop
 801ac84:	2400333c 	.word	0x2400333c

0801ac88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b088      	sub	sp, #32
 801ac8c:	af02      	add	r7, sp, #8
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac92:	4b22      	ldr	r3, [pc, #136]	; (801ad1c <prvProcessExpiredTimer+0x94>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	68db      	ldr	r3, [r3, #12]
 801ac98:	68db      	ldr	r3, [r3, #12]
 801ac9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	3304      	adds	r3, #4
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7fe f8f5 	bl	8018e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801acac:	f003 0304 	and.w	r3, r3, #4
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d022      	beq.n	801acfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801acb4:	697b      	ldr	r3, [r7, #20]
 801acb6:	699a      	ldr	r2, [r3, #24]
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	18d1      	adds	r1, r2, r3
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	683a      	ldr	r2, [r7, #0]
 801acc0:	6978      	ldr	r0, [r7, #20]
 801acc2:	f000 f8d1 	bl	801ae68 <prvInsertTimerInActiveList>
 801acc6:	4603      	mov	r3, r0
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d01f      	beq.n	801ad0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801accc:	2300      	movs	r3, #0
 801acce:	9300      	str	r3, [sp, #0]
 801acd0:	2300      	movs	r3, #0
 801acd2:	687a      	ldr	r2, [r7, #4]
 801acd4:	2100      	movs	r1, #0
 801acd6:	6978      	ldr	r0, [r7, #20]
 801acd8:	f7ff ff88 	bl	801abec <xTimerGenericCommand>
 801acdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801acde:	693b      	ldr	r3, [r7, #16]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d113      	bne.n	801ad0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ace8:	f383 8811 	msr	BASEPRI, r3
 801acec:	f3bf 8f6f 	isb	sy
 801acf0:	f3bf 8f4f 	dsb	sy
 801acf4:	60fb      	str	r3, [r7, #12]
}
 801acf6:	bf00      	nop
 801acf8:	e7fe      	b.n	801acf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad00:	f023 0301 	bic.w	r3, r3, #1
 801ad04:	b2da      	uxtb	r2, r3
 801ad06:	697b      	ldr	r3, [r7, #20]
 801ad08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ad0c:	697b      	ldr	r3, [r7, #20]
 801ad0e:	6a1b      	ldr	r3, [r3, #32]
 801ad10:	6978      	ldr	r0, [r7, #20]
 801ad12:	4798      	blx	r3
}
 801ad14:	bf00      	nop
 801ad16:	3718      	adds	r7, #24
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bd80      	pop	{r7, pc}
 801ad1c:	24003334 	.word	0x24003334

0801ad20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ad28:	f107 0308 	add.w	r3, r7, #8
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	f000 f857 	bl	801ade0 <prvGetNextExpireTime>
 801ad32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	4619      	mov	r1, r3
 801ad38:	68f8      	ldr	r0, [r7, #12]
 801ad3a:	f000 f803 	bl	801ad44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801ad3e:	f000 f8d5 	bl	801aeec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ad42:	e7f1      	b.n	801ad28 <prvTimerTask+0x8>

0801ad44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b084      	sub	sp, #16
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801ad4e:	f7ff f977 	bl	801a040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ad52:	f107 0308 	add.w	r3, r7, #8
 801ad56:	4618      	mov	r0, r3
 801ad58:	f000 f866 	bl	801ae28 <prvSampleTimeNow>
 801ad5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801ad5e:	68bb      	ldr	r3, [r7, #8]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d130      	bne.n	801adc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801ad64:	683b      	ldr	r3, [r7, #0]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d10a      	bne.n	801ad80 <prvProcessTimerOrBlockTask+0x3c>
 801ad6a:	687a      	ldr	r2, [r7, #4]
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	d806      	bhi.n	801ad80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801ad72:	f7ff f973 	bl	801a05c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801ad76:	68f9      	ldr	r1, [r7, #12]
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	f7ff ff85 	bl	801ac88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801ad7e:	e024      	b.n	801adca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d008      	beq.n	801ad98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801ad86:	4b13      	ldr	r3, [pc, #76]	; (801add4 <prvProcessTimerOrBlockTask+0x90>)
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d101      	bne.n	801ad94 <prvProcessTimerOrBlockTask+0x50>
 801ad90:	2301      	movs	r3, #1
 801ad92:	e000      	b.n	801ad96 <prvProcessTimerOrBlockTask+0x52>
 801ad94:	2300      	movs	r3, #0
 801ad96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801ad98:	4b0f      	ldr	r3, [pc, #60]	; (801add8 <prvProcessTimerOrBlockTask+0x94>)
 801ad9a:	6818      	ldr	r0, [r3, #0]
 801ad9c:	687a      	ldr	r2, [r7, #4]
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	1ad3      	subs	r3, r2, r3
 801ada2:	683a      	ldr	r2, [r7, #0]
 801ada4:	4619      	mov	r1, r3
 801ada6:	f7fe fdd5 	bl	8019954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801adaa:	f7ff f957 	bl	801a05c <xTaskResumeAll>
 801adae:	4603      	mov	r3, r0
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d10a      	bne.n	801adca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801adb4:	4b09      	ldr	r3, [pc, #36]	; (801addc <prvProcessTimerOrBlockTask+0x98>)
 801adb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801adba:	601a      	str	r2, [r3, #0]
 801adbc:	f3bf 8f4f 	dsb	sy
 801adc0:	f3bf 8f6f 	isb	sy
}
 801adc4:	e001      	b.n	801adca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801adc6:	f7ff f949 	bl	801a05c <xTaskResumeAll>
}
 801adca:	bf00      	nop
 801adcc:	3710      	adds	r7, #16
 801adce:	46bd      	mov	sp, r7
 801add0:	bd80      	pop	{r7, pc}
 801add2:	bf00      	nop
 801add4:	24003338 	.word	0x24003338
 801add8:	2400333c 	.word	0x2400333c
 801addc:	e000ed04 	.word	0xe000ed04

0801ade0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801ade0:	b480      	push	{r7}
 801ade2:	b085      	sub	sp, #20
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801ade8:	4b0e      	ldr	r3, [pc, #56]	; (801ae24 <prvGetNextExpireTime+0x44>)
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d101      	bne.n	801adf6 <prvGetNextExpireTime+0x16>
 801adf2:	2201      	movs	r2, #1
 801adf4:	e000      	b.n	801adf8 <prvGetNextExpireTime+0x18>
 801adf6:	2200      	movs	r2, #0
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d105      	bne.n	801ae10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ae04:	4b07      	ldr	r3, [pc, #28]	; (801ae24 <prvGetNextExpireTime+0x44>)
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	68db      	ldr	r3, [r3, #12]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	60fb      	str	r3, [r7, #12]
 801ae0e:	e001      	b.n	801ae14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801ae10:	2300      	movs	r3, #0
 801ae12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801ae14:	68fb      	ldr	r3, [r7, #12]
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	3714      	adds	r7, #20
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae20:	4770      	bx	lr
 801ae22:	bf00      	nop
 801ae24:	24003334 	.word	0x24003334

0801ae28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b084      	sub	sp, #16
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ae30:	f7ff f9b2 	bl	801a198 <xTaskGetTickCount>
 801ae34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801ae36:	4b0b      	ldr	r3, [pc, #44]	; (801ae64 <prvSampleTimeNow+0x3c>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	68fa      	ldr	r2, [r7, #12]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d205      	bcs.n	801ae4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801ae40:	f000 f936 	bl	801b0b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2201      	movs	r2, #1
 801ae48:	601a      	str	r2, [r3, #0]
 801ae4a:	e002      	b.n	801ae52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	2200      	movs	r2, #0
 801ae50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801ae52:	4a04      	ldr	r2, [pc, #16]	; (801ae64 <prvSampleTimeNow+0x3c>)
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801ae58:	68fb      	ldr	r3, [r7, #12]
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3710      	adds	r7, #16
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}
 801ae62:	bf00      	nop
 801ae64:	24003344 	.word	0x24003344

0801ae68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b086      	sub	sp, #24
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	60f8      	str	r0, [r7, #12]
 801ae70:	60b9      	str	r1, [r7, #8]
 801ae72:	607a      	str	r2, [r7, #4]
 801ae74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801ae76:	2300      	movs	r3, #0
 801ae78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	68ba      	ldr	r2, [r7, #8]
 801ae7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	68fa      	ldr	r2, [r7, #12]
 801ae84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801ae86:	68ba      	ldr	r2, [r7, #8]
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	429a      	cmp	r2, r3
 801ae8c:	d812      	bhi.n	801aeb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ae8e:	687a      	ldr	r2, [r7, #4]
 801ae90:	683b      	ldr	r3, [r7, #0]
 801ae92:	1ad2      	subs	r2, r2, r3
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	699b      	ldr	r3, [r3, #24]
 801ae98:	429a      	cmp	r2, r3
 801ae9a:	d302      	bcc.n	801aea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	617b      	str	r3, [r7, #20]
 801aea0:	e01b      	b.n	801aeda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801aea2:	4b10      	ldr	r3, [pc, #64]	; (801aee4 <prvInsertTimerInActiveList+0x7c>)
 801aea4:	681a      	ldr	r2, [r3, #0]
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	3304      	adds	r3, #4
 801aeaa:	4619      	mov	r1, r3
 801aeac:	4610      	mov	r0, r2
 801aeae:	f7fd ffb6 	bl	8018e1e <vListInsert>
 801aeb2:	e012      	b.n	801aeda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801aeb4:	687a      	ldr	r2, [r7, #4]
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d206      	bcs.n	801aeca <prvInsertTimerInActiveList+0x62>
 801aebc:	68ba      	ldr	r2, [r7, #8]
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	429a      	cmp	r2, r3
 801aec2:	d302      	bcc.n	801aeca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801aec4:	2301      	movs	r3, #1
 801aec6:	617b      	str	r3, [r7, #20]
 801aec8:	e007      	b.n	801aeda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801aeca:	4b07      	ldr	r3, [pc, #28]	; (801aee8 <prvInsertTimerInActiveList+0x80>)
 801aecc:	681a      	ldr	r2, [r3, #0]
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	3304      	adds	r3, #4
 801aed2:	4619      	mov	r1, r3
 801aed4:	4610      	mov	r0, r2
 801aed6:	f7fd ffa2 	bl	8018e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801aeda:	697b      	ldr	r3, [r7, #20]
}
 801aedc:	4618      	mov	r0, r3
 801aede:	3718      	adds	r7, #24
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}
 801aee4:	24003338 	.word	0x24003338
 801aee8:	24003334 	.word	0x24003334

0801aeec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b08e      	sub	sp, #56	; 0x38
 801aef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aef2:	e0ca      	b.n	801b08a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	da18      	bge.n	801af2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801aefa:	1d3b      	adds	r3, r7, #4
 801aefc:	3304      	adds	r3, #4
 801aefe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801af00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af02:	2b00      	cmp	r3, #0
 801af04:	d10a      	bne.n	801af1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 801af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af0a:	f383 8811 	msr	BASEPRI, r3
 801af0e:	f3bf 8f6f 	isb	sy
 801af12:	f3bf 8f4f 	dsb	sy
 801af16:	61fb      	str	r3, [r7, #28]
}
 801af18:	bf00      	nop
 801af1a:	e7fe      	b.n	801af1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af22:	6850      	ldr	r0, [r2, #4]
 801af24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af26:	6892      	ldr	r2, [r2, #8]
 801af28:	4611      	mov	r1, r2
 801af2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	f2c0 80aa 	blt.w	801b088 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af3a:	695b      	ldr	r3, [r3, #20]
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d004      	beq.n	801af4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af42:	3304      	adds	r3, #4
 801af44:	4618      	mov	r0, r3
 801af46:	f7fd ffa3 	bl	8018e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801af4a:	463b      	mov	r3, r7
 801af4c:	4618      	mov	r0, r3
 801af4e:	f7ff ff6b 	bl	801ae28 <prvSampleTimeNow>
 801af52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	2b09      	cmp	r3, #9
 801af58:	f200 8097 	bhi.w	801b08a <prvProcessReceivedCommands+0x19e>
 801af5c:	a201      	add	r2, pc, #4	; (adr r2, 801af64 <prvProcessReceivedCommands+0x78>)
 801af5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af62:	bf00      	nop
 801af64:	0801af8d 	.word	0x0801af8d
 801af68:	0801af8d 	.word	0x0801af8d
 801af6c:	0801af8d 	.word	0x0801af8d
 801af70:	0801b001 	.word	0x0801b001
 801af74:	0801b015 	.word	0x0801b015
 801af78:	0801b05f 	.word	0x0801b05f
 801af7c:	0801af8d 	.word	0x0801af8d
 801af80:	0801af8d 	.word	0x0801af8d
 801af84:	0801b001 	.word	0x0801b001
 801af88:	0801b015 	.word	0x0801b015
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801af92:	f043 0301 	orr.w	r3, r3, #1
 801af96:	b2da      	uxtb	r2, r3
 801af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801af9e:	68ba      	ldr	r2, [r7, #8]
 801afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afa2:	699b      	ldr	r3, [r3, #24]
 801afa4:	18d1      	adds	r1, r2, r3
 801afa6:	68bb      	ldr	r3, [r7, #8]
 801afa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801afaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801afac:	f7ff ff5c 	bl	801ae68 <prvInsertTimerInActiveList>
 801afb0:	4603      	mov	r3, r0
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d069      	beq.n	801b08a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afb8:	6a1b      	ldr	r3, [r3, #32]
 801afba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801afbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801afc4:	f003 0304 	and.w	r3, r3, #4
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d05e      	beq.n	801b08a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801afcc:	68ba      	ldr	r2, [r7, #8]
 801afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afd0:	699b      	ldr	r3, [r3, #24]
 801afd2:	441a      	add	r2, r3
 801afd4:	2300      	movs	r3, #0
 801afd6:	9300      	str	r3, [sp, #0]
 801afd8:	2300      	movs	r3, #0
 801afda:	2100      	movs	r1, #0
 801afdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801afde:	f7ff fe05 	bl	801abec <xTimerGenericCommand>
 801afe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801afe4:	6a3b      	ldr	r3, [r7, #32]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d14f      	bne.n	801b08a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afee:	f383 8811 	msr	BASEPRI, r3
 801aff2:	f3bf 8f6f 	isb	sy
 801aff6:	f3bf 8f4f 	dsb	sy
 801affa:	61bb      	str	r3, [r7, #24]
}
 801affc:	bf00      	nop
 801affe:	e7fe      	b.n	801affe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b006:	f023 0301 	bic.w	r3, r3, #1
 801b00a:	b2da      	uxtb	r2, r3
 801b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b012:	e03a      	b.n	801b08a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b01a:	f043 0301 	orr.w	r3, r3, #1
 801b01e:	b2da      	uxtb	r2, r3
 801b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b026:	68ba      	ldr	r2, [r7, #8]
 801b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b02a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b02e:	699b      	ldr	r3, [r3, #24]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d10a      	bne.n	801b04a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b038:	f383 8811 	msr	BASEPRI, r3
 801b03c:	f3bf 8f6f 	isb	sy
 801b040:	f3bf 8f4f 	dsb	sy
 801b044:	617b      	str	r3, [r7, #20]
}
 801b046:	bf00      	nop
 801b048:	e7fe      	b.n	801b048 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b04c:	699a      	ldr	r2, [r3, #24]
 801b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b050:	18d1      	adds	r1, r2, r3
 801b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b058:	f7ff ff06 	bl	801ae68 <prvInsertTimerInActiveList>
					break;
 801b05c:	e015      	b.n	801b08a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b064:	f003 0302 	and.w	r3, r3, #2
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d103      	bne.n	801b074 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801b06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b06e:	f000 fbff 	bl	801b870 <vPortFree>
 801b072:	e00a      	b.n	801b08a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b07a:	f023 0301 	bic.w	r3, r3, #1
 801b07e:	b2da      	uxtb	r2, r3
 801b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b086:	e000      	b.n	801b08a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b08a:	4b08      	ldr	r3, [pc, #32]	; (801b0ac <prvProcessReceivedCommands+0x1c0>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	1d39      	adds	r1, r7, #4
 801b090:	2200      	movs	r2, #0
 801b092:	4618      	mov	r0, r3
 801b094:	f7fe f9c4 	bl	8019420 <xQueueReceive>
 801b098:	4603      	mov	r3, r0
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	f47f af2a 	bne.w	801aef4 <prvProcessReceivedCommands+0x8>
	}
}
 801b0a0:	bf00      	nop
 801b0a2:	bf00      	nop
 801b0a4:	3730      	adds	r7, #48	; 0x30
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	2400333c 	.word	0x2400333c

0801b0b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b088      	sub	sp, #32
 801b0b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b0b6:	e048      	b.n	801b14a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b0b8:	4b2d      	ldr	r3, [pc, #180]	; (801b170 <prvSwitchTimerLists+0xc0>)
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	68db      	ldr	r3, [r3, #12]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b0c2:	4b2b      	ldr	r3, [pc, #172]	; (801b170 <prvSwitchTimerLists+0xc0>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	68db      	ldr	r3, [r3, #12]
 801b0ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	3304      	adds	r3, #4
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	f7fd fedd 	bl	8018e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	6a1b      	ldr	r3, [r3, #32]
 801b0da:	68f8      	ldr	r0, [r7, #12]
 801b0dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b0e4:	f003 0304 	and.w	r3, r3, #4
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d02e      	beq.n	801b14a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	699b      	ldr	r3, [r3, #24]
 801b0f0:	693a      	ldr	r2, [r7, #16]
 801b0f2:	4413      	add	r3, r2
 801b0f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b0f6:	68ba      	ldr	r2, [r7, #8]
 801b0f8:	693b      	ldr	r3, [r7, #16]
 801b0fa:	429a      	cmp	r2, r3
 801b0fc:	d90e      	bls.n	801b11c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	68ba      	ldr	r2, [r7, #8]
 801b102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	68fa      	ldr	r2, [r7, #12]
 801b108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b10a:	4b19      	ldr	r3, [pc, #100]	; (801b170 <prvSwitchTimerLists+0xc0>)
 801b10c:	681a      	ldr	r2, [r3, #0]
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	3304      	adds	r3, #4
 801b112:	4619      	mov	r1, r3
 801b114:	4610      	mov	r0, r2
 801b116:	f7fd fe82 	bl	8018e1e <vListInsert>
 801b11a:	e016      	b.n	801b14a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b11c:	2300      	movs	r3, #0
 801b11e:	9300      	str	r3, [sp, #0]
 801b120:	2300      	movs	r3, #0
 801b122:	693a      	ldr	r2, [r7, #16]
 801b124:	2100      	movs	r1, #0
 801b126:	68f8      	ldr	r0, [r7, #12]
 801b128:	f7ff fd60 	bl	801abec <xTimerGenericCommand>
 801b12c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d10a      	bne.n	801b14a <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b138:	f383 8811 	msr	BASEPRI, r3
 801b13c:	f3bf 8f6f 	isb	sy
 801b140:	f3bf 8f4f 	dsb	sy
 801b144:	603b      	str	r3, [r7, #0]
}
 801b146:	bf00      	nop
 801b148:	e7fe      	b.n	801b148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b14a:	4b09      	ldr	r3, [pc, #36]	; (801b170 <prvSwitchTimerLists+0xc0>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d1b1      	bne.n	801b0b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b154:	4b06      	ldr	r3, [pc, #24]	; (801b170 <prvSwitchTimerLists+0xc0>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b15a:	4b06      	ldr	r3, [pc, #24]	; (801b174 <prvSwitchTimerLists+0xc4>)
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	4a04      	ldr	r2, [pc, #16]	; (801b170 <prvSwitchTimerLists+0xc0>)
 801b160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b162:	4a04      	ldr	r2, [pc, #16]	; (801b174 <prvSwitchTimerLists+0xc4>)
 801b164:	697b      	ldr	r3, [r7, #20]
 801b166:	6013      	str	r3, [r2, #0]
}
 801b168:	bf00      	nop
 801b16a:	3718      	adds	r7, #24
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	24003334 	.word	0x24003334
 801b174:	24003338 	.word	0x24003338

0801b178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b17e:	f000 f989 	bl	801b494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b182:	4b15      	ldr	r3, [pc, #84]	; (801b1d8 <prvCheckForValidListAndQueue+0x60>)
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d120      	bne.n	801b1cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b18a:	4814      	ldr	r0, [pc, #80]	; (801b1dc <prvCheckForValidListAndQueue+0x64>)
 801b18c:	f7fd fdf6 	bl	8018d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b190:	4813      	ldr	r0, [pc, #76]	; (801b1e0 <prvCheckForValidListAndQueue+0x68>)
 801b192:	f7fd fdf3 	bl	8018d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b196:	4b13      	ldr	r3, [pc, #76]	; (801b1e4 <prvCheckForValidListAndQueue+0x6c>)
 801b198:	4a10      	ldr	r2, [pc, #64]	; (801b1dc <prvCheckForValidListAndQueue+0x64>)
 801b19a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b19c:	4b12      	ldr	r3, [pc, #72]	; (801b1e8 <prvCheckForValidListAndQueue+0x70>)
 801b19e:	4a10      	ldr	r2, [pc, #64]	; (801b1e0 <prvCheckForValidListAndQueue+0x68>)
 801b1a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	9300      	str	r3, [sp, #0]
 801b1a6:	4b11      	ldr	r3, [pc, #68]	; (801b1ec <prvCheckForValidListAndQueue+0x74>)
 801b1a8:	4a11      	ldr	r2, [pc, #68]	; (801b1f0 <prvCheckForValidListAndQueue+0x78>)
 801b1aa:	2110      	movs	r1, #16
 801b1ac:	200a      	movs	r0, #10
 801b1ae:	f7fd ff01 	bl	8018fb4 <xQueueGenericCreateStatic>
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	4a08      	ldr	r2, [pc, #32]	; (801b1d8 <prvCheckForValidListAndQueue+0x60>)
 801b1b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b1b8:	4b07      	ldr	r3, [pc, #28]	; (801b1d8 <prvCheckForValidListAndQueue+0x60>)
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d005      	beq.n	801b1cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b1c0:	4b05      	ldr	r3, [pc, #20]	; (801b1d8 <prvCheckForValidListAndQueue+0x60>)
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	490b      	ldr	r1, [pc, #44]	; (801b1f4 <prvCheckForValidListAndQueue+0x7c>)
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f7fe fb9a 	bl	8019900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b1cc:	f000 f992 	bl	801b4f4 <vPortExitCritical>
}
 801b1d0:	bf00      	nop
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}
 801b1d6:	bf00      	nop
 801b1d8:	2400333c 	.word	0x2400333c
 801b1dc:	2400330c 	.word	0x2400330c
 801b1e0:	24003320 	.word	0x24003320
 801b1e4:	24003334 	.word	0x24003334
 801b1e8:	24003338 	.word	0x24003338
 801b1ec:	240033e8 	.word	0x240033e8
 801b1f0:	24003348 	.word	0x24003348
 801b1f4:	0801bbdc 	.word	0x0801bbdc

0801b1f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b08a      	sub	sp, #40	; 0x28
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	60b9      	str	r1, [r7, #8]
 801b202:	607a      	str	r2, [r7, #4]
 801b204:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801b206:	f06f 0301 	mvn.w	r3, #1
 801b20a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801b210:	68bb      	ldr	r3, [r7, #8]
 801b212:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b218:	4b06      	ldr	r3, [pc, #24]	; (801b234 <xTimerPendFunctionCallFromISR+0x3c>)
 801b21a:	6818      	ldr	r0, [r3, #0]
 801b21c:	f107 0114 	add.w	r1, r7, #20
 801b220:	2300      	movs	r3, #0
 801b222:	683a      	ldr	r2, [r7, #0]
 801b224:	f7fe f860 	bl	80192e8 <xQueueGenericSendFromISR>
 801b228:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801b22c:	4618      	mov	r0, r3
 801b22e:	3728      	adds	r7, #40	; 0x28
 801b230:	46bd      	mov	sp, r7
 801b232:	bd80      	pop	{r7, pc}
 801b234:	2400333c 	.word	0x2400333c

0801b238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b238:	b480      	push	{r7}
 801b23a:	b085      	sub	sp, #20
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	60f8      	str	r0, [r7, #12]
 801b240:	60b9      	str	r1, [r7, #8]
 801b242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	3b04      	subs	r3, #4
 801b248:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	3b04      	subs	r3, #4
 801b256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	f023 0201 	bic.w	r2, r3, #1
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	3b04      	subs	r3, #4
 801b266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b268:	4a0c      	ldr	r2, [pc, #48]	; (801b29c <pxPortInitialiseStack+0x64>)
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	3b14      	subs	r3, #20
 801b272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b274:	687a      	ldr	r2, [r7, #4]
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	3b04      	subs	r3, #4
 801b27e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	f06f 0202 	mvn.w	r2, #2
 801b286:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	3b20      	subs	r3, #32
 801b28c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b28e:	68fb      	ldr	r3, [r7, #12]
}
 801b290:	4618      	mov	r0, r3
 801b292:	3714      	adds	r7, #20
 801b294:	46bd      	mov	sp, r7
 801b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29a:	4770      	bx	lr
 801b29c:	0801b2a1 	.word	0x0801b2a1

0801b2a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b2a0:	b480      	push	{r7}
 801b2a2:	b085      	sub	sp, #20
 801b2a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b2aa:	4b12      	ldr	r3, [pc, #72]	; (801b2f4 <prvTaskExitError+0x54>)
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b2b2:	d00a      	beq.n	801b2ca <prvTaskExitError+0x2a>
	__asm volatile
 801b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2b8:	f383 8811 	msr	BASEPRI, r3
 801b2bc:	f3bf 8f6f 	isb	sy
 801b2c0:	f3bf 8f4f 	dsb	sy
 801b2c4:	60fb      	str	r3, [r7, #12]
}
 801b2c6:	bf00      	nop
 801b2c8:	e7fe      	b.n	801b2c8 <prvTaskExitError+0x28>
	__asm volatile
 801b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2ce:	f383 8811 	msr	BASEPRI, r3
 801b2d2:	f3bf 8f6f 	isb	sy
 801b2d6:	f3bf 8f4f 	dsb	sy
 801b2da:	60bb      	str	r3, [r7, #8]
}
 801b2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b2de:	bf00      	nop
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d0fc      	beq.n	801b2e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b2e6:	bf00      	nop
 801b2e8:	bf00      	nop
 801b2ea:	3714      	adds	r7, #20
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f2:	4770      	bx	lr
 801b2f4:	240000d8 	.word	0x240000d8
	...

0801b300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b300:	4b07      	ldr	r3, [pc, #28]	; (801b320 <pxCurrentTCBConst2>)
 801b302:	6819      	ldr	r1, [r3, #0]
 801b304:	6808      	ldr	r0, [r1, #0]
 801b306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b30a:	f380 8809 	msr	PSP, r0
 801b30e:	f3bf 8f6f 	isb	sy
 801b312:	f04f 0000 	mov.w	r0, #0
 801b316:	f380 8811 	msr	BASEPRI, r0
 801b31a:	4770      	bx	lr
 801b31c:	f3af 8000 	nop.w

0801b320 <pxCurrentTCBConst2>:
 801b320:	24002e0c 	.word	0x24002e0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b324:	bf00      	nop
 801b326:	bf00      	nop

0801b328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b328:	4808      	ldr	r0, [pc, #32]	; (801b34c <prvPortStartFirstTask+0x24>)
 801b32a:	6800      	ldr	r0, [r0, #0]
 801b32c:	6800      	ldr	r0, [r0, #0]
 801b32e:	f380 8808 	msr	MSP, r0
 801b332:	f04f 0000 	mov.w	r0, #0
 801b336:	f380 8814 	msr	CONTROL, r0
 801b33a:	b662      	cpsie	i
 801b33c:	b661      	cpsie	f
 801b33e:	f3bf 8f4f 	dsb	sy
 801b342:	f3bf 8f6f 	isb	sy
 801b346:	df00      	svc	0
 801b348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b34a:	bf00      	nop
 801b34c:	e000ed08 	.word	0xe000ed08

0801b350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b086      	sub	sp, #24
 801b354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b356:	4b46      	ldr	r3, [pc, #280]	; (801b470 <xPortStartScheduler+0x120>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	4a46      	ldr	r2, [pc, #280]	; (801b474 <xPortStartScheduler+0x124>)
 801b35c:	4293      	cmp	r3, r2
 801b35e:	d10a      	bne.n	801b376 <xPortStartScheduler+0x26>
	__asm volatile
 801b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b364:	f383 8811 	msr	BASEPRI, r3
 801b368:	f3bf 8f6f 	isb	sy
 801b36c:	f3bf 8f4f 	dsb	sy
 801b370:	613b      	str	r3, [r7, #16]
}
 801b372:	bf00      	nop
 801b374:	e7fe      	b.n	801b374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b376:	4b3e      	ldr	r3, [pc, #248]	; (801b470 <xPortStartScheduler+0x120>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	4a3f      	ldr	r2, [pc, #252]	; (801b478 <xPortStartScheduler+0x128>)
 801b37c:	4293      	cmp	r3, r2
 801b37e:	d10a      	bne.n	801b396 <xPortStartScheduler+0x46>
	__asm volatile
 801b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b384:	f383 8811 	msr	BASEPRI, r3
 801b388:	f3bf 8f6f 	isb	sy
 801b38c:	f3bf 8f4f 	dsb	sy
 801b390:	60fb      	str	r3, [r7, #12]
}
 801b392:	bf00      	nop
 801b394:	e7fe      	b.n	801b394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b396:	4b39      	ldr	r3, [pc, #228]	; (801b47c <xPortStartScheduler+0x12c>)
 801b398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	781b      	ldrb	r3, [r3, #0]
 801b39e:	b2db      	uxtb	r3, r3
 801b3a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	22ff      	movs	r2, #255	; 0xff
 801b3a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b3a8:	697b      	ldr	r3, [r7, #20]
 801b3aa:	781b      	ldrb	r3, [r3, #0]
 801b3ac:	b2db      	uxtb	r3, r3
 801b3ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b3b0:	78fb      	ldrb	r3, [r7, #3]
 801b3b2:	b2db      	uxtb	r3, r3
 801b3b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b3b8:	b2da      	uxtb	r2, r3
 801b3ba:	4b31      	ldr	r3, [pc, #196]	; (801b480 <xPortStartScheduler+0x130>)
 801b3bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b3be:	4b31      	ldr	r3, [pc, #196]	; (801b484 <xPortStartScheduler+0x134>)
 801b3c0:	2207      	movs	r2, #7
 801b3c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b3c4:	e009      	b.n	801b3da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b3c6:	4b2f      	ldr	r3, [pc, #188]	; (801b484 <xPortStartScheduler+0x134>)
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	3b01      	subs	r3, #1
 801b3cc:	4a2d      	ldr	r2, [pc, #180]	; (801b484 <xPortStartScheduler+0x134>)
 801b3ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b3d0:	78fb      	ldrb	r3, [r7, #3]
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	005b      	lsls	r3, r3, #1
 801b3d6:	b2db      	uxtb	r3, r3
 801b3d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b3da:	78fb      	ldrb	r3, [r7, #3]
 801b3dc:	b2db      	uxtb	r3, r3
 801b3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3e2:	2b80      	cmp	r3, #128	; 0x80
 801b3e4:	d0ef      	beq.n	801b3c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b3e6:	4b27      	ldr	r3, [pc, #156]	; (801b484 <xPortStartScheduler+0x134>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	f1c3 0307 	rsb	r3, r3, #7
 801b3ee:	2b04      	cmp	r3, #4
 801b3f0:	d00a      	beq.n	801b408 <xPortStartScheduler+0xb8>
	__asm volatile
 801b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3f6:	f383 8811 	msr	BASEPRI, r3
 801b3fa:	f3bf 8f6f 	isb	sy
 801b3fe:	f3bf 8f4f 	dsb	sy
 801b402:	60bb      	str	r3, [r7, #8]
}
 801b404:	bf00      	nop
 801b406:	e7fe      	b.n	801b406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b408:	4b1e      	ldr	r3, [pc, #120]	; (801b484 <xPortStartScheduler+0x134>)
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	021b      	lsls	r3, r3, #8
 801b40e:	4a1d      	ldr	r2, [pc, #116]	; (801b484 <xPortStartScheduler+0x134>)
 801b410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b412:	4b1c      	ldr	r3, [pc, #112]	; (801b484 <xPortStartScheduler+0x134>)
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b41a:	4a1a      	ldr	r2, [pc, #104]	; (801b484 <xPortStartScheduler+0x134>)
 801b41c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	b2da      	uxtb	r2, r3
 801b422:	697b      	ldr	r3, [r7, #20]
 801b424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b426:	4b18      	ldr	r3, [pc, #96]	; (801b488 <xPortStartScheduler+0x138>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	4a17      	ldr	r2, [pc, #92]	; (801b488 <xPortStartScheduler+0x138>)
 801b42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b432:	4b15      	ldr	r3, [pc, #84]	; (801b488 <xPortStartScheduler+0x138>)
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	4a14      	ldr	r2, [pc, #80]	; (801b488 <xPortStartScheduler+0x138>)
 801b438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b43c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b43e:	f000 f8dd 	bl	801b5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b442:	4b12      	ldr	r3, [pc, #72]	; (801b48c <xPortStartScheduler+0x13c>)
 801b444:	2200      	movs	r2, #0
 801b446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b448:	f000 f8fc 	bl	801b644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b44c:	4b10      	ldr	r3, [pc, #64]	; (801b490 <xPortStartScheduler+0x140>)
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	4a0f      	ldr	r2, [pc, #60]	; (801b490 <xPortStartScheduler+0x140>)
 801b452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b458:	f7ff ff66 	bl	801b328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b45c:	f7fe ff6e 	bl	801a33c <vTaskSwitchContext>
	prvTaskExitError();
 801b460:	f7ff ff1e 	bl	801b2a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b464:	2300      	movs	r3, #0
}
 801b466:	4618      	mov	r0, r3
 801b468:	3718      	adds	r7, #24
 801b46a:	46bd      	mov	sp, r7
 801b46c:	bd80      	pop	{r7, pc}
 801b46e:	bf00      	nop
 801b470:	e000ed00 	.word	0xe000ed00
 801b474:	410fc271 	.word	0x410fc271
 801b478:	410fc270 	.word	0x410fc270
 801b47c:	e000e400 	.word	0xe000e400
 801b480:	24003438 	.word	0x24003438
 801b484:	2400343c 	.word	0x2400343c
 801b488:	e000ed20 	.word	0xe000ed20
 801b48c:	240000d8 	.word	0x240000d8
 801b490:	e000ef34 	.word	0xe000ef34

0801b494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b494:	b480      	push	{r7}
 801b496:	b083      	sub	sp, #12
 801b498:	af00      	add	r7, sp, #0
	__asm volatile
 801b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b49e:	f383 8811 	msr	BASEPRI, r3
 801b4a2:	f3bf 8f6f 	isb	sy
 801b4a6:	f3bf 8f4f 	dsb	sy
 801b4aa:	607b      	str	r3, [r7, #4]
}
 801b4ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b4ae:	4b0f      	ldr	r3, [pc, #60]	; (801b4ec <vPortEnterCritical+0x58>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	4a0d      	ldr	r2, [pc, #52]	; (801b4ec <vPortEnterCritical+0x58>)
 801b4b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b4b8:	4b0c      	ldr	r3, [pc, #48]	; (801b4ec <vPortEnterCritical+0x58>)
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	2b01      	cmp	r3, #1
 801b4be:	d10f      	bne.n	801b4e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b4c0:	4b0b      	ldr	r3, [pc, #44]	; (801b4f0 <vPortEnterCritical+0x5c>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	b2db      	uxtb	r3, r3
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d00a      	beq.n	801b4e0 <vPortEnterCritical+0x4c>
	__asm volatile
 801b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4ce:	f383 8811 	msr	BASEPRI, r3
 801b4d2:	f3bf 8f6f 	isb	sy
 801b4d6:	f3bf 8f4f 	dsb	sy
 801b4da:	603b      	str	r3, [r7, #0]
}
 801b4dc:	bf00      	nop
 801b4de:	e7fe      	b.n	801b4de <vPortEnterCritical+0x4a>
	}
}
 801b4e0:	bf00      	nop
 801b4e2:	370c      	adds	r7, #12
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ea:	4770      	bx	lr
 801b4ec:	240000d8 	.word	0x240000d8
 801b4f0:	e000ed04 	.word	0xe000ed04

0801b4f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	b083      	sub	sp, #12
 801b4f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b4fa:	4b12      	ldr	r3, [pc, #72]	; (801b544 <vPortExitCritical+0x50>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d10a      	bne.n	801b518 <vPortExitCritical+0x24>
	__asm volatile
 801b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b506:	f383 8811 	msr	BASEPRI, r3
 801b50a:	f3bf 8f6f 	isb	sy
 801b50e:	f3bf 8f4f 	dsb	sy
 801b512:	607b      	str	r3, [r7, #4]
}
 801b514:	bf00      	nop
 801b516:	e7fe      	b.n	801b516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b518:	4b0a      	ldr	r3, [pc, #40]	; (801b544 <vPortExitCritical+0x50>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	3b01      	subs	r3, #1
 801b51e:	4a09      	ldr	r2, [pc, #36]	; (801b544 <vPortExitCritical+0x50>)
 801b520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b522:	4b08      	ldr	r3, [pc, #32]	; (801b544 <vPortExitCritical+0x50>)
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d105      	bne.n	801b536 <vPortExitCritical+0x42>
 801b52a:	2300      	movs	r3, #0
 801b52c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b52e:	683b      	ldr	r3, [r7, #0]
 801b530:	f383 8811 	msr	BASEPRI, r3
}
 801b534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b536:	bf00      	nop
 801b538:	370c      	adds	r7, #12
 801b53a:	46bd      	mov	sp, r7
 801b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b540:	4770      	bx	lr
 801b542:	bf00      	nop
 801b544:	240000d8 	.word	0x240000d8
	...

0801b550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b550:	f3ef 8009 	mrs	r0, PSP
 801b554:	f3bf 8f6f 	isb	sy
 801b558:	4b15      	ldr	r3, [pc, #84]	; (801b5b0 <pxCurrentTCBConst>)
 801b55a:	681a      	ldr	r2, [r3, #0]
 801b55c:	f01e 0f10 	tst.w	lr, #16
 801b560:	bf08      	it	eq
 801b562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56a:	6010      	str	r0, [r2, #0]
 801b56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b570:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b574:	f380 8811 	msr	BASEPRI, r0
 801b578:	f3bf 8f4f 	dsb	sy
 801b57c:	f3bf 8f6f 	isb	sy
 801b580:	f7fe fedc 	bl	801a33c <vTaskSwitchContext>
 801b584:	f04f 0000 	mov.w	r0, #0
 801b588:	f380 8811 	msr	BASEPRI, r0
 801b58c:	bc09      	pop	{r0, r3}
 801b58e:	6819      	ldr	r1, [r3, #0]
 801b590:	6808      	ldr	r0, [r1, #0]
 801b592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b596:	f01e 0f10 	tst.w	lr, #16
 801b59a:	bf08      	it	eq
 801b59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b5a0:	f380 8809 	msr	PSP, r0
 801b5a4:	f3bf 8f6f 	isb	sy
 801b5a8:	4770      	bx	lr
 801b5aa:	bf00      	nop
 801b5ac:	f3af 8000 	nop.w

0801b5b0 <pxCurrentTCBConst>:
 801b5b0:	24002e0c 	.word	0x24002e0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b5b4:	bf00      	nop
 801b5b6:	bf00      	nop

0801b5b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b082      	sub	sp, #8
 801b5bc:	af00      	add	r7, sp, #0
	__asm volatile
 801b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5c2:	f383 8811 	msr	BASEPRI, r3
 801b5c6:	f3bf 8f6f 	isb	sy
 801b5ca:	f3bf 8f4f 	dsb	sy
 801b5ce:	607b      	str	r3, [r7, #4]
}
 801b5d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b5d2:	f7fe fdf1 	bl	801a1b8 <xTaskIncrementTick>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d003      	beq.n	801b5e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b5dc:	4b06      	ldr	r3, [pc, #24]	; (801b5f8 <xPortSysTickHandler+0x40>)
 801b5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b5e2:	601a      	str	r2, [r3, #0]
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	f383 8811 	msr	BASEPRI, r3
}
 801b5ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b5f0:	bf00      	nop
 801b5f2:	3708      	adds	r7, #8
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	bd80      	pop	{r7, pc}
 801b5f8:	e000ed04 	.word	0xe000ed04

0801b5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b5fc:	b480      	push	{r7}
 801b5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b600:	4b0b      	ldr	r3, [pc, #44]	; (801b630 <vPortSetupTimerInterrupt+0x34>)
 801b602:	2200      	movs	r2, #0
 801b604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b606:	4b0b      	ldr	r3, [pc, #44]	; (801b634 <vPortSetupTimerInterrupt+0x38>)
 801b608:	2200      	movs	r2, #0
 801b60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b60c:	4b0a      	ldr	r3, [pc, #40]	; (801b638 <vPortSetupTimerInterrupt+0x3c>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	4a0a      	ldr	r2, [pc, #40]	; (801b63c <vPortSetupTimerInterrupt+0x40>)
 801b612:	fba2 2303 	umull	r2, r3, r2, r3
 801b616:	099b      	lsrs	r3, r3, #6
 801b618:	4a09      	ldr	r2, [pc, #36]	; (801b640 <vPortSetupTimerInterrupt+0x44>)
 801b61a:	3b01      	subs	r3, #1
 801b61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b61e:	4b04      	ldr	r3, [pc, #16]	; (801b630 <vPortSetupTimerInterrupt+0x34>)
 801b620:	2207      	movs	r2, #7
 801b622:	601a      	str	r2, [r3, #0]
}
 801b624:	bf00      	nop
 801b626:	46bd      	mov	sp, r7
 801b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62c:	4770      	bx	lr
 801b62e:	bf00      	nop
 801b630:	e000e010 	.word	0xe000e010
 801b634:	e000e018 	.word	0xe000e018
 801b638:	240000c8 	.word	0x240000c8
 801b63c:	10624dd3 	.word	0x10624dd3
 801b640:	e000e014 	.word	0xe000e014

0801b644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b654 <vPortEnableVFP+0x10>
 801b648:	6801      	ldr	r1, [r0, #0]
 801b64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b64e:	6001      	str	r1, [r0, #0]
 801b650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b652:	bf00      	nop
 801b654:	e000ed88 	.word	0xe000ed88

0801b658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b658:	b480      	push	{r7}
 801b65a:	b085      	sub	sp, #20
 801b65c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b65e:	f3ef 8305 	mrs	r3, IPSR
 801b662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	2b0f      	cmp	r3, #15
 801b668:	d914      	bls.n	801b694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b66a:	4a17      	ldr	r2, [pc, #92]	; (801b6c8 <vPortValidateInterruptPriority+0x70>)
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	4413      	add	r3, r2
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b674:	4b15      	ldr	r3, [pc, #84]	; (801b6cc <vPortValidateInterruptPriority+0x74>)
 801b676:	781b      	ldrb	r3, [r3, #0]
 801b678:	7afa      	ldrb	r2, [r7, #11]
 801b67a:	429a      	cmp	r2, r3
 801b67c:	d20a      	bcs.n	801b694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b682:	f383 8811 	msr	BASEPRI, r3
 801b686:	f3bf 8f6f 	isb	sy
 801b68a:	f3bf 8f4f 	dsb	sy
 801b68e:	607b      	str	r3, [r7, #4]
}
 801b690:	bf00      	nop
 801b692:	e7fe      	b.n	801b692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b694:	4b0e      	ldr	r3, [pc, #56]	; (801b6d0 <vPortValidateInterruptPriority+0x78>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b69c:	4b0d      	ldr	r3, [pc, #52]	; (801b6d4 <vPortValidateInterruptPriority+0x7c>)
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	429a      	cmp	r2, r3
 801b6a2:	d90a      	bls.n	801b6ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6a8:	f383 8811 	msr	BASEPRI, r3
 801b6ac:	f3bf 8f6f 	isb	sy
 801b6b0:	f3bf 8f4f 	dsb	sy
 801b6b4:	603b      	str	r3, [r7, #0]
}
 801b6b6:	bf00      	nop
 801b6b8:	e7fe      	b.n	801b6b8 <vPortValidateInterruptPriority+0x60>
	}
 801b6ba:	bf00      	nop
 801b6bc:	3714      	adds	r7, #20
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c4:	4770      	bx	lr
 801b6c6:	bf00      	nop
 801b6c8:	e000e3f0 	.word	0xe000e3f0
 801b6cc:	24003438 	.word	0x24003438
 801b6d0:	e000ed0c 	.word	0xe000ed0c
 801b6d4:	2400343c 	.word	0x2400343c

0801b6d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b6d8:	b580      	push	{r7, lr}
 801b6da:	b08a      	sub	sp, #40	; 0x28
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b6e4:	f7fe fcac 	bl	801a040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b6e8:	4b5b      	ldr	r3, [pc, #364]	; (801b858 <pvPortMalloc+0x180>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d101      	bne.n	801b6f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b6f0:	f000 f920 	bl	801b934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b6f4:	4b59      	ldr	r3, [pc, #356]	; (801b85c <pvPortMalloc+0x184>)
 801b6f6:	681a      	ldr	r2, [r3, #0]
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	4013      	ands	r3, r2
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	f040 8093 	bne.w	801b828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d01d      	beq.n	801b744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b708:	2208      	movs	r2, #8
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	4413      	add	r3, r2
 801b70e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	f003 0307 	and.w	r3, r3, #7
 801b716:	2b00      	cmp	r3, #0
 801b718:	d014      	beq.n	801b744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	f023 0307 	bic.w	r3, r3, #7
 801b720:	3308      	adds	r3, #8
 801b722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	f003 0307 	and.w	r3, r3, #7
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d00a      	beq.n	801b744 <pvPortMalloc+0x6c>
	__asm volatile
 801b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b732:	f383 8811 	msr	BASEPRI, r3
 801b736:	f3bf 8f6f 	isb	sy
 801b73a:	f3bf 8f4f 	dsb	sy
 801b73e:	617b      	str	r3, [r7, #20]
}
 801b740:	bf00      	nop
 801b742:	e7fe      	b.n	801b742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d06e      	beq.n	801b828 <pvPortMalloc+0x150>
 801b74a:	4b45      	ldr	r3, [pc, #276]	; (801b860 <pvPortMalloc+0x188>)
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	687a      	ldr	r2, [r7, #4]
 801b750:	429a      	cmp	r2, r3
 801b752:	d869      	bhi.n	801b828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b754:	4b43      	ldr	r3, [pc, #268]	; (801b864 <pvPortMalloc+0x18c>)
 801b756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b758:	4b42      	ldr	r3, [pc, #264]	; (801b864 <pvPortMalloc+0x18c>)
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b75e:	e004      	b.n	801b76a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b76c:	685b      	ldr	r3, [r3, #4]
 801b76e:	687a      	ldr	r2, [r7, #4]
 801b770:	429a      	cmp	r2, r3
 801b772:	d903      	bls.n	801b77c <pvPortMalloc+0xa4>
 801b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d1f1      	bne.n	801b760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b77c:	4b36      	ldr	r3, [pc, #216]	; (801b858 <pvPortMalloc+0x180>)
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b782:	429a      	cmp	r2, r3
 801b784:	d050      	beq.n	801b828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b786:	6a3b      	ldr	r3, [r7, #32]
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	2208      	movs	r2, #8
 801b78c:	4413      	add	r3, r2
 801b78e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b792:	681a      	ldr	r2, [r3, #0]
 801b794:	6a3b      	ldr	r3, [r7, #32]
 801b796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b79a:	685a      	ldr	r2, [r3, #4]
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	1ad2      	subs	r2, r2, r3
 801b7a0:	2308      	movs	r3, #8
 801b7a2:	005b      	lsls	r3, r3, #1
 801b7a4:	429a      	cmp	r2, r3
 801b7a6:	d91f      	bls.n	801b7e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	4413      	add	r3, r2
 801b7ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b7b0:	69bb      	ldr	r3, [r7, #24]
 801b7b2:	f003 0307 	and.w	r3, r3, #7
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d00a      	beq.n	801b7d0 <pvPortMalloc+0xf8>
	__asm volatile
 801b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7be:	f383 8811 	msr	BASEPRI, r3
 801b7c2:	f3bf 8f6f 	isb	sy
 801b7c6:	f3bf 8f4f 	dsb	sy
 801b7ca:	613b      	str	r3, [r7, #16]
}
 801b7cc:	bf00      	nop
 801b7ce:	e7fe      	b.n	801b7ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7d2:	685a      	ldr	r2, [r3, #4]
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	1ad2      	subs	r2, r2, r3
 801b7d8:	69bb      	ldr	r3, [r7, #24]
 801b7da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7de:	687a      	ldr	r2, [r7, #4]
 801b7e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b7e2:	69b8      	ldr	r0, [r7, #24]
 801b7e4:	f000 f908 	bl	801b9f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b7e8:	4b1d      	ldr	r3, [pc, #116]	; (801b860 <pvPortMalloc+0x188>)
 801b7ea:	681a      	ldr	r2, [r3, #0]
 801b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ee:	685b      	ldr	r3, [r3, #4]
 801b7f0:	1ad3      	subs	r3, r2, r3
 801b7f2:	4a1b      	ldr	r2, [pc, #108]	; (801b860 <pvPortMalloc+0x188>)
 801b7f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b7f6:	4b1a      	ldr	r3, [pc, #104]	; (801b860 <pvPortMalloc+0x188>)
 801b7f8:	681a      	ldr	r2, [r3, #0]
 801b7fa:	4b1b      	ldr	r3, [pc, #108]	; (801b868 <pvPortMalloc+0x190>)
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	429a      	cmp	r2, r3
 801b800:	d203      	bcs.n	801b80a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b802:	4b17      	ldr	r3, [pc, #92]	; (801b860 <pvPortMalloc+0x188>)
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	4a18      	ldr	r2, [pc, #96]	; (801b868 <pvPortMalloc+0x190>)
 801b808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b80c:	685a      	ldr	r2, [r3, #4]
 801b80e:	4b13      	ldr	r3, [pc, #76]	; (801b85c <pvPortMalloc+0x184>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	431a      	orrs	r2, r3
 801b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b81a:	2200      	movs	r2, #0
 801b81c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b81e:	4b13      	ldr	r3, [pc, #76]	; (801b86c <pvPortMalloc+0x194>)
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	3301      	adds	r3, #1
 801b824:	4a11      	ldr	r2, [pc, #68]	; (801b86c <pvPortMalloc+0x194>)
 801b826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b828:	f7fe fc18 	bl	801a05c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b82c:	69fb      	ldr	r3, [r7, #28]
 801b82e:	f003 0307 	and.w	r3, r3, #7
 801b832:	2b00      	cmp	r3, #0
 801b834:	d00a      	beq.n	801b84c <pvPortMalloc+0x174>
	__asm volatile
 801b836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b83a:	f383 8811 	msr	BASEPRI, r3
 801b83e:	f3bf 8f6f 	isb	sy
 801b842:	f3bf 8f4f 	dsb	sy
 801b846:	60fb      	str	r3, [r7, #12]
}
 801b848:	bf00      	nop
 801b84a:	e7fe      	b.n	801b84a <pvPortMalloc+0x172>
	return pvReturn;
 801b84c:	69fb      	ldr	r3, [r7, #28]
}
 801b84e:	4618      	mov	r0, r3
 801b850:	3728      	adds	r7, #40	; 0x28
 801b852:	46bd      	mov	sp, r7
 801b854:	bd80      	pop	{r7, pc}
 801b856:	bf00      	nop
 801b858:	24007048 	.word	0x24007048
 801b85c:	2400705c 	.word	0x2400705c
 801b860:	2400704c 	.word	0x2400704c
 801b864:	24007040 	.word	0x24007040
 801b868:	24007050 	.word	0x24007050
 801b86c:	24007054 	.word	0x24007054

0801b870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b870:	b580      	push	{r7, lr}
 801b872:	b086      	sub	sp, #24
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d04d      	beq.n	801b91e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b882:	2308      	movs	r3, #8
 801b884:	425b      	negs	r3, r3
 801b886:	697a      	ldr	r2, [r7, #20]
 801b888:	4413      	add	r3, r2
 801b88a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b890:	693b      	ldr	r3, [r7, #16]
 801b892:	685a      	ldr	r2, [r3, #4]
 801b894:	4b24      	ldr	r3, [pc, #144]	; (801b928 <vPortFree+0xb8>)
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	4013      	ands	r3, r2
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d10a      	bne.n	801b8b4 <vPortFree+0x44>
	__asm volatile
 801b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8a2:	f383 8811 	msr	BASEPRI, r3
 801b8a6:	f3bf 8f6f 	isb	sy
 801b8aa:	f3bf 8f4f 	dsb	sy
 801b8ae:	60fb      	str	r3, [r7, #12]
}
 801b8b0:	bf00      	nop
 801b8b2:	e7fe      	b.n	801b8b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b8b4:	693b      	ldr	r3, [r7, #16]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d00a      	beq.n	801b8d2 <vPortFree+0x62>
	__asm volatile
 801b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8c0:	f383 8811 	msr	BASEPRI, r3
 801b8c4:	f3bf 8f6f 	isb	sy
 801b8c8:	f3bf 8f4f 	dsb	sy
 801b8cc:	60bb      	str	r3, [r7, #8]
}
 801b8ce:	bf00      	nop
 801b8d0:	e7fe      	b.n	801b8d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b8d2:	693b      	ldr	r3, [r7, #16]
 801b8d4:	685a      	ldr	r2, [r3, #4]
 801b8d6:	4b14      	ldr	r3, [pc, #80]	; (801b928 <vPortFree+0xb8>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	4013      	ands	r3, r2
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d01e      	beq.n	801b91e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b8e0:	693b      	ldr	r3, [r7, #16]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d11a      	bne.n	801b91e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b8e8:	693b      	ldr	r3, [r7, #16]
 801b8ea:	685a      	ldr	r2, [r3, #4]
 801b8ec:	4b0e      	ldr	r3, [pc, #56]	; (801b928 <vPortFree+0xb8>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	43db      	mvns	r3, r3
 801b8f2:	401a      	ands	r2, r3
 801b8f4:	693b      	ldr	r3, [r7, #16]
 801b8f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b8f8:	f7fe fba2 	bl	801a040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b8fc:	693b      	ldr	r3, [r7, #16]
 801b8fe:	685a      	ldr	r2, [r3, #4]
 801b900:	4b0a      	ldr	r3, [pc, #40]	; (801b92c <vPortFree+0xbc>)
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	4413      	add	r3, r2
 801b906:	4a09      	ldr	r2, [pc, #36]	; (801b92c <vPortFree+0xbc>)
 801b908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b90a:	6938      	ldr	r0, [r7, #16]
 801b90c:	f000 f874 	bl	801b9f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b910:	4b07      	ldr	r3, [pc, #28]	; (801b930 <vPortFree+0xc0>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	3301      	adds	r3, #1
 801b916:	4a06      	ldr	r2, [pc, #24]	; (801b930 <vPortFree+0xc0>)
 801b918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b91a:	f7fe fb9f 	bl	801a05c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b91e:	bf00      	nop
 801b920:	3718      	adds	r7, #24
 801b922:	46bd      	mov	sp, r7
 801b924:	bd80      	pop	{r7, pc}
 801b926:	bf00      	nop
 801b928:	2400705c 	.word	0x2400705c
 801b92c:	2400704c 	.word	0x2400704c
 801b930:	24007058 	.word	0x24007058

0801b934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b934:	b480      	push	{r7}
 801b936:	b085      	sub	sp, #20
 801b938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b93a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801b93e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b940:	4b27      	ldr	r3, [pc, #156]	; (801b9e0 <prvHeapInit+0xac>)
 801b942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	f003 0307 	and.w	r3, r3, #7
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d00c      	beq.n	801b968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	3307      	adds	r3, #7
 801b952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	f023 0307 	bic.w	r3, r3, #7
 801b95a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b95c:	68ba      	ldr	r2, [r7, #8]
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	1ad3      	subs	r3, r2, r3
 801b962:	4a1f      	ldr	r2, [pc, #124]	; (801b9e0 <prvHeapInit+0xac>)
 801b964:	4413      	add	r3, r2
 801b966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b96c:	4a1d      	ldr	r2, [pc, #116]	; (801b9e4 <prvHeapInit+0xb0>)
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b972:	4b1c      	ldr	r3, [pc, #112]	; (801b9e4 <prvHeapInit+0xb0>)
 801b974:	2200      	movs	r2, #0
 801b976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	68ba      	ldr	r2, [r7, #8]
 801b97c:	4413      	add	r3, r2
 801b97e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b980:	2208      	movs	r2, #8
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	1a9b      	subs	r3, r3, r2
 801b986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	f023 0307 	bic.w	r3, r3, #7
 801b98e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	4a15      	ldr	r2, [pc, #84]	; (801b9e8 <prvHeapInit+0xb4>)
 801b994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b996:	4b14      	ldr	r3, [pc, #80]	; (801b9e8 <prvHeapInit+0xb4>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	2200      	movs	r2, #0
 801b99c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b99e:	4b12      	ldr	r3, [pc, #72]	; (801b9e8 <prvHeapInit+0xb4>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b9aa:	683b      	ldr	r3, [r7, #0]
 801b9ac:	68fa      	ldr	r2, [r7, #12]
 801b9ae:	1ad2      	subs	r2, r2, r3
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b9b4:	4b0c      	ldr	r3, [pc, #48]	; (801b9e8 <prvHeapInit+0xb4>)
 801b9b6:	681a      	ldr	r2, [r3, #0]
 801b9b8:	683b      	ldr	r3, [r7, #0]
 801b9ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	685b      	ldr	r3, [r3, #4]
 801b9c0:	4a0a      	ldr	r2, [pc, #40]	; (801b9ec <prvHeapInit+0xb8>)
 801b9c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b9c4:	683b      	ldr	r3, [r7, #0]
 801b9c6:	685b      	ldr	r3, [r3, #4]
 801b9c8:	4a09      	ldr	r2, [pc, #36]	; (801b9f0 <prvHeapInit+0xbc>)
 801b9ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b9cc:	4b09      	ldr	r3, [pc, #36]	; (801b9f4 <prvHeapInit+0xc0>)
 801b9ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b9d2:	601a      	str	r2, [r3, #0]
}
 801b9d4:	bf00      	nop
 801b9d6:	3714      	adds	r7, #20
 801b9d8:	46bd      	mov	sp, r7
 801b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9de:	4770      	bx	lr
 801b9e0:	24003440 	.word	0x24003440
 801b9e4:	24007040 	.word	0x24007040
 801b9e8:	24007048 	.word	0x24007048
 801b9ec:	24007050 	.word	0x24007050
 801b9f0:	2400704c 	.word	0x2400704c
 801b9f4:	2400705c 	.word	0x2400705c

0801b9f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b9f8:	b480      	push	{r7}
 801b9fa:	b085      	sub	sp, #20
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ba00:	4b28      	ldr	r3, [pc, #160]	; (801baa4 <prvInsertBlockIntoFreeList+0xac>)
 801ba02:	60fb      	str	r3, [r7, #12]
 801ba04:	e002      	b.n	801ba0c <prvInsertBlockIntoFreeList+0x14>
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	60fb      	str	r3, [r7, #12]
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	687a      	ldr	r2, [r7, #4]
 801ba12:	429a      	cmp	r2, r3
 801ba14:	d8f7      	bhi.n	801ba06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	685b      	ldr	r3, [r3, #4]
 801ba1e:	68ba      	ldr	r2, [r7, #8]
 801ba20:	4413      	add	r3, r2
 801ba22:	687a      	ldr	r2, [r7, #4]
 801ba24:	429a      	cmp	r2, r3
 801ba26:	d108      	bne.n	801ba3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	685a      	ldr	r2, [r3, #4]
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	685b      	ldr	r3, [r3, #4]
 801ba30:	441a      	add	r2, r3
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	68ba      	ldr	r2, [r7, #8]
 801ba44:	441a      	add	r2, r3
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	429a      	cmp	r2, r3
 801ba4c:	d118      	bne.n	801ba80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	681a      	ldr	r2, [r3, #0]
 801ba52:	4b15      	ldr	r3, [pc, #84]	; (801baa8 <prvInsertBlockIntoFreeList+0xb0>)
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	429a      	cmp	r2, r3
 801ba58:	d00d      	beq.n	801ba76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	685a      	ldr	r2, [r3, #4]
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	685b      	ldr	r3, [r3, #4]
 801ba64:	441a      	add	r2, r3
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	681a      	ldr	r2, [r3, #0]
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	601a      	str	r2, [r3, #0]
 801ba74:	e008      	b.n	801ba88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ba76:	4b0c      	ldr	r3, [pc, #48]	; (801baa8 <prvInsertBlockIntoFreeList+0xb0>)
 801ba78:	681a      	ldr	r2, [r3, #0]
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	601a      	str	r2, [r3, #0]
 801ba7e:	e003      	b.n	801ba88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	681a      	ldr	r2, [r3, #0]
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ba88:	68fa      	ldr	r2, [r7, #12]
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	429a      	cmp	r2, r3
 801ba8e:	d002      	beq.n	801ba96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	687a      	ldr	r2, [r7, #4]
 801ba94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ba96:	bf00      	nop
 801ba98:	3714      	adds	r7, #20
 801ba9a:	46bd      	mov	sp, r7
 801ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa0:	4770      	bx	lr
 801baa2:	bf00      	nop
 801baa4:	24007040 	.word	0x24007040
 801baa8:	24007048 	.word	0x24007048

0801baac <__libc_init_array>:
 801baac:	b570      	push	{r4, r5, r6, lr}
 801baae:	4d0d      	ldr	r5, [pc, #52]	; (801bae4 <__libc_init_array+0x38>)
 801bab0:	4c0d      	ldr	r4, [pc, #52]	; (801bae8 <__libc_init_array+0x3c>)
 801bab2:	1b64      	subs	r4, r4, r5
 801bab4:	10a4      	asrs	r4, r4, #2
 801bab6:	2600      	movs	r6, #0
 801bab8:	42a6      	cmp	r6, r4
 801baba:	d109      	bne.n	801bad0 <__libc_init_array+0x24>
 801babc:	4d0b      	ldr	r5, [pc, #44]	; (801baec <__libc_init_array+0x40>)
 801babe:	4c0c      	ldr	r4, [pc, #48]	; (801baf0 <__libc_init_array+0x44>)
 801bac0:	f000 f82e 	bl	801bb20 <_init>
 801bac4:	1b64      	subs	r4, r4, r5
 801bac6:	10a4      	asrs	r4, r4, #2
 801bac8:	2600      	movs	r6, #0
 801baca:	42a6      	cmp	r6, r4
 801bacc:	d105      	bne.n	801bada <__libc_init_array+0x2e>
 801bace:	bd70      	pop	{r4, r5, r6, pc}
 801bad0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bad4:	4798      	blx	r3
 801bad6:	3601      	adds	r6, #1
 801bad8:	e7ee      	b.n	801bab8 <__libc_init_array+0xc>
 801bada:	f855 3b04 	ldr.w	r3, [r5], #4
 801bade:	4798      	blx	r3
 801bae0:	3601      	adds	r6, #1
 801bae2:	e7f2      	b.n	801baca <__libc_init_array+0x1e>
 801bae4:	0801be00 	.word	0x0801be00
 801bae8:	0801be00 	.word	0x0801be00
 801baec:	0801be00 	.word	0x0801be00
 801baf0:	0801be04 	.word	0x0801be04

0801baf4 <memcpy>:
 801baf4:	440a      	add	r2, r1
 801baf6:	4291      	cmp	r1, r2
 801baf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801bafc:	d100      	bne.n	801bb00 <memcpy+0xc>
 801bafe:	4770      	bx	lr
 801bb00:	b510      	push	{r4, lr}
 801bb02:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb06:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb0a:	4291      	cmp	r1, r2
 801bb0c:	d1f9      	bne.n	801bb02 <memcpy+0xe>
 801bb0e:	bd10      	pop	{r4, pc}

0801bb10 <memset>:
 801bb10:	4402      	add	r2, r0
 801bb12:	4603      	mov	r3, r0
 801bb14:	4293      	cmp	r3, r2
 801bb16:	d100      	bne.n	801bb1a <memset+0xa>
 801bb18:	4770      	bx	lr
 801bb1a:	f803 1b01 	strb.w	r1, [r3], #1
 801bb1e:	e7f9      	b.n	801bb14 <memset+0x4>

0801bb20 <_init>:
 801bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb22:	bf00      	nop
 801bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb26:	bc08      	pop	{r3}
 801bb28:	469e      	mov	lr, r3
 801bb2a:	4770      	bx	lr

0801bb2c <_fini>:
 801bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb2e:	bf00      	nop
 801bb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb32:	bc08      	pop	{r3}
 801bb34:	469e      	mov	lr, r3
 801bb36:	4770      	bx	lr
