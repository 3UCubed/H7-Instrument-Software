
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146ec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0801498c  0801498c  0002498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d3c  08014d3c  00024d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d44  08014d44  00024d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014d48  08014d48  00024d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08014d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fbc  24000100  08014e4c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050bc  08014e4c  000350bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030c55  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005267  00000000  00000000  00060d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002540  00000000  00000000  00065ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002358  00000000  00000000  00068530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000074bb  00000000  00000000  0006a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ef33  00000000  00000000  00071d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d56b  00000000  00000000  000a0c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022e1e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a980  00000000  00000000  0022e234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014974 	.word	0x08014974

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08014974 	.word	0x08014974

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f ff06 	bl	80104ac <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f fefb 	bl	80104ac <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fef0 	bl	80104ac <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 fab2 	bl	8013c38 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004c4 	.word	0x240004c4
 80006e0:	24000664 	.word	0x24000664
 80006e4:	24000510 	.word	0x24000510
 80006e8:	2400055c 	.word	0x2400055c
 80006ec:	080149cc 	.word	0x080149cc

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d f9eb 	bl	800dad8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 fa41 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fbf3 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 fa37 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fbe9 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 fa2d 	bl	8013c38 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 f9ba 	bl	8004b7e <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f003 fffb 	bl	8004808 <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 fa0f 	bl	8013c38 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 f99c 	bl	8004b7e <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f003 ffdd 	bl	8004808 <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 f9f1 	bl	8013c38 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00b fbe3 	bl	800c030 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f81f 	bl	80048b8 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00b fc44 	bl	800c110 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 f8d4 	bl	8004a38 <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 f9d0 	bl	8013c38 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 f9bb 	bl	8013c38 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 f9a6 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fb58 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 f99c 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fb4e 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 f992 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fb44 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 f988 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fb3a 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 f97e 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fb2f 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 f973 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fb24 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 f968 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fb19 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 f95d 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fb0e 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 f952 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fb04 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 f948 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fafa 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 f93e 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 faef 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 f933 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fae4 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 f928 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fad9 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	24000668 	.word	0x24000668
 80009fc:	240005a8 	.word	0x240005a8
 8000a00:	080149e4 	.word	0x080149e4
 8000a04:	58020400 	.word	0x58020400
 8000a08:	080149ec 	.word	0x080149ec
 8000a0c:	080149f8 	.word	0x080149f8
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08014a00 	.word	0x08014a00
 8000a20:	08014a0c 	.word	0x08014a0c
 8000a24:	24000660 	.word	0x24000660
 8000a28:	24000510 	.word	0x24000510
 8000a2c:	08014a20 	.word	0x08014a20
 8000a30:	24000000 	.word	0x24000000
 8000a34:	08014a2c 	.word	0x08014a2c
 8000a38:	08014a38 	.word	0x08014a38
 8000a3c:	08014a44 	.word	0x08014a44
 8000a40:	08014a50 	.word	0x08014a50
 8000a44:	08014a5c 	.word	0x08014a5c
 8000a48:	08014a6c 	.word	0x08014a6c
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	08014a78 	.word	0x08014a78
 8000a54:	08014a84 	.word	0x08014a84
 8000a58:	08014a94 	.word	0x08014a94
 8000a5c:	08014aa4 	.word	0x08014aa4
 8000a60:	08014ab0 	.word	0x08014ab0
 8000a64:	08014abc 	.word	0x08014abc
 8000a68:	08014ac8 	.word	0x08014ac8
 8000a6c:	08014ad4 	.word	0x08014ad4
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 f8e1 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fa92 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 f8d6 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fa88 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 f8cc 	bl	8013c38 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fa7e 	bl	8007fa8 <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 f8c2 	bl	8013c38 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 f8be 	bl	8013c38 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 f8b7 	bl	8013c38 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 f8b0 	bl	8013c38 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 f8a9 	bl	8013c38 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 f8a2 	bl	8013c38 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 f89b 	bl	8013c38 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08014ae0 	.word	0x08014ae0
 8000b24:	58020800 	.word	0x58020800
 8000b28:	08014aec 	.word	0x08014aec
 8000b2c:	08014af8 	.word	0x08014af8
 8000b30:	08014b08 	.word	0x08014b08
 8000b34:	08014b18 	.word	0x08014b18
 8000b38:	2400065a 	.word	0x2400065a
 8000b3c:	08014b20 	.word	0x08014b20
 8000b40:	08014b28 	.word	0x08014b28
 8000b44:	2400065b 	.word	0x2400065b
 8000b48:	08014b30 	.word	0x08014b30
 8000b4c:	08014b3c 	.word	0x08014b3c
 8000b50:	2400065c 	.word	0x2400065c
 8000b54:	08014b44 	.word	0x08014b44

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 f8c0 	bl	8002ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f890 	bl	8000c84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f90c 	bl	8000d80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe02 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fdd0 	bl	8001710 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd34 	bl	80015dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fd80 	bl	8001678 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb1c 	bl	80011b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fbb2 	bl	80012e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fcb6 	bl	80014f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc06 	bl	8001394 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa50 	bl	800102c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f928 	bl	8000de0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 fade 	bl	8001150 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fb4e 	bl	8001234 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <main+0xd8>)
 8000b9c:	f00b fb58 	bl	800c250 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4824      	ldr	r0, [pc, #144]	; (8000c34 <main+0xdc>)
 8000ba4:	f00b fb54 	bl	800c250 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0xe0>)
 8000bac:	f00b fb50 	bl	800c250 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bb0:	f00f fb26 	bl	8010200 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	2010      	movs	r0, #16
 8000bba:	f00f fd21 	bl	8010600 <osMessageQueueNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <main+0xe4>)
 8000bc2:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <main+0xe8>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	481e      	ldr	r0, [pc, #120]	; (8000c44 <main+0xec>)
 8000bca:	f00f fb63 	bl	8010294 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <main+0xf0>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <main+0xf4>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <main+0xf8>)
 8000bda:	f00f fb5b 	bl	8010294 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <main+0xfc>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <main+0x100>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <main+0x104>)
 8000bea:	f00f fb53 	bl	8010294 <osThreadNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <main+0x108>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <main+0x10c>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	481b      	ldr	r0, [pc, #108]	; (8000c68 <main+0x110>)
 8000bfa:	f00f fb4b 	bl	8010294 <osThreadNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <main+0x114>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <main+0x118>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	481a      	ldr	r0, [pc, #104]	; (8000c74 <main+0x11c>)
 8000c0a:	f00f fb43 	bl	8010294 <osThreadNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <main+0x120>)
 8000c12:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f00f fc0a 	bl	801042e <osEventFlagsNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <main+0x124>)
 8000c1e:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c20:	f000 fe20 	bl	8001864 <system_setup>
  printf("Starting kernal...\n");
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <main+0x128>)
 8000c26:	f013 f807 	bl	8013c38 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2a:	f00f fb0d 	bl	8010248 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c2e:	e7fe      	b.n	8000c2e <main+0xd6>
 8000c30:	240004c4 	.word	0x240004c4
 8000c34:	24000510 	.word	0x24000510
 8000c38:	2400055c 	.word	0x2400055c
 8000c3c:	24000650 	.word	0x24000650
 8000c40:	08014bb0 	.word	0x08014bb0
 8000c44:	08001e1d 	.word	0x08001e1d
 8000c48:	2400063c 	.word	0x2400063c
 8000c4c:	08014bd4 	.word	0x08014bd4
 8000c50:	08001e61 	.word	0x08001e61
 8000c54:	24000640 	.word	0x24000640
 8000c58:	08014bf8 	.word	0x08014bf8
 8000c5c:	08001ea5 	.word	0x08001ea5
 8000c60:	24000644 	.word	0x24000644
 8000c64:	08014c1c 	.word	0x08014c1c
 8000c68:	08001ee9 	.word	0x08001ee9
 8000c6c:	24000648 	.word	0x24000648
 8000c70:	08014c40 	.word	0x08014c40
 8000c74:	08001f0d 	.word	0x08001f0d
 8000c78:	2400064c 	.word	0x2400064c
 8000c7c:	24000664 	.word	0x24000664
 8000c80:	08014b4c 	.word	0x08014b4c

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	; 0x70
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	224c      	movs	r2, #76	; 0x4c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f012 fe62 	bl	801395c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f012 fe5c 	bl	801395c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f007 facd 	bl	8008244 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce0:	bf00      	nop
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemClock_Config+0xf8>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cee:	d1f8      	bne.n	8000ce2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 fac5 	bl	80082b8 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d34:	f001 f92a 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	233f      	movs	r3, #63	; 0x3f
 8000d3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f007 ff04 	bl	8008b6c <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d6a:	f001 f90f 	bl	8001f8c <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	; 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58000400 	.word	0x58000400
 8000d7c:	58024800 	.word	0x58024800

08000d80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0b0      	sub	sp, #192	; 0xc0
 8000d84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	22c0      	movs	r2, #192	; 0xc0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f012 fde5 	bl	801395c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000da2:	2309      	movs	r3, #9
 8000da4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000db6:	2320      	movs	r3, #32
 8000db8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f008 fa9d 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dd4:	f001 f8da 	bl	8001f8c <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	37c0      	adds	r7, #192	; 0xc0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e04:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e06:	4a7d      	ldr	r2, [pc, #500]	; (8000ffc <MX_ADC1_Init+0x21c>)
 8000e08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e2a:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e30:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e32:	220b      	movs	r2, #11
 8000e34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5c:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	4864      	ldr	r0, [pc, #400]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e66:	f002 f9c7 	bl	80031f8 <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e70:	f001 f88c 	bl	8001f8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	485e      	ldr	r0, [pc, #376]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e80:	f003 fae2 	bl	8004448 <HAL_ADCEx_MultiModeConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e8a:	f001 f87f 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	; (8001000 <MX_ADC1_Init+0x220>)
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e92:	2306      	movs	r3, #6
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e96:	2307      	movs	r3, #7
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4851      	ldr	r0, [pc, #324]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000eb2:	f002 fc25 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ebc:	f001 f866 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <MX_ADC1_Init+0x224>)
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	484a      	ldr	r0, [pc, #296]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000ece:	f002 fc17 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ed8:	f001 f858 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_ADC1_Init+0x228>)
 8000ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4843      	ldr	r0, [pc, #268]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000eea:	f002 fc09 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000ef4:	f001 f84a 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <MX_ADC1_Init+0x22c>)
 8000efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000efc:	2318      	movs	r3, #24
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	483c      	ldr	r0, [pc, #240]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f06:	f002 fbfb 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f10:	f001 f83c 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_ADC1_Init+0x230>)
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f24:	f002 fbec 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f2e:	f001 f82d 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <MX_ADC1_Init+0x234>)
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f36:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f42:	f002 fbdd 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f4c:	f001 f81e 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_ADC1_Init+0x238>)
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f54:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f60:	f002 fbce 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f6a:	f001 f80f 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_ADC1_Init+0x23c>)
 8000f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f72:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f7e:	f002 fbbf 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000f88:	f001 f800 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_ADC1_Init+0x240>)
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f90:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f9c:	f002 fbb0 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fa6:	f000 fff1 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_ADC1_Init+0x244>)
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000fbe:	f002 fb9f 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fc8:	f000 ffe0 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC1_Init+0x248>)
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fd0:	f240 2306 	movw	r3, #518	; 0x206
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000fe0:	f002 fb8e 	bl	8003700 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000fea:	f000 ffcf 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2400011c 	.word	0x2400011c
 8000ffc:	40022000 	.word	0x40022000
 8001000:	0c900008 	.word	0x0c900008
 8001004:	10c00010 	.word	0x10c00010
 8001008:	14f00020 	.word	0x14f00020
 800100c:	1d500080 	.word	0x1d500080
 8001010:	21800100 	.word	0x21800100
 8001014:	25b00200 	.word	0x25b00200
 8001018:	2a000400 	.word	0x2a000400
 800101c:	2e300800 	.word	0x2e300800
 8001020:	3ac04000 	.word	0x3ac04000
 8001024:	3ef08000 	.word	0x3ef08000
 8001028:	47520000 	.word	0x47520000

0800102c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <MX_ADC3_Init+0x110>)
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <MX_ADC3_Init+0x114>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <MX_ADC3_Init+0x110>)
 800104c:	2208      	movs	r2, #8
 800104e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <MX_ADC3_Init+0x110>)
 8001052:	2201      	movs	r2, #1
 8001054:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001056:	4b39      	ldr	r3, [pc, #228]	; (800113c <MX_ADC3_Init+0x110>)
 8001058:	2204      	movs	r2, #4
 800105a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_ADC3_Init+0x110>)
 800105e:	2200      	movs	r2, #0
 8001060:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <MX_ADC3_Init+0x110>)
 8001064:	2201      	movs	r2, #1
 8001066:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001068:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_ADC3_Init+0x110>)
 800106a:	2204      	movs	r2, #4
 800106c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <MX_ADC3_Init+0x110>)
 8001070:	2200      	movs	r2, #0
 8001072:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_ADC3_Init+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_ADC3_Init+0x110>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_ADC3_Init+0x110>)
 8001082:	2203      	movs	r2, #3
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_ADC3_Init+0x110>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_ADC3_Init+0x110>)
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <MX_ADC3_Init+0x110>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800109c:	4827      	ldr	r0, [pc, #156]	; (800113c <MX_ADC3_Init+0x110>)
 800109e:	f002 f8ab 	bl	80031f8 <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010a8:	f000 ff70 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <MX_ADC3_Init+0x118>)
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010b4:	2307      	movs	r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	481b      	ldr	r0, [pc, #108]	; (800113c <MX_ADC3_Init+0x110>)
 80010d0:	f002 fb16 	bl	8003700 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 ff57 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC3_Init+0x11c>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010e2:	230c      	movs	r3, #12
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <MX_ADC3_Init+0x110>)
 80010ec:	f002 fb08 	bl	8003700 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80010f6:	f000 ff49 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010fe:	2312      	movs	r3, #18
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_ADC3_Init+0x110>)
 8001108:	f002 fafa 	bl	8003700 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001112:	f000 ff3b 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_ADC3_Init+0x120>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800111a:	2318      	movs	r3, #24
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_ADC3_Init+0x110>)
 8001124:	f002 faec 	bl	8003700 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800112e:	f000 ff2d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000180 	.word	0x24000180
 8001140:	58026000 	.word	0x58026000
 8001144:	cb840000 	.word	0xcb840000
 8001148:	cfb80000 	.word	0xcfb80000
 800114c:	04300002 	.word	0x04300002

08001150 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2224      	movs	r2, #36	; 0x24
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f012 fbfd 	bl	801395c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_DAC1_Init+0x5c>)
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_DAC1_Init+0x60>)
 8001166:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <MX_DAC1_Init+0x5c>)
 800116a:	f003 fb2b 	bl	80047c4 <HAL_DAC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001174:	f000 ff0a 	bl	8001f8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800117c:	230a      	movs	r3, #10
 800117e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001184:	2301      	movs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_DAC1_Init+0x5c>)
 8001194:	f003 fd46 	bl	8004c24 <HAL_DAC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 fef5 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240002d4 	.word	0x240002d4
 80011b0:	40007400 	.word	0x40007400

080011b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_I2C1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <MX_I2C1_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_I2C1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_I2C1_Init+0x74>)
 80011f0:	f006 fef4 	bl	8007fdc <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 fec7 	bl	8001f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <MX_I2C1_Init+0x74>)
 8001202:	f006 ff87 	bl	8008114 <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 febe 	bl	8001f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_I2C1_Init+0x74>)
 8001214:	f006 ffc9 	bl	80081aa <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 feb5 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	24000360 	.word	0x24000360
 800122c:	40005400 	.word	0x40005400
 8001230:	00506682 	.word	0x00506682

08001234 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_SPI1_Init+0xa8>)
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <MX_SPI1_Init+0xac>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001240:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001248:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800124c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001250:	220f      	movs	r2, #15
 8001252:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_SPI1_Init+0xa8>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001262:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001266:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_SPI1_Init+0xa8>)
 800126a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_SPI1_Init+0xa8>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI1_Init+0xa8>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001292:	2200      	movs	r2, #0
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI1_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012c8:	f00a fd1c 	bl	800bd04 <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80012d2:	f000 fe5b 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	240003b4 	.word	0x240003b4
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_SPI2_Init+0xa8>)
 80012ea:	4a29      	ldr	r2, [pc, #164]	; (8001390 <MX_SPI2_Init+0xac>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_SPI2_Init+0xa8>)
 80012f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_SPI2_Init+0xa8>)
 80012f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <MX_SPI2_Init+0xa8>)
 8001300:	220f      	movs	r2, #15
 8001302:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_SPI2_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_SPI2_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_SPI2_Init+0xa8>)
 8001312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001316:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_SPI2_Init+0xa8>)
 800131a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800131e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_SPI2_Init+0xa8>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_SPI2_Init+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_SPI2_Init+0xa8>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_SPI2_Init+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_SPI2_Init+0xa8>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_SPI2_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_SPI2_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_SPI2_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_SPI2_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SPI2_Init+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_SPI2_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SPI2_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_SPI2_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SPI2_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_SPI2_Init+0xa8>)
 8001378:	f00a fcc4 	bl	800bd04 <HAL_SPI_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001382:	f000 fe03 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400043c 	.word	0x2400043c
 8001390:	40003800 	.word	0x40003800

08001394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b09a      	sub	sp, #104	; 0x68
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	222c      	movs	r2, #44	; 0x2c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f012 fac4 	bl	801395c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <MX_TIM1_Init+0x158>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013dc:	225f      	movs	r2, #95	; 0x5f
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013e8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001400:	4839      	ldr	r0, [pc, #228]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001402:	f00a fdbe 	bl	800bf82 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fdbe 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800141a:	4619      	mov	r1, r3
 800141c:	4832      	ldr	r0, [pc, #200]	; (80014e8 <MX_TIM1_Init+0x154>)
 800141e:	f00b fbfd 	bl	800cc1c <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001428:	f000 fdb0 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800142c:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MX_TIM1_Init+0x154>)
 800142e:	f00b f869 	bl	800c504 <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001438:	f000 fda8 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001448:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800144c:	4619      	mov	r1, r3
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001450:	f00c f93a 	bl	800d6c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800145a:	f000 fd97 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001462:	f240 13df 	movw	r3, #479	; 0x1df
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001486:	f00b fab5 	bl	800c9f4 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001490:	f000 fd7c 	bl	8001f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM1_Init+0x154>)
 80014ca:	f00c f98b 	bl	800d7e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014d4:	f000 fd5a 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM1_Init+0x154>)
 80014da:	f001 f8b3 	bl	8002644 <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3768      	adds	r7, #104	; 0x68
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	240004c4 	.word	0x240004c4
 80014ec:	40010000 	.word	0x40010000

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800152c:	222f      	movs	r2, #47	; 0x2f
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001538:	f640 4234 	movw	r2, #3124	; 0xc34
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800154c:	f00a fd19 	bl	800bf82 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001556:	f000 fd19 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001564:	4619      	mov	r1, r3
 8001566:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001568:	f00b fb58 	bl	800cc1c <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001572:	f000 fd0b 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001578:	f00a ffc4 	bl	800c504 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001582:	f000 fd03 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001586:	2320      	movs	r3, #32
 8001588:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4810      	ldr	r0, [pc, #64]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001596:	f00c f897 	bl	800d6c8 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015a0:	f000 fcf4 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	220c      	movs	r2, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015bc:	f00b fa1a 	bl	800c9f4 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015c6:	f000 fce1 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015cc:	f001 f83a 	bl	8002644 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	; 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	24000510 	.word	0x24000510

080015dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM3_Init+0x94>)
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <MX_TIM3_Init+0x98>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM3_Init+0x94>)
 8001602:	222f      	movs	r2, #47	; 0x2f
 8001604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM3_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM3_Init+0x94>)
 800160e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_TIM3_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM3_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM3_Init+0x94>)
 8001622:	f00a fcae 	bl	800bf82 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800162c:	f000 fcae 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM3_Init+0x94>)
 800163e:	f00b faed 	bl	800cc1c <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 fca0 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_TIM3_Init+0x94>)
 800165a:	f00c f835 	bl	800d6c8 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001664:	f000 fc92 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400055c 	.word	0x2400055c
 8001674:	40000400 	.word	0x40000400

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_USART1_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001684:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016c2:	f00c f92b 	bl	800d91c <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fc5e 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016d4:	f00e fc85 	bl	800ffe2 <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 fc55 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016e6:	f00e fcba 	bl	801005e <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 fc4c 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016f6:	f00e fc3b 	bl	800ff70 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 fc44 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	240005a8 	.word	0x240005a8
 800170c:	40011000 	.word	0x40011000

08001710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_DMA_Init+0x5c>)
 8001718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <MX_DMA_Init+0x5c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_DMA_Init+0x5c>)
 8001728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2105      	movs	r1, #5
 8001738:	200b      	movs	r0, #11
 800173a:	f003 f81b 	bl	8004774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800173e:	200b      	movs	r0, #11
 8001740:	f003 f832 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	200c      	movs	r0, #12
 800174a:	f003 f813 	bl	8004774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800174e:	200c      	movs	r0, #12
 8001750:	f003 f82a 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2105      	movs	r1, #5
 8001758:	2010      	movs	r0, #16
 800175a:	f003 f80b 	bl	8004774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800175e:	2010      	movs	r0, #16
 8001760:	f003 f822 	bl	80047a8 <HAL_NVIC_EnableIRQ>

}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <MX_GPIO_Init+0xe8>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <MX_GPIO_Init+0xe8>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <MX_GPIO_Init+0xe8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_GPIO_Init+0xe8>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001804:	4815      	ldr	r0, [pc, #84]	; (800185c <MX_GPIO_Init+0xec>)
 8001806:	f006 fbcf 	bl	8007fa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2164      	movs	r1, #100	; 0x64
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_GPIO_Init+0xf0>)
 8001810:	f006 fbca 	bl	8007fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001814:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001818:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2301      	movs	r3, #1
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0xec>)
 800182e:	f006 fa0b 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001832:	2364      	movs	r3, #100	; 0x64
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_GPIO_Init+0xf0>)
 800184a:	f006 f9fd 	bl	8007c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	58024400 	.word	0x58024400
 800185c:	58020800 	.word	0x58020800
 8001860:	58020400 	.word	0x58020400

08001864 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001872:	210c      	movs	r1, #12
 8001874:	4818      	ldr	r0, [pc, #96]	; (80018d8 <system_setup+0x74>)
 8001876:	f00a fea7 	bl	800c5c8 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800187a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800187e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001882:	4816      	ldr	r0, [pc, #88]	; (80018dc <system_setup+0x78>)
 8001884:	f002 fd7c 	bl	8004380 <HAL_ADCEx_Calibration_Start>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800188e:	f000 fb7d 	bl	8001f8c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001892:	220b      	movs	r2, #11
 8001894:	4912      	ldr	r1, [pc, #72]	; (80018e0 <system_setup+0x7c>)
 8001896:	4811      	ldr	r0, [pc, #68]	; (80018dc <system_setup+0x78>)
 8001898:	f001 fe50 	bl	800353c <HAL_ADC_Start_DMA>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80018a2:	f000 fb73 	bl	8001f8c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80018a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <system_setup+0x80>)
 80018b0:	f002 fd66 	bl	8004380 <HAL_ADCEx_Calibration_Start>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80018ba:	f000 fb67 	bl	8001f8c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80018be:	2204      	movs	r2, #4
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <system_setup+0x84>)
 80018c2:	4808      	ldr	r0, [pc, #32]	; (80018e4 <system_setup+0x80>)
 80018c4:	f001 fe3a 	bl	800353c <HAL_ADC_Start_DMA>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80018ce:	f000 fb5d 	bl	8001f8c <Error_Handler>
	  	}
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000510 	.word	0x24000510
 80018dc:	2400011c 	.word	0x2400011c
 80018e0:	240006e0 	.word	0x240006e0
 80018e4:	24000180 	.word	0x24000180
 80018e8:	24000700 	.word	0x24000700

080018ec <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f012 f80f 	bl	8013920 <malloc>
 8001902:	4603      	mov	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	4618      	mov	r0, r3
 800190e:	f012 f817 	bl	8013940 <memcpy>
    packet.size = size;
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001922:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001936:	2006      	movs	r0, #6
 8001938:	f011 fff2 	bl	8013920 <malloc>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001940:	2002      	movs	r0, #2
 8001942:	f011 ffed 	bl	8013920 <malloc>
 8001946:	4603      	mov	r3, r0
 8001948:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	220e      	movs	r2, #14
 800194e:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	220d      	movs	r2, #13
 8001956:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	22bb      	movs	r2, #187	; 0xbb
 800195c:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3301      	adds	r3, #1
 8001962:	22bb      	movs	r2, #187	; 0xbb
 8001964:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <sample_pmt+0x94>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3302      	adds	r3, #2
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <sample_pmt+0x94>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3303      	adds	r3, #3
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3305      	adds	r3, #5
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	7852      	ldrb	r2, [r2, #1]
 8001994:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001996:	463b      	mov	r3, r7
 8001998:	2206      	movs	r2, #6
 800199a:	68f9      	ldr	r1, [r7, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ffa5 	bl	80018ec <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <sample_pmt+0x98>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	4639      	mov	r1, r7
 80019a8:	2300      	movs	r3, #0
 80019aa:	2200      	movs	r2, #0
 80019ac:	f00e fe9c 	bl	80106e8 <osMessageQueuePut>
	free(buffer);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f011 ffbd 	bl	8013930 <free>
	free(pmt_spi);
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f011 ffba 	bl	8013930 <free>
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	24000654 	.word	0x24000654
 80019c8:	24000650 	.word	0x24000650

080019cc <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80019d2:	200e      	movs	r0, #14
 80019d4:	f011 ffa4 	bl	8013920 <malloc>
 80019d8:	4603      	mov	r3, r0
 80019da:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80019dc:	2002      	movs	r0, #2
 80019de:	f011 ff9f 	bl	8013920 <malloc>
 80019e2:	4603      	mov	r3, r0
 80019e4:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80019e6:	2004      	movs	r0, #4
 80019e8:	f011 ff9a 	bl	8013920 <malloc>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	220e      	movs	r2, #14
 80019f4:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3301      	adds	r3, #1
 80019fa:	220d      	movs	r2, #13
 80019fc:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	22ee      	movs	r2, #238	; 0xee
 8001a02:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3302      	adds	r3, #2
 8001a08:	22dd      	movs	r2, #221	; 0xdd
 8001a0a:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	22aa      	movs	r2, #170	; 0xaa
 8001a10:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	22aa      	movs	r2, #170	; 0xaa
 8001a18:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <sample_erpa+0x110>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3302      	adds	r3, #2
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <sample_erpa+0x110>)
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3303      	adds	r3, #3
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3305      	adds	r3, #5
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3306      	adds	r3, #6
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3307      	adds	r3, #7
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3302      	adds	r3, #2
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3302      	adds	r3, #2
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3309      	adds	r3, #9
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	330a      	adds	r3, #10
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	330b      	adds	r3, #11
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	330c      	adds	r3, #12
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	330d      	adds	r3, #13
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	7852      	ldrb	r2, [r2, #1]
 8001aa4:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	220e      	movs	r2, #14
 8001aaa:	6979      	ldr	r1, [r7, #20]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff1d 	bl	80018ec <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <sample_erpa+0x114>)
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	1d39      	adds	r1, r7, #4
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2200      	movs	r2, #0
 8001abc:	f00e fe14 	bl	80106e8 <osMessageQueuePut>
	free(buffer);
 8001ac0:	6978      	ldr	r0, [r7, #20]
 8001ac2:	f011 ff35 	bl	8013930 <free>
	free(erpa_spi);
 8001ac6:	6938      	ldr	r0, [r7, #16]
 8001ac8:	f011 ff32 	bl	8013930 <free>
	free(erpa_adc);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f011 ff2f 	bl	8013930 <free>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000656 	.word	0x24000656
 8001ae0:	24000650 	.word	0x24000650

08001ae4 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001aea:	2026      	movs	r0, #38	; 0x26
 8001aec:	f011 ff18 	bl	8013920 <malloc>
 8001af0:	4603      	mov	r3, r0
 8001af2:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001af4:	2008      	movs	r0, #8
 8001af6:	f011 ff13 	bl	8013920 <malloc>
 8001afa:	4603      	mov	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001afe:	2012      	movs	r0, #18
 8001b00:	f011 ff0e 	bl	8013920 <malloc>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001b08:	2008      	movs	r0, #8
 8001b0a:	f011 ff09 	bl	8013920 <malloc>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2211      	movs	r2, #17
 8001b16:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	2212      	movs	r2, #18
 8001b1e:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	3304      	adds	r3, #4
 8001b24:	2213      	movs	r2, #19
 8001b26:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	3306      	adds	r3, #6
 8001b2c:	2214      	movs	r2, #20
 8001b2e:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	22a0      	movs	r2, #160	; 0xa0
 8001b34:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	22a1      	movs	r2, #161	; 0xa1
 8001b3c:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	22a2      	movs	r2, #162	; 0xa2
 8001b44:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3306      	adds	r3, #6
 8001b4a:	22a3      	movs	r2, #163	; 0xa3
 8001b4c:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3308      	adds	r3, #8
 8001b52:	22a4      	movs	r2, #164	; 0xa4
 8001b54:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	330a      	adds	r3, #10
 8001b5a:	22a5      	movs	r2, #165	; 0xa5
 8001b5c:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	330c      	adds	r3, #12
 8001b62:	22a6      	movs	r2, #166	; 0xa6
 8001b64:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	330e      	adds	r3, #14
 8001b6a:	22a7      	movs	r2, #167	; 0xa7
 8001b6c:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3310      	adds	r3, #16
 8001b72:	22a8      	movs	r2, #168	; 0xa8
 8001b74:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	22b0      	movs	r2, #176	; 0xb0
 8001b7a:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	22b1      	movs	r2, #177	; 0xb1
 8001b82:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3304      	adds	r3, #4
 8001b88:	22b2      	movs	r2, #178	; 0xb2
 8001b8a:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3306      	adds	r3, #6
 8001b90:	22b3      	movs	r2, #179	; 0xb3
 8001b92:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	22cc      	movs	r2, #204	; 0xcc
 8001b98:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	22cc      	movs	r2, #204	; 0xcc
 8001ba0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001ba2:	4b9c      	ldr	r3, [pc, #624]	; (8001e14 <sample_hk+0x330>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3302      	adds	r3, #2
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001bb2:	4b98      	ldr	r3, [pc, #608]	; (8001e14 <sample_hk+0x330>)
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3303      	adds	r3, #3
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	881a      	ldrh	r2, [r3, #0]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3305      	adds	r3, #5
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3306      	adds	r3, #6
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	881a      	ldrh	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3307      	adds	r3, #7
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	121a      	asrs	r2, r3, #8
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3308      	adds	r3, #8
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3309      	adds	r3, #9
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	121a      	asrs	r2, r3, #8
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	330a      	adds	r3, #10
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	330b      	adds	r3, #11
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	121a      	asrs	r2, r3, #8
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	330c      	adds	r3, #12
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	330d      	adds	r3, #13
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3306      	adds	r3, #6
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	121a      	asrs	r2, r3, #8
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	330e      	adds	r3, #14
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	3306      	adds	r3, #6
 8001c72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	330f      	adds	r3, #15
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3310      	adds	r3, #16
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3311      	adds	r3, #17
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3312      	adds	r3, #18
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3313      	adds	r3, #19
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	881a      	ldrh	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3315      	adds	r3, #21
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3306      	adds	r3, #6
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3316      	adds	r3, #22
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3306      	adds	r3, #6
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3317      	adds	r3, #23
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3318      	adds	r3, #24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	330c      	adds	r3, #12
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3319      	adds	r3, #25
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3306      	adds	r3, #6
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	331a      	adds	r3, #26
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3306      	adds	r3, #6
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	331b      	adds	r3, #27
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	331c      	adds	r3, #28
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	331d      	adds	r3, #29
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	330e      	adds	r3, #14
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	331e      	adds	r3, #30
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	330e      	adds	r3, #14
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	331f      	adds	r3, #31
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3310      	adds	r3, #16
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3320      	adds	r3, #32
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3310      	adds	r3, #16
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3321      	adds	r3, #33	; 0x21
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3322      	adds	r3, #34	; 0x22
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3308      	adds	r3, #8
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3323      	adds	r3, #35	; 0x23
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	330a      	adds	r3, #10
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3324      	adds	r3, #36	; 0x24
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	330a      	adds	r3, #10
 8001dd0:	881a      	ldrh	r2, [r3, #0]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3325      	adds	r3, #37	; 0x25
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2226      	movs	r2, #38	; 0x26
 8001dde:	6979      	ldr	r1, [r7, #20]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fd83 	bl	80018ec <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <sample_hk+0x334>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	4639      	mov	r1, r7
 8001dec:	2300      	movs	r3, #0
 8001dee:	2200      	movs	r2, #0
 8001df0:	f00e fc7a 	bl	80106e8 <osMessageQueuePut>
	free(buffer);
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f011 fd9b 	bl	8013930 <free>
	free(hk_i2c);
 8001dfa:	6938      	ldr	r0, [r7, #16]
 8001dfc:	f011 fd98 	bl	8013930 <free>
	free(hk_adc1);
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f011 fd95 	bl	8013930 <free>
	free(hk_adc3);
 8001e06:	68b8      	ldr	r0, [r7, #8]
 8001e08:	f011 fd92 	bl	8013930 <free>
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24000658 	.word	0x24000658
 8001e18:	24000650 	.word	0x24000650

08001e1c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <PMT_init+0x38>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2101      	movs	r1, #1
 8001e30:	f00e fb80 	bl	8010534 <osEventFlagsWait>
		if(PMT_ON){
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <PMT_init+0x3c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <PMT_init+0x30>
	    sample_pmt();
 8001e3c:	f7ff fd78 	bl	8001930 <sample_pmt>
		pmt_seq++;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <PMT_init+0x40>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <PMT_init+0x40>)
 8001e4a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8001e4c:	f00e fab4 	bl	80103b8 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e50:	e7e8      	b.n	8001e24 <PMT_init+0x8>
 8001e52:	bf00      	nop
 8001e54:	24000664 	.word	0x24000664
 8001e58:	2400065a 	.word	0x2400065a
 8001e5c:	24000654 	.word	0x24000654

08001e60 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <ERPA_init+0x38>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e70:	2200      	movs	r2, #0
 8001e72:	2102      	movs	r1, #2
 8001e74:	f00e fb5e 	bl	8010534 <osEventFlagsWait>
	  if (ERPA_ON)
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <ERPA_init+0x3c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8001e80:	f7ff fda4 	bl	80019cc <sample_erpa>
		erpa_seq++;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <ERPA_init+0x40>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <ERPA_init+0x40>)
 8001e8e:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8001e90:	f00e fa92 	bl	80103b8 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001e94:	e7e8      	b.n	8001e68 <ERPA_init+0x8>
 8001e96:	bf00      	nop
 8001e98:	24000664 	.word	0x24000664
 8001e9c:	2400065b 	.word	0x2400065b
 8001ea0:	24000656 	.word	0x24000656

08001ea4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HK_init+0x38>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	f00e fb3c 	bl	8010534 <osEventFlagsWait>
	  if(HK_ON)
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HK_init+0x3c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HK_init+0x30>
	  {
	    sample_hk();
 8001ec4:	f7ff fe0e 	bl	8001ae4 <sample_hk>
		hk_seq++;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HK_init+0x40>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HK_init+0x40>)
 8001ed2:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8001ed4:	f00e fa70 	bl	80103b8 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001ed8:	e7e8      	b.n	8001eac <HK_init+0x8>
 8001eda:	bf00      	nop
 8001edc:	24000664 	.word	0x24000664
 8001ee0:	2400065c 	.word	0x2400065c
 8001ee4:	24000658 	.word	0x24000658

08001ee8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4904      	ldr	r1, [pc, #16]	; (8001f04 <UART_RX_init+0x1c>)
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <UART_RX_init+0x20>)
 8001ef6:	f00b fdef 	bl	800dad8 <HAL_UART_Receive_IT>
		osDelay(5);
 8001efa:	2005      	movs	r0, #5
 8001efc:	f00e fa7c 	bl	80103f8 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f00:	e7f6      	b.n	8001ef0 <UART_RX_init+0x8>
 8001f02:	bf00      	nop
 8001f04:	24000668 	.word	0x24000668
 8001f08:	240005a8 	.word	0x240005a8

08001f0c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <UART_TX_init+0x50>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	f107 010c 	add.w	r1, r7, #12
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f20:	2200      	movs	r2, #0
 8001f22:	f00e fc41 	bl	80107a8 <osMessageQueueGet>
 8001f26:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d113      	bne.n	8001f56 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <UART_TX_init+0x50>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00e fc96 	bl	8010864 <osMessageQueueGetCount>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4808      	ldr	r0, [pc, #32]	; (8001f60 <UART_TX_init+0x54>)
 8001f3e:	f011 fdf5 	bl	8013b2c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	8a3a      	ldrh	r2, [r7, #16]
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <UART_TX_init+0x58>)
 8001f4a:	f00b fd37 	bl	800d9bc <HAL_UART_Transmit>
	       free(msg.array);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f011 fced 	bl	8013930 <free>
	   }
	   osThreadYield();
 8001f56:	f00e fa2f 	bl	80103b8 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001f5a:	e7db      	b.n	8001f14 <UART_TX_init+0x8>
 8001f5c:	24000650 	.word	0x24000650
 8001f60:	08014b80 	.word	0x08014b80
 8001f64:	240005a8 	.word	0x240005a8

08001f68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f7a:	f000 feed 	bl	8002d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40001000 	.word	0x40001000

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_MspInit+0x38>)
 8001fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_MspInit+0x38>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_MspInit+0x38>)
 8001fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f06f 0001 	mvn.w	r0, #1
 8001fc4:	f002 fbd6 	bl	8004774 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	58024400 	.word	0x58024400

08001fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a7b      	ldr	r2, [pc, #492]	; (80021e0 <HAL_ADC_MspInit+0x20c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	f040 8091 	bne.w	800211a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ff8:	4b7a      	ldr	r3, [pc, #488]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8001ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ffe:	4a79      	ldr	r2, [pc, #484]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002000:	f043 0320 	orr.w	r3, r3, #32
 8002004:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002008:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 800200a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201c:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002026:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	4a6a      	ldr	r2, [pc, #424]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002044:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	4a62      	ldr	r2, [pc, #392]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002062:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002070:	2333      	movs	r3, #51	; 0x33
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002074:	2303      	movs	r3, #3
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	4619      	mov	r1, r3
 8002082:	4859      	ldr	r0, [pc, #356]	; (80021e8 <HAL_ADC_MspInit+0x214>)
 8002084:	f005 fde0 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002088:	23ce      	movs	r3, #206	; 0xce
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208c:	2303      	movs	r3, #3
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4854      	ldr	r0, [pc, #336]	; (80021ec <HAL_ADC_MspInit+0x218>)
 800209c:	f005 fdd4 	bl	8007c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020a0:	2303      	movs	r3, #3
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a4:	2303      	movs	r3, #3
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	484f      	ldr	r0, [pc, #316]	; (80021f0 <HAL_ADC_MspInit+0x21c>)
 80020b4:	f005 fdc8 	bl	8007c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80020b8:	4b4e      	ldr	r3, [pc, #312]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020ba:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <HAL_ADC_MspInit+0x224>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020c0:	2209      	movs	r2, #9
 80020c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c4:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020d0:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020e0:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020e8:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020f0:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020fc:	483d      	ldr	r0, [pc, #244]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 80020fe:	f002 ff67 	bl	8004fd0 <HAL_DMA_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002108:	f7ff ff40 	bl	8001f8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a39      	ldr	r2, [pc, #228]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
 8002112:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_ADC_MspInit+0x220>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002118:	e05e      	b.n	80021d8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a37      	ldr	r2, [pc, #220]	; (80021fc <HAL_ADC_MspInit+0x228>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d159      	bne.n	80021d8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	4a2e      	ldr	r2, [pc, #184]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_ADC_MspInit+0x210>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002160:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002164:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002168:	f000 fe22 	bl	8002db0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800216c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002170:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002174:	f000 fe1c 	bl	8002db0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_ADC_MspInit+0x230>)
 800217c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 8002180:	2273      	movs	r2, #115	; 0x73
 8002182:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 8002192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002196:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 800219a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80021bc:	4810      	ldr	r0, [pc, #64]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021be:	f002 ff07 	bl	8004fd0 <HAL_DMA_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80021c8:	f7ff fee0 	bl	8001f8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_ADC_MspInit+0x22c>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021d8:	bf00      	nop
 80021da:	3738      	adds	r7, #56	; 0x38
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40022000 	.word	0x40022000
 80021e4:	58024400 	.word	0x58024400
 80021e8:	58020800 	.word	0x58020800
 80021ec:	58020000 	.word	0x58020000
 80021f0:	58020400 	.word	0x58020400
 80021f4:	240001e4 	.word	0x240001e4
 80021f8:	40020010 	.word	0x40020010
 80021fc:	58026000 	.word	0x58026000
 8002200:	2400025c 	.word	0x2400025c
 8002204:	40020028 	.word	0x40020028

08002208 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_DAC_MspInit+0xf0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d161      	bne.n	80022ee <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_DAC_MspInit+0xf4>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_DAC_MspInit+0xf4>)
 8002232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_DAC_MspInit+0xf4>)
 800223c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_DAC_MspInit+0xf4>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_DAC_MspInit+0xf4>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <HAL_DAC_MspInit+0xf4>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002266:	2310      	movs	r3, #16
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226a:	2303      	movs	r3, #3
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4821      	ldr	r0, [pc, #132]	; (8002300 <HAL_DAC_MspInit+0xf8>)
 800227a:	f005 fce5 	bl	8007c48 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_DAC_MspInit+0x100>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 8002286:	2243      	movs	r2, #67	; 0x43
 8002288:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 8002298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80022c2:	4810      	ldr	r0, [pc, #64]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022c4:	f002 fe84 	bl	8004fd0 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80022ce:	f7ff fe5d 	bl	8001f8c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_DAC_MspInit+0xfc>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2105      	movs	r1, #5
 80022e2:	2036      	movs	r0, #54	; 0x36
 80022e4:	f002 fa46 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022e8:	2036      	movs	r0, #54	; 0x36
 80022ea:	f002 fa5d 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40007400 	.word	0x40007400
 80022fc:	58024400 	.word	0x58024400
 8002300:	58020000 	.word	0x58020000
 8002304:	240002e8 	.word	0x240002e8
 8002308:	40020088 	.word	0x40020088

0800230c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b0ba      	sub	sp, #232	; 0xe8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	22c0      	movs	r2, #192	; 0xc0
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f011 fb15 	bl	801395c <memset>
  if(hi2c->Instance==I2C1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_I2C_MspInit+0xc8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d146      	bne.n	80023ca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800233c:	f04f 0208 	mov.w	r2, #8
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4618      	mov	r0, r3
 8002354:	f006 ffd8 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800235e:	f7ff fe15 	bl	8001f8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_I2C_MspInit+0xcc>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_I2C_MspInit+0xcc>)
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_I2C_MspInit+0xcc>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002388:	2312      	movs	r3, #18
 800238a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800239a:	2304      	movs	r3, #4
 800239c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <HAL_I2C_MspInit+0xd0>)
 80023a8:	f005 fc4e 	bl	8007c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_I2C_MspInit+0xcc>)
 80023ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_I2C_MspInit+0xcc>)
 80023b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_I2C_MspInit+0xcc>)
 80023be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	37e8      	adds	r7, #232	; 0xe8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40005400 	.word	0x40005400
 80023d8:	58024400 	.word	0x58024400
 80023dc:	58020400 	.word	0x58020400

080023e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0bc      	sub	sp, #240	; 0xf0
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	22c0      	movs	r2, #192	; 0xc0
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f011 faab 	bl	801395c <memset>
  if(hspi->Instance==SPI1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_SPI_MspInit+0x15c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d145      	bne.n	800249c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800241c:	2300      	movs	r3, #0
 800241e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	4618      	mov	r0, r3
 8002426:	f006 ff6f 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002430:	f7ff fdac 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002434:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_SPI_MspInit+0x160>)
 8002436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800243a:	4a41      	ldr	r2, [pc, #260]	; (8002540 <HAL_SPI_MspInit+0x160>)
 800243c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002440:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002444:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <HAL_SPI_MspInit+0x160>)
 8002446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800244a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_SPI_MspInit+0x160>)
 8002454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002458:	4a39      	ldr	r2, [pc, #228]	; (8002540 <HAL_SPI_MspInit+0x160>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_SPI_MspInit+0x160>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002470:	2318      	movs	r3, #24
 8002472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002488:	2305      	movs	r3, #5
 800248a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002492:	4619      	mov	r1, r3
 8002494:	482b      	ldr	r0, [pc, #172]	; (8002544 <HAL_SPI_MspInit+0x164>)
 8002496:	f005 fbd7 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800249a:	e04a      	b.n	8002532 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <HAL_SPI_MspInit+0x168>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d145      	bne.n	8002532 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80024a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b6:	f107 0318 	add.w	r3, r7, #24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f006 ff24 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80024c6:	f7ff fd61 	bl	8001f8c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_SPI_MspInit+0x160>)
 80024cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_SPI_MspInit+0x160>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_SPI_MspInit+0x160>)
 80024dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_SPI_MspInit+0x160>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ee:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_SPI_MspInit+0x160>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_SPI_MspInit+0x160>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002506:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002520:	2305      	movs	r3, #5
 8002522:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <HAL_SPI_MspInit+0x164>)
 800252e:	f005 fb8b 	bl	8007c48 <HAL_GPIO_Init>
}
 8002532:	bf00      	nop
 8002534:	37f0      	adds	r7, #240	; 0xf0
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40013000 	.word	0x40013000
 8002540:	58024400 	.word	0x58024400
 8002544:	58020400 	.word	0x58020400
 8002548:	40003800 	.word	0x40003800

0800254c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a37      	ldr	r2, [pc, #220]	; (8002638 <HAL_TIM_Base_MspInit+0xec>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12f      	bne.n	80025be <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 8002560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002564:	4a35      	ldr	r2, [pc, #212]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 8002570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2105      	movs	r1, #5
 8002580:	2018      	movs	r0, #24
 8002582:	f002 f8f7 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002586:	2018      	movs	r0, #24
 8002588:	f002 f90e 	bl	80047a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2105      	movs	r1, #5
 8002590:	2019      	movs	r0, #25
 8002592:	f002 f8ef 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002596:	2019      	movs	r0, #25
 8002598:	f002 f906 	bl	80047a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2105      	movs	r1, #5
 80025a0:	201a      	movs	r0, #26
 80025a2:	f002 f8e7 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80025a6:	201a      	movs	r0, #26
 80025a8:	f002 f8fe 	bl	80047a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2105      	movs	r1, #5
 80025b0:	201b      	movs	r0, #27
 80025b2:	f002 f8df 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025b6:	201b      	movs	r0, #27
 80025b8:	f002 f8f6 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025bc:	e038      	b.n	8002630 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d117      	bne.n	80025f8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 80025ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ce:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 80025da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2105      	movs	r1, #5
 80025ea:	201c      	movs	r0, #28
 80025ec:	f002 f8c2 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025f0:	201c      	movs	r0, #28
 80025f2:	f002 f8d9 	bl	80047a8 <HAL_NVIC_EnableIRQ>
}
 80025f6:	e01b      	b.n	8002630 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_TIM_Base_MspInit+0xf4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d116      	bne.n	8002630 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 8002604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_TIM_Base_MspInit+0xf0>)
 8002614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2105      	movs	r1, #5
 8002624:	201d      	movs	r0, #29
 8002626:	f002 f8a5 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800262a:	201d      	movs	r0, #29
 800262c:	f002 f8bc 	bl	80047a8 <HAL_NVIC_EnableIRQ>
}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40010000 	.word	0x40010000
 800263c:	58024400 	.word	0x58024400
 8002640:	40000400 	.word	0x40000400

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_TIM_MspPostInit+0xb8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d120      	bne.n	80026a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_TIM_MspPostInit+0xbc>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a24      	ldr	r2, [pc, #144]	; (8002700 <HAL_TIM_MspPostInit+0xbc>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_TIM_MspPostInit+0xbc>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4818      	ldr	r0, [pc, #96]	; (8002704 <HAL_TIM_MspPostInit+0xc0>)
 80026a2:	f005 fad1 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026a6:	e024      	b.n	80026f2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d11f      	bne.n	80026f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_TIM_MspPostInit+0xbc>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_TIM_MspPostInit+0xbc>)
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_TIM_MspPostInit+0xbc>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026e2:	2301      	movs	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4806      	ldr	r0, [pc, #24]	; (8002708 <HAL_TIM_MspPostInit+0xc4>)
 80026ee:	f005 faab 	bl	8007c48 <HAL_GPIO_Init>
}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40010000 	.word	0x40010000
 8002700:	58024400 	.word	0x58024400
 8002704:	58020000 	.word	0x58020000
 8002708:	58020400 	.word	0x58020400

0800270c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b0ba      	sub	sp, #232	; 0xe8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	22c0      	movs	r2, #192	; 0xc0
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f011 f915 	bl	801395c <memset>
  if(huart->Instance==USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_UART_MspInit+0xd8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d14e      	bne.n	80027da <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800273c:	f04f 0201 	mov.w	r2, #1
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4618      	mov	r0, r3
 8002754:	f006 fdd8 	bl	8009308 <HAL_RCCEx_PeriphCLKConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800275e:	f7ff fc15 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_UART_MspInit+0xdc>)
 8002764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_UART_MspInit+0xdc>)
 800276a:	f043 0310 	orr.w	r3, r3, #16
 800276e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_UART_MspInit+0xdc>)
 8002774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_UART_MspInit+0xdc>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_UART_MspInit+0xdc>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_UART_MspInit+0xdc>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800279e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b8:	2307      	movs	r3, #7
 80027ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_UART_MspInit+0xe0>)
 80027c6:	f005 fa3f 	bl	8007c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2105      	movs	r1, #5
 80027ce:	2025      	movs	r0, #37	; 0x25
 80027d0:	f001 ffd0 	bl	8004774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027d4:	2025      	movs	r0, #37	; 0x25
 80027d6:	f001 ffe7 	bl	80047a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	37e8      	adds	r7, #232	; 0xe8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40011000 	.word	0x40011000
 80027e8:	58024400 	.word	0x58024400
 80027ec:	58020000 	.word	0x58020000

080027f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b090      	sub	sp, #64	; 0x40
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	d827      	bhi.n	800284e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80027fe:	2200      	movs	r2, #0
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	2036      	movs	r0, #54	; 0x36
 8002804:	f001 ffb6 	bl	8004774 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002808:	2036      	movs	r0, #54	; 0x36
 800280a:	f001 ffcd 	bl	80047a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <HAL_InitTick+0xc4>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_InitTick+0xc8>)
 8002816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800281a:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_InitTick+0xc8>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_InitTick+0xc8>)
 8002826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002832:	f107 0210 	add.w	r2, r7, #16
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f006 fd21 	bl	8009284 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_InitTick+0x6a>
 800284c:	e001      	b.n	8002852 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e02b      	b.n	80028aa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002852:	f006 fceb 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 8002856:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002858:	e004      	b.n	8002864 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800285a:	f006 fce7 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800285e:	4603      	mov	r3, r0
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <HAL_InitTick+0xcc>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0c9b      	lsrs	r3, r3, #18
 800286e:	3b01      	subs	r3, #1
 8002870:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_InitTick+0xd0>)
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_InitTick+0xd4>)
 8002876:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_InitTick+0xd0>)
 800287a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800287e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002880:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <HAL_InitTick+0xd0>)
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_InitTick+0xd0>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_InitTick+0xd0>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002892:	480b      	ldr	r0, [pc, #44]	; (80028c0 <HAL_InitTick+0xd0>)
 8002894:	f009 fb75 	bl	800bf82 <HAL_TIM_Base_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <HAL_InitTick+0xd0>)
 80028a0:	f009 fc5e 	bl	800c160 <HAL_TIM_Base_Start_IT>
 80028a4:	4603      	mov	r3, r0
 80028a6:	e000      	b.n	80028aa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3740      	adds	r7, #64	; 0x40
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	24000090 	.word	0x24000090
 80028b8:	58024400 	.word	0x58024400
 80028bc:	431bde83 	.word	0x431bde83
 80028c0:	24000708 	.word	0x24000708
 80028c4:	40001000 	.word	0x40001000

080028c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028cc:	e7fe      	b.n	80028cc <NMI_Handler+0x4>

080028ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <MemManage_Handler+0x4>

080028da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <DMA1_Stream0_IRQHandler+0x10>)
 80028fa:	f003 fe93 	bl	8006624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	240001e4 	.word	0x240001e4

08002908 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <DMA1_Stream1_IRQHandler+0x10>)
 800290e:	f003 fe89 	bl	8006624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2400025c 	.word	0x2400025c

0800291c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <DMA1_Stream5_IRQHandler+0x10>)
 8002922:	f003 fe7f 	bl	8006624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	240002e8 	.word	0x240002e8

08002930 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <TIM1_BRK_IRQHandler+0x10>)
 8002936:	f009 ff55 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	240004c4 	.word	0x240004c4

08002944 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <TIM1_UP_IRQHandler+0x10>)
 800294a:	f009 ff4b 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	240004c4 	.word	0x240004c4

08002958 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM1_TRG_COM_IRQHandler+0x10>)
 800295e:	f009 ff41 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	240004c4 	.word	0x240004c4

0800296c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <TIM1_CC_IRQHandler+0x10>)
 8002972:	f009 ff37 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	240004c4 	.word	0x240004c4

08002980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM2_IRQHandler+0x10>)
 8002986:	f009 ff2d 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	24000510 	.word	0x24000510

08002994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <TIM3_IRQHandler+0x10>)
 800299a:	f009 ff23 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2400055c 	.word	0x2400055c

080029a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <USART1_IRQHandler+0x10>)
 80029ae:	f00b f8df 	bl	800db70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	240005a8 	.word	0x240005a8

080029bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <TIM6_DAC_IRQHandler+0x20>)
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80029ca:	4804      	ldr	r0, [pc, #16]	; (80029dc <TIM6_DAC_IRQHandler+0x20>)
 80029cc:	f002 f881 	bl	8004ad2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <TIM6_DAC_IRQHandler+0x24>)
 80029d2:	f009 ff07 	bl	800c7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	240002d4 	.word	0x240002d4
 80029e0:	24000708 	.word	0x24000708

080029e4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <ITM_SendChar+0x48>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <ITM_SendChar+0x48>)
 80029f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <ITM_SendChar+0x4c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <ITM_SendChar+0x4c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002a06:	bf00      	nop
 8002a08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f8      	beq.n	8002a08 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002a16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000edfc 	.word	0xe000edfc
 8002a30:	e0000e00 	.word	0xe0000e00

08002a34 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e00a      	b.n	8002a5c <_read+0x28>
		*ptr++ = __io_getchar();
 8002a46:	f3af 8000 	nop.w
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	60ba      	str	r2, [r7, #8]
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf0      	blt.n	8002a46 <_read+0x12>
	}

	return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e009      	b.n	8002a94 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ffab 	bl	80029e4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	dbf1      	blt.n	8002a80 <_write+0x12>
	}
	return len;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_close>:

int _close(int file) {
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_fstat>:

int _fstat(int file, struct stat *st) {
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ace:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_isatty>:

int _isatty(int file) {
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <_sbrk+0x64>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <_sbrk+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <_sbrk+0x40>
		errno = ENOMEM;
 8002b40:	f010 fec4 	bl	80138cc <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	220c      	movs	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4e:	e009      	b.n	8002b64 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <_sbrk+0x64>)
 8002b60:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	24080000 	.word	0x24080000
 8002b70:	00000400 	.word	0x00000400
 8002b74:	24000754 	.word	0x24000754
 8002b78:	240050c0 	.word	0x240050c0

08002b7c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <SystemInit+0xe4>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	4a36      	ldr	r2, [pc, #216]	; (8002c60 <SystemInit+0xe4>)
 8002b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002b90:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <SystemInit+0xe8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d807      	bhi.n	8002bac <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002b9c:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <SystemInit+0xe8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 030f 	bic.w	r3, r3, #15
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <SystemInit+0xe8>)
 8002ba6:	f043 0307 	orr.w	r3, r3, #7
 8002baa:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <SystemInit+0xec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <SystemInit+0xec>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <SystemInit+0xec>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <SystemInit+0xec>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4929      	ldr	r1, [pc, #164]	; (8002c68 <SystemInit+0xec>)
 8002bc4:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <SystemInit+0xf0>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <SystemInit+0xe8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <SystemInit+0xe8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 030f 	bic.w	r3, r3, #15
 8002bde:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <SystemInit+0xe8>)
 8002be0:	f043 0307 	orr.w	r3, r3, #7
 8002be4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <SystemInit+0xec>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <SystemInit+0xec>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <SystemInit+0xec>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <SystemInit+0xec>)
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <SystemInit+0xf4>)
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <SystemInit+0xec>)
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <SystemInit+0xf8>)
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <SystemInit+0xec>)
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <SystemInit+0xfc>)
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <SystemInit+0xec>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <SystemInit+0xec>)
 8002c12:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <SystemInit+0xfc>)
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <SystemInit+0xec>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <SystemInit+0xec>)
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <SystemInit+0xfc>)
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <SystemInit+0xec>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <SystemInit+0xec>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <SystemInit+0xec>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <SystemInit+0xec>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <SystemInit+0x100>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <SystemInit+0x104>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c46:	d202      	bcs.n	8002c4e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <SystemInit+0x108>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <SystemInit+0x10c>)
 8002c50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	52002000 	.word	0x52002000
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c70:	02020200 	.word	0x02020200
 8002c74:	01ff0000 	.word	0x01ff0000
 8002c78:	01010280 	.word	0x01010280
 8002c7c:	5c001000 	.word	0x5c001000
 8002c80:	ffff0000 	.word	0xffff0000
 8002c84:	51008108 	.word	0x51008108
 8002c88:	52004000 	.word	0x52004000

08002c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c90:	f7ff ff74 	bl	8002b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c96:	490d      	ldr	r1, [pc, #52]	; (8002ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cac:	4c0a      	ldr	r4, [pc, #40]	; (8002cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cba:	f010 fe0d 	bl	80138d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cbe:	f7fd ff4b 	bl	8000b58 <main>
  bx  lr
 8002cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ccc:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002cd0:	08014d4c 	.word	0x08014d4c
  ldr r2, =_sbss
 8002cd4:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002cd8:	240050bc 	.word	0x240050bc

08002cdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC3_IRQHandler>
	...

08002ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	f001 fd39 	bl	800475e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cec:	f006 f8f4 	bl	8008ed8 <HAL_RCC_GetSysClockFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_Init+0x68>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	4913      	ldr	r1, [pc, #76]	; (8002d4c <HAL_Init+0x6c>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_Init+0x68>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_Init+0x6c>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_Init+0x70>)
 8002d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d24:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <HAL_Init+0x74>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d2a:	2005      	movs	r0, #5
 8002d2c:	f7ff fd60 	bl	80027f0 <HAL_InitTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e002      	b.n	8002d40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d3a:	f7ff f92d 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	08014c64 	.word	0x08014c64
 8002d50:	2400008c 	.word	0x2400008c
 8002d54:	24000088 	.word	0x24000088

08002d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	24000094 	.word	0x24000094
 8002d7c:	24000758 	.word	0x24000758

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	24000758 	.word	0x24000758

08002d98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetREVID+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0c1b      	lsrs	r3, r3, #16
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	5c001000 	.word	0x5c001000

08002db0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	4904      	ldr	r1, [pc, #16]	; (8002dd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	58000400 	.word	0x58000400

08002ddc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3360      	adds	r3, #96	; 0x60
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	611a      	str	r2, [r3, #16]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3360      	adds	r3, #96	; 0x60
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	601a      	str	r2, [r3, #0]
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b087      	sub	sp, #28
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3330      	adds	r3, #48	; 0x30
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	4413      	add	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	211f      	movs	r1, #31
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	401a      	ands	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0e9b      	lsrs	r3, r3, #26
 8002f4a:	f003 011f 	and.w	r1, r3, #31
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f023 0203 	bic.w	r2, r3, #3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	0e5b      	lsrs	r3, r3, #25
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	4413      	add	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	0d1b      	lsrs	r3, r3, #20
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2107      	movs	r1, #7
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	0d1b      	lsrs	r3, r3, #20
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003000:	43db      	mvns	r3, r3
 8003002:	401a      	ands	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0318 	and.w	r3, r3, #24
 800300a:	4908      	ldr	r1, [pc, #32]	; (800302c <LL_ADC_SetChannelSingleDiff+0x44>)
 800300c:	40d9      	lsrs	r1, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	400b      	ands	r3, r1
 8003012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003016:	431a      	orrs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	000fffff 	.word	0x000fffff

08003030 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 031f 	and.w	r3, r3, #31
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <LL_ADC_DisableDeepPowerDown+0x20>)
 800305a:	4013      	ands	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6093      	str	r3, [r2, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	5fffffc0 	.word	0x5fffffc0

08003070 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d101      	bne.n	800308a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <LL_ADC_EnableInternalRegulator+0x24>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	6fffffc0 	.word	0x6fffffc0

080030c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d4:	d101      	bne.n	80030da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <LL_ADC_Enable+0x24>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	7fffffc0 	.word	0x7fffffc0

08003110 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <LL_ADC_Disable+0x24>)
 800311e:	4013      	ands	r3, r2
 8003120:	f043 0202 	orr.w	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	7fffffc0 	.word	0x7fffffc0

08003138 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <LL_ADC_IsEnabled+0x18>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <LL_ADC_IsEnabled+0x1a>
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d101      	bne.n	8003176 <LL_ADC_IsDisableOngoing+0x18>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_IsDisableOngoing+0x1a>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <LL_ADC_REG_StartConversion+0x24>)
 8003192:	4013      	ands	r3, r2
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	7fffffc0 	.word	0x7fffffc0

080031ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d101      	bne.n	80031c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d101      	bne.n	80031ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e18f      	b.n	8003532 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fe fed7 	bl	8001fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff19 	bl	8003070 <LL_ADC_IsDeepPowerDownEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff feff 	bl	800304c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff34 	bl	80030c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d114      	bne.n	8003288 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff18 	bl	8003098 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003268:	4b87      	ldr	r3, [pc, #540]	; (8003488 <HAL_ADC_Init+0x290>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	4a87      	ldr	r2, [pc, #540]	; (800348c <HAL_ADC_Init+0x294>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800327a:	e002      	b.n	8003282 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	3b01      	subs	r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f9      	bne.n	800327c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff17 	bl	80030c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	f043 0210 	orr.w	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff77 	bl	80031ac <LL_ADC_REG_IsConversionOngoing>
 80032be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f040 8129 	bne.w	8003520 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 8125 	bne.w	8003520 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff24 	bl	8003138 <LL_ADC_IsEnabled>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d136      	bne.n	8003364 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a65      	ldr	r2, [pc, #404]	; (8003490 <HAL_ADC_Init+0x298>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_ADC_Init+0x112>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_ADC_Init+0x29c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10e      	bne.n	8003328 <HAL_ADC_Init+0x130>
 800330a:	4861      	ldr	r0, [pc, #388]	; (8003490 <HAL_ADC_Init+0x298>)
 800330c:	f7ff ff14 	bl	8003138 <LL_ADC_IsEnabled>
 8003310:	4604      	mov	r4, r0
 8003312:	4860      	ldr	r0, [pc, #384]	; (8003494 <HAL_ADC_Init+0x29c>)
 8003314:	f7ff ff10 	bl	8003138 <LL_ADC_IsEnabled>
 8003318:	4603      	mov	r3, r0
 800331a:	4323      	orrs	r3, r4
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e008      	b.n	800333a <HAL_ADC_Init+0x142>
 8003328:	485b      	ldr	r0, [pc, #364]	; (8003498 <HAL_ADC_Init+0x2a0>)
 800332a:	f7ff ff05 	bl	8003138 <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a53      	ldr	r2, [pc, #332]	; (8003490 <HAL_ADC_Init+0x298>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_ADC_Init+0x15a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a51      	ldr	r2, [pc, #324]	; (8003494 <HAL_ADC_Init+0x29c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_ADC_Init+0x15e>
 8003352:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_ADC_Init+0x2a4>)
 8003354:	e000      	b.n	8003358 <HAL_ADC_Init+0x160>
 8003356:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_ADC_Init+0x2a8>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f7ff fd3c 	bl	8002ddc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003364:	f7ff fd18 	bl	8002d98 <HAL_GetREVID>
 8003368:	4603      	mov	r3, r0
 800336a:	f241 0203 	movw	r2, #4099	; 0x1003
 800336e:	4293      	cmp	r3, r2
 8003370:	d914      	bls.n	800339c <HAL_ADC_Init+0x1a4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d110      	bne.n	800339c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7d5b      	ldrb	r3, [r3, #21]
 800337e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003384:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800338a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7f1b      	ldrb	r3, [r3, #28]
 8003390:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003392:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003394:	f043 030c 	orr.w	r3, r3, #12
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e00d      	b.n	80033b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7d5b      	ldrb	r3, [r3, #21]
 80033a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7f1b      	ldrb	r3, [r3, #28]
 80033b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7f1b      	ldrb	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	045b      	lsls	r3, r3, #17
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_ADC_Init+0x2ac>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	69b9      	ldr	r1, [r7, #24]
 80033fa:	430b      	orrs	r3, r1
 80033fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fed2 	bl	80031ac <LL_ADC_REG_IsConversionOngoing>
 8003408:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fedf 	bl	80031d2 <LL_ADC_INJ_IsConversionOngoing>
 8003414:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d15f      	bne.n	80034dc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d15c      	bne.n	80034dc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7d1b      	ldrb	r3, [r3, #20]
 8003426:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_ADC_Init+0x2b0>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	69b9      	ldr	r1, [r7, #24]
 8003440:	430b      	orrs	r3, r1
 8003442:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800344a:	2b01      	cmp	r3, #1
 800344c:	d130      	bne.n	80034b0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_ADC_Init+0x2b4>)
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003462:	3a01      	subs	r2, #1
 8003464:	0411      	lsls	r1, r2, #16
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003476:	430a      	orrs	r2, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	611a      	str	r2, [r3, #16]
 8003484:	e01c      	b.n	80034c0 <HAL_ADC_Init+0x2c8>
 8003486:	bf00      	nop
 8003488:	24000088 	.word	0x24000088
 800348c:	053e2d63 	.word	0x053e2d63
 8003490:	40022000 	.word	0x40022000
 8003494:	40022100 	.word	0x40022100
 8003498:	58026000 	.word	0x58026000
 800349c:	40022300 	.word	0x40022300
 80034a0:	58026300 	.word	0x58026300
 80034a4:	fff0c003 	.word	0xfff0c003
 80034a8:	ffffbffc 	.word	0xffffbffc
 80034ac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fdec 	bl	80040b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10c      	bne.n	80034fe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f023 010f 	bic.w	r1, r3, #15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
 80034fc:	e007      	b.n	800350e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 020f 	bic.w	r2, r2, #15
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
 800351e:	e007      	b.n	8003530 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003530:	7ffb      	ldrb	r3, [r7, #31]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop

0800353c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a55      	ldr	r2, [pc, #340]	; (80036a4 <HAL_ADC_Start_DMA+0x168>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_ADC_Start_DMA+0x20>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a54      	ldr	r2, [pc, #336]	; (80036a8 <HAL_ADC_Start_DMA+0x16c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_ADC_Start_DMA+0x24>
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_ADC_Start_DMA+0x170>)
 800355e:	e000      	b.n	8003562 <HAL_ADC_Start_DMA+0x26>
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_ADC_Start_DMA+0x174>)
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fd64 	bl	8003030 <LL_ADC_GetMultimode>
 8003568:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fe1c 	bl	80031ac <LL_ADC_REG_IsConversionOngoing>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 808c 	bne.w	8003694 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_ADC_Start_DMA+0x4e>
 8003586:	2302      	movs	r3, #2
 8003588:	e087      	b.n	800369a <HAL_ADC_Start_DMA+0x15e>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d002      	beq.n	80035a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	d170      	bne.n	8003686 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fc07 	bl	8003db8 <ADC_Enable>
 80035aa:	4603      	mov	r3, r0
 80035ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d163      	bne.n	800367c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035b8:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_ADC_Start_DMA+0x178>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a37      	ldr	r2, [pc, #220]	; (80036a8 <HAL_ADC_Start_DMA+0x16c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d002      	beq.n	80035d4 <HAL_ADC_Start_DMA+0x98>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	e000      	b.n	80035d6 <HAL_ADC_Start_DMA+0x9a>
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_ADC_Start_DMA+0x168>)
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	4293      	cmp	r3, r2
 80035dc:	d002      	beq.n	80035e4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	f023 0206 	bic.w	r2, r3, #6
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	659a      	str	r2, [r3, #88]	; 0x58
 8003608:	e002      	b.n	8003610 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_ADC_Start_DMA+0x17c>)
 8003616:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <HAL_ADC_Start_DMA+0x180>)
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <HAL_ADC_Start_DMA+0x184>)
 8003626:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	221c      	movs	r2, #28
 800362e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0210 	orr.w	r2, r2, #16
 8003646:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7ff fc89 	bl	8002f6a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3340      	adds	r3, #64	; 0x40
 8003662:	4619      	mov	r1, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f002 f80e 	bl	8005688 <HAL_DMA_Start_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fd85 	bl	8003184 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800367a:	e00d      	b.n	8003698 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003684:	e008      	b.n	8003698 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003692:	e001      	b.n	8003698 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003694:	2302      	movs	r3, #2
 8003696:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40022100 	.word	0x40022100
 80036ac:	40022300 	.word	0x40022300
 80036b0:	58026300 	.word	0x58026300
 80036b4:	fffff0fe 	.word	0xfffff0fe
 80036b8:	08003f8b 	.word	0x08003f8b
 80036bc:	08004063 	.word	0x08004063
 80036c0:	0800407f 	.word	0x0800407f

080036c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b0a1      	sub	sp, #132	; 0x84
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_ADC_ConfigChannel+0x1b0>)
 800371a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADC_ConfigChannel+0x2a>
 8003726:	2302      	movs	r3, #2
 8003728:	e32e      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x688>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fd38 	bl	80031ac <LL_ADC_REG_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 8313 	bne.w	8003d6a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	db2c      	blt.n	80037a6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <HAL_ADC_ConfigChannel+0x6a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0e9b      	lsrs	r3, r3, #26
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	e016      	b.n	8003798 <HAL_ADC_ConfigChannel+0x98>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800377a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800377c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003782:	2320      	movs	r3, #32
 8003784:	e003      	b.n	800378e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003788:	fab3 f383 	clz	r3, r3
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	69d1      	ldr	r1, [r2, #28]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	430b      	orrs	r3, r1
 80037a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f7ff fbad 	bl	8002f12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fcf5 	bl	80031ac <LL_ADC_REG_IsConversionOngoing>
 80037c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fd02 	bl	80031d2 <LL_ADC_INJ_IsConversionOngoing>
 80037ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 80b8 	bne.w	8003948 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 80b4 	bne.w	8003948 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f7ff fbcf 	bl	8002f90 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <HAL_ADC_ConfigChannel+0x1b4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037fe:	d10b      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x118>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	e01d      	b.n	8003854 <HAL_ADC_ConfigChannel+0x154>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <HAL_ADC_ConfigChannel+0x13e>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	e00a      	b.n	8003854 <HAL_ADC_ConfigChannel+0x154>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d02c      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6919      	ldr	r1, [r3, #16]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800386c:	f7ff faea 	bl	8002e44 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6919      	ldr	r1, [r3, #16]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	7e5b      	ldrb	r3, [r3, #25]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x186>
 8003880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003884:	e000      	b.n	8003888 <HAL_ADC_ConfigChannel+0x188>
 8003886:	2300      	movs	r3, #0
 8003888:	461a      	mov	r2, r3
 800388a:	f7ff fb14 	bl	8002eb6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6919      	ldr	r1, [r3, #16]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	7e1b      	ldrb	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x1a4>
 800389e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x1a6>
 80038a4:	2300      	movs	r3, #0
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7ff faec 	bl	8002e84 <LL_ADC_SetDataRightShift>
 80038ac:	e04c      	b.n	8003948 <HAL_ADC_ConfigChannel+0x248>
 80038ae:	bf00      	nop
 80038b0:	47ff0000 	.word	0x47ff0000
 80038b4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	069b      	lsls	r3, r3, #26
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d107      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038da:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	069b      	lsls	r3, r3, #26
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038fe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003922:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003946:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fbf3 	bl	8003138 <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 8211 	bne.w	8003d7c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	461a      	mov	r2, r3
 8003968:	f7ff fb3e 	bl	8002fe8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4aa1      	ldr	r2, [pc, #644]	; (8003bf8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	f040 812e 	bne.w	8003bd4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x2a0>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0e9b      	lsrs	r3, r3, #26
 800398e:	3301      	adds	r3, #1
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2b09      	cmp	r3, #9
 8003996:	bf94      	ite	ls
 8003998:	2301      	movls	r3, #1
 800399a:	2300      	movhi	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e019      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x2d4>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e003      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80039bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2b09      	cmp	r3, #9
 80039cc:	bf94      	ite	ls
 80039ce:	2301      	movls	r3, #1
 80039d0:	2300      	movhi	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d079      	beq.n	8003acc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x2f4>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0e9b      	lsrs	r3, r3, #26
 80039ea:	3301      	adds	r3, #1
 80039ec:	069b      	lsls	r3, r3, #26
 80039ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f2:	e015      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x320>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a04:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e003      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	069b      	lsls	r3, r3, #26
 8003a1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x340>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	e017      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x370>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	e003      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	ea42 0103 	orr.w	r1, r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x396>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	3301      	adds	r3, #1
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	051b      	lsls	r3, r3, #20
 8003a94:	e018      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x3c8>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e003      	b.n	8003aba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	e07e      	b.n	8003bca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x3e8>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	3301      	adds	r3, #1
 8003ae0:	069b      	lsls	r3, r3, #26
 8003ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae6:	e015      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x414>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003b00:	2320      	movs	r3, #32
 8003b02:	e003      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	069b      	lsls	r3, r3, #26
 8003b10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x434>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	3301      	adds	r3, #1
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	e017      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x464>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	61bb      	str	r3, [r7, #24]
  return result;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e003      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	ea42 0103 	orr.w	r1, r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x490>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4613      	mov	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	3b1e      	subs	r3, #30
 8003b88:	051b      	lsls	r3, r3, #20
 8003b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	e01b      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x4c8>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	60fb      	str	r3, [r7, #12]
  return result;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003ba8:	2320      	movs	r3, #32
 8003baa:	e003      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f003 021f 	and.w	r2, r3, #31
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3b1e      	subs	r3, #30
 8003bc2:	051b      	lsls	r3, r3, #20
 8003bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7ff f9de 	bl	8002f90 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f280 80cf 	bge.w	8003d7c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <HAL_ADC_ConfigChannel+0x4fc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_ADC_ConfigChannel+0x4f2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_ADC_ConfigChannel+0x500>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10a      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x508>
 8003bf2:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <HAL_ADC_ConfigChannel+0x504>)
 8003bf4:	e009      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x50a>
 8003bf6:	bf00      	nop
 8003bf8:	47ff0000 	.word	0x47ff0000
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40022100 	.word	0x40022100
 8003c04:	40022300 	.word	0x40022300
 8003c08:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <HAL_ADC_ConfigChannel+0x690>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f90c 	bl	8002e28 <LL_ADC_GetCommonPathInternalCh>
 8003c10:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5f      	ldr	r2, [pc, #380]	; (8003d94 <HAL_ADC_ConfigChannel+0x694>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0x526>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <HAL_ADC_ConfigChannel+0x698>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10e      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x544>
 8003c26:	485b      	ldr	r0, [pc, #364]	; (8003d94 <HAL_ADC_ConfigChannel+0x694>)
 8003c28:	f7ff fa86 	bl	8003138 <LL_ADC_IsEnabled>
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	485a      	ldr	r0, [pc, #360]	; (8003d98 <HAL_ADC_ConfigChannel+0x698>)
 8003c30:	f7ff fa82 	bl	8003138 <LL_ADC_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4323      	orrs	r3, r4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e008      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x556>
 8003c44:	4855      	ldr	r0, [pc, #340]	; (8003d9c <HAL_ADC_ConfigChannel+0x69c>)
 8003c46:	f7ff fa77 	bl	8003138 <LL_ADC_IsEnabled>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d07d      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a50      	ldr	r2, [pc, #320]	; (8003da0 <HAL_ADC_ConfigChannel+0x6a0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d130      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x5c6>
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d12b      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a4a      	ldr	r2, [pc, #296]	; (8003d9c <HAL_ADC_ConfigChannel+0x69c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	f040 8081 	bne.w	8003d7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a45      	ldr	r2, [pc, #276]	; (8003d94 <HAL_ADC_ConfigChannel+0x694>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_ADC_ConfigChannel+0x58e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a43      	ldr	r2, [pc, #268]	; (8003d98 <HAL_ADC_ConfigChannel+0x698>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x592>
 8003c8e:	4a45      	ldr	r2, [pc, #276]	; (8003da4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c90:	e000      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x594>
 8003c92:	4a3f      	ldr	r2, [pc, #252]	; (8003d90 <HAL_ADC_ConfigChannel+0x690>)
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7ff f8b0 	bl	8002e02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_ADC_ConfigChannel+0x6a8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	4a40      	ldr	r2, [pc, #256]	; (8003dac <HAL_ADC_ConfigChannel+0x6ac>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cb6:	e002      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f9      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cc4:	e05a      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a39      	ldr	r2, [pc, #228]	; (8003db0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d11e      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x60e>
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d119      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <HAL_ADC_ConfigChannel+0x69c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d14b      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <HAL_ADC_ConfigChannel+0x694>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADC_ConfigChannel+0x5f8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <HAL_ADC_ConfigChannel+0x698>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x5fc>
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003cfa:	e000      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x5fe>
 8003cfc:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <HAL_ADC_ConfigChannel+0x690>)
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7ff f87b 	bl	8002e02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d0c:	e036      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <HAL_ADC_ConfigChannel+0x6b4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d131      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d12c      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <HAL_ADC_ConfigChannel+0x69c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d127      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <HAL_ADC_ConfigChannel+0x694>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_ADC_ConfigChannel+0x640>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <HAL_ADC_ConfigChannel+0x698>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x644>
 8003d40:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003d42:	e000      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x646>
 8003d44:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <HAL_ADC_ConfigChannel+0x690>)
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f7ff f857 	bl	8002e02 <LL_ADC_SetCommonPathInternalCh>
 8003d54:	e012      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d68:	e008      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3784      	adds	r7, #132	; 0x84
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd90      	pop	{r4, r7, pc}
 8003d90:	58026300 	.word	0x58026300
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40022100 	.word	0x40022100
 8003d9c:	58026000 	.word	0x58026000
 8003da0:	cb840000 	.word	0xcb840000
 8003da4:	40022300 	.word	0x40022300
 8003da8:	24000088 	.word	0x24000088
 8003dac:	053e2d63 	.word	0x053e2d63
 8003db0:	c7520000 	.word	0xc7520000
 8003db4:	cfb80000 	.word	0xcfb80000

08003db8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f9b7 	bl	8003138 <LL_ADC_IsEnabled>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d16e      	bne.n	8003eae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <ADC_Enable+0x100>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0210 	orr.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f043 0201 	orr.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e05a      	b.n	8003eb0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f972 	bl	80030e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e04:	f7fe ffbc 	bl	8002d80 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <ADC_Enable+0x104>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <ADC_Enable+0x66>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <ADC_Enable+0x108>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <ADC_Enable+0x6a>
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <ADC_Enable+0x10c>)
 8003e20:	e000      	b.n	8003e24 <ADC_Enable+0x6c>
 8003e22:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <ADC_Enable+0x110>)
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f903 	bl	8003030 <LL_ADC_GetMultimode>
 8003e2a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <ADC_Enable+0x108>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d002      	beq.n	8003e3c <ADC_Enable+0x84>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	e000      	b.n	8003e3e <ADC_Enable+0x86>
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <ADC_Enable+0x104>)
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02c      	beq.n	8003ea0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d130      	bne.n	8003eae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e4c:	e028      	b.n	8003ea0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f970 	bl	8003138 <LL_ADC_IsEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff f940 	bl	80030e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e68:	f7fe ff8a 	bl	8002d80 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d914      	bls.n	8003ea0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d00d      	beq.n	8003ea0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f043 0210 	orr.w	r2, r3, #16
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d1cf      	bne.n	8003e4e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	8000003f 	.word	0x8000003f
 8003ebc:	40022000 	.word	0x40022000
 8003ec0:	40022100 	.word	0x40022100
 8003ec4:	40022300 	.word	0x40022300
 8003ec8:	58026300 	.word	0x58026300

08003ecc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff f940 	bl	800315e <LL_ADC_IsDisableOngoing>
 8003ede:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f927 	bl	8003138 <LL_ADC_IsEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d047      	beq.n	8003f80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d144      	bne.n	8003f80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030d 	and.w	r3, r3, #13
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10c      	bne.n	8003f1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f901 	bl	8003110 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2203      	movs	r2, #3
 8003f14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f16:	f7fe ff33 	bl	8002d80 <HAL_GetTick>
 8003f1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f1c:	e029      	b.n	8003f72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e023      	b.n	8003f82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f3a:	f7fe ff21 	bl	8002d80 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d914      	bls.n	8003f72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	f043 0210 	orr.w	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e007      	b.n	8003f82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1dc      	bne.n	8003f3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d14b      	bne.n	800403c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d021      	beq.n	8004002 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe ff92 	bl	8002eec <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d032      	beq.n	8004034 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d12b      	bne.n	8004034 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11f      	bne.n	8004034 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
 8004000:	e018      	b.n	8004034 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff fb45 	bl	80036c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800403a:	e00e      	b.n	800405a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff fb4f 	bl	80036ec <HAL_ADC_ErrorCallback>
}
 800404e:	e004      	b.n	800405a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff fb31 	bl	80036d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff fb21 	bl	80036ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a7a      	ldr	r2, [pc, #488]	; (80042ac <ADC_ConfigureBoostMode+0x1f8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <ADC_ConfigureBoostMode+0x1c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a79      	ldr	r2, [pc, #484]	; (80042b0 <ADC_ConfigureBoostMode+0x1fc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <ADC_ConfigureBoostMode+0x30>
 80040d0:	4b78      	ldr	r3, [pc, #480]	; (80042b4 <ADC_ConfigureBoostMode+0x200>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e008      	b.n	80040f6 <ADC_ConfigureBoostMode+0x42>
 80040e4:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <ADC_ConfigureBoostMode+0x204>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01c      	beq.n	8004134 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80040fa:	f005 f867 	bl	80091cc <HAL_RCC_GetHCLKFreq>
 80040fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004108:	d010      	beq.n	800412c <ADC_ConfigureBoostMode+0x78>
 800410a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800410e:	d873      	bhi.n	80041f8 <ADC_ConfigureBoostMode+0x144>
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d002      	beq.n	800411c <ADC_ConfigureBoostMode+0x68>
 8004116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411a:	d16d      	bne.n	80041f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	60fb      	str	r3, [r7, #12]
        break;
 800412a:	e068      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	60fb      	str	r3, [r7, #12]
        break;
 8004132:	e064      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004134:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	f006 faee 	bl	800a71c <HAL_RCCEx_GetPeriphCLKFreq>
 8004140:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800414a:	d051      	beq.n	80041f0 <ADC_ConfigureBoostMode+0x13c>
 800414c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004150:	d854      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 8004152:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004156:	d047      	beq.n	80041e8 <ADC_ConfigureBoostMode+0x134>
 8004158:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800415c:	d84e      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 800415e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004162:	d03d      	beq.n	80041e0 <ADC_ConfigureBoostMode+0x12c>
 8004164:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004168:	d848      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 800416a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416e:	d033      	beq.n	80041d8 <ADC_ConfigureBoostMode+0x124>
 8004170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004174:	d842      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 8004176:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800417a:	d029      	beq.n	80041d0 <ADC_ConfigureBoostMode+0x11c>
 800417c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004180:	d83c      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 8004182:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004186:	d01a      	beq.n	80041be <ADC_ConfigureBoostMode+0x10a>
 8004188:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800418c:	d836      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 800418e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004192:	d014      	beq.n	80041be <ADC_ConfigureBoostMode+0x10a>
 8004194:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004198:	d830      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d00e      	beq.n	80041be <ADC_ConfigureBoostMode+0x10a>
 80041a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a4:	d82a      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 80041a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041aa:	d008      	beq.n	80041be <ADC_ConfigureBoostMode+0x10a>
 80041ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041b0:	d824      	bhi.n	80041fc <ADC_ConfigureBoostMode+0x148>
 80041b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041b6:	d002      	beq.n	80041be <ADC_ConfigureBoostMode+0x10a>
 80041b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041bc:	d11e      	bne.n	80041fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	0c9b      	lsrs	r3, r3, #18
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	60fb      	str	r3, [r7, #12]
        break;
 80041ce:	e016      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
        break;
 80041d6:	e012      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	60fb      	str	r3, [r7, #12]
        break;
 80041de:	e00e      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	60fb      	str	r3, [r7, #12]
        break;
 80041e6:	e00a      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	09db      	lsrs	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
        break;
 80041ee:	e006      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	60fb      	str	r3, [r7, #12]
        break;
 80041f6:	e002      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80041fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80041fe:	f7fe fdcb 	bl	8002d98 <HAL_GetREVID>
 8004202:	4603      	mov	r3, r0
 8004204:	f241 0203 	movw	r2, #4099	; 0x1003
 8004208:	4293      	cmp	r3, r2
 800420a:	d815      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <ADC_ConfigureBoostMode+0x208>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d908      	bls.n	8004226 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004222:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004224:	e03e      	b.n	80042a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004234:	609a      	str	r2, [r3, #8]
}
 8004236:	e035      	b.n	80042a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <ADC_ConfigureBoostMode+0x20c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d808      	bhi.n	8004258 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004254:	609a      	str	r2, [r3, #8]
}
 8004256:	e025      	b.n	80042a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <ADC_ConfigureBoostMode+0x210>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d80a      	bhi.n	8004276 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	e016      	b.n	80042a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <ADC_ConfigureBoostMode+0x214>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d80a      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	e007      	b.n	80042a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40022000 	.word	0x40022000
 80042b0:	40022100 	.word	0x40022100
 80042b4:	40022300 	.word	0x40022300
 80042b8:	58026300 	.word	0x58026300
 80042bc:	01312d00 	.word	0x01312d00
 80042c0:	005f5e10 	.word	0x005f5e10
 80042c4:	00bebc20 	.word	0x00bebc20
 80042c8:	017d7840 	.word	0x017d7840

080042cc <LL_ADC_IsEnabled>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <LL_ADC_IsEnabled+0x18>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <LL_ADC_IsEnabled+0x1a>
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <LL_ADC_StartCalibration>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <LL_ADC_StartCalibration+0x38>)
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004314:	430a      	orrs	r2, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	3ffeffc0 	.word	0x3ffeffc0

08004330 <LL_ADC_IsCalibrationOnGoing>:
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004344:	d101      	bne.n	800434a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_REG_IsConversionOngoing>:
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d101      	bne.n	8004370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_ADCEx_Calibration_Start+0x1e>
 800439a:	2302      	movs	r3, #2
 800439c:	e04c      	b.n	8004438 <HAL_ADCEx_Calibration_Start+0xb8>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fd90 	bl	8003ecc <ADC_Disable>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d135      	bne.n	8004422 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ba:	4b21      	ldr	r3, [pc, #132]	; (8004440 <HAL_ADCEx_Calibration_Start+0xc0>)
 80043bc:	4013      	ands	r3, r2
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ff90 	bl	80042f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043d4:	e014      	b.n	8004400 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_ADCEx_Calibration_Start+0xc4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d30d      	bcc.n	8004400 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f023 0312 	bic.w	r3, r3, #18
 80043ec:	f043 0210 	orr.w	r2, r3, #16
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e01b      	b.n	8004438 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff93 	bl	8004330 <LL_ADC_IsCalibrationOnGoing>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e2      	bne.n	80043d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
 8004420:	e005      	b.n	800442e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f043 0210 	orr.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	ffffeefd 	.word	0xffffeefd
 8004444:	25c3f800 	.word	0x25c3f800

08004448 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b09f      	sub	sp, #124	; 0x7c
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004462:	2302      	movs	r3, #2
 8004464:	e0be      	b.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004472:	2300      	movs	r3, #0
 8004474:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5c      	ldr	r2, [pc, #368]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d102      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004480:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	e001      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e09d      	b.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff54 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 80044b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff4e 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d17f      	bne.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d17c      	bne.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a47      	ldr	r2, [pc, #284]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a46      	ldr	r2, [pc, #280]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80044dc:	4b45      	ldr	r3, [pc, #276]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044de:	e000      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80044e0:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d039      	beq.n	8004560 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a38      	ldr	r2, [pc, #224]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10e      	bne.n	8004530 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004512:	4836      	ldr	r0, [pc, #216]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004514:	f7ff feda 	bl	80042cc <LL_ADC_IsEnabled>
 8004518:	4604      	mov	r4, r0
 800451a:	4835      	ldr	r0, [pc, #212]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800451c:	f7ff fed6 	bl	80042cc <LL_ADC_IsEnabled>
 8004520:	4603      	mov	r3, r0
 8004522:	4323      	orrs	r3, r4
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e008      	b.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004530:	4832      	ldr	r0, [pc, #200]	; (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004532:	f7ff fecb 	bl	80042cc <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d047      	beq.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800454c:	4013      	ands	r3, r2
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	6811      	ldr	r1, [r2, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	430a      	orrs	r2, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800455e:	e03a      	b.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10e      	bne.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004580:	481a      	ldr	r0, [pc, #104]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004582:	f7ff fea3 	bl	80042cc <LL_ADC_IsEnabled>
 8004586:	4604      	mov	r4, r0
 8004588:	4819      	ldr	r0, [pc, #100]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800458a:	f7ff fe9f 	bl	80042cc <LL_ADC_IsEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	4323      	orrs	r3, r4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf0c      	ite	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	2300      	movne	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	e008      	b.n	80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800459e:	4817      	ldr	r0, [pc, #92]	; (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80045a0:	f7ff fe94 	bl	80042cc <LL_ADC_IsEnabled>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d010      	beq.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045be:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045c0:	e009      	b.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80045d4:	e000      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045d6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	377c      	adds	r7, #124	; 0x7c
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd90      	pop	{r4, r7, pc}
 80045ec:	40022000 	.word	0x40022000
 80045f0:	40022100 	.word	0x40022100
 80045f4:	40022300 	.word	0x40022300
 80045f8:	58026300 	.word	0x58026300
 80045fc:	58026000 	.word	0x58026000
 8004600:	fffff0e0 	.word	0xfffff0e0

08004604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <__NVIC_SetPriorityGrouping+0x40>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 800462e:	4313      	orrs	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <__NVIC_SetPriorityGrouping+0x40>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60d3      	str	r3, [r2, #12]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00
 8004648:	05fa0000 	.word	0x05fa0000

0800464c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_GetPriorityGrouping+0x18>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0307 	and.w	r3, r3, #7
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db0b      	blt.n	8004692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4907      	ldr	r1, [pc, #28]	; (80046a0 <__NVIC_EnableIRQ+0x38>)
 8004682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2001      	movs	r0, #1
 800468a:	fa00 f202 	lsl.w	r2, r0, r2
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e100 	.word	0xe000e100

080046a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	db0a      	blt.n	80046ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	490c      	ldr	r1, [pc, #48]	; (80046f0 <__NVIC_SetPriority+0x4c>)
 80046be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	440b      	add	r3, r1
 80046c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046cc:	e00a      	b.n	80046e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4908      	ldr	r1, [pc, #32]	; (80046f4 <__NVIC_SetPriority+0x50>)
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	3b04      	subs	r3, #4
 80046dc:	0112      	lsls	r2, r2, #4
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	440b      	add	r3, r1
 80046e2:	761a      	strb	r2, [r3, #24]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000e100 	.word	0xe000e100
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f1c3 0307 	rsb	r3, r3, #7
 8004712:	2b04      	cmp	r3, #4
 8004714:	bf28      	it	cs
 8004716:	2304      	movcs	r3, #4
 8004718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3304      	adds	r3, #4
 800471e:	2b06      	cmp	r3, #6
 8004720:	d902      	bls.n	8004728 <NVIC_EncodePriority+0x30>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3b03      	subs	r3, #3
 8004726:	e000      	b.n	800472a <NVIC_EncodePriority+0x32>
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43da      	mvns	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	401a      	ands	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	43d9      	mvns	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004750:	4313      	orrs	r3, r2
         );
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ff4c 	bl	8004604 <__NVIC_SetPriorityGrouping>
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004782:	f7ff ff63 	bl	800464c <__NVIC_GetPriorityGrouping>
 8004786:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f7ff ffb3 	bl	80046f8 <NVIC_EncodePriority>
 8004792:	4602      	mov	r2, r0
 8004794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff82 	bl	80046a4 <__NVIC_SetPriority>
}
 80047a0:	bf00      	nop
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff56 	bl	8004668 <__NVIC_EnableIRQ>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e014      	b.n	8004800 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fd0e 	bl	8002208 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e046      	b.n	80048aa <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	795b      	ldrb	r3, [r3, #5]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_DAC_Start+0x20>
 8004824:	2302      	movs	r3, #2
 8004826:	e040      	b.n	80048aa <HAL_DAC_Start+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6819      	ldr	r1, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2201      	movs	r2, #1
 8004842:	409a      	lsls	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800485c:	2b02      	cmp	r3, #2
 800485e:	d11d      	bne.n	800489c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	e014      	b.n	800489c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2102      	movs	r1, #2
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0202 	orr.w	r2, r2, #2
 800489a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0a2      	b.n	8004a16 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	795b      	ldrb	r3, [r3, #5]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_DAC_Start_DMA+0x24>
 80048d8:	2302      	movs	r3, #2
 80048da:	e09c      	b.n	8004a16 <HAL_DAC_Start_DMA+0x15e>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2202      	movs	r2, #2
 80048e6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d129      	bne.n	8004942 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4a4b      	ldr	r2, [pc, #300]	; (8004a20 <HAL_DAC_Start_DMA+0x168>)
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	4a4a      	ldr	r2, [pc, #296]	; (8004a24 <HAL_DAC_Start_DMA+0x16c>)
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4a49      	ldr	r2, [pc, #292]	; (8004a28 <HAL_DAC_Start_DMA+0x170>)
 8004904:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004914:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_DAC_Start_DMA+0x6c>
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d005      	beq.n	800492e <HAL_DAC_Start_DMA+0x76>
 8004922:	e009      	b.n	8004938 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	613b      	str	r3, [r7, #16]
        break;
 800492c:	e033      	b.n	8004996 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	613b      	str	r3, [r7, #16]
        break;
 8004936:	e02e      	b.n	8004996 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3310      	adds	r3, #16
 800493e:	613b      	str	r3, [r7, #16]
        break;
 8004940:	e029      	b.n	8004996 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	4a39      	ldr	r2, [pc, #228]	; (8004a2c <HAL_DAC_Start_DMA+0x174>)
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <HAL_DAC_Start_DMA+0x178>)
 8004950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <HAL_DAC_Start_DMA+0x17c>)
 8004958:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004968:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_DAC_Start_DMA+0xc0>
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d005      	beq.n	8004982 <HAL_DAC_Start_DMA+0xca>
 8004976:	e009      	b.n	800498c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	613b      	str	r3, [r7, #16]
        break;
 8004980:	e009      	b.n	8004996 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3318      	adds	r3, #24
 8004988:	613b      	str	r3, [r7, #16]
        break;
 800498a:	e004      	b.n	8004996 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	331c      	adds	r3, #28
 8004992:	613b      	str	r3, [r7, #16]
        break;
 8004994:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d111      	bne.n	80049c0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6898      	ldr	r0, [r3, #8]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	f000 fe67 	bl	8005688 <HAL_DMA_Start_IT>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]
 80049be:	e010      	b.n	80049e2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80049ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68d8      	ldr	r0, [r3, #12]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	f000 fe55 	bl	8005688 <HAL_DMA_Start_IT>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2201      	movs	r2, #1
 80049fc:	409a      	lsls	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e005      	b.n	8004a14 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f043 0204 	orr.w	r2, r3, #4
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	08004ea9 	.word	0x08004ea9
 8004a24:	08004ecb 	.word	0x08004ecb
 8004a28:	08004ee7 	.word	0x08004ee7
 8004a2c:	08004f65 	.word	0x08004f65
 8004a30:	08004f87 	.word	0x08004f87
 8004a34:	08004fa3 	.word	0x08004fa3

08004a38 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e03e      	b.n	8004aca <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43da      	mvns	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	400a      	ands	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2201      	movs	r2, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	400a      	ands	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10d      	bne.n	8004aa8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f863 	bl	8005b5c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e00c      	b.n	8004ac2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 f855 	bl	8005b5c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004ac0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01d      	beq.n	8004b30 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f86f 	bl	8004c0e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01d      	beq.n	8004b76 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d018      	beq.n	8004b76 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f043 0202 	orr.w	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9ed 	bl	8004f50 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b087      	sub	sp, #28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e015      	b.n	8004bc6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4413      	add	r3, r2
 8004bac:	3308      	adds	r3, #8
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e004      	b.n	8004bbc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3314      	adds	r3, #20
 8004bba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_DAC_ConfigChannel+0x1e>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e12a      	b.n	8004e9c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	795b      	ldrb	r3, [r3, #5]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_DAC_ConfigChannel+0x2e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e124      	b.n	8004e9c <HAL_DAC_ConfigChannel+0x278>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d17a      	bne.n	8004d5c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c66:	f7fe f88b 	bl	8002d80 <HAL_GetTick>
 8004c6a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d13d      	bne.n	8004cee <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c72:	e018      	b.n	8004ca6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c74:	f7fe f884 	bl	8002d80 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d911      	bls.n	8004ca6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c88:	4b86      	ldr	r3, [pc, #536]	; (8004ea4 <HAL_DAC_ConfigChannel+0x280>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f043 0208 	orr.w	r2, r3, #8
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0fa      	b.n	8004e9c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cac:	4b7d      	ldr	r3, [pc, #500]	; (8004ea4 <HAL_DAC_ConfigChannel+0x280>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1df      	bne.n	8004c74 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	6992      	ldr	r2, [r2, #24]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8004cbe:	e020      	b.n	8004d02 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cc0:	f7fe f85e 	bl	8002d80 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d90f      	bls.n	8004cee <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da0a      	bge.n	8004cee <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f043 0208 	orr.w	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0d6      	b.n	8004e9c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dbe3      	blt.n	8004cc0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	6992      	ldr	r2, [r2, #24]
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	ea02 0103 	and.w	r1, r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	21ff      	movs	r1, #255	; 0xff
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	ea02 0103 	and.w	r1, r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	409a      	lsls	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d11d      	bne.n	8004da0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	221f      	movs	r2, #31
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2207      	movs	r2, #7
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d102      	bne.n	8004dca <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	e00f      	b.n	8004dea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d102      	bne.n	8004dd8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e008      	b.n	8004dea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004de0:	2301      	movs	r3, #1
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
 8004de4:	e001      	b.n	8004dea <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	400a      	ands	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	22c0      	movs	r2, #192	; 0xc0
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	400a      	ands	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3728      	adds	r7, #40	; 0x28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20008000 	.word	0x20008000

08004ea8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff fe8b 	bl	8004bd2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	711a      	strb	r2, [r3, #4]
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff fe84 	bl	8004be6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f043 0204 	orr.w	r2, r3, #4
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fe7a 	bl	8004bfa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	711a      	strb	r2, [r3, #4]
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff ffce 	bl	8004f14 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	711a      	strb	r2, [r3, #4]
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7ff ffc7 	bl	8004f28 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f043 0204 	orr.w	r2, r3, #4
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff ffbd 	bl	8004f3c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	711a      	strb	r2, [r3, #4]
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fd8:	f7fd fed2 	bl	8002d80 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e316      	b.n	8005616 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a66      	ldr	r2, [pc, #408]	; (8005188 <HAL_DMA_Init+0x1b8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d04a      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a65      	ldr	r2, [pc, #404]	; (800518c <HAL_DMA_Init+0x1bc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d045      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a63      	ldr	r2, [pc, #396]	; (8005190 <HAL_DMA_Init+0x1c0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d040      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a62      	ldr	r2, [pc, #392]	; (8005194 <HAL_DMA_Init+0x1c4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d03b      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a60      	ldr	r2, [pc, #384]	; (8005198 <HAL_DMA_Init+0x1c8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d036      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a5f      	ldr	r2, [pc, #380]	; (800519c <HAL_DMA_Init+0x1cc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d031      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5d      	ldr	r2, [pc, #372]	; (80051a0 <HAL_DMA_Init+0x1d0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d02c      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5c      	ldr	r2, [pc, #368]	; (80051a4 <HAL_DMA_Init+0x1d4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d027      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5a      	ldr	r2, [pc, #360]	; (80051a8 <HAL_DMA_Init+0x1d8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d022      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a59      	ldr	r2, [pc, #356]	; (80051ac <HAL_DMA_Init+0x1dc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d01d      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a57      	ldr	r2, [pc, #348]	; (80051b0 <HAL_DMA_Init+0x1e0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d018      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a56      	ldr	r2, [pc, #344]	; (80051b4 <HAL_DMA_Init+0x1e4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a54      	ldr	r2, [pc, #336]	; (80051b8 <HAL_DMA_Init+0x1e8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a53      	ldr	r2, [pc, #332]	; (80051bc <HAL_DMA_Init+0x1ec>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a51      	ldr	r2, [pc, #324]	; (80051c0 <HAL_DMA_Init+0x1f0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a50      	ldr	r2, [pc, #320]	; (80051c4 <HAL_DMA_Init+0x1f4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_DMA_Init+0xbc>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_DMA_Init+0xbe>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 813b 	beq.w	800530a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a37      	ldr	r2, [pc, #220]	; (8005188 <HAL_DMA_Init+0x1b8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d04a      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a36      	ldr	r2, [pc, #216]	; (800518c <HAL_DMA_Init+0x1bc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d045      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a34      	ldr	r2, [pc, #208]	; (8005190 <HAL_DMA_Init+0x1c0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d040      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a33      	ldr	r2, [pc, #204]	; (8005194 <HAL_DMA_Init+0x1c4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d03b      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a31      	ldr	r2, [pc, #196]	; (8005198 <HAL_DMA_Init+0x1c8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d036      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a30      	ldr	r2, [pc, #192]	; (800519c <HAL_DMA_Init+0x1cc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d031      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2e      	ldr	r2, [pc, #184]	; (80051a0 <HAL_DMA_Init+0x1d0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d02c      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <HAL_DMA_Init+0x1d4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d027      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2b      	ldr	r2, [pc, #172]	; (80051a8 <HAL_DMA_Init+0x1d8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d022      	beq.n	8005144 <HAL_DMA_Init+0x174>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <HAL_DMA_Init+0x1dc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d01d      	beq.n	8005144 <HAL_DMA_Init+0x174>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <HAL_DMA_Init+0x1e0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_DMA_Init+0x174>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <HAL_DMA_Init+0x1e4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <HAL_DMA_Init+0x174>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <HAL_DMA_Init+0x1e8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a24      	ldr	r2, [pc, #144]	; (80051bc <HAL_DMA_Init+0x1ec>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_DMA_Init+0x1f0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <HAL_DMA_Init+0x1f4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <HAL_DMA_Init+0x186>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e007      	b.n	8005166 <HAL_DMA_Init+0x196>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005166:	e02f      	b.n	80051c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005168:	f7fd fe0a 	bl	8002d80 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b05      	cmp	r3, #5
 8005174:	d928      	bls.n	80051c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2203      	movs	r2, #3
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e246      	b.n	8005616 <HAL_DMA_Init+0x646>
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1c8      	bne.n	8005168 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4b83      	ldr	r3, [pc, #524]	; (80053f0 <HAL_DMA_Init+0x420>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b04      	cmp	r3, #4
 800521a:	d107      	bne.n	800522c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	4313      	orrs	r3, r2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800522c:	4b71      	ldr	r3, [pc, #452]	; (80053f4 <HAL_DMA_Init+0x424>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b71      	ldr	r3, [pc, #452]	; (80053f8 <HAL_DMA_Init+0x428>)
 8005232:	4013      	ands	r3, r2
 8005234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005238:	d328      	bcc.n	800528c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b28      	cmp	r3, #40	; 0x28
 8005240:	d903      	bls.n	800524a <HAL_DMA_Init+0x27a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b2e      	cmp	r3, #46	; 0x2e
 8005248:	d917      	bls.n	800527a <HAL_DMA_Init+0x2aa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b3e      	cmp	r3, #62	; 0x3e
 8005250:	d903      	bls.n	800525a <HAL_DMA_Init+0x28a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b42      	cmp	r3, #66	; 0x42
 8005258:	d90f      	bls.n	800527a <HAL_DMA_Init+0x2aa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b46      	cmp	r3, #70	; 0x46
 8005260:	d903      	bls.n	800526a <HAL_DMA_Init+0x29a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b48      	cmp	r3, #72	; 0x48
 8005268:	d907      	bls.n	800527a <HAL_DMA_Init+0x2aa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b4e      	cmp	r3, #78	; 0x4e
 8005270:	d905      	bls.n	800527e <HAL_DMA_Init+0x2ae>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b52      	cmp	r3, #82	; 0x52
 8005278:	d801      	bhi.n	800527e <HAL_DMA_Init+0x2ae>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_DMA_Init+0x2b0>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d117      	bne.n	80052e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f002 fb33 	bl	8007934 <DMA_CheckFifoParam>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2240      	movs	r2, #64	; 0x40
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e197      	b.n	8005616 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f002 fa6e 	bl	80077d0 <DMA_CalcBaseAndBitshift>
 80052f4:	4603      	mov	r3, r0
 80052f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	223f      	movs	r2, #63	; 0x3f
 8005302:	409a      	lsls	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	e0cd      	b.n	80054a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3b      	ldr	r2, [pc, #236]	; (80053fc <HAL_DMA_Init+0x42c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d022      	beq.n	800535a <HAL_DMA_Init+0x38a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a39      	ldr	r2, [pc, #228]	; (8005400 <HAL_DMA_Init+0x430>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01d      	beq.n	800535a <HAL_DMA_Init+0x38a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a38      	ldr	r2, [pc, #224]	; (8005404 <HAL_DMA_Init+0x434>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_DMA_Init+0x38a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a36      	ldr	r2, [pc, #216]	; (8005408 <HAL_DMA_Init+0x438>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_DMA_Init+0x38a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a35      	ldr	r2, [pc, #212]	; (800540c <HAL_DMA_Init+0x43c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_DMA_Init+0x38a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_DMA_Init+0x440>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_DMA_Init+0x38a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a32      	ldr	r2, [pc, #200]	; (8005414 <HAL_DMA_Init+0x444>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_DMA_Init+0x38a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a30      	ldr	r2, [pc, #192]	; (8005418 <HAL_DMA_Init+0x448>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <HAL_DMA_Init+0x38e>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <HAL_DMA_Init+0x390>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8097 	beq.w	8005494 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a24      	ldr	r2, [pc, #144]	; (80053fc <HAL_DMA_Init+0x42c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d021      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <HAL_DMA_Init+0x430>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01c      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_DMA_Init+0x434>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d017      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <HAL_DMA_Init+0x438>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d012      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_DMA_Init+0x43c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00d      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_DMA_Init+0x440>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d008      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_DMA_Init+0x444>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <HAL_DMA_Init+0x3e4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_DMA_Init+0x448>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4b12      	ldr	r3, [pc, #72]	; (800541c <HAL_DMA_Init+0x44c>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d020      	beq.n	8005420 <HAL_DMA_Init+0x450>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d102      	bne.n	80053ec <HAL_DMA_Init+0x41c>
 80053e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053ea:	e01a      	b.n	8005422 <HAL_DMA_Init+0x452>
 80053ec:	2300      	movs	r3, #0
 80053ee:	e018      	b.n	8005422 <HAL_DMA_Init+0x452>
 80053f0:	fe10803f 	.word	0xfe10803f
 80053f4:	5c001000 	.word	0x5c001000
 80053f8:	ffff0000 	.word	0xffff0000
 80053fc:	58025408 	.word	0x58025408
 8005400:	5802541c 	.word	0x5802541c
 8005404:	58025430 	.word	0x58025430
 8005408:	58025444 	.word	0x58025444
 800540c:	58025458 	.word	0x58025458
 8005410:	5802546c 	.word	0x5802546c
 8005414:	58025480 	.word	0x58025480
 8005418:	58025494 	.word	0x58025494
 800541c:	fffe000f 	.word	0xfffe000f
 8005420:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68d2      	ldr	r2, [r2, #12]
 8005426:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005450:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	4b6e      	ldr	r3, [pc, #440]	; (8005620 <HAL_DMA_Init+0x650>)
 8005468:	4413      	add	r3, r2
 800546a:	4a6e      	ldr	r2, [pc, #440]	; (8005624 <HAL_DMA_Init+0x654>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	009a      	lsls	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f002 f9a9 	bl	80077d0 <DMA_CalcBaseAndBitshift>
 800547e:	4603      	mov	r3, r0
 8005480:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2201      	movs	r2, #1
 800548c:	409a      	lsls	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	e008      	b.n	80054a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2203      	movs	r2, #3
 800549e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0b7      	b.n	8005616 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a5f      	ldr	r2, [pc, #380]	; (8005628 <HAL_DMA_Init+0x658>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d072      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a5d      	ldr	r2, [pc, #372]	; (800562c <HAL_DMA_Init+0x65c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d06d      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5c      	ldr	r2, [pc, #368]	; (8005630 <HAL_DMA_Init+0x660>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d068      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5a      	ldr	r2, [pc, #360]	; (8005634 <HAL_DMA_Init+0x664>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d063      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a59      	ldr	r2, [pc, #356]	; (8005638 <HAL_DMA_Init+0x668>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d05e      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a57      	ldr	r2, [pc, #348]	; (800563c <HAL_DMA_Init+0x66c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d059      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a56      	ldr	r2, [pc, #344]	; (8005640 <HAL_DMA_Init+0x670>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d054      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a54      	ldr	r2, [pc, #336]	; (8005644 <HAL_DMA_Init+0x674>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d04f      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a53      	ldr	r2, [pc, #332]	; (8005648 <HAL_DMA_Init+0x678>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d04a      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a51      	ldr	r2, [pc, #324]	; (800564c <HAL_DMA_Init+0x67c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d045      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a50      	ldr	r2, [pc, #320]	; (8005650 <HAL_DMA_Init+0x680>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d040      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a4e      	ldr	r2, [pc, #312]	; (8005654 <HAL_DMA_Init+0x684>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d03b      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a4d      	ldr	r2, [pc, #308]	; (8005658 <HAL_DMA_Init+0x688>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d036      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4b      	ldr	r2, [pc, #300]	; (800565c <HAL_DMA_Init+0x68c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d031      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4a      	ldr	r2, [pc, #296]	; (8005660 <HAL_DMA_Init+0x690>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d02c      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a48      	ldr	r2, [pc, #288]	; (8005664 <HAL_DMA_Init+0x694>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d027      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a47      	ldr	r2, [pc, #284]	; (8005668 <HAL_DMA_Init+0x698>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d022      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a45      	ldr	r2, [pc, #276]	; (800566c <HAL_DMA_Init+0x69c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01d      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a44      	ldr	r2, [pc, #272]	; (8005670 <HAL_DMA_Init+0x6a0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d018      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a42      	ldr	r2, [pc, #264]	; (8005674 <HAL_DMA_Init+0x6a4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a41      	ldr	r2, [pc, #260]	; (8005678 <HAL_DMA_Init+0x6a8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3f      	ldr	r2, [pc, #252]	; (800567c <HAL_DMA_Init+0x6ac>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3e      	ldr	r2, [pc, #248]	; (8005680 <HAL_DMA_Init+0x6b0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3c      	ldr	r2, [pc, #240]	; (8005684 <HAL_DMA_Init+0x6b4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <HAL_DMA_Init+0x5ca>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_DMA_Init+0x5cc>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d032      	beq.n	8005606 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f002 fa43 	bl	8007a2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	d102      	bne.n	80055b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d010      	beq.n	80055f4 <HAL_DMA_Init+0x624>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d80c      	bhi.n	80055f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f002 fac0 	bl	8007b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	e008      	b.n	8005606 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	a7fdabf8 	.word	0xa7fdabf8
 8005624:	cccccccd 	.word	0xcccccccd
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8
 8005668:	58025408 	.word	0x58025408
 800566c:	5802541c 	.word	0x5802541c
 8005670:	58025430 	.word	0x58025430
 8005674:	58025444 	.word	0x58025444
 8005678:	58025458 	.word	0x58025458
 800567c:	5802546c 	.word	0x5802546c
 8005680:	58025480 	.word	0x58025480
 8005684:	58025494 	.word	0x58025494

08005688 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e226      	b.n	8005af2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_Start_IT+0x2a>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e21f      	b.n	8005af2 <HAL_DMA_Start_IT+0x46a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	f040 820a 	bne.w	8005adc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a68      	ldr	r2, [pc, #416]	; (800587c <HAL_DMA_Start_IT+0x1f4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04a      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a66      	ldr	r2, [pc, #408]	; (8005880 <HAL_DMA_Start_IT+0x1f8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d045      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a65      	ldr	r2, [pc, #404]	; (8005884 <HAL_DMA_Start_IT+0x1fc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a63      	ldr	r2, [pc, #396]	; (8005888 <HAL_DMA_Start_IT+0x200>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d03b      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a62      	ldr	r2, [pc, #392]	; (800588c <HAL_DMA_Start_IT+0x204>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d036      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a60      	ldr	r2, [pc, #384]	; (8005890 <HAL_DMA_Start_IT+0x208>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a5f      	ldr	r2, [pc, #380]	; (8005894 <HAL_DMA_Start_IT+0x20c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d02c      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5d      	ldr	r2, [pc, #372]	; (8005898 <HAL_DMA_Start_IT+0x210>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5c      	ldr	r2, [pc, #368]	; (800589c <HAL_DMA_Start_IT+0x214>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5a      	ldr	r2, [pc, #360]	; (80058a0 <HAL_DMA_Start_IT+0x218>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a59      	ldr	r2, [pc, #356]	; (80058a4 <HAL_DMA_Start_IT+0x21c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a57      	ldr	r2, [pc, #348]	; (80058a8 <HAL_DMA_Start_IT+0x220>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a56      	ldr	r2, [pc, #344]	; (80058ac <HAL_DMA_Start_IT+0x224>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a54      	ldr	r2, [pc, #336]	; (80058b0 <HAL_DMA_Start_IT+0x228>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a53      	ldr	r2, [pc, #332]	; (80058b4 <HAL_DMA_Start_IT+0x22c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_Start_IT+0xee>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a51      	ldr	r2, [pc, #324]	; (80058b8 <HAL_DMA_Start_IT+0x230>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <HAL_DMA_Start_IT+0x100>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e007      	b.n	8005798 <HAL_DMA_Start_IT+0x110>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f001 fe6a 	bl	8007478 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a34      	ldr	r2, [pc, #208]	; (800587c <HAL_DMA_Start_IT+0x1f4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d04a      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a33      	ldr	r2, [pc, #204]	; (8005880 <HAL_DMA_Start_IT+0x1f8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d045      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a31      	ldr	r2, [pc, #196]	; (8005884 <HAL_DMA_Start_IT+0x1fc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d040      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a30      	ldr	r2, [pc, #192]	; (8005888 <HAL_DMA_Start_IT+0x200>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d03b      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2e      	ldr	r2, [pc, #184]	; (800588c <HAL_DMA_Start_IT+0x204>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d036      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2d      	ldr	r2, [pc, #180]	; (8005890 <HAL_DMA_Start_IT+0x208>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d031      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <HAL_DMA_Start_IT+0x20c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d02c      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2a      	ldr	r2, [pc, #168]	; (8005898 <HAL_DMA_Start_IT+0x210>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d027      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a28      	ldr	r2, [pc, #160]	; (800589c <HAL_DMA_Start_IT+0x214>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d022      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a27      	ldr	r2, [pc, #156]	; (80058a0 <HAL_DMA_Start_IT+0x218>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d01d      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <HAL_DMA_Start_IT+0x21c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <HAL_DMA_Start_IT+0x220>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a22      	ldr	r2, [pc, #136]	; (80058ac <HAL_DMA_Start_IT+0x224>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <HAL_DMA_Start_IT+0x228>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <HAL_DMA_Start_IT+0x22c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_DMA_Start_IT+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <HAL_DMA_Start_IT+0x230>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_DMA_Start_IT+0x1c0>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_DMA_Start_IT+0x1c2>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d036      	beq.n	80058bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 021e 	bic.w	r2, r3, #30
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0216 	orr.w	r2, r2, #22
 8005860:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d03e      	beq.n	80058e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0208 	orr.w	r2, r2, #8
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e035      	b.n	80058e8 <HAL_DMA_Start_IT+0x260>
 800587c:	40020010 	.word	0x40020010
 8005880:	40020028 	.word	0x40020028
 8005884:	40020040 	.word	0x40020040
 8005888:	40020058 	.word	0x40020058
 800588c:	40020070 	.word	0x40020070
 8005890:	40020088 	.word	0x40020088
 8005894:	400200a0 	.word	0x400200a0
 8005898:	400200b8 	.word	0x400200b8
 800589c:	40020410 	.word	0x40020410
 80058a0:	40020428 	.word	0x40020428
 80058a4:	40020440 	.word	0x40020440
 80058a8:	40020458 	.word	0x40020458
 80058ac:	40020470 	.word	0x40020470
 80058b0:	40020488 	.word	0x40020488
 80058b4:	400204a0 	.word	0x400204a0
 80058b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f023 020e 	bic.w	r2, r3, #14
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 020a 	orr.w	r2, r2, #10
 80058ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0204 	orr.w	r2, r2, #4
 80058e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a83      	ldr	r2, [pc, #524]	; (8005afc <HAL_DMA_Start_IT+0x474>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d072      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a82      	ldr	r2, [pc, #520]	; (8005b00 <HAL_DMA_Start_IT+0x478>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d06d      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a80      	ldr	r2, [pc, #512]	; (8005b04 <HAL_DMA_Start_IT+0x47c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d068      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a7f      	ldr	r2, [pc, #508]	; (8005b08 <HAL_DMA_Start_IT+0x480>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d063      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a7d      	ldr	r2, [pc, #500]	; (8005b0c <HAL_DMA_Start_IT+0x484>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d05e      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7c      	ldr	r2, [pc, #496]	; (8005b10 <HAL_DMA_Start_IT+0x488>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d059      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a7a      	ldr	r2, [pc, #488]	; (8005b14 <HAL_DMA_Start_IT+0x48c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d054      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a79      	ldr	r2, [pc, #484]	; (8005b18 <HAL_DMA_Start_IT+0x490>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04f      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a77      	ldr	r2, [pc, #476]	; (8005b1c <HAL_DMA_Start_IT+0x494>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d04a      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a76      	ldr	r2, [pc, #472]	; (8005b20 <HAL_DMA_Start_IT+0x498>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d045      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a74      	ldr	r2, [pc, #464]	; (8005b24 <HAL_DMA_Start_IT+0x49c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d040      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a73      	ldr	r2, [pc, #460]	; (8005b28 <HAL_DMA_Start_IT+0x4a0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d03b      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a71      	ldr	r2, [pc, #452]	; (8005b2c <HAL_DMA_Start_IT+0x4a4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d036      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a70      	ldr	r2, [pc, #448]	; (8005b30 <HAL_DMA_Start_IT+0x4a8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d031      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a6e      	ldr	r2, [pc, #440]	; (8005b34 <HAL_DMA_Start_IT+0x4ac>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d02c      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6d      	ldr	r2, [pc, #436]	; (8005b38 <HAL_DMA_Start_IT+0x4b0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d027      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6b      	ldr	r2, [pc, #428]	; (8005b3c <HAL_DMA_Start_IT+0x4b4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d022      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6a      	ldr	r2, [pc, #424]	; (8005b40 <HAL_DMA_Start_IT+0x4b8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01d      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a68      	ldr	r2, [pc, #416]	; (8005b44 <HAL_DMA_Start_IT+0x4bc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d018      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a67      	ldr	r2, [pc, #412]	; (8005b48 <HAL_DMA_Start_IT+0x4c0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a65      	ldr	r2, [pc, #404]	; (8005b4c <HAL_DMA_Start_IT+0x4c4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00e      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a64      	ldr	r2, [pc, #400]	; (8005b50 <HAL_DMA_Start_IT+0x4c8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d009      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a62      	ldr	r2, [pc, #392]	; (8005b54 <HAL_DMA_Start_IT+0x4cc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a61      	ldr	r2, [pc, #388]	; (8005b58 <HAL_DMA_Start_IT+0x4d0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d101      	bne.n	80059dc <HAL_DMA_Start_IT+0x354>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HAL_DMA_Start_IT+0x356>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01a      	beq.n	8005a18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a37      	ldr	r2, [pc, #220]	; (8005afc <HAL_DMA_Start_IT+0x474>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d04a      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a36      	ldr	r2, [pc, #216]	; (8005b00 <HAL_DMA_Start_IT+0x478>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d045      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a34      	ldr	r2, [pc, #208]	; (8005b04 <HAL_DMA_Start_IT+0x47c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d040      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a33      	ldr	r2, [pc, #204]	; (8005b08 <HAL_DMA_Start_IT+0x480>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d03b      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a31      	ldr	r2, [pc, #196]	; (8005b0c <HAL_DMA_Start_IT+0x484>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d036      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a30      	ldr	r2, [pc, #192]	; (8005b10 <HAL_DMA_Start_IT+0x488>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d031      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2e      	ldr	r2, [pc, #184]	; (8005b14 <HAL_DMA_Start_IT+0x48c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02c      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2d      	ldr	r2, [pc, #180]	; (8005b18 <HAL_DMA_Start_IT+0x490>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d027      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2b      	ldr	r2, [pc, #172]	; (8005b1c <HAL_DMA_Start_IT+0x494>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d022      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2a      	ldr	r2, [pc, #168]	; (8005b20 <HAL_DMA_Start_IT+0x498>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01d      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a28      	ldr	r2, [pc, #160]	; (8005b24 <HAL_DMA_Start_IT+0x49c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d018      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a27      	ldr	r2, [pc, #156]	; (8005b28 <HAL_DMA_Start_IT+0x4a0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a25      	ldr	r2, [pc, #148]	; (8005b2c <HAL_DMA_Start_IT+0x4a4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00e      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a24      	ldr	r2, [pc, #144]	; (8005b30 <HAL_DMA_Start_IT+0x4a8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d009      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <HAL_DMA_Start_IT+0x4ac>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x430>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <HAL_DMA_Start_IT+0x4b0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <HAL_DMA_Start_IT+0x442>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e012      	b.n	8005af0 <HAL_DMA_Start_IT+0x468>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e009      	b.n	8005af0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40020010 	.word	0x40020010
 8005b00:	40020028 	.word	0x40020028
 8005b04:	40020040 	.word	0x40020040
 8005b08:	40020058 	.word	0x40020058
 8005b0c:	40020070 	.word	0x40020070
 8005b10:	40020088 	.word	0x40020088
 8005b14:	400200a0 	.word	0x400200a0
 8005b18:	400200b8 	.word	0x400200b8
 8005b1c:	40020410 	.word	0x40020410
 8005b20:	40020428 	.word	0x40020428
 8005b24:	40020440 	.word	0x40020440
 8005b28:	40020458 	.word	0x40020458
 8005b2c:	40020470 	.word	0x40020470
 8005b30:	40020488 	.word	0x40020488
 8005b34:	400204a0 	.word	0x400204a0
 8005b38:	400204b8 	.word	0x400204b8
 8005b3c:	58025408 	.word	0x58025408
 8005b40:	5802541c 	.word	0x5802541c
 8005b44:	58025430 	.word	0x58025430
 8005b48:	58025444 	.word	0x58025444
 8005b4c:	58025458 	.word	0x58025458
 8005b50:	5802546c 	.word	0x5802546c
 8005b54:	58025480 	.word	0x58025480
 8005b58:	58025494 	.word	0x58025494

08005b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b64:	f7fd f90c 	bl	8002d80 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e2dc      	b.n	800612e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d008      	beq.n	8005b92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e2cd      	b.n	800612e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a76      	ldr	r2, [pc, #472]	; (8005d70 <HAL_DMA_Abort+0x214>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d04a      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a74      	ldr	r2, [pc, #464]	; (8005d74 <HAL_DMA_Abort+0x218>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d045      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a73      	ldr	r2, [pc, #460]	; (8005d78 <HAL_DMA_Abort+0x21c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d040      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a71      	ldr	r2, [pc, #452]	; (8005d7c <HAL_DMA_Abort+0x220>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d03b      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a70      	ldr	r2, [pc, #448]	; (8005d80 <HAL_DMA_Abort+0x224>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d036      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6e      	ldr	r2, [pc, #440]	; (8005d84 <HAL_DMA_Abort+0x228>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d031      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6d      	ldr	r2, [pc, #436]	; (8005d88 <HAL_DMA_Abort+0x22c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d02c      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6b      	ldr	r2, [pc, #428]	; (8005d8c <HAL_DMA_Abort+0x230>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d027      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6a      	ldr	r2, [pc, #424]	; (8005d90 <HAL_DMA_Abort+0x234>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d022      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a68      	ldr	r2, [pc, #416]	; (8005d94 <HAL_DMA_Abort+0x238>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01d      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a67      	ldr	r2, [pc, #412]	; (8005d98 <HAL_DMA_Abort+0x23c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d018      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a65      	ldr	r2, [pc, #404]	; (8005d9c <HAL_DMA_Abort+0x240>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a64      	ldr	r2, [pc, #400]	; (8005da0 <HAL_DMA_Abort+0x244>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00e      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a62      	ldr	r2, [pc, #392]	; (8005da4 <HAL_DMA_Abort+0x248>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d009      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a61      	ldr	r2, [pc, #388]	; (8005da8 <HAL_DMA_Abort+0x24c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d004      	beq.n	8005c32 <HAL_DMA_Abort+0xd6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5f      	ldr	r2, [pc, #380]	; (8005dac <HAL_DMA_Abort+0x250>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_DMA_Abort+0xda>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_DMA_Abort+0xdc>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d013      	beq.n	8005c64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 021e 	bic.w	r2, r2, #30
 8005c4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e00a      	b.n	8005c7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 020e 	bic.w	r2, r2, #14
 8005c72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <HAL_DMA_Abort+0x214>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d072      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <HAL_DMA_Abort+0x218>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d06d      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a39      	ldr	r2, [pc, #228]	; (8005d78 <HAL_DMA_Abort+0x21c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d068      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <HAL_DMA_Abort+0x220>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d063      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a36      	ldr	r2, [pc, #216]	; (8005d80 <HAL_DMA_Abort+0x224>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d05e      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a34      	ldr	r2, [pc, #208]	; (8005d84 <HAL_DMA_Abort+0x228>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d059      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a33      	ldr	r2, [pc, #204]	; (8005d88 <HAL_DMA_Abort+0x22c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d054      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a31      	ldr	r2, [pc, #196]	; (8005d8c <HAL_DMA_Abort+0x230>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d04f      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a30      	ldr	r2, [pc, #192]	; (8005d90 <HAL_DMA_Abort+0x234>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04a      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2e      	ldr	r2, [pc, #184]	; (8005d94 <HAL_DMA_Abort+0x238>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d045      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2d      	ldr	r2, [pc, #180]	; (8005d98 <HAL_DMA_Abort+0x23c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d040      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <HAL_DMA_Abort+0x240>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d03b      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2a      	ldr	r2, [pc, #168]	; (8005da0 <HAL_DMA_Abort+0x244>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d036      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a28      	ldr	r2, [pc, #160]	; (8005da4 <HAL_DMA_Abort+0x248>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d031      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <HAL_DMA_Abort+0x24c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d02c      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a25      	ldr	r2, [pc, #148]	; (8005dac <HAL_DMA_Abort+0x250>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d027      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <HAL_DMA_Abort+0x254>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d022      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a22      	ldr	r2, [pc, #136]	; (8005db4 <HAL_DMA_Abort+0x258>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01d      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <HAL_DMA_Abort+0x25c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1f      	ldr	r2, [pc, #124]	; (8005dbc <HAL_DMA_Abort+0x260>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <HAL_DMA_Abort+0x264>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <HAL_DMA_Abort+0x268>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <HAL_DMA_Abort+0x26c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_DMA_Abort+0x20e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a19      	ldr	r2, [pc, #100]	; (8005dcc <HAL_DMA_Abort+0x270>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d132      	bne.n	8005dd0 <HAL_DMA_Abort+0x274>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e031      	b.n	8005dd2 <HAL_DMA_Abort+0x276>
 8005d6e:	bf00      	nop
 8005d70:	40020010 	.word	0x40020010
 8005d74:	40020028 	.word	0x40020028
 8005d78:	40020040 	.word	0x40020040
 8005d7c:	40020058 	.word	0x40020058
 8005d80:	40020070 	.word	0x40020070
 8005d84:	40020088 	.word	0x40020088
 8005d88:	400200a0 	.word	0x400200a0
 8005d8c:	400200b8 	.word	0x400200b8
 8005d90:	40020410 	.word	0x40020410
 8005d94:	40020428 	.word	0x40020428
 8005d98:	40020440 	.word	0x40020440
 8005d9c:	40020458 	.word	0x40020458
 8005da0:	40020470 	.word	0x40020470
 8005da4:	40020488 	.word	0x40020488
 8005da8:	400204a0 	.word	0x400204a0
 8005dac:	400204b8 	.word	0x400204b8
 8005db0:	58025408 	.word	0x58025408
 8005db4:	5802541c 	.word	0x5802541c
 8005db8:	58025430 	.word	0x58025430
 8005dbc:	58025444 	.word	0x58025444
 8005dc0:	58025458 	.word	0x58025458
 8005dc4:	5802546c 	.word	0x5802546c
 8005dc8:	58025480 	.word	0x58025480
 8005dcc:	58025494 	.word	0x58025494
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6d      	ldr	r2, [pc, #436]	; (8005fa0 <HAL_DMA_Abort+0x444>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d04a      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6b      	ldr	r2, [pc, #428]	; (8005fa4 <HAL_DMA_Abort+0x448>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d045      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6a      	ldr	r2, [pc, #424]	; (8005fa8 <HAL_DMA_Abort+0x44c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d040      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a68      	ldr	r2, [pc, #416]	; (8005fac <HAL_DMA_Abort+0x450>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d03b      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a67      	ldr	r2, [pc, #412]	; (8005fb0 <HAL_DMA_Abort+0x454>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d036      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a65      	ldr	r2, [pc, #404]	; (8005fb4 <HAL_DMA_Abort+0x458>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d031      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a64      	ldr	r2, [pc, #400]	; (8005fb8 <HAL_DMA_Abort+0x45c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d02c      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a62      	ldr	r2, [pc, #392]	; (8005fbc <HAL_DMA_Abort+0x460>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d027      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a61      	ldr	r2, [pc, #388]	; (8005fc0 <HAL_DMA_Abort+0x464>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a5f      	ldr	r2, [pc, #380]	; (8005fc4 <HAL_DMA_Abort+0x468>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a5e      	ldr	r2, [pc, #376]	; (8005fc8 <HAL_DMA_Abort+0x46c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5c      	ldr	r2, [pc, #368]	; (8005fcc <HAL_DMA_Abort+0x470>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5b      	ldr	r2, [pc, #364]	; (8005fd0 <HAL_DMA_Abort+0x474>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a59      	ldr	r2, [pc, #356]	; (8005fd4 <HAL_DMA_Abort+0x478>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a58      	ldr	r2, [pc, #352]	; (8005fd8 <HAL_DMA_Abort+0x47c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_DMA_Abort+0x32a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a56      	ldr	r2, [pc, #344]	; (8005fdc <HAL_DMA_Abort+0x480>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d108      	bne.n	8005e98 <HAL_DMA_Abort+0x33c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e007      	b.n	8005ea8 <HAL_DMA_Abort+0x34c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ea8:	e013      	b.n	8005ed2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eaa:	f7fc ff69 	bl	8002d80 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d90c      	bls.n	8005ed2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e12d      	b.n	800612e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e5      	bne.n	8005eaa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <HAL_DMA_Abort+0x444>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d04a      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <HAL_DMA_Abort+0x448>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d045      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <HAL_DMA_Abort+0x44c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d040      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <HAL_DMA_Abort+0x450>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d03b      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <HAL_DMA_Abort+0x454>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d036      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <HAL_DMA_Abort+0x458>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d031      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a26      	ldr	r2, [pc, #152]	; (8005fb8 <HAL_DMA_Abort+0x45c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d02c      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a24      	ldr	r2, [pc, #144]	; (8005fbc <HAL_DMA_Abort+0x460>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d027      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a23      	ldr	r2, [pc, #140]	; (8005fc0 <HAL_DMA_Abort+0x464>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <HAL_DMA_Abort+0x468>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01d      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a20      	ldr	r2, [pc, #128]	; (8005fc8 <HAL_DMA_Abort+0x46c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d018      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1e      	ldr	r2, [pc, #120]	; (8005fcc <HAL_DMA_Abort+0x470>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <HAL_DMA_Abort+0x474>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <HAL_DMA_Abort+0x478>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <HAL_DMA_Abort+0x47c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_DMA_Abort+0x422>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a18      	ldr	r2, [pc, #96]	; (8005fdc <HAL_DMA_Abort+0x480>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d101      	bne.n	8005f82 <HAL_DMA_Abort+0x426>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <HAL_DMA_Abort+0x428>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02b      	beq.n	8005fe0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	223f      	movs	r2, #63	; 0x3f
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	609a      	str	r2, [r3, #8]
 8005f9e:	e02a      	b.n	8005ff6 <HAL_DMA_Abort+0x49a>
 8005fa0:	40020010 	.word	0x40020010
 8005fa4:	40020028 	.word	0x40020028
 8005fa8:	40020040 	.word	0x40020040
 8005fac:	40020058 	.word	0x40020058
 8005fb0:	40020070 	.word	0x40020070
 8005fb4:	40020088 	.word	0x40020088
 8005fb8:	400200a0 	.word	0x400200a0
 8005fbc:	400200b8 	.word	0x400200b8
 8005fc0:	40020410 	.word	0x40020410
 8005fc4:	40020428 	.word	0x40020428
 8005fc8:	40020440 	.word	0x40020440
 8005fcc:	40020458 	.word	0x40020458
 8005fd0:	40020470 	.word	0x40020470
 8005fd4:	40020488 	.word	0x40020488
 8005fd8:	400204a0 	.word	0x400204a0
 8005fdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	2201      	movs	r2, #1
 8005ff0:	409a      	lsls	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4f      	ldr	r2, [pc, #316]	; (8006138 <HAL_DMA_Abort+0x5dc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d072      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a4d      	ldr	r2, [pc, #308]	; (800613c <HAL_DMA_Abort+0x5e0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d06d      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a4c      	ldr	r2, [pc, #304]	; (8006140 <HAL_DMA_Abort+0x5e4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d068      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a4a      	ldr	r2, [pc, #296]	; (8006144 <HAL_DMA_Abort+0x5e8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d063      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a49      	ldr	r2, [pc, #292]	; (8006148 <HAL_DMA_Abort+0x5ec>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d05e      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a47      	ldr	r2, [pc, #284]	; (800614c <HAL_DMA_Abort+0x5f0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d059      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a46      	ldr	r2, [pc, #280]	; (8006150 <HAL_DMA_Abort+0x5f4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d054      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a44      	ldr	r2, [pc, #272]	; (8006154 <HAL_DMA_Abort+0x5f8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d04f      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a43      	ldr	r2, [pc, #268]	; (8006158 <HAL_DMA_Abort+0x5fc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d04a      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a41      	ldr	r2, [pc, #260]	; (800615c <HAL_DMA_Abort+0x600>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d045      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a40      	ldr	r2, [pc, #256]	; (8006160 <HAL_DMA_Abort+0x604>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d040      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a3e      	ldr	r2, [pc, #248]	; (8006164 <HAL_DMA_Abort+0x608>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d03b      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a3d      	ldr	r2, [pc, #244]	; (8006168 <HAL_DMA_Abort+0x60c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d036      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3b      	ldr	r2, [pc, #236]	; (800616c <HAL_DMA_Abort+0x610>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d031      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <HAL_DMA_Abort+0x614>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d02c      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a38      	ldr	r2, [pc, #224]	; (8006174 <HAL_DMA_Abort+0x618>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d027      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a37      	ldr	r2, [pc, #220]	; (8006178 <HAL_DMA_Abort+0x61c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a35      	ldr	r2, [pc, #212]	; (800617c <HAL_DMA_Abort+0x620>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01d      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <HAL_DMA_Abort+0x624>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a32      	ldr	r2, [pc, #200]	; (8006184 <HAL_DMA_Abort+0x628>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a31      	ldr	r2, [pc, #196]	; (8006188 <HAL_DMA_Abort+0x62c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <HAL_DMA_Abort+0x630>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2e      	ldr	r2, [pc, #184]	; (8006190 <HAL_DMA_Abort+0x634>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <HAL_DMA_Abort+0x58a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2c      	ldr	r2, [pc, #176]	; (8006194 <HAL_DMA_Abort+0x638>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <HAL_DMA_Abort+0x58e>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <HAL_DMA_Abort+0x590>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d015      	beq.n	800611c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006110:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800611a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	58025408 	.word	0x58025408
 800617c:	5802541c 	.word	0x5802541c
 8006180:	58025430 	.word	0x58025430
 8006184:	58025444 	.word	0x58025444
 8006188:	58025458 	.word	0x58025458
 800618c:	5802546c 	.word	0x5802546c
 8006190:	58025480 	.word	0x58025480
 8006194:	58025494 	.word	0x58025494

08006198 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e237      	b.n	800661a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d004      	beq.n	80061c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2280      	movs	r2, #128	; 0x80
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e22c      	b.n	800661a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5c      	ldr	r2, [pc, #368]	; (8006338 <HAL_DMA_Abort_IT+0x1a0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d04a      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5b      	ldr	r2, [pc, #364]	; (800633c <HAL_DMA_Abort_IT+0x1a4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d045      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a59      	ldr	r2, [pc, #356]	; (8006340 <HAL_DMA_Abort_IT+0x1a8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d040      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_DMA_Abort_IT+0x1ac>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d03b      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a56      	ldr	r2, [pc, #344]	; (8006348 <HAL_DMA_Abort_IT+0x1b0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d036      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a55      	ldr	r2, [pc, #340]	; (800634c <HAL_DMA_Abort_IT+0x1b4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d031      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a53      	ldr	r2, [pc, #332]	; (8006350 <HAL_DMA_Abort_IT+0x1b8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d02c      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a52      	ldr	r2, [pc, #328]	; (8006354 <HAL_DMA_Abort_IT+0x1bc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d027      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a50      	ldr	r2, [pc, #320]	; (8006358 <HAL_DMA_Abort_IT+0x1c0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d022      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4f      	ldr	r2, [pc, #316]	; (800635c <HAL_DMA_Abort_IT+0x1c4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d01d      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4d      	ldr	r2, [pc, #308]	; (8006360 <HAL_DMA_Abort_IT+0x1c8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d018      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4c      	ldr	r2, [pc, #304]	; (8006364 <HAL_DMA_Abort_IT+0x1cc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4a      	ldr	r2, [pc, #296]	; (8006368 <HAL_DMA_Abort_IT+0x1d0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a49      	ldr	r2, [pc, #292]	; (800636c <HAL_DMA_Abort_IT+0x1d4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d009      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a47      	ldr	r2, [pc, #284]	; (8006370 <HAL_DMA_Abort_IT+0x1d8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_DMA_Abort_IT+0xc8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a46      	ldr	r2, [pc, #280]	; (8006374 <HAL_DMA_Abort_IT+0x1dc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d101      	bne.n	8006264 <HAL_DMA_Abort_IT+0xcc>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <HAL_DMA_Abort_IT+0xce>
 8006264:	2300      	movs	r3, #0
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8086 	beq.w	8006378 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2204      	movs	r2, #4
 8006270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2f      	ldr	r2, [pc, #188]	; (8006338 <HAL_DMA_Abort_IT+0x1a0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d04a      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2e      	ldr	r2, [pc, #184]	; (800633c <HAL_DMA_Abort_IT+0x1a4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d045      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <HAL_DMA_Abort_IT+0x1a8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d040      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <HAL_DMA_Abort_IT+0x1ac>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d03b      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a29      	ldr	r2, [pc, #164]	; (8006348 <HAL_DMA_Abort_IT+0x1b0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d036      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a28      	ldr	r2, [pc, #160]	; (800634c <HAL_DMA_Abort_IT+0x1b4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d031      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a26      	ldr	r2, [pc, #152]	; (8006350 <HAL_DMA_Abort_IT+0x1b8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d02c      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a25      	ldr	r2, [pc, #148]	; (8006354 <HAL_DMA_Abort_IT+0x1bc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d027      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a23      	ldr	r2, [pc, #140]	; (8006358 <HAL_DMA_Abort_IT+0x1c0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_DMA_Abort_IT+0x1c4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d01d      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a20      	ldr	r2, [pc, #128]	; (8006360 <HAL_DMA_Abort_IT+0x1c8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_DMA_Abort_IT+0x1cc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <HAL_DMA_Abort_IT+0x1d0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_DMA_Abort_IT+0x1d4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1a      	ldr	r2, [pc, #104]	; (8006370 <HAL_DMA_Abort_IT+0x1d8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_DMA_Abort_IT+0x17c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a19      	ldr	r2, [pc, #100]	; (8006374 <HAL_DMA_Abort_IT+0x1dc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d108      	bne.n	8006326 <HAL_DMA_Abort_IT+0x18e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e178      	b.n	8006618 <HAL_DMA_Abort_IT+0x480>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e16f      	b.n	8006618 <HAL_DMA_Abort_IT+0x480>
 8006338:	40020010 	.word	0x40020010
 800633c:	40020028 	.word	0x40020028
 8006340:	40020040 	.word	0x40020040
 8006344:	40020058 	.word	0x40020058
 8006348:	40020070 	.word	0x40020070
 800634c:	40020088 	.word	0x40020088
 8006350:	400200a0 	.word	0x400200a0
 8006354:	400200b8 	.word	0x400200b8
 8006358:	40020410 	.word	0x40020410
 800635c:	40020428 	.word	0x40020428
 8006360:	40020440 	.word	0x40020440
 8006364:	40020458 	.word	0x40020458
 8006368:	40020470 	.word	0x40020470
 800636c:	40020488 	.word	0x40020488
 8006370:	400204a0 	.word	0x400204a0
 8006374:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 020e 	bic.w	r2, r2, #14
 8006386:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a6c      	ldr	r2, [pc, #432]	; (8006540 <HAL_DMA_Abort_IT+0x3a8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6b      	ldr	r2, [pc, #428]	; (8006544 <HAL_DMA_Abort_IT+0x3ac>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a69      	ldr	r2, [pc, #420]	; (8006548 <HAL_DMA_Abort_IT+0x3b0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a68      	ldr	r2, [pc, #416]	; (800654c <HAL_DMA_Abort_IT+0x3b4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a66      	ldr	r2, [pc, #408]	; (8006550 <HAL_DMA_Abort_IT+0x3b8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_DMA_Abort_IT+0x3bc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a63      	ldr	r2, [pc, #396]	; (8006558 <HAL_DMA_Abort_IT+0x3c0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a62      	ldr	r2, [pc, #392]	; (800655c <HAL_DMA_Abort_IT+0x3c4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a60      	ldr	r2, [pc, #384]	; (8006560 <HAL_DMA_Abort_IT+0x3c8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5f      	ldr	r2, [pc, #380]	; (8006564 <HAL_DMA_Abort_IT+0x3cc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5d      	ldr	r2, [pc, #372]	; (8006568 <HAL_DMA_Abort_IT+0x3d0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5c      	ldr	r2, [pc, #368]	; (800656c <HAL_DMA_Abort_IT+0x3d4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5a      	ldr	r2, [pc, #360]	; (8006570 <HAL_DMA_Abort_IT+0x3d8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a59      	ldr	r2, [pc, #356]	; (8006574 <HAL_DMA_Abort_IT+0x3dc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a57      	ldr	r2, [pc, #348]	; (8006578 <HAL_DMA_Abort_IT+0x3e0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_DMA_Abort_IT+0x290>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a56      	ldr	r2, [pc, #344]	; (800657c <HAL_DMA_Abort_IT+0x3e4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d108      	bne.n	800643a <HAL_DMA_Abort_IT+0x2a2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e007      	b.n	800644a <HAL_DMA_Abort_IT+0x2b2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3c      	ldr	r2, [pc, #240]	; (8006540 <HAL_DMA_Abort_IT+0x3a8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d072      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a3a      	ldr	r2, [pc, #232]	; (8006544 <HAL_DMA_Abort_IT+0x3ac>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d06d      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a39      	ldr	r2, [pc, #228]	; (8006548 <HAL_DMA_Abort_IT+0x3b0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d068      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a37      	ldr	r2, [pc, #220]	; (800654c <HAL_DMA_Abort_IT+0x3b4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d063      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a36      	ldr	r2, [pc, #216]	; (8006550 <HAL_DMA_Abort_IT+0x3b8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d05e      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a34      	ldr	r2, [pc, #208]	; (8006554 <HAL_DMA_Abort_IT+0x3bc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d059      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a33      	ldr	r2, [pc, #204]	; (8006558 <HAL_DMA_Abort_IT+0x3c0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d054      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a31      	ldr	r2, [pc, #196]	; (800655c <HAL_DMA_Abort_IT+0x3c4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d04f      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a30      	ldr	r2, [pc, #192]	; (8006560 <HAL_DMA_Abort_IT+0x3c8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d04a      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2e      	ldr	r2, [pc, #184]	; (8006564 <HAL_DMA_Abort_IT+0x3cc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d045      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a2d      	ldr	r2, [pc, #180]	; (8006568 <HAL_DMA_Abort_IT+0x3d0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d040      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2b      	ldr	r2, [pc, #172]	; (800656c <HAL_DMA_Abort_IT+0x3d4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d03b      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <HAL_DMA_Abort_IT+0x3d8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d036      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a28      	ldr	r2, [pc, #160]	; (8006574 <HAL_DMA_Abort_IT+0x3dc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d031      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a27      	ldr	r2, [pc, #156]	; (8006578 <HAL_DMA_Abort_IT+0x3e0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d02c      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <HAL_DMA_Abort_IT+0x3e4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d027      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a24      	ldr	r2, [pc, #144]	; (8006580 <HAL_DMA_Abort_IT+0x3e8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d022      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a22      	ldr	r2, [pc, #136]	; (8006584 <HAL_DMA_Abort_IT+0x3ec>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01d      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a21      	ldr	r2, [pc, #132]	; (8006588 <HAL_DMA_Abort_IT+0x3f0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d018      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1f      	ldr	r2, [pc, #124]	; (800658c <HAL_DMA_Abort_IT+0x3f4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <HAL_DMA_Abort_IT+0x3f8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00e      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <HAL_DMA_Abort_IT+0x3fc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d009      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <HAL_DMA_Abort_IT+0x400>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_DMA_Abort_IT+0x3a2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a19      	ldr	r2, [pc, #100]	; (800659c <HAL_DMA_Abort_IT+0x404>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d132      	bne.n	80065a0 <HAL_DMA_Abort_IT+0x408>
 800653a:	2301      	movs	r3, #1
 800653c:	e031      	b.n	80065a2 <HAL_DMA_Abort_IT+0x40a>
 800653e:	bf00      	nop
 8006540:	40020010 	.word	0x40020010
 8006544:	40020028 	.word	0x40020028
 8006548:	40020040 	.word	0x40020040
 800654c:	40020058 	.word	0x40020058
 8006550:	40020070 	.word	0x40020070
 8006554:	40020088 	.word	0x40020088
 8006558:	400200a0 	.word	0x400200a0
 800655c:	400200b8 	.word	0x400200b8
 8006560:	40020410 	.word	0x40020410
 8006564:	40020428 	.word	0x40020428
 8006568:	40020440 	.word	0x40020440
 800656c:	40020458 	.word	0x40020458
 8006570:	40020470 	.word	0x40020470
 8006574:	40020488 	.word	0x40020488
 8006578:	400204a0 	.word	0x400204a0
 800657c:	400204b8 	.word	0x400204b8
 8006580:	58025408 	.word	0x58025408
 8006584:	5802541c 	.word	0x5802541c
 8006588:	58025430 	.word	0x58025430
 800658c:	58025444 	.word	0x58025444
 8006590:	58025458 	.word	0x58025458
 8006594:	5802546c 	.word	0x5802546c
 8006598:	58025480 	.word	0x58025480
 800659c:	58025494 	.word	0x58025494
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d028      	beq.n	80065f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2201      	movs	r2, #1
 80065c6:	409a      	lsls	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00c      	beq.n	80065f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop

08006624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006630:	4b67      	ldr	r3, [pc, #412]	; (80067d0 <HAL_DMA_IRQHandler+0x1ac>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a67      	ldr	r2, [pc, #412]	; (80067d4 <HAL_DMA_IRQHandler+0x1b0>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	0a9b      	lsrs	r3, r3, #10
 800663c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5f      	ldr	r2, [pc, #380]	; (80067d8 <HAL_DMA_IRQHandler+0x1b4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d04a      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5d      	ldr	r2, [pc, #372]	; (80067dc <HAL_DMA_IRQHandler+0x1b8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d045      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5c      	ldr	r2, [pc, #368]	; (80067e0 <HAL_DMA_IRQHandler+0x1bc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d040      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5a      	ldr	r2, [pc, #360]	; (80067e4 <HAL_DMA_IRQHandler+0x1c0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d03b      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a59      	ldr	r2, [pc, #356]	; (80067e8 <HAL_DMA_IRQHandler+0x1c4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d036      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a57      	ldr	r2, [pc, #348]	; (80067ec <HAL_DMA_IRQHandler+0x1c8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d031      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a56      	ldr	r2, [pc, #344]	; (80067f0 <HAL_DMA_IRQHandler+0x1cc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d02c      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a54      	ldr	r2, [pc, #336]	; (80067f4 <HAL_DMA_IRQHandler+0x1d0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d027      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a53      	ldr	r2, [pc, #332]	; (80067f8 <HAL_DMA_IRQHandler+0x1d4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a51      	ldr	r2, [pc, #324]	; (80067fc <HAL_DMA_IRQHandler+0x1d8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a50      	ldr	r2, [pc, #320]	; (8006800 <HAL_DMA_IRQHandler+0x1dc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a4e      	ldr	r2, [pc, #312]	; (8006804 <HAL_DMA_IRQHandler+0x1e0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a4d      	ldr	r2, [pc, #308]	; (8006808 <HAL_DMA_IRQHandler+0x1e4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4b      	ldr	r2, [pc, #300]	; (800680c <HAL_DMA_IRQHandler+0x1e8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4a      	ldr	r2, [pc, #296]	; (8006810 <HAL_DMA_IRQHandler+0x1ec>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xd2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a48      	ldr	r2, [pc, #288]	; (8006814 <HAL_DMA_IRQHandler+0x1f0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <HAL_DMA_IRQHandler+0xd6>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <HAL_DMA_IRQHandler+0xd8>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 842b 	beq.w	8006f58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2208      	movs	r2, #8
 800670c:	409a      	lsls	r2, r3
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80a2 	beq.w	800685c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <HAL_DMA_IRQHandler+0x1b4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d04a      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_DMA_IRQHandler+0x1b8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d045      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2b      	ldr	r2, [pc, #172]	; (80067e0 <HAL_DMA_IRQHandler+0x1bc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d040      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2a      	ldr	r2, [pc, #168]	; (80067e4 <HAL_DMA_IRQHandler+0x1c0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d03b      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a28      	ldr	r2, [pc, #160]	; (80067e8 <HAL_DMA_IRQHandler+0x1c4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d036      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <HAL_DMA_IRQHandler+0x1c8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d031      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_DMA_IRQHandler+0x1cc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02c      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a24      	ldr	r2, [pc, #144]	; (80067f4 <HAL_DMA_IRQHandler+0x1d0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d027      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <HAL_DMA_IRQHandler+0x1d4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d022      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <HAL_DMA_IRQHandler+0x1d8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d01d      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <HAL_DMA_IRQHandler+0x1dc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d018      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <HAL_DMA_IRQHandler+0x1e0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <HAL_DMA_IRQHandler+0x1e4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_DMA_IRQHandler+0x1e8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <HAL_DMA_IRQHandler+0x1ec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x194>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_DMA_IRQHandler+0x1f0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d12f      	bne.n	8006818 <HAL_DMA_IRQHandler+0x1f4>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf14      	ite	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	2300      	moveq	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	e02e      	b.n	800682c <HAL_DMA_IRQHandler+0x208>
 80067ce:	bf00      	nop
 80067d0:	24000088 	.word	0x24000088
 80067d4:	1b4e81b5 	.word	0x1b4e81b5
 80067d8:	40020010 	.word	0x40020010
 80067dc:	40020028 	.word	0x40020028
 80067e0:	40020040 	.word	0x40020040
 80067e4:	40020058 	.word	0x40020058
 80067e8:	40020070 	.word	0x40020070
 80067ec:	40020088 	.word	0x40020088
 80067f0:	400200a0 	.word	0x400200a0
 80067f4:	400200b8 	.word	0x400200b8
 80067f8:	40020410 	.word	0x40020410
 80067fc:	40020428 	.word	0x40020428
 8006800:	40020440 	.word	0x40020440
 8006804:	40020458 	.word	0x40020458
 8006808:	40020470 	.word	0x40020470
 800680c:	40020488 	.word	0x40020488
 8006810:	400204a0 	.word	0x400204a0
 8006814:	400204b8 	.word	0x400204b8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf14      	ite	ne
 8006826:	2301      	movne	r3, #1
 8006828:	2300      	moveq	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d015      	beq.n	800685c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2208      	movs	r2, #8
 800684a:	409a      	lsls	r2, r3
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	f043 0201 	orr.w	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d06e      	beq.n	8006950 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a69      	ldr	r2, [pc, #420]	; (8006a1c <HAL_DMA_IRQHandler+0x3f8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d04a      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a67      	ldr	r2, [pc, #412]	; (8006a20 <HAL_DMA_IRQHandler+0x3fc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d045      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a66      	ldr	r2, [pc, #408]	; (8006a24 <HAL_DMA_IRQHandler+0x400>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d040      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a64      	ldr	r2, [pc, #400]	; (8006a28 <HAL_DMA_IRQHandler+0x404>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d03b      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a63      	ldr	r2, [pc, #396]	; (8006a2c <HAL_DMA_IRQHandler+0x408>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d036      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a61      	ldr	r2, [pc, #388]	; (8006a30 <HAL_DMA_IRQHandler+0x40c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d031      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a60      	ldr	r2, [pc, #384]	; (8006a34 <HAL_DMA_IRQHandler+0x410>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d02c      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a5e      	ldr	r2, [pc, #376]	; (8006a38 <HAL_DMA_IRQHandler+0x414>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d027      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a5d      	ldr	r2, [pc, #372]	; (8006a3c <HAL_DMA_IRQHandler+0x418>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a5b      	ldr	r2, [pc, #364]	; (8006a40 <HAL_DMA_IRQHandler+0x41c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01d      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a5a      	ldr	r2, [pc, #360]	; (8006a44 <HAL_DMA_IRQHandler+0x420>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d018      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_DMA_IRQHandler+0x424>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a57      	ldr	r2, [pc, #348]	; (8006a4c <HAL_DMA_IRQHandler+0x428>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00e      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a55      	ldr	r2, [pc, #340]	; (8006a50 <HAL_DMA_IRQHandler+0x42c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d009      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a54      	ldr	r2, [pc, #336]	; (8006a54 <HAL_DMA_IRQHandler+0x430>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d004      	beq.n	8006912 <HAL_DMA_IRQHandler+0x2ee>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a52      	ldr	r2, [pc, #328]	; (8006a58 <HAL_DMA_IRQHandler+0x434>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10a      	bne.n	8006928 <HAL_DMA_IRQHandler+0x304>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e003      	b.n	8006930 <HAL_DMA_IRQHandler+0x30c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2201      	movs	r2, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	f043 0202 	orr.w	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2204      	movs	r2, #4
 800695a:	409a      	lsls	r2, r3
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 808f 	beq.w	8006a84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2c      	ldr	r2, [pc, #176]	; (8006a1c <HAL_DMA_IRQHandler+0x3f8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d04a      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2a      	ldr	r2, [pc, #168]	; (8006a20 <HAL_DMA_IRQHandler+0x3fc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d045      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a29      	ldr	r2, [pc, #164]	; (8006a24 <HAL_DMA_IRQHandler+0x400>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d040      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a27      	ldr	r2, [pc, #156]	; (8006a28 <HAL_DMA_IRQHandler+0x404>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d03b      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <HAL_DMA_IRQHandler+0x408>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d036      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <HAL_DMA_IRQHandler+0x40c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d031      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <HAL_DMA_IRQHandler+0x410>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d02c      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <HAL_DMA_IRQHandler+0x414>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d027      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <HAL_DMA_IRQHandler+0x418>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d022      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_DMA_IRQHandler+0x41c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_DMA_IRQHandler+0x420>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_DMA_IRQHandler+0x424>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <HAL_DMA_IRQHandler+0x428>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_DMA_IRQHandler+0x42c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <HAL_DMA_IRQHandler+0x430>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x3e2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <HAL_DMA_IRQHandler+0x434>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d12a      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x438>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	e023      	b.n	8006a64 <HAL_DMA_IRQHandler+0x440>
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00d      	beq.n	8006a84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2204      	movs	r2, #4
 8006a72:	409a      	lsls	r2, r3
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 0204 	orr.w	r2, r3, #4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80a6 	beq.w	8006be6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a85      	ldr	r2, [pc, #532]	; (8006cb4 <HAL_DMA_IRQHandler+0x690>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d04a      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a83      	ldr	r2, [pc, #524]	; (8006cb8 <HAL_DMA_IRQHandler+0x694>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d045      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a82      	ldr	r2, [pc, #520]	; (8006cbc <HAL_DMA_IRQHandler+0x698>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d040      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a80      	ldr	r2, [pc, #512]	; (8006cc0 <HAL_DMA_IRQHandler+0x69c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d03b      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7f      	ldr	r2, [pc, #508]	; (8006cc4 <HAL_DMA_IRQHandler+0x6a0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d036      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a7d      	ldr	r2, [pc, #500]	; (8006cc8 <HAL_DMA_IRQHandler+0x6a4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d031      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a7c      	ldr	r2, [pc, #496]	; (8006ccc <HAL_DMA_IRQHandler+0x6a8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d02c      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a7a      	ldr	r2, [pc, #488]	; (8006cd0 <HAL_DMA_IRQHandler+0x6ac>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d027      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a79      	ldr	r2, [pc, #484]	; (8006cd4 <HAL_DMA_IRQHandler+0x6b0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d022      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a77      	ldr	r2, [pc, #476]	; (8006cd8 <HAL_DMA_IRQHandler+0x6b4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01d      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a76      	ldr	r2, [pc, #472]	; (8006cdc <HAL_DMA_IRQHandler+0x6b8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d018      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a74      	ldr	r2, [pc, #464]	; (8006ce0 <HAL_DMA_IRQHandler+0x6bc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d013      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a73      	ldr	r2, [pc, #460]	; (8006ce4 <HAL_DMA_IRQHandler+0x6c0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00e      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a71      	ldr	r2, [pc, #452]	; (8006ce8 <HAL_DMA_IRQHandler+0x6c4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a70      	ldr	r2, [pc, #448]	; (8006cec <HAL_DMA_IRQHandler+0x6c8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_DMA_IRQHandler+0x516>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_DMA_IRQHandler+0x6cc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10a      	bne.n	8006b50 <HAL_DMA_IRQHandler+0x52c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	e009      	b.n	8006b64 <HAL_DMA_IRQHandler+0x540>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d03e      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	2210      	movs	r2, #16
 8006b72:	409a      	lsls	r2, r3
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d018      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d108      	bne.n	8006ba6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d024      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
 8006ba4:	e01f      	b.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01b      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
 8006bb6:	e016      	b.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0208 	bic.w	r2, r2, #8
 8006bd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2220      	movs	r2, #32
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8110 	beq.w	8006e1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2c      	ldr	r2, [pc, #176]	; (8006cb4 <HAL_DMA_IRQHandler+0x690>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d04a      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2b      	ldr	r2, [pc, #172]	; (8006cb8 <HAL_DMA_IRQHandler+0x694>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d045      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a29      	ldr	r2, [pc, #164]	; (8006cbc <HAL_DMA_IRQHandler+0x698>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d040      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a28      	ldr	r2, [pc, #160]	; (8006cc0 <HAL_DMA_IRQHandler+0x69c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d03b      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <HAL_DMA_IRQHandler+0x6a0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d036      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a25      	ldr	r2, [pc, #148]	; (8006cc8 <HAL_DMA_IRQHandler+0x6a4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d031      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <HAL_DMA_IRQHandler+0x6a8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d02c      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <HAL_DMA_IRQHandler+0x6ac>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d027      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a20      	ldr	r2, [pc, #128]	; (8006cd4 <HAL_DMA_IRQHandler+0x6b0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d022      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_DMA_IRQHandler+0x6b4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d01d      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <HAL_DMA_IRQHandler+0x6b8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ce0 <HAL_DMA_IRQHandler+0x6bc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1a      	ldr	r2, [pc, #104]	; (8006ce4 <HAL_DMA_IRQHandler+0x6c0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <HAL_DMA_IRQHandler+0x6c4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a17      	ldr	r2, [pc, #92]	; (8006cec <HAL_DMA_IRQHandler+0x6c8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x678>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <HAL_DMA_IRQHandler+0x6cc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d12b      	bne.n	8006cf4 <HAL_DMA_IRQHandler+0x6d0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	e02a      	b.n	8006d08 <HAL_DMA_IRQHandler+0x6e4>
 8006cb2:	bf00      	nop
 8006cb4:	40020010 	.word	0x40020010
 8006cb8:	40020028 	.word	0x40020028
 8006cbc:	40020040 	.word	0x40020040
 8006cc0:	40020058 	.word	0x40020058
 8006cc4:	40020070 	.word	0x40020070
 8006cc8:	40020088 	.word	0x40020088
 8006ccc:	400200a0 	.word	0x400200a0
 8006cd0:	400200b8 	.word	0x400200b8
 8006cd4:	40020410 	.word	0x40020410
 8006cd8:	40020428 	.word	0x40020428
 8006cdc:	40020440 	.word	0x40020440
 8006ce0:	40020458 	.word	0x40020458
 8006ce4:	40020470 	.word	0x40020470
 8006ce8:	40020488 	.word	0x40020488
 8006cec:	400204a0 	.word	0x400204a0
 8006cf0:	400204b8 	.word	0x400204b8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8087 	beq.w	8006e1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2220      	movs	r2, #32
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d139      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0216 	bic.w	r2, r2, #22
 8006d38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <HAL_DMA_IRQHandler+0x736>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0208 	bic.w	r2, r2, #8
 8006d68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	223f      	movs	r2, #63	; 0x3f
 8006d74:	409a      	lsls	r2, r3
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 834a 	beq.w	8007428 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
          }
          return;
 8006d9c:	e344      	b.n	8007428 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02c      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	e027      	b.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d023      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
 8006ddc:	e01e      	b.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10f      	bne.n	8006e0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0210 	bic.w	r2, r2, #16
 8006dfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8306 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8088 	beq.w	8006f44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2204      	movs	r2, #4
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a7a      	ldr	r2, [pc, #488]	; (800702c <HAL_DMA_IRQHandler+0xa08>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04a      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a79      	ldr	r2, [pc, #484]	; (8007030 <HAL_DMA_IRQHandler+0xa0c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d045      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a77      	ldr	r2, [pc, #476]	; (8007034 <HAL_DMA_IRQHandler+0xa10>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d040      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a76      	ldr	r2, [pc, #472]	; (8007038 <HAL_DMA_IRQHandler+0xa14>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d03b      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a74      	ldr	r2, [pc, #464]	; (800703c <HAL_DMA_IRQHandler+0xa18>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d036      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a73      	ldr	r2, [pc, #460]	; (8007040 <HAL_DMA_IRQHandler+0xa1c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d031      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a71      	ldr	r2, [pc, #452]	; (8007044 <HAL_DMA_IRQHandler+0xa20>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d02c      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a70      	ldr	r2, [pc, #448]	; (8007048 <HAL_DMA_IRQHandler+0xa24>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d027      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6e      	ldr	r2, [pc, #440]	; (800704c <HAL_DMA_IRQHandler+0xa28>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d022      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6d      	ldr	r2, [pc, #436]	; (8007050 <HAL_DMA_IRQHandler+0xa2c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01d      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6b      	ldr	r2, [pc, #428]	; (8007054 <HAL_DMA_IRQHandler+0xa30>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6a      	ldr	r2, [pc, #424]	; (8007058 <HAL_DMA_IRQHandler+0xa34>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a68      	ldr	r2, [pc, #416]	; (800705c <HAL_DMA_IRQHandler+0xa38>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a67      	ldr	r2, [pc, #412]	; (8007060 <HAL_DMA_IRQHandler+0xa3c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a65      	ldr	r2, [pc, #404]	; (8007064 <HAL_DMA_IRQHandler+0xa40>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_DMA_IRQHandler+0x8b8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a64      	ldr	r2, [pc, #400]	; (8007068 <HAL_DMA_IRQHandler+0xa44>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d108      	bne.n	8006eee <HAL_DMA_IRQHandler+0x8ca>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e007      	b.n	8006efe <HAL_DMA_IRQHandler+0x8da>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d307      	bcc.n	8006f1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f2      	bne.n	8006efe <HAL_DMA_IRQHandler+0x8da>
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f32:	e003      	b.n	8006f3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8272 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	e26c      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a43      	ldr	r2, [pc, #268]	; (800706c <HAL_DMA_IRQHandler+0xa48>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a42      	ldr	r2, [pc, #264]	; (8007070 <HAL_DMA_IRQHandler+0xa4c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a40      	ldr	r2, [pc, #256]	; (8007074 <HAL_DMA_IRQHandler+0xa50>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3f      	ldr	r2, [pc, #252]	; (8007078 <HAL_DMA_IRQHandler+0xa54>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a3d      	ldr	r2, [pc, #244]	; (800707c <HAL_DMA_IRQHandler+0xa58>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <HAL_DMA_IRQHandler+0xa5c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a3a      	ldr	r2, [pc, #232]	; (8007084 <HAL_DMA_IRQHandler+0xa60>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x984>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a39      	ldr	r2, [pc, #228]	; (8007088 <HAL_DMA_IRQHandler+0xa64>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d101      	bne.n	8006fac <HAL_DMA_IRQHandler+0x988>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <HAL_DMA_IRQHandler+0x98a>
 8006fac:	2300      	movs	r3, #0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 823f 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80cd 	beq.w	800716c <HAL_DMA_IRQHandler+0xb48>
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80c7 	beq.w	800716c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d049      	beq.n	800708c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 8210 	beq.w	800742c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007014:	e20a      	b.n	800742c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8206 	beq.w	800742c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007028:	e200      	b.n	800742c <HAL_DMA_IRQHandler+0xe08>
 800702a:	bf00      	nop
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8
 800706c:	58025408 	.word	0x58025408
 8007070:	5802541c 	.word	0x5802541c
 8007074:	58025430 	.word	0x58025430
 8007078:	58025444 	.word	0x58025444
 800707c:	58025458 	.word	0x58025458
 8007080:	5802546c 	.word	0x5802546c
 8007084:	58025480 	.word	0x58025480
 8007088:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d160      	bne.n	8007158 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a7f      	ldr	r2, [pc, #508]	; (8007298 <HAL_DMA_IRQHandler+0xc74>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7d      	ldr	r2, [pc, #500]	; (800729c <HAL_DMA_IRQHandler+0xc78>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a7c      	ldr	r2, [pc, #496]	; (80072a0 <HAL_DMA_IRQHandler+0xc7c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a7a      	ldr	r2, [pc, #488]	; (80072a4 <HAL_DMA_IRQHandler+0xc80>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a79      	ldr	r2, [pc, #484]	; (80072a8 <HAL_DMA_IRQHandler+0xc84>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a77      	ldr	r2, [pc, #476]	; (80072ac <HAL_DMA_IRQHandler+0xc88>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a76      	ldr	r2, [pc, #472]	; (80072b0 <HAL_DMA_IRQHandler+0xc8c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a74      	ldr	r2, [pc, #464]	; (80072b4 <HAL_DMA_IRQHandler+0xc90>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a73      	ldr	r2, [pc, #460]	; (80072b8 <HAL_DMA_IRQHandler+0xc94>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a71      	ldr	r2, [pc, #452]	; (80072bc <HAL_DMA_IRQHandler+0xc98>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a70      	ldr	r2, [pc, #448]	; (80072c0 <HAL_DMA_IRQHandler+0xc9c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a6e      	ldr	r2, [pc, #440]	; (80072c4 <HAL_DMA_IRQHandler+0xca0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a6d      	ldr	r2, [pc, #436]	; (80072c8 <HAL_DMA_IRQHandler+0xca4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a6b      	ldr	r2, [pc, #428]	; (80072cc <HAL_DMA_IRQHandler+0xca8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a6a      	ldr	r2, [pc, #424]	; (80072d0 <HAL_DMA_IRQHandler+0xcac>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_IRQHandler+0xb12>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a68      	ldr	r2, [pc, #416]	; (80072d4 <HAL_DMA_IRQHandler+0xcb0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <HAL_DMA_IRQHandler+0xb24>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0208 	bic.w	r2, r2, #8
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e007      	b.n	8007158 <HAL_DMA_IRQHandler+0xb34>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8165 	beq.w	800742c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800716a:	e15f      	b.n	800742c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	2202      	movs	r2, #2
 8007176:	409a      	lsls	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80c5 	beq.w	800730c <HAL_DMA_IRQHandler+0xce8>
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 80bf 	beq.w	800730c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2202      	movs	r2, #2
 8007198:	409a      	lsls	r2, r3
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d018      	beq.n	80071da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 813a 	beq.w	8007430 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c4:	e134      	b.n	8007430 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8130 	beq.w	8007430 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d8:	e12a      	b.n	8007430 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f040 8089 	bne.w	80072f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2b      	ldr	r2, [pc, #172]	; (8007298 <HAL_DMA_IRQHandler+0xc74>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d04a      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a29      	ldr	r2, [pc, #164]	; (800729c <HAL_DMA_IRQHandler+0xc78>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d045      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <HAL_DMA_IRQHandler+0xc7c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d040      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a26      	ldr	r2, [pc, #152]	; (80072a4 <HAL_DMA_IRQHandler+0xc80>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d03b      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a25      	ldr	r2, [pc, #148]	; (80072a8 <HAL_DMA_IRQHandler+0xc84>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d036      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a23      	ldr	r2, [pc, #140]	; (80072ac <HAL_DMA_IRQHandler+0xc88>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d031      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <HAL_DMA_IRQHandler+0xc8c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d02c      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a20      	ldr	r2, [pc, #128]	; (80072b4 <HAL_DMA_IRQHandler+0xc90>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d027      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <HAL_DMA_IRQHandler+0xc94>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d022      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <HAL_DMA_IRQHandler+0xc98>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01d      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <HAL_DMA_IRQHandler+0xc9c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d018      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1a      	ldr	r2, [pc, #104]	; (80072c4 <HAL_DMA_IRQHandler+0xca0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a19      	ldr	r2, [pc, #100]	; (80072c8 <HAL_DMA_IRQHandler+0xca4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a17      	ldr	r2, [pc, #92]	; (80072cc <HAL_DMA_IRQHandler+0xca8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d009      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_DMA_IRQHandler+0xcac>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_DMA_IRQHandler+0xc62>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <HAL_DMA_IRQHandler+0xcb0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d128      	bne.n	80072d8 <HAL_DMA_IRQHandler+0xcb4>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0214 	bic.w	r2, r2, #20
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	e027      	b.n	80072e8 <HAL_DMA_IRQHandler+0xcc4>
 8007298:	40020010 	.word	0x40020010
 800729c:	40020028 	.word	0x40020028
 80072a0:	40020040 	.word	0x40020040
 80072a4:	40020058 	.word	0x40020058
 80072a8:	40020070 	.word	0x40020070
 80072ac:	40020088 	.word	0x40020088
 80072b0:	400200a0 	.word	0x400200a0
 80072b4:	400200b8 	.word	0x400200b8
 80072b8:	40020410 	.word	0x40020410
 80072bc:	40020428 	.word	0x40020428
 80072c0:	40020440 	.word	0x40020440
 80072c4:	40020458 	.word	0x40020458
 80072c8:	40020470 	.word	0x40020470
 80072cc:	40020488 	.word	0x40020488
 80072d0:	400204a0 	.word	0x400204a0
 80072d4:	400204b8 	.word	0x400204b8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 020a 	bic.w	r2, r2, #10
 80072e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8097 	beq.w	8007430 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800730a:	e091      	b.n	8007430 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2208      	movs	r2, #8
 8007316:	409a      	lsls	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8088 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8082 	beq.w	8007432 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a41      	ldr	r2, [pc, #260]	; (8007438 <HAL_DMA_IRQHandler+0xe14>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d04a      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a3f      	ldr	r2, [pc, #252]	; (800743c <HAL_DMA_IRQHandler+0xe18>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d045      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a3e      	ldr	r2, [pc, #248]	; (8007440 <HAL_DMA_IRQHandler+0xe1c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d040      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <HAL_DMA_IRQHandler+0xe20>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d03b      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <HAL_DMA_IRQHandler+0xe24>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d036      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a39      	ldr	r2, [pc, #228]	; (800744c <HAL_DMA_IRQHandler+0xe28>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d031      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a38      	ldr	r2, [pc, #224]	; (8007450 <HAL_DMA_IRQHandler+0xe2c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d02c      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a36      	ldr	r2, [pc, #216]	; (8007454 <HAL_DMA_IRQHandler+0xe30>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d027      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a35      	ldr	r2, [pc, #212]	; (8007458 <HAL_DMA_IRQHandler+0xe34>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d022      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a33      	ldr	r2, [pc, #204]	; (800745c <HAL_DMA_IRQHandler+0xe38>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01d      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a32      	ldr	r2, [pc, #200]	; (8007460 <HAL_DMA_IRQHandler+0xe3c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a30      	ldr	r2, [pc, #192]	; (8007464 <HAL_DMA_IRQHandler+0xe40>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d013      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2f      	ldr	r2, [pc, #188]	; (8007468 <HAL_DMA_IRQHandler+0xe44>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2d      	ldr	r2, [pc, #180]	; (800746c <HAL_DMA_IRQHandler+0xe48>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <HAL_DMA_IRQHandler+0xe4c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_DMA_IRQHandler+0xdaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <HAL_DMA_IRQHandler+0xe50>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d108      	bne.n	80073e0 <HAL_DMA_IRQHandler+0xdbc>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 021c 	bic.w	r2, r2, #28
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e007      	b.n	80073f0 <HAL_DMA_IRQHandler+0xdcc>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 020e 	bic.w	r2, r2, #14
 80073ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2201      	movs	r2, #1
 80073fa:	409a      	lsls	r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	e004      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007430:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007432:	3728      	adds	r7, #40	; 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8

08007478 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007490:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a7f      	ldr	r2, [pc, #508]	; (8007694 <DMA_SetConfig+0x21c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d072      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a7d      	ldr	r2, [pc, #500]	; (8007698 <DMA_SetConfig+0x220>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d06d      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a7c      	ldr	r2, [pc, #496]	; (800769c <DMA_SetConfig+0x224>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d068      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a7a      	ldr	r2, [pc, #488]	; (80076a0 <DMA_SetConfig+0x228>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d063      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a79      	ldr	r2, [pc, #484]	; (80076a4 <DMA_SetConfig+0x22c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d05e      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a77      	ldr	r2, [pc, #476]	; (80076a8 <DMA_SetConfig+0x230>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d059      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a76      	ldr	r2, [pc, #472]	; (80076ac <DMA_SetConfig+0x234>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d054      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a74      	ldr	r2, [pc, #464]	; (80076b0 <DMA_SetConfig+0x238>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d04f      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a73      	ldr	r2, [pc, #460]	; (80076b4 <DMA_SetConfig+0x23c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a71      	ldr	r2, [pc, #452]	; (80076b8 <DMA_SetConfig+0x240>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <DMA_SetConfig+0x10a>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a70      	ldr	r2, [pc, #448]	; (80076bc <DMA_SetConfig+0x244>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a6e      	ldr	r2, [pc, #440]	; (80076c0 <DMA_SetConfig+0x248>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a6d      	ldr	r2, [pc, #436]	; (80076c4 <DMA_SetConfig+0x24c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a6b      	ldr	r2, [pc, #428]	; (80076c8 <DMA_SetConfig+0x250>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a6a      	ldr	r2, [pc, #424]	; (80076cc <DMA_SetConfig+0x254>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a68      	ldr	r2, [pc, #416]	; (80076d0 <DMA_SetConfig+0x258>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a67      	ldr	r2, [pc, #412]	; (80076d4 <DMA_SetConfig+0x25c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a65      	ldr	r2, [pc, #404]	; (80076d8 <DMA_SetConfig+0x260>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a64      	ldr	r2, [pc, #400]	; (80076dc <DMA_SetConfig+0x264>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a62      	ldr	r2, [pc, #392]	; (80076e0 <DMA_SetConfig+0x268>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a61      	ldr	r2, [pc, #388]	; (80076e4 <DMA_SetConfig+0x26c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a5f      	ldr	r2, [pc, #380]	; (80076e8 <DMA_SetConfig+0x270>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <DMA_SetConfig+0x10a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5e      	ldr	r2, [pc, #376]	; (80076ec <DMA_SetConfig+0x274>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <DMA_SetConfig+0x10a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5c      	ldr	r2, [pc, #368]	; (80076f0 <DMA_SetConfig+0x278>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d101      	bne.n	8007586 <DMA_SetConfig+0x10e>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <DMA_SetConfig+0x110>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007594:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a39      	ldr	r2, [pc, #228]	; (8007694 <DMA_SetConfig+0x21c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d04a      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a38      	ldr	r2, [pc, #224]	; (8007698 <DMA_SetConfig+0x220>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d045      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a36      	ldr	r2, [pc, #216]	; (800769c <DMA_SetConfig+0x224>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d040      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a35      	ldr	r2, [pc, #212]	; (80076a0 <DMA_SetConfig+0x228>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d03b      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a33      	ldr	r2, [pc, #204]	; (80076a4 <DMA_SetConfig+0x22c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d036      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a32      	ldr	r2, [pc, #200]	; (80076a8 <DMA_SetConfig+0x230>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d031      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a30      	ldr	r2, [pc, #192]	; (80076ac <DMA_SetConfig+0x234>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d02c      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a2f      	ldr	r2, [pc, #188]	; (80076b0 <DMA_SetConfig+0x238>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d027      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <DMA_SetConfig+0x23c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <DMA_SetConfig+0x240>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d01d      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <DMA_SetConfig+0x244>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <DMA_SetConfig+0x248>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <DMA_SetConfig+0x24c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <DMA_SetConfig+0x250>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a24      	ldr	r2, [pc, #144]	; (80076cc <DMA_SetConfig+0x254>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <DMA_SetConfig+0x1d0>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a23      	ldr	r2, [pc, #140]	; (80076d0 <DMA_SetConfig+0x258>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d101      	bne.n	800764c <DMA_SetConfig+0x1d4>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <DMA_SetConfig+0x1d6>
 800764c:	2300      	movs	r3, #0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d059      	beq.n	8007706 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	223f      	movs	r2, #63	; 0x3f
 800765c:	409a      	lsls	r2, r3
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007670:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d138      	bne.n	80076f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007692:	e086      	b.n	80077a2 <DMA_SetConfig+0x32a>
 8007694:	40020010 	.word	0x40020010
 8007698:	40020028 	.word	0x40020028
 800769c:	40020040 	.word	0x40020040
 80076a0:	40020058 	.word	0x40020058
 80076a4:	40020070 	.word	0x40020070
 80076a8:	40020088 	.word	0x40020088
 80076ac:	400200a0 	.word	0x400200a0
 80076b0:	400200b8 	.word	0x400200b8
 80076b4:	40020410 	.word	0x40020410
 80076b8:	40020428 	.word	0x40020428
 80076bc:	40020440 	.word	0x40020440
 80076c0:	40020458 	.word	0x40020458
 80076c4:	40020470 	.word	0x40020470
 80076c8:	40020488 	.word	0x40020488
 80076cc:	400204a0 	.word	0x400204a0
 80076d0:	400204b8 	.word	0x400204b8
 80076d4:	58025408 	.word	0x58025408
 80076d8:	5802541c 	.word	0x5802541c
 80076dc:	58025430 	.word	0x58025430
 80076e0:	58025444 	.word	0x58025444
 80076e4:	58025458 	.word	0x58025458
 80076e8:	5802546c 	.word	0x5802546c
 80076ec:	58025480 	.word	0x58025480
 80076f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	60da      	str	r2, [r3, #12]
}
 8007704:	e04d      	b.n	80077a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a29      	ldr	r2, [pc, #164]	; (80077b0 <DMA_SetConfig+0x338>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d022      	beq.n	8007756 <DMA_SetConfig+0x2de>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <DMA_SetConfig+0x33c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01d      	beq.n	8007756 <DMA_SetConfig+0x2de>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a26      	ldr	r2, [pc, #152]	; (80077b8 <DMA_SetConfig+0x340>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d018      	beq.n	8007756 <DMA_SetConfig+0x2de>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a24      	ldr	r2, [pc, #144]	; (80077bc <DMA_SetConfig+0x344>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <DMA_SetConfig+0x2de>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a23      	ldr	r2, [pc, #140]	; (80077c0 <DMA_SetConfig+0x348>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00e      	beq.n	8007756 <DMA_SetConfig+0x2de>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a21      	ldr	r2, [pc, #132]	; (80077c4 <DMA_SetConfig+0x34c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d009      	beq.n	8007756 <DMA_SetConfig+0x2de>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a20      	ldr	r2, [pc, #128]	; (80077c8 <DMA_SetConfig+0x350>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d004      	beq.n	8007756 <DMA_SetConfig+0x2de>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1e      	ldr	r2, [pc, #120]	; (80077cc <DMA_SetConfig+0x354>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d101      	bne.n	800775a <DMA_SetConfig+0x2e2>
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <DMA_SetConfig+0x2e4>
 800775a:	2300      	movs	r3, #0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d020      	beq.n	80077a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d108      	bne.n	8007792 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	60da      	str	r2, [r3, #12]
}
 8007790:	e007      	b.n	80077a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	58025408 	.word	0x58025408
 80077b4:	5802541c 	.word	0x5802541c
 80077b8:	58025430 	.word	0x58025430
 80077bc:	58025444 	.word	0x58025444
 80077c0:	58025458 	.word	0x58025458
 80077c4:	5802546c 	.word	0x5802546c
 80077c8:	58025480 	.word	0x58025480
 80077cc:	58025494 	.word	0x58025494

080077d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a42      	ldr	r2, [pc, #264]	; (80078e8 <DMA_CalcBaseAndBitshift+0x118>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a41      	ldr	r2, [pc, #260]	; (80078ec <DMA_CalcBaseAndBitshift+0x11c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d045      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a3f      	ldr	r2, [pc, #252]	; (80078f0 <DMA_CalcBaseAndBitshift+0x120>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d040      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a3e      	ldr	r2, [pc, #248]	; (80078f4 <DMA_CalcBaseAndBitshift+0x124>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d03b      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a3c      	ldr	r2, [pc, #240]	; (80078f8 <DMA_CalcBaseAndBitshift+0x128>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d036      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a3b      	ldr	r2, [pc, #236]	; (80078fc <DMA_CalcBaseAndBitshift+0x12c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d031      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a39      	ldr	r2, [pc, #228]	; (8007900 <DMA_CalcBaseAndBitshift+0x130>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d02c      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a38      	ldr	r2, [pc, #224]	; (8007904 <DMA_CalcBaseAndBitshift+0x134>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d027      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a36      	ldr	r2, [pc, #216]	; (8007908 <DMA_CalcBaseAndBitshift+0x138>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d022      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a35      	ldr	r2, [pc, #212]	; (800790c <DMA_CalcBaseAndBitshift+0x13c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01d      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a33      	ldr	r2, [pc, #204]	; (8007910 <DMA_CalcBaseAndBitshift+0x140>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a32      	ldr	r2, [pc, #200]	; (8007914 <DMA_CalcBaseAndBitshift+0x144>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a30      	ldr	r2, [pc, #192]	; (8007918 <DMA_CalcBaseAndBitshift+0x148>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2f      	ldr	r2, [pc, #188]	; (800791c <DMA_CalcBaseAndBitshift+0x14c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2d      	ldr	r2, [pc, #180]	; (8007920 <DMA_CalcBaseAndBitshift+0x150>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <DMA_CalcBaseAndBitshift+0xa8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2c      	ldr	r2, [pc, #176]	; (8007924 <DMA_CalcBaseAndBitshift+0x154>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d101      	bne.n	800787c <DMA_CalcBaseAndBitshift+0xac>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <DMA_CalcBaseAndBitshift+0xae>
 800787c:	2300      	movs	r3, #0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d024      	beq.n	80078cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	3b10      	subs	r3, #16
 800788a:	4a27      	ldr	r2, [pc, #156]	; (8007928 <DMA_CalcBaseAndBitshift+0x158>)
 800788c:	fba2 2303 	umull	r2, r3, r2, r3
 8007890:	091b      	lsrs	r3, r3, #4
 8007892:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	4a24      	ldr	r2, [pc, #144]	; (800792c <DMA_CalcBaseAndBitshift+0x15c>)
 800789c:	5cd3      	ldrb	r3, [r2, r3]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d908      	bls.n	80078bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	4b1f      	ldr	r3, [pc, #124]	; (8007930 <DMA_CalcBaseAndBitshift+0x160>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	659a      	str	r2, [r3, #88]	; 0x58
 80078ba:	e00d      	b.n	80078d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <DMA_CalcBaseAndBitshift+0x160>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6593      	str	r3, [r2, #88]	; 0x58
 80078ca:	e005      	b.n	80078d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	40020010 	.word	0x40020010
 80078ec:	40020028 	.word	0x40020028
 80078f0:	40020040 	.word	0x40020040
 80078f4:	40020058 	.word	0x40020058
 80078f8:	40020070 	.word	0x40020070
 80078fc:	40020088 	.word	0x40020088
 8007900:	400200a0 	.word	0x400200a0
 8007904:	400200b8 	.word	0x400200b8
 8007908:	40020410 	.word	0x40020410
 800790c:	40020428 	.word	0x40020428
 8007910:	40020440 	.word	0x40020440
 8007914:	40020458 	.word	0x40020458
 8007918:	40020470 	.word	0x40020470
 800791c:	40020488 	.word	0x40020488
 8007920:	400204a0 	.word	0x400204a0
 8007924:	400204b8 	.word	0x400204b8
 8007928:	aaaaaaab 	.word	0xaaaaaaab
 800792c:	08014c74 	.word	0x08014c74
 8007930:	fffffc00 	.word	0xfffffc00

08007934 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d120      	bne.n	800798a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	2b03      	cmp	r3, #3
 800794e:	d858      	bhi.n	8007a02 <DMA_CheckFifoParam+0xce>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <DMA_CheckFifoParam+0x24>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007969 	.word	0x08007969
 800795c:	0800797b 	.word	0x0800797b
 8007960:	08007969 	.word	0x08007969
 8007964:	08007a03 	.word	0x08007a03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d048      	beq.n	8007a06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007978:	e045      	b.n	8007a06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007982:	d142      	bne.n	8007a0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007988:	e03f      	b.n	8007a0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007992:	d123      	bne.n	80079dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	2b03      	cmp	r3, #3
 800799a:	d838      	bhi.n	8007a0e <DMA_CheckFifoParam+0xda>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <DMA_CheckFifoParam+0x70>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079bb 	.word	0x080079bb
 80079ac:	080079b5 	.word	0x080079b5
 80079b0:	080079cd 	.word	0x080079cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
        break;
 80079b8:	e030      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d025      	beq.n	8007a12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079ca:	e022      	b.n	8007a12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079d4:	d11f      	bne.n	8007a16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079da:	e01c      	b.n	8007a16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d902      	bls.n	80079ea <DMA_CheckFifoParam+0xb6>
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d003      	beq.n	80079f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80079e8:	e018      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
        break;
 80079ee:	e015      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	e00b      	b.n	8007a1a <DMA_CheckFifoParam+0xe6>
        break;
 8007a02:	bf00      	nop
 8007a04:	e00a      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a06:	bf00      	nop
 8007a08:	e008      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a0a:	bf00      	nop
 8007a0c:	e006      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e004      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a12:	bf00      	nop
 8007a14:	e002      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
        break;
 8007a16:	bf00      	nop
 8007a18:	e000      	b.n	8007a1c <DMA_CheckFifoParam+0xe8>
    break;
 8007a1a:	bf00      	nop
    }
  }

  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a38      	ldr	r2, [pc, #224]	; (8007b20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d022      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a36      	ldr	r2, [pc, #216]	; (8007b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01d      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a35      	ldr	r2, [pc, #212]	; (8007b28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a33      	ldr	r2, [pc, #204]	; (8007b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a32      	ldr	r2, [pc, #200]	; (8007b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a30      	ldr	r2, [pc, #192]	; (8007b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d101      	bne.n	8007a8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01a      	beq.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	3b08      	subs	r3, #8
 8007a9c:	4a28      	ldr	r2, [pc, #160]	; (8007b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4b26      	ldr	r3, [pc, #152]	; (8007b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ab8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ac8:	e024      	b.n	8007b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	3b10      	subs	r3, #16
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d806      	bhi.n	8007af2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d902      	bls.n	8007af2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3308      	adds	r3, #8
 8007af0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a16      	ldr	r2, [pc, #88]	; (8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	409a      	lsls	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	58025408 	.word	0x58025408
 8007b24:	5802541c 	.word	0x5802541c
 8007b28:	58025430 	.word	0x58025430
 8007b2c:	58025444 	.word	0x58025444
 8007b30:	58025458 	.word	0x58025458
 8007b34:	5802546c 	.word	0x5802546c
 8007b38:	58025480 	.word	0x58025480
 8007b3c:	58025494 	.word	0x58025494
 8007b40:	cccccccd 	.word	0xcccccccd
 8007b44:	16009600 	.word	0x16009600
 8007b48:	58025880 	.word	0x58025880
 8007b4c:	aaaaaaab 	.word	0xaaaaaaab
 8007b50:	400204b8 	.word	0x400204b8
 8007b54:	4002040f 	.word	0x4002040f
 8007b58:	10008200 	.word	0x10008200
 8007b5c:	40020880 	.word	0x40020880

08007b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d04a      	beq.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d847      	bhi.n	8007c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a25      	ldr	r2, [pc, #148]	; (8007c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d01d      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a22      	ldr	r2, [pc, #136]	; (8007c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a21      	ldr	r2, [pc, #132]	; (8007c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1e      	ldr	r2, [pc, #120]	; (8007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d101      	bne.n	8007bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007be8:	671a      	str	r2, [r3, #112]	; 0x70
 8007bea:	e009      	b.n	8007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a11      	ldr	r2, [pc, #68]	; (8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007bfe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2201      	movs	r2, #1
 8007c06:	409a      	lsls	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	58025408 	.word	0x58025408
 8007c1c:	5802541c 	.word	0x5802541c
 8007c20:	58025430 	.word	0x58025430
 8007c24:	58025444 	.word	0x58025444
 8007c28:	58025458 	.word	0x58025458
 8007c2c:	5802546c 	.word	0x5802546c
 8007c30:	58025480 	.word	0x58025480
 8007c34:	58025494 	.word	0x58025494
 8007c38:	1600963f 	.word	0x1600963f
 8007c3c:	58025940 	.word	0x58025940
 8007c40:	1000823f 	.word	0x1000823f
 8007c44:	40020940 	.word	0x40020940

08007c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b089      	sub	sp, #36	; 0x24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c56:	4b89      	ldr	r3, [pc, #548]	; (8007e7c <HAL_GPIO_Init+0x234>)
 8007c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c5a:	e194      	b.n	8007f86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	2101      	movs	r1, #1
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	4013      	ands	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8186 	beq.w	8007f80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d005      	beq.n	8007c8c <HAL_GPIO_Init+0x44>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d130      	bne.n	8007cee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	2203      	movs	r2, #3
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	091b      	lsrs	r3, r3, #4
 8007cd8:	f003 0201 	and.w	r2, r3, #1
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 0303 	and.w	r3, r3, #3
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d017      	beq.n	8007d2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	2203      	movs	r2, #3
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d123      	bne.n	8007d7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	08da      	lsrs	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3208      	adds	r2, #8
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	220f      	movs	r2, #15
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	08da      	lsrs	r2, r3, #3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3208      	adds	r2, #8
 8007d78:	69b9      	ldr	r1, [r7, #24]
 8007d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	2203      	movs	r2, #3
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	4013      	ands	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f003 0203 	and.w	r2, r3, #3
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80e0 	beq.w	8007f80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dc0:	4b2f      	ldr	r3, [pc, #188]	; (8007e80 <HAL_GPIO_Init+0x238>)
 8007dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dc6:	4a2e      	ldr	r2, [pc, #184]	; (8007e80 <HAL_GPIO_Init+0x238>)
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dd0:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <HAL_GPIO_Init+0x238>)
 8007dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dde:	4a29      	ldr	r2, [pc, #164]	; (8007e84 <HAL_GPIO_Init+0x23c>)
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	3302      	adds	r3, #2
 8007de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	220f      	movs	r2, #15
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a20      	ldr	r2, [pc, #128]	; (8007e88 <HAL_GPIO_Init+0x240>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d052      	beq.n	8007eb0 <HAL_GPIO_Init+0x268>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	; (8007e8c <HAL_GPIO_Init+0x244>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d031      	beq.n	8007e76 <HAL_GPIO_Init+0x22e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1e      	ldr	r2, [pc, #120]	; (8007e90 <HAL_GPIO_Init+0x248>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d02b      	beq.n	8007e72 <HAL_GPIO_Init+0x22a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <HAL_GPIO_Init+0x24c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d025      	beq.n	8007e6e <HAL_GPIO_Init+0x226>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1c      	ldr	r2, [pc, #112]	; (8007e98 <HAL_GPIO_Init+0x250>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01f      	beq.n	8007e6a <HAL_GPIO_Init+0x222>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a1b      	ldr	r2, [pc, #108]	; (8007e9c <HAL_GPIO_Init+0x254>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d019      	beq.n	8007e66 <HAL_GPIO_Init+0x21e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a1a      	ldr	r2, [pc, #104]	; (8007ea0 <HAL_GPIO_Init+0x258>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <HAL_GPIO_Init+0x21a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <HAL_GPIO_Init+0x25c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00d      	beq.n	8007e5e <HAL_GPIO_Init+0x216>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_GPIO_Init+0x260>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d007      	beq.n	8007e5a <HAL_GPIO_Init+0x212>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	; (8007eac <HAL_GPIO_Init+0x264>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <HAL_GPIO_Init+0x20e>
 8007e52:	2309      	movs	r3, #9
 8007e54:	e02d      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e56:	230a      	movs	r3, #10
 8007e58:	e02b      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	e029      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e5e:	2307      	movs	r3, #7
 8007e60:	e027      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e62:	2306      	movs	r3, #6
 8007e64:	e025      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e66:	2305      	movs	r3, #5
 8007e68:	e023      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	e021      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e01f      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e01d      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e01b      	b.n	8007eb2 <HAL_GPIO_Init+0x26a>
 8007e7a:	bf00      	nop
 8007e7c:	58000080 	.word	0x58000080
 8007e80:	58024400 	.word	0x58024400
 8007e84:	58000400 	.word	0x58000400
 8007e88:	58020000 	.word	0x58020000
 8007e8c:	58020400 	.word	0x58020400
 8007e90:	58020800 	.word	0x58020800
 8007e94:	58020c00 	.word	0x58020c00
 8007e98:	58021000 	.word	0x58021000
 8007e9c:	58021400 	.word	0x58021400
 8007ea0:	58021800 	.word	0x58021800
 8007ea4:	58021c00 	.word	0x58021c00
 8007ea8:	58022000 	.word	0x58022000
 8007eac:	58022400 	.word	0x58022400
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	f002 0203 	and.w	r2, r2, #3
 8007eb8:	0092      	lsls	r2, r2, #2
 8007eba:	4093      	lsls	r3, r2
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ec2:	4938      	ldr	r1, [pc, #224]	; (8007fa4 <HAL_GPIO_Init+0x35c>)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	089b      	lsrs	r3, r3, #2
 8007ec8:	3302      	adds	r3, #2
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	43db      	mvns	r3, r3
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4013      	ands	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	3301      	adds	r3, #1
 8007f84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f47f ae63 	bne.w	8007c5c <HAL_GPIO_Init+0x14>
  }
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	3724      	adds	r7, #36	; 0x24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	58000400 	.word	0x58000400

08007fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	807b      	strh	r3, [r7, #2]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fb8:	787b      	ldrb	r3, [r7, #1]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fbe:	887a      	ldrh	r2, [r7, #2]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007fc4:	e003      	b.n	8007fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fc6:	887b      	ldrh	r3, [r7, #2]
 8007fc8:	041a      	lsls	r2, r3, #16
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	619a      	str	r2, [r3, #24]
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
	...

08007fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e08b      	b.n	8008106 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fa f982 	bl	800230c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	; 0x24
 800800c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0201 	bic.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800802c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800803c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d107      	bne.n	8008056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008052:	609a      	str	r2, [r3, #8]
 8008054:	e006      	b.n	8008064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d108      	bne.n	800807e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800807a:	605a      	str	r2, [r3, #4]
 800807c:	e007      	b.n	800808e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800808c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6859      	ldr	r1, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <HAL_I2C_Init+0x134>)
 800809a:	430b      	orrs	r3, r1
 800809c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69d9      	ldr	r1, [r3, #28]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1a      	ldr	r2, [r3, #32]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	02008000 	.word	0x02008000

08008114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b20      	cmp	r3, #32
 8008128:	d138      	bne.n	800819c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008134:	2302      	movs	r3, #2
 8008136:	e032      	b.n	800819e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2224      	movs	r2, #36	; 0x24
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0201 	bic.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	e000      	b.n	800819e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800819c:	2302      	movs	r3, #2
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d139      	bne.n	8008234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e033      	b.n	8008236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2224      	movs	r2, #36	; 0x24
 80081da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0201 	bic.w	r2, r2, #1
 80081ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008234:	2302      	movs	r3, #2
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <HAL_PWREx_ConfigSupply+0x70>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b04      	cmp	r3, #4
 8008256:	d00a      	beq.n	800826e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <HAL_PWREx_ConfigSupply+0x70>)
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d001      	beq.n	800826a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e01f      	b.n	80082aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	e01d      	b.n	80082aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800826e:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <HAL_PWREx_ConfigSupply+0x70>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f023 0207 	bic.w	r2, r3, #7
 8008276:	490f      	ldr	r1, [pc, #60]	; (80082b4 <HAL_PWREx_ConfigSupply+0x70>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4313      	orrs	r3, r2
 800827c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800827e:	f7fa fd7f 	bl	8002d80 <HAL_GetTick>
 8008282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008284:	e009      	b.n	800829a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008286:	f7fa fd7b 	bl	8002d80 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008294:	d901      	bls.n	800829a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e007      	b.n	80082aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <HAL_PWREx_ConfigSupply+0x70>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082a6:	d1ee      	bne.n	8008286 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	58024800 	.word	0x58024800

080082b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08c      	sub	sp, #48	; 0x30
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	f000 bc48 	b.w	8008b5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8088 	beq.w	80083ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082da:	4b99      	ldr	r3, [pc, #612]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082e4:	4b96      	ldr	r3, [pc, #600]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	2b10      	cmp	r3, #16
 80082ee:	d007      	beq.n	8008300 <HAL_RCC_OscConfig+0x48>
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	2b18      	cmp	r3, #24
 80082f4:	d111      	bne.n	800831a <HAL_RCC_OscConfig+0x62>
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d10c      	bne.n	800831a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008300:	4b8f      	ldr	r3, [pc, #572]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d06d      	beq.n	80083e8 <HAL_RCC_OscConfig+0x130>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d169      	bne.n	80083e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f000 bc21 	b.w	8008b5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008322:	d106      	bne.n	8008332 <HAL_RCC_OscConfig+0x7a>
 8008324:	4b86      	ldr	r3, [pc, #536]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a85      	ldr	r2, [pc, #532]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800832a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	e02e      	b.n	8008390 <HAL_RCC_OscConfig+0xd8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10c      	bne.n	8008354 <HAL_RCC_OscConfig+0x9c>
 800833a:	4b81      	ldr	r3, [pc, #516]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a80      	ldr	r2, [pc, #512]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4b7e      	ldr	r3, [pc, #504]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a7d      	ldr	r2, [pc, #500]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800834c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	e01d      	b.n	8008390 <HAL_RCC_OscConfig+0xd8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800835c:	d10c      	bne.n	8008378 <HAL_RCC_OscConfig+0xc0>
 800835e:	4b78      	ldr	r3, [pc, #480]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a77      	ldr	r2, [pc, #476]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	4b75      	ldr	r3, [pc, #468]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a74      	ldr	r2, [pc, #464]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	e00b      	b.n	8008390 <HAL_RCC_OscConfig+0xd8>
 8008378:	4b71      	ldr	r3, [pc, #452]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a70      	ldr	r2, [pc, #448]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800837e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	4b6e      	ldr	r3, [pc, #440]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a6d      	ldr	r2, [pc, #436]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800838a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800838e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d013      	beq.n	80083c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008398:	f7fa fcf2 	bl	8002d80 <HAL_GetTick>
 800839c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fa fcee 	bl	8002d80 <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e3d4      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083b2:	4b63      	ldr	r3, [pc, #396]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f0      	beq.n	80083a0 <HAL_RCC_OscConfig+0xe8>
 80083be:	e014      	b.n	80083ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fa fcde 	bl	8002d80 <HAL_GetTick>
 80083c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c8:	f7fa fcda 	bl	8002d80 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b64      	cmp	r3, #100	; 0x64
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e3c0      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083da:	4b59      	ldr	r3, [pc, #356]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x110>
 80083e6:	e000      	b.n	80083ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 80ca 	beq.w	800858c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083f8:	4b51      	ldr	r3, [pc, #324]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008400:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008402:	4b4f      	ldr	r3, [pc, #316]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008406:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <HAL_RCC_OscConfig+0x166>
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	2b18      	cmp	r3, #24
 8008412:	d156      	bne.n	80084c2 <HAL_RCC_OscConfig+0x20a>
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d151      	bne.n	80084c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800841e:	4b48      	ldr	r3, [pc, #288]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <HAL_RCC_OscConfig+0x17e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e392      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008436:	4b42      	ldr	r3, [pc, #264]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f023 0219 	bic.w	r2, r3, #25
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	493f      	ldr	r1, [pc, #252]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008444:	4313      	orrs	r3, r2
 8008446:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fa fc9a 	bl	8002d80 <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008450:	f7fa fc96 	bl	8002d80 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e37c      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008462:	4b37      	ldr	r3, [pc, #220]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800846e:	f7fa fc93 	bl	8002d98 <HAL_GetREVID>
 8008472:	4603      	mov	r3, r0
 8008474:	f241 0203 	movw	r2, #4099	; 0x1003
 8008478:	4293      	cmp	r3, r2
 800847a:	d817      	bhi.n	80084ac <HAL_RCC_OscConfig+0x1f4>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d108      	bne.n	8008496 <HAL_RCC_OscConfig+0x1de>
 8008484:	4b2e      	ldr	r3, [pc, #184]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800848c:	4a2c      	ldr	r2, [pc, #176]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800848e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008492:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008494:	e07a      	b.n	800858c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008496:	4b2a      	ldr	r3, [pc, #168]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	031b      	lsls	r3, r3, #12
 80084a4:	4926      	ldr	r1, [pc, #152]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084aa:	e06f      	b.n	800858c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ac:	4b24      	ldr	r3, [pc, #144]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	4921      	ldr	r1, [pc, #132]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c0:	e064      	b.n	800858c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d047      	beq.n	800855a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084ca:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f023 0219 	bic.w	r2, r3, #25
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	491a      	ldr	r1, [pc, #104]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fa fc50 	bl	8002d80 <HAL_GetTick>
 80084e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e4:	f7fa fc4c 	bl	8002d80 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e332      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f0      	beq.n	80084e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008502:	f7fa fc49 	bl	8002d98 <HAL_GetREVID>
 8008506:	4603      	mov	r3, r0
 8008508:	f241 0203 	movw	r2, #4099	; 0x1003
 800850c:	4293      	cmp	r3, r2
 800850e:	d819      	bhi.n	8008544 <HAL_RCC_OscConfig+0x28c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b40      	cmp	r3, #64	; 0x40
 8008516:	d108      	bne.n	800852a <HAL_RCC_OscConfig+0x272>
 8008518:	4b09      	ldr	r3, [pc, #36]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008520:	4a07      	ldr	r2, [pc, #28]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008526:	6053      	str	r3, [r2, #4]
 8008528:	e030      	b.n	800858c <HAL_RCC_OscConfig+0x2d4>
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	031b      	lsls	r3, r3, #12
 8008538:	4901      	ldr	r1, [pc, #4]	; (8008540 <HAL_RCC_OscConfig+0x288>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
 800853e:	e025      	b.n	800858c <HAL_RCC_OscConfig+0x2d4>
 8008540:	58024400 	.word	0x58024400
 8008544:	4b9a      	ldr	r3, [pc, #616]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	061b      	lsls	r3, r3, #24
 8008552:	4997      	ldr	r1, [pc, #604]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008554:	4313      	orrs	r3, r2
 8008556:	604b      	str	r3, [r1, #4]
 8008558:	e018      	b.n	800858c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800855a:	4b95      	ldr	r3, [pc, #596]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a94      	ldr	r2, [pc, #592]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008560:	f023 0301 	bic.w	r3, r3, #1
 8008564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008566:	f7fa fc0b 	bl	8002d80 <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800856e:	f7fa fc07 	bl	8002d80 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e2ed      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008580:	4b8b      	ldr	r3, [pc, #556]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f0      	bne.n	800856e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 80a9 	beq.w	80086ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800859a:	4b85      	ldr	r3, [pc, #532]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085a4:	4b82      	ldr	r3, [pc, #520]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d007      	beq.n	80085c0 <HAL_RCC_OscConfig+0x308>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b18      	cmp	r3, #24
 80085b4:	d13a      	bne.n	800862c <HAL_RCC_OscConfig+0x374>
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d135      	bne.n	800862c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085c0:	4b7b      	ldr	r3, [pc, #492]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_RCC_OscConfig+0x320>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	2b80      	cmp	r3, #128	; 0x80
 80085d2:	d001      	beq.n	80085d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e2c1      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085d8:	f7fa fbde 	bl	8002d98 <HAL_GetREVID>
 80085dc:	4603      	mov	r3, r0
 80085de:	f241 0203 	movw	r2, #4099	; 0x1003
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d817      	bhi.n	8008616 <HAL_RCC_OscConfig+0x35e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	d108      	bne.n	8008600 <HAL_RCC_OscConfig+0x348>
 80085ee:	4b70      	ldr	r3, [pc, #448]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80085f6:	4a6e      	ldr	r2, [pc, #440]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80085f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085fe:	e075      	b.n	80086ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008600:	4b6b      	ldr	r3, [pc, #428]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	069b      	lsls	r3, r3, #26
 800860e:	4968      	ldr	r1, [pc, #416]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008610:	4313      	orrs	r3, r2
 8008612:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008614:	e06a      	b.n	80086ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008616:	4b66      	ldr	r3, [pc, #408]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	061b      	lsls	r3, r3, #24
 8008624:	4962      	ldr	r1, [pc, #392]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008626:	4313      	orrs	r3, r2
 8008628:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800862a:	e05f      	b.n	80086ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d042      	beq.n	80086ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008634:	4b5e      	ldr	r3, [pc, #376]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a5d      	ldr	r2, [pc, #372]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800863a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008640:	f7fa fb9e 	bl	8002d80 <HAL_GetTick>
 8008644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008646:	e008      	b.n	800865a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008648:	f7fa fb9a 	bl	8002d80 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e280      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800865a:	4b55      	ldr	r3, [pc, #340]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f0      	beq.n	8008648 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008666:	f7fa fb97 	bl	8002d98 <HAL_GetREVID>
 800866a:	4603      	mov	r3, r0
 800866c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008670:	4293      	cmp	r3, r2
 8008672:	d817      	bhi.n	80086a4 <HAL_RCC_OscConfig+0x3ec>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	2b20      	cmp	r3, #32
 800867a:	d108      	bne.n	800868e <HAL_RCC_OscConfig+0x3d6>
 800867c:	4b4c      	ldr	r3, [pc, #304]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008684:	4a4a      	ldr	r2, [pc, #296]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800868a:	6053      	str	r3, [r2, #4]
 800868c:	e02e      	b.n	80086ec <HAL_RCC_OscConfig+0x434>
 800868e:	4b48      	ldr	r3, [pc, #288]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	069b      	lsls	r3, r3, #26
 800869c:	4944      	ldr	r1, [pc, #272]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	604b      	str	r3, [r1, #4]
 80086a2:	e023      	b.n	80086ec <HAL_RCC_OscConfig+0x434>
 80086a4:	4b42      	ldr	r3, [pc, #264]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	493f      	ldr	r1, [pc, #252]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60cb      	str	r3, [r1, #12]
 80086b8:	e018      	b.n	80086ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086ba:	4b3d      	ldr	r3, [pc, #244]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a3c      	ldr	r2, [pc, #240]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80086c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c6:	f7fa fb5b 	bl	8002d80 <HAL_GetTick>
 80086ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086ce:	f7fa fb57 	bl	8002d80 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e23d      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086e0:	4b33      	ldr	r3, [pc, #204]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f0      	bne.n	80086ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d036      	beq.n	8008766 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d019      	beq.n	8008734 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008700:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870c:	f7fa fb38 	bl	8002d80 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008714:	f7fa fb34 	bl	8002d80 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e21a      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008726:	4b22      	ldr	r3, [pc, #136]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0f0      	beq.n	8008714 <HAL_RCC_OscConfig+0x45c>
 8008732:	e018      	b.n	8008766 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008734:	4b1e      	ldr	r3, [pc, #120]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008738:	4a1d      	ldr	r2, [pc, #116]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008740:	f7fa fb1e 	bl	8002d80 <HAL_GetTick>
 8008744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008746:	e008      	b.n	800875a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008748:	f7fa fb1a 	bl	8002d80 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e200      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800875a:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800875c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f0      	bne.n	8008748 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d039      	beq.n	80087e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01c      	beq.n	80087b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a0c      	ldr	r2, [pc, #48]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 8008780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008784:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008786:	f7fa fafb 	bl	8002d80 <HAL_GetTick>
 800878a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800878e:	f7fa faf7 	bl	8002d80 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e1dd      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087a0:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <HAL_RCC_OscConfig+0x4f8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0f0      	beq.n	800878e <HAL_RCC_OscConfig+0x4d6>
 80087ac:	e01b      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
 80087ae:	bf00      	nop
 80087b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087b4:	4b9b      	ldr	r3, [pc, #620]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a9a      	ldr	r2, [pc, #616]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80087ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087c0:	f7fa fade 	bl	8002d80 <HAL_GetTick>
 80087c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087c6:	e008      	b.n	80087da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087c8:	f7fa fada 	bl	8002d80 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d901      	bls.n	80087da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e1c0      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087da:	4b92      	ldr	r3, [pc, #584]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f0      	bne.n	80087c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0304 	and.w	r3, r3, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8081 	beq.w	80088f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087f4:	4b8c      	ldr	r3, [pc, #560]	; (8008a28 <HAL_RCC_OscConfig+0x770>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a8b      	ldr	r2, [pc, #556]	; (8008a28 <HAL_RCC_OscConfig+0x770>)
 80087fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008800:	f7fa fabe 	bl	8002d80 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008808:	f7fa faba 	bl	8002d80 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	; 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e1a0      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800881a:	4b83      	ldr	r3, [pc, #524]	; (8008a28 <HAL_RCC_OscConfig+0x770>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d106      	bne.n	800883c <HAL_RCC_OscConfig+0x584>
 800882e:	4b7d      	ldr	r3, [pc, #500]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008832:	4a7c      	ldr	r2, [pc, #496]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6713      	str	r3, [r2, #112]	; 0x70
 800883a:	e02d      	b.n	8008898 <HAL_RCC_OscConfig+0x5e0>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <HAL_RCC_OscConfig+0x5a6>
 8008844:	4b77      	ldr	r3, [pc, #476]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008848:	4a76      	ldr	r2, [pc, #472]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800884a:	f023 0301 	bic.w	r3, r3, #1
 800884e:	6713      	str	r3, [r2, #112]	; 0x70
 8008850:	4b74      	ldr	r3, [pc, #464]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	4a73      	ldr	r2, [pc, #460]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008856:	f023 0304 	bic.w	r3, r3, #4
 800885a:	6713      	str	r3, [r2, #112]	; 0x70
 800885c:	e01c      	b.n	8008898 <HAL_RCC_OscConfig+0x5e0>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b05      	cmp	r3, #5
 8008864:	d10c      	bne.n	8008880 <HAL_RCC_OscConfig+0x5c8>
 8008866:	4b6f      	ldr	r3, [pc, #444]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886a:	4a6e      	ldr	r2, [pc, #440]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800886c:	f043 0304 	orr.w	r3, r3, #4
 8008870:	6713      	str	r3, [r2, #112]	; 0x70
 8008872:	4b6c      	ldr	r3, [pc, #432]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008876:	4a6b      	ldr	r2, [pc, #428]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6713      	str	r3, [r2, #112]	; 0x70
 800887e:	e00b      	b.n	8008898 <HAL_RCC_OscConfig+0x5e0>
 8008880:	4b68      	ldr	r3, [pc, #416]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008884:	4a67      	ldr	r2, [pc, #412]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008886:	f023 0301 	bic.w	r3, r3, #1
 800888a:	6713      	str	r3, [r2, #112]	; 0x70
 800888c:	4b65      	ldr	r3, [pc, #404]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800888e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008890:	4a64      	ldr	r2, [pc, #400]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008892:	f023 0304 	bic.w	r3, r3, #4
 8008896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d015      	beq.n	80088cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a0:	f7fa fa6e 	bl	8002d80 <HAL_GetTick>
 80088a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088a6:	e00a      	b.n	80088be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088a8:	f7fa fa6a 	bl	8002d80 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e14e      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088be:	4b59      	ldr	r3, [pc, #356]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80088c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0ee      	beq.n	80088a8 <HAL_RCC_OscConfig+0x5f0>
 80088ca:	e014      	b.n	80088f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088cc:	f7fa fa58 	bl	8002d80 <HAL_GetTick>
 80088d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088d2:	e00a      	b.n	80088ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088d4:	f7fa fa54 	bl	8002d80 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d901      	bls.n	80088ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e138      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088ea:	4b4e      	ldr	r3, [pc, #312]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1ee      	bne.n	80088d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 812d 	beq.w	8008b5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008900:	4b48      	ldr	r3, [pc, #288]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008908:	2b18      	cmp	r3, #24
 800890a:	f000 80bd 	beq.w	8008a88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2b02      	cmp	r3, #2
 8008914:	f040 809e 	bne.w	8008a54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008918:	4b42      	ldr	r3, [pc, #264]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a41      	ldr	r2, [pc, #260]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800891e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fa fa2c 	bl	8002d80 <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800892c:	f7fa fa28 	bl	8002d80 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e10e      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800893e:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800894a:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800894c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <HAL_RCC_OscConfig+0x774>)
 8008950:	4013      	ands	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800895a:	0112      	lsls	r2, r2, #4
 800895c:	430a      	orrs	r2, r1
 800895e:	4931      	ldr	r1, [pc, #196]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008960:	4313      	orrs	r3, r2
 8008962:	628b      	str	r3, [r1, #40]	; 0x28
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	3b01      	subs	r3, #1
 800896a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008972:	3b01      	subs	r3, #1
 8008974:	025b      	lsls	r3, r3, #9
 8008976:	b29b      	uxth	r3, r3
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	3b01      	subs	r3, #1
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008986:	431a      	orrs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	3b01      	subs	r3, #1
 800898e:	061b      	lsls	r3, r3, #24
 8008990:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008994:	4923      	ldr	r1, [pc, #140]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800899a:	4b22      	ldr	r3, [pc, #136]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	4a21      	ldr	r2, [pc, #132]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089a6:	4b1f      	ldr	r3, [pc, #124]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089aa:	4b21      	ldr	r3, [pc, #132]	; (8008a30 <HAL_RCC_OscConfig+0x778>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089b2:	00d2      	lsls	r2, r2, #3
 80089b4:	491b      	ldr	r1, [pc, #108]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089ba:	4b1a      	ldr	r3, [pc, #104]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	f023 020c 	bic.w	r2, r3, #12
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	4917      	ldr	r1, [pc, #92]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089cc:	4b15      	ldr	r3, [pc, #84]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	f023 0202 	bic.w	r2, r3, #2
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d8:	4912      	ldr	r1, [pc, #72]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089de:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	4a10      	ldr	r2, [pc, #64]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ea:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	4a0d      	ldr	r2, [pc, #52]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 80089fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	4a07      	ldr	r2, [pc, #28]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a04      	ldr	r2, [pc, #16]	; (8008a24 <HAL_RCC_OscConfig+0x76c>)
 8008a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1a:	f7fa f9b1 	bl	8002d80 <HAL_GetTick>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a20:	e011      	b.n	8008a46 <HAL_RCC_OscConfig+0x78e>
 8008a22:	bf00      	nop
 8008a24:	58024400 	.word	0x58024400
 8008a28:	58024800 	.word	0x58024800
 8008a2c:	fffffc0c 	.word	0xfffffc0c
 8008a30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a34:	f7fa f9a4 	bl	8002d80 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e08a      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a46:	4b47      	ldr	r3, [pc, #284]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f0      	beq.n	8008a34 <HAL_RCC_OscConfig+0x77c>
 8008a52:	e082      	b.n	8008b5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a54:	4b43      	ldr	r3, [pc, #268]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a42      	ldr	r2, [pc, #264]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fa f98e 	bl	8002d80 <HAL_GetTick>
 8008a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a68:	f7fa f98a 	bl	8002d80 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e070      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a7a:	4b3a      	ldr	r3, [pc, #232]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x7b0>
 8008a86:	e068      	b.n	8008b5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a88:	4b36      	ldr	r3, [pc, #216]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a8e:	4b35      	ldr	r3, [pc, #212]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d031      	beq.n	8008b00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f003 0203 	and.w	r2, r3, #3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d12a      	bne.n	8008b00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	091b      	lsrs	r3, r3, #4
 8008aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d122      	bne.n	8008b00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d11a      	bne.n	8008b00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	0a5b      	lsrs	r3, r3, #9
 8008ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d111      	bne.n	8008b00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d108      	bne.n	8008b00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	0e1b      	lsrs	r3, r3, #24
 8008af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d001      	beq.n	8008b04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e02b      	b.n	8008b5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b04:	4b17      	ldr	r3, [pc, #92]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b08:	08db      	lsrs	r3, r3, #3
 8008b0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d01f      	beq.n	8008b5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1e:	4a11      	ldr	r2, [pc, #68]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b26:	f7fa f92b 	bl	8002d80 <HAL_GetTick>
 8008b2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b2c:	bf00      	nop
 8008b2e:	f7fa f927 	bl	8002d80 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d0f9      	beq.n	8008b2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b3a:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <HAL_RCC_OscConfig+0x8b0>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b46:	00d2      	lsls	r2, r2, #3
 8008b48:	4906      	ldr	r1, [pc, #24]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <HAL_RCC_OscConfig+0x8ac>)
 8008b54:	f043 0301 	orr.w	r3, r3, #1
 8008b58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3730      	adds	r7, #48	; 0x30
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	58024400 	.word	0x58024400
 8008b68:	ffff0007 	.word	0xffff0007

08008b6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e19c      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b80:	4b8a      	ldr	r3, [pc, #552]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d910      	bls.n	8008bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b8e:	4b87      	ldr	r3, [pc, #540]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f023 020f 	bic.w	r2, r3, #15
 8008b96:	4985      	ldr	r1, [pc, #532]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b9e:	4b83      	ldr	r3, [pc, #524]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d001      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e184      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0304 	and.w	r3, r3, #4
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d010      	beq.n	8008bde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	4b7b      	ldr	r3, [pc, #492]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d908      	bls.n	8008bde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bcc:	4b78      	ldr	r3, [pc, #480]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	4975      	ldr	r1, [pc, #468]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695a      	ldr	r2, [r3, #20]
 8008bee:	4b70      	ldr	r3, [pc, #448]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d908      	bls.n	8008c0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008bfa:	4b6d      	ldr	r3, [pc, #436]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	496a      	ldr	r1, [pc, #424]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d010      	beq.n	8008c3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699a      	ldr	r2, [r3, #24]
 8008c1c:	4b64      	ldr	r3, [pc, #400]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d908      	bls.n	8008c3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c28:	4b61      	ldr	r3, [pc, #388]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	495e      	ldr	r1, [pc, #376]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d010      	beq.n	8008c68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69da      	ldr	r2, [r3, #28]
 8008c4a:	4b59      	ldr	r3, [pc, #356]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d908      	bls.n	8008c68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c56:	4b56      	ldr	r3, [pc, #344]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4953      	ldr	r1, [pc, #332]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d010      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	4b4d      	ldr	r3, [pc, #308]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d908      	bls.n	8008c96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c84:	4b4a      	ldr	r3, [pc, #296]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f023 020f 	bic.w	r2, r3, #15
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	4947      	ldr	r1, [pc, #284]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d055      	beq.n	8008d4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ca2:	4b43      	ldr	r3, [pc, #268]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	4940      	ldr	r1, [pc, #256]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d107      	bne.n	8008ccc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cbc:	4b3c      	ldr	r3, [pc, #240]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d121      	bne.n	8008d0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e0f6      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cd4:	4b36      	ldr	r3, [pc, #216]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d115      	bne.n	8008d0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0ea      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d107      	bne.n	8008cfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cec:	4b30      	ldr	r3, [pc, #192]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d109      	bne.n	8008d0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e0de      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cfc:	4b2c      	ldr	r3, [pc, #176]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e0d6      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d0c:	4b28      	ldr	r3, [pc, #160]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f023 0207 	bic.w	r2, r3, #7
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	4925      	ldr	r1, [pc, #148]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1e:	f7fa f82f 	bl	8002d80 <HAL_GetTick>
 8008d22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d24:	e00a      	b.n	8008d3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d26:	f7fa f82b 	bl	8002d80 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d901      	bls.n	8008d3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e0be      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d3c:	4b1c      	ldr	r3, [pc, #112]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d1eb      	bne.n	8008d26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d208      	bcs.n	8008d7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d6a:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	f023 020f 	bic.w	r2, r3, #15
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	490e      	ldr	r1, [pc, #56]	; (8008db0 <HAL_RCC_ClockConfig+0x244>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 030f 	and.w	r3, r3, #15
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d214      	bcs.n	8008db4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d8a:	4b08      	ldr	r3, [pc, #32]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f023 020f 	bic.w	r2, r3, #15
 8008d92:	4906      	ldr	r1, [pc, #24]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d9a:	4b04      	ldr	r3, [pc, #16]	; (8008dac <HAL_RCC_ClockConfig+0x240>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 030f 	and.w	r3, r3, #15
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d005      	beq.n	8008db4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e086      	b.n	8008eba <HAL_RCC_ClockConfig+0x34e>
 8008dac:	52002000 	.word	0x52002000
 8008db0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d010      	beq.n	8008de2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	4b3f      	ldr	r3, [pc, #252]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d208      	bcs.n	8008de2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008dd0:	4b3c      	ldr	r3, [pc, #240]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	4939      	ldr	r1, [pc, #228]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d010      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	4b34      	ldr	r3, [pc, #208]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d208      	bcs.n	8008e10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008dfe:	4b31      	ldr	r3, [pc, #196]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	492e      	ldr	r1, [pc, #184]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d010      	beq.n	8008e3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	4b28      	ldr	r3, [pc, #160]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d208      	bcs.n	8008e3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e2c:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	4922      	ldr	r1, [pc, #136]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d010      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69da      	ldr	r2, [r3, #28]
 8008e4e:	4b1d      	ldr	r3, [pc, #116]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d208      	bcs.n	8008e6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e5a:	4b1a      	ldr	r3, [pc, #104]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	4917      	ldr	r1, [pc, #92]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e6c:	f000 f834 	bl	8008ed8 <HAL_RCC_GetSysClockFreq>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4b14      	ldr	r3, [pc, #80]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	4912      	ldr	r1, [pc, #72]	; (8008ec8 <HAL_RCC_ClockConfig+0x35c>)
 8008e7e:	5ccb      	ldrb	r3, [r1, r3]
 8008e80:	f003 031f 	and.w	r3, r3, #31
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e8a:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <HAL_RCC_ClockConfig+0x358>)
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	4a0d      	ldr	r2, [pc, #52]	; (8008ec8 <HAL_RCC_ClockConfig+0x35c>)
 8008e94:	5cd3      	ldrb	r3, [r2, r3]
 8008e96:	f003 031f 	and.w	r3, r3, #31
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <HAL_RCC_ClockConfig+0x360>)
 8008ea2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ea4:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <HAL_RCC_ClockConfig+0x364>)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <HAL_RCC_ClockConfig+0x368>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f9 fc9e 	bl	80027f0 <HAL_InitTick>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	08014c64 	.word	0x08014c64
 8008ecc:	2400008c 	.word	0x2400008c
 8008ed0:	24000088 	.word	0x24000088
 8008ed4:	24000090 	.word	0x24000090

08008ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b089      	sub	sp, #36	; 0x24
 8008edc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ede:	4bb3      	ldr	r3, [pc, #716]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee6:	2b18      	cmp	r3, #24
 8008ee8:	f200 8155 	bhi.w	8009196 <HAL_RCC_GetSysClockFreq+0x2be>
 8008eec:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f59 	.word	0x08008f59
 8008ef8:	08009197 	.word	0x08009197
 8008efc:	08009197 	.word	0x08009197
 8008f00:	08009197 	.word	0x08009197
 8008f04:	08009197 	.word	0x08009197
 8008f08:	08009197 	.word	0x08009197
 8008f0c:	08009197 	.word	0x08009197
 8008f10:	08009197 	.word	0x08009197
 8008f14:	08008f7f 	.word	0x08008f7f
 8008f18:	08009197 	.word	0x08009197
 8008f1c:	08009197 	.word	0x08009197
 8008f20:	08009197 	.word	0x08009197
 8008f24:	08009197 	.word	0x08009197
 8008f28:	08009197 	.word	0x08009197
 8008f2c:	08009197 	.word	0x08009197
 8008f30:	08009197 	.word	0x08009197
 8008f34:	08008f85 	.word	0x08008f85
 8008f38:	08009197 	.word	0x08009197
 8008f3c:	08009197 	.word	0x08009197
 8008f40:	08009197 	.word	0x08009197
 8008f44:	08009197 	.word	0x08009197
 8008f48:	08009197 	.word	0x08009197
 8008f4c:	08009197 	.word	0x08009197
 8008f50:	08009197 	.word	0x08009197
 8008f54:	08008f8b 	.word	0x08008f8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f58:	4b94      	ldr	r3, [pc, #592]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d009      	beq.n	8008f78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f64:	4b91      	ldr	r3, [pc, #580]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	08db      	lsrs	r3, r3, #3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	4a90      	ldr	r2, [pc, #576]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008f76:	e111      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f78:	4b8d      	ldr	r3, [pc, #564]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f7a:	61bb      	str	r3, [r7, #24]
      break;
 8008f7c:	e10e      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008f7e:	4b8d      	ldr	r3, [pc, #564]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f80:	61bb      	str	r3, [r7, #24]
      break;
 8008f82:	e10b      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008f84:	4b8c      	ldr	r3, [pc, #560]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f86:	61bb      	str	r3, [r7, #24]
      break;
 8008f88:	e108      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f8a:	4b88      	ldr	r3, [pc, #544]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008f94:	4b85      	ldr	r3, [pc, #532]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	091b      	lsrs	r3, r3, #4
 8008f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fa0:	4b82      	ldr	r3, [pc, #520]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008faa:	4b80      	ldr	r3, [pc, #512]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fae:	08db      	lsrs	r3, r3, #3
 8008fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80e1 	beq.w	8009190 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	f000 8083 	beq.w	80090dc <HAL_RCC_GetSysClockFreq+0x204>
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	f200 80a1 	bhi.w	8009120 <HAL_RCC_GetSysClockFreq+0x248>
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <HAL_RCC_GetSysClockFreq+0x114>
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d056      	beq.n	8009098 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008fea:	e099      	b.n	8009120 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fec:	4b6f      	ldr	r3, [pc, #444]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d02d      	beq.n	8009054 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ff8:	4b6c      	ldr	r3, [pc, #432]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	08db      	lsrs	r3, r3, #3
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	4a6b      	ldr	r2, [pc, #428]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009004:	fa22 f303 	lsr.w	r3, r2, r3
 8009008:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009022:	4b62      	ldr	r3, [pc, #392]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009032:	ed97 6a02 	vldr	s12, [r7, #8]
 8009036:	eddf 5a61 	vldr	s11, [pc, #388]	; 80091bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800903a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009052:	e087      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80091c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b51      	ldr	r3, [pc, #324]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a02 	vldr	s12, [r7, #8]
 800907a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80091bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009096:	e065      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090aa:	4b40      	ldr	r3, [pc, #256]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80090be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80091bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80090c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090da:	e043      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ee:	4b2f      	ldr	r3, [pc, #188]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009102:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80091bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800911e:	e021      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80091c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a02 	vldr	s12, [r7, #8]
 8009146:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80091bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009162:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	0a5b      	lsrs	r3, r3, #9
 800916a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800916e:	3301      	adds	r3, #1
 8009170:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800917c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009188:	ee17 3a90 	vmov	r3, s15
 800918c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800918e:	e005      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	61bb      	str	r3, [r7, #24]
      break;
 8009194:	e002      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009196:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009198:	61bb      	str	r3, [r7, #24]
      break;
 800919a:	bf00      	nop
  }

  return sysclockfreq;
 800919c:	69bb      	ldr	r3, [r7, #24]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3724      	adds	r7, #36	; 0x24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	58024400 	.word	0x58024400
 80091b0:	03d09000 	.word	0x03d09000
 80091b4:	003d0900 	.word	0x003d0900
 80091b8:	017d7840 	.word	0x017d7840
 80091bc:	46000000 	.word	0x46000000
 80091c0:	4c742400 	.word	0x4c742400
 80091c4:	4a742400 	.word	0x4a742400
 80091c8:	4bbebc20 	.word	0x4bbebc20

080091cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091d2:	f7ff fe81 	bl	8008ed8 <HAL_RCC_GetSysClockFreq>
 80091d6:	4602      	mov	r2, r0
 80091d8:	4b10      	ldr	r3, [pc, #64]	; (800921c <HAL_RCC_GetHCLKFreq+0x50>)
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	0a1b      	lsrs	r3, r3, #8
 80091de:	f003 030f 	and.w	r3, r3, #15
 80091e2:	490f      	ldr	r1, [pc, #60]	; (8009220 <HAL_RCC_GetHCLKFreq+0x54>)
 80091e4:	5ccb      	ldrb	r3, [r1, r3]
 80091e6:	f003 031f 	and.w	r3, r3, #31
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091f0:	4b0a      	ldr	r3, [pc, #40]	; (800921c <HAL_RCC_GetHCLKFreq+0x50>)
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	4a09      	ldr	r2, [pc, #36]	; (8009220 <HAL_RCC_GetHCLKFreq+0x54>)
 80091fa:	5cd3      	ldrb	r3, [r2, r3]
 80091fc:	f003 031f 	and.w	r3, r3, #31
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	fa22 f303 	lsr.w	r3, r2, r3
 8009206:	4a07      	ldr	r2, [pc, #28]	; (8009224 <HAL_RCC_GetHCLKFreq+0x58>)
 8009208:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800920a:	4a07      	ldr	r2, [pc, #28]	; (8009228 <HAL_RCC_GetHCLKFreq+0x5c>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009210:	4b04      	ldr	r3, [pc, #16]	; (8009224 <HAL_RCC_GetHCLKFreq+0x58>)
 8009212:	681b      	ldr	r3, [r3, #0]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	58024400 	.word	0x58024400
 8009220:	08014c64 	.word	0x08014c64
 8009224:	2400008c 	.word	0x2400008c
 8009228:	24000088 	.word	0x24000088

0800922c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009230:	f7ff ffcc 	bl	80091cc <HAL_RCC_GetHCLKFreq>
 8009234:	4602      	mov	r2, r0
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	091b      	lsrs	r3, r3, #4
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	4904      	ldr	r1, [pc, #16]	; (8009254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009242:	5ccb      	ldrb	r3, [r1, r3]
 8009244:	f003 031f 	and.w	r3, r3, #31
 8009248:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800924c:	4618      	mov	r0, r3
 800924e:	bd80      	pop	{r7, pc}
 8009250:	58024400 	.word	0x58024400
 8009254:	08014c64 	.word	0x08014c64

08009258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800925c:	f7ff ffb6 	bl	80091cc <HAL_RCC_GetHCLKFreq>
 8009260:	4602      	mov	r2, r0
 8009262:	4b06      	ldr	r3, [pc, #24]	; (800927c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	0a1b      	lsrs	r3, r3, #8
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	4904      	ldr	r1, [pc, #16]	; (8009280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800926e:	5ccb      	ldrb	r3, [r1, r3]
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009278:	4618      	mov	r0, r3
 800927a:	bd80      	pop	{r7, pc}
 800927c:	58024400 	.word	0x58024400
 8009280:	08014c64 	.word	0x08014c64

08009284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	223f      	movs	r2, #63	; 0x3f
 8009292:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009294:	4b1a      	ldr	r3, [pc, #104]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f003 0207 	and.w	r2, r3, #7
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80092a0:	4b17      	ldr	r3, [pc, #92]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80092ac:	4b14      	ldr	r3, [pc, #80]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 020f 	and.w	r2, r3, #15
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80092b8:	4b11      	ldr	r3, [pc, #68]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80092c4:	4b0e      	ldr	r3, [pc, #56]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80092d0:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80092dc:	4b08      	ldr	r3, [pc, #32]	; (8009300 <HAL_RCC_GetClockConfig+0x7c>)
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <HAL_RCC_GetClockConfig+0x80>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 020f 	and.w	r2, r3, #15
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	601a      	str	r2, [r3, #0]
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	58024400 	.word	0x58024400
 8009304:	52002000 	.word	0x52002000

08009308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800930c:	b0ca      	sub	sp, #296	; 0x128
 800930e:	af00      	add	r7, sp, #0
 8009310:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009314:	2300      	movs	r3, #0
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800931a:	2300      	movs	r3, #0
 800931c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800932c:	2500      	movs	r5, #0
 800932e:	ea54 0305 	orrs.w	r3, r4, r5
 8009332:	d049      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800933a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800933e:	d02f      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009340:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009344:	d828      	bhi.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800934a:	d01a      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800934c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009350:	d822      	bhi.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800935a:	d007      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800935c:	e01c      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935e:	4bb8      	ldr	r3, [pc, #736]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	4ab7      	ldr	r2, [pc, #732]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800936a:	e01a      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800936c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009370:	3308      	adds	r3, #8
 8009372:	2102      	movs	r1, #2
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fb61 	bl	800ba3c <RCCEx_PLL2_Config>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009380:	e00f      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009386:	3328      	adds	r3, #40	; 0x28
 8009388:	2102      	movs	r1, #2
 800938a:	4618      	mov	r0, r3
 800938c:	f002 fc08 	bl	800bba0 <RCCEx_PLL3_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009396:	e004      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800939e:	e000      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80093a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093aa:	4ba5      	ldr	r3, [pc, #660]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b8:	4aa1      	ldr	r2, [pc, #644]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ba:	430b      	orrs	r3, r1
 80093bc:	6513      	str	r3, [r2, #80]	; 0x50
 80093be:	e003      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80093d4:	f04f 0900 	mov.w	r9, #0
 80093d8:	ea58 0309 	orrs.w	r3, r8, r9
 80093dc:	d047      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80093de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d82a      	bhi.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093e8:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009405 	.word	0x08009405
 80093f4:	08009413 	.word	0x08009413
 80093f8:	08009429 	.word	0x08009429
 80093fc:	08009447 	.word	0x08009447
 8009400:	08009447 	.word	0x08009447
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009404:	4b8e      	ldr	r3, [pc, #568]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	4a8d      	ldr	r2, [pc, #564]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800940a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800940e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009410:	e01a      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009416:	3308      	adds	r3, #8
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f002 fb0e 	bl	800ba3c <RCCEx_PLL2_Config>
 8009420:	4603      	mov	r3, r0
 8009422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009426:	e00f      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800942c:	3328      	adds	r3, #40	; 0x28
 800942e:	2100      	movs	r1, #0
 8009430:	4618      	mov	r0, r3
 8009432:	f002 fbb5 	bl	800bba0 <RCCEx_PLL3_Config>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800943c:	e004      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009444:	e000      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009450:	4b7b      	ldr	r3, [pc, #492]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009454:	f023 0107 	bic.w	r1, r3, #7
 8009458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945e:	4a78      	ldr	r2, [pc, #480]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009460:	430b      	orrs	r3, r1
 8009462:	6513      	str	r3, [r2, #80]	; 0x50
 8009464:	e003      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800946a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800947a:	f04f 0b00 	mov.w	fp, #0
 800947e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009482:	d04c      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948e:	d030      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009494:	d829      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009496:	2bc0      	cmp	r3, #192	; 0xc0
 8009498:	d02d      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800949a:	2bc0      	cmp	r3, #192	; 0xc0
 800949c:	d825      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800949e:	2b80      	cmp	r3, #128	; 0x80
 80094a0:	d018      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d821      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d007      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80094ae:	e01c      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b0:	4b63      	ldr	r3, [pc, #396]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	4a62      	ldr	r2, [pc, #392]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094bc:	e01c      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c2:	3308      	adds	r3, #8
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f002 fab8 	bl	800ba3c <RCCEx_PLL2_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094d2:	e011      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d8:	3328      	adds	r3, #40	; 0x28
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f002 fb5f 	bl	800bba0 <RCCEx_PLL3_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094e8:	e006      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094f0:	e002      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009500:	4b4f      	ldr	r3, [pc, #316]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009504:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800950e:	4a4c      	ldr	r2, [pc, #304]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009510:	430b      	orrs	r3, r1
 8009512:	6513      	str	r3, [r2, #80]	; 0x50
 8009514:	e003      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800951a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800952a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800952e:	2300      	movs	r3, #0
 8009530:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009534:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009538:	460b      	mov	r3, r1
 800953a:	4313      	orrs	r3, r2
 800953c:	d053      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800953e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800954a:	d035      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800954c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009550:	d82e      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009552:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009556:	d031      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009558:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800955c:	d828      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800955e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009562:	d01a      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009568:	d822      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800956e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009572:	d007      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009574:	e01c      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009576:	4b32      	ldr	r3, [pc, #200]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	4a31      	ldr	r2, [pc, #196]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800957c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009582:	e01c      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009588:	3308      	adds	r3, #8
 800958a:	2100      	movs	r1, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f002 fa55 	bl	800ba3c <RCCEx_PLL2_Config>
 8009592:	4603      	mov	r3, r0
 8009594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009598:	e011      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959e:	3328      	adds	r3, #40	; 0x28
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 fafc 	bl	800bba0 <RCCEx_PLL3_Config>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095ae:	e006      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095b6:	e002      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095b8:	bf00      	nop
 80095ba:	e000      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095c6:	4b1e      	ldr	r3, [pc, #120]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095d6:	4a1a      	ldr	r2, [pc, #104]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095d8:	430b      	orrs	r3, r1
 80095da:	6593      	str	r3, [r2, #88]	; 0x58
 80095dc:	e003      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80095f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009600:	460b      	mov	r3, r1
 8009602:	4313      	orrs	r3, r2
 8009604:	d056      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800960a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800960e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009612:	d038      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009618:	d831      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800961a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800961e:	d034      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009620:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009624:	d82b      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800962a:	d01d      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800962c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009630:	d825      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d006      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800963a:	d00a      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800963c:	e01f      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800963e:	bf00      	nop
 8009640:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009644:	4ba2      	ldr	r3, [pc, #648]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	4aa1      	ldr	r2, [pc, #644]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009650:	e01c      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009656:	3308      	adds	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f002 f9ee 	bl	800ba3c <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009666:	e011      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966c:	3328      	adds	r3, #40	; 0x28
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f002 fa95 	bl	800bba0 <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800967c:	e006      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009684:	e002      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800968a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800968c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10b      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009694:	4b8e      	ldr	r3, [pc, #568]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009698:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096a4:	4a8a      	ldr	r2, [pc, #552]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a6:	430b      	orrs	r3, r1
 80096a8:	6593      	str	r3, [r2, #88]	; 0x58
 80096aa:	e003      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80096c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80096ce:	460b      	mov	r3, r1
 80096d0:	4313      	orrs	r3, r2
 80096d2:	d03a      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096da:	2b30      	cmp	r3, #48	; 0x30
 80096dc:	d01f      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80096de:	2b30      	cmp	r3, #48	; 0x30
 80096e0:	d819      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d00c      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d815      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d019      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80096ee:	2b10      	cmp	r3, #16
 80096f0:	d111      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f2:	4b77      	ldr	r3, [pc, #476]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a76      	ldr	r2, [pc, #472]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096fe:	e011      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009704:	3308      	adds	r3, #8
 8009706:	2102      	movs	r1, #2
 8009708:	4618      	mov	r0, r3
 800970a:	f002 f997 	bl	800ba3c <RCCEx_PLL2_Config>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800971c:	e002      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800972c:	4b68      	ldr	r3, [pc, #416]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800972e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009730:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973a:	4a65      	ldr	r2, [pc, #404]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800973c:	430b      	orrs	r3, r1
 800973e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009740:	e003      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800974a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009756:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800975a:	2300      	movs	r3, #0
 800975c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009760:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009764:	460b      	mov	r3, r1
 8009766:	4313      	orrs	r3, r2
 8009768:	d051      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009774:	d035      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800977a:	d82e      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800977c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009780:	d031      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009782:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009786:	d828      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800978c:	d01a      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800978e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009792:	d822      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979c:	d007      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800979e:	e01c      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a0:	4b4b      	ldr	r3, [pc, #300]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	4a4a      	ldr	r2, [pc, #296]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097ac:	e01c      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b2:	3308      	adds	r3, #8
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f002 f940 	bl	800ba3c <RCCEx_PLL2_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097c2:	e011      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c8:	3328      	adds	r3, #40	; 0x28
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f002 f9e7 	bl	800bba0 <RCCEx_PLL3_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097d8:	e006      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097e0:	e002      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097f0:	4b37      	ldr	r3, [pc, #220]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fe:	4a34      	ldr	r2, [pc, #208]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009800:	430b      	orrs	r3, r1
 8009802:	6513      	str	r3, [r2, #80]	; 0x50
 8009804:	e003      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800980a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800980e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800981a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800981e:	2300      	movs	r3, #0
 8009820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009824:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009828:	460b      	mov	r3, r1
 800982a:	4313      	orrs	r3, r2
 800982c:	d056      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800982e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009838:	d033      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800983a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800983e:	d82c      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009844:	d02f      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800984a:	d826      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800984c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009850:	d02b      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009856:	d820      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800985c:	d012      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800985e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009862:	d81a      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d022      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986c:	d115      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009872:	3308      	adds	r3, #8
 8009874:	2101      	movs	r1, #1
 8009876:	4618      	mov	r0, r3
 8009878:	f002 f8e0 	bl	800ba3c <RCCEx_PLL2_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009882:	e015      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009888:	3328      	adds	r3, #40	; 0x28
 800988a:	2101      	movs	r1, #1
 800988c:	4618      	mov	r0, r3
 800988e:	f002 f987 	bl	800bba0 <RCCEx_PLL3_Config>
 8009892:	4603      	mov	r3, r0
 8009894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009898:	e00a      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098a0:	e006      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098a2:	bf00      	nop
 80098a4:	e004      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098a6:	bf00      	nop
 80098a8:	e002      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098aa:	bf00      	nop
 80098ac:	e000      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10d      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80098c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c6:	4a02      	ldr	r2, [pc, #8]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6513      	str	r3, [r2, #80]	; 0x50
 80098cc:	e006      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80098ce:	bf00      	nop
 80098d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80098e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	d055      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009908:	d033      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800990a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800990e:	d82c      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009914:	d02f      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800991a:	d826      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800991c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009920:	d02b      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009922:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009926:	d820      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800992c:	d012      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800992e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009932:	d81a      	bhi.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d022      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800993c:	d115      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009942:	3308      	adds	r3, #8
 8009944:	2101      	movs	r1, #1
 8009946:	4618      	mov	r0, r3
 8009948:	f002 f878 	bl	800ba3c <RCCEx_PLL2_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009952:	e015      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	3328      	adds	r3, #40	; 0x28
 800995a:	2101      	movs	r1, #1
 800995c:	4618      	mov	r0, r3
 800995e:	f002 f91f 	bl	800bba0 <RCCEx_PLL3_Config>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009968:	e00a      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009970:	e006      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009972:	bf00      	nop
 8009974:	e004      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009976:	bf00      	nop
 8009978:	e002      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800997e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009988:	4ba3      	ldr	r3, [pc, #652]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800998a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009998:	4a9f      	ldr	r2, [pc, #636]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800999a:	430b      	orrs	r3, r1
 800999c:	6593      	str	r3, [r2, #88]	; 0x58
 800999e:	e003      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80099b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099b8:	2300      	movs	r3, #0
 80099ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80099be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80099c2:	460b      	mov	r3, r1
 80099c4:	4313      	orrs	r3, r2
 80099c6:	d037      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099d2:	d00e      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099d8:	d816      	bhi.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d018      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80099de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099e2:	d111      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e4:	4b8c      	ldr	r3, [pc, #560]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	4a8b      	ldr	r2, [pc, #556]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099f0:	e00f      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f6:	3308      	adds	r3, #8
 80099f8:	2101      	movs	r1, #1
 80099fa:	4618      	mov	r0, r3
 80099fc:	f002 f81e 	bl	800ba3c <RCCEx_PLL2_Config>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a06:	e004      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a0e:	e000      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a1a:	4b7f      	ldr	r3, [pc, #508]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a28:	4a7b      	ldr	r2, [pc, #492]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6513      	str	r3, [r2, #80]	; 0x50
 8009a2e:	e003      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	d039      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d81c      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009aa5 	.word	0x08009aa5
 8009a6c:	08009a79 	.word	0x08009a79
 8009a70:	08009a87 	.word	0x08009a87
 8009a74:	08009aa5 	.word	0x08009aa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a78:	4b67      	ldr	r3, [pc, #412]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	4a66      	ldr	r2, [pc, #408]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a84:	e00f      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 ffd4 	bl	800ba3c <RCCEx_PLL2_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a9a:	e004      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009aae:	4b5a      	ldr	r3, [pc, #360]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab2:	f023 0103 	bic.w	r1, r3, #3
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009abc:	4a56      	ldr	r2, [pc, #344]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ac2:	e003      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ae2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f000 809f 	beq.w	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aee:	4b4b      	ldr	r3, [pc, #300]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a4a      	ldr	r2, [pc, #296]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009afa:	f7f9 f941 	bl	8002d80 <HAL_GetTick>
 8009afe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b02:	e00b      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b04:	f7f9 f93c 	bl	8002d80 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b64      	cmp	r3, #100	; 0x64
 8009b12:	d903      	bls.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b1a:	e005      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b1c:	4b3f      	ldr	r3, [pc, #252]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0ed      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d179      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b30:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b3c:	4053      	eors	r3, r2
 8009b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d015      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b46:	4b34      	ldr	r3, [pc, #208]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b52:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b56:	4a30      	ldr	r2, [pc, #192]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	4a2d      	ldr	r2, [pc, #180]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b6a:	4a2b      	ldr	r2, [pc, #172]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b7e:	d118      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b80:	f7f9 f8fe 	bl	8002d80 <HAL_GetTick>
 8009b84:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b88:	e00d      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b8a:	f7f9 f8f9 	bl	8002d80 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d903      	bls.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009ba4:	e005      	b.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ba6:	4b1c      	ldr	r3, [pc, #112]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0eb      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d129      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bca:	d10e      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009bdc:	091a      	lsrs	r2, r3, #4
 8009bde:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	4a0d      	ldr	r2, [pc, #52]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009be4:	430b      	orrs	r3, r1
 8009be6:	6113      	str	r3, [r2, #16]
 8009be8:	e005      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009bea:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009bf4:	6113      	str	r3, [r2, #16]
 8009bf6:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bf8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c06:	4a04      	ldr	r2, [pc, #16]	; (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c0c:	e00e      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009c16:	e009      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009c18:	58024400 	.word	0x58024400
 8009c1c:	58024800 	.word	0x58024800
 8009c20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f002 0301 	and.w	r3, r2, #1
 8009c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f000 8089 	beq.w	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c54:	2b28      	cmp	r3, #40	; 0x28
 8009c56:	d86b      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c58:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009d39 	.word	0x08009d39
 8009c64:	08009d31 	.word	0x08009d31
 8009c68:	08009d31 	.word	0x08009d31
 8009c6c:	08009d31 	.word	0x08009d31
 8009c70:	08009d31 	.word	0x08009d31
 8009c74:	08009d31 	.word	0x08009d31
 8009c78:	08009d31 	.word	0x08009d31
 8009c7c:	08009d31 	.word	0x08009d31
 8009c80:	08009d05 	.word	0x08009d05
 8009c84:	08009d31 	.word	0x08009d31
 8009c88:	08009d31 	.word	0x08009d31
 8009c8c:	08009d31 	.word	0x08009d31
 8009c90:	08009d31 	.word	0x08009d31
 8009c94:	08009d31 	.word	0x08009d31
 8009c98:	08009d31 	.word	0x08009d31
 8009c9c:	08009d31 	.word	0x08009d31
 8009ca0:	08009d1b 	.word	0x08009d1b
 8009ca4:	08009d31 	.word	0x08009d31
 8009ca8:	08009d31 	.word	0x08009d31
 8009cac:	08009d31 	.word	0x08009d31
 8009cb0:	08009d31 	.word	0x08009d31
 8009cb4:	08009d31 	.word	0x08009d31
 8009cb8:	08009d31 	.word	0x08009d31
 8009cbc:	08009d31 	.word	0x08009d31
 8009cc0:	08009d39 	.word	0x08009d39
 8009cc4:	08009d31 	.word	0x08009d31
 8009cc8:	08009d31 	.word	0x08009d31
 8009ccc:	08009d31 	.word	0x08009d31
 8009cd0:	08009d31 	.word	0x08009d31
 8009cd4:	08009d31 	.word	0x08009d31
 8009cd8:	08009d31 	.word	0x08009d31
 8009cdc:	08009d31 	.word	0x08009d31
 8009ce0:	08009d39 	.word	0x08009d39
 8009ce4:	08009d31 	.word	0x08009d31
 8009ce8:	08009d31 	.word	0x08009d31
 8009cec:	08009d31 	.word	0x08009d31
 8009cf0:	08009d31 	.word	0x08009d31
 8009cf4:	08009d31 	.word	0x08009d31
 8009cf8:	08009d31 	.word	0x08009d31
 8009cfc:	08009d31 	.word	0x08009d31
 8009d00:	08009d39 	.word	0x08009d39
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d08:	3308      	adds	r3, #8
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f001 fe95 	bl	800ba3c <RCCEx_PLL2_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d18:	e00f      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1e:	3328      	adds	r3, #40	; 0x28
 8009d20:	2101      	movs	r1, #1
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 ff3c 	bl	800bba0 <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e004      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d42:	4bbf      	ldr	r3, [pc, #764]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d50:	4abb      	ldr	r2, [pc, #748]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d52:	430b      	orrs	r3, r1
 8009d54:	6553      	str	r3, [r2, #84]	; 0x54
 8009d56:	e003      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f002 0302 	and.w	r3, r2, #2
 8009d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d70:	2300      	movs	r3, #0
 8009d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	d041      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d824      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d8a:	a201      	add	r2, pc, #4	; (adr r2, 8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009ddd 	.word	0x08009ddd
 8009d94:	08009da9 	.word	0x08009da9
 8009d98:	08009dbf 	.word	0x08009dbf
 8009d9c:	08009ddd 	.word	0x08009ddd
 8009da0:	08009ddd 	.word	0x08009ddd
 8009da4:	08009ddd 	.word	0x08009ddd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dac:	3308      	adds	r3, #8
 8009dae:	2101      	movs	r1, #1
 8009db0:	4618      	mov	r0, r3
 8009db2:	f001 fe43 	bl	800ba3c <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dbc:	e00f      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	3328      	adds	r3, #40	; 0x28
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 feea 	bl	800bba0 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dd2:	e004      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009de6:	4b96      	ldr	r3, [pc, #600]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	f023 0107 	bic.w	r1, r3, #7
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df4:	4a92      	ldr	r2, [pc, #584]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009df6:	430b      	orrs	r3, r1
 8009df8:	6553      	str	r3, [r2, #84]	; 0x54
 8009dfa:	e003      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f002 0304 	and.w	r3, r2, #4
 8009e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4313      	orrs	r3, r2
 8009e22:	d044      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e2c:	2b05      	cmp	r3, #5
 8009e2e:	d825      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009e30:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e36:	bf00      	nop
 8009e38:	08009e85 	.word	0x08009e85
 8009e3c:	08009e51 	.word	0x08009e51
 8009e40:	08009e67 	.word	0x08009e67
 8009e44:	08009e85 	.word	0x08009e85
 8009e48:	08009e85 	.word	0x08009e85
 8009e4c:	08009e85 	.word	0x08009e85
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e54:	3308      	adds	r3, #8
 8009e56:	2101      	movs	r1, #1
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 fdef 	bl	800ba3c <RCCEx_PLL2_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e64:	e00f      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	3328      	adds	r3, #40	; 0x28
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fe96 	bl	800bba0 <RCCEx_PLL3_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e004      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e82:	e000      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e8e:	4b6c      	ldr	r3, [pc, #432]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e92:	f023 0107 	bic.w	r1, r3, #7
 8009e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e9e:	4a68      	ldr	r2, [pc, #416]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f002 0320 	and.w	r3, r2, #32
 8009eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d055      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009eda:	d033      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ee0:	d82c      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee6:	d02f      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eec:	d826      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ef2:	d02b      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ef8:	d820      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efe:	d012      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f04:	d81a      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d022      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f0e:	d115      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f14:	3308      	adds	r3, #8
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 fd8f 	bl	800ba3c <RCCEx_PLL2_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f24:	e015      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2a:	3328      	adds	r3, #40	; 0x28
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 fe36 	bl	800bba0 <RCCEx_PLL3_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f3a:	e00a      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f42:	e006      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f44:	bf00      	nop
 8009f46:	e004      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f48:	bf00      	nop
 8009f4a:	e002      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f4c:	bf00      	nop
 8009f4e:	e000      	b.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f5a:	4b39      	ldr	r3, [pc, #228]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6a:	4a35      	ldr	r2, [pc, #212]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	6553      	str	r3, [r2, #84]	; 0x54
 8009f70:	e003      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4313      	orrs	r3, r2
 8009f98:	d058      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fa2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fa6:	d033      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fa8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fac:	d82c      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb2:	d02f      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	d826      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fbe:	d02b      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fc4:	d820      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fca:	d012      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd0:	d81a      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d022      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fda:	d115      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fd29 	bl	800ba3c <RCCEx_PLL2_Config>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ff0:	e015      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff6:	3328      	adds	r3, #40	; 0x28
 8009ff8:	2102      	movs	r1, #2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fdd0 	bl	800bba0 <RCCEx_PLL3_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a006:	e00a      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a00e:	e006      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a010:	bf00      	nop
 800a012:	e004      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a014:	bf00      	nop
 800a016:	e002      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a01e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10e      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a026:	4b06      	ldr	r3, [pc, #24]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a02a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a036:	4a02      	ldr	r2, [pc, #8]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a038:	430b      	orrs	r3, r1
 800a03a:	6593      	str	r3, [r2, #88]	; 0x58
 800a03c:	e006      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a05c:	2300      	movs	r3, #0
 800a05e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a062:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a066:	460b      	mov	r3, r1
 800a068:	4313      	orrs	r3, r2
 800a06a:	d055      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a070:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a074:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a078:	d033      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a07a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a07e:	d82c      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a084:	d02f      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a08a:	d826      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a08c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a090:	d02b      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a092:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a096:	d820      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a09c:	d012      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a09e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a2:	d81a      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d022      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ac:	d115      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 fcc0 	bl	800ba3c <RCCEx_PLL2_Config>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0c2:	e015      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c8:	3328      	adds	r3, #40	; 0x28
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fd67 	bl	800bba0 <RCCEx_PLL3_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0d8:	e00a      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0e2:	bf00      	nop
 800a0e4:	e004      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e002      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10b      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0f8:	4ba1      	ldr	r3, [pc, #644]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a108:	4a9d      	ldr	r2, [pc, #628]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a10a:	430b      	orrs	r3, r1
 800a10c:	6593      	str	r3, [r2, #88]	; 0x58
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a114:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 0308 	and.w	r3, r2, #8
 800a124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a128:	2300      	movs	r3, #0
 800a12a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a12e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	d01e      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a144:	d10c      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a14a:	3328      	adds	r3, #40	; 0x28
 800a14c:	2102      	movs	r1, #2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fd26 	bl	800bba0 <RCCEx_PLL3_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a160:	4b87      	ldr	r3, [pc, #540]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a164:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a170:	4a83      	ldr	r2, [pc, #524]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a172:	430b      	orrs	r3, r1
 800a174:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f002 0310 	and.w	r3, r2, #16
 800a182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a186:	2300      	movs	r3, #0
 800a188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a18c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a190:	460b      	mov	r3, r1
 800a192:	4313      	orrs	r3, r2
 800a194:	d01e      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a2:	d10c      	bne.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a8:	3328      	adds	r3, #40	; 0x28
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 fcf7 	bl	800bba0 <RCCEx_PLL3_Config>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1be:	4b70      	ldr	r3, [pc, #448]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1ce:	4a6c      	ldr	r2, [pc, #432]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a1e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	d03e      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a200:	d022      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a206:	d81b      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a210:	d00b      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a212:	e015      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a218:	3308      	adds	r3, #8
 800a21a:	2100      	movs	r1, #0
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 fc0d 	bl	800ba3c <RCCEx_PLL2_Config>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a228:	e00f      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22e:	3328      	adds	r3, #40	; 0x28
 800a230:	2102      	movs	r1, #2
 800a232:	4618      	mov	r0, r3
 800a234:	f001 fcb4 	bl	800bba0 <RCCEx_PLL3_Config>
 800a238:	4603      	mov	r3, r0
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a23e:	e004      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a246:	e000      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a252:	4b4b      	ldr	r3, [pc, #300]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a256:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a25e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a262:	4a47      	ldr	r2, [pc, #284]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a264:	430b      	orrs	r3, r1
 800a266:	6593      	str	r3, [r2, #88]	; 0x58
 800a268:	e003      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a26e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a27e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a280:	2300      	movs	r3, #0
 800a282:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a284:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a288:	460b      	mov	r3, r1
 800a28a:	4313      	orrs	r3, r2
 800a28c:	d03b      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a29a:	d01f      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a29c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2a0:	d818      	bhi.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a2a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2a6:	d003      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a2a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2ac:	d007      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a2ae:	e011      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b0:	4b33      	ldr	r3, [pc, #204]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a32      	ldr	r2, [pc, #200]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2bc:	e00f      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c2:	3328      	adds	r3, #40	; 0x28
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f001 fc6a 	bl	800bba0 <RCCEx_PLL3_Config>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2d2:	e004      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2da:	e000      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10b      	bne.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2e6:	4b26      	ldr	r3, [pc, #152]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	4a22      	ldr	r2, [pc, #136]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	6553      	str	r3, [r2, #84]	; 0x54
 800a2fc:	e003      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a312:	673b      	str	r3, [r7, #112]	; 0x70
 800a314:	2300      	movs	r3, #0
 800a316:	677b      	str	r3, [r7, #116]	; 0x74
 800a318:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a31c:	460b      	mov	r3, r1
 800a31e:	4313      	orrs	r3, r2
 800a320:	d034      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a330:	d007      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a332:	e011      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a334:	4b12      	ldr	r3, [pc, #72]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	4a11      	ldr	r2, [pc, #68]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a33a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a33e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a340:	e00e      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a346:	3308      	adds	r3, #8
 800a348:	2102      	movs	r1, #2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 fb76 	bl	800ba3c <RCCEx_PLL2_Config>
 800a350:	4603      	mov	r3, r0
 800a352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a356:	e003      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a35e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10d      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a376:	4a02      	ldr	r2, [pc, #8]	; (800a380 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a378:	430b      	orrs	r3, r1
 800a37a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a37c:	e006      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a37e:	bf00      	nop
 800a380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a388:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a398:	66bb      	str	r3, [r7, #104]	; 0x68
 800a39a:	2300      	movs	r3, #0
 800a39c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a39e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	d00c      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	3328      	adds	r3, #40	; 0x28
 800a3ae:	2102      	movs	r1, #2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 fbf5 	bl	800bba0 <RCCEx_PLL3_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a3ce:	663b      	str	r3, [r7, #96]	; 0x60
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	667b      	str	r3, [r7, #100]	; 0x64
 800a3d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	d038      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ea:	d018      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a3ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3f0:	d811      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f6:	d014      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3fc:	d80b      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d011      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a406:	d106      	bne.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a408:	4bc3      	ldr	r3, [pc, #780]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	4ac2      	ldr	r2, [pc, #776]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a414:	e008      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a41c:	e004      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a41e:	bf00      	nop
 800a420:	e002      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a422:	bf00      	nop
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a426:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a430:	4bb9      	ldr	r3, [pc, #740]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a434:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a440:	4ab5      	ldr	r2, [pc, #724]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a442:	430b      	orrs	r3, r1
 800a444:	6553      	str	r3, [r2, #84]	; 0x54
 800a446:	e003      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a44c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a45c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a45e:	2300      	movs	r3, #0
 800a460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a462:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a466:	460b      	mov	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	d009      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a46c:	4baa      	ldr	r3, [pc, #680]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a470:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a47a:	4aa7      	ldr	r2, [pc, #668]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a48c:	653b      	str	r3, [r7, #80]	; 0x50
 800a48e:	2300      	movs	r3, #0
 800a490:	657b      	str	r3, [r7, #84]	; 0x54
 800a492:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a496:	460b      	mov	r3, r1
 800a498:	4313      	orrs	r3, r2
 800a49a:	d00a      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a49c:	4b9e      	ldr	r3, [pc, #632]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4ac:	4a9a      	ldr	r2, [pc, #616]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a4be:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	d009      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4ce:	4b92      	ldr	r3, [pc, #584]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4dc:	4a8e      	ldr	r2, [pc, #568]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	d00e      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4fe:	4b86      	ldr	r3, [pc, #536]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	4a85      	ldr	r2, [pc, #532]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a508:	6113      	str	r3, [r2, #16]
 800a50a:	4b83      	ldr	r3, [pc, #524]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a50c:	6919      	ldr	r1, [r3, #16]
 800a50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a512:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a516:	4a80      	ldr	r2, [pc, #512]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a518:	430b      	orrs	r3, r1
 800a51a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a528:	63bb      	str	r3, [r7, #56]	; 0x38
 800a52a:	2300      	movs	r3, #0
 800a52c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a52e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a532:	460b      	mov	r3, r1
 800a534:	4313      	orrs	r3, r2
 800a536:	d009      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a538:	4b77      	ldr	r3, [pc, #476]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a53a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a546:	4a74      	ldr	r2, [pc, #464]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a548:	430b      	orrs	r3, r1
 800a54a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a558:	633b      	str	r3, [r7, #48]	; 0x30
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
 800a55e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a562:	460b      	mov	r3, r1
 800a564:	4313      	orrs	r3, r2
 800a566:	d00a      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a568:	4b6b      	ldr	r3, [pc, #428]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a578:	4a67      	ldr	r2, [pc, #412]	; (800a718 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a57a:	430b      	orrs	r3, r1
 800a57c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	2100      	movs	r1, #0
 800a588:	62b9      	str	r1, [r7, #40]	; 0x28
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a590:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a594:	460b      	mov	r3, r1
 800a596:	4313      	orrs	r3, r2
 800a598:	d011      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59e:	3308      	adds	r3, #8
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 fa4a 	bl	800ba3c <RCCEx_PLL2_Config>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	6239      	str	r1, [r7, #32]
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	d011      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5de:	3308      	adds	r3, #8
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 fa2a 	bl	800ba3c <RCCEx_PLL2_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	2100      	movs	r1, #0
 800a608:	61b9      	str	r1, [r7, #24]
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a614:	460b      	mov	r3, r1
 800a616:	4313      	orrs	r3, r2
 800a618:	d011      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61e:	3308      	adds	r3, #8
 800a620:	2102      	movs	r1, #2
 800a622:	4618      	mov	r0, r3
 800a624:	f001 fa0a 	bl	800ba3c <RCCEx_PLL2_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a62e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	2100      	movs	r1, #0
 800a648:	6139      	str	r1, [r7, #16]
 800a64a:	f003 0308 	and.w	r3, r3, #8
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a654:	460b      	mov	r3, r1
 800a656:	4313      	orrs	r3, r2
 800a658:	d011      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65e:	3328      	adds	r3, #40	; 0x28
 800a660:	2100      	movs	r1, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f001 fa9c 	bl	800bba0 <RCCEx_PLL3_Config>
 800a668:	4603      	mov	r3, r0
 800a66a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a66e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a67a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	2100      	movs	r1, #0
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a694:	460b      	mov	r3, r1
 800a696:	4313      	orrs	r3, r2
 800a698:	d011      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69e:	3328      	adds	r3, #40	; 0x28
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 fa7c 	bl	800bba0 <RCCEx_PLL3_Config>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	d011      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6de:	3328      	adds	r3, #40	; 0x28
 800a6e0:	2102      	movs	r1, #2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fa5c 	bl	800bba0 <RCCEx_PLL3_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a6fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	e000      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a712:	46bd      	mov	sp, r7
 800a714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a718:	58024400 	.word	0x58024400

0800a71c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b090      	sub	sp, #64	; 0x40
 800a720:	af00      	add	r7, sp, #0
 800a722:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a72e:	430b      	orrs	r3, r1
 800a730:	f040 8094 	bne.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a734:	4b9e      	ldr	r3, [pc, #632]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	2b04      	cmp	r3, #4
 800a742:	f200 8087 	bhi.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a746:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a761 	.word	0x0800a761
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a7b1 	.word	0x0800a7b1
 800a758:	0800a84d 	.word	0x0800a84d
 800a75c:	0800a7d9 	.word	0x0800a7d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a760:	4b93      	ldr	r3, [pc, #588]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a76c:	d108      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a76e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a772:	4618      	mov	r0, r3
 800a774:	f001 f810 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77c:	f000 bd45 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a784:	f000 bd41 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a788:	4b89      	ldr	r3, [pc, #548]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a794:	d108      	bne.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a796:	f107 0318 	add.w	r3, r7, #24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fd54 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a4:	f000 bd31 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ac:	f000 bd2d 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7b0:	4b7f      	ldr	r3, [pc, #508]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7bc:	d108      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7be:	f107 030c 	add.w	r3, r7, #12
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fe94 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7cc:	f000 bd1d 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7d4:	f000 bd19 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7d8:	4b75      	ldr	r3, [pc, #468]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7e2:	4b73      	ldr	r3, [pc, #460]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d10c      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7f4:	4b6e      	ldr	r3, [pc, #440]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	08db      	lsrs	r3, r3, #3
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	4a6d      	ldr	r2, [pc, #436]	; (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a800:	fa22 f303 	lsr.w	r3, r2, r3
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a806:	e01f      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a808:	4b69      	ldr	r3, [pc, #420]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a814:	d106      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a81c:	d102      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a81e:	4b66      	ldr	r3, [pc, #408]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a822:	e011      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a824:	4b62      	ldr	r3, [pc, #392]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a830:	d106      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a838:	d102      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a83a:	4b60      	ldr	r3, [pc, #384]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83e:	e003      	b.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a844:	f000 bce1 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a848:	f000 bcdf 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a84c:	4b5c      	ldr	r3, [pc, #368]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a850:	f000 bcdb 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a858:	f000 bcd7 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a860:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a864:	430b      	orrs	r3, r1
 800a866:	f040 80ad 	bne.w	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a86a:	4b51      	ldr	r3, [pc, #324]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a872:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87a:	d056      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a882:	f200 8090 	bhi.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2bc0      	cmp	r3, #192	; 0xc0
 800a88a:	f000 8088 	beq.w	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	2bc0      	cmp	r3, #192	; 0xc0
 800a892:	f200 8088 	bhi.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	2b80      	cmp	r3, #128	; 0x80
 800a89a:	d032      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	2b80      	cmp	r3, #128	; 0x80
 800a8a0:	f200 8081 	bhi.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	d014      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a8b0:	e079      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8b2:	4b3f      	ldr	r3, [pc, #252]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8be:	d108      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 ff67 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ce:	f000 bc9c 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d6:	f000 bc98 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8da:	4b35      	ldr	r3, [pc, #212]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8e6:	d108      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e8:	f107 0318 	add.w	r3, r7, #24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fcab 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f6:	f000 bc88 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fe:	f000 bc84 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a902:	4b2b      	ldr	r3, [pc, #172]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a90e:	d108      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a910:	f107 030c 	add.w	r3, r7, #12
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fdeb 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91e:	f000 bc74 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a926:	f000 bc70 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a92a:	4b21      	ldr	r3, [pc, #132]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a92e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a932:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a934:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d10c      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a946:	4b1a      	ldr	r3, [pc, #104]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	08db      	lsrs	r3, r3, #3
 800a94c:	f003 0303 	and.w	r3, r3, #3
 800a950:	4a18      	ldr	r2, [pc, #96]	; (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a952:	fa22 f303 	lsr.w	r3, r2, r3
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a958:	e01f      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a95a:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a966:	d106      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a96e:	d102      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a970:	4b11      	ldr	r3, [pc, #68]	; (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a974:	e011      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a976:	4b0e      	ldr	r3, [pc, #56]	; (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a97e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a982:	d106      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a98a:	d102      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a990:	e003      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a996:	f000 bc38 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a99a:	f000 bc36 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a99e:	4b08      	ldr	r3, [pc, #32]	; (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a2:	f000 bc32 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9aa:	f000 bc2e 	b.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9ae:	bf00      	nop
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	03d09000 	.word	0x03d09000
 800a9b8:	003d0900 	.word	0x003d0900
 800a9bc:	017d7840 	.word	0x017d7840
 800a9c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a9cc:	430b      	orrs	r3, r1
 800a9ce:	f040 809c 	bne.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a9d2:	4b9e      	ldr	r3, [pc, #632]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a9da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9e2:	d054      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9ea:	f200 808b 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9f4:	f000 8083 	beq.w	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9fe:	f200 8081 	bhi.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa08:	d02f      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa10:	d878      	bhi.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa1e:	d012      	beq.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa20:	e070      	b.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa22:	4b8a      	ldr	r3, [pc, #552]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa2e:	d107      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 feaf 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3e:	e3e4      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa44:	e3e1      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa46:	4b81      	ldr	r3, [pc, #516]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa52:	d107      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa54:	f107 0318 	add.w	r3, r7, #24
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fbf5 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa62:	e3d2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa68:	e3cf      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa6a:	4b78      	ldr	r3, [pc, #480]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa76:	d107      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa78:	f107 030c 	add.w	r3, r7, #12
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fd37 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa86:	e3c0      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa8c:	e3bd      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa8e:	4b6f      	ldr	r3, [pc, #444]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa98:	4b6c      	ldr	r3, [pc, #432]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d10c      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaaa:	4b68      	ldr	r3, [pc, #416]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	08db      	lsrs	r3, r3, #3
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	4a66      	ldr	r2, [pc, #408]	; (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aab6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aabc:	e01e      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aabe:	4b63      	ldr	r3, [pc, #396]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaca:	d106      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aad2:	d102      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aad4:	4b5f      	ldr	r3, [pc, #380]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aad8:	e010      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aada:	4b5c      	ldr	r3, [pc, #368]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aae6:	d106      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaee:	d102      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaf0:	4b59      	ldr	r3, [pc, #356]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf4:	e002      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aafa:	e386      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aafc:	e385      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aafe:	4b57      	ldr	r3, [pc, #348]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab02:	e382      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab08:	e37f      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab0e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ab12:	430b      	orrs	r3, r1
 800ab14:	f040 80a7 	bne.w	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ab18:	4b4c      	ldr	r3, [pc, #304]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ab20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab28:	d055      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab30:	f200 8096 	bhi.w	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab3a:	f000 8084 	beq.w	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab44:	f200 808c 	bhi.w	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab4e:	d030      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab56:	f200 8083 	bhi.w	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab66:	d012      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ab68:	e07a      	b.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab6a:	4b38      	ldr	r3, [pc, #224]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab76:	d107      	bne.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fe0b 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab86:	e340      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab8c:	e33d      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab8e:	4b2f      	ldr	r3, [pc, #188]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab9a:	d107      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9c:	f107 0318 	add.w	r3, r7, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fb51 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e32e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb0:	e32b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abb2:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc0:	f107 030c 	add.w	r3, r7, #12
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fc93 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abce:	e31c      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd4:	e319      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd6:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abe0:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d10c      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800abec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d109      	bne.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	08db      	lsrs	r3, r3, #3
 800abf8:	f003 0303 	and.w	r3, r3, #3
 800abfc:	4a14      	ldr	r2, [pc, #80]	; (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800abfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac04:	e01e      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac06:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac12:	d106      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac1a:	d102      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac20:	e010      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac22:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac2e:	d106      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ac30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac36:	d102      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac3c:	e002      	b.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac42:	e2e2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac44:	e2e1      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4a:	e2de      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	03d09000 	.word	0x03d09000
 800ac54:	003d0900 	.word	0x003d0900
 800ac58:	017d7840 	.word	0x017d7840
 800ac5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac64:	e2d1      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ac6e:	430b      	orrs	r3, r1
 800ac70:	f040 809c 	bne.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac74:	4b93      	ldr	r3, [pc, #588]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ac7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac84:	d054      	beq.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac8c:	f200 808b 	bhi.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac96:	f000 8083 	beq.w	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aca0:	f200 8081 	bhi.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acaa:	d02f      	beq.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acb2:	d878      	bhi.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc0:	d012      	beq.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800acc2:	e070      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acc4:	4b7f      	ldr	r3, [pc, #508]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800accc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acd0:	d107      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fd5e 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace0:	e293      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace6:	e290      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ace8:	4b76      	ldr	r3, [pc, #472]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acf4:	d107      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf6:	f107 0318 	add.w	r3, r7, #24
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 faa4 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad04:	e281      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad0a:	e27e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad0c:	4b6d      	ldr	r3, [pc, #436]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad18:	d107      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 fbe6 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad28:	e26f      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad2e:	e26c      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad30:	4b64      	ldr	r3, [pc, #400]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad3a:	4b62      	ldr	r3, [pc, #392]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b04      	cmp	r3, #4
 800ad44:	d10c      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d109      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad4c:	4b5d      	ldr	r3, [pc, #372]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	08db      	lsrs	r3, r3, #3
 800ad52:	f003 0303 	and.w	r3, r3, #3
 800ad56:	4a5c      	ldr	r2, [pc, #368]	; (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad5e:	e01e      	b.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad60:	4b58      	ldr	r3, [pc, #352]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad6c:	d106      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad74:	d102      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad76:	4b55      	ldr	r3, [pc, #340]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad7a:	e010      	b.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad7c:	4b51      	ldr	r3, [pc, #324]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad88:	d106      	bne.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad90:	d102      	bne.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad92:	4b4f      	ldr	r3, [pc, #316]	; (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad96:	e002      	b.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad9c:	e235      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad9e:	e234      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ada0:	4b4c      	ldr	r3, [pc, #304]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ada4:	e231      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adaa:	e22e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800adac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800adb4:	430b      	orrs	r3, r1
 800adb6:	f040 808f 	bne.w	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800adba:	4b42      	ldr	r3, [pc, #264]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adbe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800adc2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adca:	d06b      	beq.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800adcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800add2:	d874      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adda:	d056      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ade2:	d86c      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adea:	d03b      	beq.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800adec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adf2:	d864      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adfa:	d021      	beq.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae02:	d85c      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae10:	d004      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ae12:	e054      	b.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ae14:	f7fe fa0a 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800ae18:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae1a:	e1f6      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae1c:	4b29      	ldr	r3, [pc, #164]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae28:	d107      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2a:	f107 0318 	add.w	r3, r7, #24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fa0a 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae38:	e1e7      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae3e:	e1e4      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae40:	4b20      	ldr	r3, [pc, #128]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae4c:	d107      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4e:	f107 030c 	add.w	r3, r7, #12
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fb4c 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae5c:	e1d5      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae62:	e1d2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae64:	4b17      	ldr	r3, [pc, #92]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d109      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae70:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	08db      	lsrs	r3, r3, #3
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	4a13      	ldr	r2, [pc, #76]	; (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae82:	e1c2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae88:	e1bf      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae8a:	4b0e      	ldr	r3, [pc, #56]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae96:	d102      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ae98:	4b0c      	ldr	r3, [pc, #48]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae9c:	e1b5      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea2:	e1b2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aea4:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb0:	d102      	bne.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aeb2:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb6:	e1a8      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aebc:	e1a5      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aec2:	e1a2      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec4:	58024400 	.word	0x58024400
 800aec8:	03d09000 	.word	0x03d09000
 800aecc:	003d0900 	.word	0x003d0900
 800aed0:	017d7840 	.word	0x017d7840
 800aed4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aedc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800aee0:	430b      	orrs	r3, r1
 800aee2:	d173      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aee4:	4b9c      	ldr	r3, [pc, #624]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aeec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef4:	d02f      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aefc:	d863      	bhi.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af0a:	d012      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800af0c:	e05b      	b.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af0e:	4b92      	ldr	r3, [pc, #584]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af1a:	d107      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af1c:	f107 0318 	add.w	r3, r7, #24
 800af20:	4618      	mov	r0, r3
 800af22:	f000 f991 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2a:	e16e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af30:	e16b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af32:	4b89      	ldr	r3, [pc, #548]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af40:	f107 030c 	add.w	r3, r7, #12
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fad3 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4e:	e15c      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af54:	e159      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af56:	4b80      	ldr	r3, [pc, #512]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af60:	4b7d      	ldr	r3, [pc, #500]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b04      	cmp	r3, #4
 800af6a:	d10c      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d109      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af72:	4b79      	ldr	r3, [pc, #484]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	4a77      	ldr	r2, [pc, #476]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af7e:	fa22 f303 	lsr.w	r3, r2, r3
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af84:	e01e      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af86:	4b74      	ldr	r3, [pc, #464]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af92:	d106      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800af94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af9a:	d102      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af9c:	4b70      	ldr	r3, [pc, #448]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afa0:	e010      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afa2:	4b6d      	ldr	r3, [pc, #436]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afae:	d106      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800afb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb6:	d102      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afb8:	4b6a      	ldr	r3, [pc, #424]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afbc:	e002      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afc2:	e122      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afc4:	e121      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afca:	e11e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800afcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800afd4:	430b      	orrs	r3, r1
 800afd6:	d133      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800afd8:	4b5f      	ldr	r3, [pc, #380]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afe0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d004      	beq.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afee:	d012      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aff0:	e023      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aff2:	4b59      	ldr	r3, [pc, #356]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800affe:	d107      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fbc7 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b00e:	e0fc      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b014:	e0f9      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b016:	4b50      	ldr	r3, [pc, #320]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b01e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b022:	d107      	bne.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b024:	f107 0318 	add.w	r3, r7, #24
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f90d 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b032:	e0ea      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b038:	e0e7      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03e:	e0e4      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b044:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b048:	430b      	orrs	r3, r1
 800b04a:	f040 808d 	bne.w	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b04e:	4b42      	ldr	r3, [pc, #264]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b052:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b056:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b05e:	d06b      	beq.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b066:	d874      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b06e:	d056      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b076:	d86c      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b07e:	d03b      	beq.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b086:	d864      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b08e:	d021      	beq.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b096:	d85c      	bhi.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0a4:	d004      	beq.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b0a6:	e054      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b0a8:	f000 f8b8 	bl	800b21c <HAL_RCCEx_GetD3PCLK1Freq>
 800b0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b0ae:	e0ac      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b0:	4b29      	ldr	r3, [pc, #164]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0bc:	d107      	bne.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0be:	f107 0318 	add.w	r3, r7, #24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f8c0 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0cc:	e09d      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d2:	e09a      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0d4:	4b20      	ldr	r3, [pc, #128]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e0:	d107      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fa02 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f0:	e08b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f6:	e088      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0f8:	4b17      	ldr	r3, [pc, #92]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0304 	and.w	r3, r3, #4
 800b100:	2b04      	cmp	r3, #4
 800b102:	d109      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b104:	4b14      	ldr	r3, [pc, #80]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	08db      	lsrs	r3, r3, #3
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	4a13      	ldr	r2, [pc, #76]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b110:	fa22 f303 	lsr.w	r3, r2, r3
 800b114:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b116:	e078      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b11c:	e075      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b11e:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12a:	d102      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b12c:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b130:	e06b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b136:	e068      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b138:	4b07      	ldr	r3, [pc, #28]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b144:	d102      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14a:	e05e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b150:	e05b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b156:	e058      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	003d0900 	.word	0x003d0900
 800b164:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b16c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b170:	430b      	orrs	r3, r1
 800b172:	d148      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b174:	4b27      	ldr	r3, [pc, #156]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b17c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b184:	d02a      	beq.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b18c:	d838      	bhi.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b19a:	d00d      	beq.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b19c:	e030      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1aa:	d102      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b1ac:	4b1a      	ldr	r3, [pc, #104]	; (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1b0:	e02b      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1b6:	e028      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1b8:	4b16      	ldr	r3, [pc, #88]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1c4:	d107      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fae4 	bl	800b798 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d4:	e019      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1da:	e016      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1dc:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1e8:	d107      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ea:	f107 0318 	add.w	r3, r7, #24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f82a 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f8:	e007      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1fe:	e004      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b204:	e001      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3740      	adds	r7, #64	; 0x40
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	58024400 	.word	0x58024400
 800b218:	017d7840 	.word	0x017d7840

0800b21c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b220:	f7fd ffd4 	bl	80091cc <HAL_RCC_GetHCLKFreq>
 800b224:	4602      	mov	r2, r0
 800b226:	4b06      	ldr	r3, [pc, #24]	; (800b240 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	091b      	lsrs	r3, r3, #4
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	4904      	ldr	r1, [pc, #16]	; (800b244 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b232:	5ccb      	ldrb	r3, [r1, r3]
 800b234:	f003 031f 	and.w	r3, r3, #31
 800b238:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	58024400 	.word	0x58024400
 800b244:	08014c64 	.word	0x08014c64

0800b248 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b248:	b480      	push	{r7}
 800b24a:	b089      	sub	sp, #36	; 0x24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b250:	4ba1      	ldr	r3, [pc, #644]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b254:	f003 0303 	and.w	r3, r3, #3
 800b258:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b25a:	4b9f      	ldr	r3, [pc, #636]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25e:	0b1b      	lsrs	r3, r3, #12
 800b260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b264:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b266:	4b9c      	ldr	r3, [pc, #624]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26a:	091b      	lsrs	r3, r3, #4
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b272:	4b99      	ldr	r3, [pc, #612]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b276:	08db      	lsrs	r3, r3, #3
 800b278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 8111 	beq.w	800b4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	f000 8083 	beq.w	800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	f200 80a1 	bhi.w	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d056      	beq.n	800b360 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b2b2:	e099      	b.n	800b3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b4:	4b88      	ldr	r3, [pc, #544]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0320 	and.w	r3, r3, #32
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d02d      	beq.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c0:	4b85      	ldr	r3, [pc, #532]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	08db      	lsrs	r3, r3, #3
 800b2c6:	f003 0303 	and.w	r3, r3, #3
 800b2ca:	4a84      	ldr	r2, [pc, #528]	; (800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ea:	4b7b      	ldr	r3, [pc, #492]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b31a:	e087      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b326:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32e:	4b6a      	ldr	r3, [pc, #424]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b342:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b35e:	e065      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b372:	4b59      	ldr	r3, [pc, #356]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b382:	ed97 6a03 	vldr	s12, [r7, #12]
 800b386:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3a2:	e043      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	ee07 3a90 	vmov	s15, r3
 800b3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b6:	4b48      	ldr	r3, [pc, #288]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3e6:	e021      	b.n	800b42c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3fa:	4b37      	ldr	r3, [pc, #220]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b42a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b42c:	4b2a      	ldr	r3, [pc, #168]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b430:	0a5b      	lsrs	r3, r3, #9
 800b432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b442:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b446:	edd7 6a07 	vldr	s13, [r7, #28]
 800b44a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b44e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b452:	ee17 2a90 	vmov	r2, s15
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b45a:	4b1f      	ldr	r3, [pc, #124]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45e:	0c1b      	lsrs	r3, r3, #16
 800b460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b464:	ee07 3a90 	vmov	s15, r3
 800b468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b470:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b474:	edd7 6a07 	vldr	s13, [r7, #28]
 800b478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b480:	ee17 2a90 	vmov	r2, s15
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b488:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48c:	0e1b      	lsrs	r3, r3, #24
 800b48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b49e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ae:	ee17 2a90 	vmov	r2, s15
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b4b6:	e008      	b.n	800b4ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	609a      	str	r2, [r3, #8]
}
 800b4ca:	bf00      	nop
 800b4cc:	3724      	adds	r7, #36	; 0x24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	03d09000 	.word	0x03d09000
 800b4e0:	46000000 	.word	0x46000000
 800b4e4:	4c742400 	.word	0x4c742400
 800b4e8:	4a742400 	.word	0x4a742400
 800b4ec:	4bbebc20 	.word	0x4bbebc20

0800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b089      	sub	sp, #36	; 0x24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4f8:	4ba1      	ldr	r3, [pc, #644]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fc:	f003 0303 	and.w	r3, r3, #3
 800b500:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b502:	4b9f      	ldr	r3, [pc, #636]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	0d1b      	lsrs	r3, r3, #20
 800b508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b50c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b50e:	4b9c      	ldr	r3, [pc, #624]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	f003 0301 	and.w	r3, r3, #1
 800b518:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b51a:	4b99      	ldr	r3, [pc, #612]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	08db      	lsrs	r3, r3, #3
 800b520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	fb02 f303 	mul.w	r3, r2, r3
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 8111 	beq.w	800b760 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	2b02      	cmp	r3, #2
 800b542:	f000 8083 	beq.w	800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	f200 80a1 	bhi.w	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d056      	beq.n	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b55a:	e099      	b.n	800b690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b55c:	4b88      	ldr	r3, [pc, #544]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b00      	cmp	r3, #0
 800b566:	d02d      	beq.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b568:	4b85      	ldr	r3, [pc, #532]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	08db      	lsrs	r3, r3, #3
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	4a84      	ldr	r2, [pc, #528]	; (800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
 800b578:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b592:	4b7b      	ldr	r3, [pc, #492]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5c2:	e087      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	ee07 3a90 	vmov	s15, r3
 800b5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b78c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d6:	4b6a      	ldr	r3, [pc, #424]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b606:	e065      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b612:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b61a:	4b59      	ldr	r3, [pc, #356]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b64a:	e043      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b656:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65e:	4b48      	ldr	r3, [pc, #288]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b672:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68e:	e021      	b.n	800b6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6a2:	4b37      	ldr	r3, [pc, #220]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6aa:	ee07 3a90 	vmov	s15, r3
 800b6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b6d4:	4b2a      	ldr	r3, [pc, #168]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d8:	0a5b      	lsrs	r3, r3, #9
 800b6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fa:	ee17 2a90 	vmov	r2, s15
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b702:	4b1f      	ldr	r3, [pc, #124]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	0c1b      	lsrs	r3, r3, #16
 800b708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b70c:	ee07 3a90 	vmov	s15, r3
 800b710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b71c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b728:	ee17 2a90 	vmov	r2, s15
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b730:	4b13      	ldr	r3, [pc, #76]	; (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b734:	0e1b      	lsrs	r3, r3, #24
 800b736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b74a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b756:	ee17 2a90 	vmov	r2, s15
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b75e:	e008      	b.n	800b772 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	609a      	str	r2, [r3, #8]
}
 800b772:	bf00      	nop
 800b774:	3724      	adds	r7, #36	; 0x24
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	58024400 	.word	0x58024400
 800b784:	03d09000 	.word	0x03d09000
 800b788:	46000000 	.word	0x46000000
 800b78c:	4c742400 	.word	0x4c742400
 800b790:	4a742400 	.word	0x4a742400
 800b794:	4bbebc20 	.word	0x4bbebc20

0800b798 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b798:	b480      	push	{r7}
 800b79a:	b089      	sub	sp, #36	; 0x24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7a0:	4ba0      	ldr	r3, [pc, #640]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a4:	f003 0303 	and.w	r3, r3, #3
 800b7a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b7aa:	4b9e      	ldr	r3, [pc, #632]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ae:	091b      	lsrs	r3, r3, #4
 800b7b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b7b6:	4b9b      	ldr	r3, [pc, #620]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7c0:	4b98      	ldr	r3, [pc, #608]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c4:	08db      	lsrs	r3, r3, #3
 800b7c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 8111 	beq.w	800ba06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	f000 8083 	beq.w	800b8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	f200 80a1 	bhi.w	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d056      	beq.n	800b8ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b800:	e099      	b.n	800b936 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b802:	4b88      	ldr	r3, [pc, #544]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0320 	and.w	r3, r3, #32
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d02d      	beq.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b80e:	4b85      	ldr	r3, [pc, #532]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	08db      	lsrs	r3, r3, #3
 800b814:	f003 0303 	and.w	r3, r3, #3
 800b818:	4a83      	ldr	r2, [pc, #524]	; (800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b81a:	fa22 f303 	lsr.w	r3, r2, r3
 800b81e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b838:	4b7a      	ldr	r3, [pc, #488]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b848:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b864:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b868:	e087      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	ee07 3a90 	vmov	s15, r3
 800b870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b874:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87c:	4b69      	ldr	r3, [pc, #420]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b890:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ac:	e065      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b8bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c0:	4b58      	ldr	r3, [pc, #352]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8f0:	e043      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	ee07 3a90 	vmov	s15, r3
 800b8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ba38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b904:	4b47      	ldr	r3, [pc, #284]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b914:	ed97 6a03 	vldr	s12, [r7, #12]
 800b918:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b91c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b934:	e021      	b.n	800b97a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b948:	4b36      	ldr	r3, [pc, #216]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b958:	ed97 6a03 	vldr	s12, [r7, #12]
 800b95c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b96c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b970:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b974:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b978:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b97a:	4b2a      	ldr	r3, [pc, #168]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97e:	0a5b      	lsrs	r3, r3, #9
 800b980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b984:	ee07 3a90 	vmov	s15, r3
 800b988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b990:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b994:	edd7 6a07 	vldr	s13, [r7, #28]
 800b998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b99c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a0:	ee17 2a90 	vmov	r2, s15
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ac:	0c1b      	lsrs	r3, r3, #16
 800b9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ce:	ee17 2a90 	vmov	r2, s15
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b9d6:	4b13      	ldr	r3, [pc, #76]	; (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9da:	0e1b      	lsrs	r3, r3, #24
 800b9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e0:	ee07 3a90 	vmov	s15, r3
 800b9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fc:	ee17 2a90 	vmov	r2, s15
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba04:	e008      	b.n	800ba18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	609a      	str	r2, [r3, #8]
}
 800ba18:	bf00      	nop
 800ba1a:	3724      	adds	r7, #36	; 0x24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	58024400 	.word	0x58024400
 800ba28:	03d09000 	.word	0x03d09000
 800ba2c:	46000000 	.word	0x46000000
 800ba30:	4c742400 	.word	0x4c742400
 800ba34:	4a742400 	.word	0x4a742400
 800ba38:	4bbebc20 	.word	0x4bbebc20

0800ba3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba4a:	4b53      	ldr	r3, [pc, #332]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d101      	bne.n	800ba5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e099      	b.n	800bb8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba5a:	4b4f      	ldr	r3, [pc, #316]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a4e      	ldr	r2, [pc, #312]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ba64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba66:	f7f7 f98b 	bl	8002d80 <HAL_GetTick>
 800ba6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba6c:	e008      	b.n	800ba80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba6e:	f7f7 f987 	bl	8002d80 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d901      	bls.n	800ba80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e086      	b.n	800bb8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba80:	4b45      	ldr	r3, [pc, #276]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f0      	bne.n	800ba6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba8c:	4b42      	ldr	r3, [pc, #264]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	031b      	lsls	r3, r3, #12
 800ba9a:	493f      	ldr	r1, [pc, #252]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	628b      	str	r3, [r1, #40]	; 0x28
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	3b01      	subs	r3, #1
 800baa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	3b01      	subs	r3, #1
 800bab0:	025b      	lsls	r3, r3, #9
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	431a      	orrs	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	3b01      	subs	r3, #1
 800babc:	041b      	lsls	r3, r3, #16
 800babe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bac2:	431a      	orrs	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	3b01      	subs	r3, #1
 800baca:	061b      	lsls	r3, r3, #24
 800bacc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bad0:	4931      	ldr	r1, [pc, #196]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bad2:	4313      	orrs	r3, r2
 800bad4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bad6:	4b30      	ldr	r3, [pc, #192]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	492d      	ldr	r1, [pc, #180]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bae8:	4b2b      	ldr	r3, [pc, #172]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	f023 0220 	bic.w	r2, r3, #32
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	4928      	ldr	r1, [pc, #160]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bafa:	4b27      	ldr	r3, [pc, #156]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafe:	4a26      	ldr	r2, [pc, #152]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb00:	f023 0310 	bic.w	r3, r3, #16
 800bb04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb06:	4b24      	ldr	r3, [pc, #144]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb0a:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <RCCEx_PLL2_Config+0x160>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	69d2      	ldr	r2, [r2, #28]
 800bb12:	00d2      	lsls	r2, r2, #3
 800bb14:	4920      	ldr	r1, [pc, #128]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb1a:	4b1f      	ldr	r3, [pc, #124]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	4a1e      	ldr	r2, [pc, #120]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb20:	f043 0310 	orr.w	r3, r3, #16
 800bb24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d106      	bne.n	800bb3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb2c:	4b1a      	ldr	r3, [pc, #104]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	4a19      	ldr	r2, [pc, #100]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb38:	e00f      	b.n	800bb5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d106      	bne.n	800bb4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb40:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	4a14      	ldr	r2, [pc, #80]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb4c:	e005      	b.n	800bb5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb4e:	4b12      	ldr	r3, [pc, #72]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb52:	4a11      	ldr	r2, [pc, #68]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a0e      	ldr	r2, [pc, #56]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb66:	f7f7 f90b 	bl	8002d80 <HAL_GetTick>
 800bb6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb6c:	e008      	b.n	800bb80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb6e:	f7f7 f907 	bl	8002d80 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d901      	bls.n	800bb80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e006      	b.n	800bb8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <RCCEx_PLL2_Config+0x15c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0f0      	beq.n	800bb6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	58024400 	.word	0x58024400
 800bb9c:	ffff0007 	.word	0xffff0007

0800bba0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbae:	4b53      	ldr	r3, [pc, #332]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb2:	f003 0303 	and.w	r3, r3, #3
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d101      	bne.n	800bbbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e099      	b.n	800bcf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bbbe:	4b4f      	ldr	r3, [pc, #316]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a4e      	ldr	r2, [pc, #312]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbca:	f7f7 f8d9 	bl	8002d80 <HAL_GetTick>
 800bbce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbd0:	e008      	b.n	800bbe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbd2:	f7f7 f8d5 	bl	8002d80 <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d901      	bls.n	800bbe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e086      	b.n	800bcf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbe4:	4b45      	ldr	r3, [pc, #276]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f0      	bne.n	800bbd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bbf0:	4b42      	ldr	r3, [pc, #264]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	051b      	lsls	r3, r3, #20
 800bbfe:	493f      	ldr	r1, [pc, #252]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc00:	4313      	orrs	r3, r2
 800bc02:	628b      	str	r3, [r1, #40]	; 0x28
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	025b      	lsls	r3, r3, #9
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	041b      	lsls	r3, r3, #16
 800bc22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bc26:	431a      	orrs	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	061b      	lsls	r3, r3, #24
 800bc30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc34:	4931      	ldr	r1, [pc, #196]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc3a:	4b30      	ldr	r3, [pc, #192]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	492d      	ldr	r1, [pc, #180]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc4c:	4b2b      	ldr	r3, [pc, #172]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	4928      	ldr	r1, [pc, #160]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc5e:	4b27      	ldr	r3, [pc, #156]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc62:	4a26      	ldr	r2, [pc, #152]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc6a:	4b24      	ldr	r3, [pc, #144]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc6e:	4b24      	ldr	r3, [pc, #144]	; (800bd00 <RCCEx_PLL3_Config+0x160>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	69d2      	ldr	r2, [r2, #28]
 800bc76:	00d2      	lsls	r2, r2, #3
 800bc78:	4920      	ldr	r1, [pc, #128]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc7e:	4b1f      	ldr	r3, [pc, #124]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc82:	4a1e      	ldr	r2, [pc, #120]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d106      	bne.n	800bc9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc90:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc94:	4a19      	ldr	r2, [pc, #100]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bc96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bc9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc9c:	e00f      	b.n	800bcbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d106      	bne.n	800bcb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bca4:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca8:	4a14      	ldr	r2, [pc, #80]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bcb0:	e005      	b.n	800bcbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcb2:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb6:	4a11      	ldr	r2, [pc, #68]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a0e      	ldr	r2, [pc, #56]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bcc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcca:	f7f7 f859 	bl	8002d80 <HAL_GetTick>
 800bcce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bcd0:	e008      	b.n	800bce4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcd2:	f7f7 f855 	bl	8002d80 <HAL_GetTick>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d901      	bls.n	800bce4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e006      	b.n	800bcf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bce4:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <RCCEx_PLL3_Config+0x15c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0f0      	beq.n	800bcd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	58024400 	.word	0x58024400
 800bd00:	ffff0007 	.word	0xffff0007

0800bd04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e10f      	b.n	800bf36 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a87      	ldr	r2, [pc, #540]	; (800bf40 <HAL_SPI_Init+0x23c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d00f      	beq.n	800bd46 <HAL_SPI_Init+0x42>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a86      	ldr	r2, [pc, #536]	; (800bf44 <HAL_SPI_Init+0x240>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d00a      	beq.n	800bd46 <HAL_SPI_Init+0x42>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a84      	ldr	r2, [pc, #528]	; (800bf48 <HAL_SPI_Init+0x244>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d005      	beq.n	800bd46 <HAL_SPI_Init+0x42>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	2b0f      	cmp	r3, #15
 800bd40:	d901      	bls.n	800bd46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e0f7      	b.n	800bf36 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f900 	bl	800bf4c <SPI_GetPacketSize>
 800bd4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a7b      	ldr	r2, [pc, #492]	; (800bf40 <HAL_SPI_Init+0x23c>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d00c      	beq.n	800bd72 <HAL_SPI_Init+0x6e>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a79      	ldr	r2, [pc, #484]	; (800bf44 <HAL_SPI_Init+0x240>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d007      	beq.n	800bd72 <HAL_SPI_Init+0x6e>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a78      	ldr	r2, [pc, #480]	; (800bf48 <HAL_SPI_Init+0x244>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d002      	beq.n	800bd72 <HAL_SPI_Init+0x6e>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d811      	bhi.n	800bd96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd76:	4a72      	ldr	r2, [pc, #456]	; (800bf40 <HAL_SPI_Init+0x23c>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d009      	beq.n	800bd90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a70      	ldr	r2, [pc, #448]	; (800bf44 <HAL_SPI_Init+0x240>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d004      	beq.n	800bd90 <HAL_SPI_Init+0x8c>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a6f      	ldr	r2, [pc, #444]	; (800bf48 <HAL_SPI_Init+0x244>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d104      	bne.n	800bd9a <HAL_SPI_Init+0x96>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b10      	cmp	r3, #16
 800bd94:	d901      	bls.n	800bd9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e0cd      	b.n	800bf36 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d106      	bne.n	800bdb4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7f6 fb16 	bl	80023e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f022 0201 	bic.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bdd6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bde0:	d119      	bne.n	800be16 <HAL_SPI_Init+0x112>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdea:	d103      	bne.n	800bdf4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d008      	beq.n	800be06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10c      	bne.n	800be16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be04:	d107      	bne.n	800be16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00f      	beq.n	800be42 <HAL_SPI_Init+0x13e>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	2b06      	cmp	r3, #6
 800be28:	d90b      	bls.n	800be42 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	430a      	orrs	r2, r1
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	e007      	b.n	800be52 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	69da      	ldr	r2, [r3, #28]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	431a      	orrs	r2, r3
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be64:	ea42 0103 	orr.w	r1, r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	431a      	orrs	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be82:	431a      	orrs	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	431a      	orrs	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea6:	431a      	orrs	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	431a      	orrs	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beb2:	ea42 0103 	orr.w	r1, r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	430a      	orrs	r2, r1
 800bec0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d113      	bne.n	800bef2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bedc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bef0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f022 0201 	bic.w	r2, r2, #1
 800bf00:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	430a      	orrs	r2, r1
 800bf22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	40013000 	.word	0x40013000
 800bf44:	40003800 	.word	0x40003800
 800bf48:	40003c00 	.word	0x40003c00

0800bf4c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf58:	095b      	lsrs	r3, r3, #5
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	3301      	adds	r3, #1
 800bf64:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	3307      	adds	r3, #7
 800bf6a:	08db      	lsrs	r3, r3, #3
 800bf6c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	fb02 f303 	mul.w	r3, r2, r3
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3714      	adds	r7, #20
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e049      	b.n	800c028 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d106      	bne.n	800bfae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7f6 facf 	bl	800254c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f000 ff41 	bl	800ce48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b01      	cmp	r3, #1
 800c042:	d001      	beq.n	800c048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e04c      	b.n	800c0e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2202      	movs	r2, #2
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a26      	ldr	r2, [pc, #152]	; (800c0f0 <HAL_TIM_Base_Start+0xc0>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d022      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c062:	d01d      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a22      	ldr	r2, [pc, #136]	; (800c0f4 <HAL_TIM_Base_Start+0xc4>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d018      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a21      	ldr	r2, [pc, #132]	; (800c0f8 <HAL_TIM_Base_Start+0xc8>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d013      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a1f      	ldr	r2, [pc, #124]	; (800c0fc <HAL_TIM_Base_Start+0xcc>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d00e      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a1e      	ldr	r2, [pc, #120]	; (800c100 <HAL_TIM_Base_Start+0xd0>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d009      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a1c      	ldr	r2, [pc, #112]	; (800c104 <HAL_TIM_Base_Start+0xd4>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d004      	beq.n	800c0a0 <HAL_TIM_Base_Start+0x70>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a1b      	ldr	r2, [pc, #108]	; (800c108 <HAL_TIM_Base_Start+0xd8>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d115      	bne.n	800c0cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689a      	ldr	r2, [r3, #8]
 800c0a6:	4b19      	ldr	r3, [pc, #100]	; (800c10c <HAL_TIM_Base_Start+0xdc>)
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b06      	cmp	r3, #6
 800c0b0:	d015      	beq.n	800c0de <HAL_TIM_Base_Start+0xae>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0b8:	d011      	beq.n	800c0de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f042 0201 	orr.w	r2, r2, #1
 800c0c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ca:	e008      	b.n	800c0de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f042 0201 	orr.w	r2, r2, #1
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	e000      	b.n	800c0e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	40010000 	.word	0x40010000
 800c0f4:	40000400 	.word	0x40000400
 800c0f8:	40000800 	.word	0x40000800
 800c0fc:	40000c00 	.word	0x40000c00
 800c100:	40010400 	.word	0x40010400
 800c104:	40001800 	.word	0x40001800
 800c108:	40014000 	.word	0x40014000
 800c10c:	00010007 	.word	0x00010007

0800c110 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6a1a      	ldr	r2, [r3, #32]
 800c11e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c122:	4013      	ands	r3, r2
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10f      	bne.n	800c148 <HAL_TIM_Base_Stop+0x38>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6a1a      	ldr	r2, [r3, #32]
 800c12e:	f240 4344 	movw	r3, #1092	; 0x444
 800c132:	4013      	ands	r3, r2
 800c134:	2b00      	cmp	r3, #0
 800c136:	d107      	bne.n	800c148 <HAL_TIM_Base_Stop+0x38>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f022 0201 	bic.w	r2, r2, #1
 800c146:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
	...

0800c160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b01      	cmp	r3, #1
 800c172:	d001      	beq.n	800c178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e054      	b.n	800c222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f042 0201 	orr.w	r2, r2, #1
 800c18e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a26      	ldr	r2, [pc, #152]	; (800c230 <HAL_TIM_Base_Start_IT+0xd0>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d022      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1a2:	d01d      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a22      	ldr	r2, [pc, #136]	; (800c234 <HAL_TIM_Base_Start_IT+0xd4>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d018      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a21      	ldr	r2, [pc, #132]	; (800c238 <HAL_TIM_Base_Start_IT+0xd8>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d013      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a1f      	ldr	r2, [pc, #124]	; (800c23c <HAL_TIM_Base_Start_IT+0xdc>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d00e      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a1e      	ldr	r2, [pc, #120]	; (800c240 <HAL_TIM_Base_Start_IT+0xe0>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d009      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a1c      	ldr	r2, [pc, #112]	; (800c244 <HAL_TIM_Base_Start_IT+0xe4>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d004      	beq.n	800c1e0 <HAL_TIM_Base_Start_IT+0x80>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a1b      	ldr	r2, [pc, #108]	; (800c248 <HAL_TIM_Base_Start_IT+0xe8>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d115      	bne.n	800c20c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689a      	ldr	r2, [r3, #8]
 800c1e6:	4b19      	ldr	r3, [pc, #100]	; (800c24c <HAL_TIM_Base_Start_IT+0xec>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b06      	cmp	r3, #6
 800c1f0:	d015      	beq.n	800c21e <HAL_TIM_Base_Start_IT+0xbe>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f8:	d011      	beq.n	800c21e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f042 0201 	orr.w	r2, r2, #1
 800c208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c20a:	e008      	b.n	800c21e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f042 0201 	orr.w	r2, r2, #1
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	e000      	b.n	800c220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c21e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	40010000 	.word	0x40010000
 800c234:	40000400 	.word	0x40000400
 800c238:	40000800 	.word	0x40000800
 800c23c:	40000c00 	.word	0x40000c00
 800c240:	40010400 	.word	0x40010400
 800c244:	40001800 	.word	0x40001800
 800c248:	40014000 	.word	0x40014000
 800c24c:	00010007 	.word	0x00010007

0800c250 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d109      	bne.n	800c278 <HAL_TIM_OC_Start_IT+0x28>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	bf14      	ite	ne
 800c270:	2301      	movne	r3, #1
 800c272:	2300      	moveq	r3, #0
 800c274:	b2db      	uxtb	r3, r3
 800c276:	e03c      	b.n	800c2f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d109      	bne.n	800c292 <HAL_TIM_OC_Start_IT+0x42>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b01      	cmp	r3, #1
 800c288:	bf14      	ite	ne
 800c28a:	2301      	movne	r3, #1
 800c28c:	2300      	moveq	r3, #0
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	e02f      	b.n	800c2f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2b08      	cmp	r3, #8
 800c296:	d109      	bne.n	800c2ac <HAL_TIM_OC_Start_IT+0x5c>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	bf14      	ite	ne
 800c2a4:	2301      	movne	r3, #1
 800c2a6:	2300      	moveq	r3, #0
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	e022      	b.n	800c2f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	2b0c      	cmp	r3, #12
 800c2b0:	d109      	bne.n	800c2c6 <HAL_TIM_OC_Start_IT+0x76>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	bf14      	ite	ne
 800c2be:	2301      	movne	r3, #1
 800c2c0:	2300      	moveq	r3, #0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	e015      	b.n	800c2f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b10      	cmp	r3, #16
 800c2ca:	d109      	bne.n	800c2e0 <HAL_TIM_OC_Start_IT+0x90>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	bf14      	ite	ne
 800c2d8:	2301      	movne	r3, #1
 800c2da:	2300      	moveq	r3, #0
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	e008      	b.n	800c2f2 <HAL_TIM_OC_Start_IT+0xa2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	bf14      	ite	ne
 800c2ec:	2301      	movne	r3, #1
 800c2ee:	2300      	moveq	r3, #0
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e0ec      	b.n	800c4d4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d104      	bne.n	800c30a <HAL_TIM_OC_Start_IT+0xba>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2202      	movs	r2, #2
 800c304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c308:	e023      	b.n	800c352 <HAL_TIM_OC_Start_IT+0x102>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b04      	cmp	r3, #4
 800c30e:	d104      	bne.n	800c31a <HAL_TIM_OC_Start_IT+0xca>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2202      	movs	r2, #2
 800c314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c318:	e01b      	b.n	800c352 <HAL_TIM_OC_Start_IT+0x102>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	d104      	bne.n	800c32a <HAL_TIM_OC_Start_IT+0xda>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2202      	movs	r2, #2
 800c324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c328:	e013      	b.n	800c352 <HAL_TIM_OC_Start_IT+0x102>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	2b0c      	cmp	r3, #12
 800c32e:	d104      	bne.n	800c33a <HAL_TIM_OC_Start_IT+0xea>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2202      	movs	r2, #2
 800c334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c338:	e00b      	b.n	800c352 <HAL_TIM_OC_Start_IT+0x102>
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b10      	cmp	r3, #16
 800c33e:	d104      	bne.n	800c34a <HAL_TIM_OC_Start_IT+0xfa>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2202      	movs	r2, #2
 800c344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c348:	e003      	b.n	800c352 <HAL_TIM_OC_Start_IT+0x102>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2202      	movs	r2, #2
 800c34e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b0c      	cmp	r3, #12
 800c356:	d841      	bhi.n	800c3dc <HAL_TIM_OC_Start_IT+0x18c>
 800c358:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <HAL_TIM_OC_Start_IT+0x110>)
 800c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35e:	bf00      	nop
 800c360:	0800c395 	.word	0x0800c395
 800c364:	0800c3dd 	.word	0x0800c3dd
 800c368:	0800c3dd 	.word	0x0800c3dd
 800c36c:	0800c3dd 	.word	0x0800c3dd
 800c370:	0800c3a7 	.word	0x0800c3a7
 800c374:	0800c3dd 	.word	0x0800c3dd
 800c378:	0800c3dd 	.word	0x0800c3dd
 800c37c:	0800c3dd 	.word	0x0800c3dd
 800c380:	0800c3b9 	.word	0x0800c3b9
 800c384:	0800c3dd 	.word	0x0800c3dd
 800c388:	0800c3dd 	.word	0x0800c3dd
 800c38c:	0800c3dd 	.word	0x0800c3dd
 800c390:	0800c3cb 	.word	0x0800c3cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f042 0202 	orr.w	r2, r2, #2
 800c3a2:	60da      	str	r2, [r3, #12]
      break;
 800c3a4:	e01d      	b.n	800c3e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68da      	ldr	r2, [r3, #12]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f042 0204 	orr.w	r2, r2, #4
 800c3b4:	60da      	str	r2, [r3, #12]
      break;
 800c3b6:	e014      	b.n	800c3e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68da      	ldr	r2, [r3, #12]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0208 	orr.w	r2, r2, #8
 800c3c6:	60da      	str	r2, [r3, #12]
      break;
 800c3c8:	e00b      	b.n	800c3e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68da      	ldr	r2, [r3, #12]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f042 0210 	orr.w	r2, r2, #16
 800c3d8:	60da      	str	r2, [r3, #12]
      break;
 800c3da:	e002      	b.n	800c3e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	73fb      	strb	r3, [r7, #15]
      break;
 800c3e0:	bf00      	nop
  }

  if (status == HAL_OK)
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d174      	bne.n	800c4d2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 f943 	bl	800d67c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a38      	ldr	r2, [pc, #224]	; (800c4dc <HAL_TIM_OC_Start_IT+0x28c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d013      	beq.n	800c428 <HAL_TIM_OC_Start_IT+0x1d8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a36      	ldr	r2, [pc, #216]	; (800c4e0 <HAL_TIM_OC_Start_IT+0x290>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d00e      	beq.n	800c428 <HAL_TIM_OC_Start_IT+0x1d8>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a35      	ldr	r2, [pc, #212]	; (800c4e4 <HAL_TIM_OC_Start_IT+0x294>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d009      	beq.n	800c428 <HAL_TIM_OC_Start_IT+0x1d8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a33      	ldr	r2, [pc, #204]	; (800c4e8 <HAL_TIM_OC_Start_IT+0x298>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d004      	beq.n	800c428 <HAL_TIM_OC_Start_IT+0x1d8>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a32      	ldr	r2, [pc, #200]	; (800c4ec <HAL_TIM_OC_Start_IT+0x29c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d101      	bne.n	800c42c <HAL_TIM_OC_Start_IT+0x1dc>
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <HAL_TIM_OC_Start_IT+0x1de>
 800c42c:	2300      	movs	r3, #0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d007      	beq.n	800c442 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a25      	ldr	r2, [pc, #148]	; (800c4dc <HAL_TIM_OC_Start_IT+0x28c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d022      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c454:	d01d      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a25      	ldr	r2, [pc, #148]	; (800c4f0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d018      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a23      	ldr	r2, [pc, #140]	; (800c4f4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d013      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a22      	ldr	r2, [pc, #136]	; (800c4f8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d00e      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a19      	ldr	r2, [pc, #100]	; (800c4e0 <HAL_TIM_OC_Start_IT+0x290>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d009      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1e      	ldr	r2, [pc, #120]	; (800c4fc <HAL_TIM_OC_Start_IT+0x2ac>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d004      	beq.n	800c492 <HAL_TIM_OC_Start_IT+0x242>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a15      	ldr	r2, [pc, #84]	; (800c4e4 <HAL_TIM_OC_Start_IT+0x294>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d115      	bne.n	800c4be <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	4b19      	ldr	r3, [pc, #100]	; (800c500 <HAL_TIM_OC_Start_IT+0x2b0>)
 800c49a:	4013      	ands	r3, r2
 800c49c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b06      	cmp	r3, #6
 800c4a2:	d015      	beq.n	800c4d0 <HAL_TIM_OC_Start_IT+0x280>
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4aa:	d011      	beq.n	800c4d0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f042 0201 	orr.w	r2, r2, #1
 800c4ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4bc:	e008      	b.n	800c4d0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f042 0201 	orr.w	r2, r2, #1
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	e000      	b.n	800c4d2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	40010000 	.word	0x40010000
 800c4e0:	40010400 	.word	0x40010400
 800c4e4:	40014000 	.word	0x40014000
 800c4e8:	40014400 	.word	0x40014400
 800c4ec:	40014800 	.word	0x40014800
 800c4f0:	40000400 	.word	0x40000400
 800c4f4:	40000800 	.word	0x40000800
 800c4f8:	40000c00 	.word	0x40000c00
 800c4fc:	40001800 	.word	0x40001800
 800c500:	00010007 	.word	0x00010007

0800c504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e049      	b.n	800c5aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d106      	bne.n	800c530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f841 	bl	800c5b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2202      	movs	r2, #2
 800c534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3304      	adds	r3, #4
 800c540:	4619      	mov	r1, r3
 800c542:	4610      	mov	r0, r2
 800c544:	f000 fc80 	bl	800ce48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
	...

0800c5c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d109      	bne.n	800c5ec <HAL_TIM_PWM_Start+0x24>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	bf14      	ite	ne
 800c5e4:	2301      	movne	r3, #1
 800c5e6:	2300      	moveq	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	e03c      	b.n	800c666 <HAL_TIM_PWM_Start+0x9e>
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	d109      	bne.n	800c606 <HAL_TIM_PWM_Start+0x3e>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	bf14      	ite	ne
 800c5fe:	2301      	movne	r3, #1
 800c600:	2300      	moveq	r3, #0
 800c602:	b2db      	uxtb	r3, r3
 800c604:	e02f      	b.n	800c666 <HAL_TIM_PWM_Start+0x9e>
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b08      	cmp	r3, #8
 800c60a:	d109      	bne.n	800c620 <HAL_TIM_PWM_Start+0x58>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b01      	cmp	r3, #1
 800c616:	bf14      	ite	ne
 800c618:	2301      	movne	r3, #1
 800c61a:	2300      	moveq	r3, #0
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	e022      	b.n	800c666 <HAL_TIM_PWM_Start+0x9e>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b0c      	cmp	r3, #12
 800c624:	d109      	bne.n	800c63a <HAL_TIM_PWM_Start+0x72>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b01      	cmp	r3, #1
 800c630:	bf14      	ite	ne
 800c632:	2301      	movne	r3, #1
 800c634:	2300      	moveq	r3, #0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	e015      	b.n	800c666 <HAL_TIM_PWM_Start+0x9e>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b10      	cmp	r3, #16
 800c63e:	d109      	bne.n	800c654 <HAL_TIM_PWM_Start+0x8c>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b01      	cmp	r3, #1
 800c64a:	bf14      	ite	ne
 800c64c:	2301      	movne	r3, #1
 800c64e:	2300      	moveq	r3, #0
 800c650:	b2db      	uxtb	r3, r3
 800c652:	e008      	b.n	800c666 <HAL_TIM_PWM_Start+0x9e>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e0a1      	b.n	800c7b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d104      	bne.n	800c67e <HAL_TIM_PWM_Start+0xb6>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2202      	movs	r2, #2
 800c678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c67c:	e023      	b.n	800c6c6 <HAL_TIM_PWM_Start+0xfe>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b04      	cmp	r3, #4
 800c682:	d104      	bne.n	800c68e <HAL_TIM_PWM_Start+0xc6>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2202      	movs	r2, #2
 800c688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c68c:	e01b      	b.n	800c6c6 <HAL_TIM_PWM_Start+0xfe>
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b08      	cmp	r3, #8
 800c692:	d104      	bne.n	800c69e <HAL_TIM_PWM_Start+0xd6>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c69c:	e013      	b.n	800c6c6 <HAL_TIM_PWM_Start+0xfe>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b0c      	cmp	r3, #12
 800c6a2:	d104      	bne.n	800c6ae <HAL_TIM_PWM_Start+0xe6>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6ac:	e00b      	b.n	800c6c6 <HAL_TIM_PWM_Start+0xfe>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b10      	cmp	r3, #16
 800c6b2:	d104      	bne.n	800c6be <HAL_TIM_PWM_Start+0xf6>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6bc:	e003      	b.n	800c6c6 <HAL_TIM_PWM_Start+0xfe>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 ffd4 	bl	800d67c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a38      	ldr	r2, [pc, #224]	; (800c7bc <HAL_TIM_PWM_Start+0x1f4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d013      	beq.n	800c706 <HAL_TIM_PWM_Start+0x13e>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a37      	ldr	r2, [pc, #220]	; (800c7c0 <HAL_TIM_PWM_Start+0x1f8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00e      	beq.n	800c706 <HAL_TIM_PWM_Start+0x13e>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a35      	ldr	r2, [pc, #212]	; (800c7c4 <HAL_TIM_PWM_Start+0x1fc>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d009      	beq.n	800c706 <HAL_TIM_PWM_Start+0x13e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a34      	ldr	r2, [pc, #208]	; (800c7c8 <HAL_TIM_PWM_Start+0x200>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d004      	beq.n	800c706 <HAL_TIM_PWM_Start+0x13e>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a32      	ldr	r2, [pc, #200]	; (800c7cc <HAL_TIM_PWM_Start+0x204>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d101      	bne.n	800c70a <HAL_TIM_PWM_Start+0x142>
 800c706:	2301      	movs	r3, #1
 800c708:	e000      	b.n	800c70c <HAL_TIM_PWM_Start+0x144>
 800c70a:	2300      	movs	r3, #0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d007      	beq.n	800c720 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c71e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a25      	ldr	r2, [pc, #148]	; (800c7bc <HAL_TIM_PWM_Start+0x1f4>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d022      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c732:	d01d      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a25      	ldr	r2, [pc, #148]	; (800c7d0 <HAL_TIM_PWM_Start+0x208>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d018      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a24      	ldr	r2, [pc, #144]	; (800c7d4 <HAL_TIM_PWM_Start+0x20c>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d013      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a22      	ldr	r2, [pc, #136]	; (800c7d8 <HAL_TIM_PWM_Start+0x210>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d00e      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a1a      	ldr	r2, [pc, #104]	; (800c7c0 <HAL_TIM_PWM_Start+0x1f8>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d009      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a1e      	ldr	r2, [pc, #120]	; (800c7dc <HAL_TIM_PWM_Start+0x214>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d004      	beq.n	800c770 <HAL_TIM_PWM_Start+0x1a8>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a16      	ldr	r2, [pc, #88]	; (800c7c4 <HAL_TIM_PWM_Start+0x1fc>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d115      	bne.n	800c79c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689a      	ldr	r2, [r3, #8]
 800c776:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <HAL_TIM_PWM_Start+0x218>)
 800c778:	4013      	ands	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b06      	cmp	r3, #6
 800c780:	d015      	beq.n	800c7ae <HAL_TIM_PWM_Start+0x1e6>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c788:	d011      	beq.n	800c7ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f042 0201 	orr.w	r2, r2, #1
 800c798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c79a:	e008      	b.n	800c7ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f042 0201 	orr.w	r2, r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]
 800c7ac:	e000      	b.n	800c7b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	40010000 	.word	0x40010000
 800c7c0:	40010400 	.word	0x40010400
 800c7c4:	40014000 	.word	0x40014000
 800c7c8:	40014400 	.word	0x40014400
 800c7cc:	40014800 	.word	0x40014800
 800c7d0:	40000400 	.word	0x40000400
 800c7d4:	40000800 	.word	0x40000800
 800c7d8:	40000c00 	.word	0x40000c00
 800c7dc:	40001800 	.word	0x40001800
 800c7e0:	00010007 	.word	0x00010007

0800c7e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f003 0302 	and.w	r3, r3, #2
 800c802:	2b00      	cmp	r3, #0
 800c804:	d020      	beq.n	800c848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f003 0302 	and.w	r3, r3, #2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d01b      	beq.n	800c848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f06f 0202 	mvn.w	r2, #2
 800c818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	f003 0303 	and.w	r3, r3, #3
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 faec 	bl	800ce0c <HAL_TIM_IC_CaptureCallback>
 800c834:	e005      	b.n	800c842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7f3 ff24 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 faef 	bl	800ce20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	f003 0304 	and.w	r3, r3, #4
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d020      	beq.n	800c894 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01b      	beq.n	800c894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f06f 0204 	mvn.w	r2, #4
 800c864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2202      	movs	r2, #2
 800c86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fac6 	bl	800ce0c <HAL_TIM_IC_CaptureCallback>
 800c880:	e005      	b.n	800c88e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7f3 fefe 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fac9 	bl	800ce20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	f003 0308 	and.w	r3, r3, #8
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d020      	beq.n	800c8e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f003 0308 	and.w	r3, r3, #8
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01b      	beq.n	800c8e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f06f 0208 	mvn.w	r2, #8
 800c8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2204      	movs	r2, #4
 800c8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	f003 0303 	and.w	r3, r3, #3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 faa0 	bl	800ce0c <HAL_TIM_IC_CaptureCallback>
 800c8cc:	e005      	b.n	800c8da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7f3 fed8 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 faa3 	bl	800ce20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f003 0310 	and.w	r3, r3, #16
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d020      	beq.n	800c92c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f003 0310 	and.w	r3, r3, #16
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01b      	beq.n	800c92c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f06f 0210 	mvn.w	r2, #16
 800c8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2208      	movs	r2, #8
 800c902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa7a 	bl	800ce0c <HAL_TIM_IC_CaptureCallback>
 800c918:	e005      	b.n	800c926 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7f3 feb2 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fa7d 	bl	800ce20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00c      	beq.n	800c950 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d007      	beq.n	800c950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f06f 0201 	mvn.w	r2, #1
 800c948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7f5 fb0c 	bl	8001f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c956:	2b00      	cmp	r3, #0
 800c958:	d104      	bne.n	800c964 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00c      	beq.n	800c97e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d007      	beq.n	800c97e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 ffbb 	bl	800d8f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00c      	beq.n	800c9a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 ffb3 	bl	800d908 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00c      	beq.n	800c9c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d007      	beq.n	800c9c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fa37 	bl	800ce34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	f003 0320 	and.w	r3, r3, #32
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00c      	beq.n	800c9ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f003 0320 	and.w	r3, r3, #32
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d007      	beq.n	800c9ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f06f 0220 	mvn.w	r2, #32
 800c9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 ff7b 	bl	800d8e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9ea:	bf00      	nop
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
	...

0800c9f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d101      	bne.n	800ca12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca0e:	2302      	movs	r3, #2
 800ca10:	e0ff      	b.n	800cc12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b14      	cmp	r3, #20
 800ca1e:	f200 80f0 	bhi.w	800cc02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca22:	a201      	add	r2, pc, #4	; (adr r2, 800ca28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca28:	0800ca7d 	.word	0x0800ca7d
 800ca2c:	0800cc03 	.word	0x0800cc03
 800ca30:	0800cc03 	.word	0x0800cc03
 800ca34:	0800cc03 	.word	0x0800cc03
 800ca38:	0800cabd 	.word	0x0800cabd
 800ca3c:	0800cc03 	.word	0x0800cc03
 800ca40:	0800cc03 	.word	0x0800cc03
 800ca44:	0800cc03 	.word	0x0800cc03
 800ca48:	0800caff 	.word	0x0800caff
 800ca4c:	0800cc03 	.word	0x0800cc03
 800ca50:	0800cc03 	.word	0x0800cc03
 800ca54:	0800cc03 	.word	0x0800cc03
 800ca58:	0800cb3f 	.word	0x0800cb3f
 800ca5c:	0800cc03 	.word	0x0800cc03
 800ca60:	0800cc03 	.word	0x0800cc03
 800ca64:	0800cc03 	.word	0x0800cc03
 800ca68:	0800cb81 	.word	0x0800cb81
 800ca6c:	0800cc03 	.word	0x0800cc03
 800ca70:	0800cc03 	.word	0x0800cc03
 800ca74:	0800cc03 	.word	0x0800cc03
 800ca78:	0800cbc1 	.word	0x0800cbc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 fa86 	bl	800cf94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	699a      	ldr	r2, [r3, #24]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0208 	orr.w	r2, r2, #8
 800ca96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	699a      	ldr	r2, [r3, #24]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f022 0204 	bic.w	r2, r2, #4
 800caa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6999      	ldr	r1, [r3, #24]
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	691a      	ldr	r2, [r3, #16]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	619a      	str	r2, [r3, #24]
      break;
 800caba:	e0a5      	b.n	800cc08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 faf6 	bl	800d0b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	699a      	ldr	r2, [r3, #24]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	699a      	ldr	r2, [r3, #24]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6999      	ldr	r1, [r3, #24]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	021a      	lsls	r2, r3, #8
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	619a      	str	r2, [r3, #24]
      break;
 800cafc:	e084      	b.n	800cc08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68b9      	ldr	r1, [r7, #8]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 fb5f 	bl	800d1c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	69da      	ldr	r2, [r3, #28]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f042 0208 	orr.w	r2, r2, #8
 800cb18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	69da      	ldr	r2, [r3, #28]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f022 0204 	bic.w	r2, r2, #4
 800cb28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	69d9      	ldr	r1, [r3, #28]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	691a      	ldr	r2, [r3, #16]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	61da      	str	r2, [r3, #28]
      break;
 800cb3c:	e064      	b.n	800cc08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68b9      	ldr	r1, [r7, #8]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fbc7 	bl	800d2d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	69da      	ldr	r2, [r3, #28]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	69da      	ldr	r2, [r3, #28]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	69d9      	ldr	r1, [r3, #28]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	021a      	lsls	r2, r3, #8
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	61da      	str	r2, [r3, #28]
      break;
 800cb7e:	e043      	b.n	800cc08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 fc10 	bl	800d3ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f042 0208 	orr.w	r2, r2, #8
 800cb9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f022 0204 	bic.w	r2, r2, #4
 800cbaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	691a      	ldr	r2, [r3, #16]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbbe:	e023      	b.n	800cc08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68b9      	ldr	r1, [r7, #8]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 fc54 	bl	800d474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	021a      	lsls	r2, r3, #8
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc00:	e002      	b.n	800cc08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	75fb      	strb	r3, [r7, #23]
      break;
 800cc06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop

0800cc1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc26:	2300      	movs	r3, #0
 800cc28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d101      	bne.n	800cc38 <HAL_TIM_ConfigClockSource+0x1c>
 800cc34:	2302      	movs	r3, #2
 800cc36:	e0dc      	b.n	800cdf2 <HAL_TIM_ConfigClockSource+0x1d6>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2202      	movs	r2, #2
 800cc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	4b6a      	ldr	r3, [pc, #424]	; (800cdfc <HAL_TIM_ConfigClockSource+0x1e0>)
 800cc54:	4013      	ands	r3, r2
 800cc56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a64      	ldr	r2, [pc, #400]	; (800ce00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	f000 80a9 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc74:	4a62      	ldr	r2, [pc, #392]	; (800ce00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	f200 80ae 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc7c:	4a61      	ldr	r2, [pc, #388]	; (800ce04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	f000 80a1 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc84:	4a5f      	ldr	r2, [pc, #380]	; (800ce04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	f200 80a6 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc8c:	4a5e      	ldr	r2, [pc, #376]	; (800ce08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	f000 8099 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc94:	4a5c      	ldr	r2, [pc, #368]	; (800ce08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	f200 809e 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cca0:	f000 8091 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cca4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cca8:	f200 8096 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb0:	f000 8089 	beq.w	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb8:	f200 808e 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccc0:	d03e      	beq.n	800cd40 <HAL_TIM_ConfigClockSource+0x124>
 800ccc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccc6:	f200 8087 	bhi.w	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccce:	f000 8086 	beq.w	800cdde <HAL_TIM_ConfigClockSource+0x1c2>
 800ccd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd6:	d87f      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd8:	2b70      	cmp	r3, #112	; 0x70
 800ccda:	d01a      	beq.n	800cd12 <HAL_TIM_ConfigClockSource+0xf6>
 800ccdc:	2b70      	cmp	r3, #112	; 0x70
 800ccde:	d87b      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce0:	2b60      	cmp	r3, #96	; 0x60
 800cce2:	d050      	beq.n	800cd86 <HAL_TIM_ConfigClockSource+0x16a>
 800cce4:	2b60      	cmp	r3, #96	; 0x60
 800cce6:	d877      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce8:	2b50      	cmp	r3, #80	; 0x50
 800ccea:	d03c      	beq.n	800cd66 <HAL_TIM_ConfigClockSource+0x14a>
 800ccec:	2b50      	cmp	r3, #80	; 0x50
 800ccee:	d873      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf0:	2b40      	cmp	r3, #64	; 0x40
 800ccf2:	d058      	beq.n	800cda6 <HAL_TIM_ConfigClockSource+0x18a>
 800ccf4:	2b40      	cmp	r3, #64	; 0x40
 800ccf6:	d86f      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf8:	2b30      	cmp	r3, #48	; 0x30
 800ccfa:	d064      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccfc:	2b30      	cmp	r3, #48	; 0x30
 800ccfe:	d86b      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd00:	2b20      	cmp	r3, #32
 800cd02:	d060      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d867      	bhi.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d05c      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd0c:	2b10      	cmp	r3, #16
 800cd0e:	d05a      	beq.n	800cdc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd10:	e062      	b.n	800cdd8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6818      	ldr	r0, [r3, #0]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	6899      	ldr	r1, [r3, #8]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	f000 fc8b 	bl	800d63c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	609a      	str	r2, [r3, #8]
      break;
 800cd3e:	e04f      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6818      	ldr	r0, [r3, #0]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	6899      	ldr	r1, [r3, #8]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	f000 fc74 	bl	800d63c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd62:	609a      	str	r2, [r3, #8]
      break;
 800cd64:	e03c      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	6859      	ldr	r1, [r3, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f000 fbe4 	bl	800d540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2150      	movs	r1, #80	; 0x50
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 fc3e 	bl	800d600 <TIM_ITRx_SetConfig>
      break;
 800cd84:	e02c      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6818      	ldr	r0, [r3, #0]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	6859      	ldr	r1, [r3, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f000 fc03 	bl	800d59e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2160      	movs	r1, #96	; 0x60
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fc2e 	bl	800d600 <TIM_ITRx_SetConfig>
      break;
 800cda4:	e01c      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6818      	ldr	r0, [r3, #0]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	6859      	ldr	r1, [r3, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f000 fbc4 	bl	800d540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2140      	movs	r1, #64	; 0x40
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fc1e 	bl	800d600 <TIM_ITRx_SetConfig>
      break;
 800cdc4:	e00c      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	f000 fc15 	bl	800d600 <TIM_ITRx_SetConfig>
      break;
 800cdd6:	e003      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	73fb      	strb	r3, [r7, #15]
      break;
 800cddc:	e000      	b.n	800cde0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cdde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	ffceff88 	.word	0xffceff88
 800ce00:	00100040 	.word	0x00100040
 800ce04:	00100030 	.word	0x00100030
 800ce08:	00100020 	.word	0x00100020

0800ce0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a46      	ldr	r2, [pc, #280]	; (800cf74 <TIM_Base_SetConfig+0x12c>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d013      	beq.n	800ce88 <TIM_Base_SetConfig+0x40>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce66:	d00f      	beq.n	800ce88 <TIM_Base_SetConfig+0x40>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a43      	ldr	r2, [pc, #268]	; (800cf78 <TIM_Base_SetConfig+0x130>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d00b      	beq.n	800ce88 <TIM_Base_SetConfig+0x40>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a42      	ldr	r2, [pc, #264]	; (800cf7c <TIM_Base_SetConfig+0x134>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d007      	beq.n	800ce88 <TIM_Base_SetConfig+0x40>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a41      	ldr	r2, [pc, #260]	; (800cf80 <TIM_Base_SetConfig+0x138>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d003      	beq.n	800ce88 <TIM_Base_SetConfig+0x40>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a40      	ldr	r2, [pc, #256]	; (800cf84 <TIM_Base_SetConfig+0x13c>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d108      	bne.n	800ce9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a35      	ldr	r2, [pc, #212]	; (800cf74 <TIM_Base_SetConfig+0x12c>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d01f      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cea8:	d01b      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a32      	ldr	r2, [pc, #200]	; (800cf78 <TIM_Base_SetConfig+0x130>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d017      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a31      	ldr	r2, [pc, #196]	; (800cf7c <TIM_Base_SetConfig+0x134>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d013      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a30      	ldr	r2, [pc, #192]	; (800cf80 <TIM_Base_SetConfig+0x138>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d00f      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a2f      	ldr	r2, [pc, #188]	; (800cf84 <TIM_Base_SetConfig+0x13c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d00b      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a2e      	ldr	r2, [pc, #184]	; (800cf88 <TIM_Base_SetConfig+0x140>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d007      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a2d      	ldr	r2, [pc, #180]	; (800cf8c <TIM_Base_SetConfig+0x144>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d003      	beq.n	800cee2 <TIM_Base_SetConfig+0x9a>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a2c      	ldr	r2, [pc, #176]	; (800cf90 <TIM_Base_SetConfig+0x148>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d108      	bne.n	800cef4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a16      	ldr	r2, [pc, #88]	; (800cf74 <TIM_Base_SetConfig+0x12c>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d00f      	beq.n	800cf40 <TIM_Base_SetConfig+0xf8>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a18      	ldr	r2, [pc, #96]	; (800cf84 <TIM_Base_SetConfig+0x13c>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d00b      	beq.n	800cf40 <TIM_Base_SetConfig+0xf8>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a17      	ldr	r2, [pc, #92]	; (800cf88 <TIM_Base_SetConfig+0x140>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d007      	beq.n	800cf40 <TIM_Base_SetConfig+0xf8>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a16      	ldr	r2, [pc, #88]	; (800cf8c <TIM_Base_SetConfig+0x144>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d003      	beq.n	800cf40 <TIM_Base_SetConfig+0xf8>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a15      	ldr	r2, [pc, #84]	; (800cf90 <TIM_Base_SetConfig+0x148>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d103      	bne.n	800cf48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	691a      	ldr	r2, [r3, #16]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	f003 0301 	and.w	r3, r3, #1
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d105      	bne.n	800cf66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	f023 0201 	bic.w	r2, r3, #1
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	611a      	str	r2, [r3, #16]
  }
}
 800cf66:	bf00      	nop
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	40010000 	.word	0x40010000
 800cf78:	40000400 	.word	0x40000400
 800cf7c:	40000800 	.word	0x40000800
 800cf80:	40000c00 	.word	0x40000c00
 800cf84:	40010400 	.word	0x40010400
 800cf88:	40014000 	.word	0x40014000
 800cf8c:	40014400 	.word	0x40014400
 800cf90:	40014800 	.word	0x40014800

0800cf94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a1b      	ldr	r3, [r3, #32]
 800cfa8:	f023 0201 	bic.w	r2, r3, #1
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	4b37      	ldr	r3, [pc, #220]	; (800d09c <TIM_OC1_SetConfig+0x108>)
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f023 0302 	bic.w	r3, r3, #2
 800cfdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a2d      	ldr	r2, [pc, #180]	; (800d0a0 <TIM_OC1_SetConfig+0x10c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d00f      	beq.n	800d010 <TIM_OC1_SetConfig+0x7c>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a2c      	ldr	r2, [pc, #176]	; (800d0a4 <TIM_OC1_SetConfig+0x110>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d00b      	beq.n	800d010 <TIM_OC1_SetConfig+0x7c>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a2b      	ldr	r2, [pc, #172]	; (800d0a8 <TIM_OC1_SetConfig+0x114>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d007      	beq.n	800d010 <TIM_OC1_SetConfig+0x7c>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a2a      	ldr	r2, [pc, #168]	; (800d0ac <TIM_OC1_SetConfig+0x118>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d003      	beq.n	800d010 <TIM_OC1_SetConfig+0x7c>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a29      	ldr	r2, [pc, #164]	; (800d0b0 <TIM_OC1_SetConfig+0x11c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d10c      	bne.n	800d02a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	f023 0308 	bic.w	r3, r3, #8
 800d016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	4313      	orrs	r3, r2
 800d020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f023 0304 	bic.w	r3, r3, #4
 800d028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a1c      	ldr	r2, [pc, #112]	; (800d0a0 <TIM_OC1_SetConfig+0x10c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d00f      	beq.n	800d052 <TIM_OC1_SetConfig+0xbe>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a1b      	ldr	r2, [pc, #108]	; (800d0a4 <TIM_OC1_SetConfig+0x110>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d00b      	beq.n	800d052 <TIM_OC1_SetConfig+0xbe>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a1a      	ldr	r2, [pc, #104]	; (800d0a8 <TIM_OC1_SetConfig+0x114>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d007      	beq.n	800d052 <TIM_OC1_SetConfig+0xbe>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a19      	ldr	r2, [pc, #100]	; (800d0ac <TIM_OC1_SetConfig+0x118>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d003      	beq.n	800d052 <TIM_OC1_SetConfig+0xbe>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a18      	ldr	r2, [pc, #96]	; (800d0b0 <TIM_OC1_SetConfig+0x11c>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d111      	bne.n	800d076 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	4313      	orrs	r3, r2
 800d06a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	693a      	ldr	r2, [r7, #16]
 800d072:	4313      	orrs	r3, r2
 800d074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	693a      	ldr	r2, [r7, #16]
 800d07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	621a      	str	r2, [r3, #32]
}
 800d090:	bf00      	nop
 800d092:	371c      	adds	r7, #28
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	fffeff8f 	.word	0xfffeff8f
 800d0a0:	40010000 	.word	0x40010000
 800d0a4:	40010400 	.word	0x40010400
 800d0a8:	40014000 	.word	0x40014000
 800d0ac:	40014400 	.word	0x40014400
 800d0b0:	40014800 	.word	0x40014800

0800d0b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b087      	sub	sp, #28
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a1b      	ldr	r3, [r3, #32]
 800d0c8:	f023 0210 	bic.w	r2, r3, #16
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	4b34      	ldr	r3, [pc, #208]	; (800d1b0 <TIM_OC2_SetConfig+0xfc>)
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f023 0320 	bic.w	r3, r3, #32
 800d0fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	011b      	lsls	r3, r3, #4
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	4313      	orrs	r3, r2
 800d10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4a29      	ldr	r2, [pc, #164]	; (800d1b4 <TIM_OC2_SetConfig+0x100>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d003      	beq.n	800d11c <TIM_OC2_SetConfig+0x68>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4a28      	ldr	r2, [pc, #160]	; (800d1b8 <TIM_OC2_SetConfig+0x104>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d10d      	bne.n	800d138 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	011b      	lsls	r3, r3, #4
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d136:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a1e      	ldr	r2, [pc, #120]	; (800d1b4 <TIM_OC2_SetConfig+0x100>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d00f      	beq.n	800d160 <TIM_OC2_SetConfig+0xac>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4a1d      	ldr	r2, [pc, #116]	; (800d1b8 <TIM_OC2_SetConfig+0x104>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d00b      	beq.n	800d160 <TIM_OC2_SetConfig+0xac>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a1c      	ldr	r2, [pc, #112]	; (800d1bc <TIM_OC2_SetConfig+0x108>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d007      	beq.n	800d160 <TIM_OC2_SetConfig+0xac>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a1b      	ldr	r2, [pc, #108]	; (800d1c0 <TIM_OC2_SetConfig+0x10c>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d003      	beq.n	800d160 <TIM_OC2_SetConfig+0xac>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a1a      	ldr	r2, [pc, #104]	; (800d1c4 <TIM_OC2_SetConfig+0x110>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d113      	bne.n	800d188 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d16e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	693a      	ldr	r2, [r7, #16]
 800d178:	4313      	orrs	r3, r2
 800d17a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	4313      	orrs	r3, r2
 800d186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	621a      	str	r2, [r3, #32]
}
 800d1a2:	bf00      	nop
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	feff8fff 	.word	0xfeff8fff
 800d1b4:	40010000 	.word	0x40010000
 800d1b8:	40010400 	.word	0x40010400
 800d1bc:	40014000 	.word	0x40014000
 800d1c0:	40014400 	.word	0x40014400
 800d1c4:	40014800 	.word	0x40014800

0800d1c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a1b      	ldr	r3, [r3, #32]
 800d1dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	4b33      	ldr	r3, [pc, #204]	; (800d2c0 <TIM_OC3_SetConfig+0xf8>)
 800d1f4:	4013      	ands	r3, r2
 800d1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f023 0303 	bic.w	r3, r3, #3
 800d1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4313      	orrs	r3, r2
 800d208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	021b      	lsls	r3, r3, #8
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4a28      	ldr	r2, [pc, #160]	; (800d2c4 <TIM_OC3_SetConfig+0xfc>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d003      	beq.n	800d22e <TIM_OC3_SetConfig+0x66>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a27      	ldr	r2, [pc, #156]	; (800d2c8 <TIM_OC3_SetConfig+0x100>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d10d      	bne.n	800d24a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	021b      	lsls	r3, r3, #8
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4313      	orrs	r3, r2
 800d240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a1d      	ldr	r2, [pc, #116]	; (800d2c4 <TIM_OC3_SetConfig+0xfc>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d00f      	beq.n	800d272 <TIM_OC3_SetConfig+0xaa>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a1c      	ldr	r2, [pc, #112]	; (800d2c8 <TIM_OC3_SetConfig+0x100>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d00b      	beq.n	800d272 <TIM_OC3_SetConfig+0xaa>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a1b      	ldr	r2, [pc, #108]	; (800d2cc <TIM_OC3_SetConfig+0x104>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d007      	beq.n	800d272 <TIM_OC3_SetConfig+0xaa>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a1a      	ldr	r2, [pc, #104]	; (800d2d0 <TIM_OC3_SetConfig+0x108>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d003      	beq.n	800d272 <TIM_OC3_SetConfig+0xaa>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a19      	ldr	r2, [pc, #100]	; (800d2d4 <TIM_OC3_SetConfig+0x10c>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d113      	bne.n	800d29a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	011b      	lsls	r3, r3, #4
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	011b      	lsls	r3, r3, #4
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	4313      	orrs	r3, r2
 800d298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	621a      	str	r2, [r3, #32]
}
 800d2b4:	bf00      	nop
 800d2b6:	371c      	adds	r7, #28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	fffeff8f 	.word	0xfffeff8f
 800d2c4:	40010000 	.word	0x40010000
 800d2c8:	40010400 	.word	0x40010400
 800d2cc:	40014000 	.word	0x40014000
 800d2d0:	40014400 	.word	0x40014400
 800d2d4:	40014800 	.word	0x40014800

0800d2d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a1b      	ldr	r3, [r3, #32]
 800d2ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	4b24      	ldr	r3, [pc, #144]	; (800d394 <TIM_OC4_SetConfig+0xbc>)
 800d304:	4013      	ands	r3, r2
 800d306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	021b      	lsls	r3, r3, #8
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	031b      	lsls	r3, r3, #12
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a19      	ldr	r2, [pc, #100]	; (800d398 <TIM_OC4_SetConfig+0xc0>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d00f      	beq.n	800d358 <TIM_OC4_SetConfig+0x80>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a18      	ldr	r2, [pc, #96]	; (800d39c <TIM_OC4_SetConfig+0xc4>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d00b      	beq.n	800d358 <TIM_OC4_SetConfig+0x80>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a17      	ldr	r2, [pc, #92]	; (800d3a0 <TIM_OC4_SetConfig+0xc8>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d007      	beq.n	800d358 <TIM_OC4_SetConfig+0x80>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a16      	ldr	r2, [pc, #88]	; (800d3a4 <TIM_OC4_SetConfig+0xcc>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d003      	beq.n	800d358 <TIM_OC4_SetConfig+0x80>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a15      	ldr	r2, [pc, #84]	; (800d3a8 <TIM_OC4_SetConfig+0xd0>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d109      	bne.n	800d36c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d35e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	019b      	lsls	r3, r3, #6
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	4313      	orrs	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	621a      	str	r2, [r3, #32]
}
 800d386:	bf00      	nop
 800d388:	371c      	adds	r7, #28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	feff8fff 	.word	0xfeff8fff
 800d398:	40010000 	.word	0x40010000
 800d39c:	40010400 	.word	0x40010400
 800d3a0:	40014000 	.word	0x40014000
 800d3a4:	40014400 	.word	0x40014400
 800d3a8:	40014800 	.word	0x40014800

0800d3ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a1b      	ldr	r3, [r3, #32]
 800d3ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a1b      	ldr	r3, [r3, #32]
 800d3c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	4b21      	ldr	r3, [pc, #132]	; (800d45c <TIM_OC5_SetConfig+0xb0>)
 800d3d8:	4013      	ands	r3, r2
 800d3da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d3ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	041b      	lsls	r3, r3, #16
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a18      	ldr	r2, [pc, #96]	; (800d460 <TIM_OC5_SetConfig+0xb4>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d00f      	beq.n	800d422 <TIM_OC5_SetConfig+0x76>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a17      	ldr	r2, [pc, #92]	; (800d464 <TIM_OC5_SetConfig+0xb8>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d00b      	beq.n	800d422 <TIM_OC5_SetConfig+0x76>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a16      	ldr	r2, [pc, #88]	; (800d468 <TIM_OC5_SetConfig+0xbc>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d007      	beq.n	800d422 <TIM_OC5_SetConfig+0x76>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a15      	ldr	r2, [pc, #84]	; (800d46c <TIM_OC5_SetConfig+0xc0>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d003      	beq.n	800d422 <TIM_OC5_SetConfig+0x76>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a14      	ldr	r2, [pc, #80]	; (800d470 <TIM_OC5_SetConfig+0xc4>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d109      	bne.n	800d436 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d428:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	4313      	orrs	r3, r2
 800d434:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	621a      	str	r2, [r3, #32]
}
 800d450:	bf00      	nop
 800d452:	371c      	adds	r7, #28
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	fffeff8f 	.word	0xfffeff8f
 800d460:	40010000 	.word	0x40010000
 800d464:	40010400 	.word	0x40010400
 800d468:	40014000 	.word	0x40014000
 800d46c:	40014400 	.word	0x40014400
 800d470:	40014800 	.word	0x40014800

0800d474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d474:	b480      	push	{r7}
 800d476:	b087      	sub	sp, #28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	4b22      	ldr	r3, [pc, #136]	; (800d528 <TIM_OC6_SetConfig+0xb4>)
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	021b      	lsls	r3, r3, #8
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	051b      	lsls	r3, r3, #20
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	4a19      	ldr	r2, [pc, #100]	; (800d52c <TIM_OC6_SetConfig+0xb8>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d00f      	beq.n	800d4ec <TIM_OC6_SetConfig+0x78>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4a18      	ldr	r2, [pc, #96]	; (800d530 <TIM_OC6_SetConfig+0xbc>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d00b      	beq.n	800d4ec <TIM_OC6_SetConfig+0x78>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a17      	ldr	r2, [pc, #92]	; (800d534 <TIM_OC6_SetConfig+0xc0>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d007      	beq.n	800d4ec <TIM_OC6_SetConfig+0x78>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a16      	ldr	r2, [pc, #88]	; (800d538 <TIM_OC6_SetConfig+0xc4>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d003      	beq.n	800d4ec <TIM_OC6_SetConfig+0x78>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a15      	ldr	r2, [pc, #84]	; (800d53c <TIM_OC6_SetConfig+0xc8>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d109      	bne.n	800d500 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d4f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	029b      	lsls	r3, r3, #10
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	621a      	str	r2, [r3, #32]
}
 800d51a:	bf00      	nop
 800d51c:	371c      	adds	r7, #28
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	feff8fff 	.word	0xfeff8fff
 800d52c:	40010000 	.word	0x40010000
 800d530:	40010400 	.word	0x40010400
 800d534:	40014000 	.word	0x40014000
 800d538:	40014400 	.word	0x40014400
 800d53c:	40014800 	.word	0x40014800

0800d540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	f023 0201 	bic.w	r2, r3, #1
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	699b      	ldr	r3, [r3, #24]
 800d562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d56a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	4313      	orrs	r3, r2
 800d574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f023 030a 	bic.w	r3, r3, #10
 800d57c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d57e:	697a      	ldr	r2, [r7, #20]
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	4313      	orrs	r3, r2
 800d584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	621a      	str	r2, [r3, #32]
}
 800d592:	bf00      	nop
 800d594:	371c      	adds	r7, #28
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b087      	sub	sp, #28
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	60f8      	str	r0, [r7, #12]
 800d5a6:	60b9      	str	r1, [r7, #8]
 800d5a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6a1b      	ldr	r3, [r3, #32]
 800d5b4:	f023 0210 	bic.w	r2, r3, #16
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	699b      	ldr	r3, [r3, #24]
 800d5c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d5c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	031b      	lsls	r3, r3, #12
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	697a      	ldr	r2, [r7, #20]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	693a      	ldr	r2, [r7, #16]
 800d5ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	621a      	str	r2, [r3, #32]
}
 800d5f2:	bf00      	nop
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
	...

0800d600 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	4b09      	ldr	r3, [pc, #36]	; (800d638 <TIM_ITRx_SetConfig+0x38>)
 800d614:	4013      	ands	r3, r2
 800d616:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f043 0307 	orr.w	r3, r3, #7
 800d622:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	609a      	str	r2, [r3, #8]
}
 800d62a:	bf00      	nop
 800d62c:	3714      	adds	r7, #20
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	ffcfff8f 	.word	0xffcfff8f

0800d63c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b087      	sub	sp, #28
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	021a      	lsls	r2, r3, #8
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	431a      	orrs	r2, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4313      	orrs	r3, r2
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	4313      	orrs	r3, r2
 800d668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	697a      	ldr	r2, [r7, #20]
 800d66e:	609a      	str	r2, [r3, #8]
}
 800d670:	bf00      	nop
 800d672:	371c      	adds	r7, #28
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b087      	sub	sp, #28
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	f003 031f 	and.w	r3, r3, #31
 800d68e:	2201      	movs	r2, #1
 800d690:	fa02 f303 	lsl.w	r3, r2, r3
 800d694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6a1a      	ldr	r2, [r3, #32]
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	43db      	mvns	r3, r3
 800d69e:	401a      	ands	r2, r3
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6a1a      	ldr	r2, [r3, #32]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	f003 031f 	and.w	r3, r3, #31
 800d6ae:	6879      	ldr	r1, [r7, #4]
 800d6b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	621a      	str	r2, [r3, #32]
}
 800d6ba:	bf00      	nop
 800d6bc:	371c      	adds	r7, #28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d101      	bne.n	800d6e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d6dc:	2302      	movs	r3, #2
 800d6de:	e06d      	b.n	800d7bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a30      	ldr	r2, [pc, #192]	; (800d7c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d004      	beq.n	800d714 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a2f      	ldr	r2, [pc, #188]	; (800d7cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d108      	bne.n	800d726 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d71a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	4313      	orrs	r3, r2
 800d724:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d72c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	4313      	orrs	r3, r2
 800d736:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a20      	ldr	r2, [pc, #128]	; (800d7c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d022      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d752:	d01d      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a1d      	ldr	r2, [pc, #116]	; (800d7d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d018      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a1c      	ldr	r2, [pc, #112]	; (800d7d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d013      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a1a      	ldr	r2, [pc, #104]	; (800d7d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d00e      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a15      	ldr	r2, [pc, #84]	; (800d7cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d009      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a16      	ldr	r2, [pc, #88]	; (800d7dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d004      	beq.n	800d790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a15      	ldr	r2, [pc, #84]	; (800d7e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d10c      	bne.n	800d7aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	40010000 	.word	0x40010000
 800d7cc:	40010400 	.word	0x40010400
 800d7d0:	40000400 	.word	0x40000400
 800d7d4:	40000800 	.word	0x40000800
 800d7d8:	40000c00 	.word	0x40000c00
 800d7dc:	40001800 	.word	0x40001800
 800d7e0:	40014000 	.word	0x40014000

0800d7e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d101      	bne.n	800d800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	e065      	b.n	800d8cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	4313      	orrs	r3, r2
 800d814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	4313      	orrs	r3, r2
 800d85a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d866:	4313      	orrs	r3, r2
 800d868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	041b      	lsls	r3, r3, #16
 800d876:	4313      	orrs	r3, r2
 800d878:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a16      	ldr	r2, [pc, #88]	; (800d8d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d004      	beq.n	800d88e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a14      	ldr	r2, [pc, #80]	; (800d8dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d115      	bne.n	800d8ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d898:	051b      	lsls	r3, r3, #20
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	69db      	ldr	r3, [r3, #28]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68fa      	ldr	r2, [r7, #12]
 800d8c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	40010000 	.word	0x40010000
 800d8dc:	40010400 	.word	0x40010400

0800d8e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	e042      	b.n	800d9b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7f4 fee3 	bl	800270c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2224      	movs	r2, #36	; 0x24
 800d94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f022 0201 	bic.w	r2, r2, #1
 800d95c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f001 fa44 	bl	800edf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fcd9 	bl	800e324 <UART_SetConfig>
 800d972:	4603      	mov	r3, r0
 800d974:	2b01      	cmp	r3, #1
 800d976:	d101      	bne.n	800d97c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e01b      	b.n	800d9b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	685a      	ldr	r2, [r3, #4]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d98a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	689a      	ldr	r2, [r3, #8]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d99a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f042 0201 	orr.w	r2, r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f001 fac3 	bl	800ef38 <UART_CheckIdleState>
 800d9b2:	4603      	mov	r3, r0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08a      	sub	sp, #40	; 0x28
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	603b      	str	r3, [r7, #0]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9d2:	2b20      	cmp	r3, #32
 800d9d4:	d17b      	bne.n	800dace <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <HAL_UART_Transmit+0x26>
 800d9dc:	88fb      	ldrh	r3, [r7, #6]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e074      	b.n	800dad0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2221      	movs	r2, #33	; 0x21
 800d9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9f6:	f7f5 f9c3 	bl	8002d80 <HAL_GetTick>
 800d9fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	88fa      	ldrh	r2, [r7, #6]
 800da00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	88fa      	ldrh	r2, [r7, #6]
 800da08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da14:	d108      	bne.n	800da28 <HAL_UART_Transmit+0x6c>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d104      	bne.n	800da28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800da1e:	2300      	movs	r3, #0
 800da20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	61bb      	str	r3, [r7, #24]
 800da26:	e003      	b.n	800da30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da30:	e030      	b.n	800da94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2200      	movs	r2, #0
 800da3a:	2180      	movs	r1, #128	; 0x80
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f001 fb25 	bl	800f08c <UART_WaitOnFlagUntilTimeout>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d005      	beq.n	800da54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2220      	movs	r2, #32
 800da4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e03d      	b.n	800dad0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10b      	bne.n	800da72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	461a      	mov	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	3302      	adds	r3, #2
 800da6e:	61bb      	str	r3, [r7, #24]
 800da70:	e007      	b.n	800da82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	781a      	ldrb	r2, [r3, #0]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	3301      	adds	r3, #1
 800da80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da88:	b29b      	uxth	r3, r3
 800da8a:	3b01      	subs	r3, #1
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1c8      	bne.n	800da32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2200      	movs	r2, #0
 800daa8:	2140      	movs	r1, #64	; 0x40
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f001 faee 	bl	800f08c <UART_WaitOnFlagUntilTimeout>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2220      	movs	r2, #32
 800daba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dabe:	2303      	movs	r3, #3
 800dac0:	e006      	b.n	800dad0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2220      	movs	r2, #32
 800dac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	e000      	b.n	800dad0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dace:	2302      	movs	r3, #2
  }
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3720      	adds	r7, #32
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b08a      	sub	sp, #40	; 0x28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	4613      	mov	r3, r2
 800dae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daec:	2b20      	cmp	r3, #32
 800daee:	d137      	bne.n	800db60 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <HAL_UART_Receive_IT+0x24>
 800daf6:	88fb      	ldrh	r3, [r7, #6]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e030      	b.n	800db62 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2200      	movs	r2, #0
 800db04:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a18      	ldr	r2, [pc, #96]	; (800db6c <HAL_UART_Receive_IT+0x94>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d01f      	beq.n	800db50 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d018      	beq.n	800db50 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	e853 3f00 	ldrex	r3, [r3]
 800db2a:	613b      	str	r3, [r7, #16]
   return(result);
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	461a      	mov	r2, r3
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	623b      	str	r3, [r7, #32]
 800db3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db40:	69f9      	ldr	r1, [r7, #28]
 800db42:	6a3a      	ldr	r2, [r7, #32]
 800db44:	e841 2300 	strex	r3, r2, [r1]
 800db48:	61bb      	str	r3, [r7, #24]
   return(result);
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1e6      	bne.n	800db1e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800db50:	88fb      	ldrh	r3, [r7, #6]
 800db52:	461a      	mov	r2, r3
 800db54:	68b9      	ldr	r1, [r7, #8]
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f001 fb06 	bl	800f168 <UART_Start_Receive_IT>
 800db5c:	4603      	mov	r3, r0
 800db5e:	e000      	b.n	800db62 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800db60:	2302      	movs	r3, #2
  }
}
 800db62:	4618      	mov	r0, r3
 800db64:	3728      	adds	r7, #40	; 0x28
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	58000c00 	.word	0x58000c00

0800db70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b0ba      	sub	sp, #232	; 0xe8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800db96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800db9a:	f640 030f 	movw	r3, #2063	; 0x80f
 800db9e:	4013      	ands	r3, r2
 800dba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d11b      	bne.n	800dbe4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb0:	f003 0320 	and.w	r3, r3, #32
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d015      	beq.n	800dbe4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbbc:	f003 0320 	and.w	r3, r3, #32
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d105      	bne.n	800dbd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dbc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d009      	beq.n	800dbe4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f000 8377 	beq.w	800e2c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	4798      	blx	r3
      }
      return;
 800dbe2:	e371      	b.n	800e2c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dbe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 8123 	beq.w	800de34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dbee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dbf2:	4b8d      	ldr	r3, [pc, #564]	; (800de28 <HAL_UART_IRQHandler+0x2b8>)
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d106      	bne.n	800dc08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dbfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dbfe:	4b8b      	ldr	r3, [pc, #556]	; (800de2c <HAL_UART_IRQHandler+0x2bc>)
 800dc00:	4013      	ands	r3, r2
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 8116 	beq.w	800de34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc0c:	f003 0301 	and.w	r3, r3, #1
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d011      	beq.n	800dc38 <HAL_UART_IRQHandler+0xc8>
 800dc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00b      	beq.n	800dc38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2201      	movs	r2, #1
 800dc26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc2e:	f043 0201 	orr.w	r2, r3, #1
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc3c:	f003 0302 	and.w	r3, r3, #2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d011      	beq.n	800dc68 <HAL_UART_IRQHandler+0xf8>
 800dc44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc48:	f003 0301 	and.w	r3, r3, #1
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00b      	beq.n	800dc68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2202      	movs	r2, #2
 800dc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc5e:	f043 0204 	orr.w	r2, r3, #4
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc6c:	f003 0304 	and.w	r3, r3, #4
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d011      	beq.n	800dc98 <HAL_UART_IRQHandler+0x128>
 800dc74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc78:	f003 0301 	and.w	r3, r3, #1
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2204      	movs	r2, #4
 800dc86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc8e:	f043 0202 	orr.w	r2, r3, #2
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc9c:	f003 0308 	and.w	r3, r3, #8
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d017      	beq.n	800dcd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dca8:	f003 0320 	and.w	r3, r3, #32
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d105      	bne.n	800dcbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dcb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dcb4:	4b5c      	ldr	r3, [pc, #368]	; (800de28 <HAL_UART_IRQHandler+0x2b8>)
 800dcb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00b      	beq.n	800dcd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2208      	movs	r2, #8
 800dcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcca:	f043 0208 	orr.w	r2, r3, #8
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d012      	beq.n	800dd06 <HAL_UART_IRQHandler+0x196>
 800dce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00c      	beq.n	800dd06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcfc:	f043 0220 	orr.w	r2, r3, #32
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f000 82dd 	beq.w	800e2cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd16:	f003 0320 	and.w	r3, r3, #32
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d013      	beq.n	800dd46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd22:	f003 0320 	and.w	r3, r3, #32
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d105      	bne.n	800dd36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d007      	beq.n	800dd46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d003      	beq.n	800dd46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd5a:	2b40      	cmp	r3, #64	; 0x40
 800dd5c:	d005      	beq.n	800dd6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dd62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d054      	beq.n	800de14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f001 fb1e 	bl	800f3ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd7a:	2b40      	cmp	r3, #64	; 0x40
 800dd7c:	d146      	bne.n	800de0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3308      	adds	r3, #8
 800dd84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd8c:	e853 3f00 	ldrex	r3, [r3]
 800dd90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dd94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3308      	adds	r3, #8
 800dda6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ddaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ddae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ddb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ddba:	e841 2300 	strex	r3, r2, [r1]
 800ddbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ddc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1d9      	bne.n	800dd7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d017      	beq.n	800de04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddda:	4a15      	ldr	r2, [pc, #84]	; (800de30 <HAL_UART_IRQHandler+0x2c0>)
 800dddc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7f8 f9d7 	bl	8006198 <HAL_DMA_Abort_IT>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d019      	beq.n	800de24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ddfe:	4610      	mov	r0, r2
 800de00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de02:	e00f      	b.n	800de24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fa77 	bl	800e2f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de0a:	e00b      	b.n	800de24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fa73 	bl	800e2f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de12:	e007      	b.n	800de24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fa6f 	bl	800e2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800de22:	e253      	b.n	800e2cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de24:	bf00      	nop
    return;
 800de26:	e251      	b.n	800e2cc <HAL_UART_IRQHandler+0x75c>
 800de28:	10000001 	.word	0x10000001
 800de2c:	04000120 	.word	0x04000120
 800de30:	0800f479 	.word	0x0800f479

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de38:	2b01      	cmp	r3, #1
 800de3a:	f040 81e7 	bne.w	800e20c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de42:	f003 0310 	and.w	r3, r3, #16
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 81e0 	beq.w	800e20c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de50:	f003 0310 	and.w	r3, r3, #16
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 81d9 	beq.w	800e20c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2210      	movs	r2, #16
 800de60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de6c:	2b40      	cmp	r3, #64	; 0x40
 800de6e:	f040 8151 	bne.w	800e114 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a96      	ldr	r2, [pc, #600]	; (800e0d4 <HAL_UART_IRQHandler+0x564>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d068      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a93      	ldr	r2, [pc, #588]	; (800e0d8 <HAL_UART_IRQHandler+0x568>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d061      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a91      	ldr	r2, [pc, #580]	; (800e0dc <HAL_UART_IRQHandler+0x56c>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d05a      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a8e      	ldr	r2, [pc, #568]	; (800e0e0 <HAL_UART_IRQHandler+0x570>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d053      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a8c      	ldr	r2, [pc, #560]	; (800e0e4 <HAL_UART_IRQHandler+0x574>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d04c      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a89      	ldr	r2, [pc, #548]	; (800e0e8 <HAL_UART_IRQHandler+0x578>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d045      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a87      	ldr	r2, [pc, #540]	; (800e0ec <HAL_UART_IRQHandler+0x57c>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d03e      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a84      	ldr	r2, [pc, #528]	; (800e0f0 <HAL_UART_IRQHandler+0x580>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d037      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a82      	ldr	r2, [pc, #520]	; (800e0f4 <HAL_UART_IRQHandler+0x584>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d030      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a7f      	ldr	r2, [pc, #508]	; (800e0f8 <HAL_UART_IRQHandler+0x588>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d029      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a7d      	ldr	r2, [pc, #500]	; (800e0fc <HAL_UART_IRQHandler+0x58c>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d022      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a7a      	ldr	r2, [pc, #488]	; (800e100 <HAL_UART_IRQHandler+0x590>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d01b      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a78      	ldr	r2, [pc, #480]	; (800e104 <HAL_UART_IRQHandler+0x594>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d014      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a75      	ldr	r2, [pc, #468]	; (800e108 <HAL_UART_IRQHandler+0x598>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d00d      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a73      	ldr	r2, [pc, #460]	; (800e10c <HAL_UART_IRQHandler+0x59c>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d006      	beq.n	800df52 <HAL_UART_IRQHandler+0x3e2>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a70      	ldr	r2, [pc, #448]	; (800e110 <HAL_UART_IRQHandler+0x5a0>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d106      	bne.n	800df60 <HAL_UART_IRQHandler+0x3f0>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	e005      	b.n	800df6c <HAL_UART_IRQHandler+0x3fc>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800df70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800df74:	2b00      	cmp	r3, #0
 800df76:	f000 81ab 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800df84:	429a      	cmp	r2, r3
 800df86:	f080 81a3 	bcs.w	800e2d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800df90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfa0:	f000 8087 	beq.w	800e0b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dfb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dfd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dfda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dfe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1da      	bne.n	800dfa4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	3308      	adds	r3, #8
 800dff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dff8:	e853 3f00 	ldrex	r3, [r3]
 800dffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e000:	f023 0301 	bic.w	r3, r3, #1
 800e004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3308      	adds	r3, #8
 800e00e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e01a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e01e:	e841 2300 	strex	r3, r2, [r1]
 800e022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1e1      	bne.n	800dfee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3308      	adds	r3, #8
 800e030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e034:	e853 3f00 	ldrex	r3, [r3]
 800e038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3308      	adds	r3, #8
 800e04a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e04e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e05c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e3      	bne.n	800e02a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e078:	e853 3f00 	ldrex	r3, [r3]
 800e07c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e07e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e080:	f023 0310 	bic.w	r3, r3, #16
 800e084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	461a      	mov	r2, r3
 800e08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e092:	65bb      	str	r3, [r7, #88]	; 0x58
 800e094:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e09a:	e841 2300 	strex	r3, r2, [r1]
 800e09e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e4      	bne.n	800e070 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7f7 fd55 	bl	8005b5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f91d 	bl	800e30c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0d2:	e0fd      	b.n	800e2d0 <HAL_UART_IRQHandler+0x760>
 800e0d4:	40020010 	.word	0x40020010
 800e0d8:	40020028 	.word	0x40020028
 800e0dc:	40020040 	.word	0x40020040
 800e0e0:	40020058 	.word	0x40020058
 800e0e4:	40020070 	.word	0x40020070
 800e0e8:	40020088 	.word	0x40020088
 800e0ec:	400200a0 	.word	0x400200a0
 800e0f0:	400200b8 	.word	0x400200b8
 800e0f4:	40020410 	.word	0x40020410
 800e0f8:	40020428 	.word	0x40020428
 800e0fc:	40020440 	.word	0x40020440
 800e100:	40020458 	.word	0x40020458
 800e104:	40020470 	.word	0x40020470
 800e108:	40020488 	.word	0x40020488
 800e10c:	400204a0 	.word	0x400204a0
 800e110:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e120:	b29b      	uxth	r3, r3
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e12e:	b29b      	uxth	r3, r3
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 80cf 	beq.w	800e2d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e136:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f000 80ca 	beq.w	800e2d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	e853 3f00 	ldrex	r3, [r3]
 800e14c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	461a      	mov	r2, r3
 800e15e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e162:	647b      	str	r3, [r7, #68]	; 0x44
 800e164:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e16a:	e841 2300 	strex	r3, r2, [r1]
 800e16e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1e4      	bne.n	800e140 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	e853 3f00 	ldrex	r3, [r3]
 800e184:	623b      	str	r3, [r7, #32]
   return(result);
 800e186:	6a3a      	ldr	r2, [r7, #32]
 800e188:	4b55      	ldr	r3, [pc, #340]	; (800e2e0 <HAL_UART_IRQHandler+0x770>)
 800e18a:	4013      	ands	r3, r2
 800e18c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3308      	adds	r3, #8
 800e196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e19a:	633a      	str	r2, [r7, #48]	; 0x30
 800e19c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1a2:	e841 2300 	strex	r3, r2, [r1]
 800e1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d1e3      	bne.n	800e176 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2220      	movs	r2, #32
 800e1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	e853 3f00 	ldrex	r3, [r3]
 800e1ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f023 0310 	bic.w	r3, r3, #16
 800e1d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e1e4:	61fb      	str	r3, [r7, #28]
 800e1e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e8:	69b9      	ldr	r1, [r7, #24]
 800e1ea:	69fa      	ldr	r2, [r7, #28]
 800e1ec:	e841 2300 	strex	r3, r2, [r1]
 800e1f0:	617b      	str	r3, [r7, #20]
   return(result);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1e4      	bne.n	800e1c2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e1fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 f881 	bl	800e30c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e20a:	e063      	b.n	800e2d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00e      	beq.n	800e236 <HAL_UART_IRQHandler+0x6c6>
 800e218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e21c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e220:	2b00      	cmp	r3, #0
 800e222:	d008      	beq.n	800e236 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e22c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f001 fe80 	bl	800ff34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e234:	e051      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d014      	beq.n	800e26c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d105      	bne.n	800e25a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e24e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e256:	2b00      	cmp	r3, #0
 800e258:	d008      	beq.n	800e26c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d03a      	beq.n	800e2d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	4798      	blx	r3
    }
    return;
 800e26a:	e035      	b.n	800e2d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e274:	2b00      	cmp	r3, #0
 800e276:	d009      	beq.n	800e28c <HAL_UART_IRQHandler+0x71c>
 800e278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e280:	2b00      	cmp	r3, #0
 800e282:	d003      	beq.n	800e28c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f001 f90d 	bl	800f4a4 <UART_EndTransmit_IT>
    return;
 800e28a:	e026      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d009      	beq.n	800e2ac <HAL_UART_IRQHandler+0x73c>
 800e298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e29c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f001 fe59 	bl	800ff5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2aa:	e016      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d010      	beq.n	800e2da <HAL_UART_IRQHandler+0x76a>
 800e2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	da0c      	bge.n	800e2da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f001 fe41 	bl	800ff48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2c6:	e008      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
      return;
 800e2c8:	bf00      	nop
 800e2ca:	e006      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
    return;
 800e2cc:	bf00      	nop
 800e2ce:	e004      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
      return;
 800e2d0:	bf00      	nop
 800e2d2:	e002      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
      return;
 800e2d4:	bf00      	nop
 800e2d6:	e000      	b.n	800e2da <HAL_UART_IRQHandler+0x76a>
    return;
 800e2d8:	bf00      	nop
  }
}
 800e2da:	37e8      	adds	r7, #232	; 0xe8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	effffffe 	.word	0xeffffffe

0800e2e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e328:	b092      	sub	sp, #72	; 0x48
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	689a      	ldr	r2, [r3, #8]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	431a      	orrs	r2, r3
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	431a      	orrs	r2, r3
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	4313      	orrs	r3, r2
 800e34a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4bbe      	ldr	r3, [pc, #760]	; (800e64c <UART_SetConfig+0x328>)
 800e354:	4013      	ands	r3, r2
 800e356:	697a      	ldr	r2, [r7, #20]
 800e358:	6812      	ldr	r2, [r2, #0]
 800e35a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e35c:	430b      	orrs	r3, r1
 800e35e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	430a      	orrs	r2, r1
 800e374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	699b      	ldr	r3, [r3, #24]
 800e37a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4ab3      	ldr	r2, [pc, #716]	; (800e650 <UART_SetConfig+0x32c>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d004      	beq.n	800e390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e38c:	4313      	orrs	r3, r2
 800e38e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	689a      	ldr	r2, [r3, #8]
 800e396:	4baf      	ldr	r3, [pc, #700]	; (800e654 <UART_SetConfig+0x330>)
 800e398:	4013      	ands	r3, r2
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	6812      	ldr	r2, [r2, #0]
 800e39e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3a0:	430b      	orrs	r3, r1
 800e3a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3aa:	f023 010f 	bic.w	r1, r3, #15
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4aa6      	ldr	r2, [pc, #664]	; (800e658 <UART_SetConfig+0x334>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d177      	bne.n	800e4b4 <UART_SetConfig+0x190>
 800e3c4:	4ba5      	ldr	r3, [pc, #660]	; (800e65c <UART_SetConfig+0x338>)
 800e3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3cc:	2b28      	cmp	r3, #40	; 0x28
 800e3ce:	d86d      	bhi.n	800e4ac <UART_SetConfig+0x188>
 800e3d0:	a201      	add	r2, pc, #4	; (adr r2, 800e3d8 <UART_SetConfig+0xb4>)
 800e3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d6:	bf00      	nop
 800e3d8:	0800e47d 	.word	0x0800e47d
 800e3dc:	0800e4ad 	.word	0x0800e4ad
 800e3e0:	0800e4ad 	.word	0x0800e4ad
 800e3e4:	0800e4ad 	.word	0x0800e4ad
 800e3e8:	0800e4ad 	.word	0x0800e4ad
 800e3ec:	0800e4ad 	.word	0x0800e4ad
 800e3f0:	0800e4ad 	.word	0x0800e4ad
 800e3f4:	0800e4ad 	.word	0x0800e4ad
 800e3f8:	0800e485 	.word	0x0800e485
 800e3fc:	0800e4ad 	.word	0x0800e4ad
 800e400:	0800e4ad 	.word	0x0800e4ad
 800e404:	0800e4ad 	.word	0x0800e4ad
 800e408:	0800e4ad 	.word	0x0800e4ad
 800e40c:	0800e4ad 	.word	0x0800e4ad
 800e410:	0800e4ad 	.word	0x0800e4ad
 800e414:	0800e4ad 	.word	0x0800e4ad
 800e418:	0800e48d 	.word	0x0800e48d
 800e41c:	0800e4ad 	.word	0x0800e4ad
 800e420:	0800e4ad 	.word	0x0800e4ad
 800e424:	0800e4ad 	.word	0x0800e4ad
 800e428:	0800e4ad 	.word	0x0800e4ad
 800e42c:	0800e4ad 	.word	0x0800e4ad
 800e430:	0800e4ad 	.word	0x0800e4ad
 800e434:	0800e4ad 	.word	0x0800e4ad
 800e438:	0800e495 	.word	0x0800e495
 800e43c:	0800e4ad 	.word	0x0800e4ad
 800e440:	0800e4ad 	.word	0x0800e4ad
 800e444:	0800e4ad 	.word	0x0800e4ad
 800e448:	0800e4ad 	.word	0x0800e4ad
 800e44c:	0800e4ad 	.word	0x0800e4ad
 800e450:	0800e4ad 	.word	0x0800e4ad
 800e454:	0800e4ad 	.word	0x0800e4ad
 800e458:	0800e49d 	.word	0x0800e49d
 800e45c:	0800e4ad 	.word	0x0800e4ad
 800e460:	0800e4ad 	.word	0x0800e4ad
 800e464:	0800e4ad 	.word	0x0800e4ad
 800e468:	0800e4ad 	.word	0x0800e4ad
 800e46c:	0800e4ad 	.word	0x0800e4ad
 800e470:	0800e4ad 	.word	0x0800e4ad
 800e474:	0800e4ad 	.word	0x0800e4ad
 800e478:	0800e4a5 	.word	0x0800e4a5
 800e47c:	2301      	movs	r3, #1
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e222      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e484:	2304      	movs	r3, #4
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e21e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e48c:	2308      	movs	r3, #8
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e21a      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e494:	2310      	movs	r3, #16
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e216      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e49c:	2320      	movs	r3, #32
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e212      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e4a4:	2340      	movs	r3, #64	; 0x40
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e20e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e4ac:	2380      	movs	r3, #128	; 0x80
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e20a      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a69      	ldr	r2, [pc, #420]	; (800e660 <UART_SetConfig+0x33c>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d130      	bne.n	800e520 <UART_SetConfig+0x1fc>
 800e4be:	4b67      	ldr	r3, [pc, #412]	; (800e65c <UART_SetConfig+0x338>)
 800e4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4c2:	f003 0307 	and.w	r3, r3, #7
 800e4c6:	2b05      	cmp	r3, #5
 800e4c8:	d826      	bhi.n	800e518 <UART_SetConfig+0x1f4>
 800e4ca:	a201      	add	r2, pc, #4	; (adr r2, 800e4d0 <UART_SetConfig+0x1ac>)
 800e4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d0:	0800e4e9 	.word	0x0800e4e9
 800e4d4:	0800e4f1 	.word	0x0800e4f1
 800e4d8:	0800e4f9 	.word	0x0800e4f9
 800e4dc:	0800e501 	.word	0x0800e501
 800e4e0:	0800e509 	.word	0x0800e509
 800e4e4:	0800e511 	.word	0x0800e511
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e1ec      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e1e8      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e4f8:	2308      	movs	r3, #8
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e1e4      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e500:	2310      	movs	r3, #16
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e1e0      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e508:	2320      	movs	r3, #32
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e1dc      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e510:	2340      	movs	r3, #64	; 0x40
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e1d8      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e518:	2380      	movs	r3, #128	; 0x80
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e1d4      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a4f      	ldr	r2, [pc, #316]	; (800e664 <UART_SetConfig+0x340>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d130      	bne.n	800e58c <UART_SetConfig+0x268>
 800e52a:	4b4c      	ldr	r3, [pc, #304]	; (800e65c <UART_SetConfig+0x338>)
 800e52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e52e:	f003 0307 	and.w	r3, r3, #7
 800e532:	2b05      	cmp	r3, #5
 800e534:	d826      	bhi.n	800e584 <UART_SetConfig+0x260>
 800e536:	a201      	add	r2, pc, #4	; (adr r2, 800e53c <UART_SetConfig+0x218>)
 800e538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53c:	0800e555 	.word	0x0800e555
 800e540:	0800e55d 	.word	0x0800e55d
 800e544:	0800e565 	.word	0x0800e565
 800e548:	0800e56d 	.word	0x0800e56d
 800e54c:	0800e575 	.word	0x0800e575
 800e550:	0800e57d 	.word	0x0800e57d
 800e554:	2300      	movs	r3, #0
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e1b6      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e55c:	2304      	movs	r3, #4
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e1b2      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e564:	2308      	movs	r3, #8
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e1ae      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e56c:	2310      	movs	r3, #16
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e1aa      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e574:	2320      	movs	r3, #32
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e1a6      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e57c:	2340      	movs	r3, #64	; 0x40
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e1a2      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e584:	2380      	movs	r3, #128	; 0x80
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e19e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a35      	ldr	r2, [pc, #212]	; (800e668 <UART_SetConfig+0x344>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d130      	bne.n	800e5f8 <UART_SetConfig+0x2d4>
 800e596:	4b31      	ldr	r3, [pc, #196]	; (800e65c <UART_SetConfig+0x338>)
 800e598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e59a:	f003 0307 	and.w	r3, r3, #7
 800e59e:	2b05      	cmp	r3, #5
 800e5a0:	d826      	bhi.n	800e5f0 <UART_SetConfig+0x2cc>
 800e5a2:	a201      	add	r2, pc, #4	; (adr r2, 800e5a8 <UART_SetConfig+0x284>)
 800e5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a8:	0800e5c1 	.word	0x0800e5c1
 800e5ac:	0800e5c9 	.word	0x0800e5c9
 800e5b0:	0800e5d1 	.word	0x0800e5d1
 800e5b4:	0800e5d9 	.word	0x0800e5d9
 800e5b8:	0800e5e1 	.word	0x0800e5e1
 800e5bc:	0800e5e9 	.word	0x0800e5e9
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e180      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5c8:	2304      	movs	r3, #4
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e17c      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5d0:	2308      	movs	r3, #8
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e178      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5d8:	2310      	movs	r3, #16
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e174      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5e0:	2320      	movs	r3, #32
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e170      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5e8:	2340      	movs	r3, #64	; 0x40
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e16c      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5f0:	2380      	movs	r3, #128	; 0x80
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e168      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a1b      	ldr	r2, [pc, #108]	; (800e66c <UART_SetConfig+0x348>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d142      	bne.n	800e688 <UART_SetConfig+0x364>
 800e602:	4b16      	ldr	r3, [pc, #88]	; (800e65c <UART_SetConfig+0x338>)
 800e604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e606:	f003 0307 	and.w	r3, r3, #7
 800e60a:	2b05      	cmp	r3, #5
 800e60c:	d838      	bhi.n	800e680 <UART_SetConfig+0x35c>
 800e60e:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <UART_SetConfig+0x2f0>)
 800e610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e614:	0800e62d 	.word	0x0800e62d
 800e618:	0800e635 	.word	0x0800e635
 800e61c:	0800e63d 	.word	0x0800e63d
 800e620:	0800e645 	.word	0x0800e645
 800e624:	0800e671 	.word	0x0800e671
 800e628:	0800e679 	.word	0x0800e679
 800e62c:	2300      	movs	r3, #0
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e14a      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e634:	2304      	movs	r3, #4
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e146      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e63c:	2308      	movs	r3, #8
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e142      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e644:	2310      	movs	r3, #16
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e13e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e64c:	cfff69f3 	.word	0xcfff69f3
 800e650:	58000c00 	.word	0x58000c00
 800e654:	11fff4ff 	.word	0x11fff4ff
 800e658:	40011000 	.word	0x40011000
 800e65c:	58024400 	.word	0x58024400
 800e660:	40004400 	.word	0x40004400
 800e664:	40004800 	.word	0x40004800
 800e668:	40004c00 	.word	0x40004c00
 800e66c:	40005000 	.word	0x40005000
 800e670:	2320      	movs	r3, #32
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e128      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e678:	2340      	movs	r3, #64	; 0x40
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e124      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e680:	2380      	movs	r3, #128	; 0x80
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e120      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4acb      	ldr	r2, [pc, #812]	; (800e9bc <UART_SetConfig+0x698>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d176      	bne.n	800e780 <UART_SetConfig+0x45c>
 800e692:	4bcb      	ldr	r3, [pc, #812]	; (800e9c0 <UART_SetConfig+0x69c>)
 800e694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e69a:	2b28      	cmp	r3, #40	; 0x28
 800e69c:	d86c      	bhi.n	800e778 <UART_SetConfig+0x454>
 800e69e:	a201      	add	r2, pc, #4	; (adr r2, 800e6a4 <UART_SetConfig+0x380>)
 800e6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a4:	0800e749 	.word	0x0800e749
 800e6a8:	0800e779 	.word	0x0800e779
 800e6ac:	0800e779 	.word	0x0800e779
 800e6b0:	0800e779 	.word	0x0800e779
 800e6b4:	0800e779 	.word	0x0800e779
 800e6b8:	0800e779 	.word	0x0800e779
 800e6bc:	0800e779 	.word	0x0800e779
 800e6c0:	0800e779 	.word	0x0800e779
 800e6c4:	0800e751 	.word	0x0800e751
 800e6c8:	0800e779 	.word	0x0800e779
 800e6cc:	0800e779 	.word	0x0800e779
 800e6d0:	0800e779 	.word	0x0800e779
 800e6d4:	0800e779 	.word	0x0800e779
 800e6d8:	0800e779 	.word	0x0800e779
 800e6dc:	0800e779 	.word	0x0800e779
 800e6e0:	0800e779 	.word	0x0800e779
 800e6e4:	0800e759 	.word	0x0800e759
 800e6e8:	0800e779 	.word	0x0800e779
 800e6ec:	0800e779 	.word	0x0800e779
 800e6f0:	0800e779 	.word	0x0800e779
 800e6f4:	0800e779 	.word	0x0800e779
 800e6f8:	0800e779 	.word	0x0800e779
 800e6fc:	0800e779 	.word	0x0800e779
 800e700:	0800e779 	.word	0x0800e779
 800e704:	0800e761 	.word	0x0800e761
 800e708:	0800e779 	.word	0x0800e779
 800e70c:	0800e779 	.word	0x0800e779
 800e710:	0800e779 	.word	0x0800e779
 800e714:	0800e779 	.word	0x0800e779
 800e718:	0800e779 	.word	0x0800e779
 800e71c:	0800e779 	.word	0x0800e779
 800e720:	0800e779 	.word	0x0800e779
 800e724:	0800e769 	.word	0x0800e769
 800e728:	0800e779 	.word	0x0800e779
 800e72c:	0800e779 	.word	0x0800e779
 800e730:	0800e779 	.word	0x0800e779
 800e734:	0800e779 	.word	0x0800e779
 800e738:	0800e779 	.word	0x0800e779
 800e73c:	0800e779 	.word	0x0800e779
 800e740:	0800e779 	.word	0x0800e779
 800e744:	0800e771 	.word	0x0800e771
 800e748:	2301      	movs	r3, #1
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e0bc      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e750:	2304      	movs	r3, #4
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e0b8      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e758:	2308      	movs	r3, #8
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e0b4      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e760:	2310      	movs	r3, #16
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e0b0      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e768:	2320      	movs	r3, #32
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e0ac      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e770:	2340      	movs	r3, #64	; 0x40
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e0a8      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e778:	2380      	movs	r3, #128	; 0x80
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e0a4      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a8f      	ldr	r2, [pc, #572]	; (800e9c4 <UART_SetConfig+0x6a0>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d130      	bne.n	800e7ec <UART_SetConfig+0x4c8>
 800e78a:	4b8d      	ldr	r3, [pc, #564]	; (800e9c0 <UART_SetConfig+0x69c>)
 800e78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78e:	f003 0307 	and.w	r3, r3, #7
 800e792:	2b05      	cmp	r3, #5
 800e794:	d826      	bhi.n	800e7e4 <UART_SetConfig+0x4c0>
 800e796:	a201      	add	r2, pc, #4	; (adr r2, 800e79c <UART_SetConfig+0x478>)
 800e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79c:	0800e7b5 	.word	0x0800e7b5
 800e7a0:	0800e7bd 	.word	0x0800e7bd
 800e7a4:	0800e7c5 	.word	0x0800e7c5
 800e7a8:	0800e7cd 	.word	0x0800e7cd
 800e7ac:	0800e7d5 	.word	0x0800e7d5
 800e7b0:	0800e7dd 	.word	0x0800e7dd
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e086      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7bc:	2304      	movs	r3, #4
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e082      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7c4:	2308      	movs	r3, #8
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e07e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7cc:	2310      	movs	r3, #16
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e07a      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7d4:	2320      	movs	r3, #32
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e076      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7dc:	2340      	movs	r3, #64	; 0x40
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e072      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7e4:	2380      	movs	r3, #128	; 0x80
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e06e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a75      	ldr	r2, [pc, #468]	; (800e9c8 <UART_SetConfig+0x6a4>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d130      	bne.n	800e858 <UART_SetConfig+0x534>
 800e7f6:	4b72      	ldr	r3, [pc, #456]	; (800e9c0 <UART_SetConfig+0x69c>)
 800e7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7fa:	f003 0307 	and.w	r3, r3, #7
 800e7fe:	2b05      	cmp	r3, #5
 800e800:	d826      	bhi.n	800e850 <UART_SetConfig+0x52c>
 800e802:	a201      	add	r2, pc, #4	; (adr r2, 800e808 <UART_SetConfig+0x4e4>)
 800e804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e808:	0800e821 	.word	0x0800e821
 800e80c:	0800e829 	.word	0x0800e829
 800e810:	0800e831 	.word	0x0800e831
 800e814:	0800e839 	.word	0x0800e839
 800e818:	0800e841 	.word	0x0800e841
 800e81c:	0800e849 	.word	0x0800e849
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e826:	e050      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e828:	2304      	movs	r3, #4
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82e:	e04c      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e830:	2308      	movs	r3, #8
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e836:	e048      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e838:	2310      	movs	r3, #16
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83e:	e044      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e840:	2320      	movs	r3, #32
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e846:	e040      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e848:	2340      	movs	r3, #64	; 0x40
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e03c      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e850:	2380      	movs	r3, #128	; 0x80
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e038      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a5b      	ldr	r2, [pc, #364]	; (800e9cc <UART_SetConfig+0x6a8>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d130      	bne.n	800e8c4 <UART_SetConfig+0x5a0>
 800e862:	4b57      	ldr	r3, [pc, #348]	; (800e9c0 <UART_SetConfig+0x69c>)
 800e864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	2b05      	cmp	r3, #5
 800e86c:	d826      	bhi.n	800e8bc <UART_SetConfig+0x598>
 800e86e:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <UART_SetConfig+0x550>)
 800e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e874:	0800e88d 	.word	0x0800e88d
 800e878:	0800e895 	.word	0x0800e895
 800e87c:	0800e89d 	.word	0x0800e89d
 800e880:	0800e8a5 	.word	0x0800e8a5
 800e884:	0800e8ad 	.word	0x0800e8ad
 800e888:	0800e8b5 	.word	0x0800e8b5
 800e88c:	2302      	movs	r3, #2
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e892:	e01a      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e894:	2304      	movs	r3, #4
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89a:	e016      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e89c:	2308      	movs	r3, #8
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a2:	e012      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e8a4:	2310      	movs	r3, #16
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8aa:	e00e      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e8ac:	2320      	movs	r3, #32
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e00a      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e8b4:	2340      	movs	r3, #64	; 0x40
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e006      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e8bc:	2380      	movs	r3, #128	; 0x80
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e002      	b.n	800e8ca <UART_SetConfig+0x5a6>
 800e8c4:	2380      	movs	r3, #128	; 0x80
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4a3f      	ldr	r2, [pc, #252]	; (800e9cc <UART_SetConfig+0x6a8>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	f040 80f8 	bne.w	800eac6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8da:	2b20      	cmp	r3, #32
 800e8dc:	dc46      	bgt.n	800e96c <UART_SetConfig+0x648>
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	f2c0 8082 	blt.w	800e9e8 <UART_SetConfig+0x6c4>
 800e8e4:	3b02      	subs	r3, #2
 800e8e6:	2b1e      	cmp	r3, #30
 800e8e8:	d87e      	bhi.n	800e9e8 <UART_SetConfig+0x6c4>
 800e8ea:	a201      	add	r2, pc, #4	; (adr r2, 800e8f0 <UART_SetConfig+0x5cc>)
 800e8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f0:	0800e973 	.word	0x0800e973
 800e8f4:	0800e9e9 	.word	0x0800e9e9
 800e8f8:	0800e97b 	.word	0x0800e97b
 800e8fc:	0800e9e9 	.word	0x0800e9e9
 800e900:	0800e9e9 	.word	0x0800e9e9
 800e904:	0800e9e9 	.word	0x0800e9e9
 800e908:	0800e98b 	.word	0x0800e98b
 800e90c:	0800e9e9 	.word	0x0800e9e9
 800e910:	0800e9e9 	.word	0x0800e9e9
 800e914:	0800e9e9 	.word	0x0800e9e9
 800e918:	0800e9e9 	.word	0x0800e9e9
 800e91c:	0800e9e9 	.word	0x0800e9e9
 800e920:	0800e9e9 	.word	0x0800e9e9
 800e924:	0800e9e9 	.word	0x0800e9e9
 800e928:	0800e99b 	.word	0x0800e99b
 800e92c:	0800e9e9 	.word	0x0800e9e9
 800e930:	0800e9e9 	.word	0x0800e9e9
 800e934:	0800e9e9 	.word	0x0800e9e9
 800e938:	0800e9e9 	.word	0x0800e9e9
 800e93c:	0800e9e9 	.word	0x0800e9e9
 800e940:	0800e9e9 	.word	0x0800e9e9
 800e944:	0800e9e9 	.word	0x0800e9e9
 800e948:	0800e9e9 	.word	0x0800e9e9
 800e94c:	0800e9e9 	.word	0x0800e9e9
 800e950:	0800e9e9 	.word	0x0800e9e9
 800e954:	0800e9e9 	.word	0x0800e9e9
 800e958:	0800e9e9 	.word	0x0800e9e9
 800e95c:	0800e9e9 	.word	0x0800e9e9
 800e960:	0800e9e9 	.word	0x0800e9e9
 800e964:	0800e9e9 	.word	0x0800e9e9
 800e968:	0800e9db 	.word	0x0800e9db
 800e96c:	2b40      	cmp	r3, #64	; 0x40
 800e96e:	d037      	beq.n	800e9e0 <UART_SetConfig+0x6bc>
 800e970:	e03a      	b.n	800e9e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e972:	f7fc fc53 	bl	800b21c <HAL_RCCEx_GetD3PCLK1Freq>
 800e976:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e978:	e03c      	b.n	800e9f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e97a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fc fc62 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e988:	e034      	b.n	800e9f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e98a:	f107 0318 	add.w	r3, r7, #24
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fc fdae 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e998:	e02c      	b.n	800e9f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e99a:	4b09      	ldr	r3, [pc, #36]	; (800e9c0 <UART_SetConfig+0x69c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f003 0320 	and.w	r3, r3, #32
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d016      	beq.n	800e9d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9a6:	4b06      	ldr	r3, [pc, #24]	; (800e9c0 <UART_SetConfig+0x69c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	08db      	lsrs	r3, r3, #3
 800e9ac:	f003 0303 	and.w	r3, r3, #3
 800e9b0:	4a07      	ldr	r2, [pc, #28]	; (800e9d0 <UART_SetConfig+0x6ac>)
 800e9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9b8:	e01c      	b.n	800e9f4 <UART_SetConfig+0x6d0>
 800e9ba:	bf00      	nop
 800e9bc:	40011400 	.word	0x40011400
 800e9c0:	58024400 	.word	0x58024400
 800e9c4:	40007800 	.word	0x40007800
 800e9c8:	40007c00 	.word	0x40007c00
 800e9cc:	58000c00 	.word	0x58000c00
 800e9d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e9d4:	4b9d      	ldr	r3, [pc, #628]	; (800ec4c <UART_SetConfig+0x928>)
 800e9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d8:	e00c      	b.n	800e9f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9da:	4b9d      	ldr	r3, [pc, #628]	; (800ec50 <UART_SetConfig+0x92c>)
 800e9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9de:	e009      	b.n	800e9f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e6:	e005      	b.n	800e9f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f000 81de 	beq.w	800edb8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea00:	4a94      	ldr	r2, [pc, #592]	; (800ec54 <UART_SetConfig+0x930>)
 800ea02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea06:	461a      	mov	r2, r3
 800ea08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea0e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	685a      	ldr	r2, [r3, #4]
 800ea14:	4613      	mov	r3, r2
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	4413      	add	r3, r2
 800ea1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d305      	bcc.n	800ea2c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d903      	bls.n	800ea34 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea32:	e1c1      	b.n	800edb8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea36:	2200      	movs	r2, #0
 800ea38:	60bb      	str	r3, [r7, #8]
 800ea3a:	60fa      	str	r2, [r7, #12]
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea40:	4a84      	ldr	r2, [pc, #528]	; (800ec54 <UART_SetConfig+0x930>)
 800ea42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	2200      	movs	r2, #0
 800ea4a:	603b      	str	r3, [r7, #0]
 800ea4c:	607a      	str	r2, [r7, #4]
 800ea4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea56:	f7f1 fc93 	bl	8000380 <__aeabi_uldivmod>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4610      	mov	r0, r2
 800ea60:	4619      	mov	r1, r3
 800ea62:	f04f 0200 	mov.w	r2, #0
 800ea66:	f04f 0300 	mov.w	r3, #0
 800ea6a:	020b      	lsls	r3, r1, #8
 800ea6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea70:	0202      	lsls	r2, r0, #8
 800ea72:	6979      	ldr	r1, [r7, #20]
 800ea74:	6849      	ldr	r1, [r1, #4]
 800ea76:	0849      	lsrs	r1, r1, #1
 800ea78:	2000      	movs	r0, #0
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	eb12 0804 	adds.w	r8, r2, r4
 800ea82:	eb43 0905 	adc.w	r9, r3, r5
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	469a      	mov	sl, r3
 800ea8e:	4693      	mov	fp, r2
 800ea90:	4652      	mov	r2, sl
 800ea92:	465b      	mov	r3, fp
 800ea94:	4640      	mov	r0, r8
 800ea96:	4649      	mov	r1, r9
 800ea98:	f7f1 fc72 	bl	8000380 <__aeabi_uldivmod>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eaaa:	d308      	bcc.n	800eabe <UART_SetConfig+0x79a>
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eab2:	d204      	bcs.n	800eabe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaba:	60da      	str	r2, [r3, #12]
 800eabc:	e17c      	b.n	800edb8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eac4:	e178      	b.n	800edb8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	69db      	ldr	r3, [r3, #28]
 800eaca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eace:	f040 80c5 	bne.w	800ec5c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ead2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ead6:	2b20      	cmp	r3, #32
 800ead8:	dc48      	bgt.n	800eb6c <UART_SetConfig+0x848>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	db7b      	blt.n	800ebd6 <UART_SetConfig+0x8b2>
 800eade:	2b20      	cmp	r3, #32
 800eae0:	d879      	bhi.n	800ebd6 <UART_SetConfig+0x8b2>
 800eae2:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <UART_SetConfig+0x7c4>)
 800eae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae8:	0800eb73 	.word	0x0800eb73
 800eaec:	0800eb7b 	.word	0x0800eb7b
 800eaf0:	0800ebd7 	.word	0x0800ebd7
 800eaf4:	0800ebd7 	.word	0x0800ebd7
 800eaf8:	0800eb83 	.word	0x0800eb83
 800eafc:	0800ebd7 	.word	0x0800ebd7
 800eb00:	0800ebd7 	.word	0x0800ebd7
 800eb04:	0800ebd7 	.word	0x0800ebd7
 800eb08:	0800eb93 	.word	0x0800eb93
 800eb0c:	0800ebd7 	.word	0x0800ebd7
 800eb10:	0800ebd7 	.word	0x0800ebd7
 800eb14:	0800ebd7 	.word	0x0800ebd7
 800eb18:	0800ebd7 	.word	0x0800ebd7
 800eb1c:	0800ebd7 	.word	0x0800ebd7
 800eb20:	0800ebd7 	.word	0x0800ebd7
 800eb24:	0800ebd7 	.word	0x0800ebd7
 800eb28:	0800eba3 	.word	0x0800eba3
 800eb2c:	0800ebd7 	.word	0x0800ebd7
 800eb30:	0800ebd7 	.word	0x0800ebd7
 800eb34:	0800ebd7 	.word	0x0800ebd7
 800eb38:	0800ebd7 	.word	0x0800ebd7
 800eb3c:	0800ebd7 	.word	0x0800ebd7
 800eb40:	0800ebd7 	.word	0x0800ebd7
 800eb44:	0800ebd7 	.word	0x0800ebd7
 800eb48:	0800ebd7 	.word	0x0800ebd7
 800eb4c:	0800ebd7 	.word	0x0800ebd7
 800eb50:	0800ebd7 	.word	0x0800ebd7
 800eb54:	0800ebd7 	.word	0x0800ebd7
 800eb58:	0800ebd7 	.word	0x0800ebd7
 800eb5c:	0800ebd7 	.word	0x0800ebd7
 800eb60:	0800ebd7 	.word	0x0800ebd7
 800eb64:	0800ebd7 	.word	0x0800ebd7
 800eb68:	0800ebc9 	.word	0x0800ebc9
 800eb6c:	2b40      	cmp	r3, #64	; 0x40
 800eb6e:	d02e      	beq.n	800ebce <UART_SetConfig+0x8aa>
 800eb70:	e031      	b.n	800ebd6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb72:	f7fa fb5b 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800eb76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb78:	e033      	b.n	800ebe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb7a:	f7fa fb6d 	bl	8009258 <HAL_RCC_GetPCLK2Freq>
 800eb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb80:	e02f      	b.n	800ebe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fc fb5e 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb90:	e027      	b.n	800ebe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb92:	f107 0318 	add.w	r3, r7, #24
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fc fcaa 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba0:	e01f      	b.n	800ebe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eba2:	4b2d      	ldr	r3, [pc, #180]	; (800ec58 <UART_SetConfig+0x934>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f003 0320 	and.w	r3, r3, #32
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d009      	beq.n	800ebc2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebae:	4b2a      	ldr	r3, [pc, #168]	; (800ec58 <UART_SetConfig+0x934>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	08db      	lsrs	r3, r3, #3
 800ebb4:	f003 0303 	and.w	r3, r3, #3
 800ebb8:	4a24      	ldr	r2, [pc, #144]	; (800ec4c <UART_SetConfig+0x928>)
 800ebba:	fa22 f303 	lsr.w	r3, r2, r3
 800ebbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebc0:	e00f      	b.n	800ebe2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ebc2:	4b22      	ldr	r3, [pc, #136]	; (800ec4c <UART_SetConfig+0x928>)
 800ebc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebc6:	e00c      	b.n	800ebe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebc8:	4b21      	ldr	r3, [pc, #132]	; (800ec50 <UART_SetConfig+0x92c>)
 800ebca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebcc:	e009      	b.n	800ebe2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e005      	b.n	800ebe2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 80e7 	beq.w	800edb8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebee:	4a19      	ldr	r2, [pc, #100]	; (800ec54 <UART_SetConfig+0x930>)
 800ebf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebfc:	005a      	lsls	r2, r3, #1
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	085b      	lsrs	r3, r3, #1
 800ec04:	441a      	add	r2, r3
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec12:	2b0f      	cmp	r3, #15
 800ec14:	d916      	bls.n	800ec44 <UART_SetConfig+0x920>
 800ec16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec1c:	d212      	bcs.n	800ec44 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	f023 030f 	bic.w	r3, r3, #15
 800ec26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	085b      	lsrs	r3, r3, #1
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	f003 0307 	and.w	r3, r3, #7
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec36:	4313      	orrs	r3, r2
 800ec38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec40:	60da      	str	r2, [r3, #12]
 800ec42:	e0b9      	b.n	800edb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec4a:	e0b5      	b.n	800edb8 <UART_SetConfig+0xa94>
 800ec4c:	03d09000 	.word	0x03d09000
 800ec50:	003d0900 	.word	0x003d0900
 800ec54:	08014c7c 	.word	0x08014c7c
 800ec58:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec60:	2b20      	cmp	r3, #32
 800ec62:	dc49      	bgt.n	800ecf8 <UART_SetConfig+0x9d4>
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	db7c      	blt.n	800ed62 <UART_SetConfig+0xa3e>
 800ec68:	2b20      	cmp	r3, #32
 800ec6a:	d87a      	bhi.n	800ed62 <UART_SetConfig+0xa3e>
 800ec6c:	a201      	add	r2, pc, #4	; (adr r2, 800ec74 <UART_SetConfig+0x950>)
 800ec6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec72:	bf00      	nop
 800ec74:	0800ecff 	.word	0x0800ecff
 800ec78:	0800ed07 	.word	0x0800ed07
 800ec7c:	0800ed63 	.word	0x0800ed63
 800ec80:	0800ed63 	.word	0x0800ed63
 800ec84:	0800ed0f 	.word	0x0800ed0f
 800ec88:	0800ed63 	.word	0x0800ed63
 800ec8c:	0800ed63 	.word	0x0800ed63
 800ec90:	0800ed63 	.word	0x0800ed63
 800ec94:	0800ed1f 	.word	0x0800ed1f
 800ec98:	0800ed63 	.word	0x0800ed63
 800ec9c:	0800ed63 	.word	0x0800ed63
 800eca0:	0800ed63 	.word	0x0800ed63
 800eca4:	0800ed63 	.word	0x0800ed63
 800eca8:	0800ed63 	.word	0x0800ed63
 800ecac:	0800ed63 	.word	0x0800ed63
 800ecb0:	0800ed63 	.word	0x0800ed63
 800ecb4:	0800ed2f 	.word	0x0800ed2f
 800ecb8:	0800ed63 	.word	0x0800ed63
 800ecbc:	0800ed63 	.word	0x0800ed63
 800ecc0:	0800ed63 	.word	0x0800ed63
 800ecc4:	0800ed63 	.word	0x0800ed63
 800ecc8:	0800ed63 	.word	0x0800ed63
 800eccc:	0800ed63 	.word	0x0800ed63
 800ecd0:	0800ed63 	.word	0x0800ed63
 800ecd4:	0800ed63 	.word	0x0800ed63
 800ecd8:	0800ed63 	.word	0x0800ed63
 800ecdc:	0800ed63 	.word	0x0800ed63
 800ece0:	0800ed63 	.word	0x0800ed63
 800ece4:	0800ed63 	.word	0x0800ed63
 800ece8:	0800ed63 	.word	0x0800ed63
 800ecec:	0800ed63 	.word	0x0800ed63
 800ecf0:	0800ed63 	.word	0x0800ed63
 800ecf4:	0800ed55 	.word	0x0800ed55
 800ecf8:	2b40      	cmp	r3, #64	; 0x40
 800ecfa:	d02e      	beq.n	800ed5a <UART_SetConfig+0xa36>
 800ecfc:	e031      	b.n	800ed62 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ecfe:	f7fa fa95 	bl	800922c <HAL_RCC_GetPCLK1Freq>
 800ed02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed04:	e033      	b.n	800ed6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed06:	f7fa faa7 	bl	8009258 <HAL_RCC_GetPCLK2Freq>
 800ed0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed0c:	e02f      	b.n	800ed6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fc fa98 	bl	800b248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed1c:	e027      	b.n	800ed6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed1e:	f107 0318 	add.w	r3, r7, #24
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fc fbe4 	bl	800b4f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed2c:	e01f      	b.n	800ed6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed2e:	4b2d      	ldr	r3, [pc, #180]	; (800ede4 <UART_SetConfig+0xac0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f003 0320 	and.w	r3, r3, #32
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d009      	beq.n	800ed4e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed3a:	4b2a      	ldr	r3, [pc, #168]	; (800ede4 <UART_SetConfig+0xac0>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	08db      	lsrs	r3, r3, #3
 800ed40:	f003 0303 	and.w	r3, r3, #3
 800ed44:	4a28      	ldr	r2, [pc, #160]	; (800ede8 <UART_SetConfig+0xac4>)
 800ed46:	fa22 f303 	lsr.w	r3, r2, r3
 800ed4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed4c:	e00f      	b.n	800ed6e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ed4e:	4b26      	ldr	r3, [pc, #152]	; (800ede8 <UART_SetConfig+0xac4>)
 800ed50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed52:	e00c      	b.n	800ed6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed54:	4b25      	ldr	r3, [pc, #148]	; (800edec <UART_SetConfig+0xac8>)
 800ed56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed58:	e009      	b.n	800ed6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed60:	e005      	b.n	800ed6e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ed62:	2300      	movs	r3, #0
 800ed64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed66:	2301      	movs	r3, #1
 800ed68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed6c:	bf00      	nop
    }

    if (pclk != 0U)
 800ed6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d021      	beq.n	800edb8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	4a1d      	ldr	r2, [pc, #116]	; (800edf0 <UART_SetConfig+0xacc>)
 800ed7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	085b      	lsrs	r3, r3, #1
 800ed8c:	441a      	add	r2, r3
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	2b0f      	cmp	r3, #15
 800ed9c:	d909      	bls.n	800edb2 <UART_SetConfig+0xa8e>
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eda4:	d205      	bcs.n	800edb2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60da      	str	r2, [r3, #12]
 800edb0:	e002      	b.n	800edb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800edb2:	2301      	movs	r3, #1
 800edb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	2201      	movs	r2, #1
 800edbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2200      	movs	r2, #0
 800edcc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	2200      	movs	r2, #0
 800edd2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800edd4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3748      	adds	r7, #72	; 0x48
 800eddc:	46bd      	mov	sp, r7
 800edde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ede2:	bf00      	nop
 800ede4:	58024400 	.word	0x58024400
 800ede8:	03d09000 	.word	0x03d09000
 800edec:	003d0900 	.word	0x003d0900
 800edf0:	08014c7c 	.word	0x08014c7c

0800edf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee00:	f003 0308 	and.w	r3, r3, #8
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d00a      	beq.n	800ee1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00a      	beq.n	800ee40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee44:	f003 0302 	and.w	r3, r3, #2
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00a      	beq.n	800ee62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	430a      	orrs	r2, r1
 800ee60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee66:	f003 0304 	and.w	r3, r3, #4
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00a      	beq.n	800ee84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	430a      	orrs	r2, r1
 800ee82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee88:	f003 0310 	and.w	r3, r3, #16
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00a      	beq.n	800eea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	430a      	orrs	r2, r1
 800eea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeaa:	f003 0320 	and.w	r3, r3, #32
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00a      	beq.n	800eec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	430a      	orrs	r2, r1
 800eec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d01a      	beq.n	800ef0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	430a      	orrs	r2, r1
 800eee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eef2:	d10a      	bne.n	800ef0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	430a      	orrs	r2, r1
 800ef08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d00a      	beq.n	800ef2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	430a      	orrs	r2, r1
 800ef2a:	605a      	str	r2, [r3, #4]
  }
}
 800ef2c:	bf00      	nop
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b098      	sub	sp, #96	; 0x60
 800ef3c:	af02      	add	r7, sp, #8
 800ef3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef48:	f7f3 ff1a 	bl	8002d80 <HAL_GetTick>
 800ef4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f003 0308 	and.w	r3, r3, #8
 800ef58:	2b08      	cmp	r3, #8
 800ef5a:	d12f      	bne.n	800efbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef64:	2200      	movs	r2, #0
 800ef66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f88e 	bl	800f08c <UART_WaitOnFlagUntilTimeout>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d022      	beq.n	800efbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	e853 3f00 	ldrex	r3, [r3]
 800ef82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	461a      	mov	r2, r3
 800ef92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef94:	647b      	str	r3, [r7, #68]	; 0x44
 800ef96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef9c:	e841 2300 	strex	r3, r2, [r1]
 800efa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1e6      	bne.n	800ef76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2220      	movs	r2, #32
 800efac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efb8:	2303      	movs	r3, #3
 800efba:	e063      	b.n	800f084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f003 0304 	and.w	r3, r3, #4
 800efc6:	2b04      	cmp	r3, #4
 800efc8:	d149      	bne.n	800f05e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd2:	2200      	movs	r2, #0
 800efd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 f857 	bl	800f08c <UART_WaitOnFlagUntilTimeout>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d03c      	beq.n	800f05e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	e853 3f00 	ldrex	r3, [r3]
 800eff0:	623b      	str	r3, [r7, #32]
   return(result);
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f002:	633b      	str	r3, [r7, #48]	; 0x30
 800f004:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f00a:	e841 2300 	strex	r3, r2, [r1]
 800f00e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1e6      	bne.n	800efe4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3308      	adds	r3, #8
 800f01c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	e853 3f00 	ldrex	r3, [r3]
 800f024:	60fb      	str	r3, [r7, #12]
   return(result);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f023 0301 	bic.w	r3, r3, #1
 800f02c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3308      	adds	r3, #8
 800f034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f036:	61fa      	str	r2, [r7, #28]
 800f038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	69b9      	ldr	r1, [r7, #24]
 800f03c:	69fa      	ldr	r2, [r7, #28]
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	617b      	str	r3, [r7, #20]
   return(result);
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e5      	bne.n	800f016 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2220      	movs	r2, #32
 800f04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f05a:	2303      	movs	r3, #3
 800f05c:	e012      	b.n	800f084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2220      	movs	r2, #32
 800f062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2220      	movs	r2, #32
 800f06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3758      	adds	r7, #88	; 0x58
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	603b      	str	r3, [r7, #0]
 800f098:	4613      	mov	r3, r2
 800f09a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f09c:	e04f      	b.n	800f13e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0a4:	d04b      	beq.n	800f13e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0a6:	f7f3 fe6b 	bl	8002d80 <HAL_GetTick>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	1ad3      	subs	r3, r2, r3
 800f0b0:	69ba      	ldr	r2, [r7, #24]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d302      	bcc.n	800f0bc <UART_WaitOnFlagUntilTimeout+0x30>
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e04e      	b.n	800f15e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 0304 	and.w	r3, r3, #4
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d037      	beq.n	800f13e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	2b80      	cmp	r3, #128	; 0x80
 800f0d2:	d034      	beq.n	800f13e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b40      	cmp	r3, #64	; 0x40
 800f0d8:	d031      	beq.n	800f13e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	69db      	ldr	r3, [r3, #28]
 800f0e0:	f003 0308 	and.w	r3, r3, #8
 800f0e4:	2b08      	cmp	r3, #8
 800f0e6:	d110      	bne.n	800f10a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2208      	movs	r2, #8
 800f0ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f000 f95b 	bl	800f3ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2208      	movs	r2, #8
 800f0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f106:	2301      	movs	r3, #1
 800f108:	e029      	b.n	800f15e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	69db      	ldr	r3, [r3, #28]
 800f110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f118:	d111      	bne.n	800f13e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f000 f941 	bl	800f3ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2220      	movs	r2, #32
 800f12e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2200      	movs	r2, #0
 800f136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f13a:	2303      	movs	r3, #3
 800f13c:	e00f      	b.n	800f15e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	69da      	ldr	r2, [r3, #28]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	4013      	ands	r3, r2
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	bf0c      	ite	eq
 800f14e:	2301      	moveq	r3, #1
 800f150:	2300      	movne	r3, #0
 800f152:	b2db      	uxtb	r3, r3
 800f154:	461a      	mov	r2, r3
 800f156:	79fb      	ldrb	r3, [r7, #7]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d0a0      	beq.n	800f09e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3710      	adds	r7, #16
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
	...

0800f168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f168:	b480      	push	{r7}
 800f16a:	b0a3      	sub	sp, #140	; 0x8c
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	4613      	mov	r3, r2
 800f174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	68ba      	ldr	r2, [r7, #8]
 800f17a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	88fa      	ldrh	r2, [r7, #6]
 800f180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	88fa      	ldrh	r2, [r7, #6]
 800f188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2200      	movs	r2, #0
 800f190:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f19a:	d10e      	bne.n	800f1ba <UART_Start_Receive_IT+0x52>
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	691b      	ldr	r3, [r3, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d105      	bne.n	800f1b0 <UART_Start_Receive_IT+0x48>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f1aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1ae:	e02d      	b.n	800f20c <UART_Start_Receive_IT+0xa4>
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	22ff      	movs	r2, #255	; 0xff
 800f1b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1b8:	e028      	b.n	800f20c <UART_Start_Receive_IT+0xa4>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	689b      	ldr	r3, [r3, #8]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10d      	bne.n	800f1de <UART_Start_Receive_IT+0x76>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d104      	bne.n	800f1d4 <UART_Start_Receive_IT+0x6c>
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	22ff      	movs	r2, #255	; 0xff
 800f1ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1d2:	e01b      	b.n	800f20c <UART_Start_Receive_IT+0xa4>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	227f      	movs	r2, #127	; 0x7f
 800f1d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1dc:	e016      	b.n	800f20c <UART_Start_Receive_IT+0xa4>
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1e6:	d10d      	bne.n	800f204 <UART_Start_Receive_IT+0x9c>
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d104      	bne.n	800f1fa <UART_Start_Receive_IT+0x92>
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	227f      	movs	r2, #127	; 0x7f
 800f1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f1f8:	e008      	b.n	800f20c <UART_Start_Receive_IT+0xa4>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	223f      	movs	r2, #63	; 0x3f
 800f1fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f202:	e003      	b.n	800f20c <UART_Start_Receive_IT+0xa4>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2222      	movs	r2, #34	; 0x22
 800f218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	3308      	adds	r3, #8
 800f222:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f226:	e853 3f00 	ldrex	r3, [r3]
 800f22a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f22c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f22e:	f043 0301 	orr.w	r3, r3, #1
 800f232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	3308      	adds	r3, #8
 800f23c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f240:	673a      	str	r2, [r7, #112]	; 0x70
 800f242:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f244:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f246:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f248:	e841 2300 	strex	r3, r2, [r1]
 800f24c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f24e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1e3      	bne.n	800f21c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f25c:	d14f      	bne.n	800f2fe <UART_Start_Receive_IT+0x196>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f264:	88fa      	ldrh	r2, [r7, #6]
 800f266:	429a      	cmp	r2, r3
 800f268:	d349      	bcc.n	800f2fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f272:	d107      	bne.n	800f284 <UART_Start_Receive_IT+0x11c>
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d103      	bne.n	800f284 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	4a47      	ldr	r2, [pc, #284]	; (800f39c <UART_Start_Receive_IT+0x234>)
 800f280:	675a      	str	r2, [r3, #116]	; 0x74
 800f282:	e002      	b.n	800f28a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4a46      	ldr	r2, [pc, #280]	; (800f3a0 <UART_Start_Receive_IT+0x238>)
 800f288:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d01a      	beq.n	800f2c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f29a:	e853 3f00 	ldrex	r3, [r3]
 800f29e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f2b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2bc:	e841 2300 	strex	r3, r2, [r1]
 800f2c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1e4      	bne.n	800f292 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3308      	adds	r3, #8
 800f2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d2:	e853 3f00 	ldrex	r3, [r3]
 800f2d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3308      	adds	r3, #8
 800f2e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f2e8:	64ba      	str	r2, [r7, #72]	; 0x48
 800f2ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2f0:	e841 2300 	strex	r3, r2, [r1]
 800f2f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f2f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d1e5      	bne.n	800f2c8 <UART_Start_Receive_IT+0x160>
 800f2fc:	e046      	b.n	800f38c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f306:	d107      	bne.n	800f318 <UART_Start_Receive_IT+0x1b0>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d103      	bne.n	800f318 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	4a24      	ldr	r2, [pc, #144]	; (800f3a4 <UART_Start_Receive_IT+0x23c>)
 800f314:	675a      	str	r2, [r3, #116]	; 0x74
 800f316:	e002      	b.n	800f31e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4a23      	ldr	r2, [pc, #140]	; (800f3a8 <UART_Start_Receive_IT+0x240>)
 800f31c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	691b      	ldr	r3, [r3, #16]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d019      	beq.n	800f35a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	e853 3f00 	ldrex	r3, [r3]
 800f332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f336:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f33a:	677b      	str	r3, [r7, #116]	; 0x74
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f344:	637b      	str	r3, [r7, #52]	; 0x34
 800f346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f34a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f34c:	e841 2300 	strex	r3, r2, [r1]
 800f350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e6      	bne.n	800f326 <UART_Start_Receive_IT+0x1be>
 800f358:	e018      	b.n	800f38c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	e853 3f00 	ldrex	r3, [r3]
 800f366:	613b      	str	r3, [r7, #16]
   return(result);
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f043 0320 	orr.w	r3, r3, #32
 800f36e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	461a      	mov	r2, r3
 800f376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f378:	623b      	str	r3, [r7, #32]
 800f37a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37c:	69f9      	ldr	r1, [r7, #28]
 800f37e:	6a3a      	ldr	r2, [r7, #32]
 800f380:	e841 2300 	strex	r3, r2, [r1]
 800f384:	61bb      	str	r3, [r7, #24]
   return(result);
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1e6      	bne.n	800f35a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	378c      	adds	r7, #140	; 0x8c
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	0800fbcd 	.word	0x0800fbcd
 800f3a0:	0800f86d 	.word	0x0800f86d
 800f3a4:	0800f6b5 	.word	0x0800f6b5
 800f3a8:	0800f4fd 	.word	0x0800f4fd

0800f3ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b095      	sub	sp, #84	; 0x54
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3bc:	e853 3f00 	ldrex	r3, [r3]
 800f3c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d2:	643b      	str	r3, [r7, #64]	; 0x40
 800f3d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3da:	e841 2300 	strex	r3, r2, [r1]
 800f3de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1e6      	bne.n	800f3b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	3308      	adds	r3, #8
 800f3ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	e853 3f00 	ldrex	r3, [r3]
 800f3f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	4b1e      	ldr	r3, [pc, #120]	; (800f474 <UART_EndRxTransfer+0xc8>)
 800f3fa:	4013      	ands	r3, r2
 800f3fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	3308      	adds	r3, #8
 800f404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f406:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f40c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f40e:	e841 2300 	strex	r3, r2, [r1]
 800f412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1e5      	bne.n	800f3e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d118      	bne.n	800f454 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	e853 3f00 	ldrex	r3, [r3]
 800f42e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f023 0310 	bic.w	r3, r3, #16
 800f436:	647b      	str	r3, [r7, #68]	; 0x44
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	461a      	mov	r2, r3
 800f43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f440:	61bb      	str	r3, [r7, #24]
 800f442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f444:	6979      	ldr	r1, [r7, #20]
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	e841 2300 	strex	r3, r2, [r1]
 800f44c:	613b      	str	r3, [r7, #16]
   return(result);
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1e6      	bne.n	800f422 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2220      	movs	r2, #32
 800f458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f468:	bf00      	nop
 800f46a:	3754      	adds	r7, #84	; 0x54
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr
 800f474:	effffffe 	.word	0xeffffffe

0800f478 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7fe ff2e 	bl	800e2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f49c:	bf00      	nop
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	e853 3f00 	ldrex	r3, [r3]
 800f4b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4c0:	61fb      	str	r3, [r7, #28]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	61bb      	str	r3, [r7, #24]
 800f4cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ce:	6979      	ldr	r1, [r7, #20]
 800f4d0:	69ba      	ldr	r2, [r7, #24]
 800f4d2:	e841 2300 	strex	r3, r2, [r1]
 800f4d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1e6      	bne.n	800f4ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2220      	movs	r2, #32
 800f4e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7fe fef9 	bl	800e2e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4f2:	bf00      	nop
 800f4f4:	3720      	adds	r7, #32
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
	...

0800f4fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b09c      	sub	sp, #112	; 0x70
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f50a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f514:	2b22      	cmp	r3, #34	; 0x22
 800f516:	f040 80be 	bne.w	800f696 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f520:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f524:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f528:	b2d9      	uxtb	r1, r3
 800f52a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f52e:	b2da      	uxtb	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f534:	400a      	ands	r2, r1
 800f536:	b2d2      	uxtb	r2, r2
 800f538:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f53e:	1c5a      	adds	r2, r3, #1
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	3b01      	subs	r3, #1
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f040 80a1 	bne.w	800f6a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f56c:	e853 3f00 	ldrex	r3, [r3]
 800f570:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f578:	66bb      	str	r3, [r7, #104]	; 0x68
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f582:	65bb      	str	r3, [r7, #88]	; 0x58
 800f584:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f586:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f58a:	e841 2300 	strex	r3, r2, [r1]
 800f58e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f592:	2b00      	cmp	r3, #0
 800f594:	d1e6      	bne.n	800f564 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3308      	adds	r3, #8
 800f59c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a0:	e853 3f00 	ldrex	r3, [r3]
 800f5a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a8:	f023 0301 	bic.w	r3, r3, #1
 800f5ac:	667b      	str	r3, [r7, #100]	; 0x64
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	3308      	adds	r3, #8
 800f5b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f5b6:	647a      	str	r2, [r7, #68]	; 0x44
 800f5b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5be:	e841 2300 	strex	r3, r2, [r1]
 800f5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1e5      	bne.n	800f596 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2220      	movs	r2, #32
 800f5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a33      	ldr	r2, [pc, #204]	; (800f6b0 <UART_RxISR_8BIT+0x1b4>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d01f      	beq.n	800f628 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d018      	beq.n	800f628 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	e853 3f00 	ldrex	r3, [r3]
 800f602:	623b      	str	r3, [r7, #32]
   return(result);
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f60a:	663b      	str	r3, [r7, #96]	; 0x60
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	461a      	mov	r2, r3
 800f612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f614:	633b      	str	r3, [r7, #48]	; 0x30
 800f616:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f61a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f61c:	e841 2300 	strex	r3, r2, [r1]
 800f620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e6      	bne.n	800f5f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d12e      	bne.n	800f68e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	e853 3f00 	ldrex	r3, [r3]
 800f642:	60fb      	str	r3, [r7, #12]
   return(result);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f023 0310 	bic.w	r3, r3, #16
 800f64a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	461a      	mov	r2, r3
 800f652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f654:	61fb      	str	r3, [r7, #28]
 800f656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f658:	69b9      	ldr	r1, [r7, #24]
 800f65a:	69fa      	ldr	r2, [r7, #28]
 800f65c:	e841 2300 	strex	r3, r2, [r1]
 800f660:	617b      	str	r3, [r7, #20]
   return(result);
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1e6      	bne.n	800f636 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	69db      	ldr	r3, [r3, #28]
 800f66e:	f003 0310 	and.w	r3, r3, #16
 800f672:	2b10      	cmp	r3, #16
 800f674:	d103      	bne.n	800f67e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2210      	movs	r2, #16
 800f67c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f684:	4619      	mov	r1, r3
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7fe fe40 	bl	800e30c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f68c:	e00b      	b.n	800f6a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7f1 f82e 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f694:	e007      	b.n	800f6a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	699a      	ldr	r2, [r3, #24]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f042 0208 	orr.w	r2, r2, #8
 800f6a4:	619a      	str	r2, [r3, #24]
}
 800f6a6:	bf00      	nop
 800f6a8:	3770      	adds	r7, #112	; 0x70
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	58000c00 	.word	0x58000c00

0800f6b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b09c      	sub	sp, #112	; 0x70
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6cc:	2b22      	cmp	r3, #34	; 0x22
 800f6ce:	f040 80be 	bne.w	800f84e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6e0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f6e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f6e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f6:	1c9a      	adds	r2, r3, #2
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f702:	b29b      	uxth	r3, r3
 800f704:	3b01      	subs	r3, #1
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f714:	b29b      	uxth	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	f040 80a1 	bne.w	800f85e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f724:	e853 3f00 	ldrex	r3, [r3]
 800f728:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f72c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f730:	667b      	str	r3, [r7, #100]	; 0x64
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f73a:	657b      	str	r3, [r7, #84]	; 0x54
 800f73c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f742:	e841 2300 	strex	r3, r2, [r1]
 800f746:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1e6      	bne.n	800f71c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	3308      	adds	r3, #8
 800f754:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f758:	e853 3f00 	ldrex	r3, [r3]
 800f75c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	f023 0301 	bic.w	r3, r3, #1
 800f764:	663b      	str	r3, [r7, #96]	; 0x60
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3308      	adds	r3, #8
 800f76c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f76e:	643a      	str	r2, [r7, #64]	; 0x40
 800f770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f772:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f776:	e841 2300 	strex	r3, r2, [r1]
 800f77a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e5      	bne.n	800f74e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2220      	movs	r2, #32
 800f786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a33      	ldr	r2, [pc, #204]	; (800f868 <UART_RxISR_16BIT+0x1b4>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d01f      	beq.n	800f7e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d018      	beq.n	800f7e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b4:	6a3b      	ldr	r3, [r7, #32]
 800f7b6:	e853 3f00 	ldrex	r3, [r3]
 800f7ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f7c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7d4:	e841 2300 	strex	r3, r2, [r1]
 800f7d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1e6      	bne.n	800f7ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d12e      	bne.n	800f846 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	e853 3f00 	ldrex	r3, [r3]
 800f7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f023 0310 	bic.w	r3, r3, #16
 800f802:	65bb      	str	r3, [r7, #88]	; 0x58
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	461a      	mov	r2, r3
 800f80a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f80c:	61bb      	str	r3, [r7, #24]
 800f80e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f810:	6979      	ldr	r1, [r7, #20]
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	e841 2300 	strex	r3, r2, [r1]
 800f818:	613b      	str	r3, [r7, #16]
   return(result);
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1e6      	bne.n	800f7ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	69db      	ldr	r3, [r3, #28]
 800f826:	f003 0310 	and.w	r3, r3, #16
 800f82a:	2b10      	cmp	r3, #16
 800f82c:	d103      	bne.n	800f836 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2210      	movs	r2, #16
 800f834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7fe fd64 	bl	800e30c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f844:	e00b      	b.n	800f85e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7f0 ff52 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800f84c:	e007      	b.n	800f85e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	699a      	ldr	r2, [r3, #24]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f042 0208 	orr.w	r2, r2, #8
 800f85c:	619a      	str	r2, [r3, #24]
}
 800f85e:	bf00      	nop
 800f860:	3770      	adds	r7, #112	; 0x70
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	58000c00 	.word	0x58000c00

0800f86c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b0ac      	sub	sp, #176	; 0xb0
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f87a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	69db      	ldr	r3, [r3, #28]
 800f884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8a2:	2b22      	cmp	r3, #34	; 0x22
 800f8a4:	f040 8180 	bne.w	800fba8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f8ae:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f8b2:	e123      	b.n	800fafc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ba:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f8be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f8c2:	b2d9      	uxtb	r1, r3
 800f8c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ce:	400a      	ands	r2, r1
 800f8d0:	b2d2      	uxtb	r2, r2
 800f8d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	3b01      	subs	r3, #1
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f8fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8fe:	f003 0307 	and.w	r3, r3, #7
 800f902:	2b00      	cmp	r3, #0
 800f904:	d053      	beq.n	800f9ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f90a:	f003 0301 	and.w	r3, r3, #1
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d011      	beq.n	800f936 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00b      	beq.n	800f936 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2201      	movs	r2, #1
 800f924:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f92c:	f043 0201 	orr.w	r2, r3, #1
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f93a:	f003 0302 	and.w	r3, r3, #2
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d011      	beq.n	800f966 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f946:	f003 0301 	and.w	r3, r3, #1
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00b      	beq.n	800f966 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2202      	movs	r2, #2
 800f954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f95c:	f043 0204 	orr.w	r2, r3, #4
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f96a:	f003 0304 	and.w	r3, r3, #4
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d011      	beq.n	800f996 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f976:	f003 0301 	and.w	r3, r3, #1
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00b      	beq.n	800f996 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2204      	movs	r2, #4
 800f984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f98c:	f043 0202 	orr.w	r2, r3, #2
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d006      	beq.n	800f9ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7fe fca9 	bl	800e2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f040 80a0 	bne.w	800fafc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9c4:	e853 3f00 	ldrex	r3, [r3]
 800f9c8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f9de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f9e0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f9e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f9e6:	e841 2300 	strex	r3, r2, [r1]
 800f9ea:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f9ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e4      	bne.n	800f9bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9fc:	e853 3f00 	ldrex	r3, [r3]
 800fa00:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fa02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa04:	4b6e      	ldr	r3, [pc, #440]	; (800fbc0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800fa06:	4013      	ands	r3, r2
 800fa08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3308      	adds	r3, #8
 800fa12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fa16:	66ba      	str	r2, [r7, #104]	; 0x68
 800fa18:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fa1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fa24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e3      	bne.n	800f9f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a60      	ldr	r2, [pc, #384]	; (800fbc4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d021      	beq.n	800fa8c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d01a      	beq.n	800fa8c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa5e:	e853 3f00 	ldrex	r3, [r3]
 800fa62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fa64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fa6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa78:	657b      	str	r3, [r7, #84]	; 0x54
 800fa7a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fa7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa80:	e841 2300 	strex	r3, r2, [r1]
 800fa84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fa86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1e4      	bne.n	800fa56 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d130      	bne.n	800faf6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa2:	e853 3f00 	ldrex	r3, [r3]
 800faa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800faa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faaa:	f023 0310 	bic.w	r3, r3, #16
 800faae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fabc:	643b      	str	r3, [r7, #64]	; 0x40
 800fabe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fac4:	e841 2300 	strex	r3, r2, [r1]
 800fac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800faca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800facc:	2b00      	cmp	r3, #0
 800face:	d1e4      	bne.n	800fa9a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	69db      	ldr	r3, [r3, #28]
 800fad6:	f003 0310 	and.w	r3, r3, #16
 800fada:	2b10      	cmp	r3, #16
 800fadc:	d103      	bne.n	800fae6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2210      	movs	r2, #16
 800fae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800faec:	4619      	mov	r1, r3
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7fe fc0c 	bl	800e30c <HAL_UARTEx_RxEventCallback>
 800faf4:	e002      	b.n	800fafc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7f0 fdfa 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fafc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d006      	beq.n	800fb12 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800fb04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb08:	f003 0320 	and.w	r3, r3, #32
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f47f aed1 	bne.w	800f8b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fb1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d049      	beq.n	800fbb8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d242      	bcs.n	800fbb8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3308      	adds	r3, #8
 800fb38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3a:	6a3b      	ldr	r3, [r7, #32]
 800fb3c:	e853 3f00 	ldrex	r3, [r3]
 800fb40:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3308      	adds	r3, #8
 800fb52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fb56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb5e:	e841 2300 	strex	r3, r2, [r1]
 800fb62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1e3      	bne.n	800fb32 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a16      	ldr	r2, [pc, #88]	; (800fbc8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fb6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	e853 3f00 	ldrex	r3, [r3]
 800fb7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	f043 0320 	orr.w	r3, r3, #32
 800fb84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb92:	61bb      	str	r3, [r7, #24]
 800fb94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb96:	6979      	ldr	r1, [r7, #20]
 800fb98:	69ba      	ldr	r2, [r7, #24]
 800fb9a:	e841 2300 	strex	r3, r2, [r1]
 800fb9e:	613b      	str	r3, [r7, #16]
   return(result);
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1e4      	bne.n	800fb70 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fba6:	e007      	b.n	800fbb8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	699a      	ldr	r2, [r3, #24]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f042 0208 	orr.w	r2, r2, #8
 800fbb6:	619a      	str	r2, [r3, #24]
}
 800fbb8:	bf00      	nop
 800fbba:	37b0      	adds	r7, #176	; 0xb0
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	effffffe 	.word	0xeffffffe
 800fbc4:	58000c00 	.word	0x58000c00
 800fbc8:	0800f4fd 	.word	0x0800f4fd

0800fbcc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b0ae      	sub	sp, #184	; 0xb8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbda:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc02:	2b22      	cmp	r3, #34	; 0x22
 800fc04:	f040 8184 	bne.w	800ff10 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc12:	e127      	b.n	800fe64 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fc26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fc2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fc2e:	4013      	ands	r3, r2
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc3c:	1c9a      	adds	r2, r3, #2
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	69db      	ldr	r3, [r3, #28]
 800fc5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fc5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc62:	f003 0307 	and.w	r3, r3, #7
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d053      	beq.n	800fd12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc6e:	f003 0301 	and.w	r3, r3, #1
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d011      	beq.n	800fc9a <UART_RxISR_16BIT_FIFOEN+0xce>
 800fc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00b      	beq.n	800fc9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2201      	movs	r2, #1
 800fc88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc90:	f043 0201 	orr.w	r2, r3, #1
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc9e:	f003 0302 	and.w	r3, r3, #2
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d011      	beq.n	800fcca <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcaa:	f003 0301 	and.w	r3, r3, #1
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00b      	beq.n	800fcca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc0:	f043 0204 	orr.w	r2, r3, #4
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fcce:	f003 0304 	and.w	r3, r3, #4
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d011      	beq.n	800fcfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fcd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcda:	f003 0301 	and.w	r3, r3, #1
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00b      	beq.n	800fcfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2204      	movs	r2, #4
 800fce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcf0:	f043 0202 	orr.w	r2, r3, #2
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d006      	beq.n	800fd12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f7fe faf7 	bl	800e2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f040 80a2 	bne.w	800fe64 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd28:	e853 3f00 	ldrex	r3, [r3]
 800fd2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fd2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fd42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd46:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fd4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fd4e:	e841 2300 	strex	r3, r2, [r1]
 800fd52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fd54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1e2      	bne.n	800fd20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3308      	adds	r3, #8
 800fd60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd64:	e853 3f00 	ldrex	r3, [r3]
 800fd68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fd6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd6c:	4b6e      	ldr	r3, [pc, #440]	; (800ff28 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800fd6e:	4013      	ands	r3, r2
 800fd70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	3308      	adds	r3, #8
 800fd7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fd7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fd80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fd86:	e841 2300 	strex	r3, r2, [r1]
 800fd8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fd8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1e3      	bne.n	800fd5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2220      	movs	r2, #32
 800fd96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a60      	ldr	r2, [pc, #384]	; (800ff2c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d021      	beq.n	800fdf4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d01a      	beq.n	800fdf4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdc6:	e853 3f00 	ldrex	r3, [r3]
 800fdca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fdd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	461a      	mov	r2, r3
 800fddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fde0:	65bb      	str	r3, [r7, #88]	; 0x58
 800fde2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fde6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fde8:	e841 2300 	strex	r3, r2, [r1]
 800fdec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fdee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d1e4      	bne.n	800fdbe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d130      	bne.n	800fe5e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	e853 3f00 	ldrex	r3, [r3]
 800fe0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe12:	f023 0310 	bic.w	r3, r3, #16
 800fe16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe24:	647b      	str	r3, [r7, #68]	; 0x44
 800fe26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe2c:	e841 2300 	strex	r3, r2, [r1]
 800fe30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1e4      	bne.n	800fe02 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	69db      	ldr	r3, [r3, #28]
 800fe3e:	f003 0310 	and.w	r3, r3, #16
 800fe42:	2b10      	cmp	r3, #16
 800fe44:	d103      	bne.n	800fe4e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2210      	movs	r2, #16
 800fe4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe54:	4619      	mov	r1, r3
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7fe fa58 	bl	800e30c <HAL_UARTEx_RxEventCallback>
 800fe5c:	e002      	b.n	800fe64 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7f0 fc46 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d006      	beq.n	800fe7a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800fe6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe70:	f003 0320 	and.w	r3, r3, #32
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f47f aecd 	bne.w	800fc14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d049      	beq.n	800ff20 <UART_RxISR_16BIT_FIFOEN+0x354>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d242      	bcs.n	800ff20 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	3308      	adds	r3, #8
 800fea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea4:	e853 3f00 	ldrex	r3, [r3]
 800fea8:	623b      	str	r3, [r7, #32]
   return(result);
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800feb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	3308      	adds	r3, #8
 800feba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800febe:	633a      	str	r2, [r7, #48]	; 0x30
 800fec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fec6:	e841 2300 	strex	r3, r2, [r1]
 800feca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1e3      	bne.n	800fe9a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a16      	ldr	r2, [pc, #88]	; (800ff30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800fed6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	e853 3f00 	ldrex	r3, [r3]
 800fee4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f043 0320 	orr.w	r3, r3, #32
 800feec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	461a      	mov	r2, r3
 800fef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fefa:	61fb      	str	r3, [r7, #28]
 800fefc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fefe:	69b9      	ldr	r1, [r7, #24]
 800ff00:	69fa      	ldr	r2, [r7, #28]
 800ff02:	e841 2300 	strex	r3, r2, [r1]
 800ff06:	617b      	str	r3, [r7, #20]
   return(result);
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1e4      	bne.n	800fed8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff0e:	e007      	b.n	800ff20 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	699a      	ldr	r2, [r3, #24]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f042 0208 	orr.w	r2, r2, #8
 800ff1e:	619a      	str	r2, [r3, #24]
}
 800ff20:	bf00      	nop
 800ff22:	37b8      	adds	r7, #184	; 0xb8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	effffffe 	.word	0xeffffffe
 800ff2c:	58000c00 	.word	0x58000c00
 800ff30:	0800f6b5 	.word	0x0800f6b5

0800ff34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff3c:	bf00      	nop
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff50:	bf00      	nop
 800ff52:	370c      	adds	r7, #12
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b085      	sub	sp, #20
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d101      	bne.n	800ff86 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff82:	2302      	movs	r3, #2
 800ff84:	e027      	b.n	800ffd6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2201      	movs	r2, #1
 800ff8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2224      	movs	r2, #36	; 0x24
 800ff92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f022 0201 	bic.w	r2, r2, #1
 800ffac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ffb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2220      	movs	r2, #32
 800ffc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffd4:	2300      	movs	r3, #0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d101      	bne.n	800fffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fff6:	2302      	movs	r3, #2
 800fff8:	e02d      	b.n	8010056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2201      	movs	r2, #1
 800fffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2224      	movs	r2, #36	; 0x24
 8010006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f022 0201 	bic.w	r2, r2, #1
 8010020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	689b      	ldr	r3, [r3, #8]
 8010028:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	683a      	ldr	r2, [r7, #0]
 8010032:	430a      	orrs	r2, r1
 8010034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 f850 	bl	80100dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2220      	movs	r2, #32
 8010048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010054:	2300      	movs	r3, #0
}
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b084      	sub	sp, #16
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801006e:	2b01      	cmp	r3, #1
 8010070:	d101      	bne.n	8010076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010072:	2302      	movs	r3, #2
 8010074:	e02d      	b.n	80100d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2224      	movs	r2, #36	; 0x24
 8010082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f022 0201 	bic.w	r2, r2, #1
 801009c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	430a      	orrs	r2, r1
 80100b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f812 	bl	80100dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2220      	movs	r2, #32
 80100c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100d0:	2300      	movs	r3, #0
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
	...

080100dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d108      	bne.n	80100fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100fc:	e031      	b.n	8010162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100fe:	2310      	movs	r3, #16
 8010100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010102:	2310      	movs	r3, #16
 8010104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	0e5b      	lsrs	r3, r3, #25
 801010e:	b2db      	uxtb	r3, r3
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	689b      	ldr	r3, [r3, #8]
 801011c:	0f5b      	lsrs	r3, r3, #29
 801011e:	b2db      	uxtb	r3, r3
 8010120:	f003 0307 	and.w	r3, r3, #7
 8010124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010126:	7bbb      	ldrb	r3, [r7, #14]
 8010128:	7b3a      	ldrb	r2, [r7, #12]
 801012a:	4911      	ldr	r1, [pc, #68]	; (8010170 <UARTEx_SetNbDataToProcess+0x94>)
 801012c:	5c8a      	ldrb	r2, [r1, r2]
 801012e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010132:	7b3a      	ldrb	r2, [r7, #12]
 8010134:	490f      	ldr	r1, [pc, #60]	; (8010174 <UARTEx_SetNbDataToProcess+0x98>)
 8010136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010138:	fb93 f3f2 	sdiv	r3, r3, r2
 801013c:	b29a      	uxth	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010144:	7bfb      	ldrb	r3, [r7, #15]
 8010146:	7b7a      	ldrb	r2, [r7, #13]
 8010148:	4909      	ldr	r1, [pc, #36]	; (8010170 <UARTEx_SetNbDataToProcess+0x94>)
 801014a:	5c8a      	ldrb	r2, [r1, r2]
 801014c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010150:	7b7a      	ldrb	r2, [r7, #13]
 8010152:	4908      	ldr	r1, [pc, #32]	; (8010174 <UARTEx_SetNbDataToProcess+0x98>)
 8010154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010156:	fb93 f3f2 	sdiv	r3, r3, r2
 801015a:	b29a      	uxth	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010162:	bf00      	nop
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	08014c94 	.word	0x08014c94
 8010174:	08014c9c 	.word	0x08014c9c

08010178 <__NVIC_SetPriority>:
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	6039      	str	r1, [r7, #0]
 8010182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010188:	2b00      	cmp	r3, #0
 801018a:	db0a      	blt.n	80101a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	b2da      	uxtb	r2, r3
 8010190:	490c      	ldr	r1, [pc, #48]	; (80101c4 <__NVIC_SetPriority+0x4c>)
 8010192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010196:	0112      	lsls	r2, r2, #4
 8010198:	b2d2      	uxtb	r2, r2
 801019a:	440b      	add	r3, r1
 801019c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80101a0:	e00a      	b.n	80101b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	b2da      	uxtb	r2, r3
 80101a6:	4908      	ldr	r1, [pc, #32]	; (80101c8 <__NVIC_SetPriority+0x50>)
 80101a8:	88fb      	ldrh	r3, [r7, #6]
 80101aa:	f003 030f 	and.w	r3, r3, #15
 80101ae:	3b04      	subs	r3, #4
 80101b0:	0112      	lsls	r2, r2, #4
 80101b2:	b2d2      	uxtb	r2, r2
 80101b4:	440b      	add	r3, r1
 80101b6:	761a      	strb	r2, [r3, #24]
}
 80101b8:	bf00      	nop
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	e000e100 	.word	0xe000e100
 80101c8:	e000ed00 	.word	0xe000ed00

080101cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80101cc:	b580      	push	{r7, lr}
 80101ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80101d0:	4b05      	ldr	r3, [pc, #20]	; (80101e8 <SysTick_Handler+0x1c>)
 80101d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80101d4:	f002 fada 	bl	801278c <xTaskGetSchedulerState>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d001      	beq.n	80101e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80101de:	f003 f8fb 	bl	80133d8 <xPortSysTickHandler>
  }
}
 80101e2:	bf00      	nop
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	e000e010 	.word	0xe000e010

080101ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80101f0:	2100      	movs	r1, #0
 80101f2:	f06f 0004 	mvn.w	r0, #4
 80101f6:	f7ff ffbf 	bl	8010178 <__NVIC_SetPriority>
#endif
}
 80101fa:	bf00      	nop
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010206:	f3ef 8305 	mrs	r3, IPSR
 801020a:	603b      	str	r3, [r7, #0]
  return(result);
 801020c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801020e:	2b00      	cmp	r3, #0
 8010210:	d003      	beq.n	801021a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010212:	f06f 0305 	mvn.w	r3, #5
 8010216:	607b      	str	r3, [r7, #4]
 8010218:	e00c      	b.n	8010234 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801021a:	4b0a      	ldr	r3, [pc, #40]	; (8010244 <osKernelInitialize+0x44>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d105      	bne.n	801022e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010222:	4b08      	ldr	r3, [pc, #32]	; (8010244 <osKernelInitialize+0x44>)
 8010224:	2201      	movs	r2, #1
 8010226:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010228:	2300      	movs	r3, #0
 801022a:	607b      	str	r3, [r7, #4]
 801022c:	e002      	b.n	8010234 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801022e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010232:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010234:	687b      	ldr	r3, [r7, #4]
}
 8010236:	4618      	mov	r0, r3
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
 8010244:	2400075c 	.word	0x2400075c

08010248 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801024e:	f3ef 8305 	mrs	r3, IPSR
 8010252:	603b      	str	r3, [r7, #0]
  return(result);
 8010254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <osKernelStart+0x1a>
    stat = osErrorISR;
 801025a:	f06f 0305 	mvn.w	r3, #5
 801025e:	607b      	str	r3, [r7, #4]
 8010260:	e010      	b.n	8010284 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010262:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <osKernelStart+0x48>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d109      	bne.n	801027e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801026a:	f7ff ffbf 	bl	80101ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801026e:	4b08      	ldr	r3, [pc, #32]	; (8010290 <osKernelStart+0x48>)
 8010270:	2202      	movs	r2, #2
 8010272:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010274:	f001 fda4 	bl	8011dc0 <vTaskStartScheduler>
      stat = osOK;
 8010278:	2300      	movs	r3, #0
 801027a:	607b      	str	r3, [r7, #4]
 801027c:	e002      	b.n	8010284 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801027e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010284:	687b      	ldr	r3, [r7, #4]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	2400075c 	.word	0x2400075c

08010294 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010294:	b580      	push	{r7, lr}
 8010296:	b08e      	sub	sp, #56	; 0x38
 8010298:	af04      	add	r7, sp, #16
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80102a0:	2300      	movs	r3, #0
 80102a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102a4:	f3ef 8305 	mrs	r3, IPSR
 80102a8:	617b      	str	r3, [r7, #20]
  return(result);
 80102aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d17e      	bne.n	80103ae <osThreadNew+0x11a>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d07b      	beq.n	80103ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80102b6:	2380      	movs	r3, #128	; 0x80
 80102b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80102ba:	2318      	movs	r3, #24
 80102bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80102c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d045      	beq.n	801035a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d002      	beq.n	80102dc <osThreadNew+0x48>
        name = attr->name;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	699b      	ldr	r3, [r3, #24]
 80102e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d008      	beq.n	8010302 <osThreadNew+0x6e>
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	2b38      	cmp	r3, #56	; 0x38
 80102f4:	d805      	bhi.n	8010302 <osThreadNew+0x6e>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	f003 0301 	and.w	r3, r3, #1
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <osThreadNew+0x72>
        return (NULL);
 8010302:	2300      	movs	r3, #0
 8010304:	e054      	b.n	80103b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d003      	beq.n	8010316 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	695b      	ldr	r3, [r3, #20]
 8010312:	089b      	lsrs	r3, r3, #2
 8010314:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00e      	beq.n	801033c <osThreadNew+0xa8>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	2b5b      	cmp	r3, #91	; 0x5b
 8010324:	d90a      	bls.n	801033c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801032a:	2b00      	cmp	r3, #0
 801032c:	d006      	beq.n	801033c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	695b      	ldr	r3, [r3, #20]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d002      	beq.n	801033c <osThreadNew+0xa8>
        mem = 1;
 8010336:	2301      	movs	r3, #1
 8010338:	61bb      	str	r3, [r7, #24]
 801033a:	e010      	b.n	801035e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10c      	bne.n	801035e <osThreadNew+0xca>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d108      	bne.n	801035e <osThreadNew+0xca>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	691b      	ldr	r3, [r3, #16]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d104      	bne.n	801035e <osThreadNew+0xca>
          mem = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	61bb      	str	r3, [r7, #24]
 8010358:	e001      	b.n	801035e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801035a:	2300      	movs	r3, #0
 801035c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d110      	bne.n	8010386 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801036c:	9202      	str	r2, [sp, #8]
 801036e:	9301      	str	r3, [sp, #4]
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	6a3a      	ldr	r2, [r7, #32]
 8010378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f001 fb4a 	bl	8011a14 <xTaskCreateStatic>
 8010380:	4603      	mov	r3, r0
 8010382:	613b      	str	r3, [r7, #16]
 8010384:	e013      	b.n	80103ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d110      	bne.n	80103ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801038c:	6a3b      	ldr	r3, [r7, #32]
 801038e:	b29a      	uxth	r2, r3
 8010390:	f107 0310 	add.w	r3, r7, #16
 8010394:	9301      	str	r3, [sp, #4]
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f001 fb95 	bl	8011ace <xTaskCreate>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d001      	beq.n	80103ae <osThreadNew+0x11a>
            hTask = NULL;
 80103aa:	2300      	movs	r3, #0
 80103ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80103ae:	693b      	ldr	r3, [r7, #16]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3728      	adds	r7, #40	; 0x28
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103be:	f3ef 8305 	mrs	r3, IPSR
 80103c2:	603b      	str	r3, [r7, #0]
  return(result);
 80103c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d003      	beq.n	80103d2 <osThreadYield+0x1a>
    stat = osErrorISR;
 80103ca:	f06f 0305 	mvn.w	r3, #5
 80103ce:	607b      	str	r3, [r7, #4]
 80103d0:	e009      	b.n	80103e6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <osThreadYield+0x3c>)
 80103d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103dc:	601a      	str	r2, [r3, #0]
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80103e6:	687b      	ldr	r3, [r7, #4]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	e000ed04 	.word	0xe000ed04

080103f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010400:	f3ef 8305 	mrs	r3, IPSR
 8010404:	60bb      	str	r3, [r7, #8]
  return(result);
 8010406:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <osDelay+0x1c>
    stat = osErrorISR;
 801040c:	f06f 0305 	mvn.w	r3, #5
 8010410:	60fb      	str	r3, [r7, #12]
 8010412:	e007      	b.n	8010424 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010414:	2300      	movs	r3, #0
 8010416:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d002      	beq.n	8010424 <osDelay+0x2c>
      vTaskDelay(ticks);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f001 fc9a 	bl	8011d58 <vTaskDelay>
    }
  }

  return (stat);
 8010424:	68fb      	ldr	r3, [r7, #12]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801042e:	b580      	push	{r7, lr}
 8010430:	b086      	sub	sp, #24
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801043a:	f3ef 8305 	mrs	r3, IPSR
 801043e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010440:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010442:	2b00      	cmp	r3, #0
 8010444:	d12d      	bne.n	80104a2 <osEventFlagsNew+0x74>
    mem = -1;
 8010446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801044a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d015      	beq.n	801047e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	689b      	ldr	r3, [r3, #8]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d006      	beq.n	8010468 <osEventFlagsNew+0x3a>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	2b1f      	cmp	r3, #31
 8010460:	d902      	bls.n	8010468 <osEventFlagsNew+0x3a>
        mem = 1;
 8010462:	2301      	movs	r3, #1
 8010464:	613b      	str	r3, [r7, #16]
 8010466:	e00c      	b.n	8010482 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d108      	bne.n	8010482 <osEventFlagsNew+0x54>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d104      	bne.n	8010482 <osEventFlagsNew+0x54>
          mem = 0;
 8010478:	2300      	movs	r3, #0
 801047a:	613b      	str	r3, [r7, #16]
 801047c:	e001      	b.n	8010482 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801047e:	2300      	movs	r3, #0
 8010480:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	2b01      	cmp	r3, #1
 8010486:	d106      	bne.n	8010496 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	4618      	mov	r0, r3
 801048e:	f000 fa3d 	bl	801090c <xEventGroupCreateStatic>
 8010492:	6178      	str	r0, [r7, #20]
 8010494:	e005      	b.n	80104a2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d102      	bne.n	80104a2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801049c:	f000 fa6d 	bl	801097a <xEventGroupCreate>
 80104a0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80104a2:	697b      	ldr	r3, [r7, #20]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b086      	sub	sp, #24
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d004      	beq.n	80104ca <osEventFlagsSet+0x1e>
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d003      	beq.n	80104d2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80104ca:	f06f 0303 	mvn.w	r3, #3
 80104ce:	617b      	str	r3, [r7, #20]
 80104d0:	e028      	b.n	8010524 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104d2:	f3ef 8305 	mrs	r3, IPSR
 80104d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80104d8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d01d      	beq.n	801051a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80104de:	2300      	movs	r3, #0
 80104e0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80104e2:	f107 0308 	add.w	r3, r7, #8
 80104e6:	461a      	mov	r2, r3
 80104e8:	6839      	ldr	r1, [r7, #0]
 80104ea:	6938      	ldr	r0, [r7, #16]
 80104ec:	f000 fbe8 	bl	8010cc0 <xEventGroupSetBitsFromISR>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d103      	bne.n	80104fe <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80104f6:	f06f 0302 	mvn.w	r3, #2
 80104fa:	617b      	str	r3, [r7, #20]
 80104fc:	e012      	b.n	8010524 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d00d      	beq.n	8010524 <osEventFlagsSet+0x78>
 8010508:	4b09      	ldr	r3, [pc, #36]	; (8010530 <osEventFlagsSet+0x84>)
 801050a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801050e:	601a      	str	r2, [r3, #0]
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	e004      	b.n	8010524 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801051a:	6839      	ldr	r1, [r7, #0]
 801051c:	6938      	ldr	r0, [r7, #16]
 801051e:	f000 fb15 	bl	8010b4c <xEventGroupSetBits>
 8010522:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010524:	697b      	ldr	r3, [r7, #20]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	e000ed04 	.word	0xe000ed04

08010534 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8010534:	b580      	push	{r7, lr}
 8010536:	b08c      	sub	sp, #48	; 0x30
 8010538:	af02      	add	r7, sp, #8
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d004      	beq.n	8010556 <osEventFlagsWait+0x22>
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010552:	2b00      	cmp	r3, #0
 8010554:	d003      	beq.n	801055e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8010556:	f06f 0303 	mvn.w	r3, #3
 801055a:	61fb      	str	r3, [r7, #28]
 801055c:	e04b      	b.n	80105f6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801055e:	f3ef 8305 	mrs	r3, IPSR
 8010562:	617b      	str	r3, [r7, #20]
  return(result);
 8010564:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801056a:	f06f 0305 	mvn.w	r3, #5
 801056e:	61fb      	str	r3, [r7, #28]
 8010570:	e041      	b.n	80105f6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f003 0301 	and.w	r3, r3, #1
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801057c:	2301      	movs	r3, #1
 801057e:	627b      	str	r3, [r7, #36]	; 0x24
 8010580:	e001      	b.n	8010586 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8010582:	2300      	movs	r3, #0
 8010584:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f003 0302 	and.w	r3, r3, #2
 801058c:	2b00      	cmp	r3, #0
 801058e:	d002      	beq.n	8010596 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010590:	2300      	movs	r3, #0
 8010592:	623b      	str	r3, [r7, #32]
 8010594:	e001      	b.n	801059a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8010596:	2301      	movs	r3, #1
 8010598:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a0:	6a3a      	ldr	r2, [r7, #32]
 80105a2:	68b9      	ldr	r1, [r7, #8]
 80105a4:	69b8      	ldr	r0, [r7, #24]
 80105a6:	f000 fa03 	bl	80109b0 <xEventGroupWaitBits>
 80105aa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d010      	beq.n	80105d8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80105b6:	68ba      	ldr	r2, [r7, #8]
 80105b8:	69fb      	ldr	r3, [r7, #28]
 80105ba:	4013      	ands	r3, r2
 80105bc:	68ba      	ldr	r2, [r7, #8]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d019      	beq.n	80105f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d003      	beq.n	80105d0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80105c8:	f06f 0301 	mvn.w	r3, #1
 80105cc:	61fb      	str	r3, [r7, #28]
 80105ce:	e012      	b.n	80105f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80105d0:	f06f 0302 	mvn.w	r3, #2
 80105d4:	61fb      	str	r3, [r7, #28]
 80105d6:	e00e      	b.n	80105f6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	4013      	ands	r3, r2
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d109      	bne.n	80105f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d003      	beq.n	80105f0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80105e8:	f06f 0301 	mvn.w	r3, #1
 80105ec:	61fb      	str	r3, [r7, #28]
 80105ee:	e002      	b.n	80105f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80105f0:	f06f 0302 	mvn.w	r3, #2
 80105f4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80105f6:	69fb      	ldr	r3, [r7, #28]
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3728      	adds	r7, #40	; 0x28
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010600:	b580      	push	{r7, lr}
 8010602:	b08a      	sub	sp, #40	; 0x28
 8010604:	af02      	add	r7, sp, #8
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801060c:	2300      	movs	r3, #0
 801060e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010610:	f3ef 8305 	mrs	r3, IPSR
 8010614:	613b      	str	r3, [r7, #16]
  return(result);
 8010616:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010618:	2b00      	cmp	r3, #0
 801061a:	d15f      	bne.n	80106dc <osMessageQueueNew+0xdc>
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d05c      	beq.n	80106dc <osMessageQueueNew+0xdc>
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d059      	beq.n	80106dc <osMessageQueueNew+0xdc>
    mem = -1;
 8010628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801062c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d029      	beq.n	8010688 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d012      	beq.n	8010662 <osMessageQueueNew+0x62>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	2b4f      	cmp	r3, #79	; 0x4f
 8010642:	d90e      	bls.n	8010662 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010648:	2b00      	cmp	r3, #0
 801064a:	d00a      	beq.n	8010662 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	695a      	ldr	r2, [r3, #20]
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	68b9      	ldr	r1, [r7, #8]
 8010654:	fb01 f303 	mul.w	r3, r1, r3
 8010658:	429a      	cmp	r2, r3
 801065a:	d302      	bcc.n	8010662 <osMessageQueueNew+0x62>
        mem = 1;
 801065c:	2301      	movs	r3, #1
 801065e:	61bb      	str	r3, [r7, #24]
 8010660:	e014      	b.n	801068c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d110      	bne.n	801068c <osMessageQueueNew+0x8c>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d10c      	bne.n	801068c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010676:	2b00      	cmp	r3, #0
 8010678:	d108      	bne.n	801068c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	695b      	ldr	r3, [r3, #20]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d104      	bne.n	801068c <osMessageQueueNew+0x8c>
          mem = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	61bb      	str	r3, [r7, #24]
 8010686:	e001      	b.n	801068c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010688:	2300      	movs	r3, #0
 801068a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	2b01      	cmp	r3, #1
 8010690:	d10b      	bne.n	80106aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	691a      	ldr	r2, [r3, #16]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	2100      	movs	r1, #0
 801069c:	9100      	str	r1, [sp, #0]
 801069e:	68b9      	ldr	r1, [r7, #8]
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f000 fc3d 	bl	8010f20 <xQueueGenericCreateStatic>
 80106a6:	61f8      	str	r0, [r7, #28]
 80106a8:	e008      	b.n	80106bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d105      	bne.n	80106bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80106b0:	2200      	movs	r2, #0
 80106b2:	68b9      	ldr	r1, [r7, #8]
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f000 fcab 	bl	8011010 <xQueueGenericCreate>
 80106ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00c      	beq.n	80106dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d003      	beq.n	80106d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	617b      	str	r3, [r7, #20]
 80106ce:	e001      	b.n	80106d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80106d0:	2300      	movs	r3, #0
 80106d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80106d4:	6979      	ldr	r1, [r7, #20]
 80106d6:	69f8      	ldr	r0, [r7, #28]
 80106d8:	f001 f93e 	bl	8011958 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80106dc:	69fb      	ldr	r3, [r7, #28]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3720      	adds	r7, #32
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b088      	sub	sp, #32
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	603b      	str	r3, [r7, #0]
 80106f4:	4613      	mov	r3, r2
 80106f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010700:	f3ef 8305 	mrs	r3, IPSR
 8010704:	617b      	str	r3, [r7, #20]
  return(result);
 8010706:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010708:	2b00      	cmp	r3, #0
 801070a:	d028      	beq.n	801075e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d005      	beq.n	801071e <osMessageQueuePut+0x36>
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <osMessageQueuePut+0x36>
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d003      	beq.n	8010726 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801071e:	f06f 0303 	mvn.w	r3, #3
 8010722:	61fb      	str	r3, [r7, #28]
 8010724:	e038      	b.n	8010798 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010726:	2300      	movs	r3, #0
 8010728:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801072a:	f107 0210 	add.w	r2, r7, #16
 801072e:	2300      	movs	r3, #0
 8010730:	68b9      	ldr	r1, [r7, #8]
 8010732:	69b8      	ldr	r0, [r7, #24]
 8010734:	f000 fdc8 	bl	80112c8 <xQueueGenericSendFromISR>
 8010738:	4603      	mov	r3, r0
 801073a:	2b01      	cmp	r3, #1
 801073c:	d003      	beq.n	8010746 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801073e:	f06f 0302 	mvn.w	r3, #2
 8010742:	61fb      	str	r3, [r7, #28]
 8010744:	e028      	b.n	8010798 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d025      	beq.n	8010798 <osMessageQueuePut+0xb0>
 801074c:	4b15      	ldr	r3, [pc, #84]	; (80107a4 <osMessageQueuePut+0xbc>)
 801074e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010752:	601a      	str	r2, [r3, #0]
 8010754:	f3bf 8f4f 	dsb	sy
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	e01c      	b.n	8010798 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <osMessageQueuePut+0x82>
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d103      	bne.n	8010772 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801076a:	f06f 0303 	mvn.w	r3, #3
 801076e:	61fb      	str	r3, [r7, #28]
 8010770:	e012      	b.n	8010798 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010772:	2300      	movs	r3, #0
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	68b9      	ldr	r1, [r7, #8]
 8010778:	69b8      	ldr	r0, [r7, #24]
 801077a:	f000 fca7 	bl	80110cc <xQueueGenericSend>
 801077e:	4603      	mov	r3, r0
 8010780:	2b01      	cmp	r3, #1
 8010782:	d009      	beq.n	8010798 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d003      	beq.n	8010792 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801078a:	f06f 0301 	mvn.w	r3, #1
 801078e:	61fb      	str	r3, [r7, #28]
 8010790:	e002      	b.n	8010798 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010792:	f06f 0302 	mvn.w	r3, #2
 8010796:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010798:	69fb      	ldr	r3, [r7, #28]
}
 801079a:	4618      	mov	r0, r3
 801079c:	3720      	adds	r7, #32
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	e000ed04 	.word	0xe000ed04

080107a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b088      	sub	sp, #32
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107be:	f3ef 8305 	mrs	r3, IPSR
 80107c2:	617b      	str	r3, [r7, #20]
  return(result);
 80107c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d028      	beq.n	801081c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d005      	beq.n	80107dc <osMessageQueueGet+0x34>
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d002      	beq.n	80107dc <osMessageQueueGet+0x34>
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d003      	beq.n	80107e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80107dc:	f06f 0303 	mvn.w	r3, #3
 80107e0:	61fb      	str	r3, [r7, #28]
 80107e2:	e037      	b.n	8010854 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80107e4:	2300      	movs	r3, #0
 80107e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80107e8:	f107 0310 	add.w	r3, r7, #16
 80107ec:	461a      	mov	r2, r3
 80107ee:	68b9      	ldr	r1, [r7, #8]
 80107f0:	69b8      	ldr	r0, [r7, #24]
 80107f2:	f000 fee5 	bl	80115c0 <xQueueReceiveFromISR>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d003      	beq.n	8010804 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80107fc:	f06f 0302 	mvn.w	r3, #2
 8010800:	61fb      	str	r3, [r7, #28]
 8010802:	e027      	b.n	8010854 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d024      	beq.n	8010854 <osMessageQueueGet+0xac>
 801080a:	4b15      	ldr	r3, [pc, #84]	; (8010860 <osMessageQueueGet+0xb8>)
 801080c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010810:	601a      	str	r2, [r3, #0]
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	f3bf 8f6f 	isb	sy
 801081a:	e01b      	b.n	8010854 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801081c:	69bb      	ldr	r3, [r7, #24]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d002      	beq.n	8010828 <osMessageQueueGet+0x80>
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d103      	bne.n	8010830 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010828:	f06f 0303 	mvn.w	r3, #3
 801082c:	61fb      	str	r3, [r7, #28]
 801082e:	e011      	b.n	8010854 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010830:	683a      	ldr	r2, [r7, #0]
 8010832:	68b9      	ldr	r1, [r7, #8]
 8010834:	69b8      	ldr	r0, [r7, #24]
 8010836:	f000 fde3 	bl	8011400 <xQueueReceive>
 801083a:	4603      	mov	r3, r0
 801083c:	2b01      	cmp	r3, #1
 801083e:	d009      	beq.n	8010854 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d003      	beq.n	801084e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010846:	f06f 0301 	mvn.w	r3, #1
 801084a:	61fb      	str	r3, [r7, #28]
 801084c:	e002      	b.n	8010854 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801084e:	f06f 0302 	mvn.w	r3, #2
 8010852:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010854:	69fb      	ldr	r3, [r7, #28]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3720      	adds	r7, #32
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	e000ed04 	.word	0xe000ed04

08010864 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d102      	bne.n	801087c <osMessageQueueGetCount+0x18>
    count = 0U;
 8010876:	2300      	movs	r3, #0
 8010878:	617b      	str	r3, [r7, #20]
 801087a:	e00e      	b.n	801089a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801087c:	f3ef 8305 	mrs	r3, IPSR
 8010880:	60fb      	str	r3, [r7, #12]
  return(result);
 8010882:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8010888:	6938      	ldr	r0, [r7, #16]
 801088a:	f000 ff37 	bl	80116fc <uxQueueMessagesWaitingFromISR>
 801088e:	6178      	str	r0, [r7, #20]
 8010890:	e003      	b.n	801089a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8010892:	6938      	ldr	r0, [r7, #16]
 8010894:	f000 ff14 	bl	80116c0 <uxQueueMessagesWaiting>
 8010898:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 801089a:	697b      	ldr	r3, [r7, #20]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4a07      	ldr	r2, [pc, #28]	; (80108d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80108b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	4a06      	ldr	r2, [pc, #24]	; (80108d4 <vApplicationGetIdleTaskMemory+0x30>)
 80108ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2280      	movs	r2, #128	; 0x80
 80108c0:	601a      	str	r2, [r3, #0]
}
 80108c2:	bf00      	nop
 80108c4:	3714      	adds	r7, #20
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	24000760 	.word	0x24000760
 80108d4:	240007bc 	.word	0x240007bc

080108d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	4a07      	ldr	r2, [pc, #28]	; (8010904 <vApplicationGetTimerTaskMemory+0x2c>)
 80108e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	4a06      	ldr	r2, [pc, #24]	; (8010908 <vApplicationGetTimerTaskMemory+0x30>)
 80108ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108f6:	601a      	str	r2, [r3, #0]
}
 80108f8:	bf00      	nop
 80108fa:	3714      	adds	r7, #20
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr
 8010904:	240009bc 	.word	0x240009bc
 8010908:	24000a18 	.word	0x24000a18

0801090c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801090c:	b580      	push	{r7, lr}
 801090e:	b086      	sub	sp, #24
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d10a      	bne.n	8010930 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801092c:	bf00      	nop
 801092e:	e7fe      	b.n	801092e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8010930:	2320      	movs	r3, #32
 8010932:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	2b20      	cmp	r3, #32
 8010938:	d00a      	beq.n	8010950 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093e:	f383 8811 	msr	BASEPRI, r3
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	f3bf 8f4f 	dsb	sy
 801094a:	60fb      	str	r3, [r7, #12]
}
 801094c:	bf00      	nop
 801094e:	e7fe      	b.n	801094e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00a      	beq.n	8010970 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	2200      	movs	r2, #0
 801095e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	3304      	adds	r3, #4
 8010964:	4618      	mov	r0, r3
 8010966:	f000 f9bf 	bl	8010ce8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	2201      	movs	r2, #1
 801096e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8010970:	697b      	ldr	r3, [r7, #20]
	}
 8010972:	4618      	mov	r0, r3
 8010974:	3718      	adds	r7, #24
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8010980:	2020      	movs	r0, #32
 8010982:	f002 fdb9 	bl	80134f8 <pvPortMalloc>
 8010986:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00a      	beq.n	80109a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3304      	adds	r3, #4
 8010998:	4618      	mov	r0, r3
 801099a:	f000 f9a5 	bl	8010ce8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2200      	movs	r2, #0
 80109a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80109a4:	687b      	ldr	r3, [r7, #4]
	}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
	...

080109b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b090      	sub	sp, #64	; 0x40
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]
 80109bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80109c6:	2300      	movs	r3, #0
 80109c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d10a      	bne.n	80109e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	623b      	str	r3, [r7, #32]
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00a      	beq.n	8010a06 <xEventGroupWaitBits+0x56>
	__asm volatile
 80109f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f4:	f383 8811 	msr	BASEPRI, r3
 80109f8:	f3bf 8f6f 	isb	sy
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	61fb      	str	r3, [r7, #28]
}
 8010a02:	bf00      	nop
 8010a04:	e7fe      	b.n	8010a04 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d10a      	bne.n	8010a22 <xEventGroupWaitBits+0x72>
	__asm volatile
 8010a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a10:	f383 8811 	msr	BASEPRI, r3
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	61bb      	str	r3, [r7, #24]
}
 8010a1e:	bf00      	nop
 8010a20:	e7fe      	b.n	8010a20 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a22:	f001 feb3 	bl	801278c <xTaskGetSchedulerState>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d102      	bne.n	8010a32 <xEventGroupWaitBits+0x82>
 8010a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d101      	bne.n	8010a36 <xEventGroupWaitBits+0x86>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e000      	b.n	8010a38 <xEventGroupWaitBits+0x88>
 8010a36:	2300      	movs	r3, #0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d10a      	bne.n	8010a52 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8010a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a40:	f383 8811 	msr	BASEPRI, r3
 8010a44:	f3bf 8f6f 	isb	sy
 8010a48:	f3bf 8f4f 	dsb	sy
 8010a4c:	617b      	str	r3, [r7, #20]
}
 8010a4e:	bf00      	nop
 8010a50:	e7fe      	b.n	8010a50 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8010a52:	f001 fa1b 	bl	8011e8c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8010a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8010a5c:	683a      	ldr	r2, [r7, #0]
 8010a5e:	68b9      	ldr	r1, [r7, #8]
 8010a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a62:	f000 f90b 	bl	8010c7c <prvTestWaitCondition>
 8010a66:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8010a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00e      	beq.n	8010a8c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8010a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8010a72:	2300      	movs	r3, #0
 8010a74:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d028      	beq.n	8010ace <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	43db      	mvns	r3, r3
 8010a84:	401a      	ands	r2, r3
 8010a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a88:	601a      	str	r2, [r3, #0]
 8010a8a:	e020      	b.n	8010ace <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d104      	bne.n	8010a9c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8010a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8010a96:	2301      	movs	r3, #1
 8010a98:	633b      	str	r3, [r7, #48]	; 0x30
 8010a9a:	e018      	b.n	8010ace <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d003      	beq.n	8010aaa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8010aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010aa8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d003      	beq.n	8010ab8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010ab6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aba:	1d18      	adds	r0, r3, #4
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	f001 fbd9 	bl	801227c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8010aca:	2300      	movs	r3, #0
 8010acc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8010ace:	f001 f9eb 	bl	8011ea8 <xTaskResumeAll>
 8010ad2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d031      	beq.n	8010b3e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d107      	bne.n	8010af0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8010ae0:	4b19      	ldr	r3, [pc, #100]	; (8010b48 <xEventGroupWaitBits+0x198>)
 8010ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ae6:	601a      	str	r2, [r3, #0]
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8010af0:	f001 fed8 	bl	80128a4 <uxTaskResetEventItemValue>
 8010af4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8010af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d11a      	bne.n	8010b36 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8010b00:	f002 fbd8 	bl	80132b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8010b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8010b0a:	683a      	ldr	r2, [r7, #0]
 8010b0c:	68b9      	ldr	r1, [r7, #8]
 8010b0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b10:	f000 f8b4 	bl	8010c7c <prvTestWaitCondition>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d009      	beq.n	8010b2e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d006      	beq.n	8010b2e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	43db      	mvns	r3, r3
 8010b28:	401a      	ands	r2, r3
 8010b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8010b32:	f002 fbef 	bl	8013314 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8010b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3740      	adds	r7, #64	; 0x40
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	e000ed04 	.word	0xe000ed04

08010b4c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b08e      	sub	sp, #56	; 0x38
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8010b56:	2300      	movs	r3, #0
 8010b58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d10a      	bne.n	8010b7e <xEventGroupSetBits+0x32>
	__asm volatile
 8010b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6c:	f383 8811 	msr	BASEPRI, r3
 8010b70:	f3bf 8f6f 	isb	sy
 8010b74:	f3bf 8f4f 	dsb	sy
 8010b78:	613b      	str	r3, [r7, #16]
}
 8010b7a:	bf00      	nop
 8010b7c:	e7fe      	b.n	8010b7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d00a      	beq.n	8010b9e <xEventGroupSetBits+0x52>
	__asm volatile
 8010b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b8c:	f383 8811 	msr	BASEPRI, r3
 8010b90:	f3bf 8f6f 	isb	sy
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	60fb      	str	r3, [r7, #12]
}
 8010b9a:	bf00      	nop
 8010b9c:	e7fe      	b.n	8010b9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010baa:	f001 f96f 	bl	8011e8c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	431a      	orrs	r2, r3
 8010bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010bc0:	e03c      	b.n	8010c3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010bd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010be0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d108      	bne.n	8010bfe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	4013      	ands	r3, r2
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00b      	beq.n	8010c10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bfc:	e008      	b.n	8010c10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	4013      	ands	r3, r2
 8010c06:	69ba      	ldr	r2, [r7, #24]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d101      	bne.n	8010c10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d010      	beq.n	8010c38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d003      	beq.n	8010c28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	4313      	orrs	r3, r2
 8010c26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010c30:	4619      	mov	r1, r3
 8010c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c34:	f001 fbee 	bl	8012414 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c3e:	6a3b      	ldr	r3, [r7, #32]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d1be      	bne.n	8010bc2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4a:	43db      	mvns	r3, r3
 8010c4c:	401a      	ands	r2, r3
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010c52:	f001 f929 	bl	8011ea8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	681b      	ldr	r3, [r3, #0]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3738      	adds	r7, #56	; 0x38
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b082      	sub	sp, #8
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010c6c:	6839      	ldr	r1, [r7, #0]
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7ff ff6c 	bl	8010b4c <xEventGroupSetBits>
}
 8010c74:	bf00      	nop
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b087      	sub	sp, #28
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d107      	bne.n	8010ca2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010c92:	68fa      	ldr	r2, [r7, #12]
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	4013      	ands	r3, r2
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00a      	beq.n	8010cb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	617b      	str	r3, [r7, #20]
 8010ca0:	e007      	b.n	8010cb2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	68ba      	ldr	r2, [r7, #8]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d101      	bne.n	8010cb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010cb2:	697b      	ldr	r3, [r7, #20]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	371c      	adds	r7, #28
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	68f9      	ldr	r1, [r7, #12]
 8010cd2:	4804      	ldr	r0, [pc, #16]	; (8010ce4 <xEventGroupSetBitsFromISR+0x24>)
 8010cd4:	f002 f9a0 	bl	8013018 <xTimerPendFunctionCallFromISR>
 8010cd8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010cda:	697b      	ldr	r3, [r7, #20]
	}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	08010c63 	.word	0x08010c63

08010ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f103 0208 	add.w	r2, r3, #8
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f103 0208 	add.w	r2, r3, #8
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f103 0208 	add.w	r2, r3, #8
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010d36:	bf00      	nop
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d42:	b480      	push	{r7}
 8010d44:	b085      	sub	sp, #20
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	68fa      	ldr	r2, [r7, #12]
 8010d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	689a      	ldr	r2, [r3, #8]
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	683a      	ldr	r2, [r7, #0]
 8010d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	1c5a      	adds	r2, r3, #1
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	601a      	str	r2, [r3, #0]
}
 8010d7e:	bf00      	nop
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d8a:	b480      	push	{r7}
 8010d8c:	b085      	sub	sp, #20
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010da0:	d103      	bne.n	8010daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	691b      	ldr	r3, [r3, #16]
 8010da6:	60fb      	str	r3, [r7, #12]
 8010da8:	e00c      	b.n	8010dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	3308      	adds	r3, #8
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	e002      	b.n	8010db8 <vListInsert+0x2e>
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	60fb      	str	r3, [r7, #12]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d2f6      	bcs.n	8010db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	685a      	ldr	r2, [r3, #4]
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	683a      	ldr	r2, [r7, #0]
 8010dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	683a      	ldr	r2, [r7, #0]
 8010dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	1c5a      	adds	r2, r3, #1
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	601a      	str	r2, [r3, #0]
}
 8010df0:	bf00      	nop
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr

08010dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	691b      	ldr	r3, [r3, #16]
 8010e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	6892      	ldr	r2, [r2, #8]
 8010e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	689b      	ldr	r3, [r3, #8]
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	6852      	ldr	r2, [r2, #4]
 8010e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d103      	bne.n	8010e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	689a      	ldr	r2, [r3, #8]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	1e5a      	subs	r2, r3, #1
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3714      	adds	r7, #20
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d10a      	bne.n	8010e7a <xQueueGenericReset+0x2a>
	__asm volatile
 8010e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e68:	f383 8811 	msr	BASEPRI, r3
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	60bb      	str	r3, [r7, #8]
}
 8010e76:	bf00      	nop
 8010e78:	e7fe      	b.n	8010e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010e7a:	f002 fa1b 	bl	80132b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e86:	68f9      	ldr	r1, [r7, #12]
 8010e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010e8a:	fb01 f303 	mul.w	r3, r1, r3
 8010e8e:	441a      	add	r2, r3
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2200      	movs	r2, #0
 8010e98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	68f9      	ldr	r1, [r7, #12]
 8010eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010eb0:	fb01 f303 	mul.w	r3, r1, r3
 8010eb4:	441a      	add	r2, r3
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	22ff      	movs	r2, #255	; 0xff
 8010ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	22ff      	movs	r2, #255	; 0xff
 8010ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d114      	bne.n	8010efa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	691b      	ldr	r3, [r3, #16]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d01a      	beq.n	8010f0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	3310      	adds	r3, #16
 8010edc:	4618      	mov	r0, r3
 8010ede:	f001 fa35 	bl	801234c <xTaskRemoveFromEventList>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d012      	beq.n	8010f0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010ee8:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <xQueueGenericReset+0xcc>)
 8010eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eee:	601a      	str	r2, [r3, #0]
 8010ef0:	f3bf 8f4f 	dsb	sy
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	e009      	b.n	8010f0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	3310      	adds	r3, #16
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff fef2 	bl	8010ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	3324      	adds	r3, #36	; 0x24
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff feed 	bl	8010ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010f0e:	f002 fa01 	bl	8013314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010f12:	2301      	movs	r3, #1
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	e000ed04 	.word	0xe000ed04

08010f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b08e      	sub	sp, #56	; 0x38
 8010f24:	af02      	add	r7, sp, #8
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10a      	bne.n	8010f4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d10a      	bne.n	8010f66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010f62:	bf00      	nop
 8010f64:	e7fe      	b.n	8010f64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <xQueueGenericCreateStatic+0x52>
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d001      	beq.n	8010f76 <xQueueGenericCreateStatic+0x56>
 8010f72:	2301      	movs	r3, #1
 8010f74:	e000      	b.n	8010f78 <xQueueGenericCreateStatic+0x58>
 8010f76:	2300      	movs	r3, #0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d10a      	bne.n	8010f92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f80:	f383 8811 	msr	BASEPRI, r3
 8010f84:	f3bf 8f6f 	isb	sy
 8010f88:	f3bf 8f4f 	dsb	sy
 8010f8c:	623b      	str	r3, [r7, #32]
}
 8010f8e:	bf00      	nop
 8010f90:	e7fe      	b.n	8010f90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d102      	bne.n	8010f9e <xQueueGenericCreateStatic+0x7e>
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d101      	bne.n	8010fa2 <xQueueGenericCreateStatic+0x82>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e000      	b.n	8010fa4 <xQueueGenericCreateStatic+0x84>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10a      	bne.n	8010fbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fac:	f383 8811 	msr	BASEPRI, r3
 8010fb0:	f3bf 8f6f 	isb	sy
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	61fb      	str	r3, [r7, #28]
}
 8010fba:	bf00      	nop
 8010fbc:	e7fe      	b.n	8010fbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010fbe:	2350      	movs	r3, #80	; 0x50
 8010fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	2b50      	cmp	r3, #80	; 0x50
 8010fc6:	d00a      	beq.n	8010fde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fcc:	f383 8811 	msr	BASEPRI, r3
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	f3bf 8f4f 	dsb	sy
 8010fd8:	61bb      	str	r3, [r7, #24]
}
 8010fda:	bf00      	nop
 8010fdc:	e7fe      	b.n	8010fdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010fde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d00d      	beq.n	8011006 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fec:	2201      	movs	r2, #1
 8010fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	68b9      	ldr	r1, [r7, #8]
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f000 f83f 	bl	8011084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011008:	4618      	mov	r0, r3
 801100a:	3730      	adds	r7, #48	; 0x30
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011010:	b580      	push	{r7, lr}
 8011012:	b08a      	sub	sp, #40	; 0x28
 8011014:	af02      	add	r7, sp, #8
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	4613      	mov	r3, r2
 801101c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d10a      	bne.n	801103a <xQueueGenericCreate+0x2a>
	__asm volatile
 8011024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	613b      	str	r3, [r7, #16]
}
 8011036:	bf00      	nop
 8011038:	e7fe      	b.n	8011038 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	68ba      	ldr	r2, [r7, #8]
 801103e:	fb02 f303 	mul.w	r3, r2, r3
 8011042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	3350      	adds	r3, #80	; 0x50
 8011048:	4618      	mov	r0, r3
 801104a:	f002 fa55 	bl	80134f8 <pvPortMalloc>
 801104e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011050:	69bb      	ldr	r3, [r7, #24]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d011      	beq.n	801107a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011056:	69bb      	ldr	r3, [r7, #24]
 8011058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	3350      	adds	r3, #80	; 0x50
 801105e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	2200      	movs	r2, #0
 8011064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011068:	79fa      	ldrb	r2, [r7, #7]
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	4613      	mov	r3, r2
 8011070:	697a      	ldr	r2, [r7, #20]
 8011072:	68b9      	ldr	r1, [r7, #8]
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 f805 	bl	8011084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801107a:	69bb      	ldr	r3, [r7, #24]
	}
 801107c:	4618      	mov	r0, r3
 801107e:	3720      	adds	r7, #32
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
 8011090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d103      	bne.n	80110a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	69ba      	ldr	r2, [r7, #24]
 801109c:	601a      	str	r2, [r3, #0]
 801109e:	e002      	b.n	80110a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80110b2:	2101      	movs	r1, #1
 80110b4:	69b8      	ldr	r0, [r7, #24]
 80110b6:	f7ff fecb 	bl	8010e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	78fa      	ldrb	r2, [r7, #3]
 80110be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80110c2:	bf00      	nop
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b08e      	sub	sp, #56	; 0x38
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80110da:	2300      	movs	r3, #0
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80110e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d10a      	bne.n	80110fe <xQueueGenericSend+0x32>
	__asm volatile
 80110e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ec:	f383 8811 	msr	BASEPRI, r3
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80110fa:	bf00      	nop
 80110fc:	e7fe      	b.n	80110fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d103      	bne.n	801110c <xQueueGenericSend+0x40>
 8011104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011108:	2b00      	cmp	r3, #0
 801110a:	d101      	bne.n	8011110 <xQueueGenericSend+0x44>
 801110c:	2301      	movs	r3, #1
 801110e:	e000      	b.n	8011112 <xQueueGenericSend+0x46>
 8011110:	2300      	movs	r3, #0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d10a      	bne.n	801112c <xQueueGenericSend+0x60>
	__asm volatile
 8011116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111a:	f383 8811 	msr	BASEPRI, r3
 801111e:	f3bf 8f6f 	isb	sy
 8011122:	f3bf 8f4f 	dsb	sy
 8011126:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011128:	bf00      	nop
 801112a:	e7fe      	b.n	801112a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d103      	bne.n	801113a <xQueueGenericSend+0x6e>
 8011132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011136:	2b01      	cmp	r3, #1
 8011138:	d101      	bne.n	801113e <xQueueGenericSend+0x72>
 801113a:	2301      	movs	r3, #1
 801113c:	e000      	b.n	8011140 <xQueueGenericSend+0x74>
 801113e:	2300      	movs	r3, #0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d10a      	bne.n	801115a <xQueueGenericSend+0x8e>
	__asm volatile
 8011144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011148:	f383 8811 	msr	BASEPRI, r3
 801114c:	f3bf 8f6f 	isb	sy
 8011150:	f3bf 8f4f 	dsb	sy
 8011154:	623b      	str	r3, [r7, #32]
}
 8011156:	bf00      	nop
 8011158:	e7fe      	b.n	8011158 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801115a:	f001 fb17 	bl	801278c <xTaskGetSchedulerState>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	d102      	bne.n	801116a <xQueueGenericSend+0x9e>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <xQueueGenericSend+0xa2>
 801116a:	2301      	movs	r3, #1
 801116c:	e000      	b.n	8011170 <xQueueGenericSend+0xa4>
 801116e:	2300      	movs	r3, #0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10a      	bne.n	801118a <xQueueGenericSend+0xbe>
	__asm volatile
 8011174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011178:	f383 8811 	msr	BASEPRI, r3
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	f3bf 8f4f 	dsb	sy
 8011184:	61fb      	str	r3, [r7, #28]
}
 8011186:	bf00      	nop
 8011188:	e7fe      	b.n	8011188 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801118a:	f002 f893 	bl	80132b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011196:	429a      	cmp	r2, r3
 8011198:	d302      	bcc.n	80111a0 <xQueueGenericSend+0xd4>
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d129      	bne.n	80111f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	68b9      	ldr	r1, [r7, #8]
 80111a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111a6:	f000 fac7 	bl	8011738 <prvCopyDataToQueue>
 80111aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d010      	beq.n	80111d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b6:	3324      	adds	r3, #36	; 0x24
 80111b8:	4618      	mov	r0, r3
 80111ba:	f001 f8c7 	bl	801234c <xTaskRemoveFromEventList>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d013      	beq.n	80111ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80111c4:	4b3f      	ldr	r3, [pc, #252]	; (80112c4 <xQueueGenericSend+0x1f8>)
 80111c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ca:	601a      	str	r2, [r3, #0]
 80111cc:	f3bf 8f4f 	dsb	sy
 80111d0:	f3bf 8f6f 	isb	sy
 80111d4:	e00a      	b.n	80111ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80111d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d007      	beq.n	80111ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80111dc:	4b39      	ldr	r3, [pc, #228]	; (80112c4 <xQueueGenericSend+0x1f8>)
 80111de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111e2:	601a      	str	r2, [r3, #0]
 80111e4:	f3bf 8f4f 	dsb	sy
 80111e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80111ec:	f002 f892 	bl	8013314 <vPortExitCritical>
				return pdPASS;
 80111f0:	2301      	movs	r3, #1
 80111f2:	e063      	b.n	80112bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d103      	bne.n	8011202 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80111fa:	f002 f88b 	bl	8013314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80111fe:	2300      	movs	r3, #0
 8011200:	e05c      	b.n	80112bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011204:	2b00      	cmp	r3, #0
 8011206:	d106      	bne.n	8011216 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011208:	f107 0314 	add.w	r3, r7, #20
 801120c:	4618      	mov	r0, r3
 801120e:	f001 f963 	bl	80124d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011212:	2301      	movs	r3, #1
 8011214:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011216:	f002 f87d 	bl	8013314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801121a:	f000 fe37 	bl	8011e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801121e:	f002 f849 	bl	80132b4 <vPortEnterCritical>
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011228:	b25b      	sxtb	r3, r3
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801122e:	d103      	bne.n	8011238 <xQueueGenericSend+0x16c>
 8011230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011232:	2200      	movs	r2, #0
 8011234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801123e:	b25b      	sxtb	r3, r3
 8011240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011244:	d103      	bne.n	801124e <xQueueGenericSend+0x182>
 8011246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011248:	2200      	movs	r2, #0
 801124a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801124e:	f002 f861 	bl	8013314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011252:	1d3a      	adds	r2, r7, #4
 8011254:	f107 0314 	add.w	r3, r7, #20
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f001 f952 	bl	8012504 <xTaskCheckForTimeOut>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d124      	bne.n	80112b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011268:	f000 fb5e 	bl	8011928 <prvIsQueueFull>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d018      	beq.n	80112a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	3310      	adds	r3, #16
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	4611      	mov	r1, r2
 801127a:	4618      	mov	r0, r3
 801127c:	f000 ffda 	bl	8012234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011282:	f000 fae9 	bl	8011858 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011286:	f000 fe0f 	bl	8011ea8 <xTaskResumeAll>
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	f47f af7c 	bne.w	801118a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011292:	4b0c      	ldr	r3, [pc, #48]	; (80112c4 <xQueueGenericSend+0x1f8>)
 8011294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	e772      	b.n	801118a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80112a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112a6:	f000 fad7 	bl	8011858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112aa:	f000 fdfd 	bl	8011ea8 <xTaskResumeAll>
 80112ae:	e76c      	b.n	801118a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80112b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112b2:	f000 fad1 	bl	8011858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112b6:	f000 fdf7 	bl	8011ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80112ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3738      	adds	r7, #56	; 0x38
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	e000ed04 	.word	0xe000ed04

080112c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b090      	sub	sp, #64	; 0x40
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80112da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10a      	bne.n	80112f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80112e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80112f2:	bf00      	nop
 80112f4:	e7fe      	b.n	80112f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d103      	bne.n	8011304 <xQueueGenericSendFromISR+0x3c>
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <xQueueGenericSendFromISR+0x40>
 8011304:	2301      	movs	r3, #1
 8011306:	e000      	b.n	801130a <xQueueGenericSendFromISR+0x42>
 8011308:	2300      	movs	r3, #0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d10a      	bne.n	8011324 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011320:	bf00      	nop
 8011322:	e7fe      	b.n	8011322 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	2b02      	cmp	r3, #2
 8011328:	d103      	bne.n	8011332 <xQueueGenericSendFromISR+0x6a>
 801132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801132e:	2b01      	cmp	r3, #1
 8011330:	d101      	bne.n	8011336 <xQueueGenericSendFromISR+0x6e>
 8011332:	2301      	movs	r3, #1
 8011334:	e000      	b.n	8011338 <xQueueGenericSendFromISR+0x70>
 8011336:	2300      	movs	r3, #0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10a      	bne.n	8011352 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801133c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011340:	f383 8811 	msr	BASEPRI, r3
 8011344:	f3bf 8f6f 	isb	sy
 8011348:	f3bf 8f4f 	dsb	sy
 801134c:	623b      	str	r3, [r7, #32]
}
 801134e:	bf00      	nop
 8011350:	e7fe      	b.n	8011350 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011352:	f002 f891 	bl	8013478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011356:	f3ef 8211 	mrs	r2, BASEPRI
 801135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135e:	f383 8811 	msr	BASEPRI, r3
 8011362:	f3bf 8f6f 	isb	sy
 8011366:	f3bf 8f4f 	dsb	sy
 801136a:	61fa      	str	r2, [r7, #28]
 801136c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801136e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011370:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801137a:	429a      	cmp	r2, r3
 801137c:	d302      	bcc.n	8011384 <xQueueGenericSendFromISR+0xbc>
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2b02      	cmp	r3, #2
 8011382:	d12f      	bne.n	80113e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801138a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011392:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	68b9      	ldr	r1, [r7, #8]
 8011398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801139a:	f000 f9cd 	bl	8011738 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801139e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80113a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113a6:	d112      	bne.n	80113ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d016      	beq.n	80113de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	3324      	adds	r3, #36	; 0x24
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 ffc9 	bl	801234c <xTaskRemoveFromEventList>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d00e      	beq.n	80113de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00b      	beq.n	80113de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2201      	movs	r2, #1
 80113ca:	601a      	str	r2, [r3, #0]
 80113cc:	e007      	b.n	80113de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80113ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80113d2:	3301      	adds	r3, #1
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	b25a      	sxtb	r2, r3
 80113d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80113de:	2301      	movs	r3, #1
 80113e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80113e2:	e001      	b.n	80113e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80113e4:	2300      	movs	r3, #0
 80113e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80113f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3740      	adds	r7, #64	; 0x40
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
	...

08011400 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b08c      	sub	sp, #48	; 0x30
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801140c:	2300      	movs	r3, #0
 801140e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011416:	2b00      	cmp	r3, #0
 8011418:	d10a      	bne.n	8011430 <xQueueReceive+0x30>
	__asm volatile
 801141a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141e:	f383 8811 	msr	BASEPRI, r3
 8011422:	f3bf 8f6f 	isb	sy
 8011426:	f3bf 8f4f 	dsb	sy
 801142a:	623b      	str	r3, [r7, #32]
}
 801142c:	bf00      	nop
 801142e:	e7fe      	b.n	801142e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d103      	bne.n	801143e <xQueueReceive+0x3e>
 8011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143a:	2b00      	cmp	r3, #0
 801143c:	d101      	bne.n	8011442 <xQueueReceive+0x42>
 801143e:	2301      	movs	r3, #1
 8011440:	e000      	b.n	8011444 <xQueueReceive+0x44>
 8011442:	2300      	movs	r3, #0
 8011444:	2b00      	cmp	r3, #0
 8011446:	d10a      	bne.n	801145e <xQueueReceive+0x5e>
	__asm volatile
 8011448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144c:	f383 8811 	msr	BASEPRI, r3
 8011450:	f3bf 8f6f 	isb	sy
 8011454:	f3bf 8f4f 	dsb	sy
 8011458:	61fb      	str	r3, [r7, #28]
}
 801145a:	bf00      	nop
 801145c:	e7fe      	b.n	801145c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801145e:	f001 f995 	bl	801278c <xTaskGetSchedulerState>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d102      	bne.n	801146e <xQueueReceive+0x6e>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <xQueueReceive+0x72>
 801146e:	2301      	movs	r3, #1
 8011470:	e000      	b.n	8011474 <xQueueReceive+0x74>
 8011472:	2300      	movs	r3, #0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d10a      	bne.n	801148e <xQueueReceive+0x8e>
	__asm volatile
 8011478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147c:	f383 8811 	msr	BASEPRI, r3
 8011480:	f3bf 8f6f 	isb	sy
 8011484:	f3bf 8f4f 	dsb	sy
 8011488:	61bb      	str	r3, [r7, #24]
}
 801148a:	bf00      	nop
 801148c:	e7fe      	b.n	801148c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801148e:	f001 ff11 	bl	80132b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011496:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149a:	2b00      	cmp	r3, #0
 801149c:	d01f      	beq.n	80114de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801149e:	68b9      	ldr	r1, [r7, #8]
 80114a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114a2:	f000 f9b3 	bl	801180c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a8:	1e5a      	subs	r2, r3, #1
 80114aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00f      	beq.n	80114d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b8:	3310      	adds	r3, #16
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 ff46 	bl	801234c <xTaskRemoveFromEventList>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d007      	beq.n	80114d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80114c6:	4b3d      	ldr	r3, [pc, #244]	; (80115bc <xQueueReceive+0x1bc>)
 80114c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114cc:	601a      	str	r2, [r3, #0]
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80114d6:	f001 ff1d 	bl	8013314 <vPortExitCritical>
				return pdPASS;
 80114da:	2301      	movs	r3, #1
 80114dc:	e069      	b.n	80115b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d103      	bne.n	80114ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80114e4:	f001 ff16 	bl	8013314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80114e8:	2300      	movs	r3, #0
 80114ea:	e062      	b.n	80115b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80114ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d106      	bne.n	8011500 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80114f2:	f107 0310 	add.w	r3, r7, #16
 80114f6:	4618      	mov	r0, r3
 80114f8:	f000 ffee 	bl	80124d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80114fc:	2301      	movs	r3, #1
 80114fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011500:	f001 ff08 	bl	8013314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011504:	f000 fcc2 	bl	8011e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011508:	f001 fed4 	bl	80132b4 <vPortEnterCritical>
 801150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011512:	b25b      	sxtb	r3, r3
 8011514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011518:	d103      	bne.n	8011522 <xQueueReceive+0x122>
 801151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151c:	2200      	movs	r2, #0
 801151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011528:	b25b      	sxtb	r3, r3
 801152a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801152e:	d103      	bne.n	8011538 <xQueueReceive+0x138>
 8011530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011532:	2200      	movs	r2, #0
 8011534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011538:	f001 feec 	bl	8013314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801153c:	1d3a      	adds	r2, r7, #4
 801153e:	f107 0310 	add.w	r3, r7, #16
 8011542:	4611      	mov	r1, r2
 8011544:	4618      	mov	r0, r3
 8011546:	f000 ffdd 	bl	8012504 <xTaskCheckForTimeOut>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d123      	bne.n	8011598 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011552:	f000 f9d3 	bl	80118fc <prvIsQueueEmpty>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d017      	beq.n	801158c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155e:	3324      	adds	r3, #36	; 0x24
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	4611      	mov	r1, r2
 8011564:	4618      	mov	r0, r3
 8011566:	f000 fe65 	bl	8012234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801156a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801156c:	f000 f974 	bl	8011858 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011570:	f000 fc9a 	bl	8011ea8 <xTaskResumeAll>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d189      	bne.n	801148e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801157a:	4b10      	ldr	r3, [pc, #64]	; (80115bc <xQueueReceive+0x1bc>)
 801157c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	f3bf 8f4f 	dsb	sy
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	e780      	b.n	801148e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801158c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801158e:	f000 f963 	bl	8011858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011592:	f000 fc89 	bl	8011ea8 <xTaskResumeAll>
 8011596:	e77a      	b.n	801148e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801159a:	f000 f95d 	bl	8011858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801159e:	f000 fc83 	bl	8011ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115a4:	f000 f9aa 	bl	80118fc <prvIsQueueEmpty>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f43f af6f 	beq.w	801148e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80115b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3730      	adds	r7, #48	; 0x30
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	e000ed04 	.word	0xe000ed04

080115c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08e      	sub	sp, #56	; 0x38
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80115d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d10a      	bne.n	80115ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80115d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115da:	f383 8811 	msr	BASEPRI, r3
 80115de:	f3bf 8f6f 	isb	sy
 80115e2:	f3bf 8f4f 	dsb	sy
 80115e6:	623b      	str	r3, [r7, #32]
}
 80115e8:	bf00      	nop
 80115ea:	e7fe      	b.n	80115ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d103      	bne.n	80115fa <xQueueReceiveFromISR+0x3a>
 80115f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d101      	bne.n	80115fe <xQueueReceiveFromISR+0x3e>
 80115fa:	2301      	movs	r3, #1
 80115fc:	e000      	b.n	8011600 <xQueueReceiveFromISR+0x40>
 80115fe:	2300      	movs	r3, #0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10a      	bne.n	801161a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011608:	f383 8811 	msr	BASEPRI, r3
 801160c:	f3bf 8f6f 	isb	sy
 8011610:	f3bf 8f4f 	dsb	sy
 8011614:	61fb      	str	r3, [r7, #28]
}
 8011616:	bf00      	nop
 8011618:	e7fe      	b.n	8011618 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801161a:	f001 ff2d 	bl	8013478 <vPortValidateInterruptPriority>
	__asm volatile
 801161e:	f3ef 8211 	mrs	r2, BASEPRI
 8011622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011626:	f383 8811 	msr	BASEPRI, r3
 801162a:	f3bf 8f6f 	isb	sy
 801162e:	f3bf 8f4f 	dsb	sy
 8011632:	61ba      	str	r2, [r7, #24]
 8011634:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011636:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011638:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801163e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011642:	2b00      	cmp	r3, #0
 8011644:	d02f      	beq.n	80116a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801164c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011650:	68b9      	ldr	r1, [r7, #8]
 8011652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011654:	f000 f8da 	bl	801180c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165a:	1e5a      	subs	r2, r3, #1
 801165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011668:	d112      	bne.n	8011690 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d016      	beq.n	80116a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011674:	3310      	adds	r3, #16
 8011676:	4618      	mov	r0, r3
 8011678:	f000 fe68 	bl	801234c <xTaskRemoveFromEventList>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00e      	beq.n	80116a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d00b      	beq.n	80116a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2201      	movs	r2, #1
 801168c:	601a      	str	r2, [r3, #0]
 801168e:	e007      	b.n	80116a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011694:	3301      	adds	r3, #1
 8011696:	b2db      	uxtb	r3, r3
 8011698:	b25a      	sxtb	r2, r3
 801169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80116a0:	2301      	movs	r3, #1
 80116a2:	637b      	str	r3, [r7, #52]	; 0x34
 80116a4:	e001      	b.n	80116aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80116a6:	2300      	movs	r3, #0
 80116a8:	637b      	str	r3, [r7, #52]	; 0x34
 80116aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	f383 8811 	msr	BASEPRI, r3
}
 80116b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80116b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3738      	adds	r7, #56	; 0x38
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10a      	bne.n	80116e4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80116ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d2:	f383 8811 	msr	BASEPRI, r3
 80116d6:	f3bf 8f6f 	isb	sy
 80116da:	f3bf 8f4f 	dsb	sy
 80116de:	60bb      	str	r3, [r7, #8]
}
 80116e0:	bf00      	nop
 80116e2:	e7fe      	b.n	80116e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80116e4:	f001 fde6 	bl	80132b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80116ee:	f001 fe11 	bl	8013314 <vPortExitCritical>

	return uxReturn;
 80116f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80116f4:	4618      	mov	r0, r3
 80116f6:	3710      	adds	r7, #16
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80116fc:	b480      	push	{r7}
 80116fe:	b087      	sub	sp, #28
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d10a      	bne.n	8011724 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011712:	f383 8811 	msr	BASEPRI, r3
 8011716:	f3bf 8f6f 	isb	sy
 801171a:	f3bf 8f4f 	dsb	sy
 801171e:	60fb      	str	r3, [r7, #12]
}
 8011720:	bf00      	nop
 8011722:	e7fe      	b.n	8011722 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011728:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801172a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801172c:	4618      	mov	r0, r3
 801172e:	371c      	adds	r7, #28
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011744:	2300      	movs	r3, #0
 8011746:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801174c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10d      	bne.n	8011772 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d14d      	bne.n	80117fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	4618      	mov	r0, r3
 8011764:	f001 f830 	bl	80127c8 <xTaskPriorityDisinherit>
 8011768:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2200      	movs	r2, #0
 801176e:	609a      	str	r2, [r3, #8]
 8011770:	e043      	b.n	80117fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d119      	bne.n	80117ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	6858      	ldr	r0, [r3, #4]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011780:	461a      	mov	r2, r3
 8011782:	68b9      	ldr	r1, [r7, #8]
 8011784:	f002 f8dc 	bl	8013940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	685a      	ldr	r2, [r3, #4]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011790:	441a      	add	r2, r3
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d32b      	bcc.n	80117fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	605a      	str	r2, [r3, #4]
 80117aa:	e026      	b.n	80117fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	68d8      	ldr	r0, [r3, #12]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b4:	461a      	mov	r2, r3
 80117b6:	68b9      	ldr	r1, [r7, #8]
 80117b8:	f002 f8c2 	bl	8013940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	68da      	ldr	r2, [r3, #12]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c4:	425b      	negs	r3, r3
 80117c6:	441a      	add	r2, r3
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	68da      	ldr	r2, [r3, #12]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d207      	bcs.n	80117e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	689a      	ldr	r2, [r3, #8]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117e0:	425b      	negs	r3, r3
 80117e2:	441a      	add	r2, r3
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b02      	cmp	r3, #2
 80117ec:	d105      	bne.n	80117fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d002      	beq.n	80117fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	3b01      	subs	r3, #1
 80117f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011802:	697b      	ldr	r3, [r7, #20]
}
 8011804:	4618      	mov	r0, r3
 8011806:	3718      	adds	r7, #24
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801181a:	2b00      	cmp	r3, #0
 801181c:	d018      	beq.n	8011850 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68da      	ldr	r2, [r3, #12]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011826:	441a      	add	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	68da      	ldr	r2, [r3, #12]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	429a      	cmp	r2, r3
 8011836:	d303      	bcc.n	8011840 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	68d9      	ldr	r1, [r3, #12]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011848:	461a      	mov	r2, r3
 801184a:	6838      	ldr	r0, [r7, #0]
 801184c:	f002 f878 	bl	8013940 <memcpy>
	}
}
 8011850:	bf00      	nop
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011860:	f001 fd28 	bl	80132b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801186a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801186c:	e011      	b.n	8011892 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011872:	2b00      	cmp	r3, #0
 8011874:	d012      	beq.n	801189c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	3324      	adds	r3, #36	; 0x24
 801187a:	4618      	mov	r0, r3
 801187c:	f000 fd66 	bl	801234c <xTaskRemoveFromEventList>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d001      	beq.n	801188a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011886:	f000 fe9f 	bl	80125c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801188a:	7bfb      	ldrb	r3, [r7, #15]
 801188c:	3b01      	subs	r3, #1
 801188e:	b2db      	uxtb	r3, r3
 8011890:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011896:	2b00      	cmp	r3, #0
 8011898:	dce9      	bgt.n	801186e <prvUnlockQueue+0x16>
 801189a:	e000      	b.n	801189e <prvUnlockQueue+0x46>
					break;
 801189c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	22ff      	movs	r2, #255	; 0xff
 80118a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80118a6:	f001 fd35 	bl	8013314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80118aa:	f001 fd03 	bl	80132b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80118b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80118b6:	e011      	b.n	80118dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	691b      	ldr	r3, [r3, #16]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d012      	beq.n	80118e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	3310      	adds	r3, #16
 80118c4:	4618      	mov	r0, r3
 80118c6:	f000 fd41 	bl	801234c <xTaskRemoveFromEventList>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d001      	beq.n	80118d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80118d0:	f000 fe7a 	bl	80125c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80118d4:	7bbb      	ldrb	r3, [r7, #14]
 80118d6:	3b01      	subs	r3, #1
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80118dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	dce9      	bgt.n	80118b8 <prvUnlockQueue+0x60>
 80118e4:	e000      	b.n	80118e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80118e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	22ff      	movs	r2, #255	; 0xff
 80118ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80118f0:	f001 fd10 	bl	8013314 <vPortExitCritical>
}
 80118f4:	bf00      	nop
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011904:	f001 fcd6 	bl	80132b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801190c:	2b00      	cmp	r3, #0
 801190e:	d102      	bne.n	8011916 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011910:	2301      	movs	r3, #1
 8011912:	60fb      	str	r3, [r7, #12]
 8011914:	e001      	b.n	801191a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011916:	2300      	movs	r3, #0
 8011918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801191a:	f001 fcfb 	bl	8013314 <vPortExitCritical>

	return xReturn;
 801191e:	68fb      	ldr	r3, [r7, #12]
}
 8011920:	4618      	mov	r0, r3
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b084      	sub	sp, #16
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011930:	f001 fcc0 	bl	80132b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801193c:	429a      	cmp	r2, r3
 801193e:	d102      	bne.n	8011946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011940:	2301      	movs	r3, #1
 8011942:	60fb      	str	r3, [r7, #12]
 8011944:	e001      	b.n	801194a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011946:	2300      	movs	r3, #0
 8011948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801194a:	f001 fce3 	bl	8013314 <vPortExitCritical>

	return xReturn;
 801194e:	68fb      	ldr	r3, [r7, #12]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3710      	adds	r7, #16
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011962:	2300      	movs	r3, #0
 8011964:	60fb      	str	r3, [r7, #12]
 8011966:	e014      	b.n	8011992 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011968:	4a0f      	ldr	r2, [pc, #60]	; (80119a8 <vQueueAddToRegistry+0x50>)
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d10b      	bne.n	801198c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011974:	490c      	ldr	r1, [pc, #48]	; (80119a8 <vQueueAddToRegistry+0x50>)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	683a      	ldr	r2, [r7, #0]
 801197a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801197e:	4a0a      	ldr	r2, [pc, #40]	; (80119a8 <vQueueAddToRegistry+0x50>)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	00db      	lsls	r3, r3, #3
 8011984:	4413      	add	r3, r2
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801198a:	e006      	b.n	801199a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	3301      	adds	r3, #1
 8011990:	60fb      	str	r3, [r7, #12]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2b07      	cmp	r3, #7
 8011996:	d9e7      	bls.n	8011968 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011998:	bf00      	nop
 801199a:	bf00      	nop
 801199c:	3714      	adds	r7, #20
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	24000e18 	.word	0x24000e18

080119ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b086      	sub	sp, #24
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80119bc:	f001 fc7a 	bl	80132b4 <vPortEnterCritical>
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119c6:	b25b      	sxtb	r3, r3
 80119c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119cc:	d103      	bne.n	80119d6 <vQueueWaitForMessageRestricted+0x2a>
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2200      	movs	r2, #0
 80119d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119dc:	b25b      	sxtb	r3, r3
 80119de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119e2:	d103      	bne.n	80119ec <vQueueWaitForMessageRestricted+0x40>
 80119e4:	697b      	ldr	r3, [r7, #20]
 80119e6:	2200      	movs	r2, #0
 80119e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119ec:	f001 fc92 	bl	8013314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d106      	bne.n	8011a06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	3324      	adds	r3, #36	; 0x24
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	68b9      	ldr	r1, [r7, #8]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 fc77 	bl	80122f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011a06:	6978      	ldr	r0, [r7, #20]
 8011a08:	f7ff ff26 	bl	8011858 <prvUnlockQueue>
	}
 8011a0c:	bf00      	nop
 8011a0e:	3718      	adds	r7, #24
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b08e      	sub	sp, #56	; 0x38
 8011a18:	af04      	add	r7, sp, #16
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d10a      	bne.n	8011a3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2c:	f383 8811 	msr	BASEPRI, r3
 8011a30:	f3bf 8f6f 	isb	sy
 8011a34:	f3bf 8f4f 	dsb	sy
 8011a38:	623b      	str	r3, [r7, #32]
}
 8011a3a:	bf00      	nop
 8011a3c:	e7fe      	b.n	8011a3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10a      	bne.n	8011a5a <xTaskCreateStatic+0x46>
	__asm volatile
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	f383 8811 	msr	BASEPRI, r3
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	61fb      	str	r3, [r7, #28]
}
 8011a56:	bf00      	nop
 8011a58:	e7fe      	b.n	8011a58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011a5a:	235c      	movs	r3, #92	; 0x5c
 8011a5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	2b5c      	cmp	r3, #92	; 0x5c
 8011a62:	d00a      	beq.n	8011a7a <xTaskCreateStatic+0x66>
	__asm volatile
 8011a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a68:	f383 8811 	msr	BASEPRI, r3
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	61bb      	str	r3, [r7, #24]
}
 8011a76:	bf00      	nop
 8011a78:	e7fe      	b.n	8011a78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011a7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d01e      	beq.n	8011ac0 <xTaskCreateStatic+0xac>
 8011a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d01b      	beq.n	8011ac0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a94:	2202      	movs	r2, #2
 8011a96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	9303      	str	r3, [sp, #12]
 8011a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa0:	9302      	str	r3, [sp, #8]
 8011aa2:	f107 0314 	add.w	r3, r7, #20
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	9300      	str	r3, [sp, #0]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	68b9      	ldr	r1, [r7, #8]
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f000 f850 	bl	8011b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011aba:	f000 f8dd 	bl	8011c78 <prvAddNewTaskToReadyList>
 8011abe:	e001      	b.n	8011ac4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011ac4:	697b      	ldr	r3, [r7, #20]
	}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3728      	adds	r7, #40	; 0x28
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b08c      	sub	sp, #48	; 0x30
 8011ad2:	af04      	add	r7, sp, #16
 8011ad4:	60f8      	str	r0, [r7, #12]
 8011ad6:	60b9      	str	r1, [r7, #8]
 8011ad8:	603b      	str	r3, [r7, #0]
 8011ada:	4613      	mov	r3, r2
 8011adc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011ade:	88fb      	ldrh	r3, [r7, #6]
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f001 fd08 	bl	80134f8 <pvPortMalloc>
 8011ae8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00e      	beq.n	8011b0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011af0:	205c      	movs	r0, #92	; 0x5c
 8011af2:	f001 fd01 	bl	80134f8 <pvPortMalloc>
 8011af6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d003      	beq.n	8011b06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	697a      	ldr	r2, [r7, #20]
 8011b02:	631a      	str	r2, [r3, #48]	; 0x30
 8011b04:	e005      	b.n	8011b12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011b06:	6978      	ldr	r0, [r7, #20]
 8011b08:	f001 fdc2 	bl	8013690 <vPortFree>
 8011b0c:	e001      	b.n	8011b12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d017      	beq.n	8011b48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011b20:	88fa      	ldrh	r2, [r7, #6]
 8011b22:	2300      	movs	r3, #0
 8011b24:	9303      	str	r3, [sp, #12]
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	9302      	str	r3, [sp, #8]
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	68b9      	ldr	r1, [r7, #8]
 8011b36:	68f8      	ldr	r0, [r7, #12]
 8011b38:	f000 f80e 	bl	8011b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011b3c:	69f8      	ldr	r0, [r7, #28]
 8011b3e:	f000 f89b 	bl	8011c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011b42:	2301      	movs	r3, #1
 8011b44:	61bb      	str	r3, [r7, #24]
 8011b46:	e002      	b.n	8011b4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011b4e:	69bb      	ldr	r3, [r7, #24]
	}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3720      	adds	r7, #32
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b088      	sub	sp, #32
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	60b9      	str	r1, [r7, #8]
 8011b62:	607a      	str	r2, [r7, #4]
 8011b64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	461a      	mov	r2, r3
 8011b70:	21a5      	movs	r1, #165	; 0xa5
 8011b72:	f001 fef3 	bl	801395c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b7a:	6879      	ldr	r1, [r7, #4]
 8011b7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011b80:	440b      	add	r3, r1
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4413      	add	r3, r2
 8011b86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	f023 0307 	bic.w	r3, r3, #7
 8011b8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	f003 0307 	and.w	r3, r3, #7
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00a      	beq.n	8011bb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9e:	f383 8811 	msr	BASEPRI, r3
 8011ba2:	f3bf 8f6f 	isb	sy
 8011ba6:	f3bf 8f4f 	dsb	sy
 8011baa:	617b      	str	r3, [r7, #20]
}
 8011bac:	bf00      	nop
 8011bae:	e7fe      	b.n	8011bae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d01f      	beq.n	8011bf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	61fb      	str	r3, [r7, #28]
 8011bba:	e012      	b.n	8011be2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	7819      	ldrb	r1, [r3, #0]
 8011bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	4413      	add	r3, r2
 8011bca:	3334      	adds	r3, #52	; 0x34
 8011bcc:	460a      	mov	r2, r1
 8011bce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d006      	beq.n	8011bea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	3301      	adds	r3, #1
 8011be0:	61fb      	str	r3, [r7, #28]
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	2b0f      	cmp	r3, #15
 8011be6:	d9e9      	bls.n	8011bbc <prvInitialiseNewTask+0x64>
 8011be8:	e000      	b.n	8011bec <prvInitialiseNewTask+0x94>
			{
				break;
 8011bea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011bf4:	e003      	b.n	8011bfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c00:	2b37      	cmp	r3, #55	; 0x37
 8011c02:	d901      	bls.n	8011c08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011c04:	2337      	movs	r3, #55	; 0x37
 8011c06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c16:	2200      	movs	r2, #0
 8011c18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7ff f882 	bl	8010d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c26:	3318      	adds	r3, #24
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7ff f87d 	bl	8010d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c46:	2200      	movs	r2, #0
 8011c48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c52:	683a      	ldr	r2, [r7, #0]
 8011c54:	68f9      	ldr	r1, [r7, #12]
 8011c56:	69b8      	ldr	r0, [r7, #24]
 8011c58:	f001 f9fe 	bl	8013058 <pxPortInitialiseStack>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c6e:	bf00      	nop
 8011c70:	3720      	adds	r7, #32
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
	...

08011c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011c80:	f001 fb18 	bl	80132b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011c84:	4b2d      	ldr	r3, [pc, #180]	; (8011d3c <prvAddNewTaskToReadyList+0xc4>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	4a2c      	ldr	r2, [pc, #176]	; (8011d3c <prvAddNewTaskToReadyList+0xc4>)
 8011c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011c8e:	4b2c      	ldr	r3, [pc, #176]	; (8011d40 <prvAddNewTaskToReadyList+0xc8>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d109      	bne.n	8011caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011c96:	4a2a      	ldr	r2, [pc, #168]	; (8011d40 <prvAddNewTaskToReadyList+0xc8>)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011c9c:	4b27      	ldr	r3, [pc, #156]	; (8011d3c <prvAddNewTaskToReadyList+0xc4>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d110      	bne.n	8011cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011ca4:	f000 fcb4 	bl	8012610 <prvInitialiseTaskLists>
 8011ca8:	e00d      	b.n	8011cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011caa:	4b26      	ldr	r3, [pc, #152]	; (8011d44 <prvAddNewTaskToReadyList+0xcc>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d109      	bne.n	8011cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011cb2:	4b23      	ldr	r3, [pc, #140]	; (8011d40 <prvAddNewTaskToReadyList+0xc8>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d802      	bhi.n	8011cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011cc0:	4a1f      	ldr	r2, [pc, #124]	; (8011d40 <prvAddNewTaskToReadyList+0xc8>)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011cc6:	4b20      	ldr	r3, [pc, #128]	; (8011d48 <prvAddNewTaskToReadyList+0xd0>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	4a1e      	ldr	r2, [pc, #120]	; (8011d48 <prvAddNewTaskToReadyList+0xd0>)
 8011cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011cd0:	4b1d      	ldr	r3, [pc, #116]	; (8011d48 <prvAddNewTaskToReadyList+0xd0>)
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cdc:	4b1b      	ldr	r3, [pc, #108]	; (8011d4c <prvAddNewTaskToReadyList+0xd4>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d903      	bls.n	8011cec <prvAddNewTaskToReadyList+0x74>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce8:	4a18      	ldr	r2, [pc, #96]	; (8011d4c <prvAddNewTaskToReadyList+0xd4>)
 8011cea:	6013      	str	r3, [r2, #0]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	4413      	add	r3, r2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4a15      	ldr	r2, [pc, #84]	; (8011d50 <prvAddNewTaskToReadyList+0xd8>)
 8011cfa:	441a      	add	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	3304      	adds	r3, #4
 8011d00:	4619      	mov	r1, r3
 8011d02:	4610      	mov	r0, r2
 8011d04:	f7ff f81d 	bl	8010d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011d08:	f001 fb04 	bl	8013314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011d0c:	4b0d      	ldr	r3, [pc, #52]	; (8011d44 <prvAddNewTaskToReadyList+0xcc>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d00e      	beq.n	8011d32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011d14:	4b0a      	ldr	r3, [pc, #40]	; (8011d40 <prvAddNewTaskToReadyList+0xc8>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d207      	bcs.n	8011d32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011d22:	4b0c      	ldr	r3, [pc, #48]	; (8011d54 <prvAddNewTaskToReadyList+0xdc>)
 8011d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	f3bf 8f4f 	dsb	sy
 8011d2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d32:	bf00      	nop
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	2400132c 	.word	0x2400132c
 8011d40:	24000e58 	.word	0x24000e58
 8011d44:	24001338 	.word	0x24001338
 8011d48:	24001348 	.word	0x24001348
 8011d4c:	24001334 	.word	0x24001334
 8011d50:	24000e5c 	.word	0x24000e5c
 8011d54:	e000ed04 	.word	0xe000ed04

08011d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011d60:	2300      	movs	r3, #0
 8011d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d017      	beq.n	8011d9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011d6a:	4b13      	ldr	r3, [pc, #76]	; (8011db8 <vTaskDelay+0x60>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00a      	beq.n	8011d88 <vTaskDelay+0x30>
	__asm volatile
 8011d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d76:	f383 8811 	msr	BASEPRI, r3
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	60bb      	str	r3, [r7, #8]
}
 8011d84:	bf00      	nop
 8011d86:	e7fe      	b.n	8011d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011d88:	f000 f880 	bl	8011e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fda0 	bl	80128d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011d94:	f000 f888 	bl	8011ea8 <xTaskResumeAll>
 8011d98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d107      	bne.n	8011db0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011da0:	4b06      	ldr	r3, [pc, #24]	; (8011dbc <vTaskDelay+0x64>)
 8011da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011da6:	601a      	str	r2, [r3, #0]
 8011da8:	f3bf 8f4f 	dsb	sy
 8011dac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011db0:	bf00      	nop
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	24001354 	.word	0x24001354
 8011dbc:	e000ed04 	.word	0xe000ed04

08011dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b08a      	sub	sp, #40	; 0x28
 8011dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011dce:	463a      	mov	r2, r7
 8011dd0:	1d39      	adds	r1, r7, #4
 8011dd2:	f107 0308 	add.w	r3, r7, #8
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fe fd64 	bl	80108a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011ddc:	6839      	ldr	r1, [r7, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	9202      	str	r2, [sp, #8]
 8011de4:	9301      	str	r3, [sp, #4]
 8011de6:	2300      	movs	r3, #0
 8011de8:	9300      	str	r3, [sp, #0]
 8011dea:	2300      	movs	r3, #0
 8011dec:	460a      	mov	r2, r1
 8011dee:	4921      	ldr	r1, [pc, #132]	; (8011e74 <vTaskStartScheduler+0xb4>)
 8011df0:	4821      	ldr	r0, [pc, #132]	; (8011e78 <vTaskStartScheduler+0xb8>)
 8011df2:	f7ff fe0f 	bl	8011a14 <xTaskCreateStatic>
 8011df6:	4603      	mov	r3, r0
 8011df8:	4a20      	ldr	r2, [pc, #128]	; (8011e7c <vTaskStartScheduler+0xbc>)
 8011dfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011dfc:	4b1f      	ldr	r3, [pc, #124]	; (8011e7c <vTaskStartScheduler+0xbc>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011e04:	2301      	movs	r3, #1
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e001      	b.n	8011e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d102      	bne.n	8011e1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011e14:	f000 fdb2 	bl	801297c <xTimerCreateTimerTask>
 8011e18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d116      	bne.n	8011e4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	613b      	str	r3, [r7, #16]
}
 8011e32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011e34:	4b12      	ldr	r3, [pc, #72]	; (8011e80 <vTaskStartScheduler+0xc0>)
 8011e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011e3c:	4b11      	ldr	r3, [pc, #68]	; (8011e84 <vTaskStartScheduler+0xc4>)
 8011e3e:	2201      	movs	r2, #1
 8011e40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011e42:	4b11      	ldr	r3, [pc, #68]	; (8011e88 <vTaskStartScheduler+0xc8>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011e48:	f001 f992 	bl	8013170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011e4c:	e00e      	b.n	8011e6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e54:	d10a      	bne.n	8011e6c <vTaskStartScheduler+0xac>
	__asm volatile
 8011e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	60fb      	str	r3, [r7, #12]
}
 8011e68:	bf00      	nop
 8011e6a:	e7fe      	b.n	8011e6a <vTaskStartScheduler+0xaa>
}
 8011e6c:	bf00      	nop
 8011e6e:	3718      	adds	r7, #24
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	08014b98 	.word	0x08014b98
 8011e78:	080125e1 	.word	0x080125e1
 8011e7c:	24001350 	.word	0x24001350
 8011e80:	2400134c 	.word	0x2400134c
 8011e84:	24001338 	.word	0x24001338
 8011e88:	24001330 	.word	0x24001330

08011e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011e90:	4b04      	ldr	r3, [pc, #16]	; (8011ea4 <vTaskSuspendAll+0x18>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	3301      	adds	r3, #1
 8011e96:	4a03      	ldr	r2, [pc, #12]	; (8011ea4 <vTaskSuspendAll+0x18>)
 8011e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011e9a:	bf00      	nop
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	24001354 	.word	0x24001354

08011ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011eb6:	4b42      	ldr	r3, [pc, #264]	; (8011fc0 <xTaskResumeAll+0x118>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d10a      	bne.n	8011ed4 <xTaskResumeAll+0x2c>
	__asm volatile
 8011ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec2:	f383 8811 	msr	BASEPRI, r3
 8011ec6:	f3bf 8f6f 	isb	sy
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	603b      	str	r3, [r7, #0]
}
 8011ed0:	bf00      	nop
 8011ed2:	e7fe      	b.n	8011ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011ed4:	f001 f9ee 	bl	80132b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011ed8:	4b39      	ldr	r3, [pc, #228]	; (8011fc0 <xTaskResumeAll+0x118>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	4a38      	ldr	r2, [pc, #224]	; (8011fc0 <xTaskResumeAll+0x118>)
 8011ee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ee2:	4b37      	ldr	r3, [pc, #220]	; (8011fc0 <xTaskResumeAll+0x118>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d162      	bne.n	8011fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011eea:	4b36      	ldr	r3, [pc, #216]	; (8011fc4 <xTaskResumeAll+0x11c>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d05e      	beq.n	8011fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ef2:	e02f      	b.n	8011f54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ef4:	4b34      	ldr	r3, [pc, #208]	; (8011fc8 <xTaskResumeAll+0x120>)
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	68db      	ldr	r3, [r3, #12]
 8011efa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	3318      	adds	r3, #24
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe ff7b 	bl	8010dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	3304      	adds	r3, #4
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fe ff76 	bl	8010dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f14:	4b2d      	ldr	r3, [pc, #180]	; (8011fcc <xTaskResumeAll+0x124>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d903      	bls.n	8011f24 <xTaskResumeAll+0x7c>
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f20:	4a2a      	ldr	r2, [pc, #168]	; (8011fcc <xTaskResumeAll+0x124>)
 8011f22:	6013      	str	r3, [r2, #0]
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f28:	4613      	mov	r3, r2
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	4413      	add	r3, r2
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	4a27      	ldr	r2, [pc, #156]	; (8011fd0 <xTaskResumeAll+0x128>)
 8011f32:	441a      	add	r2, r3
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	3304      	adds	r3, #4
 8011f38:	4619      	mov	r1, r3
 8011f3a:	4610      	mov	r0, r2
 8011f3c:	f7fe ff01 	bl	8010d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f44:	4b23      	ldr	r3, [pc, #140]	; (8011fd4 <xTaskResumeAll+0x12c>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d302      	bcc.n	8011f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011f4e:	4b22      	ldr	r3, [pc, #136]	; (8011fd8 <xTaskResumeAll+0x130>)
 8011f50:	2201      	movs	r2, #1
 8011f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f54:	4b1c      	ldr	r3, [pc, #112]	; (8011fc8 <xTaskResumeAll+0x120>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1cb      	bne.n	8011ef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d001      	beq.n	8011f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011f62:	f000 fbf3 	bl	801274c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011f66:	4b1d      	ldr	r3, [pc, #116]	; (8011fdc <xTaskResumeAll+0x134>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d010      	beq.n	8011f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011f72:	f000 f847 	bl	8012004 <xTaskIncrementTick>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011f7c:	4b16      	ldr	r3, [pc, #88]	; (8011fd8 <xTaskResumeAll+0x130>)
 8011f7e:	2201      	movs	r2, #1
 8011f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1f1      	bne.n	8011f72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011f8e:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <xTaskResumeAll+0x134>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011f94:	4b10      	ldr	r3, [pc, #64]	; (8011fd8 <xTaskResumeAll+0x130>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d009      	beq.n	8011fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011fa0:	4b0f      	ldr	r3, [pc, #60]	; (8011fe0 <xTaskResumeAll+0x138>)
 8011fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fa6:	601a      	str	r2, [r3, #0]
 8011fa8:	f3bf 8f4f 	dsb	sy
 8011fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011fb0:	f001 f9b0 	bl	8013314 <vPortExitCritical>

	return xAlreadyYielded;
 8011fb4:	68bb      	ldr	r3, [r7, #8]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	24001354 	.word	0x24001354
 8011fc4:	2400132c 	.word	0x2400132c
 8011fc8:	240012ec 	.word	0x240012ec
 8011fcc:	24001334 	.word	0x24001334
 8011fd0:	24000e5c 	.word	0x24000e5c
 8011fd4:	24000e58 	.word	0x24000e58
 8011fd8:	24001340 	.word	0x24001340
 8011fdc:	2400133c 	.word	0x2400133c
 8011fe0:	e000ed04 	.word	0xe000ed04

08011fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011fea:	4b05      	ldr	r3, [pc, #20]	; (8012000 <xTaskGetTickCount+0x1c>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011ff0:	687b      	ldr	r3, [r7, #4]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	24001330 	.word	0x24001330

08012004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b086      	sub	sp, #24
 8012008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801200a:	2300      	movs	r3, #0
 801200c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801200e:	4b4f      	ldr	r3, [pc, #316]	; (801214c <xTaskIncrementTick+0x148>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	f040 808f 	bne.w	8012136 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012018:	4b4d      	ldr	r3, [pc, #308]	; (8012150 <xTaskIncrementTick+0x14c>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	3301      	adds	r3, #1
 801201e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012020:	4a4b      	ldr	r2, [pc, #300]	; (8012150 <xTaskIncrementTick+0x14c>)
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d120      	bne.n	801206e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801202c:	4b49      	ldr	r3, [pc, #292]	; (8012154 <xTaskIncrementTick+0x150>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d00a      	beq.n	801204c <xTaskIncrementTick+0x48>
	__asm volatile
 8012036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203a:	f383 8811 	msr	BASEPRI, r3
 801203e:	f3bf 8f6f 	isb	sy
 8012042:	f3bf 8f4f 	dsb	sy
 8012046:	603b      	str	r3, [r7, #0]
}
 8012048:	bf00      	nop
 801204a:	e7fe      	b.n	801204a <xTaskIncrementTick+0x46>
 801204c:	4b41      	ldr	r3, [pc, #260]	; (8012154 <xTaskIncrementTick+0x150>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	60fb      	str	r3, [r7, #12]
 8012052:	4b41      	ldr	r3, [pc, #260]	; (8012158 <xTaskIncrementTick+0x154>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a3f      	ldr	r2, [pc, #252]	; (8012154 <xTaskIncrementTick+0x150>)
 8012058:	6013      	str	r3, [r2, #0]
 801205a:	4a3f      	ldr	r2, [pc, #252]	; (8012158 <xTaskIncrementTick+0x154>)
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	6013      	str	r3, [r2, #0]
 8012060:	4b3e      	ldr	r3, [pc, #248]	; (801215c <xTaskIncrementTick+0x158>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	3301      	adds	r3, #1
 8012066:	4a3d      	ldr	r2, [pc, #244]	; (801215c <xTaskIncrementTick+0x158>)
 8012068:	6013      	str	r3, [r2, #0]
 801206a:	f000 fb6f 	bl	801274c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801206e:	4b3c      	ldr	r3, [pc, #240]	; (8012160 <xTaskIncrementTick+0x15c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	693a      	ldr	r2, [r7, #16]
 8012074:	429a      	cmp	r2, r3
 8012076:	d349      	bcc.n	801210c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012078:	4b36      	ldr	r3, [pc, #216]	; (8012154 <xTaskIncrementTick+0x150>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d104      	bne.n	801208c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012082:	4b37      	ldr	r3, [pc, #220]	; (8012160 <xTaskIncrementTick+0x15c>)
 8012084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012088:	601a      	str	r2, [r3, #0]
					break;
 801208a:	e03f      	b.n	801210c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801208c:	4b31      	ldr	r3, [pc, #196]	; (8012154 <xTaskIncrementTick+0x150>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801209c:	693a      	ldr	r2, [r7, #16]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d203      	bcs.n	80120ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80120a4:	4a2e      	ldr	r2, [pc, #184]	; (8012160 <xTaskIncrementTick+0x15c>)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80120aa:	e02f      	b.n	801210c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	3304      	adds	r3, #4
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7fe fea3 	bl	8010dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d004      	beq.n	80120c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	3318      	adds	r3, #24
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fe fe9a 	bl	8010dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120cc:	4b25      	ldr	r3, [pc, #148]	; (8012164 <xTaskIncrementTick+0x160>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d903      	bls.n	80120dc <xTaskIncrementTick+0xd8>
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120d8:	4a22      	ldr	r2, [pc, #136]	; (8012164 <xTaskIncrementTick+0x160>)
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e0:	4613      	mov	r3, r2
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	4413      	add	r3, r2
 80120e6:	009b      	lsls	r3, r3, #2
 80120e8:	4a1f      	ldr	r2, [pc, #124]	; (8012168 <xTaskIncrementTick+0x164>)
 80120ea:	441a      	add	r2, r3
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	3304      	adds	r3, #4
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f7fe fe25 	bl	8010d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120fc:	4b1b      	ldr	r3, [pc, #108]	; (801216c <xTaskIncrementTick+0x168>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012102:	429a      	cmp	r2, r3
 8012104:	d3b8      	bcc.n	8012078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012106:	2301      	movs	r3, #1
 8012108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801210a:	e7b5      	b.n	8012078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801210c:	4b17      	ldr	r3, [pc, #92]	; (801216c <xTaskIncrementTick+0x168>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012112:	4915      	ldr	r1, [pc, #84]	; (8012168 <xTaskIncrementTick+0x164>)
 8012114:	4613      	mov	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	4413      	add	r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	440b      	add	r3, r1
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d901      	bls.n	8012128 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012124:	2301      	movs	r3, #1
 8012126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012128:	4b11      	ldr	r3, [pc, #68]	; (8012170 <xTaskIncrementTick+0x16c>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d007      	beq.n	8012140 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012130:	2301      	movs	r3, #1
 8012132:	617b      	str	r3, [r7, #20]
 8012134:	e004      	b.n	8012140 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012136:	4b0f      	ldr	r3, [pc, #60]	; (8012174 <xTaskIncrementTick+0x170>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	3301      	adds	r3, #1
 801213c:	4a0d      	ldr	r2, [pc, #52]	; (8012174 <xTaskIncrementTick+0x170>)
 801213e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012140:	697b      	ldr	r3, [r7, #20]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	24001354 	.word	0x24001354
 8012150:	24001330 	.word	0x24001330
 8012154:	240012e4 	.word	0x240012e4
 8012158:	240012e8 	.word	0x240012e8
 801215c:	24001344 	.word	0x24001344
 8012160:	2400134c 	.word	0x2400134c
 8012164:	24001334 	.word	0x24001334
 8012168:	24000e5c 	.word	0x24000e5c
 801216c:	24000e58 	.word	0x24000e58
 8012170:	24001340 	.word	0x24001340
 8012174:	2400133c 	.word	0x2400133c

08012178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801217e:	4b28      	ldr	r3, [pc, #160]	; (8012220 <vTaskSwitchContext+0xa8>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d003      	beq.n	801218e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012186:	4b27      	ldr	r3, [pc, #156]	; (8012224 <vTaskSwitchContext+0xac>)
 8012188:	2201      	movs	r2, #1
 801218a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801218c:	e041      	b.n	8012212 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801218e:	4b25      	ldr	r3, [pc, #148]	; (8012224 <vTaskSwitchContext+0xac>)
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012194:	4b24      	ldr	r3, [pc, #144]	; (8012228 <vTaskSwitchContext+0xb0>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	60fb      	str	r3, [r7, #12]
 801219a:	e010      	b.n	80121be <vTaskSwitchContext+0x46>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10a      	bne.n	80121b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80121a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a6:	f383 8811 	msr	BASEPRI, r3
 80121aa:	f3bf 8f6f 	isb	sy
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	607b      	str	r3, [r7, #4]
}
 80121b4:	bf00      	nop
 80121b6:	e7fe      	b.n	80121b6 <vTaskSwitchContext+0x3e>
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	3b01      	subs	r3, #1
 80121bc:	60fb      	str	r3, [r7, #12]
 80121be:	491b      	ldr	r1, [pc, #108]	; (801222c <vTaskSwitchContext+0xb4>)
 80121c0:	68fa      	ldr	r2, [r7, #12]
 80121c2:	4613      	mov	r3, r2
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	4413      	add	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	440b      	add	r3, r1
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d0e4      	beq.n	801219c <vTaskSwitchContext+0x24>
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	4613      	mov	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4413      	add	r3, r2
 80121da:	009b      	lsls	r3, r3, #2
 80121dc:	4a13      	ldr	r2, [pc, #76]	; (801222c <vTaskSwitchContext+0xb4>)
 80121de:	4413      	add	r3, r2
 80121e0:	60bb      	str	r3, [r7, #8]
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	685a      	ldr	r2, [r3, #4]
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	605a      	str	r2, [r3, #4]
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	685a      	ldr	r2, [r3, #4]
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	3308      	adds	r3, #8
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d104      	bne.n	8012202 <vTaskSwitchContext+0x8a>
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	685a      	ldr	r2, [r3, #4]
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	605a      	str	r2, [r3, #4]
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	4a09      	ldr	r2, [pc, #36]	; (8012230 <vTaskSwitchContext+0xb8>)
 801220a:	6013      	str	r3, [r2, #0]
 801220c:	4a06      	ldr	r2, [pc, #24]	; (8012228 <vTaskSwitchContext+0xb0>)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6013      	str	r3, [r2, #0]
}
 8012212:	bf00      	nop
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	24001354 	.word	0x24001354
 8012224:	24001340 	.word	0x24001340
 8012228:	24001334 	.word	0x24001334
 801222c:	24000e5c 	.word	0x24000e5c
 8012230:	24000e58 	.word	0x24000e58

08012234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d10a      	bne.n	801225a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012248:	f383 8811 	msr	BASEPRI, r3
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f3bf 8f4f 	dsb	sy
 8012254:	60fb      	str	r3, [r7, #12]
}
 8012256:	bf00      	nop
 8012258:	e7fe      	b.n	8012258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801225a:	4b07      	ldr	r3, [pc, #28]	; (8012278 <vTaskPlaceOnEventList+0x44>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	3318      	adds	r3, #24
 8012260:	4619      	mov	r1, r3
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7fe fd91 	bl	8010d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012268:	2101      	movs	r1, #1
 801226a:	6838      	ldr	r0, [r7, #0]
 801226c:	f000 fb32 	bl	80128d4 <prvAddCurrentTaskToDelayedList>
}
 8012270:	bf00      	nop
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	24000e58 	.word	0x24000e58

0801227c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b086      	sub	sp, #24
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10a      	bne.n	80122a4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	617b      	str	r3, [r7, #20]
}
 80122a0:	bf00      	nop
 80122a2:	e7fe      	b.n	80122a2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80122a4:	4b11      	ldr	r3, [pc, #68]	; (80122ec <vTaskPlaceOnUnorderedEventList+0x70>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10a      	bne.n	80122c2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80122ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b0:	f383 8811 	msr	BASEPRI, r3
 80122b4:	f3bf 8f6f 	isb	sy
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	613b      	str	r3, [r7, #16]
}
 80122be:	bf00      	nop
 80122c0:	e7fe      	b.n	80122c0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80122c2:	4b0b      	ldr	r3, [pc, #44]	; (80122f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	68ba      	ldr	r2, [r7, #8]
 80122c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80122cc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80122ce:	4b08      	ldr	r3, [pc, #32]	; (80122f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	3318      	adds	r3, #24
 80122d4:	4619      	mov	r1, r3
 80122d6:	68f8      	ldr	r0, [r7, #12]
 80122d8:	f7fe fd33 	bl	8010d42 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80122dc:	2101      	movs	r1, #1
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 faf8 	bl	80128d4 <prvAddCurrentTaskToDelayedList>
}
 80122e4:	bf00      	nop
 80122e6:	3718      	adds	r7, #24
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	24001354 	.word	0x24001354
 80122f0:	24000e58 	.word	0x24000e58

080122f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10a      	bne.n	801231c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230a:	f383 8811 	msr	BASEPRI, r3
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	617b      	str	r3, [r7, #20]
}
 8012318:	bf00      	nop
 801231a:	e7fe      	b.n	801231a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801231c:	4b0a      	ldr	r3, [pc, #40]	; (8012348 <vTaskPlaceOnEventListRestricted+0x54>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3318      	adds	r3, #24
 8012322:	4619      	mov	r1, r3
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f7fe fd0c 	bl	8010d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012334:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012336:	6879      	ldr	r1, [r7, #4]
 8012338:	68b8      	ldr	r0, [r7, #8]
 801233a:	f000 facb 	bl	80128d4 <prvAddCurrentTaskToDelayedList>
	}
 801233e:	bf00      	nop
 8012340:	3718      	adds	r7, #24
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	24000e58 	.word	0x24000e58

0801234c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d10a      	bne.n	8012378 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012366:	f383 8811 	msr	BASEPRI, r3
 801236a:	f3bf 8f6f 	isb	sy
 801236e:	f3bf 8f4f 	dsb	sy
 8012372:	60fb      	str	r3, [r7, #12]
}
 8012374:	bf00      	nop
 8012376:	e7fe      	b.n	8012376 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	3318      	adds	r3, #24
 801237c:	4618      	mov	r0, r3
 801237e:	f7fe fd3d 	bl	8010dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012382:	4b1e      	ldr	r3, [pc, #120]	; (80123fc <xTaskRemoveFromEventList+0xb0>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d11d      	bne.n	80123c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	3304      	adds	r3, #4
 801238e:	4618      	mov	r0, r3
 8012390:	f7fe fd34 	bl	8010dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012398:	4b19      	ldr	r3, [pc, #100]	; (8012400 <xTaskRemoveFromEventList+0xb4>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	429a      	cmp	r2, r3
 801239e:	d903      	bls.n	80123a8 <xTaskRemoveFromEventList+0x5c>
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a4:	4a16      	ldr	r2, [pc, #88]	; (8012400 <xTaskRemoveFromEventList+0xb4>)
 80123a6:	6013      	str	r3, [r2, #0]
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ac:	4613      	mov	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4413      	add	r3, r2
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	4a13      	ldr	r2, [pc, #76]	; (8012404 <xTaskRemoveFromEventList+0xb8>)
 80123b6:	441a      	add	r2, r3
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	3304      	adds	r3, #4
 80123bc:	4619      	mov	r1, r3
 80123be:	4610      	mov	r0, r2
 80123c0:	f7fe fcbf 	bl	8010d42 <vListInsertEnd>
 80123c4:	e005      	b.n	80123d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	3318      	adds	r3, #24
 80123ca:	4619      	mov	r1, r3
 80123cc:	480e      	ldr	r0, [pc, #56]	; (8012408 <xTaskRemoveFromEventList+0xbc>)
 80123ce:	f7fe fcb8 	bl	8010d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123d6:	4b0d      	ldr	r3, [pc, #52]	; (801240c <xTaskRemoveFromEventList+0xc0>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123dc:	429a      	cmp	r2, r3
 80123de:	d905      	bls.n	80123ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80123e4:	4b0a      	ldr	r3, [pc, #40]	; (8012410 <xTaskRemoveFromEventList+0xc4>)
 80123e6:	2201      	movs	r2, #1
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	e001      	b.n	80123f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80123ec:	2300      	movs	r3, #0
 80123ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80123f0:	697b      	ldr	r3, [r7, #20]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3718      	adds	r7, #24
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	24001354 	.word	0x24001354
 8012400:	24001334 	.word	0x24001334
 8012404:	24000e5c 	.word	0x24000e5c
 8012408:	240012ec 	.word	0x240012ec
 801240c:	24000e58 	.word	0x24000e58
 8012410:	24001340 	.word	0x24001340

08012414 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b086      	sub	sp, #24
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801241e:	4b29      	ldr	r3, [pc, #164]	; (80124c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10a      	bne.n	801243c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	613b      	str	r3, [r7, #16]
}
 8012438:	bf00      	nop
 801243a:	e7fe      	b.n	801243a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d10a      	bne.n	8012468 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012456:	f383 8811 	msr	BASEPRI, r3
 801245a:	f3bf 8f6f 	isb	sy
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	60fb      	str	r3, [r7, #12]
}
 8012464:	bf00      	nop
 8012466:	e7fe      	b.n	8012466 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7fe fcc7 	bl	8010dfc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	3304      	adds	r3, #4
 8012472:	4618      	mov	r0, r3
 8012474:	f7fe fcc2 	bl	8010dfc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801247c:	4b12      	ldr	r3, [pc, #72]	; (80124c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	429a      	cmp	r2, r3
 8012482:	d903      	bls.n	801248c <vTaskRemoveFromUnorderedEventList+0x78>
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012488:	4a0f      	ldr	r2, [pc, #60]	; (80124c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801248a:	6013      	str	r3, [r2, #0]
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012490:	4613      	mov	r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	4413      	add	r3, r2
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	4a0c      	ldr	r2, [pc, #48]	; (80124cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 801249a:	441a      	add	r2, r3
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	3304      	adds	r3, #4
 80124a0:	4619      	mov	r1, r3
 80124a2:	4610      	mov	r0, r2
 80124a4:	f7fe fc4d 	bl	8010d42 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ac:	4b08      	ldr	r3, [pc, #32]	; (80124d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d902      	bls.n	80124bc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80124b6:	4b07      	ldr	r3, [pc, #28]	; (80124d4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80124b8:	2201      	movs	r2, #1
 80124ba:	601a      	str	r2, [r3, #0]
	}
}
 80124bc:	bf00      	nop
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	24001354 	.word	0x24001354
 80124c8:	24001334 	.word	0x24001334
 80124cc:	24000e5c 	.word	0x24000e5c
 80124d0:	24000e58 	.word	0x24000e58
 80124d4:	24001340 	.word	0x24001340

080124d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80124e0:	4b06      	ldr	r3, [pc, #24]	; (80124fc <vTaskInternalSetTimeOutState+0x24>)
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80124e8:	4b05      	ldr	r3, [pc, #20]	; (8012500 <vTaskInternalSetTimeOutState+0x28>)
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	605a      	str	r2, [r3, #4]
}
 80124f0:	bf00      	nop
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr
 80124fc:	24001344 	.word	0x24001344
 8012500:	24001330 	.word	0x24001330

08012504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b088      	sub	sp, #32
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10a      	bne.n	801252a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012518:	f383 8811 	msr	BASEPRI, r3
 801251c:	f3bf 8f6f 	isb	sy
 8012520:	f3bf 8f4f 	dsb	sy
 8012524:	613b      	str	r3, [r7, #16]
}
 8012526:	bf00      	nop
 8012528:	e7fe      	b.n	8012528 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10a      	bne.n	8012546 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012534:	f383 8811 	msr	BASEPRI, r3
 8012538:	f3bf 8f6f 	isb	sy
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	60fb      	str	r3, [r7, #12]
}
 8012542:	bf00      	nop
 8012544:	e7fe      	b.n	8012544 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012546:	f000 feb5 	bl	80132b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801254a:	4b1d      	ldr	r3, [pc, #116]	; (80125c0 <xTaskCheckForTimeOut+0xbc>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	69ba      	ldr	r2, [r7, #24]
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012562:	d102      	bne.n	801256a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012564:	2300      	movs	r3, #0
 8012566:	61fb      	str	r3, [r7, #28]
 8012568:	e023      	b.n	80125b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	4b15      	ldr	r3, [pc, #84]	; (80125c4 <xTaskCheckForTimeOut+0xc0>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	429a      	cmp	r2, r3
 8012574:	d007      	beq.n	8012586 <xTaskCheckForTimeOut+0x82>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	429a      	cmp	r2, r3
 801257e:	d302      	bcc.n	8012586 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012580:	2301      	movs	r3, #1
 8012582:	61fb      	str	r3, [r7, #28]
 8012584:	e015      	b.n	80125b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	697a      	ldr	r2, [r7, #20]
 801258c:	429a      	cmp	r2, r3
 801258e:	d20b      	bcs.n	80125a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	1ad2      	subs	r2, r2, r3
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff ff9b 	bl	80124d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80125a2:	2300      	movs	r3, #0
 80125a4:	61fb      	str	r3, [r7, #28]
 80125a6:	e004      	b.n	80125b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	2200      	movs	r2, #0
 80125ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80125ae:	2301      	movs	r3, #1
 80125b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80125b2:	f000 feaf 	bl	8013314 <vPortExitCritical>

	return xReturn;
 80125b6:	69fb      	ldr	r3, [r7, #28]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3720      	adds	r7, #32
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	24001330 	.word	0x24001330
 80125c4:	24001344 	.word	0x24001344

080125c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80125c8:	b480      	push	{r7}
 80125ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80125cc:	4b03      	ldr	r3, [pc, #12]	; (80125dc <vTaskMissedYield+0x14>)
 80125ce:	2201      	movs	r2, #1
 80125d0:	601a      	str	r2, [r3, #0]
}
 80125d2:	bf00      	nop
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr
 80125dc:	24001340 	.word	0x24001340

080125e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80125e8:	f000 f852 	bl	8012690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80125ec:	4b06      	ldr	r3, [pc, #24]	; (8012608 <prvIdleTask+0x28>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d9f9      	bls.n	80125e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80125f4:	4b05      	ldr	r3, [pc, #20]	; (801260c <prvIdleTask+0x2c>)
 80125f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125fa:	601a      	str	r2, [r3, #0]
 80125fc:	f3bf 8f4f 	dsb	sy
 8012600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012604:	e7f0      	b.n	80125e8 <prvIdleTask+0x8>
 8012606:	bf00      	nop
 8012608:	24000e5c 	.word	0x24000e5c
 801260c:	e000ed04 	.word	0xe000ed04

08012610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012616:	2300      	movs	r3, #0
 8012618:	607b      	str	r3, [r7, #4]
 801261a:	e00c      	b.n	8012636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	4613      	mov	r3, r2
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	4413      	add	r3, r2
 8012624:	009b      	lsls	r3, r3, #2
 8012626:	4a12      	ldr	r2, [pc, #72]	; (8012670 <prvInitialiseTaskLists+0x60>)
 8012628:	4413      	add	r3, r2
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe fb5c 	bl	8010ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	3301      	adds	r3, #1
 8012634:	607b      	str	r3, [r7, #4]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2b37      	cmp	r3, #55	; 0x37
 801263a:	d9ef      	bls.n	801261c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801263c:	480d      	ldr	r0, [pc, #52]	; (8012674 <prvInitialiseTaskLists+0x64>)
 801263e:	f7fe fb53 	bl	8010ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012642:	480d      	ldr	r0, [pc, #52]	; (8012678 <prvInitialiseTaskLists+0x68>)
 8012644:	f7fe fb50 	bl	8010ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012648:	480c      	ldr	r0, [pc, #48]	; (801267c <prvInitialiseTaskLists+0x6c>)
 801264a:	f7fe fb4d 	bl	8010ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801264e:	480c      	ldr	r0, [pc, #48]	; (8012680 <prvInitialiseTaskLists+0x70>)
 8012650:	f7fe fb4a 	bl	8010ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012654:	480b      	ldr	r0, [pc, #44]	; (8012684 <prvInitialiseTaskLists+0x74>)
 8012656:	f7fe fb47 	bl	8010ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801265a:	4b0b      	ldr	r3, [pc, #44]	; (8012688 <prvInitialiseTaskLists+0x78>)
 801265c:	4a05      	ldr	r2, [pc, #20]	; (8012674 <prvInitialiseTaskLists+0x64>)
 801265e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012660:	4b0a      	ldr	r3, [pc, #40]	; (801268c <prvInitialiseTaskLists+0x7c>)
 8012662:	4a05      	ldr	r2, [pc, #20]	; (8012678 <prvInitialiseTaskLists+0x68>)
 8012664:	601a      	str	r2, [r3, #0]
}
 8012666:	bf00      	nop
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	24000e5c 	.word	0x24000e5c
 8012674:	240012bc 	.word	0x240012bc
 8012678:	240012d0 	.word	0x240012d0
 801267c:	240012ec 	.word	0x240012ec
 8012680:	24001300 	.word	0x24001300
 8012684:	24001318 	.word	0x24001318
 8012688:	240012e4 	.word	0x240012e4
 801268c:	240012e8 	.word	0x240012e8

08012690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012696:	e019      	b.n	80126cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012698:	f000 fe0c 	bl	80132b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801269c:	4b10      	ldr	r3, [pc, #64]	; (80126e0 <prvCheckTasksWaitingTermination+0x50>)
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	3304      	adds	r3, #4
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fe fba7 	bl	8010dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80126ae:	4b0d      	ldr	r3, [pc, #52]	; (80126e4 <prvCheckTasksWaitingTermination+0x54>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	3b01      	subs	r3, #1
 80126b4:	4a0b      	ldr	r2, [pc, #44]	; (80126e4 <prvCheckTasksWaitingTermination+0x54>)
 80126b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80126b8:	4b0b      	ldr	r3, [pc, #44]	; (80126e8 <prvCheckTasksWaitingTermination+0x58>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	3b01      	subs	r3, #1
 80126be:	4a0a      	ldr	r2, [pc, #40]	; (80126e8 <prvCheckTasksWaitingTermination+0x58>)
 80126c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80126c2:	f000 fe27 	bl	8013314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 f810 	bl	80126ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126cc:	4b06      	ldr	r3, [pc, #24]	; (80126e8 <prvCheckTasksWaitingTermination+0x58>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1e1      	bne.n	8012698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80126d4:	bf00      	nop
 80126d6:	bf00      	nop
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	24001300 	.word	0x24001300
 80126e4:	2400132c 	.word	0x2400132c
 80126e8:	24001314 	.word	0x24001314

080126ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d108      	bne.n	8012710 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012702:	4618      	mov	r0, r3
 8012704:	f000 ffc4 	bl	8013690 <vPortFree>
				vPortFree( pxTCB );
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 ffc1 	bl	8013690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801270e:	e018      	b.n	8012742 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012716:	2b01      	cmp	r3, #1
 8012718:	d103      	bne.n	8012722 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 ffb8 	bl	8013690 <vPortFree>
	}
 8012720:	e00f      	b.n	8012742 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012728:	2b02      	cmp	r3, #2
 801272a:	d00a      	beq.n	8012742 <prvDeleteTCB+0x56>
	__asm volatile
 801272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012730:	f383 8811 	msr	BASEPRI, r3
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	f3bf 8f4f 	dsb	sy
 801273c:	60fb      	str	r3, [r7, #12]
}
 801273e:	bf00      	nop
 8012740:	e7fe      	b.n	8012740 <prvDeleteTCB+0x54>
	}
 8012742:	bf00      	nop
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
	...

0801274c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012752:	4b0c      	ldr	r3, [pc, #48]	; (8012784 <prvResetNextTaskUnblockTime+0x38>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d104      	bne.n	8012766 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801275c:	4b0a      	ldr	r3, [pc, #40]	; (8012788 <prvResetNextTaskUnblockTime+0x3c>)
 801275e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012762:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012764:	e008      	b.n	8012778 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012766:	4b07      	ldr	r3, [pc, #28]	; (8012784 <prvResetNextTaskUnblockTime+0x38>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	4a04      	ldr	r2, [pc, #16]	; (8012788 <prvResetNextTaskUnblockTime+0x3c>)
 8012776:	6013      	str	r3, [r2, #0]
}
 8012778:	bf00      	nop
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	240012e4 	.word	0x240012e4
 8012788:	2400134c 	.word	0x2400134c

0801278c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012792:	4b0b      	ldr	r3, [pc, #44]	; (80127c0 <xTaskGetSchedulerState+0x34>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d102      	bne.n	80127a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801279a:	2301      	movs	r3, #1
 801279c:	607b      	str	r3, [r7, #4]
 801279e:	e008      	b.n	80127b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127a0:	4b08      	ldr	r3, [pc, #32]	; (80127c4 <xTaskGetSchedulerState+0x38>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80127a8:	2302      	movs	r3, #2
 80127aa:	607b      	str	r3, [r7, #4]
 80127ac:	e001      	b.n	80127b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80127ae:	2300      	movs	r3, #0
 80127b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80127b2:	687b      	ldr	r3, [r7, #4]
	}
 80127b4:	4618      	mov	r0, r3
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr
 80127c0:	24001338 	.word	0x24001338
 80127c4:	24001354 	.word	0x24001354

080127c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b086      	sub	sp, #24
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80127d4:	2300      	movs	r3, #0
 80127d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d056      	beq.n	801288c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80127de:	4b2e      	ldr	r3, [pc, #184]	; (8012898 <xTaskPriorityDisinherit+0xd0>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	693a      	ldr	r2, [r7, #16]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d00a      	beq.n	80127fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80127e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ec:	f383 8811 	msr	BASEPRI, r3
 80127f0:	f3bf 8f6f 	isb	sy
 80127f4:	f3bf 8f4f 	dsb	sy
 80127f8:	60fb      	str	r3, [r7, #12]
}
 80127fa:	bf00      	nop
 80127fc:	e7fe      	b.n	80127fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10a      	bne.n	801281c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	60bb      	str	r3, [r7, #8]
}
 8012818:	bf00      	nop
 801281a:	e7fe      	b.n	801281a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012820:	1e5a      	subs	r2, r3, #1
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801282e:	429a      	cmp	r2, r3
 8012830:	d02c      	beq.n	801288c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012836:	2b00      	cmp	r3, #0
 8012838:	d128      	bne.n	801288c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	3304      	adds	r3, #4
 801283e:	4618      	mov	r0, r3
 8012840:	f7fe fadc 	bl	8010dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012850:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801285c:	4b0f      	ldr	r3, [pc, #60]	; (801289c <xTaskPriorityDisinherit+0xd4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	429a      	cmp	r2, r3
 8012862:	d903      	bls.n	801286c <xTaskPriorityDisinherit+0xa4>
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012868:	4a0c      	ldr	r2, [pc, #48]	; (801289c <xTaskPriorityDisinherit+0xd4>)
 801286a:	6013      	str	r3, [r2, #0]
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	4a09      	ldr	r2, [pc, #36]	; (80128a0 <xTaskPriorityDisinherit+0xd8>)
 801287a:	441a      	add	r2, r3
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	3304      	adds	r3, #4
 8012880:	4619      	mov	r1, r3
 8012882:	4610      	mov	r0, r2
 8012884:	f7fe fa5d 	bl	8010d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012888:	2301      	movs	r3, #1
 801288a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801288c:	697b      	ldr	r3, [r7, #20]
	}
 801288e:	4618      	mov	r0, r3
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	24000e58 	.word	0x24000e58
 801289c:	24001334 	.word	0x24001334
 80128a0:	24000e5c 	.word	0x24000e5c

080128a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80128a4:	b480      	push	{r7}
 80128a6:	b083      	sub	sp, #12
 80128a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80128aa:	4b09      	ldr	r3, [pc, #36]	; (80128d0 <uxTaskResetEventItemValue+0x2c>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	699b      	ldr	r3, [r3, #24]
 80128b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128b2:	4b07      	ldr	r3, [pc, #28]	; (80128d0 <uxTaskResetEventItemValue+0x2c>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b8:	4b05      	ldr	r3, [pc, #20]	; (80128d0 <uxTaskResetEventItemValue+0x2c>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80128c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80128c2:	687b      	ldr	r3, [r7, #4]
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	370c      	adds	r7, #12
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	24000e58 	.word	0x24000e58

080128d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80128de:	4b21      	ldr	r3, [pc, #132]	; (8012964 <prvAddCurrentTaskToDelayedList+0x90>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128e4:	4b20      	ldr	r3, [pc, #128]	; (8012968 <prvAddCurrentTaskToDelayedList+0x94>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	3304      	adds	r3, #4
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe fa86 	bl	8010dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128f6:	d10a      	bne.n	801290e <prvAddCurrentTaskToDelayedList+0x3a>
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d007      	beq.n	801290e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80128fe:	4b1a      	ldr	r3, [pc, #104]	; (8012968 <prvAddCurrentTaskToDelayedList+0x94>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	3304      	adds	r3, #4
 8012904:	4619      	mov	r1, r3
 8012906:	4819      	ldr	r0, [pc, #100]	; (801296c <prvAddCurrentTaskToDelayedList+0x98>)
 8012908:	f7fe fa1b 	bl	8010d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801290c:	e026      	b.n	801295c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801290e:	68fa      	ldr	r2, [r7, #12]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	4413      	add	r3, r2
 8012914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012916:	4b14      	ldr	r3, [pc, #80]	; (8012968 <prvAddCurrentTaskToDelayedList+0x94>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	68ba      	ldr	r2, [r7, #8]
 801291c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801291e:	68ba      	ldr	r2, [r7, #8]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	429a      	cmp	r2, r3
 8012924:	d209      	bcs.n	801293a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012926:	4b12      	ldr	r3, [pc, #72]	; (8012970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012928:	681a      	ldr	r2, [r3, #0]
 801292a:	4b0f      	ldr	r3, [pc, #60]	; (8012968 <prvAddCurrentTaskToDelayedList+0x94>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	3304      	adds	r3, #4
 8012930:	4619      	mov	r1, r3
 8012932:	4610      	mov	r0, r2
 8012934:	f7fe fa29 	bl	8010d8a <vListInsert>
}
 8012938:	e010      	b.n	801295c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801293a:	4b0e      	ldr	r3, [pc, #56]	; (8012974 <prvAddCurrentTaskToDelayedList+0xa0>)
 801293c:	681a      	ldr	r2, [r3, #0]
 801293e:	4b0a      	ldr	r3, [pc, #40]	; (8012968 <prvAddCurrentTaskToDelayedList+0x94>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	3304      	adds	r3, #4
 8012944:	4619      	mov	r1, r3
 8012946:	4610      	mov	r0, r2
 8012948:	f7fe fa1f 	bl	8010d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801294c:	4b0a      	ldr	r3, [pc, #40]	; (8012978 <prvAddCurrentTaskToDelayedList+0xa4>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	68ba      	ldr	r2, [r7, #8]
 8012952:	429a      	cmp	r2, r3
 8012954:	d202      	bcs.n	801295c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012956:	4a08      	ldr	r2, [pc, #32]	; (8012978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	6013      	str	r3, [r2, #0]
}
 801295c:	bf00      	nop
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	24001330 	.word	0x24001330
 8012968:	24000e58 	.word	0x24000e58
 801296c:	24001318 	.word	0x24001318
 8012970:	240012e8 	.word	0x240012e8
 8012974:	240012e4 	.word	0x240012e4
 8012978:	2400134c 	.word	0x2400134c

0801297c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b08a      	sub	sp, #40	; 0x28
 8012980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012982:	2300      	movs	r3, #0
 8012984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012986:	f000 fb07 	bl	8012f98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801298a:	4b1c      	ldr	r3, [pc, #112]	; (80129fc <xTimerCreateTimerTask+0x80>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d021      	beq.n	80129d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012996:	2300      	movs	r3, #0
 8012998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801299a:	1d3a      	adds	r2, r7, #4
 801299c:	f107 0108 	add.w	r1, r7, #8
 80129a0:	f107 030c 	add.w	r3, r7, #12
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7fd ff97 	bl	80108d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80129aa:	6879      	ldr	r1, [r7, #4]
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	9202      	str	r2, [sp, #8]
 80129b2:	9301      	str	r3, [sp, #4]
 80129b4:	2302      	movs	r3, #2
 80129b6:	9300      	str	r3, [sp, #0]
 80129b8:	2300      	movs	r3, #0
 80129ba:	460a      	mov	r2, r1
 80129bc:	4910      	ldr	r1, [pc, #64]	; (8012a00 <xTimerCreateTimerTask+0x84>)
 80129be:	4811      	ldr	r0, [pc, #68]	; (8012a04 <xTimerCreateTimerTask+0x88>)
 80129c0:	f7ff f828 	bl	8011a14 <xTaskCreateStatic>
 80129c4:	4603      	mov	r3, r0
 80129c6:	4a10      	ldr	r2, [pc, #64]	; (8012a08 <xTimerCreateTimerTask+0x8c>)
 80129c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80129ca:	4b0f      	ldr	r3, [pc, #60]	; (8012a08 <xTimerCreateTimerTask+0x8c>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80129d2:	2301      	movs	r3, #1
 80129d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d10a      	bne.n	80129f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80129dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e0:	f383 8811 	msr	BASEPRI, r3
 80129e4:	f3bf 8f6f 	isb	sy
 80129e8:	f3bf 8f4f 	dsb	sy
 80129ec:	613b      	str	r3, [r7, #16]
}
 80129ee:	bf00      	nop
 80129f0:	e7fe      	b.n	80129f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80129f2:	697b      	ldr	r3, [r7, #20]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3718      	adds	r7, #24
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	24001388 	.word	0x24001388
 8012a00:	08014ba0 	.word	0x08014ba0
 8012a04:	08012b41 	.word	0x08012b41
 8012a08:	2400138c 	.word	0x2400138c

08012a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b08a      	sub	sp, #40	; 0x28
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	60b9      	str	r1, [r7, #8]
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d10a      	bne.n	8012a3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8012a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a28:	f383 8811 	msr	BASEPRI, r3
 8012a2c:	f3bf 8f6f 	isb	sy
 8012a30:	f3bf 8f4f 	dsb	sy
 8012a34:	623b      	str	r3, [r7, #32]
}
 8012a36:	bf00      	nop
 8012a38:	e7fe      	b.n	8012a38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012a3a:	4b1a      	ldr	r3, [pc, #104]	; (8012aa4 <xTimerGenericCommand+0x98>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d02a      	beq.n	8012a98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	2b05      	cmp	r3, #5
 8012a52:	dc18      	bgt.n	8012a86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012a54:	f7ff fe9a 	bl	801278c <xTaskGetSchedulerState>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b02      	cmp	r3, #2
 8012a5c:	d109      	bne.n	8012a72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012a5e:	4b11      	ldr	r3, [pc, #68]	; (8012aa4 <xTimerGenericCommand+0x98>)
 8012a60:	6818      	ldr	r0, [r3, #0]
 8012a62:	f107 0110 	add.w	r1, r7, #16
 8012a66:	2300      	movs	r3, #0
 8012a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a6a:	f7fe fb2f 	bl	80110cc <xQueueGenericSend>
 8012a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8012a70:	e012      	b.n	8012a98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012a72:	4b0c      	ldr	r3, [pc, #48]	; (8012aa4 <xTimerGenericCommand+0x98>)
 8012a74:	6818      	ldr	r0, [r3, #0]
 8012a76:	f107 0110 	add.w	r1, r7, #16
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	f7fe fb25 	bl	80110cc <xQueueGenericSend>
 8012a82:	6278      	str	r0, [r7, #36]	; 0x24
 8012a84:	e008      	b.n	8012a98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012a86:	4b07      	ldr	r3, [pc, #28]	; (8012aa4 <xTimerGenericCommand+0x98>)
 8012a88:	6818      	ldr	r0, [r3, #0]
 8012a8a:	f107 0110 	add.w	r1, r7, #16
 8012a8e:	2300      	movs	r3, #0
 8012a90:	683a      	ldr	r2, [r7, #0]
 8012a92:	f7fe fc19 	bl	80112c8 <xQueueGenericSendFromISR>
 8012a96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3728      	adds	r7, #40	; 0x28
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	24001388 	.word	0x24001388

08012aa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b088      	sub	sp, #32
 8012aac:	af02      	add	r7, sp, #8
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ab2:	4b22      	ldr	r3, [pc, #136]	; (8012b3c <prvProcessExpiredTimer+0x94>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	68db      	ldr	r3, [r3, #12]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	3304      	adds	r3, #4
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fe f99b 	bl	8010dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012acc:	f003 0304 	and.w	r3, r3, #4
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d022      	beq.n	8012b1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	699a      	ldr	r2, [r3, #24]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	18d1      	adds	r1, r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	683a      	ldr	r2, [r7, #0]
 8012ae0:	6978      	ldr	r0, [r7, #20]
 8012ae2:	f000 f8d1 	bl	8012c88 <prvInsertTimerInActiveList>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d01f      	beq.n	8012b2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012aec:	2300      	movs	r3, #0
 8012aee:	9300      	str	r3, [sp, #0]
 8012af0:	2300      	movs	r3, #0
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	2100      	movs	r1, #0
 8012af6:	6978      	ldr	r0, [r7, #20]
 8012af8:	f7ff ff88 	bl	8012a0c <xTimerGenericCommand>
 8012afc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d113      	bne.n	8012b2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b08:	f383 8811 	msr	BASEPRI, r3
 8012b0c:	f3bf 8f6f 	isb	sy
 8012b10:	f3bf 8f4f 	dsb	sy
 8012b14:	60fb      	str	r3, [r7, #12]
}
 8012b16:	bf00      	nop
 8012b18:	e7fe      	b.n	8012b18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b20:	f023 0301 	bic.w	r3, r3, #1
 8012b24:	b2da      	uxtb	r2, r3
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	6a1b      	ldr	r3, [r3, #32]
 8012b30:	6978      	ldr	r0, [r7, #20]
 8012b32:	4798      	blx	r3
}
 8012b34:	bf00      	nop
 8012b36:	3718      	adds	r7, #24
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	24001380 	.word	0x24001380

08012b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012b48:	f107 0308 	add.w	r3, r7, #8
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f000 f857 	bl	8012c00 <prvGetNextExpireTime>
 8012b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	4619      	mov	r1, r3
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f000 f803 	bl	8012b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012b5e:	f000 f8d5 	bl	8012d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012b62:	e7f1      	b.n	8012b48 <prvTimerTask+0x8>

08012b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012b6e:	f7ff f98d 	bl	8011e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012b72:	f107 0308 	add.w	r3, r7, #8
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 f866 	bl	8012c48 <prvSampleTimeNow>
 8012b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d130      	bne.n	8012be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d10a      	bne.n	8012ba0 <prvProcessTimerOrBlockTask+0x3c>
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d806      	bhi.n	8012ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012b92:	f7ff f989 	bl	8011ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012b96:	68f9      	ldr	r1, [r7, #12]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7ff ff85 	bl	8012aa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012b9e:	e024      	b.n	8012bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d008      	beq.n	8012bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ba6:	4b13      	ldr	r3, [pc, #76]	; (8012bf4 <prvProcessTimerOrBlockTask+0x90>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d101      	bne.n	8012bb4 <prvProcessTimerOrBlockTask+0x50>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e000      	b.n	8012bb6 <prvProcessTimerOrBlockTask+0x52>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012bb8:	4b0f      	ldr	r3, [pc, #60]	; (8012bf8 <prvProcessTimerOrBlockTask+0x94>)
 8012bba:	6818      	ldr	r0, [r3, #0]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	1ad3      	subs	r3, r2, r3
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	f7fe fef1 	bl	80119ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012bca:	f7ff f96d 	bl	8011ea8 <xTaskResumeAll>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d10a      	bne.n	8012bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012bd4:	4b09      	ldr	r3, [pc, #36]	; (8012bfc <prvProcessTimerOrBlockTask+0x98>)
 8012bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bda:	601a      	str	r2, [r3, #0]
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	f3bf 8f6f 	isb	sy
}
 8012be4:	e001      	b.n	8012bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012be6:	f7ff f95f 	bl	8011ea8 <xTaskResumeAll>
}
 8012bea:	bf00      	nop
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	24001384 	.word	0x24001384
 8012bf8:	24001388 	.word	0x24001388
 8012bfc:	e000ed04 	.word	0xe000ed04

08012c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012c00:	b480      	push	{r7}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012c08:	4b0e      	ldr	r3, [pc, #56]	; (8012c44 <prvGetNextExpireTime+0x44>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <prvGetNextExpireTime+0x16>
 8012c12:	2201      	movs	r2, #1
 8012c14:	e000      	b.n	8012c18 <prvGetNextExpireTime+0x18>
 8012c16:	2200      	movs	r2, #0
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d105      	bne.n	8012c30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012c24:	4b07      	ldr	r3, [pc, #28]	; (8012c44 <prvGetNextExpireTime+0x44>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	60fb      	str	r3, [r7, #12]
 8012c2e:	e001      	b.n	8012c34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012c30:	2300      	movs	r3, #0
 8012c32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012c34:	68fb      	ldr	r3, [r7, #12]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3714      	adds	r7, #20
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop
 8012c44:	24001380 	.word	0x24001380

08012c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b084      	sub	sp, #16
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012c50:	f7ff f9c8 	bl	8011fe4 <xTaskGetTickCount>
 8012c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012c56:	4b0b      	ldr	r3, [pc, #44]	; (8012c84 <prvSampleTimeNow+0x3c>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d205      	bcs.n	8012c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012c60:	f000 f936 	bl	8012ed0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2201      	movs	r2, #1
 8012c68:	601a      	str	r2, [r3, #0]
 8012c6a:	e002      	b.n	8012c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012c72:	4a04      	ldr	r2, [pc, #16]	; (8012c84 <prvSampleTimeNow+0x3c>)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012c78:	68fb      	ldr	r3, [r7, #12]
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	24001390 	.word	0x24001390

08012c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b086      	sub	sp, #24
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	607a      	str	r2, [r7, #4]
 8012c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012c96:	2300      	movs	r3, #0
 8012c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	68fa      	ldr	r2, [r7, #12]
 8012ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012ca6:	68ba      	ldr	r2, [r7, #8]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d812      	bhi.n	8012cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	1ad2      	subs	r2, r2, r3
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	699b      	ldr	r3, [r3, #24]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d302      	bcc.n	8012cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	617b      	str	r3, [r7, #20]
 8012cc0:	e01b      	b.n	8012cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012cc2:	4b10      	ldr	r3, [pc, #64]	; (8012d04 <prvInsertTimerInActiveList+0x7c>)
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	3304      	adds	r3, #4
 8012cca:	4619      	mov	r1, r3
 8012ccc:	4610      	mov	r0, r2
 8012cce:	f7fe f85c 	bl	8010d8a <vListInsert>
 8012cd2:	e012      	b.n	8012cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d206      	bcs.n	8012cea <prvInsertTimerInActiveList+0x62>
 8012cdc:	68ba      	ldr	r2, [r7, #8]
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d302      	bcc.n	8012cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	617b      	str	r3, [r7, #20]
 8012ce8:	e007      	b.n	8012cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012cea:	4b07      	ldr	r3, [pc, #28]	; (8012d08 <prvInsertTimerInActiveList+0x80>)
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	4610      	mov	r0, r2
 8012cf6:	f7fe f848 	bl	8010d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012cfa:	697b      	ldr	r3, [r7, #20]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	24001384 	.word	0x24001384
 8012d08:	24001380 	.word	0x24001380

08012d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b08e      	sub	sp, #56	; 0x38
 8012d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012d12:	e0ca      	b.n	8012eaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	da18      	bge.n	8012d4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012d1a:	1d3b      	adds	r3, r7, #4
 8012d1c:	3304      	adds	r3, #4
 8012d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d10a      	bne.n	8012d3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	61fb      	str	r3, [r7, #28]
}
 8012d38:	bf00      	nop
 8012d3a:	e7fe      	b.n	8012d3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d42:	6850      	ldr	r0, [r2, #4]
 8012d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d46:	6892      	ldr	r2, [r2, #8]
 8012d48:	4611      	mov	r1, r2
 8012d4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	f2c0 80aa 	blt.w	8012ea8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5a:	695b      	ldr	r3, [r3, #20]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d004      	beq.n	8012d6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d62:	3304      	adds	r3, #4
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fe f849 	bl	8010dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012d6a:	463b      	mov	r3, r7
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7ff ff6b 	bl	8012c48 <prvSampleTimeNow>
 8012d72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b09      	cmp	r3, #9
 8012d78:	f200 8097 	bhi.w	8012eaa <prvProcessReceivedCommands+0x19e>
 8012d7c:	a201      	add	r2, pc, #4	; (adr r2, 8012d84 <prvProcessReceivedCommands+0x78>)
 8012d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d82:	bf00      	nop
 8012d84:	08012dad 	.word	0x08012dad
 8012d88:	08012dad 	.word	0x08012dad
 8012d8c:	08012dad 	.word	0x08012dad
 8012d90:	08012e21 	.word	0x08012e21
 8012d94:	08012e35 	.word	0x08012e35
 8012d98:	08012e7f 	.word	0x08012e7f
 8012d9c:	08012dad 	.word	0x08012dad
 8012da0:	08012dad 	.word	0x08012dad
 8012da4:	08012e21 	.word	0x08012e21
 8012da8:	08012e35 	.word	0x08012e35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012db2:	f043 0301 	orr.w	r3, r3, #1
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012dbe:	68ba      	ldr	r2, [r7, #8]
 8012dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc2:	699b      	ldr	r3, [r3, #24]
 8012dc4:	18d1      	adds	r1, r2, r3
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dcc:	f7ff ff5c 	bl	8012c88 <prvInsertTimerInActiveList>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d069      	beq.n	8012eaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd8:	6a1b      	ldr	r3, [r3, #32]
 8012dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ddc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012de4:	f003 0304 	and.w	r3, r3, #4
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d05e      	beq.n	8012eaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012dec:	68ba      	ldr	r2, [r7, #8]
 8012dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df0:	699b      	ldr	r3, [r3, #24]
 8012df2:	441a      	add	r2, r3
 8012df4:	2300      	movs	r3, #0
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	2300      	movs	r3, #0
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dfe:	f7ff fe05 	bl	8012a0c <xTimerGenericCommand>
 8012e02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012e04:	6a3b      	ldr	r3, [r7, #32]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d14f      	bne.n	8012eaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0e:	f383 8811 	msr	BASEPRI, r3
 8012e12:	f3bf 8f6f 	isb	sy
 8012e16:	f3bf 8f4f 	dsb	sy
 8012e1a:	61bb      	str	r3, [r7, #24]
}
 8012e1c:	bf00      	nop
 8012e1e:	e7fe      	b.n	8012e1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e26:	f023 0301 	bic.w	r3, r3, #1
 8012e2a:	b2da      	uxtb	r2, r3
 8012e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012e32:	e03a      	b.n	8012eaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e3a:	f043 0301 	orr.w	r3, r3, #1
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012e46:	68ba      	ldr	r2, [r7, #8]
 8012e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4e:	699b      	ldr	r3, [r3, #24]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d10a      	bne.n	8012e6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e58:	f383 8811 	msr	BASEPRI, r3
 8012e5c:	f3bf 8f6f 	isb	sy
 8012e60:	f3bf 8f4f 	dsb	sy
 8012e64:	617b      	str	r3, [r7, #20]
}
 8012e66:	bf00      	nop
 8012e68:	e7fe      	b.n	8012e68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	699a      	ldr	r2, [r3, #24]
 8012e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e70:	18d1      	adds	r1, r2, r3
 8012e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e78:	f7ff ff06 	bl	8012c88 <prvInsertTimerInActiveList>
					break;
 8012e7c:	e015      	b.n	8012eaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e84:	f003 0302 	and.w	r3, r3, #2
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d103      	bne.n	8012e94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e8e:	f000 fbff 	bl	8013690 <vPortFree>
 8012e92:	e00a      	b.n	8012eaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e9a:	f023 0301 	bic.w	r3, r3, #1
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012ea6:	e000      	b.n	8012eaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012ea8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012eaa:	4b08      	ldr	r3, [pc, #32]	; (8012ecc <prvProcessReceivedCommands+0x1c0>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	1d39      	adds	r1, r7, #4
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fe faa4 	bl	8011400 <xQueueReceive>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f47f af2a 	bne.w	8012d14 <prvProcessReceivedCommands+0x8>
	}
}
 8012ec0:	bf00      	nop
 8012ec2:	bf00      	nop
 8012ec4:	3730      	adds	r7, #48	; 0x30
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	24001388 	.word	0x24001388

08012ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b088      	sub	sp, #32
 8012ed4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ed6:	e048      	b.n	8012f6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ed8:	4b2d      	ldr	r3, [pc, #180]	; (8012f90 <prvSwitchTimerLists+0xc0>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ee2:	4b2b      	ldr	r3, [pc, #172]	; (8012f90 <prvSwitchTimerLists+0xc0>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	3304      	adds	r3, #4
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7fd ff83 	bl	8010dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	6a1b      	ldr	r3, [r3, #32]
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d02e      	beq.n	8012f6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	699b      	ldr	r3, [r3, #24]
 8012f10:	693a      	ldr	r2, [r7, #16]
 8012f12:	4413      	add	r3, r2
 8012f14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d90e      	bls.n	8012f3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	68ba      	ldr	r2, [r7, #8]
 8012f22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	68fa      	ldr	r2, [r7, #12]
 8012f28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012f2a:	4b19      	ldr	r3, [pc, #100]	; (8012f90 <prvSwitchTimerLists+0xc0>)
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	3304      	adds	r3, #4
 8012f32:	4619      	mov	r1, r3
 8012f34:	4610      	mov	r0, r2
 8012f36:	f7fd ff28 	bl	8010d8a <vListInsert>
 8012f3a:	e016      	b.n	8012f6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	2300      	movs	r3, #0
 8012f42:	693a      	ldr	r2, [r7, #16]
 8012f44:	2100      	movs	r1, #0
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f7ff fd60 	bl	8012a0c <xTimerGenericCommand>
 8012f4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d10a      	bne.n	8012f6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f58:	f383 8811 	msr	BASEPRI, r3
 8012f5c:	f3bf 8f6f 	isb	sy
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	603b      	str	r3, [r7, #0]
}
 8012f66:	bf00      	nop
 8012f68:	e7fe      	b.n	8012f68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012f6a:	4b09      	ldr	r3, [pc, #36]	; (8012f90 <prvSwitchTimerLists+0xc0>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d1b1      	bne.n	8012ed8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012f74:	4b06      	ldr	r3, [pc, #24]	; (8012f90 <prvSwitchTimerLists+0xc0>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012f7a:	4b06      	ldr	r3, [pc, #24]	; (8012f94 <prvSwitchTimerLists+0xc4>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	4a04      	ldr	r2, [pc, #16]	; (8012f90 <prvSwitchTimerLists+0xc0>)
 8012f80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012f82:	4a04      	ldr	r2, [pc, #16]	; (8012f94 <prvSwitchTimerLists+0xc4>)
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	6013      	str	r3, [r2, #0]
}
 8012f88:	bf00      	nop
 8012f8a:	3718      	adds	r7, #24
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	24001380 	.word	0x24001380
 8012f94:	24001384 	.word	0x24001384

08012f98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012f9e:	f000 f989 	bl	80132b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012fa2:	4b15      	ldr	r3, [pc, #84]	; (8012ff8 <prvCheckForValidListAndQueue+0x60>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d120      	bne.n	8012fec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012faa:	4814      	ldr	r0, [pc, #80]	; (8012ffc <prvCheckForValidListAndQueue+0x64>)
 8012fac:	f7fd fe9c 	bl	8010ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012fb0:	4813      	ldr	r0, [pc, #76]	; (8013000 <prvCheckForValidListAndQueue+0x68>)
 8012fb2:	f7fd fe99 	bl	8010ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012fb6:	4b13      	ldr	r3, [pc, #76]	; (8013004 <prvCheckForValidListAndQueue+0x6c>)
 8012fb8:	4a10      	ldr	r2, [pc, #64]	; (8012ffc <prvCheckForValidListAndQueue+0x64>)
 8012fba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012fbc:	4b12      	ldr	r3, [pc, #72]	; (8013008 <prvCheckForValidListAndQueue+0x70>)
 8012fbe:	4a10      	ldr	r2, [pc, #64]	; (8013000 <prvCheckForValidListAndQueue+0x68>)
 8012fc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	4b11      	ldr	r3, [pc, #68]	; (801300c <prvCheckForValidListAndQueue+0x74>)
 8012fc8:	4a11      	ldr	r2, [pc, #68]	; (8013010 <prvCheckForValidListAndQueue+0x78>)
 8012fca:	2110      	movs	r1, #16
 8012fcc:	200a      	movs	r0, #10
 8012fce:	f7fd ffa7 	bl	8010f20 <xQueueGenericCreateStatic>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	4a08      	ldr	r2, [pc, #32]	; (8012ff8 <prvCheckForValidListAndQueue+0x60>)
 8012fd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012fd8:	4b07      	ldr	r3, [pc, #28]	; (8012ff8 <prvCheckForValidListAndQueue+0x60>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d005      	beq.n	8012fec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012fe0:	4b05      	ldr	r3, [pc, #20]	; (8012ff8 <prvCheckForValidListAndQueue+0x60>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	490b      	ldr	r1, [pc, #44]	; (8013014 <prvCheckForValidListAndQueue+0x7c>)
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fe fcb6 	bl	8011958 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012fec:	f000 f992 	bl	8013314 <vPortExitCritical>
}
 8012ff0:	bf00      	nop
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	24001388 	.word	0x24001388
 8012ffc:	24001358 	.word	0x24001358
 8013000:	2400136c 	.word	0x2400136c
 8013004:	24001380 	.word	0x24001380
 8013008:	24001384 	.word	0x24001384
 801300c:	24001434 	.word	0x24001434
 8013010:	24001394 	.word	0x24001394
 8013014:	08014ba8 	.word	0x08014ba8

08013018 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013018:	b580      	push	{r7, lr}
 801301a:	b08a      	sub	sp, #40	; 0x28
 801301c:	af00      	add	r7, sp, #0
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	607a      	str	r2, [r7, #4]
 8013024:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8013026:	f06f 0301 	mvn.w	r3, #1
 801302a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013038:	4b06      	ldr	r3, [pc, #24]	; (8013054 <xTimerPendFunctionCallFromISR+0x3c>)
 801303a:	6818      	ldr	r0, [r3, #0]
 801303c:	f107 0114 	add.w	r1, r7, #20
 8013040:	2300      	movs	r3, #0
 8013042:	683a      	ldr	r2, [r7, #0]
 8013044:	f7fe f940 	bl	80112c8 <xQueueGenericSendFromISR>
 8013048:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801304c:	4618      	mov	r0, r3
 801304e:	3728      	adds	r7, #40	; 0x28
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	24001388 	.word	0x24001388

08013058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013058:	b480      	push	{r7}
 801305a:	b085      	sub	sp, #20
 801305c:	af00      	add	r7, sp, #0
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	3b04      	subs	r3, #4
 8013068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	3b04      	subs	r3, #4
 8013076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	f023 0201 	bic.w	r2, r3, #1
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	3b04      	subs	r3, #4
 8013086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013088:	4a0c      	ldr	r2, [pc, #48]	; (80130bc <pxPortInitialiseStack+0x64>)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	3b14      	subs	r3, #20
 8013092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	3b04      	subs	r3, #4
 801309e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f06f 0202 	mvn.w	r2, #2
 80130a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	3b20      	subs	r3, #32
 80130ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80130ae:	68fb      	ldr	r3, [r7, #12]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3714      	adds	r7, #20
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr
 80130bc:	080130c1 	.word	0x080130c1

080130c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80130c6:	2300      	movs	r3, #0
 80130c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80130ca:	4b12      	ldr	r3, [pc, #72]	; (8013114 <prvTaskExitError+0x54>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130d2:	d00a      	beq.n	80130ea <prvTaskExitError+0x2a>
	__asm volatile
 80130d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d8:	f383 8811 	msr	BASEPRI, r3
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	f3bf 8f4f 	dsb	sy
 80130e4:	60fb      	str	r3, [r7, #12]
}
 80130e6:	bf00      	nop
 80130e8:	e7fe      	b.n	80130e8 <prvTaskExitError+0x28>
	__asm volatile
 80130ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ee:	f383 8811 	msr	BASEPRI, r3
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	f3bf 8f4f 	dsb	sy
 80130fa:	60bb      	str	r3, [r7, #8]
}
 80130fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80130fe:	bf00      	nop
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d0fc      	beq.n	8013100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013106:	bf00      	nop
 8013108:	bf00      	nop
 801310a:	3714      	adds	r7, #20
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr
 8013114:	24000098 	.word	0x24000098
	...

08013120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013120:	4b07      	ldr	r3, [pc, #28]	; (8013140 <pxCurrentTCBConst2>)
 8013122:	6819      	ldr	r1, [r3, #0]
 8013124:	6808      	ldr	r0, [r1, #0]
 8013126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312a:	f380 8809 	msr	PSP, r0
 801312e:	f3bf 8f6f 	isb	sy
 8013132:	f04f 0000 	mov.w	r0, #0
 8013136:	f380 8811 	msr	BASEPRI, r0
 801313a:	4770      	bx	lr
 801313c:	f3af 8000 	nop.w

08013140 <pxCurrentTCBConst2>:
 8013140:	24000e58 	.word	0x24000e58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013144:	bf00      	nop
 8013146:	bf00      	nop

08013148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013148:	4808      	ldr	r0, [pc, #32]	; (801316c <prvPortStartFirstTask+0x24>)
 801314a:	6800      	ldr	r0, [r0, #0]
 801314c:	6800      	ldr	r0, [r0, #0]
 801314e:	f380 8808 	msr	MSP, r0
 8013152:	f04f 0000 	mov.w	r0, #0
 8013156:	f380 8814 	msr	CONTROL, r0
 801315a:	b662      	cpsie	i
 801315c:	b661      	cpsie	f
 801315e:	f3bf 8f4f 	dsb	sy
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	df00      	svc	0
 8013168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801316a:	bf00      	nop
 801316c:	e000ed08 	.word	0xe000ed08

08013170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013176:	4b46      	ldr	r3, [pc, #280]	; (8013290 <xPortStartScheduler+0x120>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4a46      	ldr	r2, [pc, #280]	; (8013294 <xPortStartScheduler+0x124>)
 801317c:	4293      	cmp	r3, r2
 801317e:	d10a      	bne.n	8013196 <xPortStartScheduler+0x26>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	613b      	str	r3, [r7, #16]
}
 8013192:	bf00      	nop
 8013194:	e7fe      	b.n	8013194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013196:	4b3e      	ldr	r3, [pc, #248]	; (8013290 <xPortStartScheduler+0x120>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4a3f      	ldr	r2, [pc, #252]	; (8013298 <xPortStartScheduler+0x128>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d10a      	bne.n	80131b6 <xPortStartScheduler+0x46>
	__asm volatile
 80131a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a4:	f383 8811 	msr	BASEPRI, r3
 80131a8:	f3bf 8f6f 	isb	sy
 80131ac:	f3bf 8f4f 	dsb	sy
 80131b0:	60fb      	str	r3, [r7, #12]
}
 80131b2:	bf00      	nop
 80131b4:	e7fe      	b.n	80131b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80131b6:	4b39      	ldr	r3, [pc, #228]	; (801329c <xPortStartScheduler+0x12c>)
 80131b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	b2db      	uxtb	r3, r3
 80131c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	22ff      	movs	r2, #255	; 0xff
 80131c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131d0:	78fb      	ldrb	r3, [r7, #3]
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80131d8:	b2da      	uxtb	r2, r3
 80131da:	4b31      	ldr	r3, [pc, #196]	; (80132a0 <xPortStartScheduler+0x130>)
 80131dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80131de:	4b31      	ldr	r3, [pc, #196]	; (80132a4 <xPortStartScheduler+0x134>)
 80131e0:	2207      	movs	r2, #7
 80131e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131e4:	e009      	b.n	80131fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80131e6:	4b2f      	ldr	r3, [pc, #188]	; (80132a4 <xPortStartScheduler+0x134>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	3b01      	subs	r3, #1
 80131ec:	4a2d      	ldr	r2, [pc, #180]	; (80132a4 <xPortStartScheduler+0x134>)
 80131ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80131f0:	78fb      	ldrb	r3, [r7, #3]
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	005b      	lsls	r3, r3, #1
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131fa:	78fb      	ldrb	r3, [r7, #3]
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013202:	2b80      	cmp	r3, #128	; 0x80
 8013204:	d0ef      	beq.n	80131e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013206:	4b27      	ldr	r3, [pc, #156]	; (80132a4 <xPortStartScheduler+0x134>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f1c3 0307 	rsb	r3, r3, #7
 801320e:	2b04      	cmp	r3, #4
 8013210:	d00a      	beq.n	8013228 <xPortStartScheduler+0xb8>
	__asm volatile
 8013212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013216:	f383 8811 	msr	BASEPRI, r3
 801321a:	f3bf 8f6f 	isb	sy
 801321e:	f3bf 8f4f 	dsb	sy
 8013222:	60bb      	str	r3, [r7, #8]
}
 8013224:	bf00      	nop
 8013226:	e7fe      	b.n	8013226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013228:	4b1e      	ldr	r3, [pc, #120]	; (80132a4 <xPortStartScheduler+0x134>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	021b      	lsls	r3, r3, #8
 801322e:	4a1d      	ldr	r2, [pc, #116]	; (80132a4 <xPortStartScheduler+0x134>)
 8013230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013232:	4b1c      	ldr	r3, [pc, #112]	; (80132a4 <xPortStartScheduler+0x134>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801323a:	4a1a      	ldr	r2, [pc, #104]	; (80132a4 <xPortStartScheduler+0x134>)
 801323c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	b2da      	uxtb	r2, r3
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013246:	4b18      	ldr	r3, [pc, #96]	; (80132a8 <xPortStartScheduler+0x138>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4a17      	ldr	r2, [pc, #92]	; (80132a8 <xPortStartScheduler+0x138>)
 801324c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013252:	4b15      	ldr	r3, [pc, #84]	; (80132a8 <xPortStartScheduler+0x138>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	4a14      	ldr	r2, [pc, #80]	; (80132a8 <xPortStartScheduler+0x138>)
 8013258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801325c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801325e:	f000 f8dd 	bl	801341c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013262:	4b12      	ldr	r3, [pc, #72]	; (80132ac <xPortStartScheduler+0x13c>)
 8013264:	2200      	movs	r2, #0
 8013266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013268:	f000 f8fc 	bl	8013464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801326c:	4b10      	ldr	r3, [pc, #64]	; (80132b0 <xPortStartScheduler+0x140>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4a0f      	ldr	r2, [pc, #60]	; (80132b0 <xPortStartScheduler+0x140>)
 8013272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013278:	f7ff ff66 	bl	8013148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801327c:	f7fe ff7c 	bl	8012178 <vTaskSwitchContext>
	prvTaskExitError();
 8013280:	f7ff ff1e 	bl	80130c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013284:	2300      	movs	r3, #0
}
 8013286:	4618      	mov	r0, r3
 8013288:	3718      	adds	r7, #24
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	e000ed00 	.word	0xe000ed00
 8013294:	410fc271 	.word	0x410fc271
 8013298:	410fc270 	.word	0x410fc270
 801329c:	e000e400 	.word	0xe000e400
 80132a0:	24001484 	.word	0x24001484
 80132a4:	24001488 	.word	0x24001488
 80132a8:	e000ed20 	.word	0xe000ed20
 80132ac:	24000098 	.word	0x24000098
 80132b0:	e000ef34 	.word	0xe000ef34

080132b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80132b4:	b480      	push	{r7}
 80132b6:	b083      	sub	sp, #12
 80132b8:	af00      	add	r7, sp, #0
	__asm volatile
 80132ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132be:	f383 8811 	msr	BASEPRI, r3
 80132c2:	f3bf 8f6f 	isb	sy
 80132c6:	f3bf 8f4f 	dsb	sy
 80132ca:	607b      	str	r3, [r7, #4]
}
 80132cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80132ce:	4b0f      	ldr	r3, [pc, #60]	; (801330c <vPortEnterCritical+0x58>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3301      	adds	r3, #1
 80132d4:	4a0d      	ldr	r2, [pc, #52]	; (801330c <vPortEnterCritical+0x58>)
 80132d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80132d8:	4b0c      	ldr	r3, [pc, #48]	; (801330c <vPortEnterCritical+0x58>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	2b01      	cmp	r3, #1
 80132de:	d10f      	bne.n	8013300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80132e0:	4b0b      	ldr	r3, [pc, #44]	; (8013310 <vPortEnterCritical+0x5c>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00a      	beq.n	8013300 <vPortEnterCritical+0x4c>
	__asm volatile
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	f383 8811 	msr	BASEPRI, r3
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f3bf 8f4f 	dsb	sy
 80132fa:	603b      	str	r3, [r7, #0]
}
 80132fc:	bf00      	nop
 80132fe:	e7fe      	b.n	80132fe <vPortEnterCritical+0x4a>
	}
}
 8013300:	bf00      	nop
 8013302:	370c      	adds	r7, #12
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr
 801330c:	24000098 	.word	0x24000098
 8013310:	e000ed04 	.word	0xe000ed04

08013314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801331a:	4b12      	ldr	r3, [pc, #72]	; (8013364 <vPortExitCritical+0x50>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10a      	bne.n	8013338 <vPortExitCritical+0x24>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	607b      	str	r3, [r7, #4]
}
 8013334:	bf00      	nop
 8013336:	e7fe      	b.n	8013336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013338:	4b0a      	ldr	r3, [pc, #40]	; (8013364 <vPortExitCritical+0x50>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	3b01      	subs	r3, #1
 801333e:	4a09      	ldr	r2, [pc, #36]	; (8013364 <vPortExitCritical+0x50>)
 8013340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013342:	4b08      	ldr	r3, [pc, #32]	; (8013364 <vPortExitCritical+0x50>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d105      	bne.n	8013356 <vPortExitCritical+0x42>
 801334a:	2300      	movs	r3, #0
 801334c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	f383 8811 	msr	BASEPRI, r3
}
 8013354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013356:	bf00      	nop
 8013358:	370c      	adds	r7, #12
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	24000098 	.word	0x24000098
	...

08013370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013370:	f3ef 8009 	mrs	r0, PSP
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	4b15      	ldr	r3, [pc, #84]	; (80133d0 <pxCurrentTCBConst>)
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	f01e 0f10 	tst.w	lr, #16
 8013380:	bf08      	it	eq
 8013382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801338a:	6010      	str	r0, [r2, #0]
 801338c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013394:	f380 8811 	msr	BASEPRI, r0
 8013398:	f3bf 8f4f 	dsb	sy
 801339c:	f3bf 8f6f 	isb	sy
 80133a0:	f7fe feea 	bl	8012178 <vTaskSwitchContext>
 80133a4:	f04f 0000 	mov.w	r0, #0
 80133a8:	f380 8811 	msr	BASEPRI, r0
 80133ac:	bc09      	pop	{r0, r3}
 80133ae:	6819      	ldr	r1, [r3, #0]
 80133b0:	6808      	ldr	r0, [r1, #0]
 80133b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b6:	f01e 0f10 	tst.w	lr, #16
 80133ba:	bf08      	it	eq
 80133bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80133c0:	f380 8809 	msr	PSP, r0
 80133c4:	f3bf 8f6f 	isb	sy
 80133c8:	4770      	bx	lr
 80133ca:	bf00      	nop
 80133cc:	f3af 8000 	nop.w

080133d0 <pxCurrentTCBConst>:
 80133d0:	24000e58 	.word	0x24000e58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80133d4:	bf00      	nop
 80133d6:	bf00      	nop

080133d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
	__asm volatile
 80133de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	607b      	str	r3, [r7, #4]
}
 80133f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80133f2:	f7fe fe07 	bl	8012004 <xTaskIncrementTick>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d003      	beq.n	8013404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80133fc:	4b06      	ldr	r3, [pc, #24]	; (8013418 <xPortSysTickHandler+0x40>)
 80133fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013402:	601a      	str	r2, [r3, #0]
 8013404:	2300      	movs	r3, #0
 8013406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	f383 8811 	msr	BASEPRI, r3
}
 801340e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013410:	bf00      	nop
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	e000ed04 	.word	0xe000ed04

0801341c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801341c:	b480      	push	{r7}
 801341e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013420:	4b0b      	ldr	r3, [pc, #44]	; (8013450 <vPortSetupTimerInterrupt+0x34>)
 8013422:	2200      	movs	r2, #0
 8013424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013426:	4b0b      	ldr	r3, [pc, #44]	; (8013454 <vPortSetupTimerInterrupt+0x38>)
 8013428:	2200      	movs	r2, #0
 801342a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801342c:	4b0a      	ldr	r3, [pc, #40]	; (8013458 <vPortSetupTimerInterrupt+0x3c>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a0a      	ldr	r2, [pc, #40]	; (801345c <vPortSetupTimerInterrupt+0x40>)
 8013432:	fba2 2303 	umull	r2, r3, r2, r3
 8013436:	099b      	lsrs	r3, r3, #6
 8013438:	4a09      	ldr	r2, [pc, #36]	; (8013460 <vPortSetupTimerInterrupt+0x44>)
 801343a:	3b01      	subs	r3, #1
 801343c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801343e:	4b04      	ldr	r3, [pc, #16]	; (8013450 <vPortSetupTimerInterrupt+0x34>)
 8013440:	2207      	movs	r2, #7
 8013442:	601a      	str	r2, [r3, #0]
}
 8013444:	bf00      	nop
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	e000e010 	.word	0xe000e010
 8013454:	e000e018 	.word	0xe000e018
 8013458:	24000088 	.word	0x24000088
 801345c:	10624dd3 	.word	0x10624dd3
 8013460:	e000e014 	.word	0xe000e014

08013464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013474 <vPortEnableVFP+0x10>
 8013468:	6801      	ldr	r1, [r0, #0]
 801346a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801346e:	6001      	str	r1, [r0, #0]
 8013470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013472:	bf00      	nop
 8013474:	e000ed88 	.word	0xe000ed88

08013478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801347e:	f3ef 8305 	mrs	r3, IPSR
 8013482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2b0f      	cmp	r3, #15
 8013488:	d914      	bls.n	80134b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801348a:	4a17      	ldr	r2, [pc, #92]	; (80134e8 <vPortValidateInterruptPriority+0x70>)
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	4413      	add	r3, r2
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013494:	4b15      	ldr	r3, [pc, #84]	; (80134ec <vPortValidateInterruptPriority+0x74>)
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	7afa      	ldrb	r2, [r7, #11]
 801349a:	429a      	cmp	r2, r3
 801349c:	d20a      	bcs.n	80134b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	607b      	str	r3, [r7, #4]
}
 80134b0:	bf00      	nop
 80134b2:	e7fe      	b.n	80134b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80134b4:	4b0e      	ldr	r3, [pc, #56]	; (80134f0 <vPortValidateInterruptPriority+0x78>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80134bc:	4b0d      	ldr	r3, [pc, #52]	; (80134f4 <vPortValidateInterruptPriority+0x7c>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d90a      	bls.n	80134da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80134c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c8:	f383 8811 	msr	BASEPRI, r3
 80134cc:	f3bf 8f6f 	isb	sy
 80134d0:	f3bf 8f4f 	dsb	sy
 80134d4:	603b      	str	r3, [r7, #0]
}
 80134d6:	bf00      	nop
 80134d8:	e7fe      	b.n	80134d8 <vPortValidateInterruptPriority+0x60>
	}
 80134da:	bf00      	nop
 80134dc:	3714      	adds	r7, #20
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop
 80134e8:	e000e3f0 	.word	0xe000e3f0
 80134ec:	24001484 	.word	0x24001484
 80134f0:	e000ed0c 	.word	0xe000ed0c
 80134f4:	24001488 	.word	0x24001488

080134f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b08a      	sub	sp, #40	; 0x28
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013500:	2300      	movs	r3, #0
 8013502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013504:	f7fe fcc2 	bl	8011e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013508:	4b5b      	ldr	r3, [pc, #364]	; (8013678 <pvPortMalloc+0x180>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d101      	bne.n	8013514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013510:	f000 f920 	bl	8013754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013514:	4b59      	ldr	r3, [pc, #356]	; (801367c <pvPortMalloc+0x184>)
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	4013      	ands	r3, r2
 801351c:	2b00      	cmp	r3, #0
 801351e:	f040 8093 	bne.w	8013648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d01d      	beq.n	8013564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013528:	2208      	movs	r2, #8
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4413      	add	r3, r2
 801352e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f003 0307 	and.w	r3, r3, #7
 8013536:	2b00      	cmp	r3, #0
 8013538:	d014      	beq.n	8013564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f023 0307 	bic.w	r3, r3, #7
 8013540:	3308      	adds	r3, #8
 8013542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f003 0307 	and.w	r3, r3, #7
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00a      	beq.n	8013564 <pvPortMalloc+0x6c>
	__asm volatile
 801354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013552:	f383 8811 	msr	BASEPRI, r3
 8013556:	f3bf 8f6f 	isb	sy
 801355a:	f3bf 8f4f 	dsb	sy
 801355e:	617b      	str	r3, [r7, #20]
}
 8013560:	bf00      	nop
 8013562:	e7fe      	b.n	8013562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d06e      	beq.n	8013648 <pvPortMalloc+0x150>
 801356a:	4b45      	ldr	r3, [pc, #276]	; (8013680 <pvPortMalloc+0x188>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	429a      	cmp	r2, r3
 8013572:	d869      	bhi.n	8013648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013574:	4b43      	ldr	r3, [pc, #268]	; (8013684 <pvPortMalloc+0x18c>)
 8013576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013578:	4b42      	ldr	r3, [pc, #264]	; (8013684 <pvPortMalloc+0x18c>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801357e:	e004      	b.n	801358a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	429a      	cmp	r2, r3
 8013592:	d903      	bls.n	801359c <pvPortMalloc+0xa4>
 8013594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1f1      	bne.n	8013580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801359c:	4b36      	ldr	r3, [pc, #216]	; (8013678 <pvPortMalloc+0x180>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d050      	beq.n	8013648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80135a6:	6a3b      	ldr	r3, [r7, #32]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	2208      	movs	r2, #8
 80135ac:	4413      	add	r3, r2
 80135ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80135b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b2:	681a      	ldr	r2, [r3, #0]
 80135b4:	6a3b      	ldr	r3, [r7, #32]
 80135b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80135b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	1ad2      	subs	r2, r2, r3
 80135c0:	2308      	movs	r3, #8
 80135c2:	005b      	lsls	r3, r3, #1
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d91f      	bls.n	8013608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80135c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4413      	add	r3, r2
 80135ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	f003 0307 	and.w	r3, r3, #7
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00a      	beq.n	80135f0 <pvPortMalloc+0xf8>
	__asm volatile
 80135da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135de:	f383 8811 	msr	BASEPRI, r3
 80135e2:	f3bf 8f6f 	isb	sy
 80135e6:	f3bf 8f4f 	dsb	sy
 80135ea:	613b      	str	r3, [r7, #16]
}
 80135ec:	bf00      	nop
 80135ee:	e7fe      	b.n	80135ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f2:	685a      	ldr	r2, [r3, #4]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	1ad2      	subs	r2, r2, r3
 80135f8:	69bb      	ldr	r3, [r7, #24]
 80135fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013602:	69b8      	ldr	r0, [r7, #24]
 8013604:	f000 f908 	bl	8013818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013608:	4b1d      	ldr	r3, [pc, #116]	; (8013680 <pvPortMalloc+0x188>)
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	4a1b      	ldr	r2, [pc, #108]	; (8013680 <pvPortMalloc+0x188>)
 8013614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013616:	4b1a      	ldr	r3, [pc, #104]	; (8013680 <pvPortMalloc+0x188>)
 8013618:	681a      	ldr	r2, [r3, #0]
 801361a:	4b1b      	ldr	r3, [pc, #108]	; (8013688 <pvPortMalloc+0x190>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	429a      	cmp	r2, r3
 8013620:	d203      	bcs.n	801362a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013622:	4b17      	ldr	r3, [pc, #92]	; (8013680 <pvPortMalloc+0x188>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	4a18      	ldr	r2, [pc, #96]	; (8013688 <pvPortMalloc+0x190>)
 8013628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362c:	685a      	ldr	r2, [r3, #4]
 801362e:	4b13      	ldr	r3, [pc, #76]	; (801367c <pvPortMalloc+0x184>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	431a      	orrs	r2, r3
 8013634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	2200      	movs	r2, #0
 801363c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801363e:	4b13      	ldr	r3, [pc, #76]	; (801368c <pvPortMalloc+0x194>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	3301      	adds	r3, #1
 8013644:	4a11      	ldr	r2, [pc, #68]	; (801368c <pvPortMalloc+0x194>)
 8013646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013648:	f7fe fc2e 	bl	8011ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	f003 0307 	and.w	r3, r3, #7
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00a      	beq.n	801366c <pvPortMalloc+0x174>
	__asm volatile
 8013656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365a:	f383 8811 	msr	BASEPRI, r3
 801365e:	f3bf 8f6f 	isb	sy
 8013662:	f3bf 8f4f 	dsb	sy
 8013666:	60fb      	str	r3, [r7, #12]
}
 8013668:	bf00      	nop
 801366a:	e7fe      	b.n	801366a <pvPortMalloc+0x172>
	return pvReturn;
 801366c:	69fb      	ldr	r3, [r7, #28]
}
 801366e:	4618      	mov	r0, r3
 8013670:	3728      	adds	r7, #40	; 0x28
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	24005094 	.word	0x24005094
 801367c:	240050a8 	.word	0x240050a8
 8013680:	24005098 	.word	0x24005098
 8013684:	2400508c 	.word	0x2400508c
 8013688:	2400509c 	.word	0x2400509c
 801368c:	240050a0 	.word	0x240050a0

08013690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d04d      	beq.n	801373e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80136a2:	2308      	movs	r3, #8
 80136a4:	425b      	negs	r3, r3
 80136a6:	697a      	ldr	r2, [r7, #20]
 80136a8:	4413      	add	r3, r2
 80136aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	685a      	ldr	r2, [r3, #4]
 80136b4:	4b24      	ldr	r3, [pc, #144]	; (8013748 <vPortFree+0xb8>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	4013      	ands	r3, r2
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d10a      	bne.n	80136d4 <vPortFree+0x44>
	__asm volatile
 80136be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c2:	f383 8811 	msr	BASEPRI, r3
 80136c6:	f3bf 8f6f 	isb	sy
 80136ca:	f3bf 8f4f 	dsb	sy
 80136ce:	60fb      	str	r3, [r7, #12]
}
 80136d0:	bf00      	nop
 80136d2:	e7fe      	b.n	80136d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00a      	beq.n	80136f2 <vPortFree+0x62>
	__asm volatile
 80136dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e0:	f383 8811 	msr	BASEPRI, r3
 80136e4:	f3bf 8f6f 	isb	sy
 80136e8:	f3bf 8f4f 	dsb	sy
 80136ec:	60bb      	str	r3, [r7, #8]
}
 80136ee:	bf00      	nop
 80136f0:	e7fe      	b.n	80136f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	685a      	ldr	r2, [r3, #4]
 80136f6:	4b14      	ldr	r3, [pc, #80]	; (8013748 <vPortFree+0xb8>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4013      	ands	r3, r2
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d01e      	beq.n	801373e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d11a      	bne.n	801373e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	685a      	ldr	r2, [r3, #4]
 801370c:	4b0e      	ldr	r3, [pc, #56]	; (8013748 <vPortFree+0xb8>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	43db      	mvns	r3, r3
 8013712:	401a      	ands	r2, r3
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013718:	f7fe fbb8 	bl	8011e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	685a      	ldr	r2, [r3, #4]
 8013720:	4b0a      	ldr	r3, [pc, #40]	; (801374c <vPortFree+0xbc>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4413      	add	r3, r2
 8013726:	4a09      	ldr	r2, [pc, #36]	; (801374c <vPortFree+0xbc>)
 8013728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801372a:	6938      	ldr	r0, [r7, #16]
 801372c:	f000 f874 	bl	8013818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013730:	4b07      	ldr	r3, [pc, #28]	; (8013750 <vPortFree+0xc0>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	3301      	adds	r3, #1
 8013736:	4a06      	ldr	r2, [pc, #24]	; (8013750 <vPortFree+0xc0>)
 8013738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801373a:	f7fe fbb5 	bl	8011ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801373e:	bf00      	nop
 8013740:	3718      	adds	r7, #24
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	240050a8 	.word	0x240050a8
 801374c:	24005098 	.word	0x24005098
 8013750:	240050a4 	.word	0x240050a4

08013754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013754:	b480      	push	{r7}
 8013756:	b085      	sub	sp, #20
 8013758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801375a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801375e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013760:	4b27      	ldr	r3, [pc, #156]	; (8013800 <prvHeapInit+0xac>)
 8013762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f003 0307 	and.w	r3, r3, #7
 801376a:	2b00      	cmp	r3, #0
 801376c:	d00c      	beq.n	8013788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	3307      	adds	r3, #7
 8013772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	f023 0307 	bic.w	r3, r3, #7
 801377a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801377c:	68ba      	ldr	r2, [r7, #8]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	4a1f      	ldr	r2, [pc, #124]	; (8013800 <prvHeapInit+0xac>)
 8013784:	4413      	add	r3, r2
 8013786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801378c:	4a1d      	ldr	r2, [pc, #116]	; (8013804 <prvHeapInit+0xb0>)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013792:	4b1c      	ldr	r3, [pc, #112]	; (8013804 <prvHeapInit+0xb0>)
 8013794:	2200      	movs	r2, #0
 8013796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	4413      	add	r3, r2
 801379e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80137a0:	2208      	movs	r2, #8
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	1a9b      	subs	r3, r3, r2
 80137a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f023 0307 	bic.w	r3, r3, #7
 80137ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	4a15      	ldr	r2, [pc, #84]	; (8013808 <prvHeapInit+0xb4>)
 80137b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80137b6:	4b14      	ldr	r3, [pc, #80]	; (8013808 <prvHeapInit+0xb4>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2200      	movs	r2, #0
 80137bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80137be:	4b12      	ldr	r3, [pc, #72]	; (8013808 <prvHeapInit+0xb4>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	2200      	movs	r2, #0
 80137c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	1ad2      	subs	r2, r2, r3
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80137d4:	4b0c      	ldr	r3, [pc, #48]	; (8013808 <prvHeapInit+0xb4>)
 80137d6:	681a      	ldr	r2, [r3, #0]
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	4a0a      	ldr	r2, [pc, #40]	; (801380c <prvHeapInit+0xb8>)
 80137e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	4a09      	ldr	r2, [pc, #36]	; (8013810 <prvHeapInit+0xbc>)
 80137ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80137ec:	4b09      	ldr	r3, [pc, #36]	; (8013814 <prvHeapInit+0xc0>)
 80137ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80137f2:	601a      	str	r2, [r3, #0]
}
 80137f4:	bf00      	nop
 80137f6:	3714      	adds	r7, #20
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr
 8013800:	2400148c 	.word	0x2400148c
 8013804:	2400508c 	.word	0x2400508c
 8013808:	24005094 	.word	0x24005094
 801380c:	2400509c 	.word	0x2400509c
 8013810:	24005098 	.word	0x24005098
 8013814:	240050a8 	.word	0x240050a8

08013818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013818:	b480      	push	{r7}
 801381a:	b085      	sub	sp, #20
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013820:	4b28      	ldr	r3, [pc, #160]	; (80138c4 <prvInsertBlockIntoFreeList+0xac>)
 8013822:	60fb      	str	r3, [r7, #12]
 8013824:	e002      	b.n	801382c <prvInsertBlockIntoFreeList+0x14>
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	60fb      	str	r3, [r7, #12]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	429a      	cmp	r2, r3
 8013834:	d8f7      	bhi.n	8013826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	68ba      	ldr	r2, [r7, #8]
 8013840:	4413      	add	r3, r2
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	429a      	cmp	r2, r3
 8013846:	d108      	bne.n	801385a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	685a      	ldr	r2, [r3, #4]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	441a      	add	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	441a      	add	r2, r3
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	429a      	cmp	r2, r3
 801386c:	d118      	bne.n	80138a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	4b15      	ldr	r3, [pc, #84]	; (80138c8 <prvInsertBlockIntoFreeList+0xb0>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	429a      	cmp	r2, r3
 8013878:	d00d      	beq.n	8013896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	685a      	ldr	r2, [r3, #4]
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	441a      	add	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	601a      	str	r2, [r3, #0]
 8013894:	e008      	b.n	80138a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013896:	4b0c      	ldr	r3, [pc, #48]	; (80138c8 <prvInsertBlockIntoFreeList+0xb0>)
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	601a      	str	r2, [r3, #0]
 801389e:	e003      	b.n	80138a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80138a8:	68fa      	ldr	r2, [r7, #12]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d002      	beq.n	80138b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138b6:	bf00      	nop
 80138b8:	3714      	adds	r7, #20
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	2400508c 	.word	0x2400508c
 80138c8:	24005094 	.word	0x24005094

080138cc <__errno>:
 80138cc:	4b01      	ldr	r3, [pc, #4]	; (80138d4 <__errno+0x8>)
 80138ce:	6818      	ldr	r0, [r3, #0]
 80138d0:	4770      	bx	lr
 80138d2:	bf00      	nop
 80138d4:	2400009c 	.word	0x2400009c

080138d8 <__libc_init_array>:
 80138d8:	b570      	push	{r4, r5, r6, lr}
 80138da:	4d0d      	ldr	r5, [pc, #52]	; (8013910 <__libc_init_array+0x38>)
 80138dc:	4c0d      	ldr	r4, [pc, #52]	; (8013914 <__libc_init_array+0x3c>)
 80138de:	1b64      	subs	r4, r4, r5
 80138e0:	10a4      	asrs	r4, r4, #2
 80138e2:	2600      	movs	r6, #0
 80138e4:	42a6      	cmp	r6, r4
 80138e6:	d109      	bne.n	80138fc <__libc_init_array+0x24>
 80138e8:	4d0b      	ldr	r5, [pc, #44]	; (8013918 <__libc_init_array+0x40>)
 80138ea:	4c0c      	ldr	r4, [pc, #48]	; (801391c <__libc_init_array+0x44>)
 80138ec:	f001 f842 	bl	8014974 <_init>
 80138f0:	1b64      	subs	r4, r4, r5
 80138f2:	10a4      	asrs	r4, r4, #2
 80138f4:	2600      	movs	r6, #0
 80138f6:	42a6      	cmp	r6, r4
 80138f8:	d105      	bne.n	8013906 <__libc_init_array+0x2e>
 80138fa:	bd70      	pop	{r4, r5, r6, pc}
 80138fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013900:	4798      	blx	r3
 8013902:	3601      	adds	r6, #1
 8013904:	e7ee      	b.n	80138e4 <__libc_init_array+0xc>
 8013906:	f855 3b04 	ldr.w	r3, [r5], #4
 801390a:	4798      	blx	r3
 801390c:	3601      	adds	r6, #1
 801390e:	e7f2      	b.n	80138f6 <__libc_init_array+0x1e>
 8013910:	08014d44 	.word	0x08014d44
 8013914:	08014d44 	.word	0x08014d44
 8013918:	08014d44 	.word	0x08014d44
 801391c:	08014d48 	.word	0x08014d48

08013920 <malloc>:
 8013920:	4b02      	ldr	r3, [pc, #8]	; (801392c <malloc+0xc>)
 8013922:	4601      	mov	r1, r0
 8013924:	6818      	ldr	r0, [r3, #0]
 8013926:	f000 b88d 	b.w	8013a44 <_malloc_r>
 801392a:	bf00      	nop
 801392c:	2400009c 	.word	0x2400009c

08013930 <free>:
 8013930:	4b02      	ldr	r3, [pc, #8]	; (801393c <free+0xc>)
 8013932:	4601      	mov	r1, r0
 8013934:	6818      	ldr	r0, [r3, #0]
 8013936:	f000 b819 	b.w	801396c <_free_r>
 801393a:	bf00      	nop
 801393c:	2400009c 	.word	0x2400009c

08013940 <memcpy>:
 8013940:	440a      	add	r2, r1
 8013942:	4291      	cmp	r1, r2
 8013944:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013948:	d100      	bne.n	801394c <memcpy+0xc>
 801394a:	4770      	bx	lr
 801394c:	b510      	push	{r4, lr}
 801394e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013956:	4291      	cmp	r1, r2
 8013958:	d1f9      	bne.n	801394e <memcpy+0xe>
 801395a:	bd10      	pop	{r4, pc}

0801395c <memset>:
 801395c:	4402      	add	r2, r0
 801395e:	4603      	mov	r3, r0
 8013960:	4293      	cmp	r3, r2
 8013962:	d100      	bne.n	8013966 <memset+0xa>
 8013964:	4770      	bx	lr
 8013966:	f803 1b01 	strb.w	r1, [r3], #1
 801396a:	e7f9      	b.n	8013960 <memset+0x4>

0801396c <_free_r>:
 801396c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801396e:	2900      	cmp	r1, #0
 8013970:	d044      	beq.n	80139fc <_free_r+0x90>
 8013972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013976:	9001      	str	r0, [sp, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	f1a1 0404 	sub.w	r4, r1, #4
 801397e:	bfb8      	it	lt
 8013980:	18e4      	addlt	r4, r4, r3
 8013982:	f000 fc51 	bl	8014228 <__malloc_lock>
 8013986:	4a1e      	ldr	r2, [pc, #120]	; (8013a00 <_free_r+0x94>)
 8013988:	9801      	ldr	r0, [sp, #4]
 801398a:	6813      	ldr	r3, [r2, #0]
 801398c:	b933      	cbnz	r3, 801399c <_free_r+0x30>
 801398e:	6063      	str	r3, [r4, #4]
 8013990:	6014      	str	r4, [r2, #0]
 8013992:	b003      	add	sp, #12
 8013994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013998:	f000 bc4c 	b.w	8014234 <__malloc_unlock>
 801399c:	42a3      	cmp	r3, r4
 801399e:	d908      	bls.n	80139b2 <_free_r+0x46>
 80139a0:	6825      	ldr	r5, [r4, #0]
 80139a2:	1961      	adds	r1, r4, r5
 80139a4:	428b      	cmp	r3, r1
 80139a6:	bf01      	itttt	eq
 80139a8:	6819      	ldreq	r1, [r3, #0]
 80139aa:	685b      	ldreq	r3, [r3, #4]
 80139ac:	1949      	addeq	r1, r1, r5
 80139ae:	6021      	streq	r1, [r4, #0]
 80139b0:	e7ed      	b.n	801398e <_free_r+0x22>
 80139b2:	461a      	mov	r2, r3
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	b10b      	cbz	r3, 80139bc <_free_r+0x50>
 80139b8:	42a3      	cmp	r3, r4
 80139ba:	d9fa      	bls.n	80139b2 <_free_r+0x46>
 80139bc:	6811      	ldr	r1, [r2, #0]
 80139be:	1855      	adds	r5, r2, r1
 80139c0:	42a5      	cmp	r5, r4
 80139c2:	d10b      	bne.n	80139dc <_free_r+0x70>
 80139c4:	6824      	ldr	r4, [r4, #0]
 80139c6:	4421      	add	r1, r4
 80139c8:	1854      	adds	r4, r2, r1
 80139ca:	42a3      	cmp	r3, r4
 80139cc:	6011      	str	r1, [r2, #0]
 80139ce:	d1e0      	bne.n	8013992 <_free_r+0x26>
 80139d0:	681c      	ldr	r4, [r3, #0]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	6053      	str	r3, [r2, #4]
 80139d6:	4421      	add	r1, r4
 80139d8:	6011      	str	r1, [r2, #0]
 80139da:	e7da      	b.n	8013992 <_free_r+0x26>
 80139dc:	d902      	bls.n	80139e4 <_free_r+0x78>
 80139de:	230c      	movs	r3, #12
 80139e0:	6003      	str	r3, [r0, #0]
 80139e2:	e7d6      	b.n	8013992 <_free_r+0x26>
 80139e4:	6825      	ldr	r5, [r4, #0]
 80139e6:	1961      	adds	r1, r4, r5
 80139e8:	428b      	cmp	r3, r1
 80139ea:	bf04      	itt	eq
 80139ec:	6819      	ldreq	r1, [r3, #0]
 80139ee:	685b      	ldreq	r3, [r3, #4]
 80139f0:	6063      	str	r3, [r4, #4]
 80139f2:	bf04      	itt	eq
 80139f4:	1949      	addeq	r1, r1, r5
 80139f6:	6021      	streq	r1, [r4, #0]
 80139f8:	6054      	str	r4, [r2, #4]
 80139fa:	e7ca      	b.n	8013992 <_free_r+0x26>
 80139fc:	b003      	add	sp, #12
 80139fe:	bd30      	pop	{r4, r5, pc}
 8013a00:	240050ac 	.word	0x240050ac

08013a04 <sbrk_aligned>:
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	4e0e      	ldr	r6, [pc, #56]	; (8013a40 <sbrk_aligned+0x3c>)
 8013a08:	460c      	mov	r4, r1
 8013a0a:	6831      	ldr	r1, [r6, #0]
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	b911      	cbnz	r1, 8013a16 <sbrk_aligned+0x12>
 8013a10:	f000 f91a 	bl	8013c48 <_sbrk_r>
 8013a14:	6030      	str	r0, [r6, #0]
 8013a16:	4621      	mov	r1, r4
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f000 f915 	bl	8013c48 <_sbrk_r>
 8013a1e:	1c43      	adds	r3, r0, #1
 8013a20:	d00a      	beq.n	8013a38 <sbrk_aligned+0x34>
 8013a22:	1cc4      	adds	r4, r0, #3
 8013a24:	f024 0403 	bic.w	r4, r4, #3
 8013a28:	42a0      	cmp	r0, r4
 8013a2a:	d007      	beq.n	8013a3c <sbrk_aligned+0x38>
 8013a2c:	1a21      	subs	r1, r4, r0
 8013a2e:	4628      	mov	r0, r5
 8013a30:	f000 f90a 	bl	8013c48 <_sbrk_r>
 8013a34:	3001      	adds	r0, #1
 8013a36:	d101      	bne.n	8013a3c <sbrk_aligned+0x38>
 8013a38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	bd70      	pop	{r4, r5, r6, pc}
 8013a40:	240050b0 	.word	0x240050b0

08013a44 <_malloc_r>:
 8013a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a48:	1ccd      	adds	r5, r1, #3
 8013a4a:	f025 0503 	bic.w	r5, r5, #3
 8013a4e:	3508      	adds	r5, #8
 8013a50:	2d0c      	cmp	r5, #12
 8013a52:	bf38      	it	cc
 8013a54:	250c      	movcc	r5, #12
 8013a56:	2d00      	cmp	r5, #0
 8013a58:	4607      	mov	r7, r0
 8013a5a:	db01      	blt.n	8013a60 <_malloc_r+0x1c>
 8013a5c:	42a9      	cmp	r1, r5
 8013a5e:	d905      	bls.n	8013a6c <_malloc_r+0x28>
 8013a60:	230c      	movs	r3, #12
 8013a62:	603b      	str	r3, [r7, #0]
 8013a64:	2600      	movs	r6, #0
 8013a66:	4630      	mov	r0, r6
 8013a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a6c:	4e2e      	ldr	r6, [pc, #184]	; (8013b28 <_malloc_r+0xe4>)
 8013a6e:	f000 fbdb 	bl	8014228 <__malloc_lock>
 8013a72:	6833      	ldr	r3, [r6, #0]
 8013a74:	461c      	mov	r4, r3
 8013a76:	bb34      	cbnz	r4, 8013ac6 <_malloc_r+0x82>
 8013a78:	4629      	mov	r1, r5
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	f7ff ffc2 	bl	8013a04 <sbrk_aligned>
 8013a80:	1c43      	adds	r3, r0, #1
 8013a82:	4604      	mov	r4, r0
 8013a84:	d14d      	bne.n	8013b22 <_malloc_r+0xde>
 8013a86:	6834      	ldr	r4, [r6, #0]
 8013a88:	4626      	mov	r6, r4
 8013a8a:	2e00      	cmp	r6, #0
 8013a8c:	d140      	bne.n	8013b10 <_malloc_r+0xcc>
 8013a8e:	6823      	ldr	r3, [r4, #0]
 8013a90:	4631      	mov	r1, r6
 8013a92:	4638      	mov	r0, r7
 8013a94:	eb04 0803 	add.w	r8, r4, r3
 8013a98:	f000 f8d6 	bl	8013c48 <_sbrk_r>
 8013a9c:	4580      	cmp	r8, r0
 8013a9e:	d13a      	bne.n	8013b16 <_malloc_r+0xd2>
 8013aa0:	6821      	ldr	r1, [r4, #0]
 8013aa2:	3503      	adds	r5, #3
 8013aa4:	1a6d      	subs	r5, r5, r1
 8013aa6:	f025 0503 	bic.w	r5, r5, #3
 8013aaa:	3508      	adds	r5, #8
 8013aac:	2d0c      	cmp	r5, #12
 8013aae:	bf38      	it	cc
 8013ab0:	250c      	movcc	r5, #12
 8013ab2:	4629      	mov	r1, r5
 8013ab4:	4638      	mov	r0, r7
 8013ab6:	f7ff ffa5 	bl	8013a04 <sbrk_aligned>
 8013aba:	3001      	adds	r0, #1
 8013abc:	d02b      	beq.n	8013b16 <_malloc_r+0xd2>
 8013abe:	6823      	ldr	r3, [r4, #0]
 8013ac0:	442b      	add	r3, r5
 8013ac2:	6023      	str	r3, [r4, #0]
 8013ac4:	e00e      	b.n	8013ae4 <_malloc_r+0xa0>
 8013ac6:	6822      	ldr	r2, [r4, #0]
 8013ac8:	1b52      	subs	r2, r2, r5
 8013aca:	d41e      	bmi.n	8013b0a <_malloc_r+0xc6>
 8013acc:	2a0b      	cmp	r2, #11
 8013ace:	d916      	bls.n	8013afe <_malloc_r+0xba>
 8013ad0:	1961      	adds	r1, r4, r5
 8013ad2:	42a3      	cmp	r3, r4
 8013ad4:	6025      	str	r5, [r4, #0]
 8013ad6:	bf18      	it	ne
 8013ad8:	6059      	strne	r1, [r3, #4]
 8013ada:	6863      	ldr	r3, [r4, #4]
 8013adc:	bf08      	it	eq
 8013ade:	6031      	streq	r1, [r6, #0]
 8013ae0:	5162      	str	r2, [r4, r5]
 8013ae2:	604b      	str	r3, [r1, #4]
 8013ae4:	4638      	mov	r0, r7
 8013ae6:	f104 060b 	add.w	r6, r4, #11
 8013aea:	f000 fba3 	bl	8014234 <__malloc_unlock>
 8013aee:	f026 0607 	bic.w	r6, r6, #7
 8013af2:	1d23      	adds	r3, r4, #4
 8013af4:	1af2      	subs	r2, r6, r3
 8013af6:	d0b6      	beq.n	8013a66 <_malloc_r+0x22>
 8013af8:	1b9b      	subs	r3, r3, r6
 8013afa:	50a3      	str	r3, [r4, r2]
 8013afc:	e7b3      	b.n	8013a66 <_malloc_r+0x22>
 8013afe:	6862      	ldr	r2, [r4, #4]
 8013b00:	42a3      	cmp	r3, r4
 8013b02:	bf0c      	ite	eq
 8013b04:	6032      	streq	r2, [r6, #0]
 8013b06:	605a      	strne	r2, [r3, #4]
 8013b08:	e7ec      	b.n	8013ae4 <_malloc_r+0xa0>
 8013b0a:	4623      	mov	r3, r4
 8013b0c:	6864      	ldr	r4, [r4, #4]
 8013b0e:	e7b2      	b.n	8013a76 <_malloc_r+0x32>
 8013b10:	4634      	mov	r4, r6
 8013b12:	6876      	ldr	r6, [r6, #4]
 8013b14:	e7b9      	b.n	8013a8a <_malloc_r+0x46>
 8013b16:	230c      	movs	r3, #12
 8013b18:	603b      	str	r3, [r7, #0]
 8013b1a:	4638      	mov	r0, r7
 8013b1c:	f000 fb8a 	bl	8014234 <__malloc_unlock>
 8013b20:	e7a1      	b.n	8013a66 <_malloc_r+0x22>
 8013b22:	6025      	str	r5, [r4, #0]
 8013b24:	e7de      	b.n	8013ae4 <_malloc_r+0xa0>
 8013b26:	bf00      	nop
 8013b28:	240050ac 	.word	0x240050ac

08013b2c <iprintf>:
 8013b2c:	b40f      	push	{r0, r1, r2, r3}
 8013b2e:	4b0a      	ldr	r3, [pc, #40]	; (8013b58 <iprintf+0x2c>)
 8013b30:	b513      	push	{r0, r1, r4, lr}
 8013b32:	681c      	ldr	r4, [r3, #0]
 8013b34:	b124      	cbz	r4, 8013b40 <iprintf+0x14>
 8013b36:	69a3      	ldr	r3, [r4, #24]
 8013b38:	b913      	cbnz	r3, 8013b40 <iprintf+0x14>
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f000 fa6e 	bl	801401c <__sinit>
 8013b40:	ab05      	add	r3, sp, #20
 8013b42:	9a04      	ldr	r2, [sp, #16]
 8013b44:	68a1      	ldr	r1, [r4, #8]
 8013b46:	9301      	str	r3, [sp, #4]
 8013b48:	4620      	mov	r0, r4
 8013b4a:	f000 fba3 	bl	8014294 <_vfiprintf_r>
 8013b4e:	b002      	add	sp, #8
 8013b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b54:	b004      	add	sp, #16
 8013b56:	4770      	bx	lr
 8013b58:	2400009c 	.word	0x2400009c

08013b5c <_puts_r>:
 8013b5c:	b570      	push	{r4, r5, r6, lr}
 8013b5e:	460e      	mov	r6, r1
 8013b60:	4605      	mov	r5, r0
 8013b62:	b118      	cbz	r0, 8013b6c <_puts_r+0x10>
 8013b64:	6983      	ldr	r3, [r0, #24]
 8013b66:	b90b      	cbnz	r3, 8013b6c <_puts_r+0x10>
 8013b68:	f000 fa58 	bl	801401c <__sinit>
 8013b6c:	69ab      	ldr	r3, [r5, #24]
 8013b6e:	68ac      	ldr	r4, [r5, #8]
 8013b70:	b913      	cbnz	r3, 8013b78 <_puts_r+0x1c>
 8013b72:	4628      	mov	r0, r5
 8013b74:	f000 fa52 	bl	801401c <__sinit>
 8013b78:	4b2c      	ldr	r3, [pc, #176]	; (8013c2c <_puts_r+0xd0>)
 8013b7a:	429c      	cmp	r4, r3
 8013b7c:	d120      	bne.n	8013bc0 <_puts_r+0x64>
 8013b7e:	686c      	ldr	r4, [r5, #4]
 8013b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b82:	07db      	lsls	r3, r3, #31
 8013b84:	d405      	bmi.n	8013b92 <_puts_r+0x36>
 8013b86:	89a3      	ldrh	r3, [r4, #12]
 8013b88:	0598      	lsls	r0, r3, #22
 8013b8a:	d402      	bmi.n	8013b92 <_puts_r+0x36>
 8013b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b8e:	f000 fae3 	bl	8014158 <__retarget_lock_acquire_recursive>
 8013b92:	89a3      	ldrh	r3, [r4, #12]
 8013b94:	0719      	lsls	r1, r3, #28
 8013b96:	d51d      	bpl.n	8013bd4 <_puts_r+0x78>
 8013b98:	6923      	ldr	r3, [r4, #16]
 8013b9a:	b1db      	cbz	r3, 8013bd4 <_puts_r+0x78>
 8013b9c:	3e01      	subs	r6, #1
 8013b9e:	68a3      	ldr	r3, [r4, #8]
 8013ba0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013ba4:	3b01      	subs	r3, #1
 8013ba6:	60a3      	str	r3, [r4, #8]
 8013ba8:	bb39      	cbnz	r1, 8013bfa <_puts_r+0x9e>
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	da38      	bge.n	8013c20 <_puts_r+0xc4>
 8013bae:	4622      	mov	r2, r4
 8013bb0:	210a      	movs	r1, #10
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f000 f858 	bl	8013c68 <__swbuf_r>
 8013bb8:	3001      	adds	r0, #1
 8013bba:	d011      	beq.n	8013be0 <_puts_r+0x84>
 8013bbc:	250a      	movs	r5, #10
 8013bbe:	e011      	b.n	8013be4 <_puts_r+0x88>
 8013bc0:	4b1b      	ldr	r3, [pc, #108]	; (8013c30 <_puts_r+0xd4>)
 8013bc2:	429c      	cmp	r4, r3
 8013bc4:	d101      	bne.n	8013bca <_puts_r+0x6e>
 8013bc6:	68ac      	ldr	r4, [r5, #8]
 8013bc8:	e7da      	b.n	8013b80 <_puts_r+0x24>
 8013bca:	4b1a      	ldr	r3, [pc, #104]	; (8013c34 <_puts_r+0xd8>)
 8013bcc:	429c      	cmp	r4, r3
 8013bce:	bf08      	it	eq
 8013bd0:	68ec      	ldreq	r4, [r5, #12]
 8013bd2:	e7d5      	b.n	8013b80 <_puts_r+0x24>
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f000 f898 	bl	8013d0c <__swsetup_r>
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d0dd      	beq.n	8013b9c <_puts_r+0x40>
 8013be0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013be6:	07da      	lsls	r2, r3, #31
 8013be8:	d405      	bmi.n	8013bf6 <_puts_r+0x9a>
 8013bea:	89a3      	ldrh	r3, [r4, #12]
 8013bec:	059b      	lsls	r3, r3, #22
 8013bee:	d402      	bmi.n	8013bf6 <_puts_r+0x9a>
 8013bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bf2:	f000 fab2 	bl	801415a <__retarget_lock_release_recursive>
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	bd70      	pop	{r4, r5, r6, pc}
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	da04      	bge.n	8013c08 <_puts_r+0xac>
 8013bfe:	69a2      	ldr	r2, [r4, #24]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	dc06      	bgt.n	8013c12 <_puts_r+0xb6>
 8013c04:	290a      	cmp	r1, #10
 8013c06:	d004      	beq.n	8013c12 <_puts_r+0xb6>
 8013c08:	6823      	ldr	r3, [r4, #0]
 8013c0a:	1c5a      	adds	r2, r3, #1
 8013c0c:	6022      	str	r2, [r4, #0]
 8013c0e:	7019      	strb	r1, [r3, #0]
 8013c10:	e7c5      	b.n	8013b9e <_puts_r+0x42>
 8013c12:	4622      	mov	r2, r4
 8013c14:	4628      	mov	r0, r5
 8013c16:	f000 f827 	bl	8013c68 <__swbuf_r>
 8013c1a:	3001      	adds	r0, #1
 8013c1c:	d1bf      	bne.n	8013b9e <_puts_r+0x42>
 8013c1e:	e7df      	b.n	8013be0 <_puts_r+0x84>
 8013c20:	6823      	ldr	r3, [r4, #0]
 8013c22:	250a      	movs	r5, #10
 8013c24:	1c5a      	adds	r2, r3, #1
 8013c26:	6022      	str	r2, [r4, #0]
 8013c28:	701d      	strb	r5, [r3, #0]
 8013c2a:	e7db      	b.n	8013be4 <_puts_r+0x88>
 8013c2c:	08014cc8 	.word	0x08014cc8
 8013c30:	08014ce8 	.word	0x08014ce8
 8013c34:	08014ca8 	.word	0x08014ca8

08013c38 <puts>:
 8013c38:	4b02      	ldr	r3, [pc, #8]	; (8013c44 <puts+0xc>)
 8013c3a:	4601      	mov	r1, r0
 8013c3c:	6818      	ldr	r0, [r3, #0]
 8013c3e:	f7ff bf8d 	b.w	8013b5c <_puts_r>
 8013c42:	bf00      	nop
 8013c44:	2400009c 	.word	0x2400009c

08013c48 <_sbrk_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4d06      	ldr	r5, [pc, #24]	; (8013c64 <_sbrk_r+0x1c>)
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	4604      	mov	r4, r0
 8013c50:	4608      	mov	r0, r1
 8013c52:	602b      	str	r3, [r5, #0]
 8013c54:	f7ee ff5c 	bl	8002b10 <_sbrk>
 8013c58:	1c43      	adds	r3, r0, #1
 8013c5a:	d102      	bne.n	8013c62 <_sbrk_r+0x1a>
 8013c5c:	682b      	ldr	r3, [r5, #0]
 8013c5e:	b103      	cbz	r3, 8013c62 <_sbrk_r+0x1a>
 8013c60:	6023      	str	r3, [r4, #0]
 8013c62:	bd38      	pop	{r3, r4, r5, pc}
 8013c64:	240050b8 	.word	0x240050b8

08013c68 <__swbuf_r>:
 8013c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c6a:	460e      	mov	r6, r1
 8013c6c:	4614      	mov	r4, r2
 8013c6e:	4605      	mov	r5, r0
 8013c70:	b118      	cbz	r0, 8013c7a <__swbuf_r+0x12>
 8013c72:	6983      	ldr	r3, [r0, #24]
 8013c74:	b90b      	cbnz	r3, 8013c7a <__swbuf_r+0x12>
 8013c76:	f000 f9d1 	bl	801401c <__sinit>
 8013c7a:	4b21      	ldr	r3, [pc, #132]	; (8013d00 <__swbuf_r+0x98>)
 8013c7c:	429c      	cmp	r4, r3
 8013c7e:	d12b      	bne.n	8013cd8 <__swbuf_r+0x70>
 8013c80:	686c      	ldr	r4, [r5, #4]
 8013c82:	69a3      	ldr	r3, [r4, #24]
 8013c84:	60a3      	str	r3, [r4, #8]
 8013c86:	89a3      	ldrh	r3, [r4, #12]
 8013c88:	071a      	lsls	r2, r3, #28
 8013c8a:	d52f      	bpl.n	8013cec <__swbuf_r+0x84>
 8013c8c:	6923      	ldr	r3, [r4, #16]
 8013c8e:	b36b      	cbz	r3, 8013cec <__swbuf_r+0x84>
 8013c90:	6923      	ldr	r3, [r4, #16]
 8013c92:	6820      	ldr	r0, [r4, #0]
 8013c94:	1ac0      	subs	r0, r0, r3
 8013c96:	6963      	ldr	r3, [r4, #20]
 8013c98:	b2f6      	uxtb	r6, r6
 8013c9a:	4283      	cmp	r3, r0
 8013c9c:	4637      	mov	r7, r6
 8013c9e:	dc04      	bgt.n	8013caa <__swbuf_r+0x42>
 8013ca0:	4621      	mov	r1, r4
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	f000 f926 	bl	8013ef4 <_fflush_r>
 8013ca8:	bb30      	cbnz	r0, 8013cf8 <__swbuf_r+0x90>
 8013caa:	68a3      	ldr	r3, [r4, #8]
 8013cac:	3b01      	subs	r3, #1
 8013cae:	60a3      	str	r3, [r4, #8]
 8013cb0:	6823      	ldr	r3, [r4, #0]
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	6022      	str	r2, [r4, #0]
 8013cb6:	701e      	strb	r6, [r3, #0]
 8013cb8:	6963      	ldr	r3, [r4, #20]
 8013cba:	3001      	adds	r0, #1
 8013cbc:	4283      	cmp	r3, r0
 8013cbe:	d004      	beq.n	8013cca <__swbuf_r+0x62>
 8013cc0:	89a3      	ldrh	r3, [r4, #12]
 8013cc2:	07db      	lsls	r3, r3, #31
 8013cc4:	d506      	bpl.n	8013cd4 <__swbuf_r+0x6c>
 8013cc6:	2e0a      	cmp	r6, #10
 8013cc8:	d104      	bne.n	8013cd4 <__swbuf_r+0x6c>
 8013cca:	4621      	mov	r1, r4
 8013ccc:	4628      	mov	r0, r5
 8013cce:	f000 f911 	bl	8013ef4 <_fflush_r>
 8013cd2:	b988      	cbnz	r0, 8013cf8 <__swbuf_r+0x90>
 8013cd4:	4638      	mov	r0, r7
 8013cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cd8:	4b0a      	ldr	r3, [pc, #40]	; (8013d04 <__swbuf_r+0x9c>)
 8013cda:	429c      	cmp	r4, r3
 8013cdc:	d101      	bne.n	8013ce2 <__swbuf_r+0x7a>
 8013cde:	68ac      	ldr	r4, [r5, #8]
 8013ce0:	e7cf      	b.n	8013c82 <__swbuf_r+0x1a>
 8013ce2:	4b09      	ldr	r3, [pc, #36]	; (8013d08 <__swbuf_r+0xa0>)
 8013ce4:	429c      	cmp	r4, r3
 8013ce6:	bf08      	it	eq
 8013ce8:	68ec      	ldreq	r4, [r5, #12]
 8013cea:	e7ca      	b.n	8013c82 <__swbuf_r+0x1a>
 8013cec:	4621      	mov	r1, r4
 8013cee:	4628      	mov	r0, r5
 8013cf0:	f000 f80c 	bl	8013d0c <__swsetup_r>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d0cb      	beq.n	8013c90 <__swbuf_r+0x28>
 8013cf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013cfc:	e7ea      	b.n	8013cd4 <__swbuf_r+0x6c>
 8013cfe:	bf00      	nop
 8013d00:	08014cc8 	.word	0x08014cc8
 8013d04:	08014ce8 	.word	0x08014ce8
 8013d08:	08014ca8 	.word	0x08014ca8

08013d0c <__swsetup_r>:
 8013d0c:	4b32      	ldr	r3, [pc, #200]	; (8013dd8 <__swsetup_r+0xcc>)
 8013d0e:	b570      	push	{r4, r5, r6, lr}
 8013d10:	681d      	ldr	r5, [r3, #0]
 8013d12:	4606      	mov	r6, r0
 8013d14:	460c      	mov	r4, r1
 8013d16:	b125      	cbz	r5, 8013d22 <__swsetup_r+0x16>
 8013d18:	69ab      	ldr	r3, [r5, #24]
 8013d1a:	b913      	cbnz	r3, 8013d22 <__swsetup_r+0x16>
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	f000 f97d 	bl	801401c <__sinit>
 8013d22:	4b2e      	ldr	r3, [pc, #184]	; (8013ddc <__swsetup_r+0xd0>)
 8013d24:	429c      	cmp	r4, r3
 8013d26:	d10f      	bne.n	8013d48 <__swsetup_r+0x3c>
 8013d28:	686c      	ldr	r4, [r5, #4]
 8013d2a:	89a3      	ldrh	r3, [r4, #12]
 8013d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d30:	0719      	lsls	r1, r3, #28
 8013d32:	d42c      	bmi.n	8013d8e <__swsetup_r+0x82>
 8013d34:	06dd      	lsls	r5, r3, #27
 8013d36:	d411      	bmi.n	8013d5c <__swsetup_r+0x50>
 8013d38:	2309      	movs	r3, #9
 8013d3a:	6033      	str	r3, [r6, #0]
 8013d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013d40:	81a3      	strh	r3, [r4, #12]
 8013d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d46:	e03e      	b.n	8013dc6 <__swsetup_r+0xba>
 8013d48:	4b25      	ldr	r3, [pc, #148]	; (8013de0 <__swsetup_r+0xd4>)
 8013d4a:	429c      	cmp	r4, r3
 8013d4c:	d101      	bne.n	8013d52 <__swsetup_r+0x46>
 8013d4e:	68ac      	ldr	r4, [r5, #8]
 8013d50:	e7eb      	b.n	8013d2a <__swsetup_r+0x1e>
 8013d52:	4b24      	ldr	r3, [pc, #144]	; (8013de4 <__swsetup_r+0xd8>)
 8013d54:	429c      	cmp	r4, r3
 8013d56:	bf08      	it	eq
 8013d58:	68ec      	ldreq	r4, [r5, #12]
 8013d5a:	e7e6      	b.n	8013d2a <__swsetup_r+0x1e>
 8013d5c:	0758      	lsls	r0, r3, #29
 8013d5e:	d512      	bpl.n	8013d86 <__swsetup_r+0x7a>
 8013d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d62:	b141      	cbz	r1, 8013d76 <__swsetup_r+0x6a>
 8013d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d68:	4299      	cmp	r1, r3
 8013d6a:	d002      	beq.n	8013d72 <__swsetup_r+0x66>
 8013d6c:	4630      	mov	r0, r6
 8013d6e:	f7ff fdfd 	bl	801396c <_free_r>
 8013d72:	2300      	movs	r3, #0
 8013d74:	6363      	str	r3, [r4, #52]	; 0x34
 8013d76:	89a3      	ldrh	r3, [r4, #12]
 8013d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013d7c:	81a3      	strh	r3, [r4, #12]
 8013d7e:	2300      	movs	r3, #0
 8013d80:	6063      	str	r3, [r4, #4]
 8013d82:	6923      	ldr	r3, [r4, #16]
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	89a3      	ldrh	r3, [r4, #12]
 8013d88:	f043 0308 	orr.w	r3, r3, #8
 8013d8c:	81a3      	strh	r3, [r4, #12]
 8013d8e:	6923      	ldr	r3, [r4, #16]
 8013d90:	b94b      	cbnz	r3, 8013da6 <__swsetup_r+0x9a>
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d9c:	d003      	beq.n	8013da6 <__swsetup_r+0x9a>
 8013d9e:	4621      	mov	r1, r4
 8013da0:	4630      	mov	r0, r6
 8013da2:	f000 fa01 	bl	80141a8 <__smakebuf_r>
 8013da6:	89a0      	ldrh	r0, [r4, #12]
 8013da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013dac:	f010 0301 	ands.w	r3, r0, #1
 8013db0:	d00a      	beq.n	8013dc8 <__swsetup_r+0xbc>
 8013db2:	2300      	movs	r3, #0
 8013db4:	60a3      	str	r3, [r4, #8]
 8013db6:	6963      	ldr	r3, [r4, #20]
 8013db8:	425b      	negs	r3, r3
 8013dba:	61a3      	str	r3, [r4, #24]
 8013dbc:	6923      	ldr	r3, [r4, #16]
 8013dbe:	b943      	cbnz	r3, 8013dd2 <__swsetup_r+0xc6>
 8013dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013dc4:	d1ba      	bne.n	8013d3c <__swsetup_r+0x30>
 8013dc6:	bd70      	pop	{r4, r5, r6, pc}
 8013dc8:	0781      	lsls	r1, r0, #30
 8013dca:	bf58      	it	pl
 8013dcc:	6963      	ldrpl	r3, [r4, #20]
 8013dce:	60a3      	str	r3, [r4, #8]
 8013dd0:	e7f4      	b.n	8013dbc <__swsetup_r+0xb0>
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	e7f7      	b.n	8013dc6 <__swsetup_r+0xba>
 8013dd6:	bf00      	nop
 8013dd8:	2400009c 	.word	0x2400009c
 8013ddc:	08014cc8 	.word	0x08014cc8
 8013de0:	08014ce8 	.word	0x08014ce8
 8013de4:	08014ca8 	.word	0x08014ca8

08013de8 <__sflush_r>:
 8013de8:	898a      	ldrh	r2, [r1, #12]
 8013dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dee:	4605      	mov	r5, r0
 8013df0:	0710      	lsls	r0, r2, #28
 8013df2:	460c      	mov	r4, r1
 8013df4:	d458      	bmi.n	8013ea8 <__sflush_r+0xc0>
 8013df6:	684b      	ldr	r3, [r1, #4]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	dc05      	bgt.n	8013e08 <__sflush_r+0x20>
 8013dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dc02      	bgt.n	8013e08 <__sflush_r+0x20>
 8013e02:	2000      	movs	r0, #0
 8013e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e0a:	2e00      	cmp	r6, #0
 8013e0c:	d0f9      	beq.n	8013e02 <__sflush_r+0x1a>
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e14:	682f      	ldr	r7, [r5, #0]
 8013e16:	602b      	str	r3, [r5, #0]
 8013e18:	d032      	beq.n	8013e80 <__sflush_r+0x98>
 8013e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e1c:	89a3      	ldrh	r3, [r4, #12]
 8013e1e:	075a      	lsls	r2, r3, #29
 8013e20:	d505      	bpl.n	8013e2e <__sflush_r+0x46>
 8013e22:	6863      	ldr	r3, [r4, #4]
 8013e24:	1ac0      	subs	r0, r0, r3
 8013e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e28:	b10b      	cbz	r3, 8013e2e <__sflush_r+0x46>
 8013e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e2c:	1ac0      	subs	r0, r0, r3
 8013e2e:	2300      	movs	r3, #0
 8013e30:	4602      	mov	r2, r0
 8013e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e34:	6a21      	ldr	r1, [r4, #32]
 8013e36:	4628      	mov	r0, r5
 8013e38:	47b0      	blx	r6
 8013e3a:	1c43      	adds	r3, r0, #1
 8013e3c:	89a3      	ldrh	r3, [r4, #12]
 8013e3e:	d106      	bne.n	8013e4e <__sflush_r+0x66>
 8013e40:	6829      	ldr	r1, [r5, #0]
 8013e42:	291d      	cmp	r1, #29
 8013e44:	d82c      	bhi.n	8013ea0 <__sflush_r+0xb8>
 8013e46:	4a2a      	ldr	r2, [pc, #168]	; (8013ef0 <__sflush_r+0x108>)
 8013e48:	40ca      	lsrs	r2, r1
 8013e4a:	07d6      	lsls	r6, r2, #31
 8013e4c:	d528      	bpl.n	8013ea0 <__sflush_r+0xb8>
 8013e4e:	2200      	movs	r2, #0
 8013e50:	6062      	str	r2, [r4, #4]
 8013e52:	04d9      	lsls	r1, r3, #19
 8013e54:	6922      	ldr	r2, [r4, #16]
 8013e56:	6022      	str	r2, [r4, #0]
 8013e58:	d504      	bpl.n	8013e64 <__sflush_r+0x7c>
 8013e5a:	1c42      	adds	r2, r0, #1
 8013e5c:	d101      	bne.n	8013e62 <__sflush_r+0x7a>
 8013e5e:	682b      	ldr	r3, [r5, #0]
 8013e60:	b903      	cbnz	r3, 8013e64 <__sflush_r+0x7c>
 8013e62:	6560      	str	r0, [r4, #84]	; 0x54
 8013e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e66:	602f      	str	r7, [r5, #0]
 8013e68:	2900      	cmp	r1, #0
 8013e6a:	d0ca      	beq.n	8013e02 <__sflush_r+0x1a>
 8013e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e70:	4299      	cmp	r1, r3
 8013e72:	d002      	beq.n	8013e7a <__sflush_r+0x92>
 8013e74:	4628      	mov	r0, r5
 8013e76:	f7ff fd79 	bl	801396c <_free_r>
 8013e7a:	2000      	movs	r0, #0
 8013e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8013e7e:	e7c1      	b.n	8013e04 <__sflush_r+0x1c>
 8013e80:	6a21      	ldr	r1, [r4, #32]
 8013e82:	2301      	movs	r3, #1
 8013e84:	4628      	mov	r0, r5
 8013e86:	47b0      	blx	r6
 8013e88:	1c41      	adds	r1, r0, #1
 8013e8a:	d1c7      	bne.n	8013e1c <__sflush_r+0x34>
 8013e8c:	682b      	ldr	r3, [r5, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d0c4      	beq.n	8013e1c <__sflush_r+0x34>
 8013e92:	2b1d      	cmp	r3, #29
 8013e94:	d001      	beq.n	8013e9a <__sflush_r+0xb2>
 8013e96:	2b16      	cmp	r3, #22
 8013e98:	d101      	bne.n	8013e9e <__sflush_r+0xb6>
 8013e9a:	602f      	str	r7, [r5, #0]
 8013e9c:	e7b1      	b.n	8013e02 <__sflush_r+0x1a>
 8013e9e:	89a3      	ldrh	r3, [r4, #12]
 8013ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ea4:	81a3      	strh	r3, [r4, #12]
 8013ea6:	e7ad      	b.n	8013e04 <__sflush_r+0x1c>
 8013ea8:	690f      	ldr	r7, [r1, #16]
 8013eaa:	2f00      	cmp	r7, #0
 8013eac:	d0a9      	beq.n	8013e02 <__sflush_r+0x1a>
 8013eae:	0793      	lsls	r3, r2, #30
 8013eb0:	680e      	ldr	r6, [r1, #0]
 8013eb2:	bf08      	it	eq
 8013eb4:	694b      	ldreq	r3, [r1, #20]
 8013eb6:	600f      	str	r7, [r1, #0]
 8013eb8:	bf18      	it	ne
 8013eba:	2300      	movne	r3, #0
 8013ebc:	eba6 0807 	sub.w	r8, r6, r7
 8013ec0:	608b      	str	r3, [r1, #8]
 8013ec2:	f1b8 0f00 	cmp.w	r8, #0
 8013ec6:	dd9c      	ble.n	8013e02 <__sflush_r+0x1a>
 8013ec8:	6a21      	ldr	r1, [r4, #32]
 8013eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ecc:	4643      	mov	r3, r8
 8013ece:	463a      	mov	r2, r7
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	47b0      	blx	r6
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	dc06      	bgt.n	8013ee6 <__sflush_r+0xfe>
 8013ed8:	89a3      	ldrh	r3, [r4, #12]
 8013eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ede:	81a3      	strh	r3, [r4, #12]
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ee4:	e78e      	b.n	8013e04 <__sflush_r+0x1c>
 8013ee6:	4407      	add	r7, r0
 8013ee8:	eba8 0800 	sub.w	r8, r8, r0
 8013eec:	e7e9      	b.n	8013ec2 <__sflush_r+0xda>
 8013eee:	bf00      	nop
 8013ef0:	20400001 	.word	0x20400001

08013ef4 <_fflush_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	690b      	ldr	r3, [r1, #16]
 8013ef8:	4605      	mov	r5, r0
 8013efa:	460c      	mov	r4, r1
 8013efc:	b913      	cbnz	r3, 8013f04 <_fflush_r+0x10>
 8013efe:	2500      	movs	r5, #0
 8013f00:	4628      	mov	r0, r5
 8013f02:	bd38      	pop	{r3, r4, r5, pc}
 8013f04:	b118      	cbz	r0, 8013f0e <_fflush_r+0x1a>
 8013f06:	6983      	ldr	r3, [r0, #24]
 8013f08:	b90b      	cbnz	r3, 8013f0e <_fflush_r+0x1a>
 8013f0a:	f000 f887 	bl	801401c <__sinit>
 8013f0e:	4b14      	ldr	r3, [pc, #80]	; (8013f60 <_fflush_r+0x6c>)
 8013f10:	429c      	cmp	r4, r3
 8013f12:	d11b      	bne.n	8013f4c <_fflush_r+0x58>
 8013f14:	686c      	ldr	r4, [r5, #4]
 8013f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d0ef      	beq.n	8013efe <_fflush_r+0xa>
 8013f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f20:	07d0      	lsls	r0, r2, #31
 8013f22:	d404      	bmi.n	8013f2e <_fflush_r+0x3a>
 8013f24:	0599      	lsls	r1, r3, #22
 8013f26:	d402      	bmi.n	8013f2e <_fflush_r+0x3a>
 8013f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f2a:	f000 f915 	bl	8014158 <__retarget_lock_acquire_recursive>
 8013f2e:	4628      	mov	r0, r5
 8013f30:	4621      	mov	r1, r4
 8013f32:	f7ff ff59 	bl	8013de8 <__sflush_r>
 8013f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f38:	07da      	lsls	r2, r3, #31
 8013f3a:	4605      	mov	r5, r0
 8013f3c:	d4e0      	bmi.n	8013f00 <_fflush_r+0xc>
 8013f3e:	89a3      	ldrh	r3, [r4, #12]
 8013f40:	059b      	lsls	r3, r3, #22
 8013f42:	d4dd      	bmi.n	8013f00 <_fflush_r+0xc>
 8013f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f46:	f000 f908 	bl	801415a <__retarget_lock_release_recursive>
 8013f4a:	e7d9      	b.n	8013f00 <_fflush_r+0xc>
 8013f4c:	4b05      	ldr	r3, [pc, #20]	; (8013f64 <_fflush_r+0x70>)
 8013f4e:	429c      	cmp	r4, r3
 8013f50:	d101      	bne.n	8013f56 <_fflush_r+0x62>
 8013f52:	68ac      	ldr	r4, [r5, #8]
 8013f54:	e7df      	b.n	8013f16 <_fflush_r+0x22>
 8013f56:	4b04      	ldr	r3, [pc, #16]	; (8013f68 <_fflush_r+0x74>)
 8013f58:	429c      	cmp	r4, r3
 8013f5a:	bf08      	it	eq
 8013f5c:	68ec      	ldreq	r4, [r5, #12]
 8013f5e:	e7da      	b.n	8013f16 <_fflush_r+0x22>
 8013f60:	08014cc8 	.word	0x08014cc8
 8013f64:	08014ce8 	.word	0x08014ce8
 8013f68:	08014ca8 	.word	0x08014ca8

08013f6c <std>:
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	b510      	push	{r4, lr}
 8013f70:	4604      	mov	r4, r0
 8013f72:	e9c0 3300 	strd	r3, r3, [r0]
 8013f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f7a:	6083      	str	r3, [r0, #8]
 8013f7c:	8181      	strh	r1, [r0, #12]
 8013f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8013f80:	81c2      	strh	r2, [r0, #14]
 8013f82:	6183      	str	r3, [r0, #24]
 8013f84:	4619      	mov	r1, r3
 8013f86:	2208      	movs	r2, #8
 8013f88:	305c      	adds	r0, #92	; 0x5c
 8013f8a:	f7ff fce7 	bl	801395c <memset>
 8013f8e:	4b05      	ldr	r3, [pc, #20]	; (8013fa4 <std+0x38>)
 8013f90:	6263      	str	r3, [r4, #36]	; 0x24
 8013f92:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <std+0x3c>)
 8013f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f96:	4b05      	ldr	r3, [pc, #20]	; (8013fac <std+0x40>)
 8013f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f9a:	4b05      	ldr	r3, [pc, #20]	; (8013fb0 <std+0x44>)
 8013f9c:	6224      	str	r4, [r4, #32]
 8013f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8013fa0:	bd10      	pop	{r4, pc}
 8013fa2:	bf00      	nop
 8013fa4:	0801481d 	.word	0x0801481d
 8013fa8:	0801483f 	.word	0x0801483f
 8013fac:	08014877 	.word	0x08014877
 8013fb0:	0801489b 	.word	0x0801489b

08013fb4 <_cleanup_r>:
 8013fb4:	4901      	ldr	r1, [pc, #4]	; (8013fbc <_cleanup_r+0x8>)
 8013fb6:	f000 b8af 	b.w	8014118 <_fwalk_reent>
 8013fba:	bf00      	nop
 8013fbc:	08013ef5 	.word	0x08013ef5

08013fc0 <__sfmoreglue>:
 8013fc0:	b570      	push	{r4, r5, r6, lr}
 8013fc2:	2268      	movs	r2, #104	; 0x68
 8013fc4:	1e4d      	subs	r5, r1, #1
 8013fc6:	4355      	muls	r5, r2
 8013fc8:	460e      	mov	r6, r1
 8013fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013fce:	f7ff fd39 	bl	8013a44 <_malloc_r>
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	b140      	cbz	r0, 8013fe8 <__sfmoreglue+0x28>
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	e9c0 1600 	strd	r1, r6, [r0]
 8013fdc:	300c      	adds	r0, #12
 8013fde:	60a0      	str	r0, [r4, #8]
 8013fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013fe4:	f7ff fcba 	bl	801395c <memset>
 8013fe8:	4620      	mov	r0, r4
 8013fea:	bd70      	pop	{r4, r5, r6, pc}

08013fec <__sfp_lock_acquire>:
 8013fec:	4801      	ldr	r0, [pc, #4]	; (8013ff4 <__sfp_lock_acquire+0x8>)
 8013fee:	f000 b8b3 	b.w	8014158 <__retarget_lock_acquire_recursive>
 8013ff2:	bf00      	nop
 8013ff4:	240050b5 	.word	0x240050b5

08013ff8 <__sfp_lock_release>:
 8013ff8:	4801      	ldr	r0, [pc, #4]	; (8014000 <__sfp_lock_release+0x8>)
 8013ffa:	f000 b8ae 	b.w	801415a <__retarget_lock_release_recursive>
 8013ffe:	bf00      	nop
 8014000:	240050b5 	.word	0x240050b5

08014004 <__sinit_lock_acquire>:
 8014004:	4801      	ldr	r0, [pc, #4]	; (801400c <__sinit_lock_acquire+0x8>)
 8014006:	f000 b8a7 	b.w	8014158 <__retarget_lock_acquire_recursive>
 801400a:	bf00      	nop
 801400c:	240050b6 	.word	0x240050b6

08014010 <__sinit_lock_release>:
 8014010:	4801      	ldr	r0, [pc, #4]	; (8014018 <__sinit_lock_release+0x8>)
 8014012:	f000 b8a2 	b.w	801415a <__retarget_lock_release_recursive>
 8014016:	bf00      	nop
 8014018:	240050b6 	.word	0x240050b6

0801401c <__sinit>:
 801401c:	b510      	push	{r4, lr}
 801401e:	4604      	mov	r4, r0
 8014020:	f7ff fff0 	bl	8014004 <__sinit_lock_acquire>
 8014024:	69a3      	ldr	r3, [r4, #24]
 8014026:	b11b      	cbz	r3, 8014030 <__sinit+0x14>
 8014028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801402c:	f7ff bff0 	b.w	8014010 <__sinit_lock_release>
 8014030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014034:	6523      	str	r3, [r4, #80]	; 0x50
 8014036:	4b13      	ldr	r3, [pc, #76]	; (8014084 <__sinit+0x68>)
 8014038:	4a13      	ldr	r2, [pc, #76]	; (8014088 <__sinit+0x6c>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	62a2      	str	r2, [r4, #40]	; 0x28
 801403e:	42a3      	cmp	r3, r4
 8014040:	bf04      	itt	eq
 8014042:	2301      	moveq	r3, #1
 8014044:	61a3      	streq	r3, [r4, #24]
 8014046:	4620      	mov	r0, r4
 8014048:	f000 f820 	bl	801408c <__sfp>
 801404c:	6060      	str	r0, [r4, #4]
 801404e:	4620      	mov	r0, r4
 8014050:	f000 f81c 	bl	801408c <__sfp>
 8014054:	60a0      	str	r0, [r4, #8]
 8014056:	4620      	mov	r0, r4
 8014058:	f000 f818 	bl	801408c <__sfp>
 801405c:	2200      	movs	r2, #0
 801405e:	60e0      	str	r0, [r4, #12]
 8014060:	2104      	movs	r1, #4
 8014062:	6860      	ldr	r0, [r4, #4]
 8014064:	f7ff ff82 	bl	8013f6c <std>
 8014068:	68a0      	ldr	r0, [r4, #8]
 801406a:	2201      	movs	r2, #1
 801406c:	2109      	movs	r1, #9
 801406e:	f7ff ff7d 	bl	8013f6c <std>
 8014072:	68e0      	ldr	r0, [r4, #12]
 8014074:	2202      	movs	r2, #2
 8014076:	2112      	movs	r1, #18
 8014078:	f7ff ff78 	bl	8013f6c <std>
 801407c:	2301      	movs	r3, #1
 801407e:	61a3      	str	r3, [r4, #24]
 8014080:	e7d2      	b.n	8014028 <__sinit+0xc>
 8014082:	bf00      	nop
 8014084:	08014ca4 	.word	0x08014ca4
 8014088:	08013fb5 	.word	0x08013fb5

0801408c <__sfp>:
 801408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801408e:	4607      	mov	r7, r0
 8014090:	f7ff ffac 	bl	8013fec <__sfp_lock_acquire>
 8014094:	4b1e      	ldr	r3, [pc, #120]	; (8014110 <__sfp+0x84>)
 8014096:	681e      	ldr	r6, [r3, #0]
 8014098:	69b3      	ldr	r3, [r6, #24]
 801409a:	b913      	cbnz	r3, 80140a2 <__sfp+0x16>
 801409c:	4630      	mov	r0, r6
 801409e:	f7ff ffbd 	bl	801401c <__sinit>
 80140a2:	3648      	adds	r6, #72	; 0x48
 80140a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80140a8:	3b01      	subs	r3, #1
 80140aa:	d503      	bpl.n	80140b4 <__sfp+0x28>
 80140ac:	6833      	ldr	r3, [r6, #0]
 80140ae:	b30b      	cbz	r3, 80140f4 <__sfp+0x68>
 80140b0:	6836      	ldr	r6, [r6, #0]
 80140b2:	e7f7      	b.n	80140a4 <__sfp+0x18>
 80140b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80140b8:	b9d5      	cbnz	r5, 80140f0 <__sfp+0x64>
 80140ba:	4b16      	ldr	r3, [pc, #88]	; (8014114 <__sfp+0x88>)
 80140bc:	60e3      	str	r3, [r4, #12]
 80140be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80140c2:	6665      	str	r5, [r4, #100]	; 0x64
 80140c4:	f000 f847 	bl	8014156 <__retarget_lock_init_recursive>
 80140c8:	f7ff ff96 	bl	8013ff8 <__sfp_lock_release>
 80140cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80140d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80140d4:	6025      	str	r5, [r4, #0]
 80140d6:	61a5      	str	r5, [r4, #24]
 80140d8:	2208      	movs	r2, #8
 80140da:	4629      	mov	r1, r5
 80140dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80140e0:	f7ff fc3c 	bl	801395c <memset>
 80140e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80140e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80140ec:	4620      	mov	r0, r4
 80140ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140f0:	3468      	adds	r4, #104	; 0x68
 80140f2:	e7d9      	b.n	80140a8 <__sfp+0x1c>
 80140f4:	2104      	movs	r1, #4
 80140f6:	4638      	mov	r0, r7
 80140f8:	f7ff ff62 	bl	8013fc0 <__sfmoreglue>
 80140fc:	4604      	mov	r4, r0
 80140fe:	6030      	str	r0, [r6, #0]
 8014100:	2800      	cmp	r0, #0
 8014102:	d1d5      	bne.n	80140b0 <__sfp+0x24>
 8014104:	f7ff ff78 	bl	8013ff8 <__sfp_lock_release>
 8014108:	230c      	movs	r3, #12
 801410a:	603b      	str	r3, [r7, #0]
 801410c:	e7ee      	b.n	80140ec <__sfp+0x60>
 801410e:	bf00      	nop
 8014110:	08014ca4 	.word	0x08014ca4
 8014114:	ffff0001 	.word	0xffff0001

08014118 <_fwalk_reent>:
 8014118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801411c:	4606      	mov	r6, r0
 801411e:	4688      	mov	r8, r1
 8014120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014124:	2700      	movs	r7, #0
 8014126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801412a:	f1b9 0901 	subs.w	r9, r9, #1
 801412e:	d505      	bpl.n	801413c <_fwalk_reent+0x24>
 8014130:	6824      	ldr	r4, [r4, #0]
 8014132:	2c00      	cmp	r4, #0
 8014134:	d1f7      	bne.n	8014126 <_fwalk_reent+0xe>
 8014136:	4638      	mov	r0, r7
 8014138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801413c:	89ab      	ldrh	r3, [r5, #12]
 801413e:	2b01      	cmp	r3, #1
 8014140:	d907      	bls.n	8014152 <_fwalk_reent+0x3a>
 8014142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014146:	3301      	adds	r3, #1
 8014148:	d003      	beq.n	8014152 <_fwalk_reent+0x3a>
 801414a:	4629      	mov	r1, r5
 801414c:	4630      	mov	r0, r6
 801414e:	47c0      	blx	r8
 8014150:	4307      	orrs	r7, r0
 8014152:	3568      	adds	r5, #104	; 0x68
 8014154:	e7e9      	b.n	801412a <_fwalk_reent+0x12>

08014156 <__retarget_lock_init_recursive>:
 8014156:	4770      	bx	lr

08014158 <__retarget_lock_acquire_recursive>:
 8014158:	4770      	bx	lr

0801415a <__retarget_lock_release_recursive>:
 801415a:	4770      	bx	lr

0801415c <__swhatbuf_r>:
 801415c:	b570      	push	{r4, r5, r6, lr}
 801415e:	460e      	mov	r6, r1
 8014160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014164:	2900      	cmp	r1, #0
 8014166:	b096      	sub	sp, #88	; 0x58
 8014168:	4614      	mov	r4, r2
 801416a:	461d      	mov	r5, r3
 801416c:	da08      	bge.n	8014180 <__swhatbuf_r+0x24>
 801416e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014172:	2200      	movs	r2, #0
 8014174:	602a      	str	r2, [r5, #0]
 8014176:	061a      	lsls	r2, r3, #24
 8014178:	d410      	bmi.n	801419c <__swhatbuf_r+0x40>
 801417a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801417e:	e00e      	b.n	801419e <__swhatbuf_r+0x42>
 8014180:	466a      	mov	r2, sp
 8014182:	f000 fbb1 	bl	80148e8 <_fstat_r>
 8014186:	2800      	cmp	r0, #0
 8014188:	dbf1      	blt.n	801416e <__swhatbuf_r+0x12>
 801418a:	9a01      	ldr	r2, [sp, #4]
 801418c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014190:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014194:	425a      	negs	r2, r3
 8014196:	415a      	adcs	r2, r3
 8014198:	602a      	str	r2, [r5, #0]
 801419a:	e7ee      	b.n	801417a <__swhatbuf_r+0x1e>
 801419c:	2340      	movs	r3, #64	; 0x40
 801419e:	2000      	movs	r0, #0
 80141a0:	6023      	str	r3, [r4, #0]
 80141a2:	b016      	add	sp, #88	; 0x58
 80141a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080141a8 <__smakebuf_r>:
 80141a8:	898b      	ldrh	r3, [r1, #12]
 80141aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141ac:	079d      	lsls	r5, r3, #30
 80141ae:	4606      	mov	r6, r0
 80141b0:	460c      	mov	r4, r1
 80141b2:	d507      	bpl.n	80141c4 <__smakebuf_r+0x1c>
 80141b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80141b8:	6023      	str	r3, [r4, #0]
 80141ba:	6123      	str	r3, [r4, #16]
 80141bc:	2301      	movs	r3, #1
 80141be:	6163      	str	r3, [r4, #20]
 80141c0:	b002      	add	sp, #8
 80141c2:	bd70      	pop	{r4, r5, r6, pc}
 80141c4:	ab01      	add	r3, sp, #4
 80141c6:	466a      	mov	r2, sp
 80141c8:	f7ff ffc8 	bl	801415c <__swhatbuf_r>
 80141cc:	9900      	ldr	r1, [sp, #0]
 80141ce:	4605      	mov	r5, r0
 80141d0:	4630      	mov	r0, r6
 80141d2:	f7ff fc37 	bl	8013a44 <_malloc_r>
 80141d6:	b948      	cbnz	r0, 80141ec <__smakebuf_r+0x44>
 80141d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141dc:	059a      	lsls	r2, r3, #22
 80141de:	d4ef      	bmi.n	80141c0 <__smakebuf_r+0x18>
 80141e0:	f023 0303 	bic.w	r3, r3, #3
 80141e4:	f043 0302 	orr.w	r3, r3, #2
 80141e8:	81a3      	strh	r3, [r4, #12]
 80141ea:	e7e3      	b.n	80141b4 <__smakebuf_r+0xc>
 80141ec:	4b0d      	ldr	r3, [pc, #52]	; (8014224 <__smakebuf_r+0x7c>)
 80141ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80141f0:	89a3      	ldrh	r3, [r4, #12]
 80141f2:	6020      	str	r0, [r4, #0]
 80141f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141f8:	81a3      	strh	r3, [r4, #12]
 80141fa:	9b00      	ldr	r3, [sp, #0]
 80141fc:	6163      	str	r3, [r4, #20]
 80141fe:	9b01      	ldr	r3, [sp, #4]
 8014200:	6120      	str	r0, [r4, #16]
 8014202:	b15b      	cbz	r3, 801421c <__smakebuf_r+0x74>
 8014204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014208:	4630      	mov	r0, r6
 801420a:	f000 fb7f 	bl	801490c <_isatty_r>
 801420e:	b128      	cbz	r0, 801421c <__smakebuf_r+0x74>
 8014210:	89a3      	ldrh	r3, [r4, #12]
 8014212:	f023 0303 	bic.w	r3, r3, #3
 8014216:	f043 0301 	orr.w	r3, r3, #1
 801421a:	81a3      	strh	r3, [r4, #12]
 801421c:	89a0      	ldrh	r0, [r4, #12]
 801421e:	4305      	orrs	r5, r0
 8014220:	81a5      	strh	r5, [r4, #12]
 8014222:	e7cd      	b.n	80141c0 <__smakebuf_r+0x18>
 8014224:	08013fb5 	.word	0x08013fb5

08014228 <__malloc_lock>:
 8014228:	4801      	ldr	r0, [pc, #4]	; (8014230 <__malloc_lock+0x8>)
 801422a:	f7ff bf95 	b.w	8014158 <__retarget_lock_acquire_recursive>
 801422e:	bf00      	nop
 8014230:	240050b4 	.word	0x240050b4

08014234 <__malloc_unlock>:
 8014234:	4801      	ldr	r0, [pc, #4]	; (801423c <__malloc_unlock+0x8>)
 8014236:	f7ff bf90 	b.w	801415a <__retarget_lock_release_recursive>
 801423a:	bf00      	nop
 801423c:	240050b4 	.word	0x240050b4

08014240 <__sfputc_r>:
 8014240:	6893      	ldr	r3, [r2, #8]
 8014242:	3b01      	subs	r3, #1
 8014244:	2b00      	cmp	r3, #0
 8014246:	b410      	push	{r4}
 8014248:	6093      	str	r3, [r2, #8]
 801424a:	da08      	bge.n	801425e <__sfputc_r+0x1e>
 801424c:	6994      	ldr	r4, [r2, #24]
 801424e:	42a3      	cmp	r3, r4
 8014250:	db01      	blt.n	8014256 <__sfputc_r+0x16>
 8014252:	290a      	cmp	r1, #10
 8014254:	d103      	bne.n	801425e <__sfputc_r+0x1e>
 8014256:	f85d 4b04 	ldr.w	r4, [sp], #4
 801425a:	f7ff bd05 	b.w	8013c68 <__swbuf_r>
 801425e:	6813      	ldr	r3, [r2, #0]
 8014260:	1c58      	adds	r0, r3, #1
 8014262:	6010      	str	r0, [r2, #0]
 8014264:	7019      	strb	r1, [r3, #0]
 8014266:	4608      	mov	r0, r1
 8014268:	f85d 4b04 	ldr.w	r4, [sp], #4
 801426c:	4770      	bx	lr

0801426e <__sfputs_r>:
 801426e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014270:	4606      	mov	r6, r0
 8014272:	460f      	mov	r7, r1
 8014274:	4614      	mov	r4, r2
 8014276:	18d5      	adds	r5, r2, r3
 8014278:	42ac      	cmp	r4, r5
 801427a:	d101      	bne.n	8014280 <__sfputs_r+0x12>
 801427c:	2000      	movs	r0, #0
 801427e:	e007      	b.n	8014290 <__sfputs_r+0x22>
 8014280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014284:	463a      	mov	r2, r7
 8014286:	4630      	mov	r0, r6
 8014288:	f7ff ffda 	bl	8014240 <__sfputc_r>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d1f3      	bne.n	8014278 <__sfputs_r+0xa>
 8014290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014294 <_vfiprintf_r>:
 8014294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	460d      	mov	r5, r1
 801429a:	b09d      	sub	sp, #116	; 0x74
 801429c:	4614      	mov	r4, r2
 801429e:	4698      	mov	r8, r3
 80142a0:	4606      	mov	r6, r0
 80142a2:	b118      	cbz	r0, 80142ac <_vfiprintf_r+0x18>
 80142a4:	6983      	ldr	r3, [r0, #24]
 80142a6:	b90b      	cbnz	r3, 80142ac <_vfiprintf_r+0x18>
 80142a8:	f7ff feb8 	bl	801401c <__sinit>
 80142ac:	4b89      	ldr	r3, [pc, #548]	; (80144d4 <_vfiprintf_r+0x240>)
 80142ae:	429d      	cmp	r5, r3
 80142b0:	d11b      	bne.n	80142ea <_vfiprintf_r+0x56>
 80142b2:	6875      	ldr	r5, [r6, #4]
 80142b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142b6:	07d9      	lsls	r1, r3, #31
 80142b8:	d405      	bmi.n	80142c6 <_vfiprintf_r+0x32>
 80142ba:	89ab      	ldrh	r3, [r5, #12]
 80142bc:	059a      	lsls	r2, r3, #22
 80142be:	d402      	bmi.n	80142c6 <_vfiprintf_r+0x32>
 80142c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142c2:	f7ff ff49 	bl	8014158 <__retarget_lock_acquire_recursive>
 80142c6:	89ab      	ldrh	r3, [r5, #12]
 80142c8:	071b      	lsls	r3, r3, #28
 80142ca:	d501      	bpl.n	80142d0 <_vfiprintf_r+0x3c>
 80142cc:	692b      	ldr	r3, [r5, #16]
 80142ce:	b9eb      	cbnz	r3, 801430c <_vfiprintf_r+0x78>
 80142d0:	4629      	mov	r1, r5
 80142d2:	4630      	mov	r0, r6
 80142d4:	f7ff fd1a 	bl	8013d0c <__swsetup_r>
 80142d8:	b1c0      	cbz	r0, 801430c <_vfiprintf_r+0x78>
 80142da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142dc:	07dc      	lsls	r4, r3, #31
 80142de:	d50e      	bpl.n	80142fe <_vfiprintf_r+0x6a>
 80142e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142e4:	b01d      	add	sp, #116	; 0x74
 80142e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ea:	4b7b      	ldr	r3, [pc, #492]	; (80144d8 <_vfiprintf_r+0x244>)
 80142ec:	429d      	cmp	r5, r3
 80142ee:	d101      	bne.n	80142f4 <_vfiprintf_r+0x60>
 80142f0:	68b5      	ldr	r5, [r6, #8]
 80142f2:	e7df      	b.n	80142b4 <_vfiprintf_r+0x20>
 80142f4:	4b79      	ldr	r3, [pc, #484]	; (80144dc <_vfiprintf_r+0x248>)
 80142f6:	429d      	cmp	r5, r3
 80142f8:	bf08      	it	eq
 80142fa:	68f5      	ldreq	r5, [r6, #12]
 80142fc:	e7da      	b.n	80142b4 <_vfiprintf_r+0x20>
 80142fe:	89ab      	ldrh	r3, [r5, #12]
 8014300:	0598      	lsls	r0, r3, #22
 8014302:	d4ed      	bmi.n	80142e0 <_vfiprintf_r+0x4c>
 8014304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014306:	f7ff ff28 	bl	801415a <__retarget_lock_release_recursive>
 801430a:	e7e9      	b.n	80142e0 <_vfiprintf_r+0x4c>
 801430c:	2300      	movs	r3, #0
 801430e:	9309      	str	r3, [sp, #36]	; 0x24
 8014310:	2320      	movs	r3, #32
 8014312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014316:	f8cd 800c 	str.w	r8, [sp, #12]
 801431a:	2330      	movs	r3, #48	; 0x30
 801431c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80144e0 <_vfiprintf_r+0x24c>
 8014320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014324:	f04f 0901 	mov.w	r9, #1
 8014328:	4623      	mov	r3, r4
 801432a:	469a      	mov	sl, r3
 801432c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014330:	b10a      	cbz	r2, 8014336 <_vfiprintf_r+0xa2>
 8014332:	2a25      	cmp	r2, #37	; 0x25
 8014334:	d1f9      	bne.n	801432a <_vfiprintf_r+0x96>
 8014336:	ebba 0b04 	subs.w	fp, sl, r4
 801433a:	d00b      	beq.n	8014354 <_vfiprintf_r+0xc0>
 801433c:	465b      	mov	r3, fp
 801433e:	4622      	mov	r2, r4
 8014340:	4629      	mov	r1, r5
 8014342:	4630      	mov	r0, r6
 8014344:	f7ff ff93 	bl	801426e <__sfputs_r>
 8014348:	3001      	adds	r0, #1
 801434a:	f000 80aa 	beq.w	80144a2 <_vfiprintf_r+0x20e>
 801434e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014350:	445a      	add	r2, fp
 8014352:	9209      	str	r2, [sp, #36]	; 0x24
 8014354:	f89a 3000 	ldrb.w	r3, [sl]
 8014358:	2b00      	cmp	r3, #0
 801435a:	f000 80a2 	beq.w	80144a2 <_vfiprintf_r+0x20e>
 801435e:	2300      	movs	r3, #0
 8014360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014368:	f10a 0a01 	add.w	sl, sl, #1
 801436c:	9304      	str	r3, [sp, #16]
 801436e:	9307      	str	r3, [sp, #28]
 8014370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014374:	931a      	str	r3, [sp, #104]	; 0x68
 8014376:	4654      	mov	r4, sl
 8014378:	2205      	movs	r2, #5
 801437a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801437e:	4858      	ldr	r0, [pc, #352]	; (80144e0 <_vfiprintf_r+0x24c>)
 8014380:	f7eb ffae 	bl	80002e0 <memchr>
 8014384:	9a04      	ldr	r2, [sp, #16]
 8014386:	b9d8      	cbnz	r0, 80143c0 <_vfiprintf_r+0x12c>
 8014388:	06d1      	lsls	r1, r2, #27
 801438a:	bf44      	itt	mi
 801438c:	2320      	movmi	r3, #32
 801438e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014392:	0713      	lsls	r3, r2, #28
 8014394:	bf44      	itt	mi
 8014396:	232b      	movmi	r3, #43	; 0x2b
 8014398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801439c:	f89a 3000 	ldrb.w	r3, [sl]
 80143a0:	2b2a      	cmp	r3, #42	; 0x2a
 80143a2:	d015      	beq.n	80143d0 <_vfiprintf_r+0x13c>
 80143a4:	9a07      	ldr	r2, [sp, #28]
 80143a6:	4654      	mov	r4, sl
 80143a8:	2000      	movs	r0, #0
 80143aa:	f04f 0c0a 	mov.w	ip, #10
 80143ae:	4621      	mov	r1, r4
 80143b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143b4:	3b30      	subs	r3, #48	; 0x30
 80143b6:	2b09      	cmp	r3, #9
 80143b8:	d94e      	bls.n	8014458 <_vfiprintf_r+0x1c4>
 80143ba:	b1b0      	cbz	r0, 80143ea <_vfiprintf_r+0x156>
 80143bc:	9207      	str	r2, [sp, #28]
 80143be:	e014      	b.n	80143ea <_vfiprintf_r+0x156>
 80143c0:	eba0 0308 	sub.w	r3, r0, r8
 80143c4:	fa09 f303 	lsl.w	r3, r9, r3
 80143c8:	4313      	orrs	r3, r2
 80143ca:	9304      	str	r3, [sp, #16]
 80143cc:	46a2      	mov	sl, r4
 80143ce:	e7d2      	b.n	8014376 <_vfiprintf_r+0xe2>
 80143d0:	9b03      	ldr	r3, [sp, #12]
 80143d2:	1d19      	adds	r1, r3, #4
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	9103      	str	r1, [sp, #12]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	bfbb      	ittet	lt
 80143dc:	425b      	neglt	r3, r3
 80143de:	f042 0202 	orrlt.w	r2, r2, #2
 80143e2:	9307      	strge	r3, [sp, #28]
 80143e4:	9307      	strlt	r3, [sp, #28]
 80143e6:	bfb8      	it	lt
 80143e8:	9204      	strlt	r2, [sp, #16]
 80143ea:	7823      	ldrb	r3, [r4, #0]
 80143ec:	2b2e      	cmp	r3, #46	; 0x2e
 80143ee:	d10c      	bne.n	801440a <_vfiprintf_r+0x176>
 80143f0:	7863      	ldrb	r3, [r4, #1]
 80143f2:	2b2a      	cmp	r3, #42	; 0x2a
 80143f4:	d135      	bne.n	8014462 <_vfiprintf_r+0x1ce>
 80143f6:	9b03      	ldr	r3, [sp, #12]
 80143f8:	1d1a      	adds	r2, r3, #4
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	9203      	str	r2, [sp, #12]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	bfb8      	it	lt
 8014402:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014406:	3402      	adds	r4, #2
 8014408:	9305      	str	r3, [sp, #20]
 801440a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80144f0 <_vfiprintf_r+0x25c>
 801440e:	7821      	ldrb	r1, [r4, #0]
 8014410:	2203      	movs	r2, #3
 8014412:	4650      	mov	r0, sl
 8014414:	f7eb ff64 	bl	80002e0 <memchr>
 8014418:	b140      	cbz	r0, 801442c <_vfiprintf_r+0x198>
 801441a:	2340      	movs	r3, #64	; 0x40
 801441c:	eba0 000a 	sub.w	r0, r0, sl
 8014420:	fa03 f000 	lsl.w	r0, r3, r0
 8014424:	9b04      	ldr	r3, [sp, #16]
 8014426:	4303      	orrs	r3, r0
 8014428:	3401      	adds	r4, #1
 801442a:	9304      	str	r3, [sp, #16]
 801442c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014430:	482c      	ldr	r0, [pc, #176]	; (80144e4 <_vfiprintf_r+0x250>)
 8014432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014436:	2206      	movs	r2, #6
 8014438:	f7eb ff52 	bl	80002e0 <memchr>
 801443c:	2800      	cmp	r0, #0
 801443e:	d03f      	beq.n	80144c0 <_vfiprintf_r+0x22c>
 8014440:	4b29      	ldr	r3, [pc, #164]	; (80144e8 <_vfiprintf_r+0x254>)
 8014442:	bb1b      	cbnz	r3, 801448c <_vfiprintf_r+0x1f8>
 8014444:	9b03      	ldr	r3, [sp, #12]
 8014446:	3307      	adds	r3, #7
 8014448:	f023 0307 	bic.w	r3, r3, #7
 801444c:	3308      	adds	r3, #8
 801444e:	9303      	str	r3, [sp, #12]
 8014450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014452:	443b      	add	r3, r7
 8014454:	9309      	str	r3, [sp, #36]	; 0x24
 8014456:	e767      	b.n	8014328 <_vfiprintf_r+0x94>
 8014458:	fb0c 3202 	mla	r2, ip, r2, r3
 801445c:	460c      	mov	r4, r1
 801445e:	2001      	movs	r0, #1
 8014460:	e7a5      	b.n	80143ae <_vfiprintf_r+0x11a>
 8014462:	2300      	movs	r3, #0
 8014464:	3401      	adds	r4, #1
 8014466:	9305      	str	r3, [sp, #20]
 8014468:	4619      	mov	r1, r3
 801446a:	f04f 0c0a 	mov.w	ip, #10
 801446e:	4620      	mov	r0, r4
 8014470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014474:	3a30      	subs	r2, #48	; 0x30
 8014476:	2a09      	cmp	r2, #9
 8014478:	d903      	bls.n	8014482 <_vfiprintf_r+0x1ee>
 801447a:	2b00      	cmp	r3, #0
 801447c:	d0c5      	beq.n	801440a <_vfiprintf_r+0x176>
 801447e:	9105      	str	r1, [sp, #20]
 8014480:	e7c3      	b.n	801440a <_vfiprintf_r+0x176>
 8014482:	fb0c 2101 	mla	r1, ip, r1, r2
 8014486:	4604      	mov	r4, r0
 8014488:	2301      	movs	r3, #1
 801448a:	e7f0      	b.n	801446e <_vfiprintf_r+0x1da>
 801448c:	ab03      	add	r3, sp, #12
 801448e:	9300      	str	r3, [sp, #0]
 8014490:	462a      	mov	r2, r5
 8014492:	4b16      	ldr	r3, [pc, #88]	; (80144ec <_vfiprintf_r+0x258>)
 8014494:	a904      	add	r1, sp, #16
 8014496:	4630      	mov	r0, r6
 8014498:	f3af 8000 	nop.w
 801449c:	4607      	mov	r7, r0
 801449e:	1c78      	adds	r0, r7, #1
 80144a0:	d1d6      	bne.n	8014450 <_vfiprintf_r+0x1bc>
 80144a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144a4:	07d9      	lsls	r1, r3, #31
 80144a6:	d405      	bmi.n	80144b4 <_vfiprintf_r+0x220>
 80144a8:	89ab      	ldrh	r3, [r5, #12]
 80144aa:	059a      	lsls	r2, r3, #22
 80144ac:	d402      	bmi.n	80144b4 <_vfiprintf_r+0x220>
 80144ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144b0:	f7ff fe53 	bl	801415a <__retarget_lock_release_recursive>
 80144b4:	89ab      	ldrh	r3, [r5, #12]
 80144b6:	065b      	lsls	r3, r3, #25
 80144b8:	f53f af12 	bmi.w	80142e0 <_vfiprintf_r+0x4c>
 80144bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144be:	e711      	b.n	80142e4 <_vfiprintf_r+0x50>
 80144c0:	ab03      	add	r3, sp, #12
 80144c2:	9300      	str	r3, [sp, #0]
 80144c4:	462a      	mov	r2, r5
 80144c6:	4b09      	ldr	r3, [pc, #36]	; (80144ec <_vfiprintf_r+0x258>)
 80144c8:	a904      	add	r1, sp, #16
 80144ca:	4630      	mov	r0, r6
 80144cc:	f000 f880 	bl	80145d0 <_printf_i>
 80144d0:	e7e4      	b.n	801449c <_vfiprintf_r+0x208>
 80144d2:	bf00      	nop
 80144d4:	08014cc8 	.word	0x08014cc8
 80144d8:	08014ce8 	.word	0x08014ce8
 80144dc:	08014ca8 	.word	0x08014ca8
 80144e0:	08014d08 	.word	0x08014d08
 80144e4:	08014d12 	.word	0x08014d12
 80144e8:	00000000 	.word	0x00000000
 80144ec:	0801426f 	.word	0x0801426f
 80144f0:	08014d0e 	.word	0x08014d0e

080144f4 <_printf_common>:
 80144f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144f8:	4616      	mov	r6, r2
 80144fa:	4699      	mov	r9, r3
 80144fc:	688a      	ldr	r2, [r1, #8]
 80144fe:	690b      	ldr	r3, [r1, #16]
 8014500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014504:	4293      	cmp	r3, r2
 8014506:	bfb8      	it	lt
 8014508:	4613      	movlt	r3, r2
 801450a:	6033      	str	r3, [r6, #0]
 801450c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014510:	4607      	mov	r7, r0
 8014512:	460c      	mov	r4, r1
 8014514:	b10a      	cbz	r2, 801451a <_printf_common+0x26>
 8014516:	3301      	adds	r3, #1
 8014518:	6033      	str	r3, [r6, #0]
 801451a:	6823      	ldr	r3, [r4, #0]
 801451c:	0699      	lsls	r1, r3, #26
 801451e:	bf42      	ittt	mi
 8014520:	6833      	ldrmi	r3, [r6, #0]
 8014522:	3302      	addmi	r3, #2
 8014524:	6033      	strmi	r3, [r6, #0]
 8014526:	6825      	ldr	r5, [r4, #0]
 8014528:	f015 0506 	ands.w	r5, r5, #6
 801452c:	d106      	bne.n	801453c <_printf_common+0x48>
 801452e:	f104 0a19 	add.w	sl, r4, #25
 8014532:	68e3      	ldr	r3, [r4, #12]
 8014534:	6832      	ldr	r2, [r6, #0]
 8014536:	1a9b      	subs	r3, r3, r2
 8014538:	42ab      	cmp	r3, r5
 801453a:	dc26      	bgt.n	801458a <_printf_common+0x96>
 801453c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014540:	1e13      	subs	r3, r2, #0
 8014542:	6822      	ldr	r2, [r4, #0]
 8014544:	bf18      	it	ne
 8014546:	2301      	movne	r3, #1
 8014548:	0692      	lsls	r2, r2, #26
 801454a:	d42b      	bmi.n	80145a4 <_printf_common+0xb0>
 801454c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014550:	4649      	mov	r1, r9
 8014552:	4638      	mov	r0, r7
 8014554:	47c0      	blx	r8
 8014556:	3001      	adds	r0, #1
 8014558:	d01e      	beq.n	8014598 <_printf_common+0xa4>
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	68e5      	ldr	r5, [r4, #12]
 801455e:	6832      	ldr	r2, [r6, #0]
 8014560:	f003 0306 	and.w	r3, r3, #6
 8014564:	2b04      	cmp	r3, #4
 8014566:	bf08      	it	eq
 8014568:	1aad      	subeq	r5, r5, r2
 801456a:	68a3      	ldr	r3, [r4, #8]
 801456c:	6922      	ldr	r2, [r4, #16]
 801456e:	bf0c      	ite	eq
 8014570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014574:	2500      	movne	r5, #0
 8014576:	4293      	cmp	r3, r2
 8014578:	bfc4      	itt	gt
 801457a:	1a9b      	subgt	r3, r3, r2
 801457c:	18ed      	addgt	r5, r5, r3
 801457e:	2600      	movs	r6, #0
 8014580:	341a      	adds	r4, #26
 8014582:	42b5      	cmp	r5, r6
 8014584:	d11a      	bne.n	80145bc <_printf_common+0xc8>
 8014586:	2000      	movs	r0, #0
 8014588:	e008      	b.n	801459c <_printf_common+0xa8>
 801458a:	2301      	movs	r3, #1
 801458c:	4652      	mov	r2, sl
 801458e:	4649      	mov	r1, r9
 8014590:	4638      	mov	r0, r7
 8014592:	47c0      	blx	r8
 8014594:	3001      	adds	r0, #1
 8014596:	d103      	bne.n	80145a0 <_printf_common+0xac>
 8014598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145a0:	3501      	adds	r5, #1
 80145a2:	e7c6      	b.n	8014532 <_printf_common+0x3e>
 80145a4:	18e1      	adds	r1, r4, r3
 80145a6:	1c5a      	adds	r2, r3, #1
 80145a8:	2030      	movs	r0, #48	; 0x30
 80145aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80145ae:	4422      	add	r2, r4
 80145b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80145b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80145b8:	3302      	adds	r3, #2
 80145ba:	e7c7      	b.n	801454c <_printf_common+0x58>
 80145bc:	2301      	movs	r3, #1
 80145be:	4622      	mov	r2, r4
 80145c0:	4649      	mov	r1, r9
 80145c2:	4638      	mov	r0, r7
 80145c4:	47c0      	blx	r8
 80145c6:	3001      	adds	r0, #1
 80145c8:	d0e6      	beq.n	8014598 <_printf_common+0xa4>
 80145ca:	3601      	adds	r6, #1
 80145cc:	e7d9      	b.n	8014582 <_printf_common+0x8e>
	...

080145d0 <_printf_i>:
 80145d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145d4:	7e0f      	ldrb	r7, [r1, #24]
 80145d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80145d8:	2f78      	cmp	r7, #120	; 0x78
 80145da:	4691      	mov	r9, r2
 80145dc:	4680      	mov	r8, r0
 80145de:	460c      	mov	r4, r1
 80145e0:	469a      	mov	sl, r3
 80145e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80145e6:	d807      	bhi.n	80145f8 <_printf_i+0x28>
 80145e8:	2f62      	cmp	r7, #98	; 0x62
 80145ea:	d80a      	bhi.n	8014602 <_printf_i+0x32>
 80145ec:	2f00      	cmp	r7, #0
 80145ee:	f000 80d8 	beq.w	80147a2 <_printf_i+0x1d2>
 80145f2:	2f58      	cmp	r7, #88	; 0x58
 80145f4:	f000 80a3 	beq.w	801473e <_printf_i+0x16e>
 80145f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014600:	e03a      	b.n	8014678 <_printf_i+0xa8>
 8014602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014606:	2b15      	cmp	r3, #21
 8014608:	d8f6      	bhi.n	80145f8 <_printf_i+0x28>
 801460a:	a101      	add	r1, pc, #4	; (adr r1, 8014610 <_printf_i+0x40>)
 801460c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014610:	08014669 	.word	0x08014669
 8014614:	0801467d 	.word	0x0801467d
 8014618:	080145f9 	.word	0x080145f9
 801461c:	080145f9 	.word	0x080145f9
 8014620:	080145f9 	.word	0x080145f9
 8014624:	080145f9 	.word	0x080145f9
 8014628:	0801467d 	.word	0x0801467d
 801462c:	080145f9 	.word	0x080145f9
 8014630:	080145f9 	.word	0x080145f9
 8014634:	080145f9 	.word	0x080145f9
 8014638:	080145f9 	.word	0x080145f9
 801463c:	08014789 	.word	0x08014789
 8014640:	080146ad 	.word	0x080146ad
 8014644:	0801476b 	.word	0x0801476b
 8014648:	080145f9 	.word	0x080145f9
 801464c:	080145f9 	.word	0x080145f9
 8014650:	080147ab 	.word	0x080147ab
 8014654:	080145f9 	.word	0x080145f9
 8014658:	080146ad 	.word	0x080146ad
 801465c:	080145f9 	.word	0x080145f9
 8014660:	080145f9 	.word	0x080145f9
 8014664:	08014773 	.word	0x08014773
 8014668:	682b      	ldr	r3, [r5, #0]
 801466a:	1d1a      	adds	r2, r3, #4
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	602a      	str	r2, [r5, #0]
 8014670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014678:	2301      	movs	r3, #1
 801467a:	e0a3      	b.n	80147c4 <_printf_i+0x1f4>
 801467c:	6820      	ldr	r0, [r4, #0]
 801467e:	6829      	ldr	r1, [r5, #0]
 8014680:	0606      	lsls	r6, r0, #24
 8014682:	f101 0304 	add.w	r3, r1, #4
 8014686:	d50a      	bpl.n	801469e <_printf_i+0xce>
 8014688:	680e      	ldr	r6, [r1, #0]
 801468a:	602b      	str	r3, [r5, #0]
 801468c:	2e00      	cmp	r6, #0
 801468e:	da03      	bge.n	8014698 <_printf_i+0xc8>
 8014690:	232d      	movs	r3, #45	; 0x2d
 8014692:	4276      	negs	r6, r6
 8014694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014698:	485e      	ldr	r0, [pc, #376]	; (8014814 <_printf_i+0x244>)
 801469a:	230a      	movs	r3, #10
 801469c:	e019      	b.n	80146d2 <_printf_i+0x102>
 801469e:	680e      	ldr	r6, [r1, #0]
 80146a0:	602b      	str	r3, [r5, #0]
 80146a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80146a6:	bf18      	it	ne
 80146a8:	b236      	sxthne	r6, r6
 80146aa:	e7ef      	b.n	801468c <_printf_i+0xbc>
 80146ac:	682b      	ldr	r3, [r5, #0]
 80146ae:	6820      	ldr	r0, [r4, #0]
 80146b0:	1d19      	adds	r1, r3, #4
 80146b2:	6029      	str	r1, [r5, #0]
 80146b4:	0601      	lsls	r1, r0, #24
 80146b6:	d501      	bpl.n	80146bc <_printf_i+0xec>
 80146b8:	681e      	ldr	r6, [r3, #0]
 80146ba:	e002      	b.n	80146c2 <_printf_i+0xf2>
 80146bc:	0646      	lsls	r6, r0, #25
 80146be:	d5fb      	bpl.n	80146b8 <_printf_i+0xe8>
 80146c0:	881e      	ldrh	r6, [r3, #0]
 80146c2:	4854      	ldr	r0, [pc, #336]	; (8014814 <_printf_i+0x244>)
 80146c4:	2f6f      	cmp	r7, #111	; 0x6f
 80146c6:	bf0c      	ite	eq
 80146c8:	2308      	moveq	r3, #8
 80146ca:	230a      	movne	r3, #10
 80146cc:	2100      	movs	r1, #0
 80146ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80146d2:	6865      	ldr	r5, [r4, #4]
 80146d4:	60a5      	str	r5, [r4, #8]
 80146d6:	2d00      	cmp	r5, #0
 80146d8:	bfa2      	ittt	ge
 80146da:	6821      	ldrge	r1, [r4, #0]
 80146dc:	f021 0104 	bicge.w	r1, r1, #4
 80146e0:	6021      	strge	r1, [r4, #0]
 80146e2:	b90e      	cbnz	r6, 80146e8 <_printf_i+0x118>
 80146e4:	2d00      	cmp	r5, #0
 80146e6:	d04d      	beq.n	8014784 <_printf_i+0x1b4>
 80146e8:	4615      	mov	r5, r2
 80146ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80146ee:	fb03 6711 	mls	r7, r3, r1, r6
 80146f2:	5dc7      	ldrb	r7, [r0, r7]
 80146f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80146f8:	4637      	mov	r7, r6
 80146fa:	42bb      	cmp	r3, r7
 80146fc:	460e      	mov	r6, r1
 80146fe:	d9f4      	bls.n	80146ea <_printf_i+0x11a>
 8014700:	2b08      	cmp	r3, #8
 8014702:	d10b      	bne.n	801471c <_printf_i+0x14c>
 8014704:	6823      	ldr	r3, [r4, #0]
 8014706:	07de      	lsls	r6, r3, #31
 8014708:	d508      	bpl.n	801471c <_printf_i+0x14c>
 801470a:	6923      	ldr	r3, [r4, #16]
 801470c:	6861      	ldr	r1, [r4, #4]
 801470e:	4299      	cmp	r1, r3
 8014710:	bfde      	ittt	le
 8014712:	2330      	movle	r3, #48	; 0x30
 8014714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014718:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801471c:	1b52      	subs	r2, r2, r5
 801471e:	6122      	str	r2, [r4, #16]
 8014720:	f8cd a000 	str.w	sl, [sp]
 8014724:	464b      	mov	r3, r9
 8014726:	aa03      	add	r2, sp, #12
 8014728:	4621      	mov	r1, r4
 801472a:	4640      	mov	r0, r8
 801472c:	f7ff fee2 	bl	80144f4 <_printf_common>
 8014730:	3001      	adds	r0, #1
 8014732:	d14c      	bne.n	80147ce <_printf_i+0x1fe>
 8014734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014738:	b004      	add	sp, #16
 801473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801473e:	4835      	ldr	r0, [pc, #212]	; (8014814 <_printf_i+0x244>)
 8014740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014744:	6829      	ldr	r1, [r5, #0]
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	f851 6b04 	ldr.w	r6, [r1], #4
 801474c:	6029      	str	r1, [r5, #0]
 801474e:	061d      	lsls	r5, r3, #24
 8014750:	d514      	bpl.n	801477c <_printf_i+0x1ac>
 8014752:	07df      	lsls	r7, r3, #31
 8014754:	bf44      	itt	mi
 8014756:	f043 0320 	orrmi.w	r3, r3, #32
 801475a:	6023      	strmi	r3, [r4, #0]
 801475c:	b91e      	cbnz	r6, 8014766 <_printf_i+0x196>
 801475e:	6823      	ldr	r3, [r4, #0]
 8014760:	f023 0320 	bic.w	r3, r3, #32
 8014764:	6023      	str	r3, [r4, #0]
 8014766:	2310      	movs	r3, #16
 8014768:	e7b0      	b.n	80146cc <_printf_i+0xfc>
 801476a:	6823      	ldr	r3, [r4, #0]
 801476c:	f043 0320 	orr.w	r3, r3, #32
 8014770:	6023      	str	r3, [r4, #0]
 8014772:	2378      	movs	r3, #120	; 0x78
 8014774:	4828      	ldr	r0, [pc, #160]	; (8014818 <_printf_i+0x248>)
 8014776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801477a:	e7e3      	b.n	8014744 <_printf_i+0x174>
 801477c:	0659      	lsls	r1, r3, #25
 801477e:	bf48      	it	mi
 8014780:	b2b6      	uxthmi	r6, r6
 8014782:	e7e6      	b.n	8014752 <_printf_i+0x182>
 8014784:	4615      	mov	r5, r2
 8014786:	e7bb      	b.n	8014700 <_printf_i+0x130>
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	6826      	ldr	r6, [r4, #0]
 801478c:	6961      	ldr	r1, [r4, #20]
 801478e:	1d18      	adds	r0, r3, #4
 8014790:	6028      	str	r0, [r5, #0]
 8014792:	0635      	lsls	r5, r6, #24
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	d501      	bpl.n	801479c <_printf_i+0x1cc>
 8014798:	6019      	str	r1, [r3, #0]
 801479a:	e002      	b.n	80147a2 <_printf_i+0x1d2>
 801479c:	0670      	lsls	r0, r6, #25
 801479e:	d5fb      	bpl.n	8014798 <_printf_i+0x1c8>
 80147a0:	8019      	strh	r1, [r3, #0]
 80147a2:	2300      	movs	r3, #0
 80147a4:	6123      	str	r3, [r4, #16]
 80147a6:	4615      	mov	r5, r2
 80147a8:	e7ba      	b.n	8014720 <_printf_i+0x150>
 80147aa:	682b      	ldr	r3, [r5, #0]
 80147ac:	1d1a      	adds	r2, r3, #4
 80147ae:	602a      	str	r2, [r5, #0]
 80147b0:	681d      	ldr	r5, [r3, #0]
 80147b2:	6862      	ldr	r2, [r4, #4]
 80147b4:	2100      	movs	r1, #0
 80147b6:	4628      	mov	r0, r5
 80147b8:	f7eb fd92 	bl	80002e0 <memchr>
 80147bc:	b108      	cbz	r0, 80147c2 <_printf_i+0x1f2>
 80147be:	1b40      	subs	r0, r0, r5
 80147c0:	6060      	str	r0, [r4, #4]
 80147c2:	6863      	ldr	r3, [r4, #4]
 80147c4:	6123      	str	r3, [r4, #16]
 80147c6:	2300      	movs	r3, #0
 80147c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147cc:	e7a8      	b.n	8014720 <_printf_i+0x150>
 80147ce:	6923      	ldr	r3, [r4, #16]
 80147d0:	462a      	mov	r2, r5
 80147d2:	4649      	mov	r1, r9
 80147d4:	4640      	mov	r0, r8
 80147d6:	47d0      	blx	sl
 80147d8:	3001      	adds	r0, #1
 80147da:	d0ab      	beq.n	8014734 <_printf_i+0x164>
 80147dc:	6823      	ldr	r3, [r4, #0]
 80147de:	079b      	lsls	r3, r3, #30
 80147e0:	d413      	bmi.n	801480a <_printf_i+0x23a>
 80147e2:	68e0      	ldr	r0, [r4, #12]
 80147e4:	9b03      	ldr	r3, [sp, #12]
 80147e6:	4298      	cmp	r0, r3
 80147e8:	bfb8      	it	lt
 80147ea:	4618      	movlt	r0, r3
 80147ec:	e7a4      	b.n	8014738 <_printf_i+0x168>
 80147ee:	2301      	movs	r3, #1
 80147f0:	4632      	mov	r2, r6
 80147f2:	4649      	mov	r1, r9
 80147f4:	4640      	mov	r0, r8
 80147f6:	47d0      	blx	sl
 80147f8:	3001      	adds	r0, #1
 80147fa:	d09b      	beq.n	8014734 <_printf_i+0x164>
 80147fc:	3501      	adds	r5, #1
 80147fe:	68e3      	ldr	r3, [r4, #12]
 8014800:	9903      	ldr	r1, [sp, #12]
 8014802:	1a5b      	subs	r3, r3, r1
 8014804:	42ab      	cmp	r3, r5
 8014806:	dcf2      	bgt.n	80147ee <_printf_i+0x21e>
 8014808:	e7eb      	b.n	80147e2 <_printf_i+0x212>
 801480a:	2500      	movs	r5, #0
 801480c:	f104 0619 	add.w	r6, r4, #25
 8014810:	e7f5      	b.n	80147fe <_printf_i+0x22e>
 8014812:	bf00      	nop
 8014814:	08014d19 	.word	0x08014d19
 8014818:	08014d2a 	.word	0x08014d2a

0801481c <__sread>:
 801481c:	b510      	push	{r4, lr}
 801481e:	460c      	mov	r4, r1
 8014820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014824:	f000 f894 	bl	8014950 <_read_r>
 8014828:	2800      	cmp	r0, #0
 801482a:	bfab      	itete	ge
 801482c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801482e:	89a3      	ldrhlt	r3, [r4, #12]
 8014830:	181b      	addge	r3, r3, r0
 8014832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014836:	bfac      	ite	ge
 8014838:	6563      	strge	r3, [r4, #84]	; 0x54
 801483a:	81a3      	strhlt	r3, [r4, #12]
 801483c:	bd10      	pop	{r4, pc}

0801483e <__swrite>:
 801483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014842:	461f      	mov	r7, r3
 8014844:	898b      	ldrh	r3, [r1, #12]
 8014846:	05db      	lsls	r3, r3, #23
 8014848:	4605      	mov	r5, r0
 801484a:	460c      	mov	r4, r1
 801484c:	4616      	mov	r6, r2
 801484e:	d505      	bpl.n	801485c <__swrite+0x1e>
 8014850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014854:	2302      	movs	r3, #2
 8014856:	2200      	movs	r2, #0
 8014858:	f000 f868 	bl	801492c <_lseek_r>
 801485c:	89a3      	ldrh	r3, [r4, #12]
 801485e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014866:	81a3      	strh	r3, [r4, #12]
 8014868:	4632      	mov	r2, r6
 801486a:	463b      	mov	r3, r7
 801486c:	4628      	mov	r0, r5
 801486e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014872:	f000 b817 	b.w	80148a4 <_write_r>

08014876 <__sseek>:
 8014876:	b510      	push	{r4, lr}
 8014878:	460c      	mov	r4, r1
 801487a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801487e:	f000 f855 	bl	801492c <_lseek_r>
 8014882:	1c43      	adds	r3, r0, #1
 8014884:	89a3      	ldrh	r3, [r4, #12]
 8014886:	bf15      	itete	ne
 8014888:	6560      	strne	r0, [r4, #84]	; 0x54
 801488a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801488e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014892:	81a3      	strheq	r3, [r4, #12]
 8014894:	bf18      	it	ne
 8014896:	81a3      	strhne	r3, [r4, #12]
 8014898:	bd10      	pop	{r4, pc}

0801489a <__sclose>:
 801489a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801489e:	f000 b813 	b.w	80148c8 <_close_r>
	...

080148a4 <_write_r>:
 80148a4:	b538      	push	{r3, r4, r5, lr}
 80148a6:	4d07      	ldr	r5, [pc, #28]	; (80148c4 <_write_r+0x20>)
 80148a8:	4604      	mov	r4, r0
 80148aa:	4608      	mov	r0, r1
 80148ac:	4611      	mov	r1, r2
 80148ae:	2200      	movs	r2, #0
 80148b0:	602a      	str	r2, [r5, #0]
 80148b2:	461a      	mov	r2, r3
 80148b4:	f7ee f8db 	bl	8002a6e <_write>
 80148b8:	1c43      	adds	r3, r0, #1
 80148ba:	d102      	bne.n	80148c2 <_write_r+0x1e>
 80148bc:	682b      	ldr	r3, [r5, #0]
 80148be:	b103      	cbz	r3, 80148c2 <_write_r+0x1e>
 80148c0:	6023      	str	r3, [r4, #0]
 80148c2:	bd38      	pop	{r3, r4, r5, pc}
 80148c4:	240050b8 	.word	0x240050b8

080148c8 <_close_r>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	4d06      	ldr	r5, [pc, #24]	; (80148e4 <_close_r+0x1c>)
 80148cc:	2300      	movs	r3, #0
 80148ce:	4604      	mov	r4, r0
 80148d0:	4608      	mov	r0, r1
 80148d2:	602b      	str	r3, [r5, #0]
 80148d4:	f7ee f8e7 	bl	8002aa6 <_close>
 80148d8:	1c43      	adds	r3, r0, #1
 80148da:	d102      	bne.n	80148e2 <_close_r+0x1a>
 80148dc:	682b      	ldr	r3, [r5, #0]
 80148de:	b103      	cbz	r3, 80148e2 <_close_r+0x1a>
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	bd38      	pop	{r3, r4, r5, pc}
 80148e4:	240050b8 	.word	0x240050b8

080148e8 <_fstat_r>:
 80148e8:	b538      	push	{r3, r4, r5, lr}
 80148ea:	4d07      	ldr	r5, [pc, #28]	; (8014908 <_fstat_r+0x20>)
 80148ec:	2300      	movs	r3, #0
 80148ee:	4604      	mov	r4, r0
 80148f0:	4608      	mov	r0, r1
 80148f2:	4611      	mov	r1, r2
 80148f4:	602b      	str	r3, [r5, #0]
 80148f6:	f7ee f8e2 	bl	8002abe <_fstat>
 80148fa:	1c43      	adds	r3, r0, #1
 80148fc:	d102      	bne.n	8014904 <_fstat_r+0x1c>
 80148fe:	682b      	ldr	r3, [r5, #0]
 8014900:	b103      	cbz	r3, 8014904 <_fstat_r+0x1c>
 8014902:	6023      	str	r3, [r4, #0]
 8014904:	bd38      	pop	{r3, r4, r5, pc}
 8014906:	bf00      	nop
 8014908:	240050b8 	.word	0x240050b8

0801490c <_isatty_r>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	4d06      	ldr	r5, [pc, #24]	; (8014928 <_isatty_r+0x1c>)
 8014910:	2300      	movs	r3, #0
 8014912:	4604      	mov	r4, r0
 8014914:	4608      	mov	r0, r1
 8014916:	602b      	str	r3, [r5, #0]
 8014918:	f7ee f8e1 	bl	8002ade <_isatty>
 801491c:	1c43      	adds	r3, r0, #1
 801491e:	d102      	bne.n	8014926 <_isatty_r+0x1a>
 8014920:	682b      	ldr	r3, [r5, #0]
 8014922:	b103      	cbz	r3, 8014926 <_isatty_r+0x1a>
 8014924:	6023      	str	r3, [r4, #0]
 8014926:	bd38      	pop	{r3, r4, r5, pc}
 8014928:	240050b8 	.word	0x240050b8

0801492c <_lseek_r>:
 801492c:	b538      	push	{r3, r4, r5, lr}
 801492e:	4d07      	ldr	r5, [pc, #28]	; (801494c <_lseek_r+0x20>)
 8014930:	4604      	mov	r4, r0
 8014932:	4608      	mov	r0, r1
 8014934:	4611      	mov	r1, r2
 8014936:	2200      	movs	r2, #0
 8014938:	602a      	str	r2, [r5, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	f7ee f8da 	bl	8002af4 <_lseek>
 8014940:	1c43      	adds	r3, r0, #1
 8014942:	d102      	bne.n	801494a <_lseek_r+0x1e>
 8014944:	682b      	ldr	r3, [r5, #0]
 8014946:	b103      	cbz	r3, 801494a <_lseek_r+0x1e>
 8014948:	6023      	str	r3, [r4, #0]
 801494a:	bd38      	pop	{r3, r4, r5, pc}
 801494c:	240050b8 	.word	0x240050b8

08014950 <_read_r>:
 8014950:	b538      	push	{r3, r4, r5, lr}
 8014952:	4d07      	ldr	r5, [pc, #28]	; (8014970 <_read_r+0x20>)
 8014954:	4604      	mov	r4, r0
 8014956:	4608      	mov	r0, r1
 8014958:	4611      	mov	r1, r2
 801495a:	2200      	movs	r2, #0
 801495c:	602a      	str	r2, [r5, #0]
 801495e:	461a      	mov	r2, r3
 8014960:	f7ee f868 	bl	8002a34 <_read>
 8014964:	1c43      	adds	r3, r0, #1
 8014966:	d102      	bne.n	801496e <_read_r+0x1e>
 8014968:	682b      	ldr	r3, [r5, #0]
 801496a:	b103      	cbz	r3, 801496e <_read_r+0x1e>
 801496c:	6023      	str	r3, [r4, #0]
 801496e:	bd38      	pop	{r3, r4, r5, pc}
 8014970:	240050b8 	.word	0x240050b8

08014974 <_init>:
 8014974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014976:	bf00      	nop
 8014978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801497a:	bc08      	pop	{r3}
 801497c:	469e      	mov	lr, r3
 801497e:	4770      	bx	lr

08014980 <_fini>:
 8014980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014982:	bf00      	nop
 8014984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014986:	bc08      	pop	{r3}
 8014988:	469e      	mov	lr, r3
 801498a:	4770      	bx	lr
