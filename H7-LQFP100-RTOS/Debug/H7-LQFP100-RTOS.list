
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08017270  08017270  00027270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080176b4  080176b4  000276b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080176bc  080176bc  000276bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080176c0  080176c0  000276c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  080176c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005950  24000120  080177cc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a70  080177cc  00035a70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033a1e  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002770  00000000  00000000  00069248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002558  00000000  00000000  0006b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003232c  00000000  00000000  000ae016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b36  00000000  00000000  000e0342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00274e78  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0a4  00000000  00000000  00274ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017258 	.word	0x08017258

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017258 	.word	0x08017258

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c38 	.word	0x24000c38

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fd28 	bl	801306c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fd1d 	bl	801306c <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fd12 	bl	801306c <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fd07 	bl	801306c <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fa49 	bl	8016af8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c58 	.word	0x24000c58
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080172dc 	.word	0x080172dc

08000688 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fd5f 	bl	8010158 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 83f1 	bhi.w	8000e8a <HAL_UART_RxCpltCallback+0x802>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a85 	.word	0x08000a85
 80006b8:	08000b0b 	.word	0x08000b0b
 80006bc:	08000b35 	.word	0x08000b35
 80006c0:	08000b5d 	.word	0x08000b5d
 80006c4:	08000b87 	.word	0x08000b87
 80006c8:	08000bb3 	.word	0x08000bb3
 80006cc:	08000bdf 	.word	0x08000bdf
 80006d0:	08000c09 	.word	0x08000c09
 80006d4:	08000c35 	.word	0x08000c35
 80006d8:	08000c61 	.word	0x08000c61
 80006dc:	08000c93 	.word	0x08000c93
 80006e0:	08000cc5 	.word	0x08000cc5
 80006e4:	08000d17 	.word	0x08000d17
 80006e8:	08000e1d 	.word	0x08000e1d
 80006ec:	08000e4d 	.word	0x08000e4d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000af5 	.word	0x08000af5
 80006fc:	08000b21 	.word	0x08000b21
 8000700:	08000b49 	.word	0x08000b49
 8000704:	08000b71 	.word	0x08000b71
 8000708:	08000b9d 	.word	0x08000b9d
 800070c:	08000bc9 	.word	0x08000bc9
 8000710:	08000bf5 	.word	0x08000bf5
 8000714:	08000c1d 	.word	0x08000c1d
 8000718:	08000c45 	.word	0x08000c45
 800071c:	08000c77 	.word	0x08000c77
 8000720:	08000ca9 	.word	0x08000ca9
 8000724:	08000cdb 	.word	0x08000cdb
 8000728:	08000df5 	.word	0x08000df5
 800072c:	08000e45 	.word	0x08000e45
 8000730:	08000e8b 	.word	0x08000e8b
 8000734:	08000e8b 	.word	0x08000e8b
 8000738:	08000e8b 	.word	0x08000e8b
 800073c:	08000e8b 	.word	0x08000e8b
 8000740:	08000e8b 	.word	0x08000e8b
 8000744:	08000e8b 	.word	0x08000e8b
 8000748:	08000e8b 	.word	0x08000e8b
 800074c:	08000e8b 	.word	0x08000e8b
 8000750:	08000e8b 	.word	0x08000e8b
 8000754:	08000e8b 	.word	0x08000e8b
 8000758:	08000e8b 	.word	0x08000e8b
 800075c:	08000e8b 	.word	0x08000e8b
 8000760:	08000e8b 	.word	0x08000e8b
 8000764:	08000e8b 	.word	0x08000e8b
 8000768:	08000e8b 	.word	0x08000e8b
 800076c:	08000e8b 	.word	0x08000e8b
 8000770:	08000e8b 	.word	0x08000e8b
 8000774:	08000e8b 	.word	0x08000e8b
 8000778:	08000e8b 	.word	0x08000e8b
 800077c:	08000e8b 	.word	0x08000e8b
 8000780:	08000e8b 	.word	0x08000e8b
 8000784:	08000e8b 	.word	0x08000e8b
 8000788:	08000e8b 	.word	0x08000e8b
 800078c:	08000e8b 	.word	0x08000e8b
 8000790:	08000e8b 	.word	0x08000e8b
 8000794:	08000e8b 	.word	0x08000e8b
 8000798:	08000e8b 	.word	0x08000e8b
 800079c:	08000e8b 	.word	0x08000e8b
 80007a0:	08000e8b 	.word	0x08000e8b
 80007a4:	08000e8b 	.word	0x08000e8b
 80007a8:	08000e8b 	.word	0x08000e8b
 80007ac:	08000e8b 	.word	0x08000e8b
 80007b0:	08000e8b 	.word	0x08000e8b
 80007b4:	08000e8b 	.word	0x08000e8b
 80007b8:	08000e8b 	.word	0x08000e8b
 80007bc:	08000e8b 	.word	0x08000e8b
 80007c0:	08000e8b 	.word	0x08000e8b
 80007c4:	08000e8b 	.word	0x08000e8b
 80007c8:	08000e8b 	.word	0x08000e8b
 80007cc:	08000e8b 	.word	0x08000e8b
 80007d0:	08000e8b 	.word	0x08000e8b
 80007d4:	08000e8b 	.word	0x08000e8b
 80007d8:	08000e8b 	.word	0x08000e8b
 80007dc:	08000e8b 	.word	0x08000e8b
 80007e0:	08000e8b 	.word	0x08000e8b
 80007e4:	08000e8b 	.word	0x08000e8b
 80007e8:	08000e8b 	.word	0x08000e8b
 80007ec:	08000e8b 	.word	0x08000e8b
 80007f0:	08000e8b 	.word	0x08000e8b
 80007f4:	08000e8b 	.word	0x08000e8b
 80007f8:	08000e8b 	.word	0x08000e8b
 80007fc:	08000e8b 	.word	0x08000e8b
 8000800:	08000e8b 	.word	0x08000e8b
 8000804:	08000e8b 	.word	0x08000e8b
 8000808:	08000e8b 	.word	0x08000e8b
 800080c:	08000e8b 	.word	0x08000e8b
 8000810:	08000e8b 	.word	0x08000e8b
 8000814:	08000e8b 	.word	0x08000e8b
 8000818:	08000e8b 	.word	0x08000e8b
 800081c:	08000e8b 	.word	0x08000e8b
 8000820:	08000e8b 	.word	0x08000e8b
 8000824:	08000e8b 	.word	0x08000e8b
 8000828:	08000e8b 	.word	0x08000e8b
 800082c:	08000e8b 	.word	0x08000e8b
 8000830:	08000e8b 	.word	0x08000e8b
 8000834:	08000e8b 	.word	0x08000e8b
 8000838:	08000e8b 	.word	0x08000e8b
 800083c:	08000e8b 	.word	0x08000e8b
 8000840:	08000e8b 	.word	0x08000e8b
 8000844:	08000e8b 	.word	0x08000e8b
 8000848:	08000e8b 	.word	0x08000e8b
 800084c:	08000e8b 	.word	0x08000e8b
 8000850:	08000e8b 	.word	0x08000e8b
 8000854:	08000e8b 	.word	0x08000e8b
 8000858:	08000e8b 	.word	0x08000e8b
 800085c:	08000e8b 	.word	0x08000e8b
 8000860:	08000e8b 	.word	0x08000e8b
 8000864:	08000e8b 	.word	0x08000e8b
 8000868:	08000e8b 	.word	0x08000e8b
 800086c:	08000e8b 	.word	0x08000e8b
 8000870:	08000e8b 	.word	0x08000e8b
 8000874:	08000e8b 	.word	0x08000e8b
 8000878:	08000e8b 	.word	0x08000e8b
 800087c:	08000e8b 	.word	0x08000e8b
 8000880:	08000e8b 	.word	0x08000e8b
 8000884:	08000e8b 	.word	0x08000e8b
 8000888:	08000e8b 	.word	0x08000e8b
 800088c:	08000e8b 	.word	0x08000e8b
 8000890:	08000e8b 	.word	0x08000e8b
 8000894:	08000e8b 	.word	0x08000e8b
 8000898:	08000e8b 	.word	0x08000e8b
 800089c:	08000e8b 	.word	0x08000e8b
 80008a0:	08000e8b 	.word	0x08000e8b
 80008a4:	08000e8b 	.word	0x08000e8b
 80008a8:	08000e8b 	.word	0x08000e8b
 80008ac:	08000e8b 	.word	0x08000e8b
 80008b0:	08000e8b 	.word	0x08000e8b
 80008b4:	08000e8b 	.word	0x08000e8b
 80008b8:	08000e8b 	.word	0x08000e8b
 80008bc:	08000e8b 	.word	0x08000e8b
 80008c0:	08000e8b 	.word	0x08000e8b
 80008c4:	08000e8b 	.word	0x08000e8b
 80008c8:	08000e8b 	.word	0x08000e8b
 80008cc:	08000e8b 	.word	0x08000e8b
 80008d0:	08000e8b 	.word	0x08000e8b
 80008d4:	08000e8b 	.word	0x08000e8b
 80008d8:	08000e8b 	.word	0x08000e8b
 80008dc:	08000e8b 	.word	0x08000e8b
 80008e0:	08000e8b 	.word	0x08000e8b
 80008e4:	08000e8b 	.word	0x08000e8b
 80008e8:	08000e8b 	.word	0x08000e8b
 80008ec:	08000e8b 	.word	0x08000e8b
 80008f0:	08000e8b 	.word	0x08000e8b
 80008f4:	08000e8b 	.word	0x08000e8b
 80008f8:	08000e8b 	.word	0x08000e8b
 80008fc:	08000e8b 	.word	0x08000e8b
 8000900:	08000e8b 	.word	0x08000e8b
 8000904:	08000e8b 	.word	0x08000e8b
 8000908:	08000e8b 	.word	0x08000e8b
 800090c:	08000e8b 	.word	0x08000e8b
 8000910:	08000e8b 	.word	0x08000e8b
 8000914:	08000e8b 	.word	0x08000e8b
 8000918:	08000e8b 	.word	0x08000e8b
 800091c:	08000e8b 	.word	0x08000e8b
 8000920:	08000e8b 	.word	0x08000e8b
 8000924:	08000e8b 	.word	0x08000e8b
 8000928:	08000e8b 	.word	0x08000e8b
 800092c:	08000e8b 	.word	0x08000e8b
 8000930:	08000e8b 	.word	0x08000e8b
 8000934:	08000e8b 	.word	0x08000e8b
 8000938:	08000e8b 	.word	0x08000e8b
 800093c:	08000e8b 	.word	0x08000e8b
 8000940:	08000e8b 	.word	0x08000e8b
 8000944:	08000e8b 	.word	0x08000e8b
 8000948:	08000e8b 	.word	0x08000e8b
 800094c:	08000e8b 	.word	0x08000e8b
 8000950:	08000e8b 	.word	0x08000e8b
 8000954:	08000e8b 	.word	0x08000e8b
 8000958:	08000e8b 	.word	0x08000e8b
 800095c:	08000e8b 	.word	0x08000e8b
 8000960:	08000e8b 	.word	0x08000e8b
 8000964:	08000e8b 	.word	0x08000e8b
 8000968:	08000e8b 	.word	0x08000e8b
 800096c:	08000e61 	.word	0x08000e61
 8000970:	08000e8b 	.word	0x08000e8b
 8000974:	08000e8b 	.word	0x08000e8b
 8000978:	08000e8b 	.word	0x08000e8b
 800097c:	08000e8b 	.word	0x08000e8b
 8000980:	08000e8b 	.word	0x08000e8b
 8000984:	08000e8b 	.word	0x08000e8b
 8000988:	08000e8b 	.word	0x08000e8b
 800098c:	08000e8b 	.word	0x08000e8b
 8000990:	08000e8b 	.word	0x08000e8b
 8000994:	08000e8b 	.word	0x08000e8b
 8000998:	08000e8b 	.word	0x08000e8b
 800099c:	08000e8b 	.word	0x08000e8b
 80009a0:	08000e8b 	.word	0x08000e8b
 80009a4:	08000e8b 	.word	0x08000e8b
 80009a8:	08000e8b 	.word	0x08000e8b
 80009ac:	08000e8b 	.word	0x08000e8b
 80009b0:	08000e8b 	.word	0x08000e8b
 80009b4:	08000e8b 	.word	0x08000e8b
 80009b8:	08000e8b 	.word	0x08000e8b
 80009bc:	08000e8b 	.word	0x08000e8b
 80009c0:	08000e8b 	.word	0x08000e8b
 80009c4:	08000e8b 	.word	0x08000e8b
 80009c8:	08000e8b 	.word	0x08000e8b
 80009cc:	08000e8b 	.word	0x08000e8b
 80009d0:	08000e8b 	.word	0x08000e8b
 80009d4:	08000e8b 	.word	0x08000e8b
 80009d8:	08000e8b 	.word	0x08000e8b
 80009dc:	08000e8b 	.word	0x08000e8b
 80009e0:	08000e8b 	.word	0x08000e8b
 80009e4:	08000e8b 	.word	0x08000e8b
 80009e8:	08000e8b 	.word	0x08000e8b
 80009ec:	08000e8b 	.word	0x08000e8b
 80009f0:	08000e79 	.word	0x08000e79
 80009f4:	08000e8b 	.word	0x08000e8b
 80009f8:	08000e8b 	.word	0x08000e8b
 80009fc:	08000e8b 	.word	0x08000e8b
 8000a00:	08000e8b 	.word	0x08000e8b
 8000a04:	08000e8b 	.word	0x08000e8b
 8000a08:	08000e8b 	.word	0x08000e8b
 8000a0c:	08000e8b 	.word	0x08000e8b
 8000a10:	08000e8b 	.word	0x08000e8b
 8000a14:	08000e8b 	.word	0x08000e8b
 8000a18:	08000e8b 	.word	0x08000e8b
 8000a1c:	08000e8b 	.word	0x08000e8b
 8000a20:	08000e8b 	.word	0x08000e8b
 8000a24:	08000e8b 	.word	0x08000e8b
 8000a28:	08000e8b 	.word	0x08000e8b
 8000a2c:	08000e8b 	.word	0x08000e8b
 8000a30:	08000e67 	.word	0x08000e67
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f85f 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 faa5 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000a46:	e22b      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f855 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fa9b 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e221      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
 8000a5c:	24000c5c 	.word	0x24000c5c
 8000a60:	24000638 	.word	0x24000638
 8000a64:	080172f4 	.word	0x080172f4
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	080172fc 	.word	0x080172fc
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48b8      	ldr	r0, [pc, #736]	; (8000d54 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a72:	f016 f841 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bb8      	ldr	r3, [pc, #736]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fa87 	bl	8008f90 <HAL_GPIO_WritePin>

		break;
 8000a82:	e20d      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a84:	48b5      	ldr	r0, [pc, #724]	; (8000d5c <HAL_UART_RxCpltCallback+0x6d4>)
 8000a86:	f016 f837 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a8a:	4bb3      	ldr	r3, [pc, #716]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 fa7d 	bl	8008f90 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a96:	4bb0      	ldr	r3, [pc, #704]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 fa77 	bl	8008f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa2:	4baf      	ldr	r3, [pc, #700]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fa70 	bl	8008f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab0:	4bab      	ldr	r3, [pc, #684]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 fa69 	bl	8008f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000abe:	4ba8      	ldr	r3, [pc, #672]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 fa62 	bl	8008f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000acc:	4ba4      	ldr	r3, [pc, #656]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fa5c 	bl	8008f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ad8:	4ba1      	ldr	r3, [pc, #644]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 fa56 	bl	8008f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae4:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fa4f 	bl	8008f90 <HAL_GPIO_WritePin>

		break;
 8000af2:	e1d5      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000af4:	489b      	ldr	r0, [pc, #620]	; (8000d64 <HAL_UART_RxCpltCallback+0x6dc>)
 8000af6:	f015 ffff 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000afa:	4b99      	ldr	r3, [pc, #612]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	2201      	movs	r2, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 fa44 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b08:	e1ca      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b0a:	4897      	ldr	r0, [pc, #604]	; (8000d68 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b0c:	f015 fff4 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 fa39 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b1e:	e1bf      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b20:	4892      	ldr	r0, [pc, #584]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000b22:	f015 ffe9 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b26:	4b8e      	ldr	r3, [pc, #568]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 fa2f 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b32:	e1b5      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b34:	488e      	ldr	r0, [pc, #568]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b36:	f015 ffdf 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 fa25 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b46:	e1ab      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b48:	488a      	ldr	r0, [pc, #552]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b4a:	f015 ffd5 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b4e:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 fa1b 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b5a:	e1a1      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b5c:	4886      	ldr	r0, [pc, #536]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b5e:	f015 ffcb 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 fa11 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b6e:	e197      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b72:	f015 ffc1 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 fa06 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b84:	e18c      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b86:	487e      	ldr	r0, [pc, #504]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b88:	f015 ffb6 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b8c:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	2200      	movs	r2, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f9fb 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e181      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b9c:	4879      	ldr	r0, [pc, #484]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b9e:	f015 ffab 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ba2:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f9f0 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000bb0:	e176      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb4:	f015 ffa0 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9e5 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000bc6:	e16b      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bc8:	4870      	ldr	r0, [pc, #448]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000bca:	f015 ff95 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f9da 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000bdc:	e160      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bde:	486c      	ldr	r0, [pc, #432]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000be0:	f015 ff8a 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000be4:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 f9cf 	bl	8008f90 <HAL_GPIO_WritePin>

		break;
 8000bf2:	e155      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bf4:	4867      	ldr	r0, [pc, #412]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bf6:	f015 ff7f 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f9c5 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000c06:	e14b      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c08:	4863      	ldr	r0, [pc, #396]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c0a:	f015 ff75 	bl	8016af8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c0e:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 f9bb 	bl	8008f90 <HAL_GPIO_WritePin>
		break;
 8000c1a:	e141      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c1c:	485f      	ldr	r0, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	f015 ff6b 	bl	8016af8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2320      	movs	r3, #32
 8000c28:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	485d      	ldr	r0, [pc, #372]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c2e:	f004 fe13 	bl	8005858 <HAL_DAC_Start_DMA>
		break;
 8000c32:	e135      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c34:	485c      	ldr	r0, [pc, #368]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c36:	f015 ff5f 	bl	8016af8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c3e:	f004 fecb 	bl	80059d8 <HAL_DAC_Stop_DMA>
		break;
 8000c42:	e12d      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000c46:	f015 ff57 	bl	8016af8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4858      	ldr	r0, [pc, #352]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fda3 	bl	800e798 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c58:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
		break;
 8000c5e:	e11f      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c60:	4856      	ldr	r0, [pc, #344]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000c62:	f015 ff49 	bl	8016af8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c66:	210c      	movs	r1, #12
 8000c68:	4851      	ldr	r0, [pc, #324]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c6a:	f00d feef 	bl	800ea4c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e114      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c76:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c78:	f015 ff3e 	bl	8016af8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fd8a 	bl	800e798 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
		break;
 8000c90:	e106      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c92:	484f      	ldr	r0, [pc, #316]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c94:	f015 ff30 	bl	8016af8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c9c:	f00d fed6 	bl	800ea4c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	e0fb      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000ca8:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000caa:	f015 ff25 	bl	8016af8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fd71 	bl	800e798 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
		break;
 8000cc2:	e0ed      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 ff17 	bl	8016af8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cce:	f00d febd 	bl	800ea4c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		break;
 8000cd8:	e0e2      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cda:	4843      	ldr	r0, [pc, #268]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cdc:	f015 ff0c 	bl	8016af8 <puts>
		if (step < 17) {
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	f200 80d4 	bhi.w	8000e92 <HAL_UART_RxCpltCallback+0x80a>
			step += 2;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d08:	f004 ff09 	bl	8005b1e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d10:	f004 fd4a 	bl	80057a8 <HAL_DAC_Start>
		}
		break;
 8000d14:	e0bd      	b.n	8000e92 <HAL_UART_RxCpltCallback+0x80a>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d16:	4836      	ldr	r0, [pc, #216]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d18:	f015 feee 	bl	8016af8 <puts>
		if (step > 3) {
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	f240 80b8 	bls.w	8000e96 <HAL_UART_RxCpltCallback+0x80e>
			step -= 2;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d30:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d44:	f004 feeb 	bl	8005b1e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d4c:	f004 fd2c 	bl	80057a8 <HAL_DAC_Start>
		}
		break;
 8000d50:	e0a1      	b.n	8000e96 <HAL_UART_RxCpltCallback+0x80e>
 8000d52:	bf00      	nop
 8000d54:	08017308 	.word	0x08017308
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	08017314 	.word	0x08017314
 8000d60:	58020800 	.word	0x58020800
 8000d64:	08017320 	.word	0x08017320
 8000d68:	0801732c 	.word	0x0801732c
 8000d6c:	0801733c 	.word	0x0801733c
 8000d70:	08017348 	.word	0x08017348
 8000d74:	08017354 	.word	0x08017354
 8000d78:	08017360 	.word	0x08017360
 8000d7c:	08017370 	.word	0x08017370
 8000d80:	0801737c 	.word	0x0801737c
 8000d84:	08017388 	.word	0x08017388
 8000d88:	08017394 	.word	0x08017394
 8000d8c:	080173a0 	.word	0x080173a0
 8000d90:	080173b0 	.word	0x080173b0
 8000d94:	080173c0 	.word	0x080173c0
 8000d98:	080173cc 	.word	0x080173cc
 8000d9c:	080173dc 	.word	0x080173dc
 8000da0:	24000010 	.word	0x24000010
 8000da4:	240002f4 	.word	0x240002f4
 8000da8:	080173ec 	.word	0x080173ec
 8000dac:	080173fc 	.word	0x080173fc
 8000db0:	24000554 	.word	0x24000554
 8000db4:	24000c53 	.word	0x24000c53
 8000db8:	24000c4e 	.word	0x24000c4e
 8000dbc:	08017404 	.word	0x08017404
 8000dc0:	08017410 	.word	0x08017410
 8000dc4:	24000508 	.word	0x24000508
 8000dc8:	24000c52 	.word	0x24000c52
 8000dcc:	24000c4c 	.word	0x24000c4c
 8000dd0:	08017418 	.word	0x08017418
 8000dd4:	08017420 	.word	0x08017420
 8000dd8:	240005a0 	.word	0x240005a0
 8000ddc:	24000c54 	.word	0x24000c54
 8000de0:	24000c50 	.word	0x24000c50
 8000de4:	08017428 	.word	0x08017428
 8000de8:	08017430 	.word	0x08017430
 8000dec:	2400000c 	.word	0x2400000c
 8000df0:	08017438 	.word	0x08017438
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000df6:	f015 fe7f 	bl	8016af8 <puts>
		if (cadence <= 50000) {
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d849      	bhi.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
			cadence *= 2;
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e1a:	e03e      	b.n	8000e9a <HAL_UART_RxCpltCallback+0x812>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e1c:	4824      	ldr	r0, [pc, #144]	; (8000eb0 <HAL_UART_RxCpltCallback+0x828>)
 8000e1e:	f015 fe6b 	bl	8016af8 <puts>
		if (cadence >= 6250) {
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d937      	bls.n	8000e9e <HAL_UART_RxCpltCallback+0x816>
			cadence /= 2;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e36:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e42:	e02c      	b.n	8000e9e <HAL_UART_RxCpltCallback+0x816>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e44:	481b      	ldr	r0, [pc, #108]	; (8000eb4 <HAL_UART_RxCpltCallback+0x82c>)
 8000e46:	f015 fe57 	bl	8016af8 <puts>
		// TODO: Exit stop mode
		break;
 8000e4a:	e029      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <HAL_UART_RxCpltCallback+0x830>)
 8000e4e:	f015 fe53 	bl	8016af8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_UART_RxCpltCallback+0x834>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2116      	movs	r1, #22
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f012 f907 	bl	801306c <osEventFlagsSet>
		break;
 8000e5e:	e01f      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0xAF: {
		sync();
 8000e60:	f001 f964 	bl	800212c <sync>
		break;
 8000e64:	e01c      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e66:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <HAL_UART_RxCpltCallback+0x838>)
 8000e68:	f015 fe46 	bl	8016af8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_RxCpltCallback+0x83c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f013 fea1 	bl	8014bb8 <xTaskResumeFromISR>
		break;
 8000e76:	e013      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <HAL_UART_RxCpltCallback+0x840>)
 8000e7a:	f015 fe3d 	bl	8016af8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_UART_RxCpltCallback+0x844>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f013 fe98 	bl	8014bb8 <xTaskResumeFromISR>
		break;
 8000e88:	e00a      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
	}
	default: {
		printf("Unknown Command\n");
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <HAL_UART_RxCpltCallback+0x848>)
 8000e8c:	f015 fe34 	bl	8016af8 <puts>
		break;
 8000e90:	e006      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
		break;
 8000e92:	bf00      	nop
 8000e94:	e004      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
		break;
 8000e96:	bf00      	nop
 8000e98:	e002      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
		break;
 8000e9a:	bf00      	nop
 8000e9c:	e000      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x818>
		break;
 8000e9e:	bf00      	nop
	}
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08017444 	.word	0x08017444
 8000eac:	24000008 	.word	0x24000008
 8000eb0:	08017450 	.word	0x08017450
 8000eb4:	0801745c 	.word	0x0801745c
 8000eb8:	0801746c 	.word	0x0801746c
 8000ebc:	24000c58 	.word	0x24000c58
 8000ec0:	0801747c 	.word	0x0801747c
 8000ec4:	24000750 	.word	0x24000750
 8000ec8:	08017488 	.word	0x08017488
 8000ecc:	240009b0 	.word	0x240009b0
 8000ed0:	08017494 	.word	0x08017494

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f002 fed2 	bl	8003c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f8ac 	bl	8001038 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ee0:	f000 f92a 	bl	8001138 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 feee 	bl	8001cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee8:	f000 feb4 	bl	8001c54 <MX_DMA_Init>
  MX_TIM3_Init();
 8000eec:	f000 fdac 	bl	8001a48 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ef0:	f000 fe48 	bl	8001b84 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ef4:	f000 fb36 	bl	8001564 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ef8:	f000 fc2c 	bl	8001754 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000efc:	f000 fd2e 	bl	800195c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f00:	f000 fc80 	bl	8001804 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f04:	f000 fa6a 	bl	80013dc <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f08:	f000 f946 	bl	8001198 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f0c:	f000 faf8 	bl	8001500 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f10:	f000 fbc8 	bl	80016a4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f14:	f000 fb68 	bl	80015e8 <MX_RTC_Init>
  MX_TIM4_Init();
 8000f18:	f000 fde6 	bl	8001ae8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f1c:	f011 ff2e 	bl	8012d7c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2108      	movs	r1, #8
 8000f24:	2080      	movs	r0, #128	; 0x80
 8000f26:	f012 f99e 	bl	8013266 <osMessageQueueNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <main+0xf8>)
 8000f2e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <main+0xfc>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <main+0x100>)
 8000f36:	f011 ff6b 	bl	8012e10 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <main+0x104>)
 8000f3e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f40:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <main+0x108>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4826      	ldr	r0, [pc, #152]	; (8000fe0 <main+0x10c>)
 8000f46:	f011 ff63 	bl	8012e10 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <main+0x110>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f50:	4a25      	ldr	r2, [pc, #148]	; (8000fe8 <main+0x114>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4825      	ldr	r0, [pc, #148]	; (8000fec <main+0x118>)
 8000f56:	f011 ff5b 	bl	8012e10 <osThreadNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <main+0x11c>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <main+0x120>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <main+0x124>)
 8000f66:	f011 ff53 	bl	8012e10 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <main+0x128>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <main+0x12c>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4823      	ldr	r0, [pc, #140]	; (8001004 <main+0x130>)
 8000f76:	f011 ff4b 	bl	8012e10 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <main+0x134>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f80:	4a22      	ldr	r2, [pc, #136]	; (800100c <main+0x138>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4822      	ldr	r0, [pc, #136]	; (8001010 <main+0x13c>)
 8000f86:	f011 ff43 	bl	8012e10 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <main+0x140>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <main+0x144>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <main+0x148>)
 8000f96:	f011 ff3b 	bl	8012e10 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a20      	ldr	r2, [pc, #128]	; (8001020 <main+0x14c>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <main+0x150>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4820      	ldr	r0, [pc, #128]	; (8001028 <main+0x154>)
 8000fa6:	f011 ff33 	bl	8012e10 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <main+0x158>)
 8000fae:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f012 f81b 	bl	8012fec <osEventFlagsNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <main+0x15c>)
 8000fba:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fbc:	f001 f91e 	bl	80021fc <system_setup>
	printf("Starting kernal...\n");
 8000fc0:	481c      	ldr	r0, [pc, #112]	; (8001034 <main+0x160>)
 8000fc2:	f015 fd99 	bl	8016af8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc6:	f011 fefd 	bl	8012dc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fca:	e7fe      	b.n	8000fca <main+0xf6>
 8000fcc:	24000c3c 	.word	0x24000c3c
 8000fd0:	080174f0 	.word	0x080174f0
 8000fd4:	080029dd 	.word	0x080029dd
 8000fd8:	24000744 	.word	0x24000744
 8000fdc:	08017514 	.word	0x08017514
 8000fe0:	08002a21 	.word	0x08002a21
 8000fe4:	24000748 	.word	0x24000748
 8000fe8:	08017538 	.word	0x08017538
 8000fec:	08002a65 	.word	0x08002a65
 8000ff0:	2400074c 	.word	0x2400074c
 8000ff4:	0801755c 	.word	0x0801755c
 8000ff8:	08002aa9 	.word	0x08002aa9
 8000ffc:	24000750 	.word	0x24000750
 8001000:	08017580 	.word	0x08017580
 8001004:	08002b51 	.word	0x08002b51
 8001008:	240009b0 	.word	0x240009b0
 800100c:	080175a4 	.word	0x080175a4
 8001010:	08002bf9 	.word	0x08002bf9
 8001014:	24000c10 	.word	0x24000c10
 8001018:	080175c8 	.word	0x080175c8
 800101c:	08002cb1 	.word	0x08002cb1
 8001020:	24000c14 	.word	0x24000c14
 8001024:	080175ec 	.word	0x080175ec
 8001028:	08002d9d 	.word	0x08002d9d
 800102c:	24000c18 	.word	0x24000c18
 8001030:	24000c58 	.word	0x24000c58
 8001034:	080174a4 	.word	0x080174a4

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09c      	sub	sp, #112	; 0x70
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	224c      	movs	r2, #76	; 0x4c
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f015 fc00 	bl	801684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2220      	movs	r2, #32
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f015 fbfa 	bl	801684c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001058:	2002      	movs	r0, #2
 800105a:	f008 fdfb 	bl	8009c54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <SystemClock_Config+0xf8>)
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	4a32      	ldr	r2, [pc, #200]	; (8001130 <SystemClock_Config+0xf8>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <SystemClock_Config+0xf8>)
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <SystemClock_Config+0xfc>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <SystemClock_Config+0xfc>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <SystemClock_Config+0xfc>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001094:	bf00      	nop
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <SystemClock_Config+0xfc>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a2:	d1f8      	bne.n	8001096 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010a4:	2303      	movs	r3, #3
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80010ae:	2309      	movs	r3, #9
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010be:	2304      	movs	r3, #4
 80010c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010c2:	2320      	movs	r3, #32
 80010c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010d2:	2308      	movs	r3, #8
 80010d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f008 fdf0 	bl	8009cc8 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010ee:	f001 fe85 	bl	8002dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	233f      	movs	r3, #63	; 0x3f
 80010f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f009 fa30 	bl	800a57c <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001122:	f001 fe6b 	bl	8002dfc <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3770      	adds	r7, #112	; 0x70
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	58000400 	.word	0x58000400
 8001134:	58024800 	.word	0x58024800

08001138 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b0      	sub	sp, #192	; 0xc0
 800113c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	22c0      	movs	r2, #192	; 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f015 fb81 	bl	801684c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001156:	2304      	movs	r3, #4
 8001158:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800115a:	2320      	movs	r3, #32
 800115c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800115e:	2308      	movs	r3, #8
 8001160:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001162:	2304      	movs	r3, #4
 8001164:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f009 fdca 	bl	800ad18 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800118a:	f001 fe37 	bl	8002dfc <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	37c0      	adds	r7, #192	; 0xc0
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011bc:	4b7a      	ldr	r3, [pc, #488]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011be:	4a7b      	ldr	r2, [pc, #492]	; (80013ac <MX_ADC1_Init+0x214>)
 80011c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011c2:	4b79      	ldr	r3, [pc, #484]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ca:	4b77      	ldr	r3, [pc, #476]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011cc:	2208      	movs	r2, #8
 80011ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d0:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d6:	4b74      	ldr	r3, [pc, #464]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011d8:	2204      	movs	r2, #4
 80011da:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011dc:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011de:	2200      	movs	r2, #0
 80011e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e2:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011e8:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011ea:	220b      	movs	r2, #11
 80011ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b6e      	ldr	r3, [pc, #440]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fa:	4b6b      	ldr	r3, [pc, #428]	; (80013a8 <MX_ADC1_Init+0x210>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001200:	4b69      	ldr	r3, [pc, #420]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001202:	2203      	movs	r2, #3
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001206:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800120e:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001214:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121c:	4862      	ldr	r0, [pc, #392]	; (80013a8 <MX_ADC1_Init+0x210>)
 800121e:	f002 ffbb 	bl	8004198 <HAL_ADC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001228:	f001 fde8 	bl	8002dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	485c      	ldr	r0, [pc, #368]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001238:	f004 f8d6 	bl	80053e8 <HAL_ADCEx_MultiModeConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001242:	f001 fddb 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <MX_ADC1_Init+0x218>)
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2306      	movs	r3, #6
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800124e:	2307      	movs	r3, #7
 8001250:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001252:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001256:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001258:	2304      	movs	r3, #4
 800125a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	484f      	ldr	r0, [pc, #316]	; (80013a8 <MX_ADC1_Init+0x210>)
 800126a:	f003 fa19 	bl	80046a0 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001274:	f001 fdc2 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001278:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <MX_ADC1_Init+0x21c>)
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800127c:	230c      	movs	r3, #12
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4848      	ldr	r0, [pc, #288]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001286:	f003 fa0b 	bl	80046a0 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001290:	f001 fdb4 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001294:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <MX_ADC1_Init+0x220>)
 8001296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001298:	2312      	movs	r3, #18
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4841      	ldr	r0, [pc, #260]	; (80013a8 <MX_ADC1_Init+0x210>)
 80012a2:	f003 f9fd 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012ac:	f001 fda6 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <MX_ADC1_Init+0x224>)
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012b4:	2318      	movs	r3, #24
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	483a      	ldr	r0, [pc, #232]	; (80013a8 <MX_ADC1_Init+0x210>)
 80012be:	f003 f9ef 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012c8:	f001 fd98 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012cc:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MX_ADC1_Init+0x228>)
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4833      	ldr	r0, [pc, #204]	; (80013a8 <MX_ADC1_Init+0x210>)
 80012dc:	f003 f9e0 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012e6:	f001 fd89 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_ADC1_Init+0x22c>)
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012ee:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	482b      	ldr	r0, [pc, #172]	; (80013a8 <MX_ADC1_Init+0x210>)
 80012fa:	f003 f9d1 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001304:	f001 fd7a 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <MX_ADC1_Init+0x230>)
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800130c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001310:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4824      	ldr	r0, [pc, #144]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001318:	f003 f9c2 	bl	80046a0 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001322:	f001 fd6b 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_ADC1_Init+0x234>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800132a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001336:	f003 f9b3 	bl	80046a0 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001340:	f001 fd5c 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_ADC1_Init+0x238>)
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001348:	f44f 738c 	mov.w	r3, #280	; 0x118
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001354:	f003 f9a4 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800135e:	f001 fd4d 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_ADC1_Init+0x23c>)
 8001364:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001372:	f003 f995 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800137c:	f001 fd3e 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_ADC1_Init+0x240>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001384:	f240 2306 	movw	r3, #518	; 0x206
 8001388:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_ADC1_Init+0x210>)
 8001390:	f003 f986 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800139a:	f001 fd2f 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2400013c 	.word	0x2400013c
 80013ac:	40022000 	.word	0x40022000
 80013b0:	0c900008 	.word	0x0c900008
 80013b4:	10c00010 	.word	0x10c00010
 80013b8:	14f00020 	.word	0x14f00020
 80013bc:	1d500080 	.word	0x1d500080
 80013c0:	21800100 	.word	0x21800100
 80013c4:	25b00200 	.word	0x25b00200
 80013c8:	2a000400 	.word	0x2a000400
 80013cc:	2e300800 	.word	0x2e300800
 80013d0:	3ac04000 	.word	0x3ac04000
 80013d4:	3ef08000 	.word	0x3ef08000
 80013d8:	47520000 	.word	0x47520000

080013dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013f4:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <MX_ADC3_Init+0x110>)
 80013f6:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <MX_ADC3_Init+0x114>)
 80013f8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <MX_ADC3_Init+0x110>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001400:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <MX_ADC3_Init+0x110>)
 8001402:	2201      	movs	r2, #1
 8001404:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001406:	4b39      	ldr	r3, [pc, #228]	; (80014ec <MX_ADC3_Init+0x110>)
 8001408:	2204      	movs	r2, #4
 800140a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <MX_ADC3_Init+0x110>)
 800140e:	2200      	movs	r2, #0
 8001410:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <MX_ADC3_Init+0x110>)
 8001414:	2201      	movs	r2, #1
 8001416:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <MX_ADC3_Init+0x110>)
 800141a:	2204      	movs	r2, #4
 800141c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <MX_ADC3_Init+0x110>)
 8001420:	2200      	movs	r2, #0
 8001422:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <MX_ADC3_Init+0x110>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <MX_ADC3_Init+0x110>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <MX_ADC3_Init+0x110>)
 8001432:	2203      	movs	r2, #3
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <MX_ADC3_Init+0x110>)
 8001438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_ADC3_Init+0x110>)
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_ADC3_Init+0x110>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800144c:	4827      	ldr	r0, [pc, #156]	; (80014ec <MX_ADC3_Init+0x110>)
 800144e:	f002 fea3 	bl	8004198 <HAL_ADC_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001458:	f001 fcd0 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <MX_ADC3_Init+0x118>)
 800145e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001460:	2306      	movs	r3, #6
 8001462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001464:	2307      	movs	r3, #7
 8001466:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001468:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800146c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800146e:	2304      	movs	r3, #4
 8001470:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <MX_ADC3_Init+0x110>)
 8001480:	f003 f90e 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800148a:	f001 fcb7 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_ADC3_Init+0x11c>)
 8001490:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001492:	230c      	movs	r3, #12
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_ADC3_Init+0x110>)
 800149c:	f003 f900 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80014a6:	f001 fca9 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014aa:	2301      	movs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014ae:	2312      	movs	r3, #18
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_ADC3_Init+0x110>)
 80014b8:	f003 f8f2 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014c2:	f001 fc9b 	bl	8002dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_ADC3_Init+0x120>)
 80014c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014ca:	2318      	movs	r3, #24
 80014cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_ADC3_Init+0x110>)
 80014d4:	f003 f8e4 	bl	80046a0 <HAL_ADC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014de:	f001 fc8d 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	240001a0 	.word	0x240001a0
 80014f0:	58026000 	.word	0x58026000
 80014f4:	cb840000 	.word	0xcb840000
 80014f8:	cfb80000 	.word	0xcfb80000
 80014fc:	04300002 	.word	0x04300002

08001500 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2224      	movs	r2, #36	; 0x24
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f015 f99d 	bl	801684c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_DAC1_Init+0x5c>)
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_DAC1_Init+0x60>)
 8001516:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001518:	4810      	ldr	r0, [pc, #64]	; (800155c <MX_DAC1_Init+0x5c>)
 800151a:	f004 f923 	bl	8005764 <HAL_DAC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001524:	f001 fc6a 	bl	8002dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800152c:	230a      	movs	r3, #10
 800152e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_DAC1_Init+0x5c>)
 8001544:	f004 fb3e 	bl	8005bc4 <HAL_DAC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800154e:	f001 fc55 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	240002f4 	.word	0x240002f4
 8001560:	40007400 	.word	0x40007400

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_I2C1_Init+0x78>)
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <MX_I2C1_Init+0x7c>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_I2C1_Init+0x78>)
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_I2C1_Init+0x80>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_I2C1_Init+0x78>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_I2C1_Init+0x78>)
 800157c:	2201      	movs	r2, #1
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_I2C1_Init+0x78>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_I2C1_Init+0x78>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_I2C1_Init+0x78>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C1_Init+0x78>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_I2C1_Init+0x78>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <MX_I2C1_Init+0x78>)
 80015a0:	f007 fd10 	bl	8008fc4 <HAL_I2C_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015aa:	f001 fc27 	bl	8002dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <MX_I2C1_Init+0x78>)
 80015b2:	f008 fa57 	bl	8009a64 <HAL_I2CEx_ConfigAnalogFilter>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015bc:	f001 fc1e 	bl	8002dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_I2C1_Init+0x78>)
 80015c4:	f008 fa99 	bl	8009afa <HAL_I2CEx_ConfigDigitalFilter>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f001 fc15 	bl	8002dfc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f008 fade 	bl	8009b94 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	24000380 	.word	0x24000380
 80015e0:	40005400 	.word	0x40005400
 80015e4:	0020081f 	.word	0x0020081f

080015e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <MX_RTC_Init+0xb4>)
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <MX_RTC_Init+0xb8>)
 8001604:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MX_RTC_Init+0xb4>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <MX_RTC_Init+0xb4>)
 800160e:	2263      	movs	r2, #99	; 0x63
 8001610:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <MX_RTC_Init+0xb4>)
 8001614:	f242 720f 	movw	r2, #9999	; 0x270f
 8001618:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <MX_RTC_Init+0xb4>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_RTC_Init+0xb4>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_RTC_Init+0xb4>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_RTC_Init+0xb4>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001632:	481a      	ldr	r0, [pc, #104]	; (800169c <MX_RTC_Init+0xb4>)
 8001634:	f00c f86e 	bl	800d714 <HAL_RTC_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800163e:	f001 fbdd 	bl	8002dfc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001642:	2300      	movs	r3, #0
 8001644:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001646:	2300      	movs	r3, #0
 8001648:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800164a:	2300      	movs	r3, #0
 800164c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2201      	movs	r2, #1
 800165a:	4619      	mov	r1, r3
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <MX_RTC_Init+0xb4>)
 800165e:	f00c f8db 	bl	800d818 <HAL_RTC_SetTime>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001668:	f001 fbc8 	bl	8002dfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800166c:	2301      	movs	r3, #1
 800166e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001670:	2301      	movs	r3, #1
 8001672:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001674:	2301      	movs	r3, #1
 8001676:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001678:	2300      	movs	r3, #0
 800167a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	2201      	movs	r2, #1
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_RTC_Init+0xb4>)
 8001684:	f00c f9c2 	bl	800da0c <HAL_RTC_SetDate>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800168e:	f001 fbb5 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	240003d4 	.word	0x240003d4
 80016a0:	58004000 	.word	0x58004000

080016a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_SPI1_Init+0xa8>)
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <MX_SPI1_Init+0xac>)
 80016ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ae:	4b27      	ldr	r3, [pc, #156]	; (800174c <MX_SPI1_Init+0xa8>)
 80016b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <MX_SPI1_Init+0xa8>)
 80016b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_SPI1_Init+0xa8>)
 80016c0:	220f      	movs	r2, #15
 80016c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_SPI1_Init+0xa8>)
 80016d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_SPI1_Init+0xa8>)
 80016da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_SPI1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_SPI1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_SPI1_Init+0xa8>)
 80016fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_SPI1_Init+0xa8>)
 8001702:	2200      	movs	r2, #0
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_SPI1_Init+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_SPI1_Init+0xa8>)
 800170e:	2200      	movs	r2, #0
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_SPI1_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_SPI1_Init+0xa8>)
 800171a:	2200      	movs	r2, #0
 800171c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_SPI1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_SPI1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_SPI1_Init+0xa8>)
 8001738:	f00c fb0e 	bl	800dd58 <HAL_SPI_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001742:	f001 fb5b 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240003f8 	.word	0x240003f8
 8001750:	40013000 	.word	0x40013000

08001754 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MX_SPI2_Init+0xa8>)
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <MX_SPI2_Init+0xac>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001760:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001764:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001768:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800176c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001770:	220f      	movs	r2, #15
 8001772:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001786:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <MX_SPI2_Init+0xa8>)
 800178a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800178e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_SPI2_Init+0xa8>)
 80017e8:	f00c fab6 	bl	800dd58 <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017f2:	f001 fb03 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24000480 	.word	0x24000480
 8001800:	40003800 	.word	0x40003800

08001804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09a      	sub	sp, #104	; 0x68
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	222c      	movs	r2, #44	; 0x2c
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f015 f804 	bl	801684c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <MX_TIM1_Init+0x150>)
 8001846:	4a44      	ldr	r2, [pc, #272]	; (8001958 <MX_TIM1_Init+0x154>)
 8001848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800184a:	4b42      	ldr	r3, [pc, #264]	; (8001954 <MX_TIM1_Init+0x150>)
 800184c:	2231      	movs	r2, #49	; 0x31
 800184e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <MX_TIM1_Init+0x150>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <MX_TIM1_Init+0x150>)
 8001858:	f24f 4223 	movw	r2, #62499	; 0xf423
 800185c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <MX_TIM1_Init+0x150>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <MX_TIM1_Init+0x150>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <MX_TIM1_Init+0x150>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001870:	4838      	ldr	r0, [pc, #224]	; (8001954 <MX_TIM1_Init+0x150>)
 8001872:	f00c fec2 	bl	800e5fa <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800187c:	f001 fabe 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188a:	4619      	mov	r1, r3
 800188c:	4831      	ldr	r0, [pc, #196]	; (8001954 <MX_TIM1_Init+0x150>)
 800188e:	f00d fc3d 	bl	800f10c <HAL_TIM_ConfigClockSource>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001898:	f001 fab0 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800189c:	482d      	ldr	r0, [pc, #180]	; (8001954 <MX_TIM1_Init+0x150>)
 800189e:	f00d f9b9 	bl	800ec14 <HAL_TIM_PWM_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018a8:	f001 faa8 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018bc:	4619      	mov	r1, r3
 80018be:	4825      	ldr	r0, [pc, #148]	; (8001954 <MX_TIM1_Init+0x150>)
 80018c0:	f00e f97a 	bl	800fbb8 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018ca:	f001 fa97 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4818      	ldr	r0, [pc, #96]	; (8001954 <MX_TIM1_Init+0x150>)
 80018f4:	f00d faf6 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018fe:	f001 fa7d 	bl	8002dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <MX_TIM1_Init+0x150>)
 8001938:	f00e f9cc 	bl	800fcd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001942:	f001 fa5b 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <MX_TIM1_Init+0x150>)
 8001948:	f001 fe08 	bl	800355c <HAL_TIM_MspPostInit>

}
 800194c:	bf00      	nop
 800194e:	3768      	adds	r7, #104	; 0x68
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	24000508 	.word	0x24000508
 8001958:	40010000 	.word	0x40010000

0800195c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	; 0x38
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <MX_TIM2_Init+0xe8>)
 8001990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <MX_TIM2_Init+0xe8>)
 8001998:	2231      	movs	r2, #49	; 0x31
 800199a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <MX_TIM2_Init+0xe8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <MX_TIM2_Init+0xe8>)
 80019a4:	f640 4234 	movw	r2, #3124	; 0xc34
 80019a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <MX_TIM2_Init+0xe8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <MX_TIM2_Init+0xe8>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b6:	4823      	ldr	r0, [pc, #140]	; (8001a44 <MX_TIM2_Init+0xe8>)
 80019b8:	f00c fe1f 	bl	800e5fa <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019c2:	f001 fa1b 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d0:	4619      	mov	r1, r3
 80019d2:	481c      	ldr	r0, [pc, #112]	; (8001a44 <MX_TIM2_Init+0xe8>)
 80019d4:	f00d fb9a 	bl	800f10c <HAL_TIM_ConfigClockSource>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019de:	f001 fa0d 	bl	8002dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e2:	4818      	ldr	r0, [pc, #96]	; (8001a44 <MX_TIM2_Init+0xe8>)
 80019e4:	f00d f916 	bl	800ec14 <HAL_TIM_PWM_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ee:	f001 fa05 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019f2:	2320      	movs	r3, #32
 80019f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <MX_TIM2_Init+0xe8>)
 8001a02:	f00e f8d9 	bl	800fbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a0c:	f001 f9f6 	bl	8002dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a10:	2360      	movs	r3, #96	; 0x60
 8001a12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	220c      	movs	r2, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <MX_TIM2_Init+0xe8>)
 8001a28:	f00d fa5c 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a32:	f001 f9e3 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <MX_TIM2_Init+0xe8>)
 8001a38:	f001 fd90 	bl	800355c <HAL_TIM_MspPostInit>

}
 8001a3c:	bf00      	nop
 8001a3e:	3738      	adds	r7, #56	; 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	24000554 	.word	0x24000554

08001a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <MX_TIM3_Init+0x9c>)
 8001a6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a7c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a8e:	4814      	ldr	r0, [pc, #80]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001a90:	f00c fdb3 	bl	800e5fa <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a9a:	f001 f9af 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001aac:	f00d fb2e 	bl	800f10c <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001ab6:	f001 f9a1 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <MX_TIM3_Init+0x98>)
 8001ac8:	f00e f876 	bl	800fbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ad2:	f001 f993 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	240005a0 	.word	0x240005a0
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <MX_TIM4_Init+0x98>)
 8001b0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b0e:	2263      	movs	r2, #99	; 0x63
 8001b10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b1a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b2c:	4813      	ldr	r0, [pc, #76]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b2e:	f00c fd64 	bl	800e5fa <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b38:	f001 f960 	bl	8002dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b4a:	f00d fadf 	bl	800f10c <HAL_TIM_ConfigClockSource>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b54:	f001 f952 	bl	8002dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b66:	f00e f827 	bl	800fbb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f001 f944 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	240005ec 	.word	0x240005ec
 8001b80:	40000800 	.word	0x40000800

08001b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <MX_USART1_UART_Init+0xcc>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001b90:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bcc:	481f      	ldr	r0, [pc, #124]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bce:	f00e f91d 	bl	800fe0c <HAL_UART_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bd8:	f001 f910 	bl	8002dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	481b      	ldr	r0, [pc, #108]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001be0:	f010 ffbd 	bl	8012b5e <HAL_UARTEx_SetTxFifoThreshold>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bea:	f001 f907 	bl	8002dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4816      	ldr	r0, [pc, #88]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001bf2:	f010 fff2 	bl	8012bda <HAL_UARTEx_SetRxFifoThreshold>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bfc:	f001 f8fe 	bl	8002dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c00:	4812      	ldr	r0, [pc, #72]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c02:	f010 ff73 	bl	8012aec <HAL_UARTEx_DisableFifoMode>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c0c:	f001 f8f6 	bl	8002dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c16:	f010 ffe0 	bl	8012bda <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c1a:	480c      	ldr	r0, [pc, #48]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c1c:	f010 ff2b 	bl	8012a76 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c20:	480a      	ldr	r0, [pc, #40]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c22:	f010 fef5 	bl	8012a10 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c34:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <MX_USART1_UART_Init+0xc8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c44:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24000638 	.word	0x24000638
 8001c50:	40011000 	.word	0x40011000

08001c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_DMA_Init+0x6c>)
 8001c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <MX_DMA_Init+0x6c>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_DMA_Init+0x6c>)
 8001c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	200b      	movs	r0, #11
 8001c7e:	f003 fd49 	bl	8005714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c82:	200b      	movs	r0, #11
 8001c84:	f003 fd60 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2105      	movs	r1, #5
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	f003 fd41 	bl	8005714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c92:	200c      	movs	r0, #12
 8001c94:	f003 fd58 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	200d      	movs	r0, #13
 8001c9e:	f003 fd39 	bl	8005714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ca2:	200d      	movs	r0, #13
 8001ca4:	f003 fd50 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	2010      	movs	r0, #16
 8001cae:	f003 fd31 	bl	8005714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	f003 fd48 	bl	8005748 <HAL_NVIC_EnableIRQ>

}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58024400 	.word	0x58024400

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	4a32      	ldr	r2, [pc, #200]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf8:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfe:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_GPIO_Init+0xe8>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d58:	4815      	ldr	r0, [pc, #84]	; (8001db0 <MX_GPIO_Init+0xec>)
 8001d5a:	f007 f919 	bl	8008f90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2164      	movs	r1, #100	; 0x64
 8001d62:	4814      	ldr	r0, [pc, #80]	; (8001db4 <MX_GPIO_Init+0xf0>)
 8001d64:	f007 f914 	bl	8008f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d68:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <MX_GPIO_Init+0xec>)
 8001d82:	f006 ff3d 	bl	8008c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d86:	2364      	movs	r3, #100	; 0x64
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_GPIO_Init+0xf0>)
 8001d9e:	f006 ff2f 	bl	8008c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	58024400 	.word	0x58024400
 8001db0:	58020800 	.word	0x58020800
 8001db4:	58020400 	.word	0x58020400

08001db8 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	b299      	uxth	r1, r3
 8001dca:	f107 0208 	add.w	r2, r7, #8
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <poll_i2c_sensor+0x7c>)
 8001dd8:	f007 f990 	bl	80090fc <HAL_I2C_Master_Transmit>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001de6:	4814      	ldr	r0, [pc, #80]	; (8001e38 <poll_i2c_sensor+0x80>)
 8001de8:	f014 fe86 	bl	8016af8 <puts>
 8001dec:	e01c      	b.n	8001e28 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	b299      	uxth	r1, r3
 8001df2:	f107 0208 	add.w	r2, r7, #8
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	480d      	ldr	r0, [pc, #52]	; (8001e34 <poll_i2c_sensor+0x7c>)
 8001e00:	f007 fa94 	bl	800932c <HAL_I2C_Master_Receive>
 8001e04:	4603      	mov	r3, r0
 8001e06:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e08:	7b7b      	ldrb	r3, [r7, #13]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e0e:	480b      	ldr	r0, [pc, #44]	; (8001e3c <poll_i2c_sensor+0x84>)
 8001e10:	f014 fe72 	bl	8016af8 <puts>
 8001e14:	e008      	b.n	8001e28 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e16:	7a3b      	ldrb	r3, [r7, #8]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e20:	7a7a      	ldrb	r2, [r7, #9]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	10db      	asrs	r3, r3, #3
 8001e26:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	24000380 	.word	0x24000380
 8001e38:	080174b8 	.word	0x080174b8
 8001e3c:	080174c8 	.word	0x080174c8

08001e40 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e48:	f107 010c 	add.w	r1, r7, #12
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2201      	movs	r2, #1
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <receive_pmt_spi+0x44>)
 8001e52:	f00c f8a5 	bl	800dfa0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e5a:	7b7b      	ldrb	r3, [r7, #13]
 8001e5c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <receive_pmt_spi+0x44>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <receive_pmt_spi+0x44>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e6c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7bba      	ldrb	r2, [r7, #14]
 8001e72:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3301      	adds	r3, #1
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	701a      	strb	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	240003f8 	.word	0x240003f8

08001e88 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e90:	f107 010c 	add.w	r1, r7, #12
 8001e94:	2364      	movs	r3, #100	; 0x64
 8001e96:	2201      	movs	r2, #1
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <receive_erpa_spi+0x44>)
 8001e9a:	f00c f881 	bl	800dfa0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <receive_erpa_spi+0x44>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <receive_erpa_spi+0x44>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7bba      	ldrb	r2, [r7, #14]
 8001eba:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	701a      	strb	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	24000480 	.word	0x24000480

08001ed0 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <receive_erpa_adc+0x30>)
 8001eda:	885b      	ldrh	r3, [r3, #2]
 8001edc:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <receive_erpa_adc+0x30>)
 8001ee0:	895b      	ldrh	r3, [r3, #10]
 8001ee2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	89fa      	ldrh	r2, [r7, #14]
 8001ee8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3302      	adds	r3, #2
 8001eee:	89ba      	ldrh	r2, [r7, #12]
 8001ef0:	801a      	strh	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	24000ca0 	.word	0x24000ca0

08001f04 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f0c:	2390      	movs	r3, #144	; 0x90
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff52 	bl	8001db8 <poll_i2c_sensor>
 8001f14:	4603      	mov	r3, r0
 8001f16:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f18:	2394      	movs	r3, #148	; 0x94
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff4c 	bl	8001db8 <poll_i2c_sensor>
 8001f20:	4603      	mov	r3, r0
 8001f22:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f24:	2392      	movs	r3, #146	; 0x92
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff46 	bl	8001db8 <poll_i2c_sensor>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f30:	2396      	movs	r3, #150	; 0x96
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff40 	bl	8001db8 <poll_i2c_sensor>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	89fa      	ldrh	r2, [r7, #14]
 8001f40:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3302      	adds	r3, #2
 8001f46:	89ba      	ldrh	r2, [r7, #12]
 8001f48:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	897a      	ldrh	r2, [r7, #10]
 8001f50:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3306      	adds	r3, #6
 8001f56:	893a      	ldrh	r2, [r7, #8]
 8001f58:	801a      	strh	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f6e:	8a9b      	ldrh	r3, [r3, #20]
 8001f70:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f74:	8a1b      	ldrh	r3, [r3, #16]
 8001f76:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f7a:	899b      	ldrh	r3, [r3, #12]
 8001f7c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f80:	8a5b      	ldrh	r3, [r3, #18]
 8001f82:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f8c:	88db      	ldrh	r3, [r3, #6]
 8001f8e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f92:	89db      	ldrh	r3, [r3, #14]
 8001f94:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f98:	891b      	ldrh	r3, [r3, #8]
 8001f9a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <receive_hk_adc1+0x90>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8bfa      	ldrh	r2, [r7, #30]
 8001fa6:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3302      	adds	r3, #2
 8001fac:	8bba      	ldrh	r2, [r7, #28]
 8001fae:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	8b7a      	ldrh	r2, [r7, #26]
 8001fb6:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3306      	adds	r3, #6
 8001fbc:	8b3a      	ldrh	r2, [r7, #24]
 8001fbe:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	8afa      	ldrh	r2, [r7, #22]
 8001fc6:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	330a      	adds	r3, #10
 8001fcc:	8aba      	ldrh	r2, [r7, #20]
 8001fce:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	8a7a      	ldrh	r2, [r7, #18]
 8001fd6:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	330e      	adds	r3, #14
 8001fdc:	8a3a      	ldrh	r2, [r7, #16]
 8001fde:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	89fa      	ldrh	r2, [r7, #14]
 8001fe6:	801a      	strh	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3724      	adds	r7, #36	; 0x24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	24000ca0 	.word	0x24000ca0

08001ff8 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <receive_hk_adc3+0x4c>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <receive_hk_adc3+0x4c>)
 8002008:	885b      	ldrh	r3, [r3, #2]
 800200a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <receive_hk_adc3+0x4c>)
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <receive_hk_adc3+0x4c>)
 8002014:	88db      	ldrh	r3, [r3, #6]
 8002016:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	89fa      	ldrh	r2, [r7, #14]
 800201c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3302      	adds	r3, #2
 8002022:	89ba      	ldrh	r2, [r7, #12]
 8002024:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	897a      	ldrh	r2, [r7, #10]
 800202c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3306      	adds	r3, #6
 8002032:	893a      	ldrh	r2, [r7, #8]
 8002034:	801a      	strh	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	24000cc0 	.word	0x24000cc0

08002048 <getCurrentStep>:

// *********************************************************************************************************** HELPER FUNCTIONS

uint8_t getCurrentStep(){
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
	int dacValue;

	dacValue = DAC1->DHR12R1;
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <getCurrentStep+0xc0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	607b      	str	r3, [r7, #4]

	switch (dacValue) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f640 72ff 	movw	r2, #4095	; 0xfff
 800205a:	4293      	cmp	r3, r2
 800205c:	d04a      	beq.n	80020f4 <getCurrentStep+0xac>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002064:	da48      	bge.n	80020f8 <getCurrentStep+0xb0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f640 628b 	movw	r2, #3723	; 0xe8b
 800206c:	4293      	cmp	r3, r2
 800206e:	d03f      	beq.n	80020f0 <getCurrentStep+0xa8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002076:	4293      	cmp	r3, r2
 8002078:	dc3e      	bgt.n	80020f8 <getCurrentStep+0xb0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002080:	4293      	cmp	r3, r2
 8002082:	d033      	beq.n	80020ec <getCurrentStep+0xa4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800208a:	da35      	bge.n	80020f8 <getCurrentStep+0xb0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002092:	4293      	cmp	r3, r2
 8002094:	d028      	beq.n	80020e8 <getCurrentStep+0xa0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800209c:	4293      	cmp	r3, r2
 800209e:	dc2b      	bgt.n	80020f8 <getCurrentStep+0xb0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f240 7245 	movw	r2, #1861	; 0x745
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01c      	beq.n	80020e4 <getCurrentStep+0x9c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f240 7245 	movw	r2, #1861	; 0x745
 80020b0:	4293      	cmp	r3, r2
 80020b2:	dc21      	bgt.n	80020f8 <getCurrentStep+0xb0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d010      	beq.n	80020e0 <getCurrentStep+0x98>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80020c4:	4293      	cmp	r3, r2
 80020c6:	dc17      	bgt.n	80020f8 <getCurrentStep+0xb0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <getCurrentStep+0x90>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80020d4:	d002      	beq.n	80020dc <getCurrentStep+0x94>
 80020d6:	e00f      	b.n	80020f8 <getCurrentStep+0xb0>
	case 0:
		return 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	e00e      	b.n	80020fa <getCurrentStep+0xb2>
	case 620:
		return 1;
 80020dc:	2301      	movs	r3, #1
 80020de:	e00c      	b.n	80020fa <getCurrentStep+0xb2>
	case 1241:
		return 2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	e00a      	b.n	80020fa <getCurrentStep+0xb2>
	case 1861:
		return 3;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e008      	b.n	80020fa <getCurrentStep+0xb2>
	case 2482:
		return 4;
 80020e8:	2304      	movs	r3, #4
 80020ea:	e006      	b.n	80020fa <getCurrentStep+0xb2>
	case 3103:
		return 5;
 80020ec:	2305      	movs	r3, #5
 80020ee:	e004      	b.n	80020fa <getCurrentStep+0xb2>
	case 3723:
		return 6;
 80020f0:	2306      	movs	r3, #6
 80020f2:	e002      	b.n	80020fa <getCurrentStep+0xb2>
	case 4095:
		return 7;
 80020f4:	2307      	movs	r3, #7
 80020f6:	e000      	b.n	80020fa <getCurrentStep+0xb2>
	default:
		return -1;
 80020f8:	23ff      	movs	r3, #255	; 0xff
	}
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40007400 	.word	0x40007400

0800210c <enterStop>:

void enterStop(){
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

	//flushMessageQueue();
	sendACK();
 8002110:	f000 f830 	bl	8002174 <sendACK>

	vTaskSuspendAll();
 8002114:	f012 fe28 	bl	8014d68 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002118:	2101      	movs	r1, #1
 800211a:	2001      	movs	r0, #1
 800211c:	f007 fd5e 	bl	8009bdc <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 8002120:	f012 fe30 	bl	8014d84 <xTaskResumeAll>
	SystemClock_Config();
 8002124:	f7fe ff88 	bl	8001038 <SystemClock_Config>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <sync>:
	if (status != HAL_OK) {
		Error_Handler();
	}
}

void sync() {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
	// 1. Send acknowledgement (0xFF) (This tells OBC/GUI that we have woken up)
	// 2. Wait to receive RTC generated timestamp from OBC/GUI
	// 3. Calibrate our RTC from received timestamp
	// 4. Send acknowledgement (0xFF) (This tells OBC/GUI that we have calibrated our RTC, and are now in run mode)
	sendACK();
 8002132:	f000 f81f 	bl	8002174 <sendACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <sync+0x40>)
 8002138:	f00e f8da 	bl	80102f0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800213c:	2364      	movs	r3, #100	; 0x64
 800213e:	2209      	movs	r2, #9
 8002140:	490b      	ldr	r1, [pc, #44]	; (8002170 <sync+0x44>)
 8002142:	480a      	ldr	r0, [pc, #40]	; (800216c <sync+0x40>)
 8002144:	f00d ff40 	bl	800ffc8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <sync+0x44>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2bff      	cmp	r3, #255	; 0xff
 8002152:	d1f3      	bne.n	800213c <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER);
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002154:	2201      	movs	r2, #1
 8002156:	4906      	ldr	r1, [pc, #24]	; (8002170 <sync+0x44>)
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <sync+0x40>)
 800215a:	f00d fffd 	bl	8010158 <HAL_UART_Receive_IT>

	sendACK();
 800215e:	f000 f809 	bl	8002174 <sendACK>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	24000638 	.word	0x24000638
 8002170:	24000c5c 	.word	0x24000c5c

08002174 <sendACK>:


void sendACK() {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <sendACK+0x1c>)
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800217e:	2364      	movs	r3, #100	; 0x64
 8002180:	2201      	movs	r2, #1
 8002182:	4903      	ldr	r1, [pc, #12]	; (8002190 <sendACK+0x1c>)
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <sendACK+0x20>)
 8002186:	f00d fe91 	bl	800feac <HAL_UART_Transmit>
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	24000cc8 	.word	0x24000cc8
 8002194:	24000638 	.word	0x24000638

08002198 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_UART_TxCpltCallback+0x1c>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	24000000 	.word	0x24000000

080021b8 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f014 fb21 	bl	8016810 <malloc>
 80021ce:	4603      	mov	r3, r0
 80021d0:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	4618      	mov	r0, r3
 80021da:	f014 fb29 	bl	8016830 <memcpy>
	packet.size = size;
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	82bb      	strh	r3, [r7, #20]
	return packet;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002200:	2100      	movs	r1, #0
 8002202:	481d      	ldr	r0, [pc, #116]	; (8002278 <system_setup+0x7c>)
 8002204:	f00c fac8 	bl	800e798 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800220c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002212:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800221a:	4818      	ldr	r0, [pc, #96]	; (800227c <system_setup+0x80>)
 800221c:	f003 f880 	bl	8005320 <HAL_ADCEx_Calibration_Start>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002226:	f000 fde9 	bl	8002dfc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800222a:	220b      	movs	r2, #11
 800222c:	4914      	ldr	r1, [pc, #80]	; (8002280 <system_setup+0x84>)
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <system_setup+0x80>)
 8002230:	f002 f954 	bl	80044dc <HAL_ADC_Start_DMA>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800223a:	f000 fddf 	bl	8002dfc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800223e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002246:	480f      	ldr	r0, [pc, #60]	; (8002284 <system_setup+0x88>)
 8002248:	f003 f86a 	bl	8005320 <HAL_ADCEx_Calibration_Start>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002252:	f000 fdd3 	bl	8002dfc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002256:	2204      	movs	r2, #4
 8002258:	490b      	ldr	r1, [pc, #44]	; (8002288 <system_setup+0x8c>)
 800225a:	480a      	ldr	r0, [pc, #40]	; (8002284 <system_setup+0x88>)
 800225c:	f002 f93e 	bl	80044dc <HAL_ADC_Start_DMA>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002266:	f000 fdc9 	bl	8002dfc <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800226a:	2201      	movs	r2, #1
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <system_setup+0x90>)
 800226e:	4808      	ldr	r0, [pc, #32]	; (8002290 <system_setup+0x94>)
 8002270:	f00d ff72 	bl	8010158 <HAL_UART_Receive_IT>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	240005ec 	.word	0x240005ec
 800227c:	2400013c 	.word	0x2400013c
 8002280:	24000ca0 	.word	0x24000ca0
 8002284:	240001a0 	.word	0x240001a0
 8002288:	24000cc0 	.word	0x24000cc0
 800228c:	24000c5c 	.word	0x24000c5c
 8002290:	24000638 	.word	0x24000638

08002294 <getUptime>:

void getUptime(uint8_t *buffer) {
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
	uint32_t ms = UptimeMillis;
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <getUptime+0x88>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <getUptime+0x8c>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	613b      	str	r3, [r7, #16]

	// Did UptimeMillis rollover while reading SysTick->VAL?
	if (ms != UptimeMillis) {
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <getUptime+0x88>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d005      	beq.n	80022c2 <getUptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = UptimeMillis;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <getUptime+0x88>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <getUptime+0x8c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022c8:	fb03 f202 	mul.w	r2, r3, r2
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <getUptime+0x8c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4914      	ldr	r1, [pc, #80]	; (8002324 <getUptime+0x90>)
 80022d4:	fba1 1303 	umull	r1, r3, r1, r3
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	6939      	ldr	r1, [r7, #16]
 80022dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0e1b      	lsrs	r3, r3, #24
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0c1a      	lsrs	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0a1a      	lsrs	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3302      	adds	r3, #2
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3303      	adds	r3, #3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	24000c38 	.word	0x24000c38
 8002320:	e000e010 	.word	0xe000e010
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	2200      	movs	r2, #0
 8002336:	4619      	mov	r1, r3
 8002338:	4821      	ldr	r0, [pc, #132]	; (80023c0 <getTimestamp+0x98>)
 800233a:	f00b fb0b 	bl	800d954 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	481e      	ldr	r0, [pc, #120]	; (80023c0 <getTimestamp+0x98>)
 8002348:	f00b fbe8 	bl	800db1c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2264      	movs	r2, #100	; 0x64
 8002350:	fb03 f202 	mul.w	r2, r3, r2
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <getTimestamp+0x9c>)
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3301      	adds	r3, #1
 8002364:	7b7a      	ldrb	r2, [r7, #13]
 8002366:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3302      	adds	r3, #2
 800236c:	7bba      	ldrb	r2, [r7, #14]
 800236e:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3303      	adds	r3, #3
 8002374:	7c3a      	ldrb	r2, [r7, #16]
 8002376:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	7c7a      	ldrb	r2, [r7, #17]
 800237e:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3305      	adds	r3, #5
 8002384:	7cba      	ldrb	r2, [r7, #18]
 8002386:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	0e1a      	lsrs	r2, r3, #24
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3306      	adds	r3, #6
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	0c1a      	lsrs	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3307      	adds	r3, #7
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	0a1a      	lsrs	r2, r3, #8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3308      	adds	r3, #8
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3309      	adds	r3, #9
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	240003d4 	.word	0x240003d4
 80023c4:	000f4240 	.word	0x000f4240

080023c8 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80023ce:	bf00      	nop
 80023d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d4:	4836      	ldr	r0, [pc, #216]	; (80024b0 <sample_pmt+0xe8>)
 80023d6:	f006 fdc3 	bl	8008f60 <HAL_GPIO_ReadPin>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f7      	bne.n	80023d0 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80023e0:	200a      	movs	r0, #10
 80023e2:	f014 fa15 	bl	8016810 <malloc>
 80023e6:	4603      	mov	r3, r0
 80023e8:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80023ea:	2002      	movs	r0, #2
 80023ec:	f014 fa10 	bl	8016810 <malloc>
 80023f0:	4603      	mov	r3, r0
 80023f2:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80023f4:	2004      	movs	r0, #4
 80023f6:	f014 fa0b 	bl	8016810 <malloc>
 80023fa:	4603      	mov	r3, r0
 80023fc:	60fb      	str	r3, [r7, #12]

	getUptime(uptime);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff ff48 	bl	8002294 <getUptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002404:	6938      	ldr	r0, [r7, #16]
 8002406:	f7ff fd1b 	bl	8001e40 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	22bb      	movs	r2, #187	; 0xbb
 800240e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	22bb      	movs	r2, #187	; 0xbb
 8002416:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <sample_pmt+0xec>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	b29a      	uxth	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3302      	adds	r3, #2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <sample_pmt+0xec>)
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3303      	adds	r3, #3
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3304      	adds	r3, #4
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3305      	adds	r3, #5
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	7852      	ldrb	r2, [r2, #1]
 8002446:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3306      	adds	r3, #6
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3307      	adds	r3, #7
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	7852      	ldrb	r2, [r2, #1]
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3308      	adds	r3, #8
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	7892      	ldrb	r2, [r2, #2]
 8002464:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3309      	adds	r3, #9
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	78d2      	ldrb	r2, [r2, #3]
 800246e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	220a      	movs	r2, #10
 8002474:	6979      	ldr	r1, [r7, #20]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fe9e 	bl	80021b8 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <sample_pmt+0xf0>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	1d39      	adds	r1, r7, #4
 8002482:	2300      	movs	r3, #0
 8002484:	2200      	movs	r2, #0
 8002486:	f010 ff61 	bl	801334c <osMessageQueuePut>
	available_msgs++;
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <sample_pmt+0xf4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <sample_pmt+0xf4>)
 8002492:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002494:	6978      	ldr	r0, [r7, #20]
 8002496:	f014 f9c3 	bl	8016820 <free>
	free(pmt_spi);
 800249a:	6938      	ldr	r0, [r7, #16]
 800249c:	f014 f9c0 	bl	8016820 <free>
	free(uptime);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f014 f9bd 	bl	8016820 <free>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	58020000 	.word	0x58020000
 80024b4:	24000c4c 	.word	0x24000c4c
 80024b8:	24000c3c 	.word	0x24000c3c
 80024bc:	24000c48 	.word	0x24000c48

080024c0 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80024c6:	bf00      	nop
 80024c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024cc:	484f      	ldr	r0, [pc, #316]	; (800260c <sample_erpa+0x14c>)
 80024ce:	f006 fd47 	bl	8008f60 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f7      	bne.n	80024c8 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80024d8:	200f      	movs	r0, #15
 80024da:	f014 f999 	bl	8016810 <malloc>
 80024de:	4603      	mov	r3, r0
 80024e0:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80024e2:	2002      	movs	r0, #2
 80024e4:	f014 f994 	bl	8016810 <malloc>
 80024e8:	4603      	mov	r3, r0
 80024ea:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 80024ec:	2004      	movs	r0, #4
 80024ee:	f014 f98f 	bl	8016810 <malloc>
 80024f2:	4603      	mov	r3, r0
 80024f4:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80024f6:	2004      	movs	r0, #4
 80024f8:	f014 f98a 	bl	8016810 <malloc>
 80024fc:	4603      	mov	r3, r0
 80024fe:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002500:	23ff      	movs	r3, #255	; 0xff
 8002502:	73fb      	strb	r3, [r7, #15]

	getUptime(uptime);
 8002504:	6938      	ldr	r0, [r7, #16]
 8002506:	f7ff fec5 	bl	8002294 <getUptime>
	sweep_step = getCurrentStep();
 800250a:	f7ff fd9d 	bl	8002048 <getCurrentStep>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002512:	69b8      	ldr	r0, [r7, #24]
 8002514:	f7ff fcb8 	bl	8001e88 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7ff fcd9 	bl	8001ed0 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	22aa      	movs	r2, #170	; 0xaa
 8002522:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	22aa      	movs	r2, #170	; 0xaa
 800252a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <sample_erpa+0x150>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	b29a      	uxth	r2, r3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	3302      	adds	r3, #2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <sample_erpa+0x150>)
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3303      	adds	r3, #3
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
	buffer[4] = sweep_step;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3304      	adds	r3, #4
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	701a      	strb	r2, [r3, #0]
	buffer[5] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	b29a      	uxth	r2, r3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	3305      	adds	r3, #5
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
	buffer[6] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	881a      	ldrh	r2, [r3, #0]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	3306      	adds	r3, #6
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3302      	adds	r3, #2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29a      	uxth	r2, r3
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3307      	adds	r3, #7
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
	buffer[8] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3302      	adds	r3, #2
 8002582:	881a      	ldrh	r2, [r3, #0]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3308      	adds	r3, #8
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[0];					// ERPA eADC MSB
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3309      	adds	r3, #9
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	701a      	strb	r2, [r3, #0]
	buffer[10] = erpa_spi[1];					// ERPA eADC LSB
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	330a      	adds	r3, #10
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	7852      	ldrb	r2, [r2, #1]
 800259e:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[0];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	330b      	adds	r3, #11
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[1];
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	330c      	adds	r3, #12
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	7852      	ldrb	r2, [r2, #1]
 80025b2:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[2];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	330d      	adds	r3, #13
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	7892      	ldrb	r2, [r2, #2]
 80025bc:	701a      	strb	r2, [r3, #0]
	buffer[14] = uptime[3];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	330e      	adds	r3, #14
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	78d2      	ldrb	r2, [r2, #3]
 80025c6:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	220f      	movs	r2, #15
 80025cc:	69f9      	ldr	r1, [r7, #28]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fdf2 	bl	80021b8 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <sample_erpa+0x154>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	1d39      	adds	r1, r7, #4
 80025da:	2300      	movs	r3, #0
 80025dc:	2200      	movs	r2, #0
 80025de:	f010 feb5 	bl	801334c <osMessageQueuePut>
	available_msgs++;
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <sample_erpa+0x158>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <sample_erpa+0x158>)
 80025ea:	6013      	str	r3, [r2, #0]
	free(buffer);
 80025ec:	69f8      	ldr	r0, [r7, #28]
 80025ee:	f014 f917 	bl	8016820 <free>
	free(erpa_spi);
 80025f2:	69b8      	ldr	r0, [r7, #24]
 80025f4:	f014 f914 	bl	8016820 <free>
	free(erpa_adc);
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f014 f911 	bl	8016820 <free>
	free(uptime);
 80025fe:	6938      	ldr	r0, [r7, #16]
 8002600:	f014 f90e 	bl	8016820 <free>
}
 8002604:	bf00      	nop
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	58020400 	.word	0x58020400
 8002610:	24000c4e 	.word	0x24000c4e
 8002614:	24000c3c 	.word	0x24000c3c
 8002618:	24000c48 	.word	0x24000c48

0800261c <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002622:	2030      	movs	r0, #48	; 0x30
 8002624:	f014 f8f4 	bl	8016810 <malloc>
 8002628:	4603      	mov	r3, r0
 800262a:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 800262c:	2008      	movs	r0, #8
 800262e:	f014 f8ef 	bl	8016810 <malloc>
 8002632:	4603      	mov	r3, r0
 8002634:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002636:	200a      	movs	r0, #10
 8002638:	f014 f8ea 	bl	8016810 <malloc>
 800263c:	4603      	mov	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fe71 	bl	8002328 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <sample_hk+0x78>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264e:	db25      	blt.n	800269c <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002650:	6938      	ldr	r0, [r7, #16]
 8002652:	f7ff fc57 	bl	8001f04 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <sample_hk+0x7c>)
 8002660:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3302      	adds	r3, #2
 8002666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <sample_hk+0x7c>)
 800266e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	3304      	adds	r3, #4
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	b29a      	uxth	r2, r3
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <sample_hk+0x7c>)
 800267c:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3306      	adds	r3, #6
 8002682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <sample_hk+0x7c>)
 800268a:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <sample_hk+0x78>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e01f      	b.n	80026d4 <sample_hk+0xb8>
 8002694:	24000004 	.word	0x24000004
 8002698:	24000ccc 	.word	0x24000ccc
	} else {
		TEMPERATURE_COUNTER++;
 800269c:	4b9f      	ldr	r3, [pc, #636]	; (800291c <sample_hk+0x300>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a9e      	ldr	r2, [pc, #632]	; (800291c <sample_hk+0x300>)
 80026a4:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80026a6:	4b9e      	ldr	r3, [pc, #632]	; (8002920 <sample_hk+0x304>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80026b0:	4b9b      	ldr	r3, [pc, #620]	; (8002920 <sample_hk+0x304>)
 80026b2:	885a      	ldrh	r2, [r3, #2]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	3302      	adds	r3, #2
 80026b8:	b212      	sxth	r2, r2
 80026ba:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80026bc:	4b98      	ldr	r3, [pc, #608]	; (8002920 <sample_hk+0x304>)
 80026be:	889a      	ldrh	r2, [r3, #4]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	3304      	adds	r3, #4
 80026c4:	b212      	sxth	r2, r2
 80026c6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80026c8:	4b95      	ldr	r3, [pc, #596]	; (8002920 <sample_hk+0x304>)
 80026ca:	88da      	ldrh	r2, [r3, #6]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	3306      	adds	r3, #6
 80026d0:	b212      	sxth	r2, r2
 80026d2:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	22cc      	movs	r2, #204	; 0xcc
 80026d8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	22cc      	movs	r2, #204	; 0xcc
 80026e0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80026e2:	4b90      	ldr	r3, [pc, #576]	; (8002924 <sample_hk+0x308>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3302      	adds	r3, #2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80026f2:	4b8c      	ldr	r3, [pc, #560]	; (8002924 <sample_hk+0x308>)
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3303      	adds	r3, #3
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80026fe:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <sample_hk+0x30c>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29a      	uxth	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3304      	adds	r3, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800270e:	4b86      	ldr	r3, [pc, #536]	; (8002928 <sample_hk+0x30c>)
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3305      	adds	r3, #5
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800271a:	4b84      	ldr	r3, [pc, #528]	; (800292c <sample_hk+0x310>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3306      	adds	r3, #6
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800272a:	4b80      	ldr	r3, [pc, #512]	; (800292c <sample_hk+0x310>)
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3307      	adds	r3, #7
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273c:	121a      	asrs	r2, r3, #8
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3308      	adds	r3, #8
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3309      	adds	r3, #9
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	3302      	adds	r3, #2
 8002758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275c:	121a      	asrs	r2, r3, #8
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	330a      	adds	r3, #10
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	3302      	adds	r3, #2
 800276a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	330b      	adds	r3, #11
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	3304      	adds	r3, #4
 800277a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277e:	121a      	asrs	r2, r3, #8
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	330c      	adds	r3, #12
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3304      	adds	r3, #4
 800278c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	330d      	adds	r3, #13
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	3306      	adds	r3, #6
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	121a      	asrs	r2, r3, #8
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	330e      	adds	r3, #14
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3306      	adds	r3, #6
 80027ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	330f      	adds	r3, #15
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80027ba:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <sample_hk+0x314>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3310      	adds	r3, #16
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80027ca:	4b59      	ldr	r3, [pc, #356]	; (8002930 <sample_hk+0x314>)
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3311      	adds	r3, #17
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <sample_hk+0x318>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3312      	adds	r3, #18
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <sample_hk+0x318>)
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3313      	adds	r3, #19
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 80027f2:	4b51      	ldr	r3, [pc, #324]	; (8002938 <sample_hk+0x31c>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3314      	adds	r3, #20
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <sample_hk+0x31c>)
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3315      	adds	r3, #21
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <sample_hk+0x320>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3316      	adds	r3, #22
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <sample_hk+0x320>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3317      	adds	r3, #23
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800282a:	4b45      	ldr	r3, [pc, #276]	; (8002940 <sample_hk+0x324>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3318      	adds	r3, #24
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <sample_hk+0x324>)
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3319      	adds	r3, #25
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002846:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <sample_hk+0x328>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	331a      	adds	r3, #26
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <sample_hk+0x328>)
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	331b      	adds	r3, #27
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <sample_hk+0x32c>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b29a      	uxth	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	331c      	adds	r3, #28
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <sample_hk+0x32c>)
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	331d      	adds	r3, #29
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 800287e:	4b33      	ldr	r3, [pc, #204]	; (800294c <sample_hk+0x330>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	b29a      	uxth	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	331e      	adds	r3, #30
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 800288e:	4b2f      	ldr	r3, [pc, #188]	; (800294c <sample_hk+0x330>)
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	331f      	adds	r3, #31
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <sample_hk+0x334>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3320      	adds	r3, #32
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <sample_hk+0x334>)
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3321      	adds	r3, #33	; 0x21
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <sample_hk+0x338>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b29a      	uxth	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3322      	adds	r3, #34	; 0x22
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <sample_hk+0x338>)
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3323      	adds	r3, #35	; 0x23
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <sample_hk+0x33c>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b29a      	uxth	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3324      	adds	r3, #36	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <sample_hk+0x33c>)
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3325      	adds	r3, #37	; 0x25
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3326      	adds	r3, #38	; 0x26
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3327      	adds	r3, #39	; 0x27
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	7852      	ldrb	r2, [r2, #1]
 8002900:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3328      	adds	r3, #40	; 0x28
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	7892      	ldrb	r2, [r2, #2]
 800290a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3329      	adds	r3, #41	; 0x29
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	78d2      	ldrb	r2, [r2, #3]
 8002914:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	332a      	adds	r3, #42	; 0x2a
 800291a:	e01f      	b.n	800295c <sample_hk+0x340>
 800291c:	24000004 	.word	0x24000004
 8002920:	24000ccc 	.word	0x24000ccc
 8002924:	24000c50 	.word	0x24000c50
 8002928:	24000c1c 	.word	0x24000c1c
 800292c:	24000c1e 	.word	0x24000c1e
 8002930:	24000c20 	.word	0x24000c20
 8002934:	24000c22 	.word	0x24000c22
 8002938:	24000c24 	.word	0x24000c24
 800293c:	24000c26 	.word	0x24000c26
 8002940:	24000c28 	.word	0x24000c28
 8002944:	24000c2a 	.word	0x24000c2a
 8002948:	24000c2c 	.word	0x24000c2c
 800294c:	24000c2e 	.word	0x24000c2e
 8002950:	24000c30 	.word	0x24000c30
 8002954:	24000c32 	.word	0x24000c32
 8002958:	24000c34 	.word	0x24000c34
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	7912      	ldrb	r2, [r2, #4]
 8002960:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	332b      	adds	r3, #43	; 0x2b
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	7952      	ldrb	r2, [r2, #5]
 800296a:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	332c      	adds	r3, #44	; 0x2c
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	7992      	ldrb	r2, [r2, #6]
 8002974:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	332d      	adds	r3, #45	; 0x2d
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	79d2      	ldrb	r2, [r2, #7]
 800297e:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	332e      	adds	r3, #46	; 0x2e
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	7a12      	ldrb	r2, [r2, #8]
 8002988:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	332f      	adds	r3, #47	; 0x2f
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	7a52      	ldrb	r2, [r2, #9]
 8002992:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2230      	movs	r2, #48	; 0x30
 8002998:	6979      	ldr	r1, [r7, #20]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fc0c 	bl	80021b8 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <sample_hk+0x3b8>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	1d39      	adds	r1, r7, #4
 80029a6:	2300      	movs	r3, #0
 80029a8:	2200      	movs	r2, #0
 80029aa:	f010 fccf 	bl	801334c <osMessageQueuePut>
	available_msgs++;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <sample_hk+0x3bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <sample_hk+0x3bc>)
 80029b6:	6013      	str	r3, [r2, #0]

	free(buffer);
 80029b8:	6978      	ldr	r0, [r7, #20]
 80029ba:	f013 ff31 	bl	8016820 <free>
	free(hk_i2c);
 80029be:	6938      	ldr	r0, [r7, #16]
 80029c0:	f013 ff2e 	bl	8016820 <free>
	free(timestamp);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f013 ff2b 	bl	8016820 <free>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	24000c3c 	.word	0x24000c3c
 80029d8:	24000c48 	.word	0x24000c48

080029dc <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <PMT_init+0x38>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ec:	2200      	movs	r2, #0
 80029ee:	2101      	movs	r1, #1
 80029f0:	f010 fbd3 	bl	801319a <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <PMT_init+0x3c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <PMT_init+0x30>
			sample_pmt();
 80029fc:	f7ff fce4 	bl	80023c8 <sample_pmt>
			pmt_seq++;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <PMT_init+0x40>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <PMT_init+0x40>)
 8002a0a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002a0c:	f010 fa92 	bl	8012f34 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002a10:	e7e8      	b.n	80029e4 <PMT_init+0x8>
 8002a12:	bf00      	nop
 8002a14:	24000c58 	.word	0x24000c58
 8002a18:	24000c52 	.word	0x24000c52
 8002a1c:	24000c4c 	.word	0x24000c4c

08002a20 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <ERPA_init+0x38>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a30:	2200      	movs	r2, #0
 8002a32:	2102      	movs	r1, #2
 8002a34:	f010 fbb1 	bl	801319a <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <ERPA_init+0x3c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <ERPA_init+0x30>
			sample_erpa();
 8002a40:	f7ff fd3e 	bl	80024c0 <sample_erpa>
			erpa_seq++;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <ERPA_init+0x40>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <ERPA_init+0x40>)
 8002a4e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002a50:	f010 fa70 	bl	8012f34 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002a54:	e7e8      	b.n	8002a28 <ERPA_init+0x8>
 8002a56:	bf00      	nop
 8002a58:	24000c58 	.word	0x24000c58
 8002a5c:	24000c53 	.word	0x24000c53
 8002a60:	24000c4e 	.word	0x24000c4e

08002a64 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HK_init+0x38>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a74:	2200      	movs	r2, #0
 8002a76:	2104      	movs	r1, #4
 8002a78:	f010 fb8f 	bl	801319a <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HK_init+0x3c>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HK_init+0x30>
			sample_hk();
 8002a84:	f7ff fdca 	bl	800261c <sample_hk>
			hk_seq++;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HK_init+0x40>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HK_init+0x40>)
 8002a92:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002a94:	f010 fa4e 	bl	8012f34 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002a98:	e7e8      	b.n	8002a6c <HK_init+0x8>
 8002a9a:	bf00      	nop
 8002a9c:	24000c58 	.word	0x24000c58
 8002aa0:	24000c54 	.word	0x24000c54
 8002aa4:	24000c50 	.word	0x24000c50

08002aa8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <GPIO_on_init+0x9c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f010 fa5d 	bl	8012f74 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <GPIO_on_init+0xa0>)
 8002abc:	2104      	movs	r1, #4
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 fa65 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f010 fa75 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <GPIO_on_init+0xa0>)
 8002ace:	2120      	movs	r1, #32
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f006 fa5c 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ad8:	2064      	movs	r0, #100	; 0x64
 8002ada:	f010 fa6c 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <GPIO_on_init+0xa4>)
 8002ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f006 fa52 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	f010 fa62 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <GPIO_on_init+0xa4>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	2201      	movs	r2, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f006 fa49 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002afe:	2064      	movs	r0, #100	; 0x64
 8002b00:	f010 fa59 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <GPIO_on_init+0xa4>)
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 fa40 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b10:	2064      	movs	r0, #100	; 0x64
 8002b12:	f010 fa50 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <GPIO_on_init+0xa4>)
 8002b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f006 fa36 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b24:	2064      	movs	r0, #100	; 0x64
 8002b26:	f010 fa46 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <GPIO_on_init+0xa4>)
 8002b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b30:	2201      	movs	r2, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f006 fa2c 	bl	8008f90 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <GPIO_on_init+0x9c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f010 fa19 	bl	8012f74 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002b42:	e7ba      	b.n	8002aba <GPIO_on_init+0x12>
 8002b44:	24000750 	.word	0x24000750
 8002b48:	58020400 	.word	0x58020400
 8002b4c:	58020800 	.word	0x58020800

08002b50 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <GPIO_off_init+0x9c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f010 fa09 	bl	8012f74 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f006 fa10 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b70:	2064      	movs	r0, #100	; 0x64
 8002b72:	f010 fa20 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f006 fa06 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	f010 fa16 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b8c:	2140      	movs	r1, #64	; 0x40
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 f9fd 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b96:	2064      	movs	r0, #100	; 0x64
 8002b98:	f010 fa0d 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 f9f4 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ba8:	2064      	movs	r0, #100	; 0x64
 8002baa:	f010 fa04 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f006 f9ea 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	f010 f9fa 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <GPIO_off_init+0xa4>)
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f006 f9e1 	bl	8008f90 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	f010 f9f1 	bl	8012fb6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002bd4:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <GPIO_off_init+0xa4>)
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f006 f9d8 	bl	8008f90 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <GPIO_off_init+0x9c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f010 f9c5 	bl	8012f74 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002bea:	e7ba      	b.n	8002b62 <GPIO_off_init+0x12>
 8002bec:	240009b0 	.word	0x240009b0
 8002bf0:	58020800 	.word	0x58020800
 8002bf4:	58020400 	.word	0x58020400

08002bf8 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <UART_TX_init+0xa4>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c10:	2200      	movs	r2, #0
 8002c12:	4923      	ldr	r1, [pc, #140]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c14:	f010 fbfa 	bl	801340c <osMessageQueueGet>
 8002c18:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d120      	bne.n	8002c62 <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c22:	889b      	ldrh	r3, [r3, #4]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2e:	d218      	bcs.n	8002c62 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <UART_TX_init+0xac>)
 8002c34:	4413      	add	r3, r2
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c38:	6811      	ldr	r1, [r2, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c3c:	8892      	ldrh	r2, [r2, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f013 fdf6 	bl	8016830 <memcpy>
					free(msg.array);
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f013 fde9 	bl	8016820 <free>
					total_size += msg.size;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c50:	889b      	ldrh	r3, [r3, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002c60:	d203      	bcs.n	8002c6a <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0cf      	beq.n	8002c08 <UART_TX_init+0x10>
 8002c68:	e000      	b.n	8002c6c <UART_TX_init+0x74>
						break;
 8002c6a:	bf00      	nop

		if (total_size > 0) {
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <UART_TX_init+0xac>)
 8002c7a:	480b      	ldr	r0, [pc, #44]	; (8002ca8 <UART_TX_init+0xb0>)
 8002c7c:	f00d fab8 	bl	80101f0 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002c80:	e001      	b.n	8002c86 <UART_TX_init+0x8e>
				osThreadYield();
 8002c82:	f010 f957 	bl	8012f34 <osThreadYield>
			while (tx_flag == 0) {
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <UART_TX_init+0xb4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f9      	beq.n	8002c82 <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <UART_TX_init+0xb4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002c94:	f010 f94e 	bl	8012f34 <osThreadYield>
		total_size = 0;
 8002c98:	e7b4      	b.n	8002c04 <UART_TX_init+0xc>
 8002c9a:	bf00      	nop
 8002c9c:	24000c3c 	.word	0x24000c3c
 8002ca0:	24000c40 	.word	0x24000c40
 8002ca4:	24000cd4 	.word	0x24000cd4
 8002ca8:	24000638 	.word	0x24000638
 8002cac:	24000000 	.word	0x24000000

08002cb0 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */


	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <Voltage_Monitor_init+0xb4>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	f010 fa69 	bl	801319a <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002cc8:	2012      	movs	r0, #18
 8002cca:	f013 fda1 	bl	8016810 <malloc>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002cd2:	2008      	movs	r0, #8
 8002cd4:	f013 fd9c 	bl	8016810 <malloc>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff f941 	bl	8001f64 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002ce2:	68b8      	ldr	r0, [r7, #8]
 8002ce4:	f7ff f988 	bl	8001ff8 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	885a      	ldrh	r2, [r3, #2]
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <Voltage_Monitor_init+0xb8>)
 8002cee:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <Voltage_Monitor_init+0xbc>)
 8002cf6:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <Voltage_Monitor_init+0xc0>)
 8002cfe:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	885a      	ldrh	r2, [r3, #2]
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <Voltage_Monitor_init+0xc4>)
 8002d06:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	889a      	ldrh	r2, [r3, #4]
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <Voltage_Monitor_init+0xc8>)
 8002d0e:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	88da      	ldrh	r2, [r3, #6]
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <Voltage_Monitor_init+0xcc>)
 8002d16:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	899a      	ldrh	r2, [r3, #12]
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <Voltage_Monitor_init+0xd0>)
 8002d1e:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88da      	ldrh	r2, [r3, #6]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <Voltage_Monitor_init+0xd4>)
 8002d26:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	889a      	ldrh	r2, [r3, #4]
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <Voltage_Monitor_init+0xd8>)
 8002d2e:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	89da      	ldrh	r2, [r3, #14]
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <Voltage_Monitor_init+0xdc>)
 8002d36:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8a1a      	ldrh	r2, [r3, #16]
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <Voltage_Monitor_init+0xe0>)
 8002d3e:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	891a      	ldrh	r2, [r3, #8]
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <Voltage_Monitor_init+0xe4>)
 8002d46:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	895a      	ldrh	r2, [r3, #10]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <Voltage_Monitor_init+0xe8>)
 8002d4e:	801a      	strh	r2, [r3, #0]
//
//		if (!inRange(_n800v, 3018, 3336)) {
//			error_protocol(RAIL_n800v);
//		}

		free(hk_adc1);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f013 fd65 	bl	8016820 <free>
		free(hk_adc3);
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	f013 fd62 	bl	8016820 <free>

		osThreadYield();
 8002d5c:	f010 f8ea 	bl	8012f34 <osThreadYield>
	for (;;) {
 8002d60:	e7aa      	b.n	8002cb8 <Voltage_Monitor_init+0x8>
 8002d62:	bf00      	nop
 8002d64:	24000c58 	.word	0x24000c58
 8002d68:	24000c1c 	.word	0x24000c1c
 8002d6c:	24000c1e 	.word	0x24000c1e
 8002d70:	24000c20 	.word	0x24000c20
 8002d74:	24000c22 	.word	0x24000c22
 8002d78:	24000c24 	.word	0x24000c24
 8002d7c:	24000c26 	.word	0x24000c26
 8002d80:	24000c28 	.word	0x24000c28
 8002d84:	24000c2a 	.word	0x24000c2a
 8002d88:	24000c2c 	.word	0x24000c2c
 8002d8c:	24000c2e 	.word	0x24000c2e
 8002d90:	24000c30 	.word	0x24000c30
 8002d94:	24000c32 	.word	0x24000c32
 8002d98:	24000c34 	.word	0x24000c34

08002d9c <FLAG_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
  /* Infinite loop */
  for(;;)
  {
		int current_flag = osEventFlagsGet(event_flags);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <FLAG_init+0x38>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f010 f9d5 	bl	8013158 <osEventFlagsGet>
 8002dae:	4603      	mov	r3, r0
 8002db0:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0316 	and.w	r3, r3, #22
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <FLAG_init+0x38>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2116      	movs	r1, #22
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f010 f996 	bl	80130f4 <osEventFlagsClear>
			enterStop();
 8002dc8:	f7ff f9a0 	bl	800210c <enterStop>
		}
    osDelay(1);
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f010 f8f2 	bl	8012fb6 <osDelay>
  {
 8002dd2:	e7e7      	b.n	8002da4 <FLAG_init+0x8>
 8002dd4:	24000c58 	.word	0x24000c58

08002dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dea:	f000 ff85 	bl	8003cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40001000 	.word	0x40001000

08002dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e00:	b672      	cpsid	i
}
 8002e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e04:	e7fe      	b.n	8002e04 <Error_Handler+0x8>
	...

08002e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_MspInit+0x38>)
 8002e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_MspInit+0x38>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_MspInit+0x38>)
 8002e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f06f 0001 	mvn.w	r0, #1
 8002e34:	f002 fc6e 	bl	8005714 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	58024400 	.word	0x58024400

08002e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a7b      	ldr	r2, [pc, #492]	; (8003050 <HAL_ADC_MspInit+0x20c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 8091 	bne.w	8002f8a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e68:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002e6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e6e:	4a79      	ldr	r2, [pc, #484]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002e70:	f043 0320 	orr.w	r3, r3, #32
 8002e74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e78:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002e7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e86:	4b73      	ldr	r3, [pc, #460]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	4a71      	ldr	r2, [pc, #452]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e96:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb4:	4b67      	ldr	r3, [pc, #412]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	4a62      	ldr	r2, [pc, #392]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002ee0:	2333      	movs	r3, #51	; 0x33
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4859      	ldr	r0, [pc, #356]	; (8003058 <HAL_ADC_MspInit+0x214>)
 8002ef4:	f005 fe84 	bl	8008c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002ef8:	23ce      	movs	r3, #206	; 0xce
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002efc:	2303      	movs	r3, #3
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4854      	ldr	r0, [pc, #336]	; (800305c <HAL_ADC_MspInit+0x218>)
 8002f0c:	f005 fe78 	bl	8008c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f10:	2303      	movs	r3, #3
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f14:	2303      	movs	r3, #3
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	484f      	ldr	r0, [pc, #316]	; (8003060 <HAL_ADC_MspInit+0x21c>)
 8002f24:	f005 fe6c 	bl	8008c00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002f28:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f2a:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <HAL_ADC_MspInit+0x224>)
 8002f2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f2e:	4b4d      	ldr	r3, [pc, #308]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f30:	2209      	movs	r2, #9
 8002f32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f34:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f50:	4b44      	ldr	r3, [pc, #272]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f58:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f60:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f66:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f6c:	483d      	ldr	r0, [pc, #244]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f6e:	f002 ffff 	bl	8005f70 <HAL_DMA_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002f78:	f7ff ff40 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f80:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <HAL_ADC_MspInit+0x220>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f88:	e05e      	b.n	8003048 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a37      	ldr	r2, [pc, #220]	; (800306c <HAL_ADC_MspInit+0x228>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d159      	bne.n	8003048 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9a:	4a2e      	ldr	r2, [pc, #184]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb2:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_ADC_MspInit+0x210>)
 8002fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002fd0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002fd4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002fd8:	f000 feba 	bl	8003d50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002fdc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002fe0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002fe4:	f000 feb4 	bl	8003d50 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_ADC_MspInit+0x230>)
 8002fec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8002ff0:	2273      	movs	r2, #115	; 0x73
 8002ff2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8003002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003006:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 800300a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800300e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8003012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003016:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 800301a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8003022:	2200      	movs	r2, #0
 8003024:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800302c:	4810      	ldr	r0, [pc, #64]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 800302e:	f002 ff9f 	bl	8005f70 <HAL_DMA_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003038:	f7ff fee0 	bl	8002dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8003040:	64da      	str	r2, [r3, #76]	; 0x4c
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <HAL_ADC_MspInit+0x22c>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003048:	bf00      	nop
 800304a:	3738      	adds	r7, #56	; 0x38
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40022000 	.word	0x40022000
 8003054:	58024400 	.word	0x58024400
 8003058:	58020800 	.word	0x58020800
 800305c:	58020000 	.word	0x58020000
 8003060:	58020400 	.word	0x58020400
 8003064:	24000204 	.word	0x24000204
 8003068:	40020010 	.word	0x40020010
 800306c:	58026000 	.word	0x58026000
 8003070:	2400027c 	.word	0x2400027c
 8003074:	40020028 	.word	0x40020028

08003078 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a34      	ldr	r2, [pc, #208]	; (8003168 <HAL_DAC_MspInit+0xf0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d161      	bne.n	800315e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_DAC_MspInit+0xf4>)
 800309c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a0:	4a32      	ldr	r2, [pc, #200]	; (800316c <HAL_DAC_MspInit+0xf4>)
 80030a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_DAC_MspInit+0xf4>)
 80030ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_DAC_MspInit+0xf4>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030be:	4a2b      	ldr	r2, [pc, #172]	; (800316c <HAL_DAC_MspInit+0xf4>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_DAC_MspInit+0xf4>)
 80030ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030d6:	2310      	movs	r3, #16
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030da:	2303      	movs	r3, #3
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4821      	ldr	r0, [pc, #132]	; (8003170 <HAL_DAC_MspInit+0xf8>)
 80030ea:	f005 fd89 	bl	8008c00 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 80030f0:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_DAC_MspInit+0x100>)
 80030f2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 80030f6:	2243      	movs	r2, #67	; 0x43
 80030f8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003114:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003124:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003132:	4810      	ldr	r0, [pc, #64]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003134:	f002 ff1c 	bl	8005f70 <HAL_DMA_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800313e:	f7ff fe5d 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_DAC_MspInit+0xfc>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	2036      	movs	r0, #54	; 0x36
 8003154:	f002 fade 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003158:	2036      	movs	r0, #54	; 0x36
 800315a:	f002 faf5 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800315e:	bf00      	nop
 8003160:	3728      	adds	r7, #40	; 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40007400 	.word	0x40007400
 800316c:	58024400 	.word	0x58024400
 8003170:	58020000 	.word	0x58020000
 8003174:	24000308 	.word	0x24000308
 8003178:	40020088 	.word	0x40020088

0800317c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b0ba      	sub	sp, #232	; 0xe8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	22c0      	movs	r2, #192	; 0xc0
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f013 fb55 	bl	801684c <memset>
  if(hi2c->Instance==I2C1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a27      	ldr	r2, [pc, #156]	; (8003244 <HAL_I2C_MspInit+0xc8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d146      	bne.n	800323a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031ac:	f04f 0208 	mov.w	r2, #8
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	4618      	mov	r0, r3
 80031c4:	f007 fda8 	bl	800ad18 <HAL_RCCEx_PeriphCLKConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80031ce:	f7ff fe15 	bl	8002dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_I2C_MspInit+0xcc>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <HAL_I2C_MspInit+0xcc>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_I2C_MspInit+0xcc>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f8:	2312      	movs	r3, #18
 80031fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800320a:	2304      	movs	r3, #4
 800320c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003214:	4619      	mov	r1, r3
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <HAL_I2C_MspInit+0xd0>)
 8003218:	f005 fcf2 	bl	8008c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_I2C_MspInit+0xcc>)
 800321e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_I2C_MspInit+0xcc>)
 8003224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003228:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_I2C_MspInit+0xcc>)
 800322e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800323a:	bf00      	nop
 800323c:	37e8      	adds	r7, #232	; 0xe8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40005400 	.word	0x40005400
 8003248:	58024400 	.word	0x58024400
 800324c:	58020400 	.word	0x58020400

08003250 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b0b2      	sub	sp, #200	; 0xc8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003258:	f107 0308 	add.w	r3, r7, #8
 800325c:	22c0      	movs	r2, #192	; 0xc0
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f013 faf3 	bl	801684c <memset>
  if(hrtc->Instance==RTC)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_RTC_MspInit+0x5c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d118      	bne.n	80032a2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003270:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_RTC_MspInit+0x60>)
 800327e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f007 fd46 	bl	800ad18 <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003292:	f7ff fdb3 	bl	8002dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_RTC_MspInit+0x64>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_RTC_MspInit+0x64>)
 800329c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032a2:	bf00      	nop
 80032a4:	37c8      	adds	r7, #200	; 0xc8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	58004000 	.word	0x58004000
 80032b0:	00019300 	.word	0x00019300
 80032b4:	58024400 	.word	0x58024400

080032b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b0bc      	sub	sp, #240	; 0xf0
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d0:	f107 0318 	add.w	r3, r7, #24
 80032d4:	22c0      	movs	r2, #192	; 0xc0
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f013 fab7 	bl	801684c <memset>
  if(hspi->Instance==SPI1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4c      	ldr	r2, [pc, #304]	; (8003414 <HAL_SPI_MspInit+0x15c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d145      	bne.n	8003374 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f8:	f107 0318 	add.w	r3, r7, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f007 fd0b 	bl	800ad18 <HAL_RCCEx_PeriphCLKConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003308:	f7ff fd78 	bl	8002dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_SPI_MspInit+0x160>)
 800330e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003312:	4a41      	ldr	r2, [pc, #260]	; (8003418 <HAL_SPI_MspInit+0x160>)
 8003314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003318:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_SPI_MspInit+0x160>)
 800331e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_SPI_MspInit+0x160>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	4a39      	ldr	r2, [pc, #228]	; (8003418 <HAL_SPI_MspInit+0x160>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_SPI_MspInit+0x160>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003348:	2318      	movs	r3, #24
 800334a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003360:	2305      	movs	r3, #5
 8003362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003366:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800336a:	4619      	mov	r1, r3
 800336c:	482b      	ldr	r0, [pc, #172]	; (800341c <HAL_SPI_MspInit+0x164>)
 800336e:	f005 fc47 	bl	8008c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003372:	e04a      	b.n	800340a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <HAL_SPI_MspInit+0x168>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d145      	bne.n	800340a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800337e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800338a:	2300      	movs	r3, #0
 800338c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800338e:	f107 0318 	add.w	r3, r7, #24
 8003392:	4618      	mov	r0, r3
 8003394:	f007 fcc0 	bl	800ad18 <HAL_RCCEx_PeriphCLKConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800339e:	f7ff fd2d 	bl	8002dfc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_SPI_MspInit+0x160>)
 80033a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_SPI_MspInit+0x160>)
 80033aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_SPI_MspInit+0x160>)
 80033b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_SPI_MspInit+0x160>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c6:	4a14      	ldr	r2, [pc, #80]	; (8003418 <HAL_SPI_MspInit+0x160>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_SPI_MspInit+0x160>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80033de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80033e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033f8:	2305      	movs	r3, #5
 80033fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003402:	4619      	mov	r1, r3
 8003404:	4805      	ldr	r0, [pc, #20]	; (800341c <HAL_SPI_MspInit+0x164>)
 8003406:	f005 fbfb 	bl	8008c00 <HAL_GPIO_Init>
}
 800340a:	bf00      	nop
 800340c:	37f0      	adds	r7, #240	; 0xf0
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40013000 	.word	0x40013000
 8003418:	58024400 	.word	0x58024400
 800341c:	58020400 	.word	0x58020400
 8003420:	40003800 	.word	0x40003800

08003424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a46      	ldr	r2, [pc, #280]	; (800354c <HAL_TIM_Base_MspInit+0x128>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d12f      	bne.n	8003496 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 8003438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800343c:	4a44      	ldr	r2, [pc, #272]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003446:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 8003448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2105      	movs	r1, #5
 8003458:	2018      	movs	r0, #24
 800345a:	f002 f95b 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800345e:	2018      	movs	r0, #24
 8003460:	f002 f972 	bl	8005748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2105      	movs	r1, #5
 8003468:	2019      	movs	r0, #25
 800346a:	f002 f953 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800346e:	2019      	movs	r0, #25
 8003470:	f002 f96a 	bl	8005748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	2105      	movs	r1, #5
 8003478:	201a      	movs	r0, #26
 800347a:	f002 f94b 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800347e:	201a      	movs	r0, #26
 8003480:	f002 f962 	bl	8005748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	2105      	movs	r1, #5
 8003488:	201b      	movs	r0, #27
 800348a:	f002 f943 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800348e:	201b      	movs	r0, #27
 8003490:	f002 f95a 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003494:	e055      	b.n	8003542 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d117      	bne.n	80034d0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 80034a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a6:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 80034b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2105      	movs	r1, #5
 80034c2:	201c      	movs	r0, #28
 80034c4:	f002 f926 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034c8:	201c      	movs	r0, #28
 80034ca:	f002 f93d 	bl	8005748 <HAL_NVIC_EnableIRQ>
}
 80034ce:	e038      	b.n	8003542 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_TIM_Base_MspInit+0x130>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d117      	bne.n	800350a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 80034dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 80034ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2105      	movs	r1, #5
 80034fc:	201d      	movs	r0, #29
 80034fe:	f002 f909 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003502:	201d      	movs	r0, #29
 8003504:	f002 f920 	bl	8005748 <HAL_NVIC_EnableIRQ>
}
 8003508:	e01b      	b.n	8003542 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_TIM_Base_MspInit+0x134>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d116      	bne.n	8003542 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 8003516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_TIM_Base_MspInit+0x12c>)
 8003526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2105      	movs	r1, #5
 8003536:	201e      	movs	r0, #30
 8003538:	f002 f8ec 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800353c:	201e      	movs	r0, #30
 800353e:	f002 f903 	bl	8005748 <HAL_NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	58024400 	.word	0x58024400
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800

0800355c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_TIM_MspPostInit+0xb8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d120      	bne.n	80035c0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 8003580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 8003590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800359c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	4818      	ldr	r0, [pc, #96]	; (800361c <HAL_TIM_MspPostInit+0xc0>)
 80035ba:	f005 fb21 	bl	8008c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035be:	e024      	b.n	800360a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d11f      	bne.n	800360a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_TIM_MspPostInit+0xbc>)
 80035dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035fa:	2301      	movs	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4806      	ldr	r0, [pc, #24]	; (8003620 <HAL_TIM_MspPostInit+0xc4>)
 8003606:	f005 fafb 	bl	8008c00 <HAL_GPIO_Init>
}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	58024400 	.word	0x58024400
 800361c:	58020000 	.word	0x58020000
 8003620:	58020400 	.word	0x58020400

08003624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b0ba      	sub	sp, #232	; 0xe8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800363c:	f107 0310 	add.w	r3, r7, #16
 8003640:	22c0      	movs	r2, #192	; 0xc0
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f013 f901 	bl	801684c <memset>
  if(huart->Instance==USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a41      	ldr	r2, [pc, #260]	; (8003754 <HAL_UART_MspInit+0x130>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d17b      	bne.n	800374c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003654:	f04f 0201 	mov.w	r2, #1
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003660:	2318      	movs	r3, #24
 8003662:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003666:	f107 0310 	add.w	r3, r7, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f007 fb54 	bl	800ad18 <HAL_RCCEx_PeriphCLKConfig>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003676:	f7ff fbc1 	bl	8002dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_UART_MspInit+0x134>)
 800367c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003680:	4a35      	ldr	r2, [pc, #212]	; (8003758 <HAL_UART_MspInit+0x134>)
 8003682:	f043 0310 	orr.w	r3, r3, #16
 8003686:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800368a:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_UART_MspInit+0x134>)
 800368c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003698:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <HAL_UART_MspInit+0x134>)
 800369a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369e:	4a2e      	ldr	r2, [pc, #184]	; (8003758 <HAL_UART_MspInit+0x134>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_UART_MspInit+0x134>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036d0:	2307      	movs	r3, #7
 80036d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036da:	4619      	mov	r1, r3
 80036dc:	481f      	ldr	r0, [pc, #124]	; (800375c <HAL_UART_MspInit+0x138>)
 80036de:	f005 fa8f 	bl	8008c00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80036e2:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <HAL_UART_MspInit+0x13c>)
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_UART_MspInit+0x140>)
 80036e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_UART_MspInit+0x13c>)
 80036ea:	222a      	movs	r2, #42	; 0x2a
 80036ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <HAL_UART_MspInit+0x13c>)
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_UART_MspInit+0x13c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_UART_MspInit+0x13c>)
 80036fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003700:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_UART_MspInit+0x13c>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_UART_MspInit+0x13c>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_UART_MspInit+0x13c>)
 8003710:	2200      	movs	r2, #0
 8003712:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_UART_MspInit+0x13c>)
 8003716:	2200      	movs	r2, #0
 8003718:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_UART_MspInit+0x13c>)
 800371c:	2200      	movs	r2, #0
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003720:	480f      	ldr	r0, [pc, #60]	; (8003760 <HAL_UART_MspInit+0x13c>)
 8003722:	f002 fc25 	bl	8005f70 <HAL_DMA_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800372c:	f7ff fb66 	bl	8002dfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <HAL_UART_MspInit+0x13c>)
 8003734:	67da      	str	r2, [r3, #124]	; 0x7c
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <HAL_UART_MspInit+0x13c>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2105      	movs	r1, #5
 8003740:	2025      	movs	r0, #37	; 0x25
 8003742:	f001 ffe7 	bl	8005714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003746:	2025      	movs	r0, #37	; 0x25
 8003748:	f001 fffe 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800374c:	bf00      	nop
 800374e:	37e8      	adds	r7, #232	; 0xe8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40011000 	.word	0x40011000
 8003758:	58024400 	.word	0x58024400
 800375c:	58020000 	.word	0x58020000
 8003760:	240006cc 	.word	0x240006cc
 8003764:	40020040 	.word	0x40020040

08003768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b090      	sub	sp, #64	; 0x40
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d827      	bhi.n	80037c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003776:	2200      	movs	r2, #0
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	2036      	movs	r0, #54	; 0x36
 800377c:	f001 ffca 	bl	8005714 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003780:	2036      	movs	r0, #54	; 0x36
 8003782:	f001 ffe1 	bl	8005748 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003786:	4a29      	ldr	r2, [pc, #164]	; (800382c <HAL_InitTick+0xc4>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800378c:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_InitTick+0xc8>)
 800378e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_InitTick+0xc8>)
 8003794:	f043 0310 	orr.w	r3, r3, #16
 8003798:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_InitTick+0xc8>)
 800379e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037aa:	f107 0210 	add.w	r2, r7, #16
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f007 fa6d 	bl	800ac94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_InitTick+0x6a>
 80037c4:	e001      	b.n	80037ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02b      	b.n	8003822 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037ca:	f007 fa37 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 80037ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 80037d0:	e004      	b.n	80037dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037d2:	f007 fa33 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 80037d6:	4603      	mov	r3, r0
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037de:	4a15      	ldr	r2, [pc, #84]	; (8003834 <HAL_InitTick+0xcc>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	0c9b      	lsrs	r3, r3, #18
 80037e6:	3b01      	subs	r3, #1
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_InitTick+0xd0>)
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_InitTick+0xd4>)
 80037ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_InitTick+0xd0>)
 80037f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037f8:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <HAL_InitTick+0xd0>)
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_InitTick+0xd0>)
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_InitTick+0xd0>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800380a:	480b      	ldr	r0, [pc, #44]	; (8003838 <HAL_InitTick+0xd0>)
 800380c:	f00a fef5 	bl	800e5fa <HAL_TIM_Base_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003816:	4808      	ldr	r0, [pc, #32]	; (8003838 <HAL_InitTick+0xd0>)
 8003818:	f00a ff46 	bl	800e6a8 <HAL_TIM_Base_Start_IT>
 800381c:	4603      	mov	r3, r0
 800381e:	e000      	b.n	8003822 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
}
 8003822:	4618      	mov	r0, r3
 8003824:	3740      	adds	r7, #64	; 0x40
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24000098 	.word	0x24000098
 8003830:	58024400 	.word	0x58024400
 8003834:	431bde83 	.word	0x431bde83
 8003838:	240010bc 	.word	0x240010bc
 800383c:	40001000 	.word	0x40001000

08003840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003844:	e7fe      	b.n	8003844 <NMI_Handler+0x4>

08003846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800384a:	e7fe      	b.n	800384a <HardFault_Handler+0x4>

0800384c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <MemManage_Handler+0x4>

08003852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003856:	e7fe      	b.n	8003856 <BusFault_Handler+0x4>

08003858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <UsageFault_Handler+0x4>

0800385e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream0_IRQHandler+0x10>)
 8003872:	f003 fea7 	bl	80075c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	24000204 	.word	0x24000204

08003880 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <DMA1_Stream1_IRQHandler+0x10>)
 8003886:	f003 fe9d 	bl	80075c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2400027c 	.word	0x2400027c

08003894 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <DMA1_Stream2_IRQHandler+0x10>)
 800389a:	f003 fe93 	bl	80075c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	240006cc 	.word	0x240006cc

080038a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <DMA1_Stream5_IRQHandler+0x10>)
 80038ae:	f003 fe89 	bl	80075c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	24000308 	.word	0x24000308

080038bc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM1_BRK_IRQHandler+0x10>)
 80038c2:	f00b fa08 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	24000508 	.word	0x24000508

080038d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM1_UP_IRQHandler+0x10>)
 80038d6:	f00b f9fe 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24000508 	.word	0x24000508

080038e4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80038ea:	f00b f9f4 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	24000508 	.word	0x24000508

080038f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <TIM1_CC_IRQHandler+0x10>)
 80038fe:	f00b f9ea 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	24000508 	.word	0x24000508

0800390c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <TIM2_IRQHandler+0x10>)
 8003912:	f00b f9e0 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	24000554 	.word	0x24000554

08003920 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <TIM3_IRQHandler+0x10>)
 8003926:	f00b f9d6 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	240005a0 	.word	0x240005a0

08003934 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <TIM4_IRQHandler+0x10>)
 800393a:	f00b f9cc 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	240005ec 	.word	0x240005ec

08003948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <USART1_IRQHandler+0x10>)
 800394e:	f00c fd85 	bl	801045c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	24000638 	.word	0x24000638

0800395c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <TIM6_DAC_IRQHandler+0x20>)
 8003962:	791b      	ldrb	r3, [r3, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800396a:	4804      	ldr	r0, [pc, #16]	; (800397c <TIM6_DAC_IRQHandler+0x20>)
 800396c:	f002 f881 	bl	8005a72 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003970:	4803      	ldr	r0, [pc, #12]	; (8003980 <TIM6_DAC_IRQHandler+0x24>)
 8003972:	f00b f9b0 	bl	800ecd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	240002f4 	.word	0x240002f4
 8003980:	240010bc 	.word	0x240010bc

08003984 <ITM_SendChar>:
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <ITM_SendChar+0x48>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <ITM_SendChar+0x48>)
 8003994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <ITM_SendChar+0x4c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <ITM_SendChar+0x4c>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	bf00      	nop
 80039a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f8      	beq.n	80039a8 <ITM_SendChar+0x24>
 80039b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000edfc 	.word	0xe000edfc
 80039d0:	e0000e00 	.word	0xe0000e00

080039d4 <_read>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e00a      	b.n	80039fc <_read+0x28>
 80039e6:	f3af 8000 	nop.w
 80039ea:	4601      	mov	r1, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	60ba      	str	r2, [r7, #8]
 80039f2:	b2ca      	uxtb	r2, r1
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	dbf0      	blt.n	80039e6 <_read+0x12>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_write>:
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e009      	b.n	8003a34 <_write+0x26>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	60ba      	str	r2, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ffab 	bl	8003984 <ITM_SendChar>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3301      	adds	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	dbf1      	blt.n	8003a20 <_write+0x12>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <_close>:
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_fstat>:
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	2300      	movs	r3, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <_isatty>:
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	2301      	movs	r3, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_lseek>:
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <_sbrk>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <_sbrk+0x5c>)
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <_sbrk+0x60>)
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <_sbrk+0x22>
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <_sbrk+0x64>)
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <_sbrk+0x68>)
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d207      	bcs.n	8003af0 <_sbrk+0x40>
 8003ae0:	f012 fe6c 	bl	80167bc <__errno>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aee:	e009      	b.n	8003b04 <_sbrk+0x54>
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <_sbrk+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <_sbrk+0x64>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	24080000 	.word	0x24080000
 8003b10:	00000400 	.word	0x00000400
 8003b14:	24001108 	.word	0x24001108
 8003b18:	24005a70 	.word	0x24005a70

08003b1c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003b20:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <SystemInit+0xe4>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	4a36      	ldr	r2, [pc, #216]	; (8003c00 <SystemInit+0xe4>)
 8003b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <SystemInit+0xe8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d807      	bhi.n	8003b4c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <SystemInit+0xe8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <SystemInit+0xe8>)
 8003b46:	f043 0307 	orr.w	r3, r3, #7
 8003b4a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <SystemInit+0xec>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <SystemInit+0xec>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <SystemInit+0xec>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <SystemInit+0xec>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4929      	ldr	r1, [pc, #164]	; (8003c08 <SystemInit+0xec>)
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <SystemInit+0xf0>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <SystemInit+0xe8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <SystemInit+0xe8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <SystemInit+0xe8>)
 8003b80:	f043 0307 	orr.w	r3, r3, #7
 8003b84:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <SystemInit+0xec>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <SystemInit+0xec>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <SystemInit+0xec>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <SystemInit+0xec>)
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <SystemInit+0xf4>)
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <SystemInit+0xec>)
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <SystemInit+0xf8>)
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <SystemInit+0xec>)
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <SystemInit+0xfc>)
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <SystemInit+0xec>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <SystemInit+0xec>)
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <SystemInit+0xfc>)
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <SystemInit+0xec>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <SystemInit+0xec>)
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <SystemInit+0xfc>)
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <SystemInit+0xec>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <SystemInit+0xec>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <SystemInit+0xec>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <SystemInit+0xec>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <SystemInit+0x100>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <SystemInit+0x104>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be6:	d202      	bcs.n	8003bee <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <SystemInit+0x108>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <SystemInit+0x10c>)
 8003bf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003bf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00
 8003c04:	52002000 	.word	0x52002000
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c10:	02020200 	.word	0x02020200
 8003c14:	01ff0000 	.word	0x01ff0000
 8003c18:	01010280 	.word	0x01010280
 8003c1c:	5c001000 	.word	0x5c001000
 8003c20:	ffff0000 	.word	0xffff0000
 8003c24:	51008108 	.word	0x51008108
 8003c28:	52004000 	.word	0x52004000

08003c2c <Reset_Handler>:
 8003c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c64 <LoopFillZerobss+0xe>
 8003c30:	f7ff ff74 	bl	8003b1c <SystemInit>
 8003c34:	480c      	ldr	r0, [pc, #48]	; (8003c68 <LoopFillZerobss+0x12>)
 8003c36:	490d      	ldr	r1, [pc, #52]	; (8003c6c <LoopFillZerobss+0x16>)
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <LoopFillZerobss+0x1a>)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e002      	b.n	8003c44 <LoopCopyDataInit>

08003c3e <CopyDataInit>:
 8003c3e:	58d4      	ldr	r4, [r2, r3]
 8003c40:	50c4      	str	r4, [r0, r3]
 8003c42:	3304      	adds	r3, #4

08003c44 <LoopCopyDataInit>:
 8003c44:	18c4      	adds	r4, r0, r3
 8003c46:	428c      	cmp	r4, r1
 8003c48:	d3f9      	bcc.n	8003c3e <CopyDataInit>
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <LoopFillZerobss+0x1e>)
 8003c4c:	4c0a      	ldr	r4, [pc, #40]	; (8003c78 <LoopFillZerobss+0x22>)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e001      	b.n	8003c56 <LoopFillZerobss>

08003c52 <FillZerobss>:
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	3204      	adds	r2, #4

08003c56 <LoopFillZerobss>:
 8003c56:	42a2      	cmp	r2, r4
 8003c58:	d3fb      	bcc.n	8003c52 <FillZerobss>
 8003c5a:	f012 fdb5 	bl	80167c8 <__libc_init_array>
 8003c5e:	f7fd f939 	bl	8000ed4 <main>
 8003c62:	4770      	bx	lr
 8003c64:	24080000 	.word	0x24080000
 8003c68:	24000000 	.word	0x24000000
 8003c6c:	24000108 	.word	0x24000108
 8003c70:	080176c4 	.word	0x080176c4
 8003c74:	24000120 	.word	0x24000120
 8003c78:	24005a70 	.word	0x24005a70

08003c7c <ADC3_IRQHandler>:
 8003c7c:	e7fe      	b.n	8003c7c <ADC3_IRQHandler>
	...

08003c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c86:	2003      	movs	r0, #3
 8003c88:	f001 fd39 	bl	80056fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c8c:	f006 fe2c 	bl	800a8e8 <HAL_RCC_GetSysClockFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <HAL_Init+0x68>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	4913      	ldr	r1, [pc, #76]	; (8003cec <HAL_Init+0x6c>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_Init+0x68>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_Init+0x6c>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_Init+0x70>)
 8003cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cc4:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <HAL_Init+0x74>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cca:	2005      	movs	r0, #5
 8003ccc:	f7ff fd4c 	bl	8003768 <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e002      	b.n	8003ce0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cda:	f7ff f895 	bl	8002e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	08017610 	.word	0x08017610
 8003cf0:	24000094 	.word	0x24000094
 8003cf4:	24000090 	.word	0x24000090

08003cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_IncTick+0x20>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_IncTick+0x24>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_IncTick+0x24>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2400009c 	.word	0x2400009c
 8003d1c:	2400110c 	.word	0x2400110c

08003d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_GetTick+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	2400110c 	.word	0x2400110c

08003d38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_GetREVID+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0c1b      	lsrs	r3, r3, #16
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	5c001000 	.word	0x5c001000

08003d50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	4904      	ldr	r1, [pc, #16]	; (8003d78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	58000400 	.word	0x58000400

08003d7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	609a      	str	r2, [r3, #8]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	611a      	str	r2, [r3, #16]
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b087      	sub	sp, #28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3360      	adds	r3, #96	; 0x60
 8003e66:	461a      	mov	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	601a      	str	r2, [r3, #0]
  }
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b087      	sub	sp, #28
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3330      	adds	r3, #48	; 0x30
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	4413      	add	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	211f      	movs	r1, #31
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	f003 011f 	and.w	r1, r3, #31
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f023 0203 	bic.w	r2, r3, #3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0e5b      	lsrs	r3, r3, #25
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0d1b      	lsrs	r3, r3, #20
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2107      	movs	r1, #7
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0d1b      	lsrs	r3, r3, #20
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	431a      	orrs	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0318 	and.w	r3, r3, #24
 8003faa:	4908      	ldr	r1, [pc, #32]	; (8003fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fac:	40d9      	lsrs	r1, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	000fffff 	.word	0x000fffff

08003fd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6093      	str	r3, [r2, #8]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	5fffffc0 	.word	0x5fffffc0

08004010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004024:	d101      	bne.n	800402a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <LL_ADC_EnableInternalRegulator+0x24>)
 8004046:	4013      	ands	r3, r2
 8004048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	6fffffc0 	.word	0x6fffffc0

08004060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004074:	d101      	bne.n	800407a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <LL_ADC_Enable+0x24>)
 8004096:	4013      	ands	r3, r2
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	7fffffc0 	.word	0x7fffffc0

080040b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <LL_ADC_Disable+0x24>)
 80040be:	4013      	ands	r3, r2
 80040c0:	f043 0202 	orr.w	r2, r3, #2
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	7fffffc0 	.word	0x7fffffc0

080040d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <LL_ADC_IsEnabled+0x18>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <LL_ADC_IsEnabled+0x1a>
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d101      	bne.n	8004116 <LL_ADC_IsDisableOngoing+0x18>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_ADC_IsDisableOngoing+0x1a>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <LL_ADC_REG_StartConversion+0x24>)
 8004132:	4013      	ands	r3, r2
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	7fffffc0 	.word	0x7fffffc0

0800414c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d101      	bne.n	8004164 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b08      	cmp	r3, #8
 8004184:	d101      	bne.n	800418a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e18f      	b.n	80044d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fe fe3f 	bl	8002e44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff19 	bl	8004010 <LL_ADC_IsDeepPowerDownEnabled>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff feff 	bl	8003fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff34 	bl	8004060 <LL_ADC_IsInternalRegulatorEnabled>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff18 	bl	8004038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004208:	4b87      	ldr	r3, [pc, #540]	; (8004428 <HAL_ADC_Init+0x290>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	4a87      	ldr	r2, [pc, #540]	; (800442c <HAL_ADC_Init+0x294>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	3301      	adds	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800421a:	e002      	b.n	8004222 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f9      	bne.n	800421c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ff17 	bl	8004060 <LL_ADC_IsInternalRegulatorEnabled>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0210 	orr.w	r2, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff77 	bl	800414c <LL_ADC_REG_IsConversionOngoing>
 800425e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8129 	bne.w	80044c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 8125 	bne.w	80044c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800427e:	f043 0202 	orr.w	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ff24 	bl	80040d8 <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d136      	bne.n	8004304 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a65      	ldr	r2, [pc, #404]	; (8004430 <HAL_ADC_Init+0x298>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_ADC_Init+0x112>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a63      	ldr	r2, [pc, #396]	; (8004434 <HAL_ADC_Init+0x29c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10e      	bne.n	80042c8 <HAL_ADC_Init+0x130>
 80042aa:	4861      	ldr	r0, [pc, #388]	; (8004430 <HAL_ADC_Init+0x298>)
 80042ac:	f7ff ff14 	bl	80040d8 <LL_ADC_IsEnabled>
 80042b0:	4604      	mov	r4, r0
 80042b2:	4860      	ldr	r0, [pc, #384]	; (8004434 <HAL_ADC_Init+0x29c>)
 80042b4:	f7ff ff10 	bl	80040d8 <LL_ADC_IsEnabled>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4323      	orrs	r3, r4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e008      	b.n	80042da <HAL_ADC_Init+0x142>
 80042c8:	485b      	ldr	r0, [pc, #364]	; (8004438 <HAL_ADC_Init+0x2a0>)
 80042ca:	f7ff ff05 	bl	80040d8 <LL_ADC_IsEnabled>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d012      	beq.n	8004304 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a53      	ldr	r2, [pc, #332]	; (8004430 <HAL_ADC_Init+0x298>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_ADC_Init+0x15a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a51      	ldr	r2, [pc, #324]	; (8004434 <HAL_ADC_Init+0x29c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_Init+0x15e>
 80042f2:	4a52      	ldr	r2, [pc, #328]	; (800443c <HAL_ADC_Init+0x2a4>)
 80042f4:	e000      	b.n	80042f8 <HAL_ADC_Init+0x160>
 80042f6:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_ADC_Init+0x2a8>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f7ff fd3c 	bl	8003d7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004304:	f7ff fd18 	bl	8003d38 <HAL_GetREVID>
 8004308:	4603      	mov	r3, r0
 800430a:	f241 0203 	movw	r2, #4099	; 0x1003
 800430e:	4293      	cmp	r3, r2
 8004310:	d914      	bls.n	800433c <HAL_ADC_Init+0x1a4>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b10      	cmp	r3, #16
 8004318:	d110      	bne.n	800433c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7d5b      	ldrb	r3, [r3, #21]
 800431e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004324:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800432a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7f1b      	ldrb	r3, [r3, #28]
 8004330:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004332:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004334:	f043 030c 	orr.w	r3, r3, #12
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e00d      	b.n	8004358 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	7d5b      	ldrb	r3, [r3, #21]
 8004340:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004346:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800434c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7f1b      	ldrb	r3, [r3, #28]
 8004352:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7f1b      	ldrb	r3, [r3, #28]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	3b01      	subs	r3, #1
 8004366:	045b      	lsls	r3, r3, #17
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <HAL_ADC_Init+0x2ac>)
 8004392:	4013      	ands	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	430b      	orrs	r3, r1
 800439c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fed2 	bl	800414c <LL_ADC_REG_IsConversionOngoing>
 80043a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fedf 	bl	8004172 <LL_ADC_INJ_IsConversionOngoing>
 80043b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d15f      	bne.n	800447c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d15c      	bne.n	800447c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7d1b      	ldrb	r3, [r3, #20]
 80043c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_ADC_Init+0x2b0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	69b9      	ldr	r1, [r7, #24]
 80043e0:	430b      	orrs	r3, r1
 80043e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d130      	bne.n	8004450 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_ADC_Init+0x2b4>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004402:	3a01      	subs	r2, #1
 8004404:	0411      	lsls	r1, r2, #16
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004416:	430a      	orrs	r2, r1
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	611a      	str	r2, [r3, #16]
 8004424:	e01c      	b.n	8004460 <HAL_ADC_Init+0x2c8>
 8004426:	bf00      	nop
 8004428:	24000090 	.word	0x24000090
 800442c:	053e2d63 	.word	0x053e2d63
 8004430:	40022000 	.word	0x40022000
 8004434:	40022100 	.word	0x40022100
 8004438:	58026000 	.word	0x58026000
 800443c:	40022300 	.word	0x40022300
 8004440:	58026300 	.word	0x58026300
 8004444:	fff0c003 	.word	0xfff0c003
 8004448:	ffffbffc 	.word	0xffffbffc
 800444c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fdec 	bl	8005054 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10c      	bne.n	800449e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f023 010f 	bic.w	r1, r3, #15
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	1e5a      	subs	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
 800449c:	e007      	b.n	80044ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 020f 	bic.w	r2, r2, #15
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
 80044be:	e007      	b.n	80044d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f043 0210 	orr.w	r2, r3, #16
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	bf00      	nop

080044dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a55      	ldr	r2, [pc, #340]	; (8004644 <HAL_ADC_Start_DMA+0x168>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_ADC_Start_DMA+0x20>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a54      	ldr	r2, [pc, #336]	; (8004648 <HAL_ADC_Start_DMA+0x16c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_Start_DMA+0x24>
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_ADC_Start_DMA+0x170>)
 80044fe:	e000      	b.n	8004502 <HAL_ADC_Start_DMA+0x26>
 8004500:	4b53      	ldr	r3, [pc, #332]	; (8004650 <HAL_ADC_Start_DMA+0x174>)
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fd64 	bl	8003fd0 <LL_ADC_GetMultimode>
 8004508:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fe1c 	bl	800414c <LL_ADC_REG_IsConversionOngoing>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	f040 808c 	bne.w	8004634 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_ADC_Start_DMA+0x4e>
 8004526:	2302      	movs	r3, #2
 8004528:	e087      	b.n	800463a <HAL_ADC_Start_DMA+0x15e>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b05      	cmp	r3, #5
 800453c:	d002      	beq.n	8004544 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b09      	cmp	r3, #9
 8004542:	d170      	bne.n	8004626 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fc07 	bl	8004d58 <ADC_Enable>
 800454a:	4603      	mov	r3, r0
 800454c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d163      	bne.n	800461c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004558:	4b3e      	ldr	r3, [pc, #248]	; (8004654 <HAL_ADC_Start_DMA+0x178>)
 800455a:	4013      	ands	r3, r2
 800455c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a37      	ldr	r2, [pc, #220]	; (8004648 <HAL_ADC_Start_DMA+0x16c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d002      	beq.n	8004574 <HAL_ADC_Start_DMA+0x98>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	e000      	b.n	8004576 <HAL_ADC_Start_DMA+0x9a>
 8004574:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_ADC_Start_DMA+0x168>)
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	4293      	cmp	r3, r2
 800457c:	d002      	beq.n	8004584 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f023 0206 	bic.w	r2, r3, #6
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	659a      	str	r2, [r3, #88]	; 0x58
 80045a8:	e002      	b.n	80045b0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b4:	4a28      	ldr	r2, [pc, #160]	; (8004658 <HAL_ADC_Start_DMA+0x17c>)
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045bc:	4a27      	ldr	r2, [pc, #156]	; (800465c <HAL_ADC_Start_DMA+0x180>)
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <HAL_ADC_Start_DMA+0x184>)
 80045c6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	221c      	movs	r2, #28
 80045ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0210 	orr.w	r2, r2, #16
 80045e6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7ff fc89 	bl	8003f0a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3340      	adds	r3, #64	; 0x40
 8004602:	4619      	mov	r1, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f002 f80e 	bl	8006628 <HAL_DMA_Start_IT>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fd85 	bl	8004124 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800461a:	e00d      	b.n	8004638 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004624:	e008      	b.n	8004638 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004632:	e001      	b.n	8004638 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004638:	7dfb      	ldrb	r3, [r7, #23]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40022000 	.word	0x40022000
 8004648:	40022100 	.word	0x40022100
 800464c:	40022300 	.word	0x40022300
 8004650:	58026300 	.word	0x58026300
 8004654:	fffff0fe 	.word	0xfffff0fe
 8004658:	08004f2b 	.word	0x08004f2b
 800465c:	08005003 	.word	0x08005003
 8004660:	0800501f 	.word	0x0800501f

08004664 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b0a1      	sub	sp, #132	; 0x84
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a65      	ldr	r2, [pc, #404]	; (8004850 <HAL_ADC_ConfigChannel+0x1b0>)
 80046ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x2a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e32e      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x688>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fd38 	bl	800414c <LL_ADC_REG_IsConversionOngoing>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 8313 	bne.w	8004d0a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	db2c      	blt.n	8004746 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <HAL_ADC_ConfigChannel+0x6a>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2201      	movs	r2, #1
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	e016      	b.n	8004738 <HAL_ADC_ConfigChannel+0x98>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800471a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800471c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004722:	2320      	movs	r3, #32
 8004724:	e003      	b.n	800472e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	69d1      	ldr	r1, [r2, #28]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	430b      	orrs	r3, r1
 8004744:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	f7ff fbad 	bl	8003eb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fcf5 	bl	800414c <LL_ADC_REG_IsConversionOngoing>
 8004762:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fd02 	bl	8004172 <LL_ADC_INJ_IsConversionOngoing>
 800476e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 80b8 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 80b4 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	461a      	mov	r2, r3
 800478e:	f7ff fbcf 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004792:	4b30      	ldr	r3, [pc, #192]	; (8004854 <HAL_ADC_ConfigChannel+0x1b4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800479a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479e:	d10b      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x118>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	e01d      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x154>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_ADC_ConfigChannel+0x13e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	e00a      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x154>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d02c      	beq.n	8004858 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6919      	ldr	r1, [r3, #16]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800480c:	f7ff faea 	bl	8003de4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6919      	ldr	r1, [r3, #16]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	7e5b      	ldrb	r3, [r3, #25]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d102      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x186>
 8004820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004824:	e000      	b.n	8004828 <HAL_ADC_ConfigChannel+0x188>
 8004826:	2300      	movs	r3, #0
 8004828:	461a      	mov	r2, r3
 800482a:	f7ff fb14 	bl	8003e56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	7e1b      	ldrb	r3, [r3, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d102      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1a4>
 800483e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004842:	e000      	b.n	8004846 <HAL_ADC_ConfigChannel+0x1a6>
 8004844:	2300      	movs	r3, #0
 8004846:	461a      	mov	r2, r3
 8004848:	f7ff faec 	bl	8003e24 <LL_ADC_SetDataRightShift>
 800484c:	e04c      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x248>
 800484e:	bf00      	nop
 8004850:	47ff0000 	.word	0x47ff0000
 8004854:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	069b      	lsls	r3, r3, #26
 8004868:	429a      	cmp	r2, r3
 800486a:	d107      	bne.n	800487c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800487a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	069b      	lsls	r3, r3, #26
 800488c:	429a      	cmp	r2, r3
 800488e:	d107      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800489e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	069b      	lsls	r3, r3, #26
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048c2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	069b      	lsls	r3, r3, #26
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fbf3 	bl	80040d8 <LL_ADC_IsEnabled>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 8211 	bne.w	8004d1c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	461a      	mov	r2, r3
 8004908:	f7ff fb3e 	bl	8003f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4aa1      	ldr	r2, [pc, #644]	; (8004b98 <HAL_ADC_ConfigChannel+0x4f8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f040 812e 	bne.w	8004b74 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x2a0>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0e9b      	lsrs	r3, r3, #26
 800492e:	3301      	adds	r3, #1
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2b09      	cmp	r3, #9
 8004936:	bf94      	ite	ls
 8004938:	2301      	movls	r3, #1
 800493a:	2300      	movhi	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e019      	b.n	8004974 <HAL_ADC_ConfigChannel+0x2d4>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800494e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004950:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004958:	2320      	movs	r3, #32
 800495a:	e003      	b.n	8004964 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800495c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2b09      	cmp	r3, #9
 800496c:	bf94      	ite	ls
 800496e:	2301      	movls	r3, #1
 8004970:	2300      	movhi	r3, #0
 8004972:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004974:	2b00      	cmp	r3, #0
 8004976:	d079      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x2f4>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0e9b      	lsrs	r3, r3, #26
 800498a:	3301      	adds	r3, #1
 800498c:	069b      	lsls	r3, r3, #26
 800498e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004992:	e015      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x320>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80049a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80049a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e003      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80049b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	3301      	adds	r3, #1
 80049ba:	069b      	lsls	r3, r3, #26
 80049bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x340>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0e9b      	lsrs	r3, r3, #26
 80049d2:	3301      	adds	r3, #1
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2101      	movs	r1, #1
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	e017      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x370>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e003      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3301      	adds	r3, #1
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	ea42 0103 	orr.w	r1, r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x396>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	3301      	adds	r3, #1
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	051b      	lsls	r3, r3, #20
 8004a34:	e018      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x3c8>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	fa93 f3a3 	rbit	r3, r3
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004a4e:	2320      	movs	r3, #32
 8004a50:	e003      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	fab3 f383 	clz	r3, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	e07e      	b.n	8004b6a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x3e8>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0e9b      	lsrs	r3, r3, #26
 8004a7e:	3301      	adds	r3, #1
 8004a80:	069b      	lsls	r3, r3, #26
 8004a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a86:	e015      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x414>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	e003      	b.n	8004aac <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	069b      	lsls	r3, r3, #26
 8004ab0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x434>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	0e9b      	lsrs	r3, r3, #26
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2101      	movs	r1, #1
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	e017      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x464>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004aec:	2320      	movs	r3, #32
 8004aee:	e003      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	fab3 f383 	clz	r3, r3
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3301      	adds	r3, #1
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2101      	movs	r1, #1
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	ea42 0103 	orr.w	r1, r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x490>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	0e9b      	lsrs	r3, r3, #26
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	3b1e      	subs	r3, #30
 8004b28:	051b      	lsls	r3, r3, #20
 8004b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	e01b      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x4c8>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
  return result;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004b48:	2320      	movs	r3, #32
 8004b4a:	e003      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fab3 f383 	clz	r3, r3
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	3301      	adds	r3, #1
 8004b56:	f003 021f 	and.w	r2, r3, #31
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	3b1e      	subs	r3, #30
 8004b62:	051b      	lsls	r3, r3, #20
 8004b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f7ff f9de 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f280 80cf 	bge.w	8004d1c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <HAL_ADC_ConfigChannel+0x4fc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_ADC_ConfigChannel+0x4f2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <HAL_ADC_ConfigChannel+0x500>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10a      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x508>
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <HAL_ADC_ConfigChannel+0x504>)
 8004b94:	e009      	b.n	8004baa <HAL_ADC_ConfigChannel+0x50a>
 8004b96:	bf00      	nop
 8004b98:	47ff0000 	.word	0x47ff0000
 8004b9c:	40022000 	.word	0x40022000
 8004ba0:	40022100 	.word	0x40022100
 8004ba4:	40022300 	.word	0x40022300
 8004ba8:	4b61      	ldr	r3, [pc, #388]	; (8004d30 <HAL_ADC_ConfigChannel+0x690>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f90c 	bl	8003dc8 <LL_ADC_GetCommonPathInternalCh>
 8004bb0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5f      	ldr	r2, [pc, #380]	; (8004d34 <HAL_ADC_ConfigChannel+0x694>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_ADC_ConfigChannel+0x526>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a5d      	ldr	r2, [pc, #372]	; (8004d38 <HAL_ADC_ConfigChannel+0x698>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10e      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x544>
 8004bc6:	485b      	ldr	r0, [pc, #364]	; (8004d34 <HAL_ADC_ConfigChannel+0x694>)
 8004bc8:	f7ff fa86 	bl	80040d8 <LL_ADC_IsEnabled>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	485a      	ldr	r0, [pc, #360]	; (8004d38 <HAL_ADC_ConfigChannel+0x698>)
 8004bd0:	f7ff fa82 	bl	80040d8 <LL_ADC_IsEnabled>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4323      	orrs	r3, r4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e008      	b.n	8004bf6 <HAL_ADC_ConfigChannel+0x556>
 8004be4:	4855      	ldr	r0, [pc, #340]	; (8004d3c <HAL_ADC_ConfigChannel+0x69c>)
 8004be6:	f7ff fa77 	bl	80040d8 <LL_ADC_IsEnabled>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d07d      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a50      	ldr	r2, [pc, #320]	; (8004d40 <HAL_ADC_ConfigChannel+0x6a0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d130      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x5c6>
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d12b      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <HAL_ADC_ConfigChannel+0x69c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	f040 8081 	bne.w	8004d1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a45      	ldr	r2, [pc, #276]	; (8004d34 <HAL_ADC_ConfigChannel+0x694>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0x58e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a43      	ldr	r2, [pc, #268]	; (8004d38 <HAL_ADC_ConfigChannel+0x698>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x592>
 8004c2e:	4a45      	ldr	r2, [pc, #276]	; (8004d44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c30:	e000      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x594>
 8004c32:	4a3f      	ldr	r2, [pc, #252]	; (8004d30 <HAL_ADC_ConfigChannel+0x690>)
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7ff f8b0 	bl	8003da2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c42:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <HAL_ADC_ConfigChannel+0x6a8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	4a40      	ldr	r2, [pc, #256]	; (8004d4c <HAL_ADC_ConfigChannel+0x6ac>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	3301      	adds	r3, #1
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c56:	e002      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f9      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c64:	e05a      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a39      	ldr	r2, [pc, #228]	; (8004d50 <HAL_ADC_ConfigChannel+0x6b0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d11e      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x60e>
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d119      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <HAL_ADC_ConfigChannel+0x69c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d14b      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <HAL_ADC_ConfigChannel+0x694>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_ADC_ConfigChannel+0x5f8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_ADC_ConfigChannel+0x698>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x5fc>
 8004c98:	4a2a      	ldr	r2, [pc, #168]	; (8004d44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c9a:	e000      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x5fe>
 8004c9c:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <HAL_ADC_ConfigChannel+0x690>)
 8004c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7ff f87b 	bl	8003da2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cac:	e036      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a28      	ldr	r2, [pc, #160]	; (8004d54 <HAL_ADC_ConfigChannel+0x6b4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d131      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d12c      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <HAL_ADC_ConfigChannel+0x69c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d127      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_ADC_ConfigChannel+0x694>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x640>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <HAL_ADC_ConfigChannel+0x698>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x644>
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x646>
 8004ce4:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <HAL_ADC_ConfigChannel+0x690>)
 8004ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7ff f857 	bl	8003da2 <LL_ADC_SetCommonPathInternalCh>
 8004cf4:	e012      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d08:	e008      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3784      	adds	r7, #132	; 0x84
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	58026300 	.word	0x58026300
 8004d34:	40022000 	.word	0x40022000
 8004d38:	40022100 	.word	0x40022100
 8004d3c:	58026000 	.word	0x58026000
 8004d40:	cb840000 	.word	0xcb840000
 8004d44:	40022300 	.word	0x40022300
 8004d48:	24000090 	.word	0x24000090
 8004d4c:	053e2d63 	.word	0x053e2d63
 8004d50:	c7520000 	.word	0xc7520000
 8004d54:	cfb80000 	.word	0xcfb80000

08004d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff f9b7 	bl	80040d8 <LL_ADC_IsEnabled>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d16e      	bne.n	8004e4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <ADC_Enable+0x100>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f043 0210 	orr.w	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	f043 0201 	orr.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e05a      	b.n	8004e50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff f972 	bl	8004088 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004da4:	f7fe ffbc 	bl	8003d20 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <ADC_Enable+0x104>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <ADC_Enable+0x66>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <ADC_Enable+0x108>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d101      	bne.n	8004dc2 <ADC_Enable+0x6a>
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <ADC_Enable+0x10c>)
 8004dc0:	e000      	b.n	8004dc4 <ADC_Enable+0x6c>
 8004dc2:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <ADC_Enable+0x110>)
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff f903 	bl	8003fd0 <LL_ADC_GetMultimode>
 8004dca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <ADC_Enable+0x108>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d002      	beq.n	8004ddc <ADC_Enable+0x84>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	e000      	b.n	8004dde <ADC_Enable+0x86>
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <ADC_Enable+0x104>)
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d02c      	beq.n	8004e40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d130      	bne.n	8004e4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dec:	e028      	b.n	8004e40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff f970 	bl	80040d8 <LL_ADC_IsEnabled>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff f940 	bl	8004088 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e08:	f7fe ff8a 	bl	8003d20 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d914      	bls.n	8004e40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d00d      	beq.n	8004e40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	f043 0210 	orr.w	r2, r3, #16
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f043 0201 	orr.w	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e007      	b.n	8004e50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d1cf      	bne.n	8004dee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	8000003f 	.word	0x8000003f
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40022100 	.word	0x40022100
 8004e64:	40022300 	.word	0x40022300
 8004e68:	58026300 	.word	0x58026300

08004e6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff f940 	bl	80040fe <LL_ADC_IsDisableOngoing>
 8004e7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff f927 	bl	80040d8 <LL_ADC_IsEnabled>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d047      	beq.n	8004f20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d144      	bne.n	8004f20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 030d 	and.w	r3, r3, #13
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10c      	bne.n	8004ebe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f901 	bl	80040b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004eb6:	f7fe ff33 	bl	8003d20 <HAL_GetTick>
 8004eba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ebc:	e029      	b.n	8004f12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e023      	b.n	8004f22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004eda:	f7fe ff21 	bl	8003d20 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d914      	bls.n	8004f12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f043 0210 	orr.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e007      	b.n	8004f22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1dc      	bne.n	8004eda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d14b      	bne.n	8004fdc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d021      	beq.n	8004fa2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe ff92 	bl	8003e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d032      	beq.n	8004fd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d12b      	bne.n	8004fd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11f      	bne.n	8004fd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	f043 0201 	orr.w	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	655a      	str	r2, [r3, #84]	; 0x54
 8004fa0:	e018      	b.n	8004fd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d111      	bne.n	8004fd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f043 0201 	orr.w	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fb45 	bl	8004664 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fda:	e00e      	b.n	8004ffa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fb4f 	bl	800468c <HAL_ADC_ErrorCallback>
}
 8004fee:	e004      	b.n	8004ffa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff fb31 	bl	8004678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff fb21 	bl	800468c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a7a      	ldr	r2, [pc, #488]	; (800524c <ADC_ConfigureBoostMode+0x1f8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <ADC_ConfigureBoostMode+0x1c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a79      	ldr	r2, [pc, #484]	; (8005250 <ADC_ConfigureBoostMode+0x1fc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <ADC_ConfigureBoostMode+0x30>
 8005070:	4b78      	ldr	r3, [pc, #480]	; (8005254 <ADC_ConfigureBoostMode+0x200>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e008      	b.n	8005096 <ADC_ConfigureBoostMode+0x42>
 8005084:	4b74      	ldr	r3, [pc, #464]	; (8005258 <ADC_ConfigureBoostMode+0x204>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01c      	beq.n	80050d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800509a:	f005 fd9f 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800509e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050a8:	d010      	beq.n	80050cc <ADC_ConfigureBoostMode+0x78>
 80050aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050ae:	d873      	bhi.n	8005198 <ADC_ConfigureBoostMode+0x144>
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d002      	beq.n	80050bc <ADC_ConfigureBoostMode+0x68>
 80050b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ba:	d16d      	bne.n	8005198 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	60fb      	str	r3, [r7, #12]
        break;
 80050ca:	e068      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	60fb      	str	r3, [r7, #12]
        break;
 80050d2:	e064      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80050d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80050d8:	f04f 0100 	mov.w	r1, #0
 80050dc:	f007 f826 	bl	800c12c <HAL_RCCEx_GetPeriphCLKFreq>
 80050e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050ea:	d051      	beq.n	8005190 <ADC_ConfigureBoostMode+0x13c>
 80050ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050f0:	d854      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 80050f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050f6:	d047      	beq.n	8005188 <ADC_ConfigureBoostMode+0x134>
 80050f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050fc:	d84e      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 80050fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005102:	d03d      	beq.n	8005180 <ADC_ConfigureBoostMode+0x12c>
 8005104:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005108:	d848      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 800510a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510e:	d033      	beq.n	8005178 <ADC_ConfigureBoostMode+0x124>
 8005110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005114:	d842      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 8005116:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800511a:	d029      	beq.n	8005170 <ADC_ConfigureBoostMode+0x11c>
 800511c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005120:	d83c      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 8005122:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005126:	d01a      	beq.n	800515e <ADC_ConfigureBoostMode+0x10a>
 8005128:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800512c:	d836      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 800512e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005132:	d014      	beq.n	800515e <ADC_ConfigureBoostMode+0x10a>
 8005134:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005138:	d830      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 800513a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513e:	d00e      	beq.n	800515e <ADC_ConfigureBoostMode+0x10a>
 8005140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005144:	d82a      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 8005146:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800514a:	d008      	beq.n	800515e <ADC_ConfigureBoostMode+0x10a>
 800514c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005150:	d824      	bhi.n	800519c <ADC_ConfigureBoostMode+0x148>
 8005152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005156:	d002      	beq.n	800515e <ADC_ConfigureBoostMode+0x10a>
 8005158:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800515c:	d11e      	bne.n	800519c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0c9b      	lsrs	r3, r3, #18
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	60fb      	str	r3, [r7, #12]
        break;
 800516e:	e016      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
        break;
 8005176:	e012      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	60fb      	str	r3, [r7, #12]
        break;
 800517e:	e00e      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	099b      	lsrs	r3, r3, #6
 8005184:	60fb      	str	r3, [r7, #12]
        break;
 8005186:	e00a      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
        break;
 800518e:	e006      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	60fb      	str	r3, [r7, #12]
        break;
 8005196:	e002      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005198:	bf00      	nop
 800519a:	e000      	b.n	800519e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800519c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800519e:	f7fe fdcb 	bl	8003d38 <HAL_GetREVID>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d815      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a2b      	ldr	r2, [pc, #172]	; (800525c <ADC_ConfigureBoostMode+0x208>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d908      	bls.n	80051c6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80051c4:	e03e      	b.n	8005244 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	e035      	b.n	8005244 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <ADC_ConfigureBoostMode+0x20c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d808      	bhi.n	80051f8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051f4:	609a      	str	r2, [r3, #8]
}
 80051f6:	e025      	b.n	8005244 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <ADC_ConfigureBoostMode+0x210>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d80a      	bhi.n	8005216 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	e016      	b.n	8005244 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <ADC_ConfigureBoostMode+0x214>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d80a      	bhi.n	8005234 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	e007      	b.n	8005244 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40022000 	.word	0x40022000
 8005250:	40022100 	.word	0x40022100
 8005254:	40022300 	.word	0x40022300
 8005258:	58026300 	.word	0x58026300
 800525c:	01312d00 	.word	0x01312d00
 8005260:	005f5e10 	.word	0x005f5e10
 8005264:	00bebc20 	.word	0x00bebc20
 8005268:	017d7840 	.word	0x017d7840

0800526c <LL_ADC_IsEnabled>:
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <LL_ADC_IsEnabled+0x18>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <LL_ADC_IsEnabled+0x1a>
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <LL_ADC_StartCalibration>:
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <LL_ADC_StartCalibration+0x38>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80052b4:	430a      	orrs	r2, r1
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	3ffeffc0 	.word	0x3ffeffc0

080052d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e4:	d101      	bne.n	80052ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b04      	cmp	r3, #4
 800530a:	d101      	bne.n	8005310 <LL_ADC_REG_IsConversionOngoing+0x18>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_ADCEx_Calibration_Start+0x1e>
 800533a:	2302      	movs	r3, #2
 800533c:	e04c      	b.n	80053d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff fd90 	bl	8004e6c <ADC_Disable>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d135      	bne.n	80053c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800535a:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800535c:	4013      	ands	r3, r2
 800535e:	f043 0202 	orr.w	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff ff90 	bl	8005294 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005374:	e014      	b.n	80053a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d30d      	bcc.n	80053a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	f023 0312 	bic.w	r3, r3, #18
 800538c:	f043 0210 	orr.w	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e01b      	b.n	80053d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff93 	bl	80052d0 <LL_ADC_IsCalibrationOnGoing>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e2      	bne.n	8005376 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f023 0303 	bic.w	r3, r3, #3
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
 80053c0:	e005      	b.n	80053ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0210 	orr.w	r2, r3, #16
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	ffffeefd 	.word	0xffffeefd
 80053e4:	25c3f800 	.word	0x25c3f800

080053e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b09f      	sub	sp, #124	; 0x7c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005402:	2302      	movs	r3, #2
 8005404:	e0be      	b.n	8005584 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005412:	2300      	movs	r3, #0
 8005414:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5c      	ldr	r2, [pc, #368]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d102      	bne.n	8005426 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005420:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	e001      	b.n	800542a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e09d      	b.n	8005584 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ff54 	bl	80052f8 <LL_ADC_REG_IsConversionOngoing>
 8005450:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff4e 	bl	80052f8 <LL_ADC_REG_IsConversionOngoing>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d17f      	bne.n	8005562 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005464:	2b00      	cmp	r3, #0
 8005466:	d17c      	bne.n	8005562 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a47      	ldr	r2, [pc, #284]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a46      	ldr	r2, [pc, #280]	; (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800547c:	4b45      	ldr	r3, [pc, #276]	; (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800547e:	e000      	b.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005480:	4b45      	ldr	r3, [pc, #276]	; (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005482:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d039      	beq.n	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800548c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	431a      	orrs	r2, r3
 800549a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a3a      	ldr	r2, [pc, #232]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a38      	ldr	r2, [pc, #224]	; (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10e      	bne.n	80054d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80054b2:	4836      	ldr	r0, [pc, #216]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054b4:	f7ff feda 	bl	800526c <LL_ADC_IsEnabled>
 80054b8:	4604      	mov	r4, r0
 80054ba:	4835      	ldr	r0, [pc, #212]	; (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054bc:	f7ff fed6 	bl	800526c <LL_ADC_IsEnabled>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4323      	orrs	r3, r4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e008      	b.n	80054e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80054d0:	4832      	ldr	r0, [pc, #200]	; (800559c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054d2:	f7ff fecb 	bl	800526c <LL_ADC_IsEnabled>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d047      	beq.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	4b2d      	ldr	r3, [pc, #180]	; (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	6811      	ldr	r1, [r2, #0]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	6892      	ldr	r2, [r2, #8]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	431a      	orrs	r2, r3
 80054fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054fe:	e03a      	b.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1e      	ldr	r2, [pc, #120]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10e      	bne.n	800553e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005520:	481a      	ldr	r0, [pc, #104]	; (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005522:	f7ff fea3 	bl	800526c <LL_ADC_IsEnabled>
 8005526:	4604      	mov	r4, r0
 8005528:	4819      	ldr	r0, [pc, #100]	; (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800552a:	f7ff fe9f 	bl	800526c <LL_ADC_IsEnabled>
 800552e:	4603      	mov	r3, r0
 8005530:	4323      	orrs	r3, r4
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e008      	b.n	8005550 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800553e:	4817      	ldr	r0, [pc, #92]	; (800559c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005540:	f7ff fe94 	bl	800526c <LL_ADC_IsEnabled>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800555a:	4013      	ands	r3, r2
 800555c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800555e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005560:	e009      	b.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005574:	e000      	b.n	8005578 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005576:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005580:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005584:	4618      	mov	r0, r3
 8005586:	377c      	adds	r7, #124	; 0x7c
 8005588:	46bd      	mov	sp, r7
 800558a:	bd90      	pop	{r4, r7, pc}
 800558c:	40022000 	.word	0x40022000
 8005590:	40022100 	.word	0x40022100
 8005594:	40022300 	.word	0x40022300
 8005598:	58026300 	.word	0x58026300
 800559c:	58026000 	.word	0x58026000
 80055a0:	fffff0e0 	.word	0xfffff0e0

080055a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <__NVIC_SetPriorityGrouping+0x40>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c0:	4013      	ands	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <__NVIC_SetPriorityGrouping+0x44>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <__NVIC_SetPriorityGrouping+0x40>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	60d3      	str	r3, [r2, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00
 80055e8:	05fa0000 	.word	0x05fa0000

080055ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <__NVIC_GetPriorityGrouping+0x18>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f003 0307 	and.w	r3, r3, #7
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005616:	2b00      	cmp	r3, #0
 8005618:	db0b      	blt.n	8005632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	f003 021f 	and.w	r2, r3, #31
 8005620:	4907      	ldr	r1, [pc, #28]	; (8005640 <__NVIC_EnableIRQ+0x38>)
 8005622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2001      	movs	r0, #1
 800562a:	fa00 f202 	lsl.w	r2, r0, r2
 800562e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000e100 	.word	0xe000e100

08005644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	6039      	str	r1, [r7, #0]
 800564e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005654:	2b00      	cmp	r3, #0
 8005656:	db0a      	blt.n	800566e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	490c      	ldr	r1, [pc, #48]	; (8005690 <__NVIC_SetPriority+0x4c>)
 800565e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	440b      	add	r3, r1
 8005668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800566c:	e00a      	b.n	8005684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4908      	ldr	r1, [pc, #32]	; (8005694 <__NVIC_SetPriority+0x50>)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3b04      	subs	r3, #4
 800567c:	0112      	lsls	r2, r2, #4
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	440b      	add	r3, r1
 8005682:	761a      	strb	r2, [r3, #24]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	e000e100 	.word	0xe000e100
 8005694:	e000ed00 	.word	0xe000ed00

08005698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f1c3 0307 	rsb	r3, r3, #7
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	bf28      	it	cs
 80056b6:	2304      	movcs	r3, #4
 80056b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3304      	adds	r3, #4
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d902      	bls.n	80056c8 <NVIC_EncodePriority+0x30>
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3b03      	subs	r3, #3
 80056c6:	e000      	b.n	80056ca <NVIC_EncodePriority+0x32>
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43da      	mvns	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	401a      	ands	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ea:	43d9      	mvns	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f0:	4313      	orrs	r3, r2
         );
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3724      	adds	r7, #36	; 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ff4c 	bl	80055a4 <__NVIC_SetPriorityGrouping>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005722:	f7ff ff63 	bl	80055ec <__NVIC_GetPriorityGrouping>
 8005726:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	6978      	ldr	r0, [r7, #20]
 800572e:	f7ff ffb3 	bl	8005698 <NVIC_EncodePriority>
 8005732:	4602      	mov	r2, r0
 8005734:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff ff82 	bl	8005644 <__NVIC_SetPriority>
}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff56 	bl	8005608 <__NVIC_EnableIRQ>
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e014      	b.n	80057a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fd fc76 	bl	8003078 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e046      	b.n	800584a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	795b      	ldrb	r3, [r3, #5]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_DAC_Start+0x20>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e040      	b.n	800584a <HAL_DAC_Start+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10f      	bne.n	8005812 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d11d      	bne.n	800583c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	e014      	b.n	800583c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2102      	movs	r1, #2
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	429a      	cmp	r2, r3
 800582a:	d107      	bne.n	800583c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0202 	orr.w	r2, r2, #2
 800583a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0a2      	b.n	80059b6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	795b      	ldrb	r3, [r3, #5]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_DAC_Start_DMA+0x24>
 8005878:	2302      	movs	r3, #2
 800587a:	e09c      	b.n	80059b6 <HAL_DAC_Start_DMA+0x15e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2202      	movs	r2, #2
 8005886:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d129      	bne.n	80058e2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a4b      	ldr	r2, [pc, #300]	; (80059c0 <HAL_DAC_Start_DMA+0x168>)
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	4a4a      	ldr	r2, [pc, #296]	; (80059c4 <HAL_DAC_Start_DMA+0x16c>)
 800589c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	4a49      	ldr	r2, [pc, #292]	; (80059c8 <HAL_DAC_Start_DMA+0x170>)
 80058a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_DAC_Start_DMA+0x6c>
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d005      	beq.n	80058ce <HAL_DAC_Start_DMA+0x76>
 80058c2:	e009      	b.n	80058d8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	613b      	str	r3, [r7, #16]
        break;
 80058cc:	e033      	b.n	8005936 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	613b      	str	r3, [r7, #16]
        break;
 80058d6:	e02e      	b.n	8005936 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3310      	adds	r3, #16
 80058de:	613b      	str	r3, [r7, #16]
        break;
 80058e0:	e029      	b.n	8005936 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	4a39      	ldr	r2, [pc, #228]	; (80059cc <HAL_DAC_Start_DMA+0x174>)
 80058e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	4a38      	ldr	r2, [pc, #224]	; (80059d0 <HAL_DAC_Start_DMA+0x178>)
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	4a37      	ldr	r2, [pc, #220]	; (80059d4 <HAL_DAC_Start_DMA+0x17c>)
 80058f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005908:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_DAC_Start_DMA+0xc0>
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d005      	beq.n	8005922 <HAL_DAC_Start_DMA+0xca>
 8005916:	e009      	b.n	800592c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	613b      	str	r3, [r7, #16]
        break;
 8005920:	e009      	b.n	8005936 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3318      	adds	r3, #24
 8005928:	613b      	str	r3, [r7, #16]
        break;
 800592a:	e004      	b.n	8005936 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	331c      	adds	r3, #28
 8005932:	613b      	str	r3, [r7, #16]
        break;
 8005934:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d111      	bne.n	8005960 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800594a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6898      	ldr	r0, [r3, #8]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	f000 fe67 	bl	8006628 <HAL_DMA_Start_IT>
 800595a:	4603      	mov	r3, r0
 800595c:	75fb      	strb	r3, [r7, #23]
 800595e:	e010      	b.n	8005982 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800596e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68d8      	ldr	r0, [r3, #12]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	f000 fe55 	bl	8006628 <HAL_DMA_Start_IT>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2201      	movs	r2, #1
 800599c:	409a      	lsls	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e005      	b.n	80059b4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f043 0204 	orr.w	r2, r3, #4
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	08005e49 	.word	0x08005e49
 80059c4:	08005e6b 	.word	0x08005e6b
 80059c8:	08005e87 	.word	0x08005e87
 80059cc:	08005f05 	.word	0x08005f05
 80059d0:	08005f27 	.word	0x08005f27
 80059d4:	08005f43 	.word	0x08005f43

080059d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e03e      	b.n	8005a6a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43da      	mvns	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	400a      	ands	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2201      	movs	r2, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	400a      	ands	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f863 	bl	8006afc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e00c      	b.n	8005a62 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 f855 	bl	8006afc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005a60:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01d      	beq.n	8005ad0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f043 0201 	orr.w	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ac8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f86f 	bl	8005bae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01d      	beq.n	8005b16 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d018      	beq.n	8005b16 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f043 0202 	orr.w	r2, r3, #2
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005afe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f9ed 	bl	8005ef0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e015      	b.n	8005b66 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d105      	bne.n	8005b52 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e004      	b.n	8005b5c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	3314      	adds	r3, #20
 8005b5a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_DAC_ConfigChannel+0x1e>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e12a      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	795b      	ldrb	r3, [r3, #5]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_DAC_ConfigChannel+0x2e>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e124      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x278>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d17a      	bne.n	8005cfc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c06:	f7fe f88b 	bl	8003d20 <HAL_GetTick>
 8005c0a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d13d      	bne.n	8005c8e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c12:	e018      	b.n	8005c46 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c14:	f7fe f884 	bl	8003d20 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d911      	bls.n	8005c46 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c28:	4b86      	ldr	r3, [pc, #536]	; (8005e44 <HAL_DAC_ConfigChannel+0x280>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f043 0208 	orr.w	r2, r3, #8
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e0fa      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4c:	4b7d      	ldr	r3, [pc, #500]	; (8005e44 <HAL_DAC_ConfigChannel+0x280>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1df      	bne.n	8005c14 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	6992      	ldr	r2, [r2, #24]
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c5e:	e020      	b.n	8005ca2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c60:	f7fe f85e 	bl	8003d20 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d90f      	bls.n	8005c8e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da0a      	bge.n	8005c8e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f043 0208 	orr.w	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2203      	movs	r2, #3
 8005c88:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0d6      	b.n	8005e3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dbe3      	blt.n	8005c60 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	6992      	ldr	r2, [r2, #24]
 8005ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	ea02 0103 	and.w	r1, r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	21ff      	movs	r1, #255	; 0xff
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	ea02 0103 	and.w	r1, r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11d      	bne.n	8005d40 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	221f      	movs	r2, #31
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2207      	movs	r2, #7
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d102      	bne.n	8005d6a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	e00f      	b.n	8005d8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d102      	bne.n	8005d78 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005d72:	2301      	movs	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	e008      	b.n	8005d8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005d80:	2301      	movs	r3, #1
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
 8005d84:	e001      	b.n	8005d8a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6819      	ldr	r1, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43da      	mvns	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	400a      	ands	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	22c0      	movs	r2, #192	; 0xc0
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43da      	mvns	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	400a      	ands	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	; 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20008000 	.word	0x20008000

08005e48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff fe8b 	bl	8005b72 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	711a      	strb	r2, [r3, #4]
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fe84 	bl	8005b86 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff fe7a 	bl	8005b9a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	711a      	strb	r2, [r3, #4]
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff ffce 	bl	8005eb4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	711a      	strb	r2, [r3, #4]
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ffc7 	bl	8005ec8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ffbd 	bl	8005edc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	711a      	strb	r2, [r3, #4]
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f78:	f7fd fed2 	bl	8003d20 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e316      	b.n	80065b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a66      	ldr	r2, [pc, #408]	; (8006128 <HAL_DMA_Init+0x1b8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d04a      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a65      	ldr	r2, [pc, #404]	; (800612c <HAL_DMA_Init+0x1bc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d045      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a63      	ldr	r2, [pc, #396]	; (8006130 <HAL_DMA_Init+0x1c0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d040      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a62      	ldr	r2, [pc, #392]	; (8006134 <HAL_DMA_Init+0x1c4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d03b      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a60      	ldr	r2, [pc, #384]	; (8006138 <HAL_DMA_Init+0x1c8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d036      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5f      	ldr	r2, [pc, #380]	; (800613c <HAL_DMA_Init+0x1cc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d031      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5d      	ldr	r2, [pc, #372]	; (8006140 <HAL_DMA_Init+0x1d0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d02c      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5c      	ldr	r2, [pc, #368]	; (8006144 <HAL_DMA_Init+0x1d4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d027      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5a      	ldr	r2, [pc, #360]	; (8006148 <HAL_DMA_Init+0x1d8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a59      	ldr	r2, [pc, #356]	; (800614c <HAL_DMA_Init+0x1dc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d01d      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a57      	ldr	r2, [pc, #348]	; (8006150 <HAL_DMA_Init+0x1e0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a56      	ldr	r2, [pc, #344]	; (8006154 <HAL_DMA_Init+0x1e4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a54      	ldr	r2, [pc, #336]	; (8006158 <HAL_DMA_Init+0x1e8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a53      	ldr	r2, [pc, #332]	; (800615c <HAL_DMA_Init+0x1ec>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a51      	ldr	r2, [pc, #324]	; (8006160 <HAL_DMA_Init+0x1f0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_DMA_Init+0xb8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_DMA_Init+0x1f4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d101      	bne.n	800602c <HAL_DMA_Init+0xbc>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_DMA_Init+0xbe>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 813b 	beq.w	80062aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a37      	ldr	r2, [pc, #220]	; (8006128 <HAL_DMA_Init+0x1b8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04a      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a36      	ldr	r2, [pc, #216]	; (800612c <HAL_DMA_Init+0x1bc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d045      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a34      	ldr	r2, [pc, #208]	; (8006130 <HAL_DMA_Init+0x1c0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d040      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a33      	ldr	r2, [pc, #204]	; (8006134 <HAL_DMA_Init+0x1c4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d03b      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a31      	ldr	r2, [pc, #196]	; (8006138 <HAL_DMA_Init+0x1c8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d036      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a30      	ldr	r2, [pc, #192]	; (800613c <HAL_DMA_Init+0x1cc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d031      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <HAL_DMA_Init+0x1d0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02c      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <HAL_DMA_Init+0x1d4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d027      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <HAL_DMA_Init+0x1d8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2a      	ldr	r2, [pc, #168]	; (800614c <HAL_DMA_Init+0x1dc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d01d      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a28      	ldr	r2, [pc, #160]	; (8006150 <HAL_DMA_Init+0x1e0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_DMA_Init+0x1e4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <HAL_DMA_Init+0x1e8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a24      	ldr	r2, [pc, #144]	; (800615c <HAL_DMA_Init+0x1ec>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_DMA_Init+0x1f0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_DMA_Init+0x174>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a21      	ldr	r2, [pc, #132]	; (8006164 <HAL_DMA_Init+0x1f4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d108      	bne.n	80060f6 <HAL_DMA_Init+0x186>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0201 	bic.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e007      	b.n	8006106 <HAL_DMA_Init+0x196>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006106:	e02f      	b.n	8006168 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006108:	f7fd fe0a 	bl	8003d20 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b05      	cmp	r3, #5
 8006114:	d928      	bls.n	8006168 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2203      	movs	r2, #3
 8006120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e246      	b.n	80065b6 <HAL_DMA_Init+0x646>
 8006128:	40020010 	.word	0x40020010
 800612c:	40020028 	.word	0x40020028
 8006130:	40020040 	.word	0x40020040
 8006134:	40020058 	.word	0x40020058
 8006138:	40020070 	.word	0x40020070
 800613c:	40020088 	.word	0x40020088
 8006140:	400200a0 	.word	0x400200a0
 8006144:	400200b8 	.word	0x400200b8
 8006148:	40020410 	.word	0x40020410
 800614c:	40020428 	.word	0x40020428
 8006150:	40020440 	.word	0x40020440
 8006154:	40020458 	.word	0x40020458
 8006158:	40020470 	.word	0x40020470
 800615c:	40020488 	.word	0x40020488
 8006160:	400204a0 	.word	0x400204a0
 8006164:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1c8      	bne.n	8006108 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4b83      	ldr	r3, [pc, #524]	; (8006390 <HAL_DMA_Init+0x420>)
 8006182:	4013      	ands	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800618e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d107      	bne.n	80061cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	4313      	orrs	r3, r2
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80061cc:	4b71      	ldr	r3, [pc, #452]	; (8006394 <HAL_DMA_Init+0x424>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4b71      	ldr	r3, [pc, #452]	; (8006398 <HAL_DMA_Init+0x428>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d8:	d328      	bcc.n	800622c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b28      	cmp	r3, #40	; 0x28
 80061e0:	d903      	bls.n	80061ea <HAL_DMA_Init+0x27a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b2e      	cmp	r3, #46	; 0x2e
 80061e8:	d917      	bls.n	800621a <HAL_DMA_Init+0x2aa>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b3e      	cmp	r3, #62	; 0x3e
 80061f0:	d903      	bls.n	80061fa <HAL_DMA_Init+0x28a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b42      	cmp	r3, #66	; 0x42
 80061f8:	d90f      	bls.n	800621a <HAL_DMA_Init+0x2aa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b46      	cmp	r3, #70	; 0x46
 8006200:	d903      	bls.n	800620a <HAL_DMA_Init+0x29a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b48      	cmp	r3, #72	; 0x48
 8006208:	d907      	bls.n	800621a <HAL_DMA_Init+0x2aa>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b4e      	cmp	r3, #78	; 0x4e
 8006210:	d905      	bls.n	800621e <HAL_DMA_Init+0x2ae>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b52      	cmp	r3, #82	; 0x52
 8006218:	d801      	bhi.n	800621e <HAL_DMA_Init+0x2ae>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <HAL_DMA_Init+0x2b0>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0307 	bic.w	r3, r3, #7
 8006242:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b04      	cmp	r3, #4
 8006254:	d117      	bne.n	8006286 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 fb3f 	bl	80088ec <DMA_CheckFifoParam>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e197      	b.n	80065b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f002 fa7a 	bl	8008788 <DMA_CalcBaseAndBitshift>
 8006294:	4603      	mov	r3, r0
 8006296:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	223f      	movs	r2, #63	; 0x3f
 80062a2:	409a      	lsls	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]
 80062a8:	e0cd      	b.n	8006446 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a3b      	ldr	r2, [pc, #236]	; (800639c <HAL_DMA_Init+0x42c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a39      	ldr	r2, [pc, #228]	; (80063a0 <HAL_DMA_Init+0x430>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01d      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a38      	ldr	r2, [pc, #224]	; (80063a4 <HAL_DMA_Init+0x434>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d018      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a36      	ldr	r2, [pc, #216]	; (80063a8 <HAL_DMA_Init+0x438>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a35      	ldr	r2, [pc, #212]	; (80063ac <HAL_DMA_Init+0x43c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a33      	ldr	r2, [pc, #204]	; (80063b0 <HAL_DMA_Init+0x440>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a32      	ldr	r2, [pc, #200]	; (80063b4 <HAL_DMA_Init+0x444>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_DMA_Init+0x38a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <HAL_DMA_Init+0x448>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d101      	bne.n	80062fe <HAL_DMA_Init+0x38e>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <HAL_DMA_Init+0x390>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8097 	beq.w	8006434 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a24      	ldr	r2, [pc, #144]	; (800639c <HAL_DMA_Init+0x42c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d021      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	; (80063a0 <HAL_DMA_Init+0x430>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01c      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_DMA_Init+0x434>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d017      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <HAL_DMA_Init+0x438>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d012      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <HAL_DMA_Init+0x43c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00d      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <HAL_DMA_Init+0x440>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d008      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1b      	ldr	r2, [pc, #108]	; (80063b4 <HAL_DMA_Init+0x444>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <HAL_DMA_Init+0x3e4>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <HAL_DMA_Init+0x448>)
 8006352:	4293      	cmp	r3, r2
 8006354:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <HAL_DMA_Init+0x44c>)
 8006372:	4013      	ands	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d020      	beq.n	80063c0 <HAL_DMA_Init+0x450>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d102      	bne.n	800638c <HAL_DMA_Init+0x41c>
 8006386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800638a:	e01a      	b.n	80063c2 <HAL_DMA_Init+0x452>
 800638c:	2300      	movs	r3, #0
 800638e:	e018      	b.n	80063c2 <HAL_DMA_Init+0x452>
 8006390:	fe10803f 	.word	0xfe10803f
 8006394:	5c001000 	.word	0x5c001000
 8006398:	ffff0000 	.word	0xffff0000
 800639c:	58025408 	.word	0x58025408
 80063a0:	5802541c 	.word	0x5802541c
 80063a4:	58025430 	.word	0x58025430
 80063a8:	58025444 	.word	0x58025444
 80063ac:	58025458 	.word	0x58025458
 80063b0:	5802546c 	.word	0x5802546c
 80063b4:	58025480 	.word	0x58025480
 80063b8:	58025494 	.word	0x58025494
 80063bc:	fffe000f 	.word	0xfffe000f
 80063c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68d2      	ldr	r2, [r2, #12]
 80063c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	4b6e      	ldr	r3, [pc, #440]	; (80065c0 <HAL_DMA_Init+0x650>)
 8006408:	4413      	add	r3, r2
 800640a:	4a6e      	ldr	r2, [pc, #440]	; (80065c4 <HAL_DMA_Init+0x654>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	009a      	lsls	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f002 f9b5 	bl	8008788 <DMA_CalcBaseAndBitshift>
 800641e:	4603      	mov	r3, r0
 8006420:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2201      	movs	r2, #1
 800642c:	409a      	lsls	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	e008      	b.n	8006446 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2203      	movs	r2, #3
 800643e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0b7      	b.n	80065b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5f      	ldr	r2, [pc, #380]	; (80065c8 <HAL_DMA_Init+0x658>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d072      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a5d      	ldr	r2, [pc, #372]	; (80065cc <HAL_DMA_Init+0x65c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d06d      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5c      	ldr	r2, [pc, #368]	; (80065d0 <HAL_DMA_Init+0x660>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d068      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5a      	ldr	r2, [pc, #360]	; (80065d4 <HAL_DMA_Init+0x664>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d063      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a59      	ldr	r2, [pc, #356]	; (80065d8 <HAL_DMA_Init+0x668>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d05e      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a57      	ldr	r2, [pc, #348]	; (80065dc <HAL_DMA_Init+0x66c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d059      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a56      	ldr	r2, [pc, #344]	; (80065e0 <HAL_DMA_Init+0x670>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d054      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <HAL_DMA_Init+0x674>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d04f      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a53      	ldr	r2, [pc, #332]	; (80065e8 <HAL_DMA_Init+0x678>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d04a      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a51      	ldr	r2, [pc, #324]	; (80065ec <HAL_DMA_Init+0x67c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d045      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a50      	ldr	r2, [pc, #320]	; (80065f0 <HAL_DMA_Init+0x680>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d040      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a4e      	ldr	r2, [pc, #312]	; (80065f4 <HAL_DMA_Init+0x684>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d03b      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4d      	ldr	r2, [pc, #308]	; (80065f8 <HAL_DMA_Init+0x688>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d036      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a4b      	ldr	r2, [pc, #300]	; (80065fc <HAL_DMA_Init+0x68c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d031      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a4a      	ldr	r2, [pc, #296]	; (8006600 <HAL_DMA_Init+0x690>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d02c      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a48      	ldr	r2, [pc, #288]	; (8006604 <HAL_DMA_Init+0x694>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d027      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a47      	ldr	r2, [pc, #284]	; (8006608 <HAL_DMA_Init+0x698>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d022      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a45      	ldr	r2, [pc, #276]	; (800660c <HAL_DMA_Init+0x69c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01d      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a44      	ldr	r2, [pc, #272]	; (8006610 <HAL_DMA_Init+0x6a0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a42      	ldr	r2, [pc, #264]	; (8006614 <HAL_DMA_Init+0x6a4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a41      	ldr	r2, [pc, #260]	; (8006618 <HAL_DMA_Init+0x6a8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a3f      	ldr	r2, [pc, #252]	; (800661c <HAL_DMA_Init+0x6ac>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3e      	ldr	r2, [pc, #248]	; (8006620 <HAL_DMA_Init+0x6b0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_DMA_Init+0x5c6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a3c      	ldr	r2, [pc, #240]	; (8006624 <HAL_DMA_Init+0x6b4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <HAL_DMA_Init+0x5ca>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <HAL_DMA_Init+0x5cc>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d032      	beq.n	80065a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f002 fa4f 	bl	80089e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d102      	bne.n	8006554 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006568:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d010      	beq.n	8006594 <HAL_DMA_Init+0x624>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b08      	cmp	r3, #8
 8006578:	d80c      	bhi.n	8006594 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f002 facc 	bl	8008b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	e008      	b.n	80065a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	a7fdabf8 	.word	0xa7fdabf8
 80065c4:	cccccccd 	.word	0xcccccccd
 80065c8:	40020010 	.word	0x40020010
 80065cc:	40020028 	.word	0x40020028
 80065d0:	40020040 	.word	0x40020040
 80065d4:	40020058 	.word	0x40020058
 80065d8:	40020070 	.word	0x40020070
 80065dc:	40020088 	.word	0x40020088
 80065e0:	400200a0 	.word	0x400200a0
 80065e4:	400200b8 	.word	0x400200b8
 80065e8:	40020410 	.word	0x40020410
 80065ec:	40020428 	.word	0x40020428
 80065f0:	40020440 	.word	0x40020440
 80065f4:	40020458 	.word	0x40020458
 80065f8:	40020470 	.word	0x40020470
 80065fc:	40020488 	.word	0x40020488
 8006600:	400204a0 	.word	0x400204a0
 8006604:	400204b8 	.word	0x400204b8
 8006608:	58025408 	.word	0x58025408
 800660c:	5802541c 	.word	0x5802541c
 8006610:	58025430 	.word	0x58025430
 8006614:	58025444 	.word	0x58025444
 8006618:	58025458 	.word	0x58025458
 800661c:	5802546c 	.word	0x5802546c
 8006620:	58025480 	.word	0x58025480
 8006624:	58025494 	.word	0x58025494

08006628 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e226      	b.n	8006a92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_DMA_Start_IT+0x2a>
 800664e:	2302      	movs	r3, #2
 8006650:	e21f      	b.n	8006a92 <HAL_DMA_Start_IT+0x46a>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b01      	cmp	r3, #1
 8006664:	f040 820a 	bne.w	8006a7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a68      	ldr	r2, [pc, #416]	; (800681c <HAL_DMA_Start_IT+0x1f4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d04a      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a66      	ldr	r2, [pc, #408]	; (8006820 <HAL_DMA_Start_IT+0x1f8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d045      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a65      	ldr	r2, [pc, #404]	; (8006824 <HAL_DMA_Start_IT+0x1fc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d040      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a63      	ldr	r2, [pc, #396]	; (8006828 <HAL_DMA_Start_IT+0x200>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d03b      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a62      	ldr	r2, [pc, #392]	; (800682c <HAL_DMA_Start_IT+0x204>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d036      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a60      	ldr	r2, [pc, #384]	; (8006830 <HAL_DMA_Start_IT+0x208>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d031      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a5f      	ldr	r2, [pc, #380]	; (8006834 <HAL_DMA_Start_IT+0x20c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d02c      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a5d      	ldr	r2, [pc, #372]	; (8006838 <HAL_DMA_Start_IT+0x210>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d027      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a5c      	ldr	r2, [pc, #368]	; (800683c <HAL_DMA_Start_IT+0x214>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d022      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a5a      	ldr	r2, [pc, #360]	; (8006840 <HAL_DMA_Start_IT+0x218>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01d      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a59      	ldr	r2, [pc, #356]	; (8006844 <HAL_DMA_Start_IT+0x21c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d018      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a57      	ldr	r2, [pc, #348]	; (8006848 <HAL_DMA_Start_IT+0x220>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a56      	ldr	r2, [pc, #344]	; (800684c <HAL_DMA_Start_IT+0x224>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a54      	ldr	r2, [pc, #336]	; (8006850 <HAL_DMA_Start_IT+0x228>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a53      	ldr	r2, [pc, #332]	; (8006854 <HAL_DMA_Start_IT+0x22c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_DMA_Start_IT+0xee>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a51      	ldr	r2, [pc, #324]	; (8006858 <HAL_DMA_Start_IT+0x230>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <HAL_DMA_Start_IT+0x100>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e007      	b.n	8006738 <HAL_DMA_Start_IT+0x110>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f001 fe76 	bl	8008430 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a34      	ldr	r2, [pc, #208]	; (800681c <HAL_DMA_Start_IT+0x1f4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d04a      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a33      	ldr	r2, [pc, #204]	; (8006820 <HAL_DMA_Start_IT+0x1f8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d045      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a31      	ldr	r2, [pc, #196]	; (8006824 <HAL_DMA_Start_IT+0x1fc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d040      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a30      	ldr	r2, [pc, #192]	; (8006828 <HAL_DMA_Start_IT+0x200>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d03b      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2e      	ldr	r2, [pc, #184]	; (800682c <HAL_DMA_Start_IT+0x204>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d036      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <HAL_DMA_Start_IT+0x208>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d031      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2b      	ldr	r2, [pc, #172]	; (8006834 <HAL_DMA_Start_IT+0x20c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d02c      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <HAL_DMA_Start_IT+0x210>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d027      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a28      	ldr	r2, [pc, #160]	; (800683c <HAL_DMA_Start_IT+0x214>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a27      	ldr	r2, [pc, #156]	; (8006840 <HAL_DMA_Start_IT+0x218>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01d      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a25      	ldr	r2, [pc, #148]	; (8006844 <HAL_DMA_Start_IT+0x21c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a24      	ldr	r2, [pc, #144]	; (8006848 <HAL_DMA_Start_IT+0x220>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a22      	ldr	r2, [pc, #136]	; (800684c <HAL_DMA_Start_IT+0x224>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a21      	ldr	r2, [pc, #132]	; (8006850 <HAL_DMA_Start_IT+0x228>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <HAL_DMA_Start_IT+0x22c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_DMA_Start_IT+0x1bc>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <HAL_DMA_Start_IT+0x230>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d101      	bne.n	80067e8 <HAL_DMA_Start_IT+0x1c0>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <HAL_DMA_Start_IT+0x1c2>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d036      	beq.n	800685c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f023 021e 	bic.w	r2, r3, #30
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0216 	orr.w	r2, r2, #22
 8006800:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03e      	beq.n	8006888 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e035      	b.n	8006888 <HAL_DMA_Start_IT+0x260>
 800681c:	40020010 	.word	0x40020010
 8006820:	40020028 	.word	0x40020028
 8006824:	40020040 	.word	0x40020040
 8006828:	40020058 	.word	0x40020058
 800682c:	40020070 	.word	0x40020070
 8006830:	40020088 	.word	0x40020088
 8006834:	400200a0 	.word	0x400200a0
 8006838:	400200b8 	.word	0x400200b8
 800683c:	40020410 	.word	0x40020410
 8006840:	40020428 	.word	0x40020428
 8006844:	40020440 	.word	0x40020440
 8006848:	40020458 	.word	0x40020458
 800684c:	40020470 	.word	0x40020470
 8006850:	40020488 	.word	0x40020488
 8006854:	400204a0 	.word	0x400204a0
 8006858:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 020e 	bic.w	r2, r3, #14
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 020a 	orr.w	r2, r2, #10
 800686e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0204 	orr.w	r2, r2, #4
 8006886:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a83      	ldr	r2, [pc, #524]	; (8006a9c <HAL_DMA_Start_IT+0x474>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d072      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a82      	ldr	r2, [pc, #520]	; (8006aa0 <HAL_DMA_Start_IT+0x478>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d06d      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a80      	ldr	r2, [pc, #512]	; (8006aa4 <HAL_DMA_Start_IT+0x47c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d068      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a7f      	ldr	r2, [pc, #508]	; (8006aa8 <HAL_DMA_Start_IT+0x480>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d063      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a7d      	ldr	r2, [pc, #500]	; (8006aac <HAL_DMA_Start_IT+0x484>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d05e      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a7c      	ldr	r2, [pc, #496]	; (8006ab0 <HAL_DMA_Start_IT+0x488>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d059      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7a      	ldr	r2, [pc, #488]	; (8006ab4 <HAL_DMA_Start_IT+0x48c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d054      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a79      	ldr	r2, [pc, #484]	; (8006ab8 <HAL_DMA_Start_IT+0x490>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04f      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a77      	ldr	r2, [pc, #476]	; (8006abc <HAL_DMA_Start_IT+0x494>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04a      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a76      	ldr	r2, [pc, #472]	; (8006ac0 <HAL_DMA_Start_IT+0x498>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d045      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a74      	ldr	r2, [pc, #464]	; (8006ac4 <HAL_DMA_Start_IT+0x49c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d040      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a73      	ldr	r2, [pc, #460]	; (8006ac8 <HAL_DMA_Start_IT+0x4a0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d03b      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a71      	ldr	r2, [pc, #452]	; (8006acc <HAL_DMA_Start_IT+0x4a4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d036      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a70      	ldr	r2, [pc, #448]	; (8006ad0 <HAL_DMA_Start_IT+0x4a8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d031      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a6e      	ldr	r2, [pc, #440]	; (8006ad4 <HAL_DMA_Start_IT+0x4ac>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d02c      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6d      	ldr	r2, [pc, #436]	; (8006ad8 <HAL_DMA_Start_IT+0x4b0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d027      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6b      	ldr	r2, [pc, #428]	; (8006adc <HAL_DMA_Start_IT+0x4b4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d022      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a6a      	ldr	r2, [pc, #424]	; (8006ae0 <HAL_DMA_Start_IT+0x4b8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d01d      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a68      	ldr	r2, [pc, #416]	; (8006ae4 <HAL_DMA_Start_IT+0x4bc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d018      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a67      	ldr	r2, [pc, #412]	; (8006ae8 <HAL_DMA_Start_IT+0x4c0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a65      	ldr	r2, [pc, #404]	; (8006aec <HAL_DMA_Start_IT+0x4c4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a64      	ldr	r2, [pc, #400]	; (8006af0 <HAL_DMA_Start_IT+0x4c8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a62      	ldr	r2, [pc, #392]	; (8006af4 <HAL_DMA_Start_IT+0x4cc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_DMA_Start_IT+0x350>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a61      	ldr	r2, [pc, #388]	; (8006af8 <HAL_DMA_Start_IT+0x4d0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <HAL_DMA_Start_IT+0x354>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <HAL_DMA_Start_IT+0x356>
 800697c:	2300      	movs	r3, #0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01a      	beq.n	80069b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800699e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a37      	ldr	r2, [pc, #220]	; (8006a9c <HAL_DMA_Start_IT+0x474>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d04a      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a36      	ldr	r2, [pc, #216]	; (8006aa0 <HAL_DMA_Start_IT+0x478>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d045      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a34      	ldr	r2, [pc, #208]	; (8006aa4 <HAL_DMA_Start_IT+0x47c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d040      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a33      	ldr	r2, [pc, #204]	; (8006aa8 <HAL_DMA_Start_IT+0x480>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d03b      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a31      	ldr	r2, [pc, #196]	; (8006aac <HAL_DMA_Start_IT+0x484>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d036      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a30      	ldr	r2, [pc, #192]	; (8006ab0 <HAL_DMA_Start_IT+0x488>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d031      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <HAL_DMA_Start_IT+0x48c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d02c      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a2d      	ldr	r2, [pc, #180]	; (8006ab8 <HAL_DMA_Start_IT+0x490>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d027      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <HAL_DMA_Start_IT+0x494>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d022      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <HAL_DMA_Start_IT+0x498>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d01d      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a28      	ldr	r2, [pc, #160]	; (8006ac4 <HAL_DMA_Start_IT+0x49c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d018      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a27      	ldr	r2, [pc, #156]	; (8006ac8 <HAL_DMA_Start_IT+0x4a0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a25      	ldr	r2, [pc, #148]	; (8006acc <HAL_DMA_Start_IT+0x4a4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a24      	ldr	r2, [pc, #144]	; (8006ad0 <HAL_DMA_Start_IT+0x4a8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d009      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a22      	ldr	r2, [pc, #136]	; (8006ad4 <HAL_DMA_Start_IT+0x4ac>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_DMA_Start_IT+0x430>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a21      	ldr	r2, [pc, #132]	; (8006ad8 <HAL_DMA_Start_IT+0x4b0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d108      	bne.n	8006a6a <HAL_DMA_Start_IT+0x442>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e012      	b.n	8006a90 <HAL_DMA_Start_IT+0x468>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0201 	orr.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e009      	b.n	8006a90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40020010 	.word	0x40020010
 8006aa0:	40020028 	.word	0x40020028
 8006aa4:	40020040 	.word	0x40020040
 8006aa8:	40020058 	.word	0x40020058
 8006aac:	40020070 	.word	0x40020070
 8006ab0:	40020088 	.word	0x40020088
 8006ab4:	400200a0 	.word	0x400200a0
 8006ab8:	400200b8 	.word	0x400200b8
 8006abc:	40020410 	.word	0x40020410
 8006ac0:	40020428 	.word	0x40020428
 8006ac4:	40020440 	.word	0x40020440
 8006ac8:	40020458 	.word	0x40020458
 8006acc:	40020470 	.word	0x40020470
 8006ad0:	40020488 	.word	0x40020488
 8006ad4:	400204a0 	.word	0x400204a0
 8006ad8:	400204b8 	.word	0x400204b8
 8006adc:	58025408 	.word	0x58025408
 8006ae0:	5802541c 	.word	0x5802541c
 8006ae4:	58025430 	.word	0x58025430
 8006ae8:	58025444 	.word	0x58025444
 8006aec:	58025458 	.word	0x58025458
 8006af0:	5802546c 	.word	0x5802546c
 8006af4:	58025480 	.word	0x58025480
 8006af8:	58025494 	.word	0x58025494

08006afc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006b04:	f7fd f90c 	bl	8003d20 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e2dc      	b.n	80070ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d008      	beq.n	8006b32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2280      	movs	r2, #128	; 0x80
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e2cd      	b.n	80070ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a76      	ldr	r2, [pc, #472]	; (8006d10 <HAL_DMA_Abort+0x214>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04a      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a74      	ldr	r2, [pc, #464]	; (8006d14 <HAL_DMA_Abort+0x218>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d045      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a73      	ldr	r2, [pc, #460]	; (8006d18 <HAL_DMA_Abort+0x21c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a71      	ldr	r2, [pc, #452]	; (8006d1c <HAL_DMA_Abort+0x220>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d03b      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a70      	ldr	r2, [pc, #448]	; (8006d20 <HAL_DMA_Abort+0x224>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d036      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a6e      	ldr	r2, [pc, #440]	; (8006d24 <HAL_DMA_Abort+0x228>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6d      	ldr	r2, [pc, #436]	; (8006d28 <HAL_DMA_Abort+0x22c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02c      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6b      	ldr	r2, [pc, #428]	; (8006d2c <HAL_DMA_Abort+0x230>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d027      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6a      	ldr	r2, [pc, #424]	; (8006d30 <HAL_DMA_Abort+0x234>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d022      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a68      	ldr	r2, [pc, #416]	; (8006d34 <HAL_DMA_Abort+0x238>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a67      	ldr	r2, [pc, #412]	; (8006d38 <HAL_DMA_Abort+0x23c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a65      	ldr	r2, [pc, #404]	; (8006d3c <HAL_DMA_Abort+0x240>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a64      	ldr	r2, [pc, #400]	; (8006d40 <HAL_DMA_Abort+0x244>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a62      	ldr	r2, [pc, #392]	; (8006d44 <HAL_DMA_Abort+0x248>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a61      	ldr	r2, [pc, #388]	; (8006d48 <HAL_DMA_Abort+0x24c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_DMA_Abort+0xd6>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a5f      	ldr	r2, [pc, #380]	; (8006d4c <HAL_DMA_Abort+0x250>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_DMA_Abort+0xda>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <HAL_DMA_Abort+0xdc>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d013      	beq.n	8006c04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 021e 	bic.w	r2, r2, #30
 8006bea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	e00a      	b.n	8006c1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 020e 	bic.w	r2, r2, #14
 8006c12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a3c      	ldr	r2, [pc, #240]	; (8006d10 <HAL_DMA_Abort+0x214>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d072      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a3a      	ldr	r2, [pc, #232]	; (8006d14 <HAL_DMA_Abort+0x218>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d06d      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a39      	ldr	r2, [pc, #228]	; (8006d18 <HAL_DMA_Abort+0x21c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d068      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a37      	ldr	r2, [pc, #220]	; (8006d1c <HAL_DMA_Abort+0x220>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d063      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a36      	ldr	r2, [pc, #216]	; (8006d20 <HAL_DMA_Abort+0x224>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d05e      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a34      	ldr	r2, [pc, #208]	; (8006d24 <HAL_DMA_Abort+0x228>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d059      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a33      	ldr	r2, [pc, #204]	; (8006d28 <HAL_DMA_Abort+0x22c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d054      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a31      	ldr	r2, [pc, #196]	; (8006d2c <HAL_DMA_Abort+0x230>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d04f      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a30      	ldr	r2, [pc, #192]	; (8006d30 <HAL_DMA_Abort+0x234>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a2e      	ldr	r2, [pc, #184]	; (8006d34 <HAL_DMA_Abort+0x238>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <HAL_DMA_Abort+0x23c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a2b      	ldr	r2, [pc, #172]	; (8006d3c <HAL_DMA_Abort+0x240>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <HAL_DMA_Abort+0x244>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a28      	ldr	r2, [pc, #160]	; (8006d44 <HAL_DMA_Abort+0x248>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <HAL_DMA_Abort+0x24c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a25      	ldr	r2, [pc, #148]	; (8006d4c <HAL_DMA_Abort+0x250>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <HAL_DMA_Abort+0x254>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a22      	ldr	r2, [pc, #136]	; (8006d54 <HAL_DMA_Abort+0x258>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <HAL_DMA_Abort+0x25c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <HAL_DMA_Abort+0x260>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <HAL_DMA_Abort+0x264>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <HAL_DMA_Abort+0x268>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <HAL_DMA_Abort+0x26c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_Abort+0x20e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a19      	ldr	r2, [pc, #100]	; (8006d6c <HAL_DMA_Abort+0x270>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d132      	bne.n	8006d70 <HAL_DMA_Abort+0x274>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e031      	b.n	8006d72 <HAL_DMA_Abort+0x276>
 8006d0e:	bf00      	nop
 8006d10:	40020010 	.word	0x40020010
 8006d14:	40020028 	.word	0x40020028
 8006d18:	40020040 	.word	0x40020040
 8006d1c:	40020058 	.word	0x40020058
 8006d20:	40020070 	.word	0x40020070
 8006d24:	40020088 	.word	0x40020088
 8006d28:	400200a0 	.word	0x400200a0
 8006d2c:	400200b8 	.word	0x400200b8
 8006d30:	40020410 	.word	0x40020410
 8006d34:	40020428 	.word	0x40020428
 8006d38:	40020440 	.word	0x40020440
 8006d3c:	40020458 	.word	0x40020458
 8006d40:	40020470 	.word	0x40020470
 8006d44:	40020488 	.word	0x40020488
 8006d48:	400204a0 	.word	0x400204a0
 8006d4c:	400204b8 	.word	0x400204b8
 8006d50:	58025408 	.word	0x58025408
 8006d54:	5802541c 	.word	0x5802541c
 8006d58:	58025430 	.word	0x58025430
 8006d5c:	58025444 	.word	0x58025444
 8006d60:	58025458 	.word	0x58025458
 8006d64:	5802546c 	.word	0x5802546c
 8006d68:	58025480 	.word	0x58025480
 8006d6c:	58025494 	.word	0x58025494
 8006d70:	2300      	movs	r3, #0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6d      	ldr	r2, [pc, #436]	; (8006f40 <HAL_DMA_Abort+0x444>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d04a      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6b      	ldr	r2, [pc, #428]	; (8006f44 <HAL_DMA_Abort+0x448>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d045      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a6a      	ldr	r2, [pc, #424]	; (8006f48 <HAL_DMA_Abort+0x44c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d040      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a68      	ldr	r2, [pc, #416]	; (8006f4c <HAL_DMA_Abort+0x450>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d03b      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a67      	ldr	r2, [pc, #412]	; (8006f50 <HAL_DMA_Abort+0x454>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d036      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a65      	ldr	r2, [pc, #404]	; (8006f54 <HAL_DMA_Abort+0x458>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d031      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a64      	ldr	r2, [pc, #400]	; (8006f58 <HAL_DMA_Abort+0x45c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d02c      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a62      	ldr	r2, [pc, #392]	; (8006f5c <HAL_DMA_Abort+0x460>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d027      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a61      	ldr	r2, [pc, #388]	; (8006f60 <HAL_DMA_Abort+0x464>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d022      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a5f      	ldr	r2, [pc, #380]	; (8006f64 <HAL_DMA_Abort+0x468>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01d      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5e      	ldr	r2, [pc, #376]	; (8006f68 <HAL_DMA_Abort+0x46c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d018      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a5c      	ldr	r2, [pc, #368]	; (8006f6c <HAL_DMA_Abort+0x470>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a5b      	ldr	r2, [pc, #364]	; (8006f70 <HAL_DMA_Abort+0x474>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a59      	ldr	r2, [pc, #356]	; (8006f74 <HAL_DMA_Abort+0x478>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a58      	ldr	r2, [pc, #352]	; (8006f78 <HAL_DMA_Abort+0x47c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_DMA_Abort+0x32a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a56      	ldr	r2, [pc, #344]	; (8006f7c <HAL_DMA_Abort+0x480>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d108      	bne.n	8006e38 <HAL_DMA_Abort+0x33c>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e007      	b.n	8006e48 <HAL_DMA_Abort+0x34c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e48:	e013      	b.n	8006e72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e4a:	f7fc ff69 	bl	8003d20 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b05      	cmp	r3, #5
 8006e56:	d90c      	bls.n	8006e72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2203      	movs	r2, #3
 8006e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e12d      	b.n	80070ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2f      	ldr	r2, [pc, #188]	; (8006f40 <HAL_DMA_Abort+0x444>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d04a      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2d      	ldr	r2, [pc, #180]	; (8006f44 <HAL_DMA_Abort+0x448>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d045      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2c      	ldr	r2, [pc, #176]	; (8006f48 <HAL_DMA_Abort+0x44c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d040      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <HAL_DMA_Abort+0x450>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d03b      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <HAL_DMA_Abort+0x454>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d036      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <HAL_DMA_Abort+0x458>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d031      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <HAL_DMA_Abort+0x45c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d02c      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a24      	ldr	r2, [pc, #144]	; (8006f5c <HAL_DMA_Abort+0x460>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d027      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <HAL_DMA_Abort+0x464>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d022      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <HAL_DMA_Abort+0x468>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01d      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a20      	ldr	r2, [pc, #128]	; (8006f68 <HAL_DMA_Abort+0x46c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <HAL_DMA_Abort+0x470>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <HAL_DMA_Abort+0x474>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <HAL_DMA_Abort+0x478>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1a      	ldr	r2, [pc, #104]	; (8006f78 <HAL_DMA_Abort+0x47c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_DMA_Abort+0x422>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <HAL_DMA_Abort+0x480>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d101      	bne.n	8006f22 <HAL_DMA_Abort+0x426>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <HAL_DMA_Abort+0x428>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d02b      	beq.n	8006f80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	223f      	movs	r2, #63	; 0x3f
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	609a      	str	r2, [r3, #8]
 8006f3e:	e02a      	b.n	8006f96 <HAL_DMA_Abort+0x49a>
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2201      	movs	r2, #1
 8006f90:	409a      	lsls	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a4f      	ldr	r2, [pc, #316]	; (80070d8 <HAL_DMA_Abort+0x5dc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d072      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a4d      	ldr	r2, [pc, #308]	; (80070dc <HAL_DMA_Abort+0x5e0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d06d      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a4c      	ldr	r2, [pc, #304]	; (80070e0 <HAL_DMA_Abort+0x5e4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d068      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a4a      	ldr	r2, [pc, #296]	; (80070e4 <HAL_DMA_Abort+0x5e8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d063      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a49      	ldr	r2, [pc, #292]	; (80070e8 <HAL_DMA_Abort+0x5ec>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d05e      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a47      	ldr	r2, [pc, #284]	; (80070ec <HAL_DMA_Abort+0x5f0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d059      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a46      	ldr	r2, [pc, #280]	; (80070f0 <HAL_DMA_Abort+0x5f4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d054      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a44      	ldr	r2, [pc, #272]	; (80070f4 <HAL_DMA_Abort+0x5f8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d04f      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a43      	ldr	r2, [pc, #268]	; (80070f8 <HAL_DMA_Abort+0x5fc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d04a      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a41      	ldr	r2, [pc, #260]	; (80070fc <HAL_DMA_Abort+0x600>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d045      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a40      	ldr	r2, [pc, #256]	; (8007100 <HAL_DMA_Abort+0x604>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d040      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a3e      	ldr	r2, [pc, #248]	; (8007104 <HAL_DMA_Abort+0x608>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d03b      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a3d      	ldr	r2, [pc, #244]	; (8007108 <HAL_DMA_Abort+0x60c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d036      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a3b      	ldr	r2, [pc, #236]	; (800710c <HAL_DMA_Abort+0x610>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d031      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a3a      	ldr	r2, [pc, #232]	; (8007110 <HAL_DMA_Abort+0x614>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d02c      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a38      	ldr	r2, [pc, #224]	; (8007114 <HAL_DMA_Abort+0x618>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d027      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a37      	ldr	r2, [pc, #220]	; (8007118 <HAL_DMA_Abort+0x61c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d022      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a35      	ldr	r2, [pc, #212]	; (800711c <HAL_DMA_Abort+0x620>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01d      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a34      	ldr	r2, [pc, #208]	; (8007120 <HAL_DMA_Abort+0x624>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d018      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a32      	ldr	r2, [pc, #200]	; (8007124 <HAL_DMA_Abort+0x628>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a31      	ldr	r2, [pc, #196]	; (8007128 <HAL_DMA_Abort+0x62c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2f      	ldr	r2, [pc, #188]	; (800712c <HAL_DMA_Abort+0x630>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <HAL_DMA_Abort+0x634>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_DMA_Abort+0x58a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a2c      	ldr	r2, [pc, #176]	; (8007134 <HAL_DMA_Abort+0x638>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <HAL_DMA_Abort+0x58e>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <HAL_DMA_Abort+0x590>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d015      	beq.n	80070bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007098:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00c      	beq.n	80070bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40020010 	.word	0x40020010
 80070dc:	40020028 	.word	0x40020028
 80070e0:	40020040 	.word	0x40020040
 80070e4:	40020058 	.word	0x40020058
 80070e8:	40020070 	.word	0x40020070
 80070ec:	40020088 	.word	0x40020088
 80070f0:	400200a0 	.word	0x400200a0
 80070f4:	400200b8 	.word	0x400200b8
 80070f8:	40020410 	.word	0x40020410
 80070fc:	40020428 	.word	0x40020428
 8007100:	40020440 	.word	0x40020440
 8007104:	40020458 	.word	0x40020458
 8007108:	40020470 	.word	0x40020470
 800710c:	40020488 	.word	0x40020488
 8007110:	400204a0 	.word	0x400204a0
 8007114:	400204b8 	.word	0x400204b8
 8007118:	58025408 	.word	0x58025408
 800711c:	5802541c 	.word	0x5802541c
 8007120:	58025430 	.word	0x58025430
 8007124:	58025444 	.word	0x58025444
 8007128:	58025458 	.word	0x58025458
 800712c:	5802546c 	.word	0x5802546c
 8007130:	58025480 	.word	0x58025480
 8007134:	58025494 	.word	0x58025494

08007138 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e237      	b.n	80075ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d004      	beq.n	8007160 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2280      	movs	r2, #128	; 0x80
 800715a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e22c      	b.n	80075ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <HAL_DMA_Abort_IT+0x1a0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d04a      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5b      	ldr	r2, [pc, #364]	; (80072dc <HAL_DMA_Abort_IT+0x1a4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d045      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a59      	ldr	r2, [pc, #356]	; (80072e0 <HAL_DMA_Abort_IT+0x1a8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d040      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a58      	ldr	r2, [pc, #352]	; (80072e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d03b      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a56      	ldr	r2, [pc, #344]	; (80072e8 <HAL_DMA_Abort_IT+0x1b0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d036      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a55      	ldr	r2, [pc, #340]	; (80072ec <HAL_DMA_Abort_IT+0x1b4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d031      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a53      	ldr	r2, [pc, #332]	; (80072f0 <HAL_DMA_Abort_IT+0x1b8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d02c      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a52      	ldr	r2, [pc, #328]	; (80072f4 <HAL_DMA_Abort_IT+0x1bc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d027      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a50      	ldr	r2, [pc, #320]	; (80072f8 <HAL_DMA_Abort_IT+0x1c0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d022      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a4f      	ldr	r2, [pc, #316]	; (80072fc <HAL_DMA_Abort_IT+0x1c4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d01d      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a4d      	ldr	r2, [pc, #308]	; (8007300 <HAL_DMA_Abort_IT+0x1c8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d018      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a4c      	ldr	r2, [pc, #304]	; (8007304 <HAL_DMA_Abort_IT+0x1cc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a4a      	ldr	r2, [pc, #296]	; (8007308 <HAL_DMA_Abort_IT+0x1d0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00e      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a49      	ldr	r2, [pc, #292]	; (800730c <HAL_DMA_Abort_IT+0x1d4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d009      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a47      	ldr	r2, [pc, #284]	; (8007310 <HAL_DMA_Abort_IT+0x1d8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <HAL_DMA_Abort_IT+0xc8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a46      	ldr	r2, [pc, #280]	; (8007314 <HAL_DMA_Abort_IT+0x1dc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d101      	bne.n	8007204 <HAL_DMA_Abort_IT+0xcc>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <HAL_DMA_Abort_IT+0xce>
 8007204:	2300      	movs	r3, #0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8086 	beq.w	8007318 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2204      	movs	r2, #4
 8007210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <HAL_DMA_Abort_IT+0x1a0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d04a      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2e      	ldr	r2, [pc, #184]	; (80072dc <HAL_DMA_Abort_IT+0x1a4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d045      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <HAL_DMA_Abort_IT+0x1a8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d040      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2b      	ldr	r2, [pc, #172]	; (80072e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d03b      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a29      	ldr	r2, [pc, #164]	; (80072e8 <HAL_DMA_Abort_IT+0x1b0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d036      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a28      	ldr	r2, [pc, #160]	; (80072ec <HAL_DMA_Abort_IT+0x1b4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d031      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <HAL_DMA_Abort_IT+0x1b8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d02c      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a25      	ldr	r2, [pc, #148]	; (80072f4 <HAL_DMA_Abort_IT+0x1bc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d027      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a23      	ldr	r2, [pc, #140]	; (80072f8 <HAL_DMA_Abort_IT+0x1c0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d022      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a22      	ldr	r2, [pc, #136]	; (80072fc <HAL_DMA_Abort_IT+0x1c4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d01d      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a20      	ldr	r2, [pc, #128]	; (8007300 <HAL_DMA_Abort_IT+0x1c8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1f      	ldr	r2, [pc, #124]	; (8007304 <HAL_DMA_Abort_IT+0x1cc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1d      	ldr	r2, [pc, #116]	; (8007308 <HAL_DMA_Abort_IT+0x1d0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1c      	ldr	r2, [pc, #112]	; (800730c <HAL_DMA_Abort_IT+0x1d4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_DMA_Abort_IT+0x1d8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x17c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a19      	ldr	r2, [pc, #100]	; (8007314 <HAL_DMA_Abort_IT+0x1dc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d108      	bne.n	80072c6 <HAL_DMA_Abort_IT+0x18e>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0201 	bic.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e178      	b.n	80075b8 <HAL_DMA_Abort_IT+0x480>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0201 	bic.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e16f      	b.n	80075b8 <HAL_DMA_Abort_IT+0x480>
 80072d8:	40020010 	.word	0x40020010
 80072dc:	40020028 	.word	0x40020028
 80072e0:	40020040 	.word	0x40020040
 80072e4:	40020058 	.word	0x40020058
 80072e8:	40020070 	.word	0x40020070
 80072ec:	40020088 	.word	0x40020088
 80072f0:	400200a0 	.word	0x400200a0
 80072f4:	400200b8 	.word	0x400200b8
 80072f8:	40020410 	.word	0x40020410
 80072fc:	40020428 	.word	0x40020428
 8007300:	40020440 	.word	0x40020440
 8007304:	40020458 	.word	0x40020458
 8007308:	40020470 	.word	0x40020470
 800730c:	40020488 	.word	0x40020488
 8007310:	400204a0 	.word	0x400204a0
 8007314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 020e 	bic.w	r2, r2, #14
 8007326:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6c      	ldr	r2, [pc, #432]	; (80074e0 <HAL_DMA_Abort_IT+0x3a8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d04a      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6b      	ldr	r2, [pc, #428]	; (80074e4 <HAL_DMA_Abort_IT+0x3ac>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d045      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a69      	ldr	r2, [pc, #420]	; (80074e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d040      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a68      	ldr	r2, [pc, #416]	; (80074ec <HAL_DMA_Abort_IT+0x3b4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d03b      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a66      	ldr	r2, [pc, #408]	; (80074f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d036      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a65      	ldr	r2, [pc, #404]	; (80074f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d031      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a63      	ldr	r2, [pc, #396]	; (80074f8 <HAL_DMA_Abort_IT+0x3c0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d02c      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a62      	ldr	r2, [pc, #392]	; (80074fc <HAL_DMA_Abort_IT+0x3c4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d027      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a60      	ldr	r2, [pc, #384]	; (8007500 <HAL_DMA_Abort_IT+0x3c8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d022      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a5f      	ldr	r2, [pc, #380]	; (8007504 <HAL_DMA_Abort_IT+0x3cc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d01d      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a5d      	ldr	r2, [pc, #372]	; (8007508 <HAL_DMA_Abort_IT+0x3d0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5c      	ldr	r2, [pc, #368]	; (800750c <HAL_DMA_Abort_IT+0x3d4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5a      	ldr	r2, [pc, #360]	; (8007510 <HAL_DMA_Abort_IT+0x3d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a59      	ldr	r2, [pc, #356]	; (8007514 <HAL_DMA_Abort_IT+0x3dc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a57      	ldr	r2, [pc, #348]	; (8007518 <HAL_DMA_Abort_IT+0x3e0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x290>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a56      	ldr	r2, [pc, #344]	; (800751c <HAL_DMA_Abort_IT+0x3e4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d108      	bne.n	80073da <HAL_DMA_Abort_IT+0x2a2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0201 	bic.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e007      	b.n	80073ea <HAL_DMA_Abort_IT+0x2b2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3c      	ldr	r2, [pc, #240]	; (80074e0 <HAL_DMA_Abort_IT+0x3a8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d072      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a3a      	ldr	r2, [pc, #232]	; (80074e4 <HAL_DMA_Abort_IT+0x3ac>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d06d      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a39      	ldr	r2, [pc, #228]	; (80074e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d068      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a37      	ldr	r2, [pc, #220]	; (80074ec <HAL_DMA_Abort_IT+0x3b4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d063      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a36      	ldr	r2, [pc, #216]	; (80074f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d05e      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a34      	ldr	r2, [pc, #208]	; (80074f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d059      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a33      	ldr	r2, [pc, #204]	; (80074f8 <HAL_DMA_Abort_IT+0x3c0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d054      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a31      	ldr	r2, [pc, #196]	; (80074fc <HAL_DMA_Abort_IT+0x3c4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04f      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a30      	ldr	r2, [pc, #192]	; (8007500 <HAL_DMA_Abort_IT+0x3c8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d04a      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2e      	ldr	r2, [pc, #184]	; (8007504 <HAL_DMA_Abort_IT+0x3cc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d045      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <HAL_DMA_Abort_IT+0x3d0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d040      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2b      	ldr	r2, [pc, #172]	; (800750c <HAL_DMA_Abort_IT+0x3d4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d03b      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2a      	ldr	r2, [pc, #168]	; (8007510 <HAL_DMA_Abort_IT+0x3d8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d036      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a28      	ldr	r2, [pc, #160]	; (8007514 <HAL_DMA_Abort_IT+0x3dc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d031      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a27      	ldr	r2, [pc, #156]	; (8007518 <HAL_DMA_Abort_IT+0x3e0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d02c      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a25      	ldr	r2, [pc, #148]	; (800751c <HAL_DMA_Abort_IT+0x3e4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d027      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a24      	ldr	r2, [pc, #144]	; (8007520 <HAL_DMA_Abort_IT+0x3e8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d022      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a22      	ldr	r2, [pc, #136]	; (8007524 <HAL_DMA_Abort_IT+0x3ec>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01d      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a21      	ldr	r2, [pc, #132]	; (8007528 <HAL_DMA_Abort_IT+0x3f0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d018      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1f      	ldr	r2, [pc, #124]	; (800752c <HAL_DMA_Abort_IT+0x3f4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <HAL_DMA_Abort_IT+0x3f8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00e      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_DMA_Abort_IT+0x3fc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d009      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <HAL_DMA_Abort_IT+0x400>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <HAL_DMA_Abort_IT+0x3a2>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a19      	ldr	r2, [pc, #100]	; (800753c <HAL_DMA_Abort_IT+0x404>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d132      	bne.n	8007540 <HAL_DMA_Abort_IT+0x408>
 80074da:	2301      	movs	r3, #1
 80074dc:	e031      	b.n	8007542 <HAL_DMA_Abort_IT+0x40a>
 80074de:	bf00      	nop
 80074e0:	40020010 	.word	0x40020010
 80074e4:	40020028 	.word	0x40020028
 80074e8:	40020040 	.word	0x40020040
 80074ec:	40020058 	.word	0x40020058
 80074f0:	40020070 	.word	0x40020070
 80074f4:	40020088 	.word	0x40020088
 80074f8:	400200a0 	.word	0x400200a0
 80074fc:	400200b8 	.word	0x400200b8
 8007500:	40020410 	.word	0x40020410
 8007504:	40020428 	.word	0x40020428
 8007508:	40020440 	.word	0x40020440
 800750c:	40020458 	.word	0x40020458
 8007510:	40020470 	.word	0x40020470
 8007514:	40020488 	.word	0x40020488
 8007518:	400204a0 	.word	0x400204a0
 800751c:	400204b8 	.word	0x400204b8
 8007520:	58025408 	.word	0x58025408
 8007524:	5802541c 	.word	0x5802541c
 8007528:	58025430 	.word	0x58025430
 800752c:	58025444 	.word	0x58025444
 8007530:	58025458 	.word	0x58025458
 8007534:	5802546c 	.word	0x5802546c
 8007538:	58025480 	.word	0x58025480
 800753c:	58025494 	.word	0x58025494
 8007540:	2300      	movs	r3, #0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d028      	beq.n	8007598 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007554:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	2201      	movs	r2, #1
 8007566:	409a      	lsls	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007574:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800758c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007596:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop

080075c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075d0:	4b67      	ldr	r3, [pc, #412]	; (8007770 <HAL_DMA_IRQHandler+0x1ac>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a67      	ldr	r2, [pc, #412]	; (8007774 <HAL_DMA_IRQHandler+0x1b0>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	0a9b      	lsrs	r3, r3, #10
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a5f      	ldr	r2, [pc, #380]	; (8007778 <HAL_DMA_IRQHandler+0x1b4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d04a      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5d      	ldr	r2, [pc, #372]	; (800777c <HAL_DMA_IRQHandler+0x1b8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d045      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a5c      	ldr	r2, [pc, #368]	; (8007780 <HAL_DMA_IRQHandler+0x1bc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d040      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a5a      	ldr	r2, [pc, #360]	; (8007784 <HAL_DMA_IRQHandler+0x1c0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d03b      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a59      	ldr	r2, [pc, #356]	; (8007788 <HAL_DMA_IRQHandler+0x1c4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d036      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a57      	ldr	r2, [pc, #348]	; (800778c <HAL_DMA_IRQHandler+0x1c8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d031      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a56      	ldr	r2, [pc, #344]	; (8007790 <HAL_DMA_IRQHandler+0x1cc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d02c      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a54      	ldr	r2, [pc, #336]	; (8007794 <HAL_DMA_IRQHandler+0x1d0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d027      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a53      	ldr	r2, [pc, #332]	; (8007798 <HAL_DMA_IRQHandler+0x1d4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d022      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a51      	ldr	r2, [pc, #324]	; (800779c <HAL_DMA_IRQHandler+0x1d8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d01d      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a50      	ldr	r2, [pc, #320]	; (80077a0 <HAL_DMA_IRQHandler+0x1dc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d018      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a4e      	ldr	r2, [pc, #312]	; (80077a4 <HAL_DMA_IRQHandler+0x1e0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d013      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a4d      	ldr	r2, [pc, #308]	; (80077a8 <HAL_DMA_IRQHandler+0x1e4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00e      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a4b      	ldr	r2, [pc, #300]	; (80077ac <HAL_DMA_IRQHandler+0x1e8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d009      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4a      	ldr	r2, [pc, #296]	; (80077b0 <HAL_DMA_IRQHandler+0x1ec>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d004      	beq.n	8007696 <HAL_DMA_IRQHandler+0xd2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a48      	ldr	r2, [pc, #288]	; (80077b4 <HAL_DMA_IRQHandler+0x1f0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d101      	bne.n	800769a <HAL_DMA_IRQHandler+0xd6>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <HAL_DMA_IRQHandler+0xd8>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 842b 	beq.w	8007ef8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	2208      	movs	r2, #8
 80076ac:	409a      	lsls	r2, r3
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80a2 	beq.w	80077fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a2e      	ldr	r2, [pc, #184]	; (8007778 <HAL_DMA_IRQHandler+0x1b4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d04a      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a2d      	ldr	r2, [pc, #180]	; (800777c <HAL_DMA_IRQHandler+0x1b8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d045      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a2b      	ldr	r2, [pc, #172]	; (8007780 <HAL_DMA_IRQHandler+0x1bc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d040      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a2a      	ldr	r2, [pc, #168]	; (8007784 <HAL_DMA_IRQHandler+0x1c0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d03b      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a28      	ldr	r2, [pc, #160]	; (8007788 <HAL_DMA_IRQHandler+0x1c4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d036      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a27      	ldr	r2, [pc, #156]	; (800778c <HAL_DMA_IRQHandler+0x1c8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d031      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a25      	ldr	r2, [pc, #148]	; (8007790 <HAL_DMA_IRQHandler+0x1cc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d02c      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a24      	ldr	r2, [pc, #144]	; (8007794 <HAL_DMA_IRQHandler+0x1d0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d027      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a22      	ldr	r2, [pc, #136]	; (8007798 <HAL_DMA_IRQHandler+0x1d4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d022      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a21      	ldr	r2, [pc, #132]	; (800779c <HAL_DMA_IRQHandler+0x1d8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d01d      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1f      	ldr	r2, [pc, #124]	; (80077a0 <HAL_DMA_IRQHandler+0x1dc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d018      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <HAL_DMA_IRQHandler+0x1e0>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d013      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <HAL_DMA_IRQHandler+0x1e4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00e      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <HAL_DMA_IRQHandler+0x1e8>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d009      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <HAL_DMA_IRQHandler+0x1ec>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d004      	beq.n	8007758 <HAL_DMA_IRQHandler+0x194>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <HAL_DMA_IRQHandler+0x1f0>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d12f      	bne.n	80077b8 <HAL_DMA_IRQHandler+0x1f4>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e02e      	b.n	80077cc <HAL_DMA_IRQHandler+0x208>
 800776e:	bf00      	nop
 8007770:	24000090 	.word	0x24000090
 8007774:	1b4e81b5 	.word	0x1b4e81b5
 8007778:	40020010 	.word	0x40020010
 800777c:	40020028 	.word	0x40020028
 8007780:	40020040 	.word	0x40020040
 8007784:	40020058 	.word	0x40020058
 8007788:	40020070 	.word	0x40020070
 800778c:	40020088 	.word	0x40020088
 8007790:	400200a0 	.word	0x400200a0
 8007794:	400200b8 	.word	0x400200b8
 8007798:	40020410 	.word	0x40020410
 800779c:	40020428 	.word	0x40020428
 80077a0:	40020440 	.word	0x40020440
 80077a4:	40020458 	.word	0x40020458
 80077a8:	40020470 	.word	0x40020470
 80077ac:	40020488 	.word	0x40020488
 80077b0:	400204a0 	.word	0x400204a0
 80077b4:	400204b8 	.word	0x400204b8
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bf14      	ite	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	2300      	moveq	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d015      	beq.n	80077fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0204 	bic.w	r2, r2, #4
 80077de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2208      	movs	r2, #8
 80077ea:	409a      	lsls	r2, r3
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f4:	f043 0201 	orr.w	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d06e      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a69      	ldr	r2, [pc, #420]	; (80079bc <HAL_DMA_IRQHandler+0x3f8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d04a      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a67      	ldr	r2, [pc, #412]	; (80079c0 <HAL_DMA_IRQHandler+0x3fc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d045      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a66      	ldr	r2, [pc, #408]	; (80079c4 <HAL_DMA_IRQHandler+0x400>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d040      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a64      	ldr	r2, [pc, #400]	; (80079c8 <HAL_DMA_IRQHandler+0x404>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d03b      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a63      	ldr	r2, [pc, #396]	; (80079cc <HAL_DMA_IRQHandler+0x408>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d036      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a61      	ldr	r2, [pc, #388]	; (80079d0 <HAL_DMA_IRQHandler+0x40c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d031      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a60      	ldr	r2, [pc, #384]	; (80079d4 <HAL_DMA_IRQHandler+0x410>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d02c      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5e      	ldr	r2, [pc, #376]	; (80079d8 <HAL_DMA_IRQHandler+0x414>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d027      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a5d      	ldr	r2, [pc, #372]	; (80079dc <HAL_DMA_IRQHandler+0x418>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d022      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a5b      	ldr	r2, [pc, #364]	; (80079e0 <HAL_DMA_IRQHandler+0x41c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01d      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a5a      	ldr	r2, [pc, #360]	; (80079e4 <HAL_DMA_IRQHandler+0x420>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d018      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a58      	ldr	r2, [pc, #352]	; (80079e8 <HAL_DMA_IRQHandler+0x424>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a57      	ldr	r2, [pc, #348]	; (80079ec <HAL_DMA_IRQHandler+0x428>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00e      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a55      	ldr	r2, [pc, #340]	; (80079f0 <HAL_DMA_IRQHandler+0x42c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a54      	ldr	r2, [pc, #336]	; (80079f4 <HAL_DMA_IRQHandler+0x430>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2ee>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a52      	ldr	r2, [pc, #328]	; (80079f8 <HAL_DMA_IRQHandler+0x434>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d10a      	bne.n	80078c8 <HAL_DMA_IRQHandler+0x304>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	e003      	b.n	80078d0 <HAL_DMA_IRQHandler+0x30c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00d      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d8:	f003 031f 	and.w	r3, r3, #31
 80078dc:	2201      	movs	r2, #1
 80078de:	409a      	lsls	r2, r3
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	f043 0202 	orr.w	r2, r3, #2
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	2204      	movs	r2, #4
 80078fa:	409a      	lsls	r2, r3
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	4013      	ands	r3, r2
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 808f 	beq.w	8007a24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a2c      	ldr	r2, [pc, #176]	; (80079bc <HAL_DMA_IRQHandler+0x3f8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d04a      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a2a      	ldr	r2, [pc, #168]	; (80079c0 <HAL_DMA_IRQHandler+0x3fc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d045      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <HAL_DMA_IRQHandler+0x400>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d040      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a27      	ldr	r2, [pc, #156]	; (80079c8 <HAL_DMA_IRQHandler+0x404>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d03b      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a26      	ldr	r2, [pc, #152]	; (80079cc <HAL_DMA_IRQHandler+0x408>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d036      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a24      	ldr	r2, [pc, #144]	; (80079d0 <HAL_DMA_IRQHandler+0x40c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d031      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a23      	ldr	r2, [pc, #140]	; (80079d4 <HAL_DMA_IRQHandler+0x410>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d02c      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <HAL_DMA_IRQHandler+0x414>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d027      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a20      	ldr	r2, [pc, #128]	; (80079dc <HAL_DMA_IRQHandler+0x418>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d022      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_DMA_IRQHandler+0x41c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01d      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_DMA_IRQHandler+0x420>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d018      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <HAL_DMA_IRQHandler+0x424>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_DMA_IRQHandler+0x428>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <HAL_DMA_IRQHandler+0x42c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d009      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <HAL_DMA_IRQHandler+0x430>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x3e2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <HAL_DMA_IRQHandler+0x434>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d12a      	bne.n	80079fc <HAL_DMA_IRQHandler+0x438>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bf14      	ite	ne
 80079b4:	2301      	movne	r3, #1
 80079b6:	2300      	moveq	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	e023      	b.n	8007a04 <HAL_DMA_IRQHandler+0x440>
 80079bc:	40020010 	.word	0x40020010
 80079c0:	40020028 	.word	0x40020028
 80079c4:	40020040 	.word	0x40020040
 80079c8:	40020058 	.word	0x40020058
 80079cc:	40020070 	.word	0x40020070
 80079d0:	40020088 	.word	0x40020088
 80079d4:	400200a0 	.word	0x400200a0
 80079d8:	400200b8 	.word	0x400200b8
 80079dc:	40020410 	.word	0x40020410
 80079e0:	40020428 	.word	0x40020428
 80079e4:	40020440 	.word	0x40020440
 80079e8:	40020458 	.word	0x40020458
 80079ec:	40020470 	.word	0x40020470
 80079f0:	40020488 	.word	0x40020488
 80079f4:	400204a0 	.word	0x400204a0
 80079f8:	400204b8 	.word	0x400204b8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	2204      	movs	r2, #4
 8007a12:	409a      	lsls	r2, r3
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f043 0204 	orr.w	r2, r3, #4
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	2210      	movs	r2, #16
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	4013      	ands	r3, r2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80a6 	beq.w	8007b86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a85      	ldr	r2, [pc, #532]	; (8007c54 <HAL_DMA_IRQHandler+0x690>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d04a      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a83      	ldr	r2, [pc, #524]	; (8007c58 <HAL_DMA_IRQHandler+0x694>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d045      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a82      	ldr	r2, [pc, #520]	; (8007c5c <HAL_DMA_IRQHandler+0x698>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d040      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a80      	ldr	r2, [pc, #512]	; (8007c60 <HAL_DMA_IRQHandler+0x69c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03b      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a7f      	ldr	r2, [pc, #508]	; (8007c64 <HAL_DMA_IRQHandler+0x6a0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d036      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a7d      	ldr	r2, [pc, #500]	; (8007c68 <HAL_DMA_IRQHandler+0x6a4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d031      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a7c      	ldr	r2, [pc, #496]	; (8007c6c <HAL_DMA_IRQHandler+0x6a8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d02c      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a7a      	ldr	r2, [pc, #488]	; (8007c70 <HAL_DMA_IRQHandler+0x6ac>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d027      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a79      	ldr	r2, [pc, #484]	; (8007c74 <HAL_DMA_IRQHandler+0x6b0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a77      	ldr	r2, [pc, #476]	; (8007c78 <HAL_DMA_IRQHandler+0x6b4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a76      	ldr	r2, [pc, #472]	; (8007c7c <HAL_DMA_IRQHandler+0x6b8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a74      	ldr	r2, [pc, #464]	; (8007c80 <HAL_DMA_IRQHandler+0x6bc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a73      	ldr	r2, [pc, #460]	; (8007c84 <HAL_DMA_IRQHandler+0x6c0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a71      	ldr	r2, [pc, #452]	; (8007c88 <HAL_DMA_IRQHandler+0x6c4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a70      	ldr	r2, [pc, #448]	; (8007c8c <HAL_DMA_IRQHandler+0x6c8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_DMA_IRQHandler+0x516>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a6e      	ldr	r2, [pc, #440]	; (8007c90 <HAL_DMA_IRQHandler+0x6cc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d10a      	bne.n	8007af0 <HAL_DMA_IRQHandler+0x52c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf14      	ite	ne
 8007ae8:	2301      	movne	r3, #1
 8007aea:	2300      	moveq	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	e009      	b.n	8007b04 <HAL_DMA_IRQHandler+0x540>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bf14      	ite	ne
 8007afe:	2301      	movne	r3, #1
 8007b00:	2300      	moveq	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d03e      	beq.n	8007b86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	2210      	movs	r2, #16
 8007b12:	409a      	lsls	r2, r3
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d018      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d108      	bne.n	8007b46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d024      	beq.n	8007b86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	e01f      	b.n	8007b86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01b      	beq.n	8007b86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
 8007b56:	e016      	b.n	8007b86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d107      	bne.n	8007b76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0208 	bic.w	r2, r2, #8
 8007b74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	2220      	movs	r2, #32
 8007b90:	409a      	lsls	r2, r3
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 8110 	beq.w	8007dbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a2c      	ldr	r2, [pc, #176]	; (8007c54 <HAL_DMA_IRQHandler+0x690>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a2b      	ldr	r2, [pc, #172]	; (8007c58 <HAL_DMA_IRQHandler+0x694>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d045      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a29      	ldr	r2, [pc, #164]	; (8007c5c <HAL_DMA_IRQHandler+0x698>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a28      	ldr	r2, [pc, #160]	; (8007c60 <HAL_DMA_IRQHandler+0x69c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d03b      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a26      	ldr	r2, [pc, #152]	; (8007c64 <HAL_DMA_IRQHandler+0x6a0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d036      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a25      	ldr	r2, [pc, #148]	; (8007c68 <HAL_DMA_IRQHandler+0x6a4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d031      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a23      	ldr	r2, [pc, #140]	; (8007c6c <HAL_DMA_IRQHandler+0x6a8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a22      	ldr	r2, [pc, #136]	; (8007c70 <HAL_DMA_IRQHandler+0x6ac>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d027      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <HAL_DMA_IRQHandler+0x6b0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a1f      	ldr	r2, [pc, #124]	; (8007c78 <HAL_DMA_IRQHandler+0x6b4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a1d      	ldr	r2, [pc, #116]	; (8007c7c <HAL_DMA_IRQHandler+0x6b8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a1c      	ldr	r2, [pc, #112]	; (8007c80 <HAL_DMA_IRQHandler+0x6bc>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <HAL_DMA_IRQHandler+0x6c0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a19      	ldr	r2, [pc, #100]	; (8007c88 <HAL_DMA_IRQHandler+0x6c4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <HAL_DMA_IRQHandler+0x6c8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x678>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <HAL_DMA_IRQHandler+0x6cc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d12b      	bne.n	8007c94 <HAL_DMA_IRQHandler+0x6d0>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0310 	and.w	r3, r3, #16
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bf14      	ite	ne
 8007c4a:	2301      	movne	r3, #1
 8007c4c:	2300      	moveq	r3, #0
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	e02a      	b.n	8007ca8 <HAL_DMA_IRQHandler+0x6e4>
 8007c52:	bf00      	nop
 8007c54:	40020010 	.word	0x40020010
 8007c58:	40020028 	.word	0x40020028
 8007c5c:	40020040 	.word	0x40020040
 8007c60:	40020058 	.word	0x40020058
 8007c64:	40020070 	.word	0x40020070
 8007c68:	40020088 	.word	0x40020088
 8007c6c:	400200a0 	.word	0x400200a0
 8007c70:	400200b8 	.word	0x400200b8
 8007c74:	40020410 	.word	0x40020410
 8007c78:	40020428 	.word	0x40020428
 8007c7c:	40020440 	.word	0x40020440
 8007c80:	40020458 	.word	0x40020458
 8007c84:	40020470 	.word	0x40020470
 8007c88:	40020488 	.word	0x40020488
 8007c8c:	400204a0 	.word	0x400204a0
 8007c90:	400204b8 	.word	0x400204b8
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bf14      	ite	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	2300      	moveq	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8087 	beq.w	8007dbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	409a      	lsls	r2, r3
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d139      	bne.n	8007d3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0216 	bic.w	r2, r2, #22
 8007cd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695a      	ldr	r2, [r3, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ce8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d103      	bne.n	8007cfa <HAL_DMA_IRQHandler+0x736>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0208 	bic.w	r2, r2, #8
 8007d08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	223f      	movs	r2, #63	; 0x3f
 8007d14:	409a      	lsls	r2, r3
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 834a 	beq.w	80083c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
          }
          return;
 8007d3c:	e344      	b.n	80083c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d018      	beq.n	8007d7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d108      	bne.n	8007d6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02c      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
 8007d6a:	e027      	b.n	8007dbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d023      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
 8007d7c:	e01e      	b.n	8007dbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10f      	bne.n	8007dac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0210 	bic.w	r2, r2, #16
 8007d9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 8306 	beq.w	80083d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8088 	beq.w	8007ee4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a7a      	ldr	r2, [pc, #488]	; (8007fcc <HAL_DMA_IRQHandler+0xa08>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d04a      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a79      	ldr	r2, [pc, #484]	; (8007fd0 <HAL_DMA_IRQHandler+0xa0c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d045      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a77      	ldr	r2, [pc, #476]	; (8007fd4 <HAL_DMA_IRQHandler+0xa10>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d040      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a76      	ldr	r2, [pc, #472]	; (8007fd8 <HAL_DMA_IRQHandler+0xa14>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d03b      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a74      	ldr	r2, [pc, #464]	; (8007fdc <HAL_DMA_IRQHandler+0xa18>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d036      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a73      	ldr	r2, [pc, #460]	; (8007fe0 <HAL_DMA_IRQHandler+0xa1c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d031      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a71      	ldr	r2, [pc, #452]	; (8007fe4 <HAL_DMA_IRQHandler+0xa20>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d02c      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a70      	ldr	r2, [pc, #448]	; (8007fe8 <HAL_DMA_IRQHandler+0xa24>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d027      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a6e      	ldr	r2, [pc, #440]	; (8007fec <HAL_DMA_IRQHandler+0xa28>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d022      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a6d      	ldr	r2, [pc, #436]	; (8007ff0 <HAL_DMA_IRQHandler+0xa2c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d01d      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a6b      	ldr	r2, [pc, #428]	; (8007ff4 <HAL_DMA_IRQHandler+0xa30>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d018      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a6a      	ldr	r2, [pc, #424]	; (8007ff8 <HAL_DMA_IRQHandler+0xa34>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d013      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a68      	ldr	r2, [pc, #416]	; (8007ffc <HAL_DMA_IRQHandler+0xa38>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00e      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a67      	ldr	r2, [pc, #412]	; (8008000 <HAL_DMA_IRQHandler+0xa3c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d009      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a65      	ldr	r2, [pc, #404]	; (8008004 <HAL_DMA_IRQHandler+0xa40>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d004      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x8b8>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a64      	ldr	r2, [pc, #400]	; (8008008 <HAL_DMA_IRQHandler+0xa44>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d108      	bne.n	8007e8e <HAL_DMA_IRQHandler+0x8ca>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0201 	bic.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e007      	b.n	8007e9e <HAL_DMA_IRQHandler+0x8da>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0201 	bic.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d307      	bcc.n	8007eba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1f2      	bne.n	8007e9e <HAL_DMA_IRQHandler+0x8da>
 8007eb8:	e000      	b.n	8007ebc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007eba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ed2:	e003      	b.n	8007edc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 8272 	beq.w	80083d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	e26c      	b.n	80083d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a43      	ldr	r2, [pc, #268]	; (800800c <HAL_DMA_IRQHandler+0xa48>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d022      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a42      	ldr	r2, [pc, #264]	; (8008010 <HAL_DMA_IRQHandler+0xa4c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d01d      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a40      	ldr	r2, [pc, #256]	; (8008014 <HAL_DMA_IRQHandler+0xa50>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d018      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	; (8008018 <HAL_DMA_IRQHandler+0xa54>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a3d      	ldr	r2, [pc, #244]	; (800801c <HAL_DMA_IRQHandler+0xa58>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00e      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a3c      	ldr	r2, [pc, #240]	; (8008020 <HAL_DMA_IRQHandler+0xa5c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a3a      	ldr	r2, [pc, #232]	; (8008024 <HAL_DMA_IRQHandler+0xa60>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d004      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x984>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a39      	ldr	r2, [pc, #228]	; (8008028 <HAL_DMA_IRQHandler+0xa64>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d101      	bne.n	8007f4c <HAL_DMA_IRQHandler+0x988>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <HAL_DMA_IRQHandler+0x98a>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 823f 	beq.w	80083d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	2204      	movs	r2, #4
 8007f66:	409a      	lsls	r2, r3
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80cd 	beq.w	800810c <HAL_DMA_IRQHandler+0xb48>
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80c7 	beq.w	800810c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2204      	movs	r2, #4
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d049      	beq.n	800802c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 8210 	beq.w	80083cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fb4:	e20a      	b.n	80083cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 8206 	beq.w	80083cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fc8:	e200      	b.n	80083cc <HAL_DMA_IRQHandler+0xe08>
 8007fca:	bf00      	nop
 8007fcc:	40020010 	.word	0x40020010
 8007fd0:	40020028 	.word	0x40020028
 8007fd4:	40020040 	.word	0x40020040
 8007fd8:	40020058 	.word	0x40020058
 8007fdc:	40020070 	.word	0x40020070
 8007fe0:	40020088 	.word	0x40020088
 8007fe4:	400200a0 	.word	0x400200a0
 8007fe8:	400200b8 	.word	0x400200b8
 8007fec:	40020410 	.word	0x40020410
 8007ff0:	40020428 	.word	0x40020428
 8007ff4:	40020440 	.word	0x40020440
 8007ff8:	40020458 	.word	0x40020458
 8007ffc:	40020470 	.word	0x40020470
 8008000:	40020488 	.word	0x40020488
 8008004:	400204a0 	.word	0x400204a0
 8008008:	400204b8 	.word	0x400204b8
 800800c:	58025408 	.word	0x58025408
 8008010:	5802541c 	.word	0x5802541c
 8008014:	58025430 	.word	0x58025430
 8008018:	58025444 	.word	0x58025444
 800801c:	58025458 	.word	0x58025458
 8008020:	5802546c 	.word	0x5802546c
 8008024:	58025480 	.word	0x58025480
 8008028:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d160      	bne.n	80080f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a7f      	ldr	r2, [pc, #508]	; (8008238 <HAL_DMA_IRQHandler+0xc74>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d04a      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a7d      	ldr	r2, [pc, #500]	; (800823c <HAL_DMA_IRQHandler+0xc78>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d045      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a7c      	ldr	r2, [pc, #496]	; (8008240 <HAL_DMA_IRQHandler+0xc7c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d040      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a7a      	ldr	r2, [pc, #488]	; (8008244 <HAL_DMA_IRQHandler+0xc80>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d03b      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a79      	ldr	r2, [pc, #484]	; (8008248 <HAL_DMA_IRQHandler+0xc84>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d036      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a77      	ldr	r2, [pc, #476]	; (800824c <HAL_DMA_IRQHandler+0xc88>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d031      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a76      	ldr	r2, [pc, #472]	; (8008250 <HAL_DMA_IRQHandler+0xc8c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d02c      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a74      	ldr	r2, [pc, #464]	; (8008254 <HAL_DMA_IRQHandler+0xc90>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d027      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a73      	ldr	r2, [pc, #460]	; (8008258 <HAL_DMA_IRQHandler+0xc94>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d022      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a71      	ldr	r2, [pc, #452]	; (800825c <HAL_DMA_IRQHandler+0xc98>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01d      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a70      	ldr	r2, [pc, #448]	; (8008260 <HAL_DMA_IRQHandler+0xc9c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d018      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a6e      	ldr	r2, [pc, #440]	; (8008264 <HAL_DMA_IRQHandler+0xca0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a6d      	ldr	r2, [pc, #436]	; (8008268 <HAL_DMA_IRQHandler+0xca4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00e      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a6b      	ldr	r2, [pc, #428]	; (800826c <HAL_DMA_IRQHandler+0xca8>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a6a      	ldr	r2, [pc, #424]	; (8008270 <HAL_DMA_IRQHandler+0xcac>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_DMA_IRQHandler+0xb12>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a68      	ldr	r2, [pc, #416]	; (8008274 <HAL_DMA_IRQHandler+0xcb0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d108      	bne.n	80080e8 <HAL_DMA_IRQHandler+0xb24>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0208 	bic.w	r2, r2, #8
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e007      	b.n	80080f8 <HAL_DMA_IRQHandler+0xb34>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0204 	bic.w	r2, r2, #4
 80080f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 8165 	beq.w	80083cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800810a:	e15f      	b.n	80083cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	2202      	movs	r2, #2
 8008116:	409a      	lsls	r2, r3
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80c5 	beq.w	80082ac <HAL_DMA_IRQHandler+0xce8>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80bf 	beq.w	80082ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	f003 031f 	and.w	r3, r3, #31
 8008136:	2202      	movs	r2, #2
 8008138:	409a      	lsls	r2, r3
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d018      	beq.n	800817a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 813a 	beq.w	80083d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008164:	e134      	b.n	80083d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 8130 	beq.w	80083d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008178:	e12a      	b.n	80083d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	f040 8089 	bne.w	8008298 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a2b      	ldr	r2, [pc, #172]	; (8008238 <HAL_DMA_IRQHandler+0xc74>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d04a      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a29      	ldr	r2, [pc, #164]	; (800823c <HAL_DMA_IRQHandler+0xc78>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d045      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a28      	ldr	r2, [pc, #160]	; (8008240 <HAL_DMA_IRQHandler+0xc7c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d040      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a26      	ldr	r2, [pc, #152]	; (8008244 <HAL_DMA_IRQHandler+0xc80>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d03b      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a25      	ldr	r2, [pc, #148]	; (8008248 <HAL_DMA_IRQHandler+0xc84>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d036      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a23      	ldr	r2, [pc, #140]	; (800824c <HAL_DMA_IRQHandler+0xc88>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d031      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a22      	ldr	r2, [pc, #136]	; (8008250 <HAL_DMA_IRQHandler+0xc8c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d02c      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a20      	ldr	r2, [pc, #128]	; (8008254 <HAL_DMA_IRQHandler+0xc90>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d027      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1f      	ldr	r2, [pc, #124]	; (8008258 <HAL_DMA_IRQHandler+0xc94>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d022      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1d      	ldr	r2, [pc, #116]	; (800825c <HAL_DMA_IRQHandler+0xc98>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d01d      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a1c      	ldr	r2, [pc, #112]	; (8008260 <HAL_DMA_IRQHandler+0xc9c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d018      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <HAL_DMA_IRQHandler+0xca0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d013      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a19      	ldr	r2, [pc, #100]	; (8008268 <HAL_DMA_IRQHandler+0xca4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00e      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a17      	ldr	r2, [pc, #92]	; (800826c <HAL_DMA_IRQHandler+0xca8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d009      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a16      	ldr	r2, [pc, #88]	; (8008270 <HAL_DMA_IRQHandler+0xcac>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d004      	beq.n	8008226 <HAL_DMA_IRQHandler+0xc62>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a14      	ldr	r2, [pc, #80]	; (8008274 <HAL_DMA_IRQHandler+0xcb0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d128      	bne.n	8008278 <HAL_DMA_IRQHandler+0xcb4>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0214 	bic.w	r2, r2, #20
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e027      	b.n	8008288 <HAL_DMA_IRQHandler+0xcc4>
 8008238:	40020010 	.word	0x40020010
 800823c:	40020028 	.word	0x40020028
 8008240:	40020040 	.word	0x40020040
 8008244:	40020058 	.word	0x40020058
 8008248:	40020070 	.word	0x40020070
 800824c:	40020088 	.word	0x40020088
 8008250:	400200a0 	.word	0x400200a0
 8008254:	400200b8 	.word	0x400200b8
 8008258:	40020410 	.word	0x40020410
 800825c:	40020428 	.word	0x40020428
 8008260:	40020440 	.word	0x40020440
 8008264:	40020458 	.word	0x40020458
 8008268:	40020470 	.word	0x40020470
 800826c:	40020488 	.word	0x40020488
 8008270:	400204a0 	.word	0x400204a0
 8008274:	400204b8 	.word	0x400204b8
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 020a 	bic.w	r2, r2, #10
 8008286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8097 	beq.w	80083d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082aa:	e091      	b.n	80083d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	2208      	movs	r2, #8
 80082b6:	409a      	lsls	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8088 	beq.w	80083d2 <HAL_DMA_IRQHandler+0xe0e>
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f003 0308 	and.w	r3, r3, #8
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8082 	beq.w	80083d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a41      	ldr	r2, [pc, #260]	; (80083d8 <HAL_DMA_IRQHandler+0xe14>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d04a      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a3f      	ldr	r2, [pc, #252]	; (80083dc <HAL_DMA_IRQHandler+0xe18>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d045      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a3e      	ldr	r2, [pc, #248]	; (80083e0 <HAL_DMA_IRQHandler+0xe1c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d040      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a3c      	ldr	r2, [pc, #240]	; (80083e4 <HAL_DMA_IRQHandler+0xe20>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d03b      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3b      	ldr	r2, [pc, #236]	; (80083e8 <HAL_DMA_IRQHandler+0xe24>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d036      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a39      	ldr	r2, [pc, #228]	; (80083ec <HAL_DMA_IRQHandler+0xe28>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d031      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a38      	ldr	r2, [pc, #224]	; (80083f0 <HAL_DMA_IRQHandler+0xe2c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d02c      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a36      	ldr	r2, [pc, #216]	; (80083f4 <HAL_DMA_IRQHandler+0xe30>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d027      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a35      	ldr	r2, [pc, #212]	; (80083f8 <HAL_DMA_IRQHandler+0xe34>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d022      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a33      	ldr	r2, [pc, #204]	; (80083fc <HAL_DMA_IRQHandler+0xe38>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01d      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a32      	ldr	r2, [pc, #200]	; (8008400 <HAL_DMA_IRQHandler+0xe3c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d018      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a30      	ldr	r2, [pc, #192]	; (8008404 <HAL_DMA_IRQHandler+0xe40>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a2f      	ldr	r2, [pc, #188]	; (8008408 <HAL_DMA_IRQHandler+0xe44>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00e      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a2d      	ldr	r2, [pc, #180]	; (800840c <HAL_DMA_IRQHandler+0xe48>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d009      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2c      	ldr	r2, [pc, #176]	; (8008410 <HAL_DMA_IRQHandler+0xe4c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d004      	beq.n	800836e <HAL_DMA_IRQHandler+0xdaa>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a2a      	ldr	r2, [pc, #168]	; (8008414 <HAL_DMA_IRQHandler+0xe50>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d108      	bne.n	8008380 <HAL_DMA_IRQHandler+0xdbc>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 021c 	bic.w	r2, r2, #28
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e007      	b.n	8008390 <HAL_DMA_IRQHandler+0xdcc>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 020e 	bic.w	r2, r2, #14
 800838e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008394:	f003 031f 	and.w	r3, r3, #31
 8008398:	2201      	movs	r2, #1
 800839a:	409a      	lsls	r2, r3
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
 80083c6:	e004      	b.n	80083d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80083c8:	bf00      	nop
 80083ca:	e002      	b.n	80083d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083d2:	3728      	adds	r7, #40	; 0x28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40020010 	.word	0x40020010
 80083dc:	40020028 	.word	0x40020028
 80083e0:	40020040 	.word	0x40020040
 80083e4:	40020058 	.word	0x40020058
 80083e8:	40020070 	.word	0x40020070
 80083ec:	40020088 	.word	0x40020088
 80083f0:	400200a0 	.word	0x400200a0
 80083f4:	400200b8 	.word	0x400200b8
 80083f8:	40020410 	.word	0x40020410
 80083fc:	40020428 	.word	0x40020428
 8008400:	40020440 	.word	0x40020440
 8008404:	40020458 	.word	0x40020458
 8008408:	40020470 	.word	0x40020470
 800840c:	40020488 	.word	0x40020488
 8008410:	400204a0 	.word	0x400204a0
 8008414:	400204b8 	.word	0x400204b8

08008418 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008442:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008448:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a7f      	ldr	r2, [pc, #508]	; (800864c <DMA_SetConfig+0x21c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d072      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a7d      	ldr	r2, [pc, #500]	; (8008650 <DMA_SetConfig+0x220>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d06d      	beq.n	800853a <DMA_SetConfig+0x10a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a7c      	ldr	r2, [pc, #496]	; (8008654 <DMA_SetConfig+0x224>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d068      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a7a      	ldr	r2, [pc, #488]	; (8008658 <DMA_SetConfig+0x228>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d063      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a79      	ldr	r2, [pc, #484]	; (800865c <DMA_SetConfig+0x22c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d05e      	beq.n	800853a <DMA_SetConfig+0x10a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a77      	ldr	r2, [pc, #476]	; (8008660 <DMA_SetConfig+0x230>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d059      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a76      	ldr	r2, [pc, #472]	; (8008664 <DMA_SetConfig+0x234>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d054      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a74      	ldr	r2, [pc, #464]	; (8008668 <DMA_SetConfig+0x238>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d04f      	beq.n	800853a <DMA_SetConfig+0x10a>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a73      	ldr	r2, [pc, #460]	; (800866c <DMA_SetConfig+0x23c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d04a      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a71      	ldr	r2, [pc, #452]	; (8008670 <DMA_SetConfig+0x240>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d045      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a70      	ldr	r2, [pc, #448]	; (8008674 <DMA_SetConfig+0x244>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d040      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a6e      	ldr	r2, [pc, #440]	; (8008678 <DMA_SetConfig+0x248>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d03b      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a6d      	ldr	r2, [pc, #436]	; (800867c <DMA_SetConfig+0x24c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d036      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a6b      	ldr	r2, [pc, #428]	; (8008680 <DMA_SetConfig+0x250>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d031      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a6a      	ldr	r2, [pc, #424]	; (8008684 <DMA_SetConfig+0x254>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d02c      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a68      	ldr	r2, [pc, #416]	; (8008688 <DMA_SetConfig+0x258>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d027      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a67      	ldr	r2, [pc, #412]	; (800868c <DMA_SetConfig+0x25c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d022      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a65      	ldr	r2, [pc, #404]	; (8008690 <DMA_SetConfig+0x260>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d01d      	beq.n	800853a <DMA_SetConfig+0x10a>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a64      	ldr	r2, [pc, #400]	; (8008694 <DMA_SetConfig+0x264>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a62      	ldr	r2, [pc, #392]	; (8008698 <DMA_SetConfig+0x268>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a61      	ldr	r2, [pc, #388]	; (800869c <DMA_SetConfig+0x26c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <DMA_SetConfig+0x10a>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a5f      	ldr	r2, [pc, #380]	; (80086a0 <DMA_SetConfig+0x270>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a5e      	ldr	r2, [pc, #376]	; (80086a4 <DMA_SetConfig+0x274>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <DMA_SetConfig+0x10a>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a5c      	ldr	r2, [pc, #368]	; (80086a8 <DMA_SetConfig+0x278>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <DMA_SetConfig+0x10e>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <DMA_SetConfig+0x110>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00d      	beq.n	8008560 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800854c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800855e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a39      	ldr	r2, [pc, #228]	; (800864c <DMA_SetConfig+0x21c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d04a      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a38      	ldr	r2, [pc, #224]	; (8008650 <DMA_SetConfig+0x220>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d045      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a36      	ldr	r2, [pc, #216]	; (8008654 <DMA_SetConfig+0x224>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d040      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a35      	ldr	r2, [pc, #212]	; (8008658 <DMA_SetConfig+0x228>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d03b      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a33      	ldr	r2, [pc, #204]	; (800865c <DMA_SetConfig+0x22c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d036      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a32      	ldr	r2, [pc, #200]	; (8008660 <DMA_SetConfig+0x230>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d031      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a30      	ldr	r2, [pc, #192]	; (8008664 <DMA_SetConfig+0x234>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d02c      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a2f      	ldr	r2, [pc, #188]	; (8008668 <DMA_SetConfig+0x238>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d027      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a2d      	ldr	r2, [pc, #180]	; (800866c <DMA_SetConfig+0x23c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d022      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <DMA_SetConfig+0x240>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d01d      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a2a      	ldr	r2, [pc, #168]	; (8008674 <DMA_SetConfig+0x244>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d018      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a29      	ldr	r2, [pc, #164]	; (8008678 <DMA_SetConfig+0x248>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d013      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a27      	ldr	r2, [pc, #156]	; (800867c <DMA_SetConfig+0x24c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00e      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a26      	ldr	r2, [pc, #152]	; (8008680 <DMA_SetConfig+0x250>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d009      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a24      	ldr	r2, [pc, #144]	; (8008684 <DMA_SetConfig+0x254>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <DMA_SetConfig+0x1d0>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a23      	ldr	r2, [pc, #140]	; (8008688 <DMA_SetConfig+0x258>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d101      	bne.n	8008604 <DMA_SetConfig+0x1d4>
 8008600:	2301      	movs	r3, #1
 8008602:	e000      	b.n	8008606 <DMA_SetConfig+0x1d6>
 8008604:	2300      	movs	r3, #0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d059      	beq.n	80086be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	223f      	movs	r2, #63	; 0x3f
 8008614:	409a      	lsls	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008628:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d138      	bne.n	80086ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800864a:	e086      	b.n	800875a <DMA_SetConfig+0x32a>
 800864c:	40020010 	.word	0x40020010
 8008650:	40020028 	.word	0x40020028
 8008654:	40020040 	.word	0x40020040
 8008658:	40020058 	.word	0x40020058
 800865c:	40020070 	.word	0x40020070
 8008660:	40020088 	.word	0x40020088
 8008664:	400200a0 	.word	0x400200a0
 8008668:	400200b8 	.word	0x400200b8
 800866c:	40020410 	.word	0x40020410
 8008670:	40020428 	.word	0x40020428
 8008674:	40020440 	.word	0x40020440
 8008678:	40020458 	.word	0x40020458
 800867c:	40020470 	.word	0x40020470
 8008680:	40020488 	.word	0x40020488
 8008684:	400204a0 	.word	0x400204a0
 8008688:	400204b8 	.word	0x400204b8
 800868c:	58025408 	.word	0x58025408
 8008690:	5802541c 	.word	0x5802541c
 8008694:	58025430 	.word	0x58025430
 8008698:	58025444 	.word	0x58025444
 800869c:	58025458 	.word	0x58025458
 80086a0:	5802546c 	.word	0x5802546c
 80086a4:	58025480 	.word	0x58025480
 80086a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	60da      	str	r2, [r3, #12]
}
 80086bc:	e04d      	b.n	800875a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a29      	ldr	r2, [pc, #164]	; (8008768 <DMA_SetConfig+0x338>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <DMA_SetConfig+0x2de>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a27      	ldr	r2, [pc, #156]	; (800876c <DMA_SetConfig+0x33c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01d      	beq.n	800870e <DMA_SetConfig+0x2de>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a26      	ldr	r2, [pc, #152]	; (8008770 <DMA_SetConfig+0x340>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <DMA_SetConfig+0x2de>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a24      	ldr	r2, [pc, #144]	; (8008774 <DMA_SetConfig+0x344>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <DMA_SetConfig+0x2de>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a23      	ldr	r2, [pc, #140]	; (8008778 <DMA_SetConfig+0x348>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <DMA_SetConfig+0x2de>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a21      	ldr	r2, [pc, #132]	; (800877c <DMA_SetConfig+0x34c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <DMA_SetConfig+0x2de>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a20      	ldr	r2, [pc, #128]	; (8008780 <DMA_SetConfig+0x350>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <DMA_SetConfig+0x2de>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1e      	ldr	r2, [pc, #120]	; (8008784 <DMA_SetConfig+0x354>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d101      	bne.n	8008712 <DMA_SetConfig+0x2e2>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <DMA_SetConfig+0x2e4>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d020      	beq.n	800875a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	2201      	movs	r2, #1
 8008722:	409a      	lsls	r2, r3
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d108      	bne.n	800874a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	60da      	str	r2, [r3, #12]
}
 8008748:	e007      	b.n	800875a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	60da      	str	r2, [r3, #12]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	58025408 	.word	0x58025408
 800876c:	5802541c 	.word	0x5802541c
 8008770:	58025430 	.word	0x58025430
 8008774:	58025444 	.word	0x58025444
 8008778:	58025458 	.word	0x58025458
 800877c:	5802546c 	.word	0x5802546c
 8008780:	58025480 	.word	0x58025480
 8008784:	58025494 	.word	0x58025494

08008788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a42      	ldr	r2, [pc, #264]	; (80088a0 <DMA_CalcBaseAndBitshift+0x118>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d04a      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a41      	ldr	r2, [pc, #260]	; (80088a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d045      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <DMA_CalcBaseAndBitshift+0x120>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d040      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a3e      	ldr	r2, [pc, #248]	; (80088ac <DMA_CalcBaseAndBitshift+0x124>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d03b      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <DMA_CalcBaseAndBitshift+0x128>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d036      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a3b      	ldr	r2, [pc, #236]	; (80088b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d031      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a39      	ldr	r2, [pc, #228]	; (80088b8 <DMA_CalcBaseAndBitshift+0x130>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d02c      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a38      	ldr	r2, [pc, #224]	; (80088bc <DMA_CalcBaseAndBitshift+0x134>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d027      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a36      	ldr	r2, [pc, #216]	; (80088c0 <DMA_CalcBaseAndBitshift+0x138>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d022      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a35      	ldr	r2, [pc, #212]	; (80088c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d01d      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a33      	ldr	r2, [pc, #204]	; (80088c8 <DMA_CalcBaseAndBitshift+0x140>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d018      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a32      	ldr	r2, [pc, #200]	; (80088cc <DMA_CalcBaseAndBitshift+0x144>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d013      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a30      	ldr	r2, [pc, #192]	; (80088d0 <DMA_CalcBaseAndBitshift+0x148>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00e      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2f      	ldr	r2, [pc, #188]	; (80088d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d009      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a2d      	ldr	r2, [pc, #180]	; (80088d8 <DMA_CalcBaseAndBitshift+0x150>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d004      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xa8>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a2c      	ldr	r2, [pc, #176]	; (80088dc <DMA_CalcBaseAndBitshift+0x154>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d101      	bne.n	8008834 <DMA_CalcBaseAndBitshift+0xac>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <DMA_CalcBaseAndBitshift+0xae>
 8008834:	2300      	movs	r3, #0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d024      	beq.n	8008884 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	3b10      	subs	r3, #16
 8008842:	4a27      	ldr	r2, [pc, #156]	; (80088e0 <DMA_CalcBaseAndBitshift+0x158>)
 8008844:	fba2 2303 	umull	r2, r3, r2, r3
 8008848:	091b      	lsrs	r3, r3, #4
 800884a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	4a24      	ldr	r2, [pc, #144]	; (80088e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008854:	5cd3      	ldrb	r3, [r2, r3]
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b03      	cmp	r3, #3
 8008860:	d908      	bls.n	8008874 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	4b1f      	ldr	r3, [pc, #124]	; (80088e8 <DMA_CalcBaseAndBitshift+0x160>)
 800886a:	4013      	ands	r3, r2
 800886c:	1d1a      	adds	r2, r3, #4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	659a      	str	r2, [r3, #88]	; 0x58
 8008872:	e00d      	b.n	8008890 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <DMA_CalcBaseAndBitshift+0x160>)
 800887c:	4013      	ands	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6593      	str	r3, [r2, #88]	; 0x58
 8008882:	e005      	b.n	8008890 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	40020010 	.word	0x40020010
 80088a4:	40020028 	.word	0x40020028
 80088a8:	40020040 	.word	0x40020040
 80088ac:	40020058 	.word	0x40020058
 80088b0:	40020070 	.word	0x40020070
 80088b4:	40020088 	.word	0x40020088
 80088b8:	400200a0 	.word	0x400200a0
 80088bc:	400200b8 	.word	0x400200b8
 80088c0:	40020410 	.word	0x40020410
 80088c4:	40020428 	.word	0x40020428
 80088c8:	40020440 	.word	0x40020440
 80088cc:	40020458 	.word	0x40020458
 80088d0:	40020470 	.word	0x40020470
 80088d4:	40020488 	.word	0x40020488
 80088d8:	400204a0 	.word	0x400204a0
 80088dc:	400204b8 	.word	0x400204b8
 80088e0:	aaaaaaab 	.word	0xaaaaaaab
 80088e4:	08017620 	.word	0x08017620
 80088e8:	fffffc00 	.word	0xfffffc00

080088ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d120      	bne.n	8008942 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	2b03      	cmp	r3, #3
 8008906:	d858      	bhi.n	80089ba <DMA_CheckFifoParam+0xce>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <DMA_CheckFifoParam+0x24>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008921 	.word	0x08008921
 8008914:	08008933 	.word	0x08008933
 8008918:	08008921 	.word	0x08008921
 800891c:	080089bb 	.word	0x080089bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d048      	beq.n	80089be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008930:	e045      	b.n	80089be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800893a:	d142      	bne.n	80089c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008940:	e03f      	b.n	80089c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894a:	d123      	bne.n	8008994 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	2b03      	cmp	r3, #3
 8008952:	d838      	bhi.n	80089c6 <DMA_CheckFifoParam+0xda>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <DMA_CheckFifoParam+0x70>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	0800896d 	.word	0x0800896d
 8008960:	08008973 	.word	0x08008973
 8008964:	0800896d 	.word	0x0800896d
 8008968:	08008985 	.word	0x08008985
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	73fb      	strb	r3, [r7, #15]
        break;
 8008970:	e030      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d025      	beq.n	80089ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008982:	e022      	b.n	80089ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800898c:	d11f      	bne.n	80089ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008992:	e01c      	b.n	80089ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	2b02      	cmp	r3, #2
 800899a:	d902      	bls.n	80089a2 <DMA_CheckFifoParam+0xb6>
 800899c:	2b03      	cmp	r3, #3
 800899e:	d003      	beq.n	80089a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80089a0:	e018      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	73fb      	strb	r3, [r7, #15]
        break;
 80089a6:	e015      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00e      	beq.n	80089d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
    break;
 80089b8:	e00b      	b.n	80089d2 <DMA_CheckFifoParam+0xe6>
        break;
 80089ba:	bf00      	nop
 80089bc:	e00a      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        break;
 80089be:	bf00      	nop
 80089c0:	e008      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        break;
 80089c2:	bf00      	nop
 80089c4:	e006      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        break;
 80089c6:	bf00      	nop
 80089c8:	e004      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        break;
 80089ca:	bf00      	nop
 80089cc:	e002      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
        break;
 80089ce:	bf00      	nop
 80089d0:	e000      	b.n	80089d4 <DMA_CheckFifoParam+0xe8>
    break;
 80089d2:	bf00      	nop
    }
  }

  return status;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop

080089e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a38      	ldr	r2, [pc, #224]	; (8008ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d022      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a36      	ldr	r2, [pc, #216]	; (8008adc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d01d      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a35      	ldr	r2, [pc, #212]	; (8008ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d018      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a33      	ldr	r2, [pc, #204]	; (8008ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d013      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a32      	ldr	r2, [pc, #200]	; (8008ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00e      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a30      	ldr	r2, [pc, #192]	; (8008aec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d009      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a2f      	ldr	r2, [pc, #188]	; (8008af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d004      	beq.n	8008a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a2d      	ldr	r2, [pc, #180]	; (8008af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d101      	bne.n	8008a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008a46:	2300      	movs	r3, #0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01a      	beq.n	8008a82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	3b08      	subs	r3, #8
 8008a54:	4a28      	ldr	r2, [pc, #160]	; (8008af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008a56:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5a:	091b      	lsrs	r3, r3, #4
 8008a5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a24      	ldr	r2, [pc, #144]	; (8008b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	2201      	movs	r2, #1
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a80:	e024      	b.n	8008acc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	3b10      	subs	r3, #16
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	091b      	lsrs	r3, r3, #4
 8008a92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d806      	bhi.n	8008aaa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4a1b      	ldr	r2, [pc, #108]	; (8008b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d902      	bls.n	8008aaa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a16      	ldr	r2, [pc, #88]	; (8008b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008abc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 031f 	and.w	r3, r3, #31
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	409a      	lsls	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	58025408 	.word	0x58025408
 8008adc:	5802541c 	.word	0x5802541c
 8008ae0:	58025430 	.word	0x58025430
 8008ae4:	58025444 	.word	0x58025444
 8008ae8:	58025458 	.word	0x58025458
 8008aec:	5802546c 	.word	0x5802546c
 8008af0:	58025480 	.word	0x58025480
 8008af4:	58025494 	.word	0x58025494
 8008af8:	cccccccd 	.word	0xcccccccd
 8008afc:	16009600 	.word	0x16009600
 8008b00:	58025880 	.word	0x58025880
 8008b04:	aaaaaaab 	.word	0xaaaaaaab
 8008b08:	400204b8 	.word	0x400204b8
 8008b0c:	4002040f 	.word	0x4002040f
 8008b10:	10008200 	.word	0x10008200
 8008b14:	40020880 	.word	0x40020880

08008b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d04a      	beq.n	8008bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d847      	bhi.n	8008bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a25      	ldr	r2, [pc, #148]	; (8008bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d022      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a24      	ldr	r2, [pc, #144]	; (8008bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d01d      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a22      	ldr	r2, [pc, #136]	; (8008bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d018      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a21      	ldr	r2, [pc, #132]	; (8008bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d013      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1f      	ldr	r2, [pc, #124]	; (8008be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00e      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1e      	ldr	r2, [pc, #120]	; (8008be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a1c      	ldr	r2, [pc, #112]	; (8008be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a1b      	ldr	r2, [pc, #108]	; (8008bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d101      	bne.n	8008b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e000      	b.n	8008b8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00a      	beq.n	8008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a15      	ldr	r2, [pc, #84]	; (8008bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ba0:	671a      	str	r2, [r3, #112]	; 0x70
 8008ba2:	e009      	b.n	8008bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	461a      	mov	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008bb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	409a      	lsls	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	58025408 	.word	0x58025408
 8008bd4:	5802541c 	.word	0x5802541c
 8008bd8:	58025430 	.word	0x58025430
 8008bdc:	58025444 	.word	0x58025444
 8008be0:	58025458 	.word	0x58025458
 8008be4:	5802546c 	.word	0x5802546c
 8008be8:	58025480 	.word	0x58025480
 8008bec:	58025494 	.word	0x58025494
 8008bf0:	1600963f 	.word	0x1600963f
 8008bf4:	58025940 	.word	0x58025940
 8008bf8:	1000823f 	.word	0x1000823f
 8008bfc:	40020940 	.word	0x40020940

08008c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b089      	sub	sp, #36	; 0x24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c0e:	4b89      	ldr	r3, [pc, #548]	; (8008e34 <HAL_GPIO_Init+0x234>)
 8008c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c12:	e194      	b.n	8008f3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	2101      	movs	r1, #1
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c20:	4013      	ands	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8186 	beq.w	8008f38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d005      	beq.n	8008c44 <HAL_GPIO_Init+0x44>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d130      	bne.n	8008ca6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	2203      	movs	r2, #3
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	43db      	mvns	r3, r3
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	43db      	mvns	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	4013      	ands	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	091b      	lsrs	r3, r3, #4
 8008c90:	f003 0201 	and.w	r2, r3, #1
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d017      	beq.n	8008ce2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	2203      	movs	r2, #3
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d123      	bne.n	8008d36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	08da      	lsrs	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3208      	adds	r2, #8
 8008cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f003 0307 	and.w	r3, r3, #7
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	220f      	movs	r2, #15
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	08da      	lsrs	r2, r3, #3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3208      	adds	r2, #8
 8008d30:	69b9      	ldr	r1, [r7, #24]
 8008d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	2203      	movs	r2, #3
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	43db      	mvns	r3, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f003 0203 	and.w	r2, r3, #3
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80e0 	beq.w	8008f38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d78:	4b2f      	ldr	r3, [pc, #188]	; (8008e38 <HAL_GPIO_Init+0x238>)
 8008d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d7e:	4a2e      	ldr	r2, [pc, #184]	; (8008e38 <HAL_GPIO_Init+0x238>)
 8008d80:	f043 0302 	orr.w	r3, r3, #2
 8008d84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d88:	4b2b      	ldr	r3, [pc, #172]	; (8008e38 <HAL_GPIO_Init+0x238>)
 8008d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d96:	4a29      	ldr	r2, [pc, #164]	; (8008e3c <HAL_GPIO_Init+0x23c>)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	220f      	movs	r2, #15
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <HAL_GPIO_Init+0x240>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d052      	beq.n	8008e68 <HAL_GPIO_Init+0x268>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <HAL_GPIO_Init+0x244>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d031      	beq.n	8008e2e <HAL_GPIO_Init+0x22e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <HAL_GPIO_Init+0x248>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d02b      	beq.n	8008e2a <HAL_GPIO_Init+0x22a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a1d      	ldr	r2, [pc, #116]	; (8008e4c <HAL_GPIO_Init+0x24c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d025      	beq.n	8008e26 <HAL_GPIO_Init+0x226>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1c      	ldr	r2, [pc, #112]	; (8008e50 <HAL_GPIO_Init+0x250>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01f      	beq.n	8008e22 <HAL_GPIO_Init+0x222>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1b      	ldr	r2, [pc, #108]	; (8008e54 <HAL_GPIO_Init+0x254>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d019      	beq.n	8008e1e <HAL_GPIO_Init+0x21e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1a      	ldr	r2, [pc, #104]	; (8008e58 <HAL_GPIO_Init+0x258>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_GPIO_Init+0x21a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a19      	ldr	r2, [pc, #100]	; (8008e5c <HAL_GPIO_Init+0x25c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00d      	beq.n	8008e16 <HAL_GPIO_Init+0x216>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a18      	ldr	r2, [pc, #96]	; (8008e60 <HAL_GPIO_Init+0x260>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <HAL_GPIO_Init+0x212>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <HAL_GPIO_Init+0x264>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d101      	bne.n	8008e0e <HAL_GPIO_Init+0x20e>
 8008e0a:	2309      	movs	r3, #9
 8008e0c:	e02d      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e0e:	230a      	movs	r3, #10
 8008e10:	e02b      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e12:	2308      	movs	r3, #8
 8008e14:	e029      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e16:	2307      	movs	r3, #7
 8008e18:	e027      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e1a:	2306      	movs	r3, #6
 8008e1c:	e025      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e1e:	2305      	movs	r3, #5
 8008e20:	e023      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e22:	2304      	movs	r3, #4
 8008e24:	e021      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e26:	2303      	movs	r3, #3
 8008e28:	e01f      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e01d      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e01b      	b.n	8008e6a <HAL_GPIO_Init+0x26a>
 8008e32:	bf00      	nop
 8008e34:	58000080 	.word	0x58000080
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	58000400 	.word	0x58000400
 8008e40:	58020000 	.word	0x58020000
 8008e44:	58020400 	.word	0x58020400
 8008e48:	58020800 	.word	0x58020800
 8008e4c:	58020c00 	.word	0x58020c00
 8008e50:	58021000 	.word	0x58021000
 8008e54:	58021400 	.word	0x58021400
 8008e58:	58021800 	.word	0x58021800
 8008e5c:	58021c00 	.word	0x58021c00
 8008e60:	58022000 	.word	0x58022000
 8008e64:	58022400 	.word	0x58022400
 8008e68:	2300      	movs	r3, #0
 8008e6a:	69fa      	ldr	r2, [r7, #28]
 8008e6c:	f002 0203 	and.w	r2, r2, #3
 8008e70:	0092      	lsls	r2, r2, #2
 8008e72:	4093      	lsls	r3, r2
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e7a:	4938      	ldr	r1, [pc, #224]	; (8008f5c <HAL_GPIO_Init+0x35c>)
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	089b      	lsrs	r3, r3, #2
 8008e80:	3302      	adds	r3, #2
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	4013      	ands	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	43db      	mvns	r3, r3
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f ae63 	bne.w	8008c14 <HAL_GPIO_Init+0x14>
  }
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	3724      	adds	r7, #36	; 0x24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	58000400 	.word	0x58000400

08008f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	887b      	ldrh	r3, [r7, #2]
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
 8008f7c:	e001      	b.n	8008f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	807b      	strh	r3, [r7, #2]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fa0:	787b      	ldrb	r3, [r7, #1]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fa6:	887a      	ldrh	r2, [r7, #2]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008fac:	e003      	b.n	8008fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008fae:	887b      	ldrh	r3, [r7, #2]
 8008fb0:	041a      	lsls	r2, r3, #16
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	619a      	str	r2, [r3, #24]
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
	...

08008fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e08b      	b.n	80090ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fa f8c6 	bl	800317c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2224      	movs	r2, #36	; 0x24
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0201 	bic.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d107      	bne.n	800903e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	e006      	b.n	800904c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800904a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d108      	bne.n	8009066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009062:	605a      	str	r2, [r3, #4]
 8009064:	e007      	b.n	8009076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6859      	ldr	r1, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <HAL_I2C_Init+0x134>)
 8009082:	430b      	orrs	r3, r1
 8009084:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009094:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69d9      	ldr	r1, [r3, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1a      	ldr	r2, [r3, #32]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2220      	movs	r2, #32
 80090da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	02008000 	.word	0x02008000

080090fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	461a      	mov	r2, r3
 8009108:	460b      	mov	r3, r1
 800910a:	817b      	strh	r3, [r7, #10]
 800910c:	4613      	mov	r3, r2
 800910e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b20      	cmp	r3, #32
 800911a:	f040 80fd 	bne.w	8009318 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_I2C_Master_Transmit+0x30>
 8009128:	2302      	movs	r3, #2
 800912a:	e0f6      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009134:	f7fa fdf4 	bl	8003d20 <HAL_GetTick>
 8009138:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2319      	movs	r3, #25
 8009140:	2201      	movs	r2, #1
 8009142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fa0a 	bl	8009560 <I2C_WaitOnFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e0e1      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2221      	movs	r2, #33	; 0x21
 800915a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2210      	movs	r2, #16
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	893a      	ldrh	r2, [r7, #8]
 8009176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009182:	b29b      	uxth	r3, r3
 8009184:	2bff      	cmp	r3, #255	; 0xff
 8009186:	d906      	bls.n	8009196 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	22ff      	movs	r2, #255	; 0xff
 800918c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800918e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e007      	b.n	80091a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80091a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d024      	beq.n	80091f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	3301      	adds	r3, #1
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	8979      	ldrh	r1, [r7, #10]
 80091ea:	4b4e      	ldr	r3, [pc, #312]	; (8009324 <HAL_I2C_Master_Transmit+0x228>)
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fc05 	bl	8009a00 <I2C_TransferConfig>
 80091f6:	e066      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	8979      	ldrh	r1, [r7, #10]
 8009200:	4b48      	ldr	r3, [pc, #288]	; (8009324 <HAL_I2C_Master_Transmit+0x228>)
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 fbfa 	bl	8009a00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800920c:	e05b      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	6a39      	ldr	r1, [r7, #32]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f9fd 	bl	8009612 <I2C_WaitOnTXISFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e07b      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d034      	beq.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d130      	bne.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	2200      	movs	r2, #0
 800926c:	2180      	movs	r1, #128	; 0x80
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 f976 	bl	8009560 <I2C_WaitOnFlagUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e04d      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009282:	b29b      	uxth	r3, r3
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	d90e      	bls.n	80092a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	22ff      	movs	r2, #255	; 0xff
 800928c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009292:	b2da      	uxtb	r2, r3
 8009294:	8979      	ldrh	r1, [r7, #10]
 8009296:	2300      	movs	r3, #0
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fbae 	bl	8009a00 <I2C_TransferConfig>
 80092a4:	e00f      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	8979      	ldrh	r1, [r7, #10]
 80092b8:	2300      	movs	r3, #0
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fb9d 	bl	8009a00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d19e      	bne.n	800920e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	6a39      	ldr	r1, [r7, #32]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 f9e3 	bl	80096a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e01a      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2220      	movs	r2, #32
 80092ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6859      	ldr	r1, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <HAL_I2C_Master_Transmit+0x22c>)
 80092f8:	400b      	ands	r3, r1
 80092fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	e000      	b.n	800931a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009318:	2302      	movs	r3, #2
  }
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	80002000 	.word	0x80002000
 8009328:	fe00e800 	.word	0xfe00e800

0800932c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af02      	add	r7, sp, #8
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	461a      	mov	r2, r3
 8009338:	460b      	mov	r3, r1
 800933a:	817b      	strh	r3, [r7, #10]
 800933c:	4613      	mov	r3, r2
 800933e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b20      	cmp	r3, #32
 800934a:	f040 80db 	bne.w	8009504 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_I2C_Master_Receive+0x30>
 8009358:	2302      	movs	r3, #2
 800935a:	e0d4      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009364:	f7fa fcdc 	bl	8003d20 <HAL_GetTick>
 8009368:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	2319      	movs	r3, #25
 8009370:	2201      	movs	r2, #1
 8009372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f8f2 	bl	8009560 <I2C_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e0bf      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2222      	movs	r2, #34	; 0x22
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2210      	movs	r2, #16
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	893a      	ldrh	r2, [r7, #8]
 80093a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2bff      	cmp	r3, #255	; 0xff
 80093b6:	d90e      	bls.n	80093d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	22ff      	movs	r2, #255	; 0xff
 80093bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	8979      	ldrh	r1, [r7, #10]
 80093c6:	4b52      	ldr	r3, [pc, #328]	; (8009510 <HAL_I2C_Master_Receive+0x1e4>)
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fb16 	bl	8009a00 <I2C_TransferConfig>
 80093d4:	e06d      	b.n	80094b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	8979      	ldrh	r1, [r7, #10]
 80093e8:	4b49      	ldr	r3, [pc, #292]	; (8009510 <HAL_I2C_Master_Receive+0x1e4>)
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fb05 	bl	8009a00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80093f6:	e05c      	b.n	80094b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	6a39      	ldr	r1, [r7, #32]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f993 	bl	8009728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e07c      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d034      	beq.n	80094b2 <HAL_I2C_Master_Receive+0x186>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944c:	2b00      	cmp	r3, #0
 800944e:	d130      	bne.n	80094b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	2200      	movs	r2, #0
 8009458:	2180      	movs	r1, #128	; 0x80
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f880 	bl	8009560 <I2C_WaitOnFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e04d      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	2bff      	cmp	r3, #255	; 0xff
 8009472:	d90e      	bls.n	8009492 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	22ff      	movs	r2, #255	; 0xff
 8009478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947e:	b2da      	uxtb	r2, r3
 8009480:	8979      	ldrh	r1, [r7, #10]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fab8 	bl	8009a00 <I2C_TransferConfig>
 8009490:	e00f      	b.n	80094b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	8979      	ldrh	r1, [r7, #10]
 80094a4:	2300      	movs	r3, #0
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 faa7 	bl	8009a00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d19d      	bne.n	80093f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	6a39      	ldr	r1, [r7, #32]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f8ed 	bl	80096a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e01a      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2220      	movs	r2, #32
 80094d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6859      	ldr	r1, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <HAL_I2C_Master_Receive+0x1e8>)
 80094e4:	400b      	ands	r3, r1
 80094e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	e000      	b.n	8009506 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009504:	2302      	movs	r3, #2
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	80002400 	.word	0x80002400
 8009514:	fe00e800 	.word	0xfe00e800

08009518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b02      	cmp	r3, #2
 800952c:	d103      	bne.n	8009536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b01      	cmp	r3, #1
 8009542:	d007      	beq.n	8009554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	619a      	str	r2, [r3, #24]
  }
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	4613      	mov	r3, r2
 800956e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009570:	e03b      	b.n	80095ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 f962 	bl	8009840 <I2C_IsErrorOccurred>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e041      	b.n	800960a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800958c:	d02d      	beq.n	80095ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800958e:	f7fa fbc7 	bl	8003d20 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d302      	bcc.n	80095a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d122      	bne.n	80095ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	699a      	ldr	r2, [r3, #24]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4013      	ands	r3, r2
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d113      	bne.n	80095ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c6:	f043 0220 	orr.w	r2, r3, #32
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e00f      	b.n	800960a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4013      	ands	r3, r2
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	bf0c      	ite	eq
 80095fa:	2301      	moveq	r3, #1
 80095fc:	2300      	movne	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	461a      	mov	r2, r3
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	429a      	cmp	r2, r3
 8009606:	d0b4      	beq.n	8009572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800961e:	e033      	b.n	8009688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f90b 	bl	8009840 <I2C_IsErrorOccurred>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e031      	b.n	8009698 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800963a:	d025      	beq.n	8009688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963c:	f7fa fb70 	bl	8003d20 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	d302      	bcc.n	8009652 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d11a      	bne.n	8009688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b02      	cmp	r3, #2
 800965e:	d013      	beq.n	8009688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	f043 0220 	orr.w	r2, r3, #32
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e007      	b.n	8009698 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b02      	cmp	r3, #2
 8009694:	d1c4      	bne.n	8009620 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096ac:	e02f      	b.n	800970e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 f8c4 	bl	8009840 <I2C_IsErrorOccurred>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e02d      	b.n	800971e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c2:	f7fa fb2d 	bl	8003d20 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d302      	bcc.n	80096d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11a      	bne.n	800970e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d013      	beq.n	800970e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ea:	f043 0220 	orr.w	r2, r3, #32
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e007      	b.n	800971e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b20      	cmp	r3, #32
 800971a:	d1c8      	bne.n	80096ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009738:	e071      	b.n	800981e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f000 f87e 	bl	8009840 <I2C_IsErrorOccurred>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b20      	cmp	r3, #32
 800975a:	d13b      	bne.n	80097d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d138      	bne.n	80097d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b04      	cmp	r3, #4
 800976e:	d105      	bne.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	2b10      	cmp	r3, #16
 8009788:	d121      	bne.n	80097ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2210      	movs	r2, #16
 8009790:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2204      	movs	r2, #4
 8009796:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2220      	movs	r2, #32
 800979e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6859      	ldr	r1, [r3, #4]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b24      	ldr	r3, [pc, #144]	; (800983c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80097ac:	400b      	ands	r3, r1
 80097ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]
 80097cc:	e002      	b.n	80097d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80097d4:	f7fa faa4 	bl	8003d20 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d302      	bcc.n	80097ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d119      	bne.n	800981e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d116      	bne.n	800981e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d00f      	beq.n	800981e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009802:	f043 0220 	orr.w	r2, r3, #32
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b04      	cmp	r3, #4
 800982a:	d002      	beq.n	8009832 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d083      	beq.n	800973a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	fe00e800 	.word	0xfe00e800

08009840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	; 0x28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b00      	cmp	r3, #0
 800986a:	d068      	beq.n	800993e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2210      	movs	r2, #16
 8009872:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009874:	e049      	b.n	800990a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800987c:	d045      	beq.n	800990a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800987e:	f7fa fa4f 	bl	8003d20 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	429a      	cmp	r2, r3
 800988c:	d302      	bcc.n	8009894 <I2C_IsErrorOccurred+0x54>
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d13a      	bne.n	800990a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800989e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098b6:	d121      	bne.n	80098fc <I2C_IsErrorOccurred+0xbc>
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098be:	d01d      	beq.n	80098fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80098c0:	7cfb      	ldrb	r3, [r7, #19]
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	d01a      	beq.n	80098fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80098d6:	f7fa fa23 	bl	8003d20 <HAL_GetTick>
 80098da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098dc:	e00e      	b.n	80098fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80098de:	f7fa fa1f 	bl	8003d20 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	2b19      	cmp	r3, #25
 80098ea:	d907      	bls.n	80098fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	f043 0320 	orr.w	r3, r3, #32
 80098f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80098fa:	e006      	b.n	800990a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b20      	cmp	r3, #32
 8009908:	d1e9      	bne.n	80098de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b20      	cmp	r3, #32
 8009916:	d003      	beq.n	8009920 <I2C_IsErrorOccurred+0xe0>
 8009918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0aa      	beq.n	8009876 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2220      	movs	r2, #32
 800992e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	f043 0304 	orr.w	r3, r3, #4
 8009936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	f043 0308 	orr.w	r3, r3, #8
 8009978:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	f043 0302 	orr.w	r3, r3, #2
 800999a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80099ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01c      	beq.n	80099ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7ff fdaf 	bl	8009518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6859      	ldr	r1, [r3, #4]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <I2C_IsErrorOccurred+0x1bc>)
 80099c6:	400b      	ands	r3, r1
 80099c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	431a      	orrs	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2220      	movs	r2, #32
 80099da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80099ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3728      	adds	r7, #40	; 0x28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	fe00e800 	.word	0xfe00e800

08009a00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	607b      	str	r3, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	817b      	strh	r3, [r7, #10]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a12:	897b      	ldrh	r3, [r7, #10]
 8009a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a18:	7a7b      	ldrb	r3, [r7, #9]
 8009a1a:	041b      	lsls	r3, r3, #16
 8009a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	0d5b      	lsrs	r3, r3, #21
 8009a3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009a3e:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <I2C_TransferConfig+0x60>)
 8009a40:	430b      	orrs	r3, r1
 8009a42:	43db      	mvns	r3, r3
 8009a44:	ea02 0103 	and.w	r1, r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	03ff63ff 	.word	0x03ff63ff

08009a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d138      	bne.n	8009aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e032      	b.n	8009aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2224      	movs	r2, #36	; 0x24
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0201 	bic.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6819      	ldr	r1, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e000      	b.n	8009aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009aec:	2302      	movs	r3, #2
  }
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d139      	bne.n	8009b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d101      	bne.n	8009b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e033      	b.n	8009b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2224      	movs	r2, #36	; 0x24
 8009b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0201 	orr.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	e000      	b.n	8009b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b84:	2302      	movs	r3, #2
  }
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ba2:	4a0c      	ldr	r2, [pc, #48]	; (8009bd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ba4:	f043 0302 	orr.w	r3, r3, #2
 8009ba8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	604b      	str	r3, [r1, #4]
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	58000400 	.word	0x58000400

08009bdc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009be8:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f023 0201 	bic.w	r2, r3, #1
 8009bf0:	4916      	ldr	r1, [pc, #88]	; (8009c4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009bf8:	4b14      	ldr	r3, [pc, #80]	; (8009c4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	4a13      	ldr	r2, [pc, #76]	; (8009c4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009bfe:	f023 0305 	bic.w	r3, r3, #5
 8009c02:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009c04:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	4a10      	ldr	r2, [pc, #64]	; (8009c4c <HAL_PWR_EnterSTOPMode+0x70>)
 8009c0a:	f023 0302 	bic.w	r3, r3, #2
 8009c0e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009c10:	4b0f      	ldr	r3, [pc, #60]	; (8009c50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	4a0e      	ldr	r2, [pc, #56]	; (8009c50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c16:	f043 0304 	orr.w	r3, r3, #4
 8009c1a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c1c:	f3bf 8f4f 	dsb	sy
}
 8009c20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009c22:	f3bf 8f6f 	isb	sy
}
 8009c26:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009c2e:	bf30      	wfi
 8009c30:	e000      	b.n	8009c34 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009c32:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009c34:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	4a05      	ldr	r2, [pc, #20]	; (8009c50 <HAL_PWR_EnterSTOPMode+0x74>)
 8009c3a:	f023 0304 	bic.w	r3, r3, #4
 8009c3e:	6113      	str	r3, [r2, #16]
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	58024800 	.word	0x58024800
 8009c50:	e000ed00 	.word	0xe000ed00

08009c54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c5c:	4b19      	ldr	r3, [pc, #100]	; (8009cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d00a      	beq.n	8009c7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c68:	4b16      	ldr	r3, [pc, #88]	; (8009cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d001      	beq.n	8009c7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e01f      	b.n	8009cba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e01d      	b.n	8009cba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f023 0207 	bic.w	r2, r3, #7
 8009c86:	490f      	ldr	r1, [pc, #60]	; (8009cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c8e:	f7fa f847 	bl	8003d20 <HAL_GetTick>
 8009c92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c94:	e009      	b.n	8009caa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c96:	f7fa f843 	bl	8003d20 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ca4:	d901      	bls.n	8009caa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e007      	b.n	8009cba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009caa:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb6:	d1ee      	bne.n	8009c96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	58024800 	.word	0x58024800

08009cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08c      	sub	sp, #48	; 0x30
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f000 bc48 	b.w	800a56c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8088 	beq.w	8009dfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cea:	4b99      	ldr	r3, [pc, #612]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cf4:	4b96      	ldr	r3, [pc, #600]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	2b10      	cmp	r3, #16
 8009cfe:	d007      	beq.n	8009d10 <HAL_RCC_OscConfig+0x48>
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	2b18      	cmp	r3, #24
 8009d04:	d111      	bne.n	8009d2a <HAL_RCC_OscConfig+0x62>
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d10c      	bne.n	8009d2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d10:	4b8f      	ldr	r3, [pc, #572]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d06d      	beq.n	8009df8 <HAL_RCC_OscConfig+0x130>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d169      	bne.n	8009df8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f000 bc21 	b.w	800a56c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d32:	d106      	bne.n	8009d42 <HAL_RCC_OscConfig+0x7a>
 8009d34:	4b86      	ldr	r3, [pc, #536]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a85      	ldr	r2, [pc, #532]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	e02e      	b.n	8009da0 <HAL_RCC_OscConfig+0xd8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10c      	bne.n	8009d64 <HAL_RCC_OscConfig+0x9c>
 8009d4a:	4b81      	ldr	r3, [pc, #516]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a80      	ldr	r2, [pc, #512]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	4b7e      	ldr	r3, [pc, #504]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a7d      	ldr	r2, [pc, #500]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	e01d      	b.n	8009da0 <HAL_RCC_OscConfig+0xd8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d6c:	d10c      	bne.n	8009d88 <HAL_RCC_OscConfig+0xc0>
 8009d6e:	4b78      	ldr	r3, [pc, #480]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a77      	ldr	r2, [pc, #476]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	4b75      	ldr	r3, [pc, #468]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a74      	ldr	r2, [pc, #464]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	e00b      	b.n	8009da0 <HAL_RCC_OscConfig+0xd8>
 8009d88:	4b71      	ldr	r3, [pc, #452]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a70      	ldr	r2, [pc, #448]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	4b6e      	ldr	r3, [pc, #440]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a6d      	ldr	r2, [pc, #436]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d013      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da8:	f7f9 ffba 	bl	8003d20 <HAL_GetTick>
 8009dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dae:	e008      	b.n	8009dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009db0:	f7f9 ffb6 	bl	8003d20 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b64      	cmp	r3, #100	; 0x64
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e3d4      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dc2:	4b63      	ldr	r3, [pc, #396]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f0      	beq.n	8009db0 <HAL_RCC_OscConfig+0xe8>
 8009dce:	e014      	b.n	8009dfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd0:	f7f9 ffa6 	bl	8003d20 <HAL_GetTick>
 8009dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dd6:	e008      	b.n	8009dea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dd8:	f7f9 ffa2 	bl	8003d20 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b64      	cmp	r3, #100	; 0x64
 8009de4:	d901      	bls.n	8009dea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e3c0      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dea:	4b59      	ldr	r3, [pc, #356]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1f0      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x110>
 8009df6:	e000      	b.n	8009dfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 80ca 	beq.w	8009f9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e08:	4b51      	ldr	r3, [pc, #324]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e12:	4b4f      	ldr	r3, [pc, #316]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <HAL_RCC_OscConfig+0x166>
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	2b18      	cmp	r3, #24
 8009e22:	d156      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x20a>
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f003 0303 	and.w	r3, r3, #3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d151      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e2e:	4b48      	ldr	r3, [pc, #288]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0304 	and.w	r3, r3, #4
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <HAL_RCC_OscConfig+0x17e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e392      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e46:	4b42      	ldr	r3, [pc, #264]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f023 0219 	bic.w	r2, r3, #25
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	493f      	ldr	r1, [pc, #252]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e58:	f7f9 ff62 	bl	8003d20 <HAL_GetTick>
 8009e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e5e:	e008      	b.n	8009e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e60:	f7f9 ff5e 	bl	8003d20 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e37c      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e72:	4b37      	ldr	r3, [pc, #220]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0f0      	beq.n	8009e60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e7e:	f7f9 ff5b 	bl	8003d38 <HAL_GetREVID>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d817      	bhi.n	8009ebc <HAL_RCC_OscConfig+0x1f4>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b40      	cmp	r3, #64	; 0x40
 8009e92:	d108      	bne.n	8009ea6 <HAL_RCC_OscConfig+0x1de>
 8009e94:	4b2e      	ldr	r3, [pc, #184]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e9c:	4a2c      	ldr	r2, [pc, #176]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ea4:	e07a      	b.n	8009f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ea6:	4b2a      	ldr	r3, [pc, #168]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	031b      	lsls	r3, r3, #12
 8009eb4:	4926      	ldr	r1, [pc, #152]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eba:	e06f      	b.n	8009f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ebc:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	061b      	lsls	r3, r3, #24
 8009eca:	4921      	ldr	r1, [pc, #132]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ed0:	e064      	b.n	8009f9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d047      	beq.n	8009f6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009eda:	4b1d      	ldr	r3, [pc, #116]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f023 0219 	bic.w	r2, r3, #25
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	491a      	ldr	r1, [pc, #104]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eec:	f7f9 ff18 	bl	8003d20 <HAL_GetTick>
 8009ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ef2:	e008      	b.n	8009f06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ef4:	f7f9 ff14 	bl	8003d20 <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e332      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f06:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0f0      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f12:	f7f9 ff11 	bl	8003d38 <HAL_GetREVID>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d819      	bhi.n	8009f54 <HAL_RCC_OscConfig+0x28c>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	2b40      	cmp	r3, #64	; 0x40
 8009f26:	d108      	bne.n	8009f3a <HAL_RCC_OscConfig+0x272>
 8009f28:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f30:	4a07      	ldr	r2, [pc, #28]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f36:	6053      	str	r3, [r2, #4]
 8009f38:	e030      	b.n	8009f9c <HAL_RCC_OscConfig+0x2d4>
 8009f3a:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	031b      	lsls	r3, r3, #12
 8009f48:	4901      	ldr	r1, [pc, #4]	; (8009f50 <HAL_RCC_OscConfig+0x288>)
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	604b      	str	r3, [r1, #4]
 8009f4e:	e025      	b.n	8009f9c <HAL_RCC_OscConfig+0x2d4>
 8009f50:	58024400 	.word	0x58024400
 8009f54:	4b9a      	ldr	r3, [pc, #616]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	061b      	lsls	r3, r3, #24
 8009f62:	4997      	ldr	r1, [pc, #604]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	604b      	str	r3, [r1, #4]
 8009f68:	e018      	b.n	8009f9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f6a:	4b95      	ldr	r3, [pc, #596]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a94      	ldr	r2, [pc, #592]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009f70:	f023 0301 	bic.w	r3, r3, #1
 8009f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f76:	f7f9 fed3 	bl	8003d20 <HAL_GetTick>
 8009f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f7c:	e008      	b.n	8009f90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f7e:	f7f9 fecf 	bl	8003d20 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d901      	bls.n	8009f90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e2ed      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f90:	4b8b      	ldr	r3, [pc, #556]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f0      	bne.n	8009f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80a9 	beq.w	800a0fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009faa:	4b85      	ldr	r3, [pc, #532]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fb4:	4b82      	ldr	r3, [pc, #520]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d007      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x308>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b18      	cmp	r3, #24
 8009fc4:	d13a      	bne.n	800a03c <HAL_RCC_OscConfig+0x374>
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f003 0303 	and.w	r3, r3, #3
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d135      	bne.n	800a03c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fd0:	4b7b      	ldr	r3, [pc, #492]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x320>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	2b80      	cmp	r3, #128	; 0x80
 8009fe2:	d001      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e2c1      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fe8:	f7f9 fea6 	bl	8003d38 <HAL_GetREVID>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d817      	bhi.n	800a026 <HAL_RCC_OscConfig+0x35e>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	d108      	bne.n	800a010 <HAL_RCC_OscConfig+0x348>
 8009ffe:	4b70      	ldr	r3, [pc, #448]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a006:	4a6e      	ldr	r2, [pc, #440]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a00c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a00e:	e075      	b.n	800a0fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a010:	4b6b      	ldr	r3, [pc, #428]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	069b      	lsls	r3, r3, #26
 800a01e:	4968      	ldr	r1, [pc, #416]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a020:	4313      	orrs	r3, r2
 800a022:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a024:	e06a      	b.n	800a0fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a026:	4b66      	ldr	r3, [pc, #408]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	061b      	lsls	r3, r3, #24
 800a034:	4962      	ldr	r1, [pc, #392]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a036:	4313      	orrs	r3, r2
 800a038:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a03a:	e05f      	b.n	800a0fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d042      	beq.n	800a0ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a044:	4b5e      	ldr	r3, [pc, #376]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a5d      	ldr	r2, [pc, #372]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a050:	f7f9 fe66 	bl	8003d20 <HAL_GetTick>
 800a054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a056:	e008      	b.n	800a06a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a058:	f7f9 fe62 	bl	8003d20 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	2b02      	cmp	r3, #2
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e280      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a06a:	4b55      	ldr	r3, [pc, #340]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0f0      	beq.n	800a058 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a076:	f7f9 fe5f 	bl	8003d38 <HAL_GetREVID>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a080:	4293      	cmp	r3, r2
 800a082:	d817      	bhi.n	800a0b4 <HAL_RCC_OscConfig+0x3ec>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d108      	bne.n	800a09e <HAL_RCC_OscConfig+0x3d6>
 800a08c:	4b4c      	ldr	r3, [pc, #304]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a094:	4a4a      	ldr	r2, [pc, #296]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a09a:	6053      	str	r3, [r2, #4]
 800a09c:	e02e      	b.n	800a0fc <HAL_RCC_OscConfig+0x434>
 800a09e:	4b48      	ldr	r3, [pc, #288]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	069b      	lsls	r3, r3, #26
 800a0ac:	4944      	ldr	r1, [pc, #272]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	604b      	str	r3, [r1, #4]
 800a0b2:	e023      	b.n	800a0fc <HAL_RCC_OscConfig+0x434>
 800a0b4:	4b42      	ldr	r3, [pc, #264]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	061b      	lsls	r3, r3, #24
 800a0c2:	493f      	ldr	r1, [pc, #252]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60cb      	str	r3, [r1, #12]
 800a0c8:	e018      	b.n	800a0fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0ca:	4b3d      	ldr	r3, [pc, #244]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a3c      	ldr	r2, [pc, #240]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d6:	f7f9 fe23 	bl	8003d20 <HAL_GetTick>
 800a0da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0de:	f7f9 fe1f 	bl	8003d20 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e23d      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0f0:	4b33      	ldr	r3, [pc, #204]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1f0      	bne.n	800a0de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d036      	beq.n	800a176 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d019      	beq.n	800a144 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a110:	4b2b      	ldr	r3, [pc, #172]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a114:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a11c:	f7f9 fe00 	bl	8003d20 <HAL_GetTick>
 800a120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a124:	f7f9 fdfc 	bl	8003d20 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e21a      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a136:	4b22      	ldr	r3, [pc, #136]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f0      	beq.n	800a124 <HAL_RCC_OscConfig+0x45c>
 800a142:	e018      	b.n	800a176 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a144:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a148:	4a1d      	ldr	r2, [pc, #116]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a150:	f7f9 fde6 	bl	8003d20 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a158:	f7f9 fde2 	bl	8003d20 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e200      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a16a:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f0      	bne.n	800a158 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0320 	and.w	r3, r3, #32
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d039      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01c      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a18a:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a0c      	ldr	r2, [pc, #48]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a194:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a196:	f7f9 fdc3 	bl	8003d20 <HAL_GetTick>
 800a19a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a19c:	e008      	b.n	800a1b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a19e:	f7f9 fdbf 	bl	8003d20 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d901      	bls.n	800a1b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e1dd      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1b0:	4b03      	ldr	r3, [pc, #12]	; (800a1c0 <HAL_RCC_OscConfig+0x4f8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d0f0      	beq.n	800a19e <HAL_RCC_OscConfig+0x4d6>
 800a1bc:	e01b      	b.n	800a1f6 <HAL_RCC_OscConfig+0x52e>
 800a1be:	bf00      	nop
 800a1c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1c4:	4b9b      	ldr	r3, [pc, #620]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a9a      	ldr	r2, [pc, #616]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a1ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1d0:	f7f9 fda6 	bl	8003d20 <HAL_GetTick>
 800a1d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1d6:	e008      	b.n	800a1ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1d8:	f7f9 fda2 	bl	8003d20 <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d901      	bls.n	800a1ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e1c0      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1ea:	4b92      	ldr	r3, [pc, #584]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1f0      	bne.n	800a1d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0304 	and.w	r3, r3, #4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 8081 	beq.w	800a306 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a204:	4b8c      	ldr	r3, [pc, #560]	; (800a438 <HAL_RCC_OscConfig+0x770>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a8b      	ldr	r2, [pc, #556]	; (800a438 <HAL_RCC_OscConfig+0x770>)
 800a20a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a20e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a210:	f7f9 fd86 	bl	8003d20 <HAL_GetTick>
 800a214:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a218:	f7f9 fd82 	bl	8003d20 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b64      	cmp	r3, #100	; 0x64
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e1a0      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a22a:	4b83      	ldr	r3, [pc, #524]	; (800a438 <HAL_RCC_OscConfig+0x770>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0f0      	beq.n	800a218 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d106      	bne.n	800a24c <HAL_RCC_OscConfig+0x584>
 800a23e:	4b7d      	ldr	r3, [pc, #500]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	4a7c      	ldr	r2, [pc, #496]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	6713      	str	r3, [r2, #112]	; 0x70
 800a24a:	e02d      	b.n	800a2a8 <HAL_RCC_OscConfig+0x5e0>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10c      	bne.n	800a26e <HAL_RCC_OscConfig+0x5a6>
 800a254:	4b77      	ldr	r3, [pc, #476]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a258:	4a76      	ldr	r2, [pc, #472]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	6713      	str	r3, [r2, #112]	; 0x70
 800a260:	4b74      	ldr	r3, [pc, #464]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a264:	4a73      	ldr	r2, [pc, #460]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a266:	f023 0304 	bic.w	r3, r3, #4
 800a26a:	6713      	str	r3, [r2, #112]	; 0x70
 800a26c:	e01c      	b.n	800a2a8 <HAL_RCC_OscConfig+0x5e0>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b05      	cmp	r3, #5
 800a274:	d10c      	bne.n	800a290 <HAL_RCC_OscConfig+0x5c8>
 800a276:	4b6f      	ldr	r3, [pc, #444]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	4a6e      	ldr	r2, [pc, #440]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a27c:	f043 0304 	orr.w	r3, r3, #4
 800a280:	6713      	str	r3, [r2, #112]	; 0x70
 800a282:	4b6c      	ldr	r3, [pc, #432]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	4a6b      	ldr	r2, [pc, #428]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a288:	f043 0301 	orr.w	r3, r3, #1
 800a28c:	6713      	str	r3, [r2, #112]	; 0x70
 800a28e:	e00b      	b.n	800a2a8 <HAL_RCC_OscConfig+0x5e0>
 800a290:	4b68      	ldr	r3, [pc, #416]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a294:	4a67      	ldr	r2, [pc, #412]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	6713      	str	r3, [r2, #112]	; 0x70
 800a29c:	4b65      	ldr	r3, [pc, #404]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a0:	4a64      	ldr	r2, [pc, #400]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a2a2:	f023 0304 	bic.w	r3, r3, #4
 800a2a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d015      	beq.n	800a2dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b0:	f7f9 fd36 	bl	8003d20 <HAL_GetTick>
 800a2b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2b6:	e00a      	b.n	800a2ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2b8:	f7f9 fd32 	bl	8003d20 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e14e      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2ce:	4b59      	ldr	r3, [pc, #356]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0ee      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x5f0>
 800a2da:	e014      	b.n	800a306 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2dc:	f7f9 fd20 	bl	8003d20 <HAL_GetTick>
 800a2e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2e2:	e00a      	b.n	800a2fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2e4:	f7f9 fd1c 	bl	8003d20 <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d901      	bls.n	800a2fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e138      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2fa:	4b4e      	ldr	r3, [pc, #312]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1ee      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 812d 	beq.w	800a56a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a310:	4b48      	ldr	r3, [pc, #288]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a318:	2b18      	cmp	r3, #24
 800a31a:	f000 80bd 	beq.w	800a498 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	2b02      	cmp	r3, #2
 800a324:	f040 809e 	bne.w	800a464 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a328:	4b42      	ldr	r3, [pc, #264]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a41      	ldr	r2, [pc, #260]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a32e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a334:	f7f9 fcf4 	bl	8003d20 <HAL_GetTick>
 800a338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a33a:	e008      	b.n	800a34e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a33c:	f7f9 fcf0 	bl	8003d20 <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b02      	cmp	r3, #2
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e10e      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a34e:	4b39      	ldr	r3, [pc, #228]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1f0      	bne.n	800a33c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a35a:	4b36      	ldr	r3, [pc, #216]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a35c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a35e:	4b37      	ldr	r3, [pc, #220]	; (800a43c <HAL_RCC_OscConfig+0x774>)
 800a360:	4013      	ands	r3, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a36a:	0112      	lsls	r2, r2, #4
 800a36c:	430a      	orrs	r2, r1
 800a36e:	4931      	ldr	r1, [pc, #196]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a370:	4313      	orrs	r3, r2
 800a372:	628b      	str	r3, [r1, #40]	; 0x28
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a378:	3b01      	subs	r3, #1
 800a37a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a382:	3b01      	subs	r3, #1
 800a384:	025b      	lsls	r3, r3, #9
 800a386:	b29b      	uxth	r3, r3
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	3b01      	subs	r3, #1
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39c:	3b01      	subs	r3, #1
 800a39e:	061b      	lsls	r3, r3, #24
 800a3a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3a4:	4923      	ldr	r1, [pc, #140]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a3aa:	4b22      	ldr	r3, [pc, #136]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	4a21      	ldr	r2, [pc, #132]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3b0:	f023 0301 	bic.w	r3, r3, #1
 800a3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3b6:	4b1f      	ldr	r3, [pc, #124]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ba:	4b21      	ldr	r3, [pc, #132]	; (800a440 <HAL_RCC_OscConfig+0x778>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3c2:	00d2      	lsls	r2, r2, #3
 800a3c4:	491b      	ldr	r1, [pc, #108]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3ca:	4b1a      	ldr	r3, [pc, #104]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	f023 020c 	bic.w	r2, r3, #12
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d6:	4917      	ldr	r1, [pc, #92]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3dc:	4b15      	ldr	r3, [pc, #84]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	f023 0202 	bic.w	r2, r3, #2
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e8:	4912      	ldr	r1, [pc, #72]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3ee:	4b11      	ldr	r3, [pc, #68]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	4a10      	ldr	r2, [pc, #64]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3fa:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fe:	4a0d      	ldr	r2, [pc, #52]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a406:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	4a0a      	ldr	r2, [pc, #40]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a40c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a412:	4b08      	ldr	r3, [pc, #32]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	4a07      	ldr	r2, [pc, #28]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a418:	f043 0301 	orr.w	r3, r3, #1
 800a41c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a04      	ldr	r2, [pc, #16]	; (800a434 <HAL_RCC_OscConfig+0x76c>)
 800a424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a42a:	f7f9 fc79 	bl	8003d20 <HAL_GetTick>
 800a42e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a430:	e011      	b.n	800a456 <HAL_RCC_OscConfig+0x78e>
 800a432:	bf00      	nop
 800a434:	58024400 	.word	0x58024400
 800a438:	58024800 	.word	0x58024800
 800a43c:	fffffc0c 	.word	0xfffffc0c
 800a440:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a444:	f7f9 fc6c 	bl	8003d20 <HAL_GetTick>
 800a448:	4602      	mov	r2, r0
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d901      	bls.n	800a456 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e08a      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a456:	4b47      	ldr	r3, [pc, #284]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0f0      	beq.n	800a444 <HAL_RCC_OscConfig+0x77c>
 800a462:	e082      	b.n	800a56a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a464:	4b43      	ldr	r3, [pc, #268]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a42      	ldr	r2, [pc, #264]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a46a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a46e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a470:	f7f9 fc56 	bl	8003d20 <HAL_GetTick>
 800a474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a476:	e008      	b.n	800a48a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a478:	f7f9 fc52 	bl	8003d20 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e070      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a48a:	4b3a      	ldr	r3, [pc, #232]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1f0      	bne.n	800a478 <HAL_RCC_OscConfig+0x7b0>
 800a496:	e068      	b.n	800a56a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a498:	4b36      	ldr	r3, [pc, #216]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a49e:	4b35      	ldr	r3, [pc, #212]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d031      	beq.n	800a510 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f003 0203 	and.w	r2, r3, #3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d12a      	bne.n	800a510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d122      	bne.n	800a510 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d11a      	bne.n	800a510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	0a5b      	lsrs	r3, r3, #9
 800a4de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d111      	bne.n	800a510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d108      	bne.n	800a510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	0e1b      	lsrs	r3, r3, #24
 800a502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d001      	beq.n	800a514 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e02b      	b.n	800a56c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a514:	4b17      	ldr	r3, [pc, #92]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a518:	08db      	lsrs	r3, r3, #3
 800a51a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a51e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	429a      	cmp	r2, r3
 800a528:	d01f      	beq.n	800a56a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a52a:	4b12      	ldr	r3, [pc, #72]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a11      	ldr	r2, [pc, #68]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a530:	f023 0301 	bic.w	r3, r3, #1
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a536:	f7f9 fbf3 	bl	8003d20 <HAL_GetTick>
 800a53a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a53c:	bf00      	nop
 800a53e:	f7f9 fbef 	bl	8003d20 <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	4293      	cmp	r3, r2
 800a548:	d0f9      	beq.n	800a53e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a54a:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a54c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <HAL_RCC_OscConfig+0x8b0>)
 800a550:	4013      	ands	r3, r2
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a556:	00d2      	lsls	r2, r2, #3
 800a558:	4906      	ldr	r1, [pc, #24]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a55e:	4b05      	ldr	r3, [pc, #20]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	4a04      	ldr	r2, [pc, #16]	; (800a574 <HAL_RCC_OscConfig+0x8ac>)
 800a564:	f043 0301 	orr.w	r3, r3, #1
 800a568:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3730      	adds	r7, #48	; 0x30
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	58024400 	.word	0x58024400
 800a578:	ffff0007 	.word	0xffff0007

0800a57c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e19c      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a590:	4b8a      	ldr	r3, [pc, #552]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d910      	bls.n	800a5c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a59e:	4b87      	ldr	r3, [pc, #540]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f023 020f 	bic.w	r2, r3, #15
 800a5a6:	4985      	ldr	r1, [pc, #532]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ae:	4b83      	ldr	r3, [pc, #524]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d001      	beq.n	800a5c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e184      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d010      	beq.n	800a5ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	691a      	ldr	r2, [r3, #16]
 800a5d0:	4b7b      	ldr	r3, [pc, #492]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d908      	bls.n	800a5ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5dc:	4b78      	ldr	r3, [pc, #480]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	4975      	ldr	r1, [pc, #468]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0308 	and.w	r3, r3, #8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d010      	beq.n	800a61c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	695a      	ldr	r2, [r3, #20]
 800a5fe:	4b70      	ldr	r3, [pc, #448]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a606:	429a      	cmp	r2, r3
 800a608:	d908      	bls.n	800a61c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a60a:	4b6d      	ldr	r3, [pc, #436]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	496a      	ldr	r1, [pc, #424]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0310 	and.w	r3, r3, #16
 800a624:	2b00      	cmp	r3, #0
 800a626:	d010      	beq.n	800a64a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	4b64      	ldr	r3, [pc, #400]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a634:	429a      	cmp	r2, r3
 800a636:	d908      	bls.n	800a64a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a638:	4b61      	ldr	r3, [pc, #388]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	495e      	ldr	r1, [pc, #376]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a646:	4313      	orrs	r3, r2
 800a648:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d010      	beq.n	800a678 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69da      	ldr	r2, [r3, #28]
 800a65a:	4b59      	ldr	r3, [pc, #356]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a662:	429a      	cmp	r2, r3
 800a664:	d908      	bls.n	800a678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a666:	4b56      	ldr	r3, [pc, #344]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	4953      	ldr	r1, [pc, #332]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a674:	4313      	orrs	r3, r2
 800a676:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	4b4d      	ldr	r3, [pc, #308]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	429a      	cmp	r2, r3
 800a692:	d908      	bls.n	800a6a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a694:	4b4a      	ldr	r3, [pc, #296]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f023 020f 	bic.w	r2, r3, #15
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4947      	ldr	r1, [pc, #284]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d055      	beq.n	800a75e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6b2:	4b43      	ldr	r3, [pc, #268]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	4940      	ldr	r1, [pc, #256]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d107      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6cc:	4b3c      	ldr	r3, [pc, #240]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d121      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0f6      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6e4:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d115      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e0ea      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d107      	bne.n	800a70c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6fc:	4b30      	ldr	r3, [pc, #192]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e0de      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a70c:	4b2c      	ldr	r3, [pc, #176]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e0d6      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a71c:	4b28      	ldr	r3, [pc, #160]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	f023 0207 	bic.w	r2, r3, #7
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	4925      	ldr	r1, [pc, #148]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a72e:	f7f9 faf7 	bl	8003d20 <HAL_GetTick>
 800a732:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a734:	e00a      	b.n	800a74c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a736:	f7f9 faf3 	bl	8003d20 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	f241 3288 	movw	r2, #5000	; 0x1388
 800a744:	4293      	cmp	r3, r2
 800a746:	d901      	bls.n	800a74c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e0be      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a74c:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d1eb      	bne.n	800a736 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d010      	beq.n	800a78c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	4b14      	ldr	r3, [pc, #80]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	429a      	cmp	r2, r3
 800a778:	d208      	bcs.n	800a78c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	f023 020f 	bic.w	r2, r3, #15
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	490e      	ldr	r1, [pc, #56]	; (800a7c0 <HAL_RCC_ClockConfig+0x244>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a78c:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d214      	bcs.n	800a7c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a79a:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f023 020f 	bic.w	r2, r3, #15
 800a7a2:	4906      	ldr	r1, [pc, #24]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <HAL_RCC_ClockConfig+0x240>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d005      	beq.n	800a7c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e086      	b.n	800a8ca <HAL_RCC_ClockConfig+0x34e>
 800a7bc:	52002000 	.word	0x52002000
 800a7c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d010      	beq.n	800a7f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	4b3f      	ldr	r3, [pc, #252]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d208      	bcs.n	800a7f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7e0:	4b3c      	ldr	r3, [pc, #240]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	4939      	ldr	r1, [pc, #228]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d010      	beq.n	800a820 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695a      	ldr	r2, [r3, #20]
 800a802:	4b34      	ldr	r3, [pc, #208]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d208      	bcs.n	800a820 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a80e:	4b31      	ldr	r3, [pc, #196]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	492e      	ldr	r1, [pc, #184]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0310 	and.w	r3, r3, #16
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d010      	beq.n	800a84e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	699a      	ldr	r2, [r3, #24]
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a838:	429a      	cmp	r2, r3
 800a83a:	d208      	bcs.n	800a84e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a83c:	4b25      	ldr	r3, [pc, #148]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	4922      	ldr	r1, [pc, #136]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d010      	beq.n	800a87c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a866:	429a      	cmp	r2, r3
 800a868:	d208      	bcs.n	800a87c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a86a:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	4917      	ldr	r1, [pc, #92]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a87c:	f000 f834 	bl	800a8e8 <HAL_RCC_GetSysClockFreq>
 800a880:	4602      	mov	r2, r0
 800a882:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	0a1b      	lsrs	r3, r3, #8
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	4912      	ldr	r1, [pc, #72]	; (800a8d8 <HAL_RCC_ClockConfig+0x35c>)
 800a88e:	5ccb      	ldrb	r3, [r1, r3]
 800a890:	f003 031f 	and.w	r3, r3, #31
 800a894:	fa22 f303 	lsr.w	r3, r2, r3
 800a898:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a89a:	4b0e      	ldr	r3, [pc, #56]	; (800a8d4 <HAL_RCC_ClockConfig+0x358>)
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f003 030f 	and.w	r3, r3, #15
 800a8a2:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <HAL_RCC_ClockConfig+0x35c>)
 800a8a4:	5cd3      	ldrb	r3, [r2, r3]
 800a8a6:	f003 031f 	and.w	r3, r3, #31
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <HAL_RCC_ClockConfig+0x360>)
 800a8b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8b4:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <HAL_RCC_ClockConfig+0x364>)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a8ba:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <HAL_RCC_ClockConfig+0x368>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f8 ff52 	bl	8003768 <HAL_InitTick>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	08017610 	.word	0x08017610
 800a8dc:	24000094 	.word	0x24000094
 800a8e0:	24000090 	.word	0x24000090
 800a8e4:	24000098 	.word	0x24000098

0800a8e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b089      	sub	sp, #36	; 0x24
 800a8ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8ee:	4bb3      	ldr	r3, [pc, #716]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8f6:	2b18      	cmp	r3, #24
 800a8f8:	f200 8155 	bhi.w	800aba6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a8fc:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a902:	bf00      	nop
 800a904:	0800a969 	.word	0x0800a969
 800a908:	0800aba7 	.word	0x0800aba7
 800a90c:	0800aba7 	.word	0x0800aba7
 800a910:	0800aba7 	.word	0x0800aba7
 800a914:	0800aba7 	.word	0x0800aba7
 800a918:	0800aba7 	.word	0x0800aba7
 800a91c:	0800aba7 	.word	0x0800aba7
 800a920:	0800aba7 	.word	0x0800aba7
 800a924:	0800a98f 	.word	0x0800a98f
 800a928:	0800aba7 	.word	0x0800aba7
 800a92c:	0800aba7 	.word	0x0800aba7
 800a930:	0800aba7 	.word	0x0800aba7
 800a934:	0800aba7 	.word	0x0800aba7
 800a938:	0800aba7 	.word	0x0800aba7
 800a93c:	0800aba7 	.word	0x0800aba7
 800a940:	0800aba7 	.word	0x0800aba7
 800a944:	0800a995 	.word	0x0800a995
 800a948:	0800aba7 	.word	0x0800aba7
 800a94c:	0800aba7 	.word	0x0800aba7
 800a950:	0800aba7 	.word	0x0800aba7
 800a954:	0800aba7 	.word	0x0800aba7
 800a958:	0800aba7 	.word	0x0800aba7
 800a95c:	0800aba7 	.word	0x0800aba7
 800a960:	0800aba7 	.word	0x0800aba7
 800a964:	0800a99b 	.word	0x0800a99b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a968:	4b94      	ldr	r3, [pc, #592]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0320 	and.w	r3, r3, #32
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a974:	4b91      	ldr	r3, [pc, #580]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	08db      	lsrs	r3, r3, #3
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	4a90      	ldr	r2, [pc, #576]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a980:	fa22 f303 	lsr.w	r3, r2, r3
 800a984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a986:	e111      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a988:	4b8d      	ldr	r3, [pc, #564]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a98a:	61bb      	str	r3, [r7, #24]
      break;
 800a98c:	e10e      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a98e:	4b8d      	ldr	r3, [pc, #564]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a990:	61bb      	str	r3, [r7, #24]
      break;
 800a992:	e10b      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a994:	4b8c      	ldr	r3, [pc, #560]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a996:	61bb      	str	r3, [r7, #24]
      break;
 800a998:	e108      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a99a:	4b88      	ldr	r3, [pc, #544]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	f003 0303 	and.w	r3, r3, #3
 800a9a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a9a4:	4b85      	ldr	r3, [pc, #532]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	091b      	lsrs	r3, r3, #4
 800a9aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9b0:	4b82      	ldr	r3, [pc, #520]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9ba:	4b80      	ldr	r3, [pc, #512]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9be:	08db      	lsrs	r3, r3, #3
 800a9c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80e1 	beq.w	800aba0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	f000 8083 	beq.w	800aaec <HAL_RCC_GetSysClockFreq+0x204>
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	f200 80a1 	bhi.w	800ab30 <HAL_RCC_GetSysClockFreq+0x248>
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_RCC_GetSysClockFreq+0x114>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d056      	beq.n	800aaa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9fa:	e099      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9fc:	4b6f      	ldr	r3, [pc, #444]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d02d      	beq.n	800aa64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa08:	4b6c      	ldr	r3, [pc, #432]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	08db      	lsrs	r3, r3, #3
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	4a6b      	ldr	r2, [pc, #428]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
 800aa18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa32:	4b62      	ldr	r3, [pc, #392]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa42:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa46:	eddf 5a61 	vldr	s11, [pc, #388]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa62:	e087      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800abd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa76:	4b51      	ldr	r3, [pc, #324]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa86:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaa6:	e065      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaba:	4b40      	ldr	r3, [pc, #256]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaca:	ed97 6a02 	vldr	s12, [r7, #8]
 800aace:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800aad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaea:	e043      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b2f      	ldr	r3, [pc, #188]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab2e:	e021      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b1e      	ldr	r3, [pc, #120]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab74:	4b11      	ldr	r3, [pc, #68]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	0a5b      	lsrs	r3, r3, #9
 800ab7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7e:	3301      	adds	r3, #1
 800ab80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	ee07 3a90 	vmov	s15, r3
 800ab88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab98:	ee17 3a90 	vmov	r3, s15
 800ab9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab9e:	e005      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61bb      	str	r3, [r7, #24]
      break;
 800aba4:	e002      	b.n	800abac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aba6:	4b07      	ldr	r3, [pc, #28]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aba8:	61bb      	str	r3, [r7, #24]
      break;
 800abaa:	bf00      	nop
  }

  return sysclockfreq;
 800abac:	69bb      	ldr	r3, [r7, #24]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3724      	adds	r7, #36	; 0x24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	58024400 	.word	0x58024400
 800abc0:	03d09000 	.word	0x03d09000
 800abc4:	003d0900 	.word	0x003d0900
 800abc8:	017d7840 	.word	0x017d7840
 800abcc:	46000000 	.word	0x46000000
 800abd0:	4c742400 	.word	0x4c742400
 800abd4:	4a742400 	.word	0x4a742400
 800abd8:	4bbebc20 	.word	0x4bbebc20

0800abdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abe2:	f7ff fe81 	bl	800a8e8 <HAL_RCC_GetSysClockFreq>
 800abe6:	4602      	mov	r2, r0
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x50>)
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	0a1b      	lsrs	r3, r3, #8
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	490f      	ldr	r1, [pc, #60]	; (800ac30 <HAL_RCC_GetHCLKFreq+0x54>)
 800abf4:	5ccb      	ldrb	r3, [r1, r3]
 800abf6:	f003 031f 	and.w	r3, r3, #31
 800abfa:	fa22 f303 	lsr.w	r3, r2, r3
 800abfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x50>)
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	f003 030f 	and.w	r3, r3, #15
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac0a:	5cd3      	ldrb	r3, [r2, r3]
 800ac0c:	f003 031f 	and.w	r3, r3, #31
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	fa22 f303 	lsr.w	r3, r2, r3
 800ac16:	4a07      	ldr	r2, [pc, #28]	; (800ac34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac1a:	4a07      	ldr	r2, [pc, #28]	; (800ac38 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac20:	4b04      	ldr	r3, [pc, #16]	; (800ac34 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac22:	681b      	ldr	r3, [r3, #0]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	58024400 	.word	0x58024400
 800ac30:	08017610 	.word	0x08017610
 800ac34:	24000094 	.word	0x24000094
 800ac38:	24000090 	.word	0x24000090

0800ac3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac40:	f7ff ffcc 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800ac44:	4602      	mov	r2, r0
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	091b      	lsrs	r3, r3, #4
 800ac4c:	f003 0307 	and.w	r3, r3, #7
 800ac50:	4904      	ldr	r1, [pc, #16]	; (800ac64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac52:	5ccb      	ldrb	r3, [r1, r3]
 800ac54:	f003 031f 	and.w	r3, r3, #31
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	58024400 	.word	0x58024400
 800ac64:	08017610 	.word	0x08017610

0800ac68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac6c:	f7ff ffb6 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800ac70:	4602      	mov	r2, r0
 800ac72:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	4904      	ldr	r1, [pc, #16]	; (800ac90 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac7e:	5ccb      	ldrb	r3, [r1, r3]
 800ac80:	f003 031f 	and.w	r3, r3, #31
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	58024400 	.word	0x58024400
 800ac90:	08017610 	.word	0x08017610

0800ac94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	223f      	movs	r2, #63	; 0x3f
 800aca2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aca4:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f003 0207 	and.w	r2, r3, #7
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800acb0:	4b17      	ldr	r3, [pc, #92]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800acbc:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800acc8:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800acd4:	4b0e      	ldr	r3, [pc, #56]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800acec:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <HAL_RCC_GetClockConfig+0x7c>)
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800acf8:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <HAL_RCC_GetClockConfig+0x80>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 020f 	and.w	r2, r3, #15
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	58024400 	.word	0x58024400
 800ad14:	52002000 	.word	0x52002000

0800ad18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad1c:	b0ca      	sub	sp, #296	; 0x128
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad24:	2300      	movs	r3, #0
 800ad26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	ea54 0305 	orrs.w	r3, r4, r5
 800ad42:	d049      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad4e:	d02f      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ad50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad54:	d828      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad5a:	d01a      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad60:	d822      	bhi.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ad66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad6a:	d007      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad6c:	e01c      	b.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad6e:	4bb8      	ldr	r3, [pc, #736]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad72:	4ab7      	ldr	r2, [pc, #732]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad7a:	e01a      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad80:	3308      	adds	r3, #8
 800ad82:	2102      	movs	r1, #2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f002 fb61 	bl	800d44c <RCCEx_PLL2_Config>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad90:	e00f      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad96:	3328      	adds	r3, #40	; 0x28
 800ad98:	2102      	movs	r1, #2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f002 fc08 	bl	800d5b0 <RCCEx_PLL3_Config>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ada6:	e004      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adae:	e000      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800adb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d10a      	bne.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adba:	4ba5      	ldr	r3, [pc, #660]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adbe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800adc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adc8:	4aa1      	ldr	r2, [pc, #644]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adca:	430b      	orrs	r3, r1
 800adcc:	6513      	str	r3, [r2, #80]	; 0x50
 800adce:	e003      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800add4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800add8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ade4:	f04f 0900 	mov.w	r9, #0
 800ade8:	ea58 0309 	orrs.w	r3, r8, r9
 800adec:	d047      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800adee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d82a      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800adf8:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae15 	.word	0x0800ae15
 800ae04:	0800ae23 	.word	0x0800ae23
 800ae08:	0800ae39 	.word	0x0800ae39
 800ae0c:	0800ae57 	.word	0x0800ae57
 800ae10:	0800ae57 	.word	0x0800ae57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae14:	4b8e      	ldr	r3, [pc, #568]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	4a8d      	ldr	r2, [pc, #564]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae20:	e01a      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae26:	3308      	adds	r3, #8
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 fb0e 	bl	800d44c <RCCEx_PLL2_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae36:	e00f      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3c:	3328      	adds	r3, #40	; 0x28
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 fbb5 	bl	800d5b0 <RCCEx_PLL3_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae4c:	e004      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae54:	e000      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ae56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae60:	4b7b      	ldr	r3, [pc, #492]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae64:	f023 0107 	bic.w	r1, r3, #7
 800ae68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae6e:	4a78      	ldr	r2, [pc, #480]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae70:	430b      	orrs	r3, r1
 800ae72:	6513      	str	r3, [r2, #80]	; 0x50
 800ae74:	e003      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ae8a:	f04f 0b00 	mov.w	fp, #0
 800ae8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae92:	d04c      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ae94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae9e:	d030      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800aea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea4:	d829      	bhi.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aea6:	2bc0      	cmp	r3, #192	; 0xc0
 800aea8:	d02d      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aeaa:	2bc0      	cmp	r3, #192	; 0xc0
 800aeac:	d825      	bhi.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aeae:	2b80      	cmp	r3, #128	; 0x80
 800aeb0:	d018      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aeb2:	2b80      	cmp	r3, #128	; 0x80
 800aeb4:	d821      	bhi.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aeba:	2b40      	cmp	r3, #64	; 0x40
 800aebc:	d007      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800aebe:	e01c      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aec0:	4b63      	ldr	r3, [pc, #396]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	4a62      	ldr	r2, [pc, #392]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aecc:	e01c      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed2:	3308      	adds	r3, #8
 800aed4:	2100      	movs	r1, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f002 fab8 	bl	800d44c <RCCEx_PLL2_Config>
 800aedc:	4603      	mov	r3, r0
 800aede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aee2:	e011      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee8:	3328      	adds	r3, #40	; 0x28
 800aeea:	2100      	movs	r1, #0
 800aeec:	4618      	mov	r0, r3
 800aeee:	f002 fb5f 	bl	800d5b0 <RCCEx_PLL3_Config>
 800aef2:	4603      	mov	r3, r0
 800aef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aef8:	e006      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af00:	e002      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800af02:	bf00      	nop
 800af04:	e000      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800af06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800af10:	4b4f      	ldr	r3, [pc, #316]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af14:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800af18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1e:	4a4c      	ldr	r2, [pc, #304]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af20:	430b      	orrs	r3, r1
 800af22:	6513      	str	r3, [r2, #80]	; 0x50
 800af24:	e003      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800af3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800af3e:	2300      	movs	r3, #0
 800af40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800af44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800af48:	460b      	mov	r3, r1
 800af4a:	4313      	orrs	r3, r2
 800af4c:	d053      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800af4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af5a:	d035      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800af5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af60:	d82e      	bhi.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af66:	d031      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800af68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af6c:	d828      	bhi.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af72:	d01a      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800af74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af78:	d822      	bhi.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800af7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af82:	d007      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800af84:	e01c      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af86:	4b32      	ldr	r3, [pc, #200]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	4a31      	ldr	r2, [pc, #196]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af92:	e01c      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af98:	3308      	adds	r3, #8
 800af9a:	2100      	movs	r1, #0
 800af9c:	4618      	mov	r0, r3
 800af9e:	f002 fa55 	bl	800d44c <RCCEx_PLL2_Config>
 800afa2:	4603      	mov	r3, r0
 800afa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800afa8:	e011      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afae:	3328      	adds	r3, #40	; 0x28
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f002 fafc 	bl	800d5b0 <RCCEx_PLL3_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afbe:	e006      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afc6:	e002      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800afc8:	bf00      	nop
 800afca:	e000      	b.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800afcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10b      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800afd6:	4b1e      	ldr	r3, [pc, #120]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afda:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800afde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afe6:	4a1a      	ldr	r2, [pc, #104]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afe8:	430b      	orrs	r3, r1
 800afea:	6593      	str	r3, [r2, #88]	; 0x58
 800afec:	e003      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b006:	2300      	movs	r3, #0
 800b008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b00c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b010:	460b      	mov	r3, r1
 800b012:	4313      	orrs	r3, r2
 800b014:	d056      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b01e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b022:	d038      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b028:	d831      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b02a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b02e:	d034      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b030:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b034:	d82b      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b03a:	d01d      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b03c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b040:	d825      	bhi.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b04a:	d00a      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b04c:	e01f      	b.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b04e:	bf00      	nop
 800b050:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b054:	4ba2      	ldr	r3, [pc, #648]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	4aa1      	ldr	r2, [pc, #644]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b05e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b060:	e01c      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b066:	3308      	adds	r3, #8
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f002 f9ee 	bl	800d44c <RCCEx_PLL2_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b076:	e011      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07c:	3328      	adds	r3, #40	; 0x28
 800b07e:	2100      	movs	r1, #0
 800b080:	4618      	mov	r0, r3
 800b082:	f002 fa95 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b086:	4603      	mov	r3, r0
 800b088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b08c:	e006      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b094:	e002      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b096:	bf00      	nop
 800b098:	e000      	b.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b09a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b09c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10b      	bne.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b0a4:	4b8e      	ldr	r3, [pc, #568]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0b4:	4a8a      	ldr	r2, [pc, #552]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0b6:	430b      	orrs	r3, r1
 800b0b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ba:	e003      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b0d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	d03a      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ea:	2b30      	cmp	r3, #48	; 0x30
 800b0ec:	d01f      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b0ee:	2b30      	cmp	r3, #48	; 0x30
 800b0f0:	d819      	bhi.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	d00c      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b0f6:	2b20      	cmp	r3, #32
 800b0f8:	d815      	bhi.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d019      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b0fe:	2b10      	cmp	r3, #16
 800b100:	d111      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b102:	4b77      	ldr	r3, [pc, #476]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b106:	4a76      	ldr	r2, [pc, #472]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b10c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b10e:	e011      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b114:	3308      	adds	r3, #8
 800b116:	2102      	movs	r1, #2
 800b118:	4618      	mov	r0, r3
 800b11a:	f002 f997 	bl	800d44c <RCCEx_PLL2_Config>
 800b11e:	4603      	mov	r3, r0
 800b120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b124:	e006      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b12c:	e002      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b12e:	bf00      	nop
 800b130:	e000      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b132:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b13c:	4b68      	ldr	r3, [pc, #416]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b140:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14a:	4a65      	ldr	r2, [pc, #404]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b14c:	430b      	orrs	r3, r1
 800b14e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b150:	e003      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b16a:	2300      	movs	r3, #0
 800b16c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b170:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b174:	460b      	mov	r3, r1
 800b176:	4313      	orrs	r3, r2
 800b178:	d051      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b184:	d035      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b18a:	d82e      	bhi.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b18c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b190:	d031      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b196:	d828      	bhi.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b19c:	d01a      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1a2:	d822      	bhi.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ac:	d007      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b1ae:	e01c      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b0:	4b4b      	ldr	r3, [pc, #300]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	4a4a      	ldr	r2, [pc, #296]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1bc:	e01c      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f002 f940 	bl	800d44c <RCCEx_PLL2_Config>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1d2:	e011      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d8:	3328      	adds	r3, #40	; 0x28
 800b1da:	2100      	movs	r1, #0
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f002 f9e7 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1e8:	e006      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1f0:	e002      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1f2:	bf00      	nop
 800b1f4:	e000      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b200:	4b37      	ldr	r3, [pc, #220]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b204:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b20e:	4a34      	ldr	r2, [pc, #208]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b210:	430b      	orrs	r3, r1
 800b212:	6513      	str	r3, [r2, #80]	; 0x50
 800b214:	e003      	b.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b22a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b22e:	2300      	movs	r3, #0
 800b230:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b234:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b238:	460b      	mov	r3, r1
 800b23a:	4313      	orrs	r3, r2
 800b23c:	d056      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b248:	d033      	beq.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b24a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b24e:	d82c      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b254:	d02f      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b25a:	d826      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b25c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b260:	d02b      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b266:	d820      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b26c:	d012      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b26e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b272:	d81a      	bhi.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d022      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b27c:	d115      	bne.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b282:	3308      	adds	r3, #8
 800b284:	2101      	movs	r1, #1
 800b286:	4618      	mov	r0, r3
 800b288:	f002 f8e0 	bl	800d44c <RCCEx_PLL2_Config>
 800b28c:	4603      	mov	r3, r0
 800b28e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b292:	e015      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b298:	3328      	adds	r3, #40	; 0x28
 800b29a:	2101      	movs	r1, #1
 800b29c:	4618      	mov	r0, r3
 800b29e:	f002 f987 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b2a8:	e00a      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2b0:	e006      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2b2:	bf00      	nop
 800b2b4:	e004      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2b6:	bf00      	nop
 800b2b8:	e002      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2ba:	bf00      	nop
 800b2bc:	e000      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10d      	bne.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b2c8:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d6:	4a02      	ldr	r2, [pc, #8]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	6513      	str	r3, [r2, #80]	; 0x50
 800b2dc:	e006      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b2de:	bf00      	nop
 800b2e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b2f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b302:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b306:	460b      	mov	r3, r1
 800b308:	4313      	orrs	r3, r2
 800b30a:	d055      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b318:	d033      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b31a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b31e:	d82c      	bhi.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b324:	d02f      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b32a:	d826      	bhi.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b32c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b330:	d02b      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b336:	d820      	bhi.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b33c:	d012      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b342:	d81a      	bhi.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b344:	2b00      	cmp	r3, #0
 800b346:	d022      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b34c:	d115      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b352:	3308      	adds	r3, #8
 800b354:	2101      	movs	r1, #1
 800b356:	4618      	mov	r0, r3
 800b358:	f002 f878 	bl	800d44c <RCCEx_PLL2_Config>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b362:	e015      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b368:	3328      	adds	r3, #40	; 0x28
 800b36a:	2101      	movs	r1, #1
 800b36c:	4618      	mov	r0, r3
 800b36e:	f002 f91f 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b372:	4603      	mov	r3, r0
 800b374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b378:	e00a      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b380:	e006      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b382:	bf00      	nop
 800b384:	e004      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b386:	bf00      	nop
 800b388:	e002      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b38a:	bf00      	nop
 800b38c:	e000      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b38e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10b      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b398:	4ba3      	ldr	r3, [pc, #652]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3a8:	4a9f      	ldr	r2, [pc, #636]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3aa:	430b      	orrs	r3, r1
 800b3ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b3ae:	e003      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	d037      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e2:	d00e      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e8:	d816      	bhi.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d018      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b3ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3f2:	d111      	bne.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f4:	4b8c      	ldr	r3, [pc, #560]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a8b      	ldr	r2, [pc, #556]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b400:	e00f      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b406:	3308      	adds	r3, #8
 800b408:	2101      	movs	r1, #1
 800b40a:	4618      	mov	r0, r3
 800b40c:	f002 f81e 	bl	800d44c <RCCEx_PLL2_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b416:	e004      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b41e:	e000      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b420:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b42a:	4b7f      	ldr	r3, [pc, #508]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b438:	4a7b      	ldr	r2, [pc, #492]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b43a:	430b      	orrs	r3, r1
 800b43c:	6513      	str	r3, [r2, #80]	; 0x50
 800b43e:	e003      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b458:	2300      	movs	r3, #0
 800b45a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b45e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b462:	460b      	mov	r3, r1
 800b464:	4313      	orrs	r3, r2
 800b466:	d039      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d81c      	bhi.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b472:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b478:	0800b4b5 	.word	0x0800b4b5
 800b47c:	0800b489 	.word	0x0800b489
 800b480:	0800b497 	.word	0x0800b497
 800b484:	0800b4b5 	.word	0x0800b4b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b488:	4b67      	ldr	r3, [pc, #412]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	4a66      	ldr	r2, [pc, #408]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b48e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b492:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b494:	e00f      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49a:	3308      	adds	r3, #8
 800b49c:	2102      	movs	r1, #2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 ffd4 	bl	800d44c <RCCEx_PLL2_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b4aa:	e004      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4b2:	e000      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10a      	bne.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b4be:	4b5a      	ldr	r3, [pc, #360]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c2:	f023 0103 	bic.w	r1, r3, #3
 800b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4cc:	4a56      	ldr	r2, [pc, #344]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4d2:	e003      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b4e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	f000 809f 	beq.w	800b63c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4fe:	4b4b      	ldr	r3, [pc, #300]	; (800b62c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a4a      	ldr	r2, [pc, #296]	; (800b62c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b50a:	f7f8 fc09 	bl	8003d20 <HAL_GetTick>
 800b50e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b512:	e00b      	b.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b514:	f7f8 fc04 	bl	8003d20 <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2b64      	cmp	r3, #100	; 0x64
 800b522:	d903      	bls.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b52a:	e005      	b.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b52c:	4b3f      	ldr	r3, [pc, #252]	; (800b62c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0ed      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d179      	bne.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b540:	4b39      	ldr	r3, [pc, #228]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b54c:	4053      	eors	r3, r2
 800b54e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b552:	2b00      	cmp	r3, #0
 800b554:	d015      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b556:	4b34      	ldr	r3, [pc, #208]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b55e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b562:	4b31      	ldr	r3, [pc, #196]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b566:	4a30      	ldr	r2, [pc, #192]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b56c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b56e:	4b2e      	ldr	r3, [pc, #184]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b572:	4a2d      	ldr	r2, [pc, #180]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b578:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b57a:	4a2b      	ldr	r2, [pc, #172]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b57c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b580:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b58e:	d118      	bne.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b590:	f7f8 fbc6 	bl	8003d20 <HAL_GetTick>
 800b594:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b598:	e00d      	b.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b59a:	f7f8 fbc1 	bl	8003d20 <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b5a4:	1ad2      	subs	r2, r2, r3
 800b5a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d903      	bls.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b5b4:	e005      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b5b6:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0eb      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d129      	bne.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5da:	d10e      	bne.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b5dc:	4b12      	ldr	r3, [pc, #72]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5ec:	091a      	lsrs	r2, r3, #4
 800b5ee:	4b10      	ldr	r3, [pc, #64]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	4a0d      	ldr	r2, [pc, #52]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f4:	430b      	orrs	r3, r1
 800b5f6:	6113      	str	r3, [r2, #16]
 800b5f8:	e005      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	4a0a      	ldr	r2, [pc, #40]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b604:	6113      	str	r3, [r2, #16]
 800b606:	4b08      	ldr	r3, [pc, #32]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b608:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b616:	4a04      	ldr	r2, [pc, #16]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b618:	430b      	orrs	r3, r1
 800b61a:	6713      	str	r3, [r2, #112]	; 0x70
 800b61c:	e00e      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b61e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b622:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b626:	e009      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b628:	58024400 	.word	0x58024400
 800b62c:	58024800 	.word	0x58024800
 800b630:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b638:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f002 0301 	and.w	r3, r2, #1
 800b648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b64c:	2300      	movs	r3, #0
 800b64e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b652:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b656:	460b      	mov	r3, r1
 800b658:	4313      	orrs	r3, r2
 800b65a:	f000 8089 	beq.w	800b770 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b664:	2b28      	cmp	r3, #40	; 0x28
 800b666:	d86b      	bhi.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b668:	a201      	add	r2, pc, #4	; (adr r2, 800b670 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66e:	bf00      	nop
 800b670:	0800b749 	.word	0x0800b749
 800b674:	0800b741 	.word	0x0800b741
 800b678:	0800b741 	.word	0x0800b741
 800b67c:	0800b741 	.word	0x0800b741
 800b680:	0800b741 	.word	0x0800b741
 800b684:	0800b741 	.word	0x0800b741
 800b688:	0800b741 	.word	0x0800b741
 800b68c:	0800b741 	.word	0x0800b741
 800b690:	0800b715 	.word	0x0800b715
 800b694:	0800b741 	.word	0x0800b741
 800b698:	0800b741 	.word	0x0800b741
 800b69c:	0800b741 	.word	0x0800b741
 800b6a0:	0800b741 	.word	0x0800b741
 800b6a4:	0800b741 	.word	0x0800b741
 800b6a8:	0800b741 	.word	0x0800b741
 800b6ac:	0800b741 	.word	0x0800b741
 800b6b0:	0800b72b 	.word	0x0800b72b
 800b6b4:	0800b741 	.word	0x0800b741
 800b6b8:	0800b741 	.word	0x0800b741
 800b6bc:	0800b741 	.word	0x0800b741
 800b6c0:	0800b741 	.word	0x0800b741
 800b6c4:	0800b741 	.word	0x0800b741
 800b6c8:	0800b741 	.word	0x0800b741
 800b6cc:	0800b741 	.word	0x0800b741
 800b6d0:	0800b749 	.word	0x0800b749
 800b6d4:	0800b741 	.word	0x0800b741
 800b6d8:	0800b741 	.word	0x0800b741
 800b6dc:	0800b741 	.word	0x0800b741
 800b6e0:	0800b741 	.word	0x0800b741
 800b6e4:	0800b741 	.word	0x0800b741
 800b6e8:	0800b741 	.word	0x0800b741
 800b6ec:	0800b741 	.word	0x0800b741
 800b6f0:	0800b749 	.word	0x0800b749
 800b6f4:	0800b741 	.word	0x0800b741
 800b6f8:	0800b741 	.word	0x0800b741
 800b6fc:	0800b741 	.word	0x0800b741
 800b700:	0800b741 	.word	0x0800b741
 800b704:	0800b741 	.word	0x0800b741
 800b708:	0800b741 	.word	0x0800b741
 800b70c:	0800b741 	.word	0x0800b741
 800b710:	0800b749 	.word	0x0800b749
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b718:	3308      	adds	r3, #8
 800b71a:	2101      	movs	r1, #1
 800b71c:	4618      	mov	r0, r3
 800b71e:	f001 fe95 	bl	800d44c <RCCEx_PLL2_Config>
 800b722:	4603      	mov	r3, r0
 800b724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b728:	e00f      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b72e:	3328      	adds	r3, #40	; 0x28
 800b730:	2101      	movs	r1, #1
 800b732:	4618      	mov	r0, r3
 800b734:	f001 ff3c 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b738:	4603      	mov	r3, r0
 800b73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b73e:	e004      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b746:	e000      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b74a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b752:	4bbf      	ldr	r3, [pc, #764]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b756:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b760:	4abb      	ldr	r2, [pc, #748]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b762:	430b      	orrs	r3, r1
 800b764:	6553      	str	r3, [r2, #84]	; 0x54
 800b766:	e003      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b76c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f002 0302 	and.w	r3, r2, #2
 800b77c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b780:	2300      	movs	r3, #0
 800b782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b786:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b78a:	460b      	mov	r3, r1
 800b78c:	4313      	orrs	r3, r2
 800b78e:	d041      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b796:	2b05      	cmp	r3, #5
 800b798:	d824      	bhi.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b79a:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b7ed 	.word	0x0800b7ed
 800b7a4:	0800b7b9 	.word	0x0800b7b9
 800b7a8:	0800b7cf 	.word	0x0800b7cf
 800b7ac:	0800b7ed 	.word	0x0800b7ed
 800b7b0:	0800b7ed 	.word	0x0800b7ed
 800b7b4:	0800b7ed 	.word	0x0800b7ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7bc:	3308      	adds	r3, #8
 800b7be:	2101      	movs	r1, #1
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f001 fe43 	bl	800d44c <RCCEx_PLL2_Config>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7cc:	e00f      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d2:	3328      	adds	r3, #40	; 0x28
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 feea 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7e2:	e004      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7ea:	e000      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7f6:	4b96      	ldr	r3, [pc, #600]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fa:	f023 0107 	bic.w	r1, r3, #7
 800b7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b804:	4a92      	ldr	r2, [pc, #584]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b806:	430b      	orrs	r3, r1
 800b808:	6553      	str	r3, [r2, #84]	; 0x54
 800b80a:	e003      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b80c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f002 0304 	and.w	r3, r2, #4
 800b820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b824:	2300      	movs	r3, #0
 800b826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b82a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b82e:	460b      	mov	r3, r1
 800b830:	4313      	orrs	r3, r2
 800b832:	d044      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b83c:	2b05      	cmp	r3, #5
 800b83e:	d825      	bhi.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b840:	a201      	add	r2, pc, #4	; (adr r2, 800b848 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b846:	bf00      	nop
 800b848:	0800b895 	.word	0x0800b895
 800b84c:	0800b861 	.word	0x0800b861
 800b850:	0800b877 	.word	0x0800b877
 800b854:	0800b895 	.word	0x0800b895
 800b858:	0800b895 	.word	0x0800b895
 800b85c:	0800b895 	.word	0x0800b895
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b864:	3308      	adds	r3, #8
 800b866:	2101      	movs	r1, #1
 800b868:	4618      	mov	r0, r3
 800b86a:	f001 fdef 	bl	800d44c <RCCEx_PLL2_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b874:	e00f      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b87a:	3328      	adds	r3, #40	; 0x28
 800b87c:	2101      	movs	r1, #1
 800b87e:	4618      	mov	r0, r3
 800b880:	f001 fe96 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b88a:	e004      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b892:	e000      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b894:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10b      	bne.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b89e:	4b6c      	ldr	r3, [pc, #432]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a2:	f023 0107 	bic.w	r1, r3, #7
 800b8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8ae:	4a68      	ldr	r2, [pc, #416]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8b0:	430b      	orrs	r3, r1
 800b8b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8b4:	e003      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f002 0320 	and.w	r3, r2, #32
 800b8ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	d055      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8ea:	d033      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b8ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8f0:	d82c      	bhi.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d02f      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fc:	d826      	bhi.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b902:	d02b      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b904:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b908:	d820      	bhi.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b90a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90e:	d012      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b914:	d81a      	bhi.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b916:	2b00      	cmp	r3, #0
 800b918:	d022      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b91a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b91e:	d115      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b924:	3308      	adds	r3, #8
 800b926:	2100      	movs	r1, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 fd8f 	bl	800d44c <RCCEx_PLL2_Config>
 800b92e:	4603      	mov	r3, r0
 800b930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b934:	e015      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93a:	3328      	adds	r3, #40	; 0x28
 800b93c:	2102      	movs	r1, #2
 800b93e:	4618      	mov	r0, r3
 800b940:	f001 fe36 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b94a:	e00a      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b952:	e006      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b954:	bf00      	nop
 800b956:	e004      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b958:	bf00      	nop
 800b95a:	e002      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b95c:	bf00      	nop
 800b95e:	e000      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b960:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10b      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b96a:	4b39      	ldr	r3, [pc, #228]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b96e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b97a:	4a35      	ldr	r2, [pc, #212]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b97c:	430b      	orrs	r3, r1
 800b97e:	6553      	str	r3, [r2, #84]	; 0x54
 800b980:	e003      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b99a:	2300      	movs	r3, #0
 800b99c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b9a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d058      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b9b6:	d033      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b9b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b9bc:	d82c      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c2:	d02f      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c8:	d826      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9ce:	d02b      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b9d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9d4:	d820      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9da:	d012      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b9dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9e0:	d81a      	bhi.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d022      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b9e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ea:	d115      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f001 fd29 	bl	800d44c <RCCEx_PLL2_Config>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba00:	e015      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba06:	3328      	adds	r3, #40	; 0x28
 800ba08:	2102      	movs	r1, #2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 fdd0 	bl	800d5b0 <RCCEx_PLL3_Config>
 800ba10:	4603      	mov	r3, r0
 800ba12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba16:	e00a      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba1e:	e006      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba20:	bf00      	nop
 800ba22:	e004      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba24:	bf00      	nop
 800ba26:	e002      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba28:	bf00      	nop
 800ba2a:	e000      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10e      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ba3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba46:	4a02      	ldr	r2, [pc, #8]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6593      	str	r3, [r2, #88]	; 0x58
 800ba4c:	e006      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ba4e:	bf00      	nop
 800ba50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ba68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ba76:	460b      	mov	r3, r1
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	d055      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba88:	d033      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ba8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba8e:	d82c      	bhi.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba94:	d02f      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ba96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba9a:	d826      	bhi.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800baa0:	d02b      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800baa2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800baa6:	d820      	bhi.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800baa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baac:	d012      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800baae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bab2:	d81a      	bhi.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d022      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800babc:	d115      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800babe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac2:	3308      	adds	r3, #8
 800bac4:	2100      	movs	r1, #0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 fcc0 	bl	800d44c <RCCEx_PLL2_Config>
 800bacc:	4603      	mov	r3, r0
 800bace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bad2:	e015      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad8:	3328      	adds	r3, #40	; 0x28
 800bada:	2102      	movs	r1, #2
 800badc:	4618      	mov	r0, r3
 800bade:	f001 fd67 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bae8:	e00a      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baf0:	e006      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baf2:	bf00      	nop
 800baf4:	e004      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baf6:	bf00      	nop
 800baf8:	e002      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bafa:	bf00      	nop
 800bafc:	e000      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bafe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10b      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bb08:	4ba1      	ldr	r3, [pc, #644]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb18:	4a9d      	ldr	r2, [pc, #628]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	6593      	str	r3, [r2, #88]	; 0x58
 800bb1e:	e003      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	f002 0308 	and.w	r3, r2, #8
 800bb34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bb42:	460b      	mov	r3, r1
 800bb44:	4313      	orrs	r3, r2
 800bb46:	d01e      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb54:	d10c      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5a:	3328      	adds	r3, #40	; 0x28
 800bb5c:	2102      	movs	r1, #2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f001 fd26 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bb70:	4b87      	ldr	r3, [pc, #540]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb80:	4a83      	ldr	r2, [pc, #524]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb82:	430b      	orrs	r3, r1
 800bb84:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f002 0310 	and.w	r3, r2, #16
 800bb92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bba0:	460b      	mov	r3, r1
 800bba2:	4313      	orrs	r3, r2
 800bba4:	d01e      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb2:	d10c      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb8:	3328      	adds	r3, #40	; 0x28
 800bbba:	2102      	movs	r1, #2
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 fcf7 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bbce:	4b70      	ldr	r3, [pc, #448]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbde:	4a6c      	ldr	r2, [pc, #432]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bbf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbfa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4313      	orrs	r3, r2
 800bc02:	d03e      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc10:	d022      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bc12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc16:	d81b      	bhi.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc20:	d00b      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bc22:	e015      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc28:	3308      	adds	r3, #8
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f001 fc0d 	bl	800d44c <RCCEx_PLL2_Config>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc38:	e00f      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc3e:	3328      	adds	r3, #40	; 0x28
 800bc40:	2102      	movs	r1, #2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f001 fcb4 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc4e:	e004      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc56:	e000      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bc58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc62:	4b4b      	ldr	r3, [pc, #300]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc72:	4a47      	ldr	r2, [pc, #284]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6593      	str	r3, [r2, #88]	; 0x58
 800bc78:	e003      	b.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc90:	2300      	movs	r3, #0
 800bc92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	d03b      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bcaa:	d01f      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bcac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bcb0:	d818      	bhi.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bcb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb6:	d003      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bcb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcbc:	d007      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bcbe:	e011      	b.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcc0:	4b33      	ldr	r3, [pc, #204]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	4a32      	ldr	r2, [pc, #200]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bccc:	e00f      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	3328      	adds	r3, #40	; 0x28
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 fc6a 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bce2:	e004      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcea:	e000      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bcec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bcf6:	4b26      	ldr	r3, [pc, #152]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd06:	4a22      	ldr	r2, [pc, #136]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	6553      	str	r3, [r2, #84]	; 0x54
 800bd0c:	e003      	b.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bd22:	673b      	str	r3, [r7, #112]	; 0x70
 800bd24:	2300      	movs	r3, #0
 800bd26:	677b      	str	r3, [r7, #116]	; 0x74
 800bd28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	d034      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bd3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd40:	d007      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bd42:	e011      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd44:	4b12      	ldr	r3, [pc, #72]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	4a11      	ldr	r2, [pc, #68]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd50:	e00e      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd56:	3308      	adds	r3, #8
 800bd58:	2102      	movs	r1, #2
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 fb76 	bl	800d44c <RCCEx_PLL2_Config>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd66:	e003      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10d      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd78:	4b05      	ldr	r3, [pc, #20]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd86:	4a02      	ldr	r2, [pc, #8]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd8c:	e006      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bda8:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdaa:	2300      	movs	r3, #0
 800bdac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	d00c      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bdb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdbc:	3328      	adds	r3, #40	; 0x28
 800bdbe:	2102      	movs	r1, #2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f001 fbf5 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bdde:	663b      	str	r3, [r7, #96]	; 0x60
 800bde0:	2300      	movs	r3, #0
 800bde2:	667b      	str	r3, [r7, #100]	; 0x64
 800bde4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bde8:	460b      	mov	r3, r1
 800bdea:	4313      	orrs	r3, r2
 800bdec:	d038      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bdee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdfa:	d018      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bdfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be00:	d811      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800be02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be06:	d014      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800be08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be0c:	d80b      	bhi.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d011      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800be12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be16:	d106      	bne.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be18:	4bc3      	ldr	r3, [pc, #780]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	4ac2      	ldr	r2, [pc, #776]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800be24:	e008      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be2c:	e004      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800be36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10b      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be40:	4bb9      	ldr	r3, [pc, #740]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be50:	4ab5      	ldr	r2, [pc, #724]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be52:	430b      	orrs	r3, r1
 800be54:	6553      	str	r3, [r2, #84]	; 0x54
 800be56:	e003      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800be6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be6e:	2300      	movs	r3, #0
 800be70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800be76:	460b      	mov	r3, r1
 800be78:	4313      	orrs	r3, r2
 800be7a:	d009      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be7c:	4baa      	ldr	r3, [pc, #680]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8a:	4aa7      	ldr	r2, [pc, #668]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be8c:	430b      	orrs	r3, r1
 800be8e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800be90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800be9c:	653b      	str	r3, [r7, #80]	; 0x50
 800be9e:	2300      	movs	r3, #0
 800bea0:	657b      	str	r3, [r7, #84]	; 0x54
 800bea2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bea6:	460b      	mov	r3, r1
 800bea8:	4313      	orrs	r3, r2
 800beaa:	d00a      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800beac:	4b9e      	ldr	r3, [pc, #632]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800beb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bebc:	4a9a      	ldr	r2, [pc, #616]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bebe:	430b      	orrs	r3, r1
 800bec0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bece:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed0:	2300      	movs	r3, #0
 800bed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bed4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bed8:	460b      	mov	r3, r1
 800beda:	4313      	orrs	r3, r2
 800bedc:	d009      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bede:	4b92      	ldr	r3, [pc, #584]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beec:	4a8e      	ldr	r2, [pc, #568]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beee:	430b      	orrs	r3, r1
 800bef0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800befe:	643b      	str	r3, [r7, #64]	; 0x40
 800bf00:	2300      	movs	r3, #0
 800bf02:	647b      	str	r3, [r7, #68]	; 0x44
 800bf04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	d00e      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf0e:	4b86      	ldr	r3, [pc, #536]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	4a85      	ldr	r2, [pc, #532]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf18:	6113      	str	r3, [r2, #16]
 800bf1a:	4b83      	ldr	r3, [pc, #524]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf1c:	6919      	ldr	r1, [r3, #16]
 800bf1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bf26:	4a80      	ldr	r2, [pc, #512]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf28:	430b      	orrs	r3, r1
 800bf2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bf2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bf38:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bf42:	460b      	mov	r3, r1
 800bf44:	4313      	orrs	r3, r2
 800bf46:	d009      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bf48:	4b77      	ldr	r3, [pc, #476]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bf50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf56:	4a74      	ldr	r2, [pc, #464]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf58:	430b      	orrs	r3, r1
 800bf5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bf68:	633b      	str	r3, [r7, #48]	; 0x30
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bf72:	460b      	mov	r3, r1
 800bf74:	4313      	orrs	r3, r2
 800bf76:	d00a      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf78:	4b6b      	ldr	r3, [pc, #428]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf7c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bf80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf88:	4a67      	ldr	r2, [pc, #412]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf8a:	430b      	orrs	r3, r1
 800bf8c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	2100      	movs	r1, #0
 800bf98:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	d011      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfae:	3308      	adds	r3, #8
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f001 fa4a 	bl	800d44c <RCCEx_PLL2_Config>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d003      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	6239      	str	r1, [r7, #32]
 800bfda:	f003 0302 	and.w	r3, r3, #2
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	d011      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfee:	3308      	adds	r3, #8
 800bff0:	2101      	movs	r1, #1
 800bff2:	4618      	mov	r0, r3
 800bff4:	f001 fa2a 	bl	800d44c <RCCEx_PLL2_Config>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c00a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	2100      	movs	r1, #0
 800c018:	61b9      	str	r1, [r7, #24]
 800c01a:	f003 0304 	and.w	r3, r3, #4
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c024:	460b      	mov	r3, r1
 800c026:	4313      	orrs	r3, r2
 800c028:	d011      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	3308      	adds	r3, #8
 800c030:	2102      	movs	r1, #2
 800c032:	4618      	mov	r0, r3
 800c034:	f001 fa0a 	bl	800d44c <RCCEx_PLL2_Config>
 800c038:	4603      	mov	r3, r0
 800c03a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c03e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c042:	2b00      	cmp	r3, #0
 800c044:	d003      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c04a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	2100      	movs	r1, #0
 800c058:	6139      	str	r1, [r7, #16]
 800c05a:	f003 0308 	and.w	r3, r3, #8
 800c05e:	617b      	str	r3, [r7, #20]
 800c060:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c064:	460b      	mov	r3, r1
 800c066:	4313      	orrs	r3, r2
 800c068:	d011      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06e:	3328      	adds	r3, #40	; 0x28
 800c070:	2100      	movs	r1, #0
 800c072:	4618      	mov	r0, r3
 800c074:	f001 fa9c 	bl	800d5b0 <RCCEx_PLL3_Config>
 800c078:	4603      	mov	r3, r0
 800c07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c07e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c08a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	2100      	movs	r1, #0
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	f003 0310 	and.w	r3, r3, #16
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	d011      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ae:	3328      	adds	r3, #40	; 0x28
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 fa7c 	bl	800d5b0 <RCCEx_PLL3_Config>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d003      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	6039      	str	r1, [r7, #0]
 800c0da:	f003 0320 	and.w	r3, r3, #32
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	d011      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ee:	3328      	adds	r3, #40	; 0x28
 800c0f0:	2102      	movs	r1, #2
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f001 fa5c 	bl	800d5b0 <RCCEx_PLL3_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c10a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c10e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c112:	2b00      	cmp	r3, #0
 800c114:	d101      	bne.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	e000      	b.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c122:	46bd      	mov	sp, r7
 800c124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c128:	58024400 	.word	0x58024400

0800c12c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b090      	sub	sp, #64	; 0x40
 800c130:	af00      	add	r7, sp, #0
 800c132:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c13a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c13e:	430b      	orrs	r3, r1
 800c140:	f040 8094 	bne.w	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c144:	4b9e      	ldr	r3, [pc, #632]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	2b04      	cmp	r3, #4
 800c152:	f200 8087 	bhi.w	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c156:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15c:	0800c171 	.word	0x0800c171
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c1c1 	.word	0x0800c1c1
 800c168:	0800c25d 	.word	0x0800c25d
 800c16c:	0800c1e9 	.word	0x0800c1e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c170:	4b93      	ldr	r3, [pc, #588]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c17c:	d108      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c17e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c182:	4618      	mov	r0, r3
 800c184:	f001 f810 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c18c:	f000 bd45 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c194:	f000 bd41 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c198:	4b89      	ldr	r3, [pc, #548]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1a4:	d108      	bne.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1a6:	f107 0318 	add.w	r3, r7, #24
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fd54 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b4:	f000 bd31 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1bc:	f000 bd2d 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c0:	4b7f      	ldr	r3, [pc, #508]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1cc:	d108      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ce:	f107 030c 	add.w	r3, r7, #12
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 fe94 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1dc:	f000 bd1d 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e4:	f000 bd19 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1e8:	4b75      	ldr	r3, [pc, #468]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1f2:	4b73      	ldr	r3, [pc, #460]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 0304 	and.w	r3, r3, #4
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d10c      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c200:	2b00      	cmp	r3, #0
 800c202:	d109      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c204:	4b6e      	ldr	r3, [pc, #440]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	08db      	lsrs	r3, r3, #3
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	4a6d      	ldr	r2, [pc, #436]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c210:	fa22 f303 	lsr.w	r3, r2, r3
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c216:	e01f      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c218:	4b69      	ldr	r3, [pc, #420]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c224:	d106      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c22c:	d102      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c22e:	4b66      	ldr	r3, [pc, #408]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c230:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c232:	e011      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c234:	4b62      	ldr	r3, [pc, #392]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c23c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c240:	d106      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c248:	d102      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c24a:	4b60      	ldr	r3, [pc, #384]	; (800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c24e:	e003      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c254:	f000 bce1 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c258:	f000 bcdf 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c25c:	4b5c      	ldr	r3, [pc, #368]	; (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c260:	f000 bcdb 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c268:	f000 bcd7 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c26c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c270:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c274:	430b      	orrs	r3, r1
 800c276:	f040 80ad 	bne.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c27a:	4b51      	ldr	r3, [pc, #324]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c282:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c28a:	d056      	beq.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c292:	f200 8090 	bhi.w	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	2bc0      	cmp	r3, #192	; 0xc0
 800c29a:	f000 8088 	beq.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	2bc0      	cmp	r3, #192	; 0xc0
 800c2a2:	f200 8088 	bhi.w	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d032      	beq.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ae:	2b80      	cmp	r3, #128	; 0x80
 800c2b0:	f200 8081 	bhi.w	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	2b40      	cmp	r3, #64	; 0x40
 800c2be:	d014      	beq.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c2c0:	e079      	b.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2c2:	4b3f      	ldr	r3, [pc, #252]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2ce:	d108      	bne.n	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 ff67 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2de:	f000 bc9c 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e6:	f000 bc98 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ea:	4b35      	ldr	r3, [pc, #212]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2f6:	d108      	bne.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f8:	f107 0318 	add.w	r3, r7, #24
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fcab 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c306:	f000 bc88 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30e:	f000 bc84 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c312:	4b2b      	ldr	r3, [pc, #172]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c31a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31e:	d108      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	4618      	mov	r0, r3
 800c326:	f000 fdeb 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32e:	f000 bc74 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c336:	f000 bc70 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c33a:	4b21      	ldr	r3, [pc, #132]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c342:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c344:	4b1e      	ldr	r3, [pc, #120]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 0304 	and.w	r3, r3, #4
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	d10c      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c356:	4b1a      	ldr	r3, [pc, #104]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	08db      	lsrs	r3, r3, #3
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	4a18      	ldr	r2, [pc, #96]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c362:	fa22 f303 	lsr.w	r3, r2, r3
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c368:	e01f      	b.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c36a:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c376:	d106      	bne.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c37e:	d102      	bne.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c380:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c384:	e011      	b.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c386:	4b0e      	ldr	r3, [pc, #56]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c392:	d106      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c39a:	d102      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c39c:	4b0b      	ldr	r3, [pc, #44]	; (800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a0:	e003      	b.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3a6:	f000 bc38 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3aa:	f000 bc36 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3ae:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b2:	f000 bc32 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ba:	f000 bc2e 	b.w	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3be:	bf00      	nop
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	03d09000 	.word	0x03d09000
 800c3c8:	003d0900 	.word	0x003d0900
 800c3cc:	017d7840 	.word	0x017d7840
 800c3d0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c3d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3d8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c3dc:	430b      	orrs	r3, r1
 800c3de:	f040 809c 	bne.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c3e2:	4b9e      	ldr	r3, [pc, #632]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c3ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3f2:	d054      	beq.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3fa:	f200 808b 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c404:	f000 8083 	beq.w	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c40e:	f200 8081 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c418:	d02f      	beq.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c420:	d878      	bhi.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	2b00      	cmp	r3, #0
 800c426:	d004      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c42e:	d012      	beq.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c430:	e070      	b.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c432:	4b8a      	ldr	r3, [pc, #552]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43e:	d107      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c444:	4618      	mov	r0, r3
 800c446:	f000 feaf 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c44e:	e3e4      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c454:	e3e1      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c456:	4b81      	ldr	r3, [pc, #516]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c45e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c462:	d107      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c464:	f107 0318 	add.w	r3, r7, #24
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fbf5 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c472:	e3d2      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c478:	e3cf      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c47a:	4b78      	ldr	r3, [pc, #480]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c486:	d107      	bne.n	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c488:	f107 030c 	add.w	r3, r7, #12
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 fd37 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c496:	e3c0      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c498:	2300      	movs	r3, #0
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c49c:	e3bd      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c49e:	4b6f      	ldr	r3, [pc, #444]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4a8:	4b6c      	ldr	r3, [pc, #432]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b04      	cmp	r3, #4
 800c4b2:	d10c      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d109      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4ba:	4b68      	ldr	r3, [pc, #416]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	08db      	lsrs	r3, r3, #3
 800c4c0:	f003 0303 	and.w	r3, r3, #3
 800c4c4:	4a66      	ldr	r2, [pc, #408]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4cc:	e01e      	b.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ce:	4b63      	ldr	r3, [pc, #396]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4da:	d106      	bne.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4e2:	d102      	bne.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4e4:	4b5f      	ldr	r3, [pc, #380]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e8:	e010      	b.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4ea:	4b5c      	ldr	r3, [pc, #368]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4f6:	d106      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4fe:	d102      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c500:	4b59      	ldr	r3, [pc, #356]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c504:	e002      	b.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c50a:	e386      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c50c:	e385      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c50e:	4b57      	ldr	r3, [pc, #348]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c512:	e382      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c518:	e37f      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c51e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c522:	430b      	orrs	r3, r1
 800c524:	f040 80a7 	bne.w	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c528:	4b4c      	ldr	r3, [pc, #304]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c52c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c530:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c538:	d055      	beq.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c540:	f200 8096 	bhi.w	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c546:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c54a:	f000 8084 	beq.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c554:	f200 808c 	bhi.w	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c55e:	d030      	beq.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c566:	f200 8083 	bhi.w	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d004      	beq.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c576:	d012      	beq.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c578:	e07a      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c57a:	4b38      	ldr	r3, [pc, #224]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c586:	d107      	bne.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fe0b 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c596:	e340      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e33d      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c59e:	4b2f      	ldr	r3, [pc, #188]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5aa:	d107      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ac:	f107 0318 	add.w	r3, r7, #24
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fb51 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ba:	e32e      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c0:	e32b      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5c2:	4b26      	ldr	r3, [pc, #152]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5ce:	d107      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5d0:	f107 030c 	add.w	r3, r7, #12
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 fc93 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5de:	e31c      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e4:	e319      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5e6:	4b1d      	ldr	r3, [pc, #116]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5f0:	4b1a      	ldr	r3, [pc, #104]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d10c      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d109      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c602:	4b16      	ldr	r3, [pc, #88]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	08db      	lsrs	r3, r3, #3
 800c608:	f003 0303 	and.w	r3, r3, #3
 800c60c:	4a14      	ldr	r2, [pc, #80]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c60e:	fa22 f303 	lsr.w	r3, r2, r3
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c614:	e01e      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c616:	4b11      	ldr	r3, [pc, #68]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c622:	d106      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c62a:	d102      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c62c:	4b0d      	ldr	r3, [pc, #52]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c630:	e010      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c632:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c63a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c63e:	d106      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c646:	d102      	bne.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c648:	4b07      	ldr	r3, [pc, #28]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c64c:	e002      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c652:	e2e2      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c654:	e2e1      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c656:	4b05      	ldr	r3, [pc, #20]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c65a:	e2de      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c65c:	58024400 	.word	0x58024400
 800c660:	03d09000 	.word	0x03d09000
 800c664:	003d0900 	.word	0x003d0900
 800c668:	017d7840 	.word	0x017d7840
 800c66c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c674:	e2d1      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c67e:	430b      	orrs	r3, r1
 800c680:	f040 809c 	bne.w	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c684:	4b93      	ldr	r3, [pc, #588]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c688:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c68c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c694:	d054      	beq.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c69c:	f200 808b 	bhi.w	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6a6:	f000 8083 	beq.w	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6b0:	f200 8081 	bhi.w	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6ba:	d02f      	beq.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6c2:	d878      	bhi.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d0:	d012      	beq.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c6d2:	e070      	b.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6d4:	4b7f      	ldr	r3, [pc, #508]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6e0:	d107      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 fd5e 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f0:	e293      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f6:	e290      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6f8:	4b76      	ldr	r3, [pc, #472]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c704:	d107      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c706:	f107 0318 	add.w	r3, r7, #24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 faa4 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c714:	e281      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71a:	e27e      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c71c:	4b6d      	ldr	r3, [pc, #436]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c728:	d107      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c72a:	f107 030c 	add.w	r3, r7, #12
 800c72e:	4618      	mov	r0, r3
 800c730:	f000 fbe6 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c738:	e26f      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73e:	e26c      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c740:	4b64      	ldr	r3, [pc, #400]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c748:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c74a:	4b62      	ldr	r3, [pc, #392]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0304 	and.w	r3, r3, #4
 800c752:	2b04      	cmp	r3, #4
 800c754:	d10c      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d109      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c75c:	4b5d      	ldr	r3, [pc, #372]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	08db      	lsrs	r3, r3, #3
 800c762:	f003 0303 	and.w	r3, r3, #3
 800c766:	4a5c      	ldr	r2, [pc, #368]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c768:	fa22 f303 	lsr.w	r3, r2, r3
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c76e:	e01e      	b.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c770:	4b58      	ldr	r3, [pc, #352]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c77c:	d106      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c784:	d102      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c786:	4b55      	ldr	r3, [pc, #340]	; (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c78a:	e010      	b.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c78c:	4b51      	ldr	r3, [pc, #324]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c798:	d106      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7a0:	d102      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7a2:	4b4f      	ldr	r3, [pc, #316]	; (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a6:	e002      	b.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7ac:	e235      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7ae:	e234      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7b0:	4b4c      	ldr	r3, [pc, #304]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b4:	e231      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ba:	e22e      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	f040 808f 	bne.w	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c7ca:	4b42      	ldr	r3, [pc, #264]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c7d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7da:	d06b      	beq.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7e2:	d874      	bhi.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7ea:	d056      	beq.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7f2:	d86c      	bhi.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7fa:	d03b      	beq.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c802:	d864      	bhi.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c80a:	d021      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c812:	d85c      	bhi.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c820:	d004      	beq.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c822:	e054      	b.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c824:	f7fe fa0a 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 800c828:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c82a:	e1f6      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c82c:	4b29      	ldr	r3, [pc, #164]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c838:	d107      	bne.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c83a:	f107 0318 	add.w	r3, r7, #24
 800c83e:	4618      	mov	r0, r3
 800c840:	f000 fa0a 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c848:	e1e7      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84e:	e1e4      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c850:	4b20      	ldr	r3, [pc, #128]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c85c:	d107      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85e:	f107 030c 	add.w	r3, r7, #12
 800c862:	4618      	mov	r0, r3
 800c864:	f000 fb4c 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86c:	e1d5      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c872:	e1d2      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c874:	4b17      	ldr	r3, [pc, #92]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b04      	cmp	r3, #4
 800c87e:	d109      	bne.n	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c880:	4b14      	ldr	r3, [pc, #80]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	08db      	lsrs	r3, r3, #3
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	4a13      	ldr	r2, [pc, #76]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c88c:	fa22 f303 	lsr.w	r3, r2, r3
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c892:	e1c2      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c898:	e1bf      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c89a:	4b0e      	ldr	r3, [pc, #56]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8a6:	d102      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c8a8:	4b0c      	ldr	r3, [pc, #48]	; (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ac:	e1b5      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b2:	e1b2      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8b4:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8c0:	d102      	bne.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c8c2:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c6:	e1a8      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8cc:	e1a5      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d2:	e1a2      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8d4:	58024400 	.word	0x58024400
 800c8d8:	03d09000 	.word	0x03d09000
 800c8dc:	003d0900 	.word	0x003d0900
 800c8e0:	017d7840 	.word	0x017d7840
 800c8e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8ec:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c8f0:	430b      	orrs	r3, r1
 800c8f2:	d173      	bne.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c8f4:	4b9c      	ldr	r3, [pc, #624]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c904:	d02f      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c90c:	d863      	bhi.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	2b00      	cmp	r3, #0
 800c912:	d004      	beq.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c91a:	d012      	beq.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c91c:	e05b      	b.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c91e:	4b92      	ldr	r3, [pc, #584]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c92a:	d107      	bne.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c92c:	f107 0318 	add.w	r3, r7, #24
 800c930:	4618      	mov	r0, r3
 800c932:	f000 f991 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c93a:	e16e      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e16b      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c942:	4b89      	ldr	r3, [pc, #548]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c94a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c94e:	d107      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c950:	f107 030c 	add.w	r3, r7, #12
 800c954:	4618      	mov	r0, r3
 800c956:	f000 fad3 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c95e:	e15c      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c964:	e159      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c966:	4b80      	ldr	r3, [pc, #512]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c96a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c96e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c970:	4b7d      	ldr	r3, [pc, #500]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b04      	cmp	r3, #4
 800c97a:	d10c      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c982:	4b79      	ldr	r3, [pc, #484]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	08db      	lsrs	r3, r3, #3
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	4a77      	ldr	r2, [pc, #476]	; (800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c98e:	fa22 f303 	lsr.w	r3, r2, r3
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c994:	e01e      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c996:	4b74      	ldr	r3, [pc, #464]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a2:	d106      	bne.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9aa:	d102      	bne.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9ac:	4b70      	ldr	r3, [pc, #448]	; (800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b0:	e010      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9b2:	4b6d      	ldr	r3, [pc, #436]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9be:	d106      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9c6:	d102      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9c8:	4b6a      	ldr	r3, [pc, #424]	; (800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9cc:	e002      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9d2:	e122      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9d4:	e121      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9da:	e11e      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	d133      	bne.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c9e8:	4b5f      	ldr	r3, [pc, #380]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d004      	beq.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9fe:	d012      	beq.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ca00:	e023      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca02:	4b59      	ldr	r3, [pc, #356]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca0e:	d107      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fbc7 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca1e:	e0fc      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca24:	e0f9      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca26:	4b50      	ldr	r3, [pc, #320]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca32:	d107      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca34:	f107 0318 	add.w	r3, r7, #24
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 f90d 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca42:	e0ea      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca48:	e0e7      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca4e:	e0e4      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ca50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca54:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	f040 808d 	bne.w	800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ca5e:	4b42      	ldr	r3, [pc, #264]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca62:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ca66:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca6e:	d06b      	beq.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca76:	d874      	bhi.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca7e:	d056      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca86:	d86c      	bhi.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca8e:	d03b      	beq.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca96:	d864      	bhi.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca9e:	d021      	beq.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caa6:	d85c      	bhi.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800caa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d004      	beq.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cab4:	d004      	beq.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cab6:	e054      	b.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cab8:	f000 f8b8 	bl	800cc2c <HAL_RCCEx_GetD3PCLK1Freq>
 800cabc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cabe:	e0ac      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cac0:	4b29      	ldr	r3, [pc, #164]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cacc:	d107      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cace:	f107 0318 	add.w	r3, r7, #24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f8c0 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cadc:	e09d      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cae2:	e09a      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cae4:	4b20      	ldr	r3, [pc, #128]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800caec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caf0:	d107      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caf2:	f107 030c 	add.w	r3, r7, #12
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fa02 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb00:	e08b      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb06:	e088      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb08:	4b17      	ldr	r3, [pc, #92]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b04      	cmp	r3, #4
 800cb12:	d109      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb14:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	08db      	lsrs	r3, r3, #3
 800cb1a:	f003 0303 	and.w	r3, r3, #3
 800cb1e:	4a13      	ldr	r2, [pc, #76]	; (800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cb20:	fa22 f303 	lsr.w	r3, r2, r3
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e078      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2c:	e075      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb3a:	d102      	bne.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cb3c:	4b0c      	ldr	r3, [pc, #48]	; (800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb40:	e06b      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb46:	e068      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb48:	4b07      	ldr	r3, [pc, #28]	; (800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb54:	d102      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cb56:	4b07      	ldr	r3, [pc, #28]	; (800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb5a:	e05e      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb60:	e05b      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb66:	e058      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb68:	58024400 	.word	0x58024400
 800cb6c:	03d09000 	.word	0x03d09000
 800cb70:	003d0900 	.word	0x003d0900
 800cb74:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb7c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cb80:	430b      	orrs	r3, r1
 800cb82:	d148      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb84:	4b27      	ldr	r3, [pc, #156]	; (800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb8c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb94:	d02a      	beq.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb9c:	d838      	bhi.n	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d004      	beq.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbaa:	d00d      	beq.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cbac:	e030      	b.n	800cc10 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cbae:	4b1d      	ldr	r3, [pc, #116]	; (800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbba:	d102      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cbbc:	4b1a      	ldr	r3, [pc, #104]	; (800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc0:	e02b      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc6:	e028      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbc8:	4b16      	ldr	r3, [pc, #88]	; (800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbd4:	d107      	bne.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 fae4 	bl	800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbe4:	e019      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbea:	e016      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbf8:	d107      	bne.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbfa:	f107 0318 	add.w	r3, r7, #24
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f82a 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc08:	e007      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc0e:	e004      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc14:	e001      	b.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3740      	adds	r7, #64	; 0x40
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	58024400 	.word	0x58024400
 800cc28:	017d7840 	.word	0x017d7840

0800cc2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cc30:	f7fd ffd4 	bl	800abdc <HAL_RCC_GetHCLKFreq>
 800cc34:	4602      	mov	r2, r0
 800cc36:	4b06      	ldr	r3, [pc, #24]	; (800cc50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	091b      	lsrs	r3, r3, #4
 800cc3c:	f003 0307 	and.w	r3, r3, #7
 800cc40:	4904      	ldr	r1, [pc, #16]	; (800cc54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cc42:	5ccb      	ldrb	r3, [r1, r3]
 800cc44:	f003 031f 	and.w	r3, r3, #31
 800cc48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	58024400 	.word	0x58024400
 800cc54:	08017610 	.word	0x08017610

0800cc58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b089      	sub	sp, #36	; 0x24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc60:	4ba1      	ldr	r3, [pc, #644]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc64:	f003 0303 	and.w	r3, r3, #3
 800cc68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cc6a:	4b9f      	ldr	r3, [pc, #636]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	0b1b      	lsrs	r3, r3, #12
 800cc70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cc76:	4b9c      	ldr	r3, [pc, #624]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	091b      	lsrs	r3, r3, #4
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cc82:	4b99      	ldr	r3, [pc, #612]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc86:	08db      	lsrs	r3, r3, #3
 800cc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
 800cc92:	ee07 3a90 	vmov	s15, r3
 800cc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 8111 	beq.w	800cec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	f000 8083 	beq.w	800cdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	f200 80a1 	bhi.w	800cdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d056      	beq.n	800cd70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ccc2:	e099      	b.n	800cdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc4:	4b88      	ldr	r3, [pc, #544]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0320 	and.w	r3, r3, #32
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d02d      	beq.n	800cd2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccd0:	4b85      	ldr	r3, [pc, #532]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	08db      	lsrs	r3, r3, #3
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	4a84      	ldr	r2, [pc, #528]	; (800ceec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	ee07 3a90 	vmov	s15, r3
 800cce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfa:	4b7b      	ldr	r3, [pc, #492]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd2a:	e087      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3e:	4b6a      	ldr	r3, [pc, #424]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd46:	ee07 3a90 	vmov	s15, r3
 800cd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6e:	e065      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd82:	4b59      	ldr	r3, [pc, #356]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdb2:	e043      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	ee07 3a90 	vmov	s15, r3
 800cdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cdc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc6:	4b48      	ldr	r3, [pc, #288]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdce:	ee07 3a90 	vmov	s15, r3
 800cdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf6:	e021      	b.n	800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce0a:	4b37      	ldr	r3, [pc, #220]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ce3c:	4b2a      	ldr	r3, [pc, #168]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce40:	0a5b      	lsrs	r3, r3, #9
 800ce42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce62:	ee17 2a90 	vmov	r2, s15
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ce6a:	4b1f      	ldr	r3, [pc, #124]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6e:	0c1b      	lsrs	r3, r3, #16
 800ce70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce74:	ee07 3a90 	vmov	s15, r3
 800ce78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce90:	ee17 2a90 	vmov	r2, s15
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ce98:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9c:	0e1b      	lsrs	r3, r3, #24
 800ce9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cebe:	ee17 2a90 	vmov	r2, s15
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cec6:	e008      	b.n	800ceda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	609a      	str	r2, [r3, #8]
}
 800ceda:	bf00      	nop
 800cedc:	3724      	adds	r7, #36	; 0x24
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	58024400 	.word	0x58024400
 800ceec:	03d09000 	.word	0x03d09000
 800cef0:	46000000 	.word	0x46000000
 800cef4:	4c742400 	.word	0x4c742400
 800cef8:	4a742400 	.word	0x4a742400
 800cefc:	4bbebc20 	.word	0x4bbebc20

0800cf00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b089      	sub	sp, #36	; 0x24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf08:	4ba1      	ldr	r3, [pc, #644]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0c:	f003 0303 	and.w	r3, r3, #3
 800cf10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cf12:	4b9f      	ldr	r3, [pc, #636]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf16:	0d1b      	lsrs	r3, r3, #20
 800cf18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf1e:	4b9c      	ldr	r3, [pc, #624]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf22:	0a1b      	lsrs	r3, r3, #8
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cf2a:	4b99      	ldr	r3, [pc, #612]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf2e:	08db      	lsrs	r3, r3, #3
 800cf30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	fb02 f303 	mul.w	r3, r2, r3
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8111 	beq.w	800d170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	f000 8083 	beq.w	800d05c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	f200 80a1 	bhi.w	800d0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d003      	beq.n	800cf6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d056      	beq.n	800d018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cf6a:	e099      	b.n	800d0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf6c:	4b88      	ldr	r3, [pc, #544]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0320 	and.w	r3, r3, #32
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d02d      	beq.n	800cfd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf78:	4b85      	ldr	r3, [pc, #532]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	08db      	lsrs	r3, r3, #3
 800cf7e:	f003 0303 	and.w	r3, r3, #3
 800cf82:	4a84      	ldr	r2, [pc, #528]	; (800d194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cf84:	fa22 f303 	lsr.w	r3, r2, r3
 800cf88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	ee07 3a90 	vmov	s15, r3
 800cf90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa2:	4b7b      	ldr	r3, [pc, #492]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfaa:	ee07 3a90 	vmov	s15, r3
 800cfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfd2:	e087      	b.n	800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	ee07 3a90 	vmov	s15, r3
 800cfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d19c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe6:	4b6a      	ldr	r3, [pc, #424]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfee:	ee07 3a90 	vmov	s15, r3
 800cff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d016:	e065      	b.n	800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	ee07 3a90 	vmov	s15, r3
 800d01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d02a:	4b59      	ldr	r3, [pc, #356]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d032:	ee07 3a90 	vmov	s15, r3
 800d036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d03e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d05a:	e043      	b.n	800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	ee07 3a90 	vmov	s15, r3
 800d062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d06e:	4b48      	ldr	r3, [pc, #288]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d076:	ee07 3a90 	vmov	s15, r3
 800d07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d082:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d09e:	e021      	b.n	800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0b2:	4b37      	ldr	r3, [pc, #220]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d0e4:	4b2a      	ldr	r3, [pc, #168]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e8:	0a5b      	lsrs	r3, r3, #9
 800d0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d10a:	ee17 2a90 	vmov	r2, s15
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d112:	4b1f      	ldr	r3, [pc, #124]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	0c1b      	lsrs	r3, r3, #16
 800d118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d12c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d138:	ee17 2a90 	vmov	r2, s15
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d140:	4b13      	ldr	r3, [pc, #76]	; (800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d144:	0e1b      	lsrs	r3, r3, #24
 800d146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d15a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d15e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d166:	ee17 2a90 	vmov	r2, s15
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d16e:	e008      	b.n	800d182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	609a      	str	r2, [r3, #8]
}
 800d182:	bf00      	nop
 800d184:	3724      	adds	r7, #36	; 0x24
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	58024400 	.word	0x58024400
 800d194:	03d09000 	.word	0x03d09000
 800d198:	46000000 	.word	0x46000000
 800d19c:	4c742400 	.word	0x4c742400
 800d1a0:	4a742400 	.word	0x4a742400
 800d1a4:	4bbebc20 	.word	0x4bbebc20

0800d1a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b089      	sub	sp, #36	; 0x24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1b0:	4ba0      	ldr	r3, [pc, #640]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b4:	f003 0303 	and.w	r3, r3, #3
 800d1b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d1ba:	4b9e      	ldr	r3, [pc, #632]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1be:	091b      	lsrs	r3, r3, #4
 800d1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d1c6:	4b9b      	ldr	r3, [pc, #620]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ca:	f003 0301 	and.w	r3, r3, #1
 800d1ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d1d0:	4b98      	ldr	r3, [pc, #608]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d4:	08db      	lsrs	r3, r3, #3
 800d1d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	fb02 f303 	mul.w	r3, r2, r3
 800d1e0:	ee07 3a90 	vmov	s15, r3
 800d1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f000 8111 	beq.w	800d416 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	f000 8083 	beq.w	800d302 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	f200 80a1 	bhi.w	800d346 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d056      	beq.n	800d2be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d210:	e099      	b.n	800d346 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d212:	4b88      	ldr	r3, [pc, #544]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0320 	and.w	r3, r3, #32
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d02d      	beq.n	800d27a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d21e:	4b85      	ldr	r3, [pc, #532]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	08db      	lsrs	r3, r3, #3
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	4a83      	ldr	r2, [pc, #524]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d22a:	fa22 f303 	lsr.w	r3, r2, r3
 800d22e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	ee07 3a90 	vmov	s15, r3
 800d236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	ee07 3a90 	vmov	s15, r3
 800d240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d248:	4b7a      	ldr	r3, [pc, #488]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d250:	ee07 3a90 	vmov	s15, r3
 800d254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d258:	ed97 6a03 	vldr	s12, [r7, #12]
 800d25c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d26c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d270:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d274:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d278:	e087      	b.n	800d38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	ee07 3a90 	vmov	s15, r3
 800d280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d284:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d28c:	4b69      	ldr	r3, [pc, #420]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d294:	ee07 3a90 	vmov	s15, r3
 800d298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2bc:	e065      	b.n	800d38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	ee07 3a90 	vmov	s15, r3
 800d2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d444 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d2cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2d0:	4b58      	ldr	r3, [pc, #352]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d8:	ee07 3a90 	vmov	s15, r3
 800d2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d300:	e043      	b.n	800d38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	ee07 3a90 	vmov	s15, r3
 800d308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d448 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d314:	4b47      	ldr	r3, [pc, #284]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31c:	ee07 3a90 	vmov	s15, r3
 800d320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d324:	ed97 6a03 	vldr	s12, [r7, #12]
 800d328:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d32c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d340:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d344:	e021      	b.n	800d38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	ee07 3a90 	vmov	s15, r3
 800d34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d350:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d358:	4b36      	ldr	r3, [pc, #216]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d360:	ee07 3a90 	vmov	s15, r3
 800d364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d368:	ed97 6a03 	vldr	s12, [r7, #12]
 800d36c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d37c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d384:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d388:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d38a:	4b2a      	ldr	r3, [pc, #168]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d38e:	0a5b      	lsrs	r3, r3, #9
 800d390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d394:	ee07 3a90 	vmov	s15, r3
 800d398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3b0:	ee17 2a90 	vmov	r2, s15
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d3b8:	4b1e      	ldr	r3, [pc, #120]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3bc:	0c1b      	lsrs	r3, r3, #16
 800d3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c2:	ee07 3a90 	vmov	s15, r3
 800d3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3de:	ee17 2a90 	vmov	r2, s15
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d3e6:	4b13      	ldr	r3, [pc, #76]	; (800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ea:	0e1b      	lsrs	r3, r3, #24
 800d3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f0:	ee07 3a90 	vmov	s15, r3
 800d3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d400:	edd7 6a07 	vldr	s13, [r7, #28]
 800d404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d40c:	ee17 2a90 	vmov	r2, s15
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d414:	e008      	b.n	800d428 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	609a      	str	r2, [r3, #8]
}
 800d428:	bf00      	nop
 800d42a:	3724      	adds	r7, #36	; 0x24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	58024400 	.word	0x58024400
 800d438:	03d09000 	.word	0x03d09000
 800d43c:	46000000 	.word	0x46000000
 800d440:	4c742400 	.word	0x4c742400
 800d444:	4a742400 	.word	0x4a742400
 800d448:	4bbebc20 	.word	0x4bbebc20

0800d44c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d45a:	4b53      	ldr	r3, [pc, #332]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45e:	f003 0303 	and.w	r3, r3, #3
 800d462:	2b03      	cmp	r3, #3
 800d464:	d101      	bne.n	800d46a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	e099      	b.n	800d59e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d46a:	4b4f      	ldr	r3, [pc, #316]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a4e      	ldr	r2, [pc, #312]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d476:	f7f6 fc53 	bl	8003d20 <HAL_GetTick>
 800d47a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d47c:	e008      	b.n	800d490 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d47e:	f7f6 fc4f 	bl	8003d20 <HAL_GetTick>
 800d482:	4602      	mov	r2, r0
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d901      	bls.n	800d490 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d48c:	2303      	movs	r3, #3
 800d48e:	e086      	b.n	800d59e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d490:	4b45      	ldr	r3, [pc, #276]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1f0      	bne.n	800d47e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d49c:	4b42      	ldr	r3, [pc, #264]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	031b      	lsls	r3, r3, #12
 800d4aa:	493f      	ldr	r1, [pc, #252]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	628b      	str	r3, [r1, #40]	; 0x28
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	025b      	lsls	r3, r3, #9
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	041b      	lsls	r3, r3, #16
 800d4ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	061b      	lsls	r3, r3, #24
 800d4dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d4e0:	4931      	ldr	r1, [pc, #196]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d4e6:	4b30      	ldr	r3, [pc, #192]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	492d      	ldr	r1, [pc, #180]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4f8:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	f023 0220 	bic.w	r2, r3, #32
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	699b      	ldr	r3, [r3, #24]
 800d504:	4928      	ldr	r1, [pc, #160]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d506:	4313      	orrs	r3, r2
 800d508:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d50a:	4b27      	ldr	r3, [pc, #156]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	4a26      	ldr	r2, [pc, #152]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d510:	f023 0310 	bic.w	r3, r3, #16
 800d514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d516:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d51a:	4b24      	ldr	r3, [pc, #144]	; (800d5ac <RCCEx_PLL2_Config+0x160>)
 800d51c:	4013      	ands	r3, r2
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	69d2      	ldr	r2, [r2, #28]
 800d522:	00d2      	lsls	r2, r2, #3
 800d524:	4920      	ldr	r1, [pc, #128]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d526:	4313      	orrs	r3, r2
 800d528:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d52a:	4b1f      	ldr	r3, [pc, #124]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52e:	4a1e      	ldr	r2, [pc, #120]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d530:	f043 0310 	orr.w	r3, r3, #16
 800d534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d53c:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	4a19      	ldr	r2, [pc, #100]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d546:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d548:	e00f      	b.n	800d56a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d106      	bne.n	800d55e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d550:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	4a14      	ldr	r2, [pc, #80]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d55a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d55c:	e005      	b.n	800d56a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d562:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d568:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a0e      	ldr	r2, [pc, #56]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d576:	f7f6 fbd3 	bl	8003d20 <HAL_GetTick>
 800d57a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d57c:	e008      	b.n	800d590 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d57e:	f7f6 fbcf 	bl	8003d20 <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d901      	bls.n	800d590 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e006      	b.n	800d59e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d590:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d0f0      	beq.n	800d57e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	58024400 	.word	0x58024400
 800d5ac:	ffff0007 	.word	0xffff0007

0800d5b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5be:	4b53      	ldr	r3, [pc, #332]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c2:	f003 0303 	and.w	r3, r3, #3
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d101      	bne.n	800d5ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e099      	b.n	800d702 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d5ce:	4b4f      	ldr	r3, [pc, #316]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a4e      	ldr	r2, [pc, #312]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5da:	f7f6 fba1 	bl	8003d20 <HAL_GetTick>
 800d5de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5e0:	e008      	b.n	800d5f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5e2:	f7f6 fb9d 	bl	8003d20 <HAL_GetTick>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d901      	bls.n	800d5f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e086      	b.n	800d702 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5f4:	4b45      	ldr	r3, [pc, #276]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1f0      	bne.n	800d5e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d600:	4b42      	ldr	r3, [pc, #264]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d604:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	051b      	lsls	r3, r3, #20
 800d60e:	493f      	ldr	r1, [pc, #252]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d610:	4313      	orrs	r3, r2
 800d612:	628b      	str	r3, [r1, #40]	; 0x28
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	3b01      	subs	r3, #1
 800d61a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	3b01      	subs	r3, #1
 800d624:	025b      	lsls	r3, r3, #9
 800d626:	b29b      	uxth	r3, r3
 800d628:	431a      	orrs	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	3b01      	subs	r3, #1
 800d630:	041b      	lsls	r3, r3, #16
 800d632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d636:	431a      	orrs	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	061b      	lsls	r3, r3, #24
 800d640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d644:	4931      	ldr	r1, [pc, #196]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d646:	4313      	orrs	r3, r2
 800d648:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d64a:	4b30      	ldr	r3, [pc, #192]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	695b      	ldr	r3, [r3, #20]
 800d656:	492d      	ldr	r1, [pc, #180]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d658:	4313      	orrs	r3, r2
 800d65a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d65c:	4b2b      	ldr	r3, [pc, #172]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	4928      	ldr	r1, [pc, #160]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d66e:	4b27      	ldr	r3, [pc, #156]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	4a26      	ldr	r2, [pc, #152]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d67a:	4b24      	ldr	r3, [pc, #144]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d67e:	4b24      	ldr	r3, [pc, #144]	; (800d710 <RCCEx_PLL3_Config+0x160>)
 800d680:	4013      	ands	r3, r2
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	69d2      	ldr	r2, [r2, #28]
 800d686:	00d2      	lsls	r2, r2, #3
 800d688:	4920      	ldr	r1, [pc, #128]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d68e:	4b1f      	ldr	r3, [pc, #124]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	4a1e      	ldr	r2, [pc, #120]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d106      	bne.n	800d6ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d6a0:	4b1a      	ldr	r3, [pc, #104]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a4:	4a19      	ldr	r2, [pc, #100]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d6aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6ac:	e00f      	b.n	800d6ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d106      	bne.n	800d6c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d6b4:	4b15      	ldr	r3, [pc, #84]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	4a14      	ldr	r2, [pc, #80]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d6be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6c0:	e005      	b.n	800d6ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d6c2:	4b12      	ldr	r3, [pc, #72]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c6:	4a11      	ldr	r2, [pc, #68]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d6ce:	4b0f      	ldr	r3, [pc, #60]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a0e      	ldr	r2, [pc, #56]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6da:	f7f6 fb21 	bl	8003d20 <HAL_GetTick>
 800d6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6e0:	e008      	b.n	800d6f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d6e2:	f7f6 fb1d 	bl	8003d20 <HAL_GetTick>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d901      	bls.n	800d6f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e006      	b.n	800d702 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6f4:	4b05      	ldr	r3, [pc, #20]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d0f0      	beq.n	800d6e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d700:	7bfb      	ldrb	r3, [r7, #15]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	58024400 	.word	0x58024400
 800d710:	ffff0007 	.word	0xffff0007

0800d714 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d071      	beq.n	800d80a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7f5 fd88 	bl	8003250 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2202      	movs	r2, #2
 800d744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	f003 0310 	and.w	r3, r3, #16
 800d752:	2b10      	cmp	r3, #16
 800d754:	d050      	beq.n	800d7f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	22ca      	movs	r2, #202	; 0xca
 800d75c:	625a      	str	r2, [r3, #36]	; 0x24
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2253      	movs	r2, #83	; 0x53
 800d764:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fa4a 	bl	800dc00 <RTC_EnterInitMode>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d770:	7bfb      	ldrb	r3, [r7, #15]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d124      	bne.n	800d7c0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6899      	ldr	r1, [r3, #8]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	4b24      	ldr	r3, [pc, #144]	; (800d814 <HAL_RTC_Init+0x100>)
 800d782:	400b      	ands	r3, r1
 800d784:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6899      	ldr	r1, [r3, #8]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	431a      	orrs	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	431a      	orrs	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	0419      	lsls	r1, r3, #16
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	68da      	ldr	r2, [r3, #12]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	430a      	orrs	r2, r1
 800d7b4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fa56 	bl	800dc68 <RTC_ExitInitMode>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d113      	bne.n	800d7ee <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f022 0203 	bic.w	r2, r2, #3
 800d7d4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	69da      	ldr	r2, [r3, #28]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	431a      	orrs	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	22ff      	movs	r2, #255	; 0xff
 800d7f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d7f6:	e001      	b.n	800d7fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d103      	bne.n	800d80a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	ff8fffbf 	.word	0xff8fffbf

0800d818 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d818:	b590      	push	{r4, r7, lr}
 800d81a:	b087      	sub	sp, #28
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d101      	bne.n	800d832 <HAL_RTC_SetTime+0x1a>
 800d82e:	2302      	movs	r3, #2
 800d830:	e089      	b.n	800d946 <HAL_RTC_SetTime+0x12e>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2202      	movs	r2, #2
 800d83e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	22ca      	movs	r2, #202	; 0xca
 800d848:	625a      	str	r2, [r3, #36]	; 0x24
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2253      	movs	r2, #83	; 0x53
 800d850:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 f9d4 	bl	800dc00 <RTC_EnterInitMode>
 800d858:	4603      	mov	r3, r0
 800d85a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d85c:	7cfb      	ldrb	r3, [r7, #19]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d161      	bne.n	800d926 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d126      	bne.n	800d8b6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2200      	movs	r2, #0
 800d87a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fa2f 	bl	800dce4 <RTC_ByteToBcd2>
 800d886:	4603      	mov	r3, r0
 800d888:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	785b      	ldrb	r3, [r3, #1]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fa28 	bl	800dce4 <RTC_ByteToBcd2>
 800d894:	4603      	mov	r3, r0
 800d896:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d898:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	789b      	ldrb	r3, [r3, #2]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 fa20 	bl	800dce4 <RTC_ByteToBcd2>
 800d8a4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8a6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	78db      	ldrb	r3, [r3, #3]
 800d8ae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	617b      	str	r3, [r7, #20]
 800d8b4:	e018      	b.n	800d8e8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d102      	bne.n	800d8ca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	785b      	ldrb	r3, [r3, #1]
 800d8d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	78db      	ldrb	r3, [r3, #3]
 800d8e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	6979      	ldr	r1, [r7, #20]
 800d8ee:	4b18      	ldr	r3, [pc, #96]	; (800d950 <HAL_RTC_SetTime+0x138>)
 800d8f0:	400b      	ands	r3, r1
 800d8f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	689a      	ldr	r2, [r3, #8]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d902:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6899      	ldr	r1, [r3, #8]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	68da      	ldr	r2, [r3, #12]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	431a      	orrs	r2, r3
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f000 f9a3 	bl	800dc68 <RTC_ExitInitMode>
 800d922:	4603      	mov	r3, r0
 800d924:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	22ff      	movs	r2, #255	; 0xff
 800d92c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d92e:	7cfb      	ldrb	r3, [r7, #19]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d103      	bne.n	800d93c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d944:	7cfb      	ldrb	r3, [r7, #19]
}
 800d946:	4618      	mov	r0, r3
 800d948:	371c      	adds	r7, #28
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd90      	pop	{r4, r7, pc}
 800d94e:	bf00      	nop
 800d950:	007f7f7f 	.word	0x007f7f7f

0800d954 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	4b22      	ldr	r3, [pc, #136]	; (800da08 <HAL_RTC_GetTime+0xb4>)
 800d980:	4013      	ands	r3, r2
 800d982:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	0c1b      	lsrs	r3, r3, #16
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	0a1b      	lsrs	r3, r3, #8
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	0d9b      	lsrs	r3, r3, #22
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d11a      	bne.n	800d9fe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f000 f9a9 	bl	800dd24 <RTC_Bcd2ToByte>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	785b      	ldrb	r3, [r3, #1]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 f9a0 	bl	800dd24 <RTC_Bcd2ToByte>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	789b      	ldrb	r3, [r3, #2]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 f997 	bl	800dd24 <RTC_Bcd2ToByte>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	007f7f7f 	.word	0x007f7f7f

0800da0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da0c:	b590      	push	{r4, r7, lr}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d101      	bne.n	800da26 <HAL_RTC_SetDate+0x1a>
 800da22:	2302      	movs	r3, #2
 800da24:	e073      	b.n	800db0e <HAL_RTC_SetDate+0x102>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2202      	movs	r2, #2
 800da32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d10e      	bne.n	800da5a <HAL_RTC_SetDate+0x4e>
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	785b      	ldrb	r3, [r3, #1]
 800da40:	f003 0310 	and.w	r3, r3, #16
 800da44:	2b00      	cmp	r3, #0
 800da46:	d008      	beq.n	800da5a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	785b      	ldrb	r3, [r3, #1]
 800da4c:	f023 0310 	bic.w	r3, r3, #16
 800da50:	b2db      	uxtb	r3, r3
 800da52:	330a      	adds	r3, #10
 800da54:	b2da      	uxtb	r2, r3
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d11c      	bne.n	800da9a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	78db      	ldrb	r3, [r3, #3]
 800da64:	4618      	mov	r0, r3
 800da66:	f000 f93d 	bl	800dce4 <RTC_ByteToBcd2>
 800da6a:	4603      	mov	r3, r0
 800da6c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	785b      	ldrb	r3, [r3, #1]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 f936 	bl	800dce4 <RTC_ByteToBcd2>
 800da78:	4603      	mov	r3, r0
 800da7a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da7c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	789b      	ldrb	r3, [r3, #2]
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f92e 	bl	800dce4 <RTC_ByteToBcd2>
 800da88:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da8a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da94:	4313      	orrs	r3, r2
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	e00e      	b.n	800dab8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	78db      	ldrb	r3, [r3, #3]
 800da9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	785b      	ldrb	r3, [r3, #1]
 800daa4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800daa6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800daac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dab4:	4313      	orrs	r3, r2
 800dab6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	22ca      	movs	r2, #202	; 0xca
 800dabe:	625a      	str	r2, [r3, #36]	; 0x24
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2253      	movs	r2, #83	; 0x53
 800dac6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 f899 	bl	800dc00 <RTC_EnterInitMode>
 800dace:	4603      	mov	r3, r0
 800dad0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dad2:	7cfb      	ldrb	r3, [r7, #19]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	6979      	ldr	r1, [r7, #20]
 800dade:	4b0e      	ldr	r3, [pc, #56]	; (800db18 <HAL_RTC_SetDate+0x10c>)
 800dae0:	400b      	ands	r3, r1
 800dae2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f000 f8bf 	bl	800dc68 <RTC_ExitInitMode>
 800daea:	4603      	mov	r3, r0
 800daec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	22ff      	movs	r2, #255	; 0xff
 800daf4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800daf6:	7cfb      	ldrb	r3, [r7, #19]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d103      	bne.n	800db04 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800db0c:	7cfb      	ldrb	r3, [r7, #19]


}
 800db0e:	4618      	mov	r0, r3
 800db10:	371c      	adds	r7, #28
 800db12:	46bd      	mov	sp, r7
 800db14:	bd90      	pop	{r4, r7, pc}
 800db16:	bf00      	nop
 800db18:	00ffff3f 	.word	0x00ffff3f

0800db1c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	4b21      	ldr	r3, [pc, #132]	; (800dbb4 <HAL_RTC_GetDate+0x98>)
 800db30:	4013      	ands	r3, r2
 800db32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	0c1b      	lsrs	r3, r3, #16
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	0a1b      	lsrs	r3, r3, #8
 800db42:	b2db      	uxtb	r3, r3
 800db44:	f003 031f 	and.w	r3, r3, #31
 800db48:	b2da      	uxtb	r2, r3
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db56:	b2da      	uxtb	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	0b5b      	lsrs	r3, r3, #13
 800db60:	b2db      	uxtb	r3, r3
 800db62:	f003 0307 	and.w	r3, r3, #7
 800db66:	b2da      	uxtb	r2, r3
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d11a      	bne.n	800dba8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	78db      	ldrb	r3, [r3, #3]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f8d4 	bl	800dd24 <RTC_Bcd2ToByte>
 800db7c:	4603      	mov	r3, r0
 800db7e:	461a      	mov	r2, r3
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	785b      	ldrb	r3, [r3, #1]
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f8cb 	bl	800dd24 <RTC_Bcd2ToByte>
 800db8e:	4603      	mov	r3, r0
 800db90:	461a      	mov	r2, r3
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	789b      	ldrb	r3, [r3, #2]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 f8c2 	bl	800dd24 <RTC_Bcd2ToByte>
 800dba0:	4603      	mov	r3, r0
 800dba2:	461a      	mov	r2, r3
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	00ffff3f 	.word	0x00ffff3f

0800dbb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a0d      	ldr	r2, [pc, #52]	; (800dbfc <HAL_RTC_WaitForSynchro+0x44>)
 800dbc6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dbc8:	f7f6 f8aa 	bl	8003d20 <HAL_GetTick>
 800dbcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dbce:	e009      	b.n	800dbe4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dbd0:	f7f6 f8a6 	bl	8003d20 <HAL_GetTick>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbde:	d901      	bls.n	800dbe4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	e007      	b.n	800dbf4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	f003 0320 	and.w	r3, r3, #32
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0ee      	beq.n	800dbd0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	0003ff5f 	.word	0x0003ff5f

0800dc00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d120      	bne.n	800dc5c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dc24:	f7f6 f87c 	bl	8003d20 <HAL_GetTick>
 800dc28:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dc2a:	e00d      	b.n	800dc48 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dc2c:	f7f6 f878 	bl	8003d20 <HAL_GetTick>
 800dc30:	4602      	mov	r2, r0
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc3a:	d905      	bls.n	800dc48 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2203      	movs	r2, #3
 800dc44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d102      	bne.n	800dc5c <RTC_EnterInitMode+0x5c>
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
 800dc58:	2b03      	cmp	r3, #3
 800dc5a:	d1e7      	bne.n	800dc2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
	...

0800dc68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc70:	2300      	movs	r3, #0
 800dc72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dc74:	4b1a      	ldr	r3, [pc, #104]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	4a19      	ldr	r2, [pc, #100]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dc7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc7e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dc80:	4b17      	ldr	r3, [pc, #92]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	f003 0320 	and.w	r3, r3, #32
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10c      	bne.n	800dca6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff ff93 	bl	800dbb8 <HAL_RTC_WaitForSynchro>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01e      	beq.n	800dcd6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2203      	movs	r2, #3
 800dc9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	73fb      	strb	r3, [r7, #15]
 800dca4:	e017      	b.n	800dcd6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dca6:	4b0e      	ldr	r3, [pc, #56]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	4a0d      	ldr	r2, [pc, #52]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dcac:	f023 0320 	bic.w	r3, r3, #32
 800dcb0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff ff80 	bl	800dbb8 <HAL_RTC_WaitForSynchro>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d005      	beq.n	800dcca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2203      	movs	r2, #3
 800dcc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dcca:	4b05      	ldr	r3, [pc, #20]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	4a04      	ldr	r2, [pc, #16]	; (800dce0 <RTC_ExitInitMode+0x78>)
 800dcd0:	f043 0320 	orr.w	r3, r3, #32
 800dcd4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	58004000 	.word	0x58004000

0800dce4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dcf6:	e005      	b.n	800dd04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dcfe:	7afb      	ldrb	r3, [r7, #11]
 800dd00:	3b0a      	subs	r3, #10
 800dd02:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dd04:	7afb      	ldrb	r3, [r7, #11]
 800dd06:	2b09      	cmp	r3, #9
 800dd08:	d8f6      	bhi.n	800dcf8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	011b      	lsls	r3, r3, #4
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	7afb      	ldrb	r3, [r7, #11]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	b2db      	uxtb	r3, r3
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	091b      	lsrs	r3, r3, #4
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	461a      	mov	r2, r3
 800dd36:	0092      	lsls	r2, r2, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dd3e:	79fb      	ldrb	r3, [r7, #7]
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	4413      	add	r3, r2
 800dd4a:	b2db      	uxtb	r3, r3
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e10f      	b.n	800df8a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a87      	ldr	r2, [pc, #540]	; (800df94 <HAL_SPI_Init+0x23c>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d00f      	beq.n	800dd9a <HAL_SPI_Init+0x42>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a86      	ldr	r2, [pc, #536]	; (800df98 <HAL_SPI_Init+0x240>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d00a      	beq.n	800dd9a <HAL_SPI_Init+0x42>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a84      	ldr	r2, [pc, #528]	; (800df9c <HAL_SPI_Init+0x244>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d005      	beq.n	800dd9a <HAL_SPI_Init+0x42>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	2b0f      	cmp	r3, #15
 800dd94:	d901      	bls.n	800dd9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e0f7      	b.n	800df8a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fc12 	bl	800e5c4 <SPI_GetPacketSize>
 800dda0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a7b      	ldr	r2, [pc, #492]	; (800df94 <HAL_SPI_Init+0x23c>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00c      	beq.n	800ddc6 <HAL_SPI_Init+0x6e>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a79      	ldr	r2, [pc, #484]	; (800df98 <HAL_SPI_Init+0x240>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d007      	beq.n	800ddc6 <HAL_SPI_Init+0x6e>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a78      	ldr	r2, [pc, #480]	; (800df9c <HAL_SPI_Init+0x244>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d002      	beq.n	800ddc6 <HAL_SPI_Init+0x6e>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b08      	cmp	r3, #8
 800ddc4:	d811      	bhi.n	800ddea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddca:	4a72      	ldr	r2, [pc, #456]	; (800df94 <HAL_SPI_Init+0x23c>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d009      	beq.n	800dde4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a70      	ldr	r2, [pc, #448]	; (800df98 <HAL_SPI_Init+0x240>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d004      	beq.n	800dde4 <HAL_SPI_Init+0x8c>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a6f      	ldr	r2, [pc, #444]	; (800df9c <HAL_SPI_Init+0x244>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d104      	bne.n	800ddee <HAL_SPI_Init+0x96>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b10      	cmp	r3, #16
 800dde8:	d901      	bls.n	800ddee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e0cd      	b.n	800df8a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7f5 fa58 	bl	80032b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2202      	movs	r2, #2
 800de0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f022 0201 	bic.w	r2, r2, #1
 800de1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800de2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de34:	d119      	bne.n	800de6a <HAL_SPI_Init+0x112>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de3e:	d103      	bne.n	800de48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de44:	2b00      	cmp	r3, #0
 800de46:	d008      	beq.n	800de5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10c      	bne.n	800de6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de58:	d107      	bne.n	800de6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00f      	beq.n	800de96 <HAL_SPI_Init+0x13e>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	2b06      	cmp	r3, #6
 800de7c:	d90b      	bls.n	800de96 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	430a      	orrs	r2, r1
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	e007      	b.n	800dea6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dea4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	69da      	ldr	r2, [r3, #28]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deae:	431a      	orrs	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	431a      	orrs	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb8:	ea42 0103 	orr.w	r1, r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68da      	ldr	r2, [r3, #12]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	430a      	orrs	r2, r1
 800dec6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded0:	431a      	orrs	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded6:	431a      	orrs	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	699b      	ldr	r3, [r3, #24]
 800dedc:	431a      	orrs	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	431a      	orrs	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	431a      	orrs	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	431a      	orrs	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800defa:	431a      	orrs	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	431a      	orrs	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df06:	ea42 0103 	orr.w	r1, r2, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	430a      	orrs	r2, r1
 800df14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d113      	bne.n	800df46 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df30:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df44:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f022 0201 	bic.w	r2, r2, #1
 800df54:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	430a      	orrs	r2, r1
 800df76:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	40013000 	.word	0x40013000
 800df98:	40003800 	.word	0x40003800
 800df9c:	40003c00 	.word	0x40003c00

0800dfa0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	603b      	str	r3, [r7, #0]
 800dfac:	4613      	mov	r3, r2
 800dfae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb4:	095b      	lsrs	r3, r3, #5
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	3301      	adds	r3, #1
 800dfba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3330      	adds	r3, #48	; 0x30
 800dfc2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfc4:	f7f5 feac 	bl	8003d20 <HAL_GetTick>
 800dfc8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d001      	beq.n	800dfda <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e250      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d002      	beq.n	800dfe6 <HAL_SPI_Receive+0x46>
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e248      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d101      	bne.n	800dff8 <HAL_SPI_Receive+0x58>
 800dff4:	2302      	movs	r3, #2
 800dff6:	e241      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2204      	movs	r2, #4
 800e004:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	88fa      	ldrh	r2, [r7, #6]
 800e01a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	88fa      	ldrh	r2, [r7, #6]
 800e022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2200      	movs	r2, #0
 800e046:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e050:	d108      	bne.n	800e064 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	e009      	b.n	800e078 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e076:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	4b95      	ldr	r3, [pc, #596]	; (800e2d4 <HAL_SPI_Receive+0x334>)
 800e080:	4013      	ands	r3, r2
 800e082:	88f9      	ldrh	r1, [r7, #6]
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	6812      	ldr	r2, [r2, #0]
 800e088:	430b      	orrs	r3, r1
 800e08a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f042 0201 	orr.w	r2, r2, #1
 800e09a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0a4:	d107      	bne.n	800e0b6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	2b0f      	cmp	r3, #15
 800e0bc:	d96c      	bls.n	800e198 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e0be:	e064      	b.n	800e18a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d114      	bne.n	800e100 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0e6:	1d1a      	adds	r2, r3, #4
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0fe:	e044      	b.n	800e18a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e106:	b29b      	uxth	r3, r3
 800e108:	8bfa      	ldrh	r2, [r7, #30]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d919      	bls.n	800e142 <HAL_SPI_Receive+0x1a2>
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d014      	beq.n	800e142 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e122:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e128:	1d1a      	adds	r2, r3, #4
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e134:	b29b      	uxth	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e140:	e023      	b.n	800e18a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e142:	f7f5 fded 	bl	8003d20 <HAL_GetTick>
 800e146:	4602      	mov	r2, r0
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d803      	bhi.n	800e15a <HAL_SPI_Receive+0x1ba>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e158:	d102      	bne.n	800e160 <HAL_SPI_Receive+0x1c0>
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d114      	bne.n	800e18a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f000 f98f 	bl	800e484 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e16c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e186:	2303      	movs	r3, #3
 800e188:	e178      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e190:	b29b      	uxth	r3, r3
 800e192:	2b00      	cmp	r3, #0
 800e194:	d194      	bne.n	800e0c0 <HAL_SPI_Receive+0x120>
 800e196:	e15e      	b.n	800e456 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	2b07      	cmp	r3, #7
 800e19e:	f240 8153 	bls.w	800e448 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1a2:	e08f      	b.n	800e2c4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d114      	bne.n	800e1e4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1be:	69ba      	ldr	r2, [r7, #24]
 800e1c0:	8812      	ldrh	r2, [r2, #0]
 800e1c2:	b292      	uxth	r2, r2
 800e1c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ca:	1c9a      	adds	r2, r3, #2
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1e2:	e06f      	b.n	800e2c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	8bfa      	ldrh	r2, [r7, #30]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d924      	bls.n	800e23c <HAL_SPI_Receive+0x29c>
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d01f      	beq.n	800e23c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	8812      	ldrh	r2, [r2, #0]
 800e204:	b292      	uxth	r2, r2
 800e206:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20c:	1c9a      	adds	r2, r3, #2
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e216:	69ba      	ldr	r2, [r7, #24]
 800e218:	8812      	ldrh	r2, [r2, #0]
 800e21a:	b292      	uxth	r2, r2
 800e21c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e222:	1c9a      	adds	r2, r3, #2
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e22e:	b29b      	uxth	r3, r3
 800e230:	3b02      	subs	r3, #2
 800e232:	b29a      	uxth	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e23a:	e043      	b.n	800e2c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e242:	b29b      	uxth	r3, r3
 800e244:	2b01      	cmp	r3, #1
 800e246:	d119      	bne.n	800e27c <HAL_SPI_Receive+0x2dc>
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d014      	beq.n	800e27c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e256:	69ba      	ldr	r2, [r7, #24]
 800e258:	8812      	ldrh	r2, [r2, #0]
 800e25a:	b292      	uxth	r2, r2
 800e25c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e262:	1c9a      	adds	r2, r3, #2
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e26e:	b29b      	uxth	r3, r3
 800e270:	3b01      	subs	r3, #1
 800e272:	b29a      	uxth	r2, r3
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e27a:	e023      	b.n	800e2c4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e27c:	f7f5 fd50 	bl	8003d20 <HAL_GetTick>
 800e280:	4602      	mov	r2, r0
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d803      	bhi.n	800e294 <HAL_SPI_Receive+0x2f4>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e292:	d102      	bne.n	800e29a <HAL_SPI_Receive+0x2fa>
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d114      	bne.n	800e2c4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f000 f8f2 	bl	800e484 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e0db      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f47f af69 	bne.w	800e1a4 <HAL_SPI_Receive+0x204>
 800e2d2:	e0c0      	b.n	800e456 <HAL_SPI_Receive+0x4b6>
 800e2d4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	695b      	ldr	r3, [r3, #20]
 800e2e6:	f003 0301 	and.w	r3, r3, #1
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d117      	bne.n	800e31e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2fa:	7812      	ldrb	r2, [r2, #0]
 800e2fc:	b2d2      	uxtb	r2, r2
 800e2fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e310:	b29b      	uxth	r3, r3
 800e312:	3b01      	subs	r3, #1
 800e314:	b29a      	uxth	r2, r3
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e31c:	e094      	b.n	800e448 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e324:	b29b      	uxth	r3, r3
 800e326:	8bfa      	ldrh	r2, [r7, #30]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d946      	bls.n	800e3ba <HAL_SPI_Receive+0x41a>
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e332:	2b00      	cmp	r3, #0
 800e334:	d041      	beq.n	800e3ba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	b2d2      	uxtb	r2, r2
 800e346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e35e:	7812      	ldrb	r2, [r2, #0]
 800e360:	b2d2      	uxtb	r2, r2
 800e362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e368:	1c5a      	adds	r2, r3, #1
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e37a:	7812      	ldrb	r2, [r2, #0]
 800e37c:	b2d2      	uxtb	r2, r2
 800e37e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e396:	7812      	ldrb	r2, [r2, #0]
 800e398:	b2d2      	uxtb	r2, r2
 800e39a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3a0:	1c5a      	adds	r2, r3, #1
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	3b04      	subs	r3, #4
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3b8:	e046      	b.n	800e448 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	d81c      	bhi.n	800e400 <HAL_SPI_Receive+0x460>
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d017      	beq.n	800e400 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3dc:	7812      	ldrb	r2, [r2, #0]
 800e3de:	b2d2      	uxtb	r2, r2
 800e3e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	3b01      	subs	r3, #1
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3fe:	e023      	b.n	800e448 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e400:	f7f5 fc8e 	bl	8003d20 <HAL_GetTick>
 800e404:	4602      	mov	r2, r0
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d803      	bhi.n	800e418 <HAL_SPI_Receive+0x478>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e416:	d102      	bne.n	800e41e <HAL_SPI_Receive+0x47e>
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d114      	bne.n	800e448 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f000 f830 	bl	800e484 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e42a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e444:	2303      	movs	r3, #3
 800e446:	e019      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e44e:	b29b      	uxth	r3, r3
 800e450:	2b00      	cmp	r3, #0
 800e452:	f47f af41 	bne.w	800e2d8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 f814 	bl	800e484 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2200      	movs	r2, #0
 800e468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e47a:	2300      	movs	r3, #0
  }
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3720      	adds	r7, #32
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	699a      	ldr	r2, [r3, #24]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f042 0208 	orr.w	r2, r2, #8
 800e4a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	699a      	ldr	r2, [r3, #24]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f042 0210 	orr.w	r2, r2, #16
 800e4b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f022 0201 	bic.w	r2, r2, #1
 800e4c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6919      	ldr	r1, [r3, #16]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	4b3c      	ldr	r3, [pc, #240]	; (800e5c0 <SPI_CloseTransfer+0x13c>)
 800e4d0:	400b      	ands	r3, r1
 800e4d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	689a      	ldr	r2, [r3, #8]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e4e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b04      	cmp	r3, #4
 800e4ee:	d014      	beq.n	800e51a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f003 0320 	and.w	r3, r3, #32
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00f      	beq.n	800e51a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	699a      	ldr	r2, [r3, #24]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f042 0220 	orr.w	r2, r2, #32
 800e518:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b03      	cmp	r3, #3
 800e524:	d014      	beq.n	800e550 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00f      	beq.n	800e550 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e536:	f043 0204 	orr.w	r2, r3, #4
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	699a      	ldr	r2, [r3, #24]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e54e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00f      	beq.n	800e57a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e560:	f043 0201 	orr.w	r2, r3, #1
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	699a      	ldr	r2, [r3, #24]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e578:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00f      	beq.n	800e5a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e58a:	f043 0208 	orr.w	r2, r3, #8
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	699a      	ldr	r2, [r3, #24]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e5b4:	bf00      	nop
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	fffffc90 	.word	0xfffffc90

0800e5c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5d0:	095b      	lsrs	r3, r3, #5
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	3307      	adds	r3, #7
 800e5e2:	08db      	lsrs	r3, r3, #3
 800e5e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b082      	sub	sp, #8
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	e049      	b.n	800e6a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b00      	cmp	r3, #0
 800e616:	d106      	bne.n	800e626 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7f4 feff 	bl	8003424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2202      	movs	r2, #2
 800e62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	3304      	adds	r3, #4
 800e636:	4619      	mov	r1, r3
 800e638:	4610      	mov	r0, r2
 800e63a:	f000 fe7d 	bl	800f338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2201      	movs	r2, #1
 800e672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2201      	movs	r2, #1
 800e67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2201      	movs	r2, #1
 800e682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d001      	beq.n	800e6c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e054      	b.n	800e76a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68da      	ldr	r2, [r3, #12]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f042 0201 	orr.w	r2, r2, #1
 800e6d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a26      	ldr	r2, [pc, #152]	; (800e778 <HAL_TIM_Base_Start_IT+0xd0>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d022      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ea:	d01d      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a22      	ldr	r2, [pc, #136]	; (800e77c <HAL_TIM_Base_Start_IT+0xd4>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d018      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a21      	ldr	r2, [pc, #132]	; (800e780 <HAL_TIM_Base_Start_IT+0xd8>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d013      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a1f      	ldr	r2, [pc, #124]	; (800e784 <HAL_TIM_Base_Start_IT+0xdc>)
 800e706:	4293      	cmp	r3, r2
 800e708:	d00e      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a1e      	ldr	r2, [pc, #120]	; (800e788 <HAL_TIM_Base_Start_IT+0xe0>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d009      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a1c      	ldr	r2, [pc, #112]	; (800e78c <HAL_TIM_Base_Start_IT+0xe4>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d004      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x80>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <HAL_TIM_Base_Start_IT+0xe8>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d115      	bne.n	800e754 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	689a      	ldr	r2, [r3, #8]
 800e72e:	4b19      	ldr	r3, [pc, #100]	; (800e794 <HAL_TIM_Base_Start_IT+0xec>)
 800e730:	4013      	ands	r3, r2
 800e732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b06      	cmp	r3, #6
 800e738:	d015      	beq.n	800e766 <HAL_TIM_Base_Start_IT+0xbe>
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e740:	d011      	beq.n	800e766 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f042 0201 	orr.w	r2, r2, #1
 800e750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e752:	e008      	b.n	800e766 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f042 0201 	orr.w	r2, r2, #1
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	e000      	b.n	800e768 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	40010000 	.word	0x40010000
 800e77c:	40000400 	.word	0x40000400
 800e780:	40000800 	.word	0x40000800
 800e784:	40000c00 	.word	0x40000c00
 800e788:	40010400 	.word	0x40010400
 800e78c:	40001800 	.word	0x40001800
 800e790:	40014000 	.word	0x40014000
 800e794:	00010007 	.word	0x00010007

0800e798 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <HAL_TIM_OC_Start_IT+0x28>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	bf14      	ite	ne
 800e7b8:	2301      	movne	r3, #1
 800e7ba:	2300      	moveq	r3, #0
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	e03c      	b.n	800e83a <HAL_TIM_OC_Start_IT+0xa2>
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2b04      	cmp	r3, #4
 800e7c4:	d109      	bne.n	800e7da <HAL_TIM_OC_Start_IT+0x42>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	bf14      	ite	ne
 800e7d2:	2301      	movne	r3, #1
 800e7d4:	2300      	moveq	r3, #0
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	e02f      	b.n	800e83a <HAL_TIM_OC_Start_IT+0xa2>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d109      	bne.n	800e7f4 <HAL_TIM_OC_Start_IT+0x5c>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	bf14      	ite	ne
 800e7ec:	2301      	movne	r3, #1
 800e7ee:	2300      	moveq	r3, #0
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	e022      	b.n	800e83a <HAL_TIM_OC_Start_IT+0xa2>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b0c      	cmp	r3, #12
 800e7f8:	d109      	bne.n	800e80e <HAL_TIM_OC_Start_IT+0x76>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b01      	cmp	r3, #1
 800e804:	bf14      	ite	ne
 800e806:	2301      	movne	r3, #1
 800e808:	2300      	moveq	r3, #0
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	e015      	b.n	800e83a <HAL_TIM_OC_Start_IT+0xa2>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2b10      	cmp	r3, #16
 800e812:	d109      	bne.n	800e828 <HAL_TIM_OC_Start_IT+0x90>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	bf14      	ite	ne
 800e820:	2301      	movne	r3, #1
 800e822:	2300      	moveq	r3, #0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	e008      	b.n	800e83a <HAL_TIM_OC_Start_IT+0xa2>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	2b01      	cmp	r3, #1
 800e832:	bf14      	ite	ne
 800e834:	2301      	movne	r3, #1
 800e836:	2300      	moveq	r3, #0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	e0ec      	b.n	800ea1c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d104      	bne.n	800e852 <HAL_TIM_OC_Start_IT+0xba>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2202      	movs	r2, #2
 800e84c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e850:	e023      	b.n	800e89a <HAL_TIM_OC_Start_IT+0x102>
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	2b04      	cmp	r3, #4
 800e856:	d104      	bne.n	800e862 <HAL_TIM_OC_Start_IT+0xca>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2202      	movs	r2, #2
 800e85c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e860:	e01b      	b.n	800e89a <HAL_TIM_OC_Start_IT+0x102>
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b08      	cmp	r3, #8
 800e866:	d104      	bne.n	800e872 <HAL_TIM_OC_Start_IT+0xda>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2202      	movs	r2, #2
 800e86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e870:	e013      	b.n	800e89a <HAL_TIM_OC_Start_IT+0x102>
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b0c      	cmp	r3, #12
 800e876:	d104      	bne.n	800e882 <HAL_TIM_OC_Start_IT+0xea>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e880:	e00b      	b.n	800e89a <HAL_TIM_OC_Start_IT+0x102>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b10      	cmp	r3, #16
 800e886:	d104      	bne.n	800e892 <HAL_TIM_OC_Start_IT+0xfa>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2202      	movs	r2, #2
 800e88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e890:	e003      	b.n	800e89a <HAL_TIM_OC_Start_IT+0x102>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2202      	movs	r2, #2
 800e896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b0c      	cmp	r3, #12
 800e89e:	d841      	bhi.n	800e924 <HAL_TIM_OC_Start_IT+0x18c>
 800e8a0:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <HAL_TIM_OC_Start_IT+0x110>)
 800e8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a6:	bf00      	nop
 800e8a8:	0800e8dd 	.word	0x0800e8dd
 800e8ac:	0800e925 	.word	0x0800e925
 800e8b0:	0800e925 	.word	0x0800e925
 800e8b4:	0800e925 	.word	0x0800e925
 800e8b8:	0800e8ef 	.word	0x0800e8ef
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e925 	.word	0x0800e925
 800e8c4:	0800e925 	.word	0x0800e925
 800e8c8:	0800e901 	.word	0x0800e901
 800e8cc:	0800e925 	.word	0x0800e925
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e925 	.word	0x0800e925
 800e8d8:	0800e913 	.word	0x0800e913
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68da      	ldr	r2, [r3, #12]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f042 0202 	orr.w	r2, r2, #2
 800e8ea:	60da      	str	r2, [r3, #12]
      break;
 800e8ec:	e01d      	b.n	800e92a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68da      	ldr	r2, [r3, #12]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f042 0204 	orr.w	r2, r2, #4
 800e8fc:	60da      	str	r2, [r3, #12]
      break;
 800e8fe:	e014      	b.n	800e92a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f042 0208 	orr.w	r2, r2, #8
 800e90e:	60da      	str	r2, [r3, #12]
      break;
 800e910:	e00b      	b.n	800e92a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	68da      	ldr	r2, [r3, #12]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f042 0210 	orr.w	r2, r2, #16
 800e920:	60da      	str	r2, [r3, #12]
      break;
 800e922:	e002      	b.n	800e92a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	73fb      	strb	r3, [r7, #15]
      break;
 800e928:	bf00      	nop
  }

  if (status == HAL_OK)
 800e92a:	7bfb      	ldrb	r3, [r7, #15]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d174      	bne.n	800ea1a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2201      	movs	r2, #1
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	4618      	mov	r0, r3
 800e93a:	f001 f917 	bl	800fb6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a38      	ldr	r2, [pc, #224]	; (800ea24 <HAL_TIM_OC_Start_IT+0x28c>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d013      	beq.n	800e970 <HAL_TIM_OC_Start_IT+0x1d8>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a36      	ldr	r2, [pc, #216]	; (800ea28 <HAL_TIM_OC_Start_IT+0x290>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d00e      	beq.n	800e970 <HAL_TIM_OC_Start_IT+0x1d8>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a35      	ldr	r2, [pc, #212]	; (800ea2c <HAL_TIM_OC_Start_IT+0x294>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d009      	beq.n	800e970 <HAL_TIM_OC_Start_IT+0x1d8>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a33      	ldr	r2, [pc, #204]	; (800ea30 <HAL_TIM_OC_Start_IT+0x298>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d004      	beq.n	800e970 <HAL_TIM_OC_Start_IT+0x1d8>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a32      	ldr	r2, [pc, #200]	; (800ea34 <HAL_TIM_OC_Start_IT+0x29c>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d101      	bne.n	800e974 <HAL_TIM_OC_Start_IT+0x1dc>
 800e970:	2301      	movs	r3, #1
 800e972:	e000      	b.n	800e976 <HAL_TIM_OC_Start_IT+0x1de>
 800e974:	2300      	movs	r3, #0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d007      	beq.n	800e98a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e988:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a25      	ldr	r2, [pc, #148]	; (800ea24 <HAL_TIM_OC_Start_IT+0x28c>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d022      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e99c:	d01d      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a25      	ldr	r2, [pc, #148]	; (800ea38 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d018      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a23      	ldr	r2, [pc, #140]	; (800ea3c <HAL_TIM_OC_Start_IT+0x2a4>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d013      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a22      	ldr	r2, [pc, #136]	; (800ea40 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d00e      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a19      	ldr	r2, [pc, #100]	; (800ea28 <HAL_TIM_OC_Start_IT+0x290>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d009      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ea44 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d004      	beq.n	800e9da <HAL_TIM_OC_Start_IT+0x242>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a15      	ldr	r2, [pc, #84]	; (800ea2c <HAL_TIM_OC_Start_IT+0x294>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d115      	bne.n	800ea06 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689a      	ldr	r2, [r3, #8]
 800e9e0:	4b19      	ldr	r3, [pc, #100]	; (800ea48 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e9e2:	4013      	ands	r3, r2
 800e9e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	2b06      	cmp	r3, #6
 800e9ea:	d015      	beq.n	800ea18 <HAL_TIM_OC_Start_IT+0x280>
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9f2:	d011      	beq.n	800ea18 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f042 0201 	orr.w	r2, r2, #1
 800ea02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea04:	e008      	b.n	800ea18 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f042 0201 	orr.w	r2, r2, #1
 800ea14:	601a      	str	r2, [r3, #0]
 800ea16:	e000      	b.n	800ea1a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	40010000 	.word	0x40010000
 800ea28:	40010400 	.word	0x40010400
 800ea2c:	40014000 	.word	0x40014000
 800ea30:	40014400 	.word	0x40014400
 800ea34:	40014800 	.word	0x40014800
 800ea38:	40000400 	.word	0x40000400
 800ea3c:	40000800 	.word	0x40000800
 800ea40:	40000c00 	.word	0x40000c00
 800ea44:	40001800 	.word	0x40001800
 800ea48:	00010007 	.word	0x00010007

0800ea4c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b0c      	cmp	r3, #12
 800ea5e:	d841      	bhi.n	800eae4 <HAL_TIM_OC_Stop_IT+0x98>
 800ea60:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ea62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea66:	bf00      	nop
 800ea68:	0800ea9d 	.word	0x0800ea9d
 800ea6c:	0800eae5 	.word	0x0800eae5
 800ea70:	0800eae5 	.word	0x0800eae5
 800ea74:	0800eae5 	.word	0x0800eae5
 800ea78:	0800eaaf 	.word	0x0800eaaf
 800ea7c:	0800eae5 	.word	0x0800eae5
 800ea80:	0800eae5 	.word	0x0800eae5
 800ea84:	0800eae5 	.word	0x0800eae5
 800ea88:	0800eac1 	.word	0x0800eac1
 800ea8c:	0800eae5 	.word	0x0800eae5
 800ea90:	0800eae5 	.word	0x0800eae5
 800ea94:	0800eae5 	.word	0x0800eae5
 800ea98:	0800ead3 	.word	0x0800ead3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	68da      	ldr	r2, [r3, #12]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f022 0202 	bic.w	r2, r2, #2
 800eaaa:	60da      	str	r2, [r3, #12]
      break;
 800eaac:	e01d      	b.n	800eaea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	68da      	ldr	r2, [r3, #12]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 0204 	bic.w	r2, r2, #4
 800eabc:	60da      	str	r2, [r3, #12]
      break;
 800eabe:	e014      	b.n	800eaea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	68da      	ldr	r2, [r3, #12]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f022 0208 	bic.w	r2, r2, #8
 800eace:	60da      	str	r2, [r3, #12]
      break;
 800ead0:	e00b      	b.n	800eaea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	68da      	ldr	r2, [r3, #12]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f022 0210 	bic.w	r2, r2, #16
 800eae0:	60da      	str	r2, [r3, #12]
      break;
 800eae2:	e002      	b.n	800eaea <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800eae4:	2301      	movs	r3, #1
 800eae6:	73fb      	strb	r3, [r7, #15]
      break;
 800eae8:	bf00      	nop
  }

  if (status == HAL_OK)
 800eaea:	7bfb      	ldrb	r3, [r7, #15]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f040 8081 	bne.w	800ebf4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f001 f836 	bl	800fb6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a3e      	ldr	r2, [pc, #248]	; (800ec00 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d013      	beq.n	800eb32 <HAL_TIM_OC_Stop_IT+0xe6>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a3d      	ldr	r2, [pc, #244]	; (800ec04 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d00e      	beq.n	800eb32 <HAL_TIM_OC_Stop_IT+0xe6>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a3b      	ldr	r2, [pc, #236]	; (800ec08 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d009      	beq.n	800eb32 <HAL_TIM_OC_Stop_IT+0xe6>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a3a      	ldr	r2, [pc, #232]	; (800ec0c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d004      	beq.n	800eb32 <HAL_TIM_OC_Stop_IT+0xe6>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a38      	ldr	r2, [pc, #224]	; (800ec10 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d101      	bne.n	800eb36 <HAL_TIM_OC_Stop_IT+0xea>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <HAL_TIM_OC_Stop_IT+0xec>
 800eb36:	2300      	movs	r3, #0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d017      	beq.n	800eb6c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6a1a      	ldr	r2, [r3, #32]
 800eb42:	f241 1311 	movw	r3, #4369	; 0x1111
 800eb46:	4013      	ands	r3, r2
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10f      	bne.n	800eb6c <HAL_TIM_OC_Stop_IT+0x120>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6a1a      	ldr	r2, [r3, #32]
 800eb52:	f240 4344 	movw	r3, #1092	; 0x444
 800eb56:	4013      	ands	r3, r2
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d107      	bne.n	800eb6c <HAL_TIM_OC_Stop_IT+0x120>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eb6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6a1a      	ldr	r2, [r3, #32]
 800eb72:	f241 1311 	movw	r3, #4369	; 0x1111
 800eb76:	4013      	ands	r3, r2
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10f      	bne.n	800eb9c <HAL_TIM_OC_Stop_IT+0x150>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	6a1a      	ldr	r2, [r3, #32]
 800eb82:	f240 4344 	movw	r3, #1092	; 0x444
 800eb86:	4013      	ands	r3, r2
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d107      	bne.n	800eb9c <HAL_TIM_OC_Stop_IT+0x150>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f022 0201 	bic.w	r2, r2, #1
 800eb9a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d104      	bne.n	800ebac <HAL_TIM_OC_Stop_IT+0x160>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebaa:	e023      	b.n	800ebf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2b04      	cmp	r3, #4
 800ebb0:	d104      	bne.n	800ebbc <HAL_TIM_OC_Stop_IT+0x170>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebba:	e01b      	b.n	800ebf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b08      	cmp	r3, #8
 800ebc0:	d104      	bne.n	800ebcc <HAL_TIM_OC_Stop_IT+0x180>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebca:	e013      	b.n	800ebf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b0c      	cmp	r3, #12
 800ebd0:	d104      	bne.n	800ebdc <HAL_TIM_OC_Stop_IT+0x190>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebda:	e00b      	b.n	800ebf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b10      	cmp	r3, #16
 800ebe0:	d104      	bne.n	800ebec <HAL_TIM_OC_Stop_IT+0x1a0>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebea:	e003      	b.n	800ebf4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	40010000 	.word	0x40010000
 800ec04:	40010400 	.word	0x40010400
 800ec08:	40014000 	.word	0x40014000
 800ec0c:	40014400 	.word	0x40014400
 800ec10:	40014800 	.word	0x40014800

0800ec14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d101      	bne.n	800ec26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
 800ec24:	e049      	b.n	800ecba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d106      	bne.n	800ec40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f841 	bl	800ecc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2202      	movs	r2, #2
 800ec44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3304      	adds	r3, #4
 800ec50:	4619      	mov	r1, r3
 800ec52:	4610      	mov	r0, r2
 800ec54:	f000 fb70 	bl	800f338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b083      	sub	sp, #12
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ecca:	bf00      	nop
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	f003 0302 	and.w	r3, r3, #2
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d020      	beq.n	800ed3a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f003 0302 	and.w	r3, r3, #2
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d01b      	beq.n	800ed3a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f06f 0202 	mvn.w	r2, #2
 800ed0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	f003 0303 	and.w	r3, r3, #3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d003      	beq.n	800ed28 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 faeb 	bl	800f2fc <HAL_TIM_IC_CaptureCallback>
 800ed26:	e005      	b.n	800ed34 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7f1 fc69 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 faee 	bl	800f310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	f003 0304 	and.w	r3, r3, #4
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d020      	beq.n	800ed86 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f003 0304 	and.w	r3, r3, #4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d01b      	beq.n	800ed86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f06f 0204 	mvn.w	r2, #4
 800ed56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2202      	movs	r2, #2
 800ed5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d003      	beq.n	800ed74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 fac5 	bl	800f2fc <HAL_TIM_IC_CaptureCallback>
 800ed72:	e005      	b.n	800ed80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7f1 fc43 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fac8 	bl	800f310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	f003 0308 	and.w	r3, r3, #8
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d020      	beq.n	800edd2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f003 0308 	and.w	r3, r3, #8
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d01b      	beq.n	800edd2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f06f 0208 	mvn.w	r2, #8
 800eda2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2204      	movs	r2, #4
 800eda8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	f003 0303 	and.w	r3, r3, #3
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d003      	beq.n	800edc0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 fa9f 	bl	800f2fc <HAL_TIM_IC_CaptureCallback>
 800edbe:	e005      	b.n	800edcc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7f1 fc1d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 faa2 	bl	800f310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	f003 0310 	and.w	r3, r3, #16
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d020      	beq.n	800ee1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f003 0310 	and.w	r3, r3, #16
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d01b      	beq.n	800ee1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f06f 0210 	mvn.w	r2, #16
 800edee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2208      	movs	r2, #8
 800edf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	69db      	ldr	r3, [r3, #28]
 800edfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 fa79 	bl	800f2fc <HAL_TIM_IC_CaptureCallback>
 800ee0a:	e005      	b.n	800ee18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7f1 fbf7 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fa7c 	bl	800f310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00c      	beq.n	800ee42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d007      	beq.n	800ee42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f06f 0201 	mvn.w	r2, #1
 800ee3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7f3 ffcb 	bl	8002dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d104      	bne.n	800ee56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d00c      	beq.n	800ee70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d007      	beq.n	800ee70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ee68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 ffba 	bl	800fde4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00c      	beq.n	800ee94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d007      	beq.n	800ee94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ee8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 ffb2 	bl	800fdf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00c      	beq.n	800eeb8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d007      	beq.n	800eeb8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eeb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fa36 	bl	800f324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	f003 0320 	and.w	r3, r3, #32
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00c      	beq.n	800eedc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f003 0320 	and.w	r3, r3, #32
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d007      	beq.n	800eedc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f06f 0220 	mvn.w	r2, #32
 800eed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 ff7a 	bl	800fdd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eedc:	bf00      	nop
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d101      	bne.n	800ef02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eefe:	2302      	movs	r3, #2
 800ef00:	e0ff      	b.n	800f102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2201      	movs	r2, #1
 800ef06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b14      	cmp	r3, #20
 800ef0e:	f200 80f0 	bhi.w	800f0f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ef12:	a201      	add	r2, pc, #4	; (adr r2, 800ef18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef18:	0800ef6d 	.word	0x0800ef6d
 800ef1c:	0800f0f3 	.word	0x0800f0f3
 800ef20:	0800f0f3 	.word	0x0800f0f3
 800ef24:	0800f0f3 	.word	0x0800f0f3
 800ef28:	0800efad 	.word	0x0800efad
 800ef2c:	0800f0f3 	.word	0x0800f0f3
 800ef30:	0800f0f3 	.word	0x0800f0f3
 800ef34:	0800f0f3 	.word	0x0800f0f3
 800ef38:	0800efef 	.word	0x0800efef
 800ef3c:	0800f0f3 	.word	0x0800f0f3
 800ef40:	0800f0f3 	.word	0x0800f0f3
 800ef44:	0800f0f3 	.word	0x0800f0f3
 800ef48:	0800f02f 	.word	0x0800f02f
 800ef4c:	0800f0f3 	.word	0x0800f0f3
 800ef50:	0800f0f3 	.word	0x0800f0f3
 800ef54:	0800f0f3 	.word	0x0800f0f3
 800ef58:	0800f071 	.word	0x0800f071
 800ef5c:	0800f0f3 	.word	0x0800f0f3
 800ef60:	0800f0f3 	.word	0x0800f0f3
 800ef64:	0800f0f3 	.word	0x0800f0f3
 800ef68:	0800f0b1 	.word	0x0800f0b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68b9      	ldr	r1, [r7, #8]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 fa86 	bl	800f484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	699a      	ldr	r2, [r3, #24]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f042 0208 	orr.w	r2, r2, #8
 800ef86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	699a      	ldr	r2, [r3, #24]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f022 0204 	bic.w	r2, r2, #4
 800ef96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6999      	ldr	r1, [r3, #24]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	691a      	ldr	r2, [r3, #16]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	430a      	orrs	r2, r1
 800efa8:	619a      	str	r2, [r3, #24]
      break;
 800efaa:	e0a5      	b.n	800f0f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68b9      	ldr	r1, [r7, #8]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f000 faf6 	bl	800f5a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	699a      	ldr	r2, [r3, #24]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	699a      	ldr	r2, [r3, #24]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6999      	ldr	r1, [r3, #24]
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	691b      	ldr	r3, [r3, #16]
 800efe2:	021a      	lsls	r2, r3, #8
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	430a      	orrs	r2, r1
 800efea:	619a      	str	r2, [r3, #24]
      break;
 800efec:	e084      	b.n	800f0f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68b9      	ldr	r1, [r7, #8]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fb5f 	bl	800f6b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	69da      	ldr	r2, [r3, #28]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f042 0208 	orr.w	r2, r2, #8
 800f008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	69da      	ldr	r2, [r3, #28]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f022 0204 	bic.w	r2, r2, #4
 800f018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	69d9      	ldr	r1, [r3, #28]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	691a      	ldr	r2, [r3, #16]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	430a      	orrs	r2, r1
 800f02a:	61da      	str	r2, [r3, #28]
      break;
 800f02c:	e064      	b.n	800f0f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68b9      	ldr	r1, [r7, #8]
 800f034:	4618      	mov	r0, r3
 800f036:	f000 fbc7 	bl	800f7c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	69da      	ldr	r2, [r3, #28]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	69da      	ldr	r2, [r3, #28]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	69d9      	ldr	r1, [r3, #28]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	021a      	lsls	r2, r3, #8
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	430a      	orrs	r2, r1
 800f06c:	61da      	str	r2, [r3, #28]
      break;
 800f06e:	e043      	b.n	800f0f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	4618      	mov	r0, r3
 800f078:	f000 fc10 	bl	800f89c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f042 0208 	orr.w	r2, r2, #8
 800f08a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f022 0204 	bic.w	r2, r2, #4
 800f09a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	691a      	ldr	r2, [r3, #16]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	430a      	orrs	r2, r1
 800f0ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f0ae:	e023      	b.n	800f0f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	68b9      	ldr	r1, [r7, #8]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fc54 	bl	800f964 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	021a      	lsls	r2, r3, #8
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	430a      	orrs	r2, r1
 800f0ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f0f0:	e002      	b.n	800f0f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f0f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
}
 800f102:	4618      	mov	r0, r3
 800f104:	3718      	adds	r7, #24
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop

0800f10c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f116:	2300      	movs	r3, #0
 800f118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f120:	2b01      	cmp	r3, #1
 800f122:	d101      	bne.n	800f128 <HAL_TIM_ConfigClockSource+0x1c>
 800f124:	2302      	movs	r3, #2
 800f126:	e0dc      	b.n	800f2e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2201      	movs	r2, #1
 800f12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2202      	movs	r2, #2
 800f134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	4b6a      	ldr	r3, [pc, #424]	; (800f2ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800f144:	4013      	ands	r3, r2
 800f146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f14e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a64      	ldr	r2, [pc, #400]	; (800f2f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	f000 80a9 	beq.w	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f164:	4a62      	ldr	r2, [pc, #392]	; (800f2f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f166:	4293      	cmp	r3, r2
 800f168:	f200 80ae 	bhi.w	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f16c:	4a61      	ldr	r2, [pc, #388]	; (800f2f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	f000 80a1 	beq.w	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f174:	4a5f      	ldr	r2, [pc, #380]	; (800f2f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f176:	4293      	cmp	r3, r2
 800f178:	f200 80a6 	bhi.w	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f17c:	4a5e      	ldr	r2, [pc, #376]	; (800f2f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	f000 8099 	beq.w	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f184:	4a5c      	ldr	r2, [pc, #368]	; (800f2f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f186:	4293      	cmp	r3, r2
 800f188:	f200 809e 	bhi.w	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f18c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f190:	f000 8091 	beq.w	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f194:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f198:	f200 8096 	bhi.w	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f19c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1a0:	f000 8089 	beq.w	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1a8:	f200 808e 	bhi.w	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1b0:	d03e      	beq.n	800f230 <HAL_TIM_ConfigClockSource+0x124>
 800f1b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1b6:	f200 8087 	bhi.w	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1be:	f000 8086 	beq.w	800f2ce <HAL_TIM_ConfigClockSource+0x1c2>
 800f1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1c6:	d87f      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1c8:	2b70      	cmp	r3, #112	; 0x70
 800f1ca:	d01a      	beq.n	800f202 <HAL_TIM_ConfigClockSource+0xf6>
 800f1cc:	2b70      	cmp	r3, #112	; 0x70
 800f1ce:	d87b      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1d0:	2b60      	cmp	r3, #96	; 0x60
 800f1d2:	d050      	beq.n	800f276 <HAL_TIM_ConfigClockSource+0x16a>
 800f1d4:	2b60      	cmp	r3, #96	; 0x60
 800f1d6:	d877      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1d8:	2b50      	cmp	r3, #80	; 0x50
 800f1da:	d03c      	beq.n	800f256 <HAL_TIM_ConfigClockSource+0x14a>
 800f1dc:	2b50      	cmp	r3, #80	; 0x50
 800f1de:	d873      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1e0:	2b40      	cmp	r3, #64	; 0x40
 800f1e2:	d058      	beq.n	800f296 <HAL_TIM_ConfigClockSource+0x18a>
 800f1e4:	2b40      	cmp	r3, #64	; 0x40
 800f1e6:	d86f      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1e8:	2b30      	cmp	r3, #48	; 0x30
 800f1ea:	d064      	beq.n	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1ec:	2b30      	cmp	r3, #48	; 0x30
 800f1ee:	d86b      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1f0:	2b20      	cmp	r3, #32
 800f1f2:	d060      	beq.n	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1f4:	2b20      	cmp	r3, #32
 800f1f6:	d867      	bhi.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d05c      	beq.n	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1fc:	2b10      	cmp	r3, #16
 800f1fe:	d05a      	beq.n	800f2b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f200:	e062      	b.n	800f2c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6818      	ldr	r0, [r3, #0]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6899      	ldr	r1, [r3, #8]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	f000 fc8b 	bl	800fb2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	609a      	str	r2, [r3, #8]
      break;
 800f22e:	e04f      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6818      	ldr	r0, [r3, #0]
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	6899      	ldr	r1, [r3, #8]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	685a      	ldr	r2, [r3, #4]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	f000 fc74 	bl	800fb2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	689a      	ldr	r2, [r3, #8]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f252:	609a      	str	r2, [r3, #8]
      break;
 800f254:	e03c      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6818      	ldr	r0, [r3, #0]
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	6859      	ldr	r1, [r3, #4]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	461a      	mov	r2, r3
 800f264:	f000 fbe4 	bl	800fa30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2150      	movs	r1, #80	; 0x50
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 fc3e 	bl	800faf0 <TIM_ITRx_SetConfig>
      break;
 800f274:	e02c      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6818      	ldr	r0, [r3, #0]
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	6859      	ldr	r1, [r3, #4]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	461a      	mov	r2, r3
 800f284:	f000 fc03 	bl	800fa8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2160      	movs	r1, #96	; 0x60
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 fc2e 	bl	800faf0 <TIM_ITRx_SetConfig>
      break;
 800f294:	e01c      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6818      	ldr	r0, [r3, #0]
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	6859      	ldr	r1, [r3, #4]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	f000 fbc4 	bl	800fa30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2140      	movs	r1, #64	; 0x40
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 fc1e 	bl	800faf0 <TIM_ITRx_SetConfig>
      break;
 800f2b4:	e00c      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	f000 fc15 	bl	800faf0 <TIM_ITRx_SetConfig>
      break;
 800f2c6:	e003      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f2cc:	e000      	b.n	800f2d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f2ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	ffceff88 	.word	0xffceff88
 800f2f0:	00100040 	.word	0x00100040
 800f2f4:	00100030 	.word	0x00100030
 800f2f8:	00100020 	.word	0x00100020

0800f2fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a46      	ldr	r2, [pc, #280]	; (800f464 <TIM_Base_SetConfig+0x12c>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d013      	beq.n	800f378 <TIM_Base_SetConfig+0x40>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f356:	d00f      	beq.n	800f378 <TIM_Base_SetConfig+0x40>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4a43      	ldr	r2, [pc, #268]	; (800f468 <TIM_Base_SetConfig+0x130>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d00b      	beq.n	800f378 <TIM_Base_SetConfig+0x40>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4a42      	ldr	r2, [pc, #264]	; (800f46c <TIM_Base_SetConfig+0x134>)
 800f364:	4293      	cmp	r3, r2
 800f366:	d007      	beq.n	800f378 <TIM_Base_SetConfig+0x40>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	4a41      	ldr	r2, [pc, #260]	; (800f470 <TIM_Base_SetConfig+0x138>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d003      	beq.n	800f378 <TIM_Base_SetConfig+0x40>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4a40      	ldr	r2, [pc, #256]	; (800f474 <TIM_Base_SetConfig+0x13c>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d108      	bne.n	800f38a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f37e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	4313      	orrs	r3, r2
 800f388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a35      	ldr	r2, [pc, #212]	; (800f464 <TIM_Base_SetConfig+0x12c>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d01f      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f398:	d01b      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a32      	ldr	r2, [pc, #200]	; (800f468 <TIM_Base_SetConfig+0x130>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d017      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a31      	ldr	r2, [pc, #196]	; (800f46c <TIM_Base_SetConfig+0x134>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d013      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4a30      	ldr	r2, [pc, #192]	; (800f470 <TIM_Base_SetConfig+0x138>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d00f      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4a2f      	ldr	r2, [pc, #188]	; (800f474 <TIM_Base_SetConfig+0x13c>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d00b      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4a2e      	ldr	r2, [pc, #184]	; (800f478 <TIM_Base_SetConfig+0x140>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d007      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4a2d      	ldr	r2, [pc, #180]	; (800f47c <TIM_Base_SetConfig+0x144>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d003      	beq.n	800f3d2 <TIM_Base_SetConfig+0x9a>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a2c      	ldr	r2, [pc, #176]	; (800f480 <TIM_Base_SetConfig+0x148>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d108      	bne.n	800f3e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	695b      	ldr	r3, [r3, #20]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	689a      	ldr	r2, [r3, #8]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a16      	ldr	r2, [pc, #88]	; (800f464 <TIM_Base_SetConfig+0x12c>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d00f      	beq.n	800f430 <TIM_Base_SetConfig+0xf8>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a18      	ldr	r2, [pc, #96]	; (800f474 <TIM_Base_SetConfig+0x13c>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d00b      	beq.n	800f430 <TIM_Base_SetConfig+0xf8>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a17      	ldr	r2, [pc, #92]	; (800f478 <TIM_Base_SetConfig+0x140>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d007      	beq.n	800f430 <TIM_Base_SetConfig+0xf8>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a16      	ldr	r2, [pc, #88]	; (800f47c <TIM_Base_SetConfig+0x144>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d003      	beq.n	800f430 <TIM_Base_SetConfig+0xf8>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a15      	ldr	r2, [pc, #84]	; (800f480 <TIM_Base_SetConfig+0x148>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d103      	bne.n	800f438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	691a      	ldr	r2, [r3, #16]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	2b01      	cmp	r3, #1
 800f448:	d105      	bne.n	800f456 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	f023 0201 	bic.w	r2, r3, #1
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	611a      	str	r2, [r3, #16]
  }
}
 800f456:	bf00      	nop
 800f458:	3714      	adds	r7, #20
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	40010000 	.word	0x40010000
 800f468:	40000400 	.word	0x40000400
 800f46c:	40000800 	.word	0x40000800
 800f470:	40000c00 	.word	0x40000c00
 800f474:	40010400 	.word	0x40010400
 800f478:	40014000 	.word	0x40014000
 800f47c:	40014400 	.word	0x40014400
 800f480:	40014800 	.word	0x40014800

0800f484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6a1b      	ldr	r3, [r3, #32]
 800f498:	f023 0201 	bic.w	r2, r3, #1
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4b37      	ldr	r3, [pc, #220]	; (800f58c <TIM_OC1_SetConfig+0x108>)
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	f023 0302 	bic.w	r3, r3, #2
 800f4cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a2d      	ldr	r2, [pc, #180]	; (800f590 <TIM_OC1_SetConfig+0x10c>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d00f      	beq.n	800f500 <TIM_OC1_SetConfig+0x7c>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a2c      	ldr	r2, [pc, #176]	; (800f594 <TIM_OC1_SetConfig+0x110>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d00b      	beq.n	800f500 <TIM_OC1_SetConfig+0x7c>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a2b      	ldr	r2, [pc, #172]	; (800f598 <TIM_OC1_SetConfig+0x114>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d007      	beq.n	800f500 <TIM_OC1_SetConfig+0x7c>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a2a      	ldr	r2, [pc, #168]	; (800f59c <TIM_OC1_SetConfig+0x118>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d003      	beq.n	800f500 <TIM_OC1_SetConfig+0x7c>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a29      	ldr	r2, [pc, #164]	; (800f5a0 <TIM_OC1_SetConfig+0x11c>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d10c      	bne.n	800f51a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	f023 0308 	bic.w	r3, r3, #8
 800f506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	4313      	orrs	r3, r2
 800f510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	f023 0304 	bic.w	r3, r3, #4
 800f518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a1c      	ldr	r2, [pc, #112]	; (800f590 <TIM_OC1_SetConfig+0x10c>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d00f      	beq.n	800f542 <TIM_OC1_SetConfig+0xbe>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a1b      	ldr	r2, [pc, #108]	; (800f594 <TIM_OC1_SetConfig+0x110>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d00b      	beq.n	800f542 <TIM_OC1_SetConfig+0xbe>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a1a      	ldr	r2, [pc, #104]	; (800f598 <TIM_OC1_SetConfig+0x114>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d007      	beq.n	800f542 <TIM_OC1_SetConfig+0xbe>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a19      	ldr	r2, [pc, #100]	; (800f59c <TIM_OC1_SetConfig+0x118>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d003      	beq.n	800f542 <TIM_OC1_SetConfig+0xbe>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a18      	ldr	r2, [pc, #96]	; (800f5a0 <TIM_OC1_SetConfig+0x11c>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d111      	bne.n	800f566 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	695b      	ldr	r3, [r3, #20]
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	4313      	orrs	r3, r2
 800f55a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	699b      	ldr	r3, [r3, #24]
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	4313      	orrs	r3, r2
 800f564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	693a      	ldr	r2, [r7, #16]
 800f56a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	685a      	ldr	r2, [r3, #4]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	697a      	ldr	r2, [r7, #20]
 800f57e:	621a      	str	r2, [r3, #32]
}
 800f580:	bf00      	nop
 800f582:	371c      	adds	r7, #28
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	fffeff8f 	.word	0xfffeff8f
 800f590:	40010000 	.word	0x40010000
 800f594:	40010400 	.word	0x40010400
 800f598:	40014000 	.word	0x40014000
 800f59c:	40014400 	.word	0x40014400
 800f5a0:	40014800 	.word	0x40014800

0800f5a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b087      	sub	sp, #28
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a1b      	ldr	r3, [r3, #32]
 800f5b8:	f023 0210 	bic.w	r2, r3, #16
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	4b34      	ldr	r3, [pc, #208]	; (800f6a0 <TIM_OC2_SetConfig+0xfc>)
 800f5d0:	4013      	ands	r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	021b      	lsls	r3, r3, #8
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	4313      	orrs	r3, r2
 800f5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f023 0320 	bic.w	r3, r3, #32
 800f5ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	011b      	lsls	r3, r3, #4
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a29      	ldr	r2, [pc, #164]	; (800f6a4 <TIM_OC2_SetConfig+0x100>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d003      	beq.n	800f60c <TIM_OC2_SetConfig+0x68>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a28      	ldr	r2, [pc, #160]	; (800f6a8 <TIM_OC2_SetConfig+0x104>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d10d      	bne.n	800f628 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f626:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a1e      	ldr	r2, [pc, #120]	; (800f6a4 <TIM_OC2_SetConfig+0x100>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d00f      	beq.n	800f650 <TIM_OC2_SetConfig+0xac>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a1d      	ldr	r2, [pc, #116]	; (800f6a8 <TIM_OC2_SetConfig+0x104>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d00b      	beq.n	800f650 <TIM_OC2_SetConfig+0xac>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a1c      	ldr	r2, [pc, #112]	; (800f6ac <TIM_OC2_SetConfig+0x108>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d007      	beq.n	800f650 <TIM_OC2_SetConfig+0xac>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a1b      	ldr	r2, [pc, #108]	; (800f6b0 <TIM_OC2_SetConfig+0x10c>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d003      	beq.n	800f650 <TIM_OC2_SetConfig+0xac>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a1a      	ldr	r2, [pc, #104]	; (800f6b4 <TIM_OC2_SetConfig+0x110>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d113      	bne.n	800f678 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f65e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	695b      	ldr	r3, [r3, #20]
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	4313      	orrs	r3, r2
 800f66a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	693a      	ldr	r2, [r7, #16]
 800f674:	4313      	orrs	r3, r2
 800f676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	693a      	ldr	r2, [r7, #16]
 800f67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	685a      	ldr	r2, [r3, #4]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	697a      	ldr	r2, [r7, #20]
 800f690:	621a      	str	r2, [r3, #32]
}
 800f692:	bf00      	nop
 800f694:	371c      	adds	r7, #28
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	feff8fff 	.word	0xfeff8fff
 800f6a4:	40010000 	.word	0x40010000
 800f6a8:	40010400 	.word	0x40010400
 800f6ac:	40014000 	.word	0x40014000
 800f6b0:	40014400 	.word	0x40014400
 800f6b4:	40014800 	.word	0x40014800

0800f6b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a1b      	ldr	r3, [r3, #32]
 800f6c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	69db      	ldr	r3, [r3, #28]
 800f6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4b33      	ldr	r3, [pc, #204]	; (800f7b0 <TIM_OC3_SetConfig+0xf8>)
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f023 0303 	bic.w	r3, r3, #3
 800f6ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	021b      	lsls	r3, r3, #8
 800f708:	697a      	ldr	r2, [r7, #20]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a28      	ldr	r2, [pc, #160]	; (800f7b4 <TIM_OC3_SetConfig+0xfc>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d003      	beq.n	800f71e <TIM_OC3_SetConfig+0x66>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a27      	ldr	r2, [pc, #156]	; (800f7b8 <TIM_OC3_SetConfig+0x100>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d10d      	bne.n	800f73a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	021b      	lsls	r3, r3, #8
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a1d      	ldr	r2, [pc, #116]	; (800f7b4 <TIM_OC3_SetConfig+0xfc>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d00f      	beq.n	800f762 <TIM_OC3_SetConfig+0xaa>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a1c      	ldr	r2, [pc, #112]	; (800f7b8 <TIM_OC3_SetConfig+0x100>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d00b      	beq.n	800f762 <TIM_OC3_SetConfig+0xaa>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a1b      	ldr	r2, [pc, #108]	; (800f7bc <TIM_OC3_SetConfig+0x104>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d007      	beq.n	800f762 <TIM_OC3_SetConfig+0xaa>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4a1a      	ldr	r2, [pc, #104]	; (800f7c0 <TIM_OC3_SetConfig+0x108>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d003      	beq.n	800f762 <TIM_OC3_SetConfig+0xaa>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4a19      	ldr	r2, [pc, #100]	; (800f7c4 <TIM_OC3_SetConfig+0x10c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d113      	bne.n	800f78a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	011b      	lsls	r3, r3, #4
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	699b      	ldr	r3, [r3, #24]
 800f782:	011b      	lsls	r3, r3, #4
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	4313      	orrs	r3, r2
 800f788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	685a      	ldr	r2, [r3, #4]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	697a      	ldr	r2, [r7, #20]
 800f7a2:	621a      	str	r2, [r3, #32]
}
 800f7a4:	bf00      	nop
 800f7a6:	371c      	adds	r7, #28
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	fffeff8f 	.word	0xfffeff8f
 800f7b4:	40010000 	.word	0x40010000
 800f7b8:	40010400 	.word	0x40010400
 800f7bc:	40014000 	.word	0x40014000
 800f7c0:	40014400 	.word	0x40014400
 800f7c4:	40014800 	.word	0x40014800

0800f7c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b087      	sub	sp, #28
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a1b      	ldr	r3, [r3, #32]
 800f7d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6a1b      	ldr	r3, [r3, #32]
 800f7dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	69db      	ldr	r3, [r3, #28]
 800f7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4b24      	ldr	r3, [pc, #144]	; (800f884 <TIM_OC4_SetConfig+0xbc>)
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	021b      	lsls	r3, r3, #8
 800f806:	68fa      	ldr	r2, [r7, #12]
 800f808:	4313      	orrs	r3, r2
 800f80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	031b      	lsls	r3, r3, #12
 800f81a:	693a      	ldr	r2, [r7, #16]
 800f81c:	4313      	orrs	r3, r2
 800f81e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a19      	ldr	r2, [pc, #100]	; (800f888 <TIM_OC4_SetConfig+0xc0>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d00f      	beq.n	800f848 <TIM_OC4_SetConfig+0x80>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a18      	ldr	r2, [pc, #96]	; (800f88c <TIM_OC4_SetConfig+0xc4>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d00b      	beq.n	800f848 <TIM_OC4_SetConfig+0x80>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a17      	ldr	r2, [pc, #92]	; (800f890 <TIM_OC4_SetConfig+0xc8>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d007      	beq.n	800f848 <TIM_OC4_SetConfig+0x80>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a16      	ldr	r2, [pc, #88]	; (800f894 <TIM_OC4_SetConfig+0xcc>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d003      	beq.n	800f848 <TIM_OC4_SetConfig+0x80>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a15      	ldr	r2, [pc, #84]	; (800f898 <TIM_OC4_SetConfig+0xd0>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d109      	bne.n	800f85c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f84e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	019b      	lsls	r3, r3, #6
 800f856:	697a      	ldr	r2, [r7, #20]
 800f858:	4313      	orrs	r3, r2
 800f85a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	697a      	ldr	r2, [r7, #20]
 800f860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	685a      	ldr	r2, [r3, #4]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	693a      	ldr	r2, [r7, #16]
 800f874:	621a      	str	r2, [r3, #32]
}
 800f876:	bf00      	nop
 800f878:	371c      	adds	r7, #28
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	feff8fff 	.word	0xfeff8fff
 800f888:	40010000 	.word	0x40010000
 800f88c:	40010400 	.word	0x40010400
 800f890:	40014000 	.word	0x40014000
 800f894:	40014400 	.word	0x40014400
 800f898:	40014800 	.word	0x40014800

0800f89c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b087      	sub	sp, #28
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6a1b      	ldr	r3, [r3, #32]
 800f8b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f8c4:	68fa      	ldr	r2, [r7, #12]
 800f8c6:	4b21      	ldr	r3, [pc, #132]	; (800f94c <TIM_OC5_SetConfig+0xb0>)
 800f8c8:	4013      	ands	r3, r2
 800f8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f8dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	041b      	lsls	r3, r3, #16
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4a18      	ldr	r2, [pc, #96]	; (800f950 <TIM_OC5_SetConfig+0xb4>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d00f      	beq.n	800f912 <TIM_OC5_SetConfig+0x76>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4a17      	ldr	r2, [pc, #92]	; (800f954 <TIM_OC5_SetConfig+0xb8>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d00b      	beq.n	800f912 <TIM_OC5_SetConfig+0x76>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4a16      	ldr	r2, [pc, #88]	; (800f958 <TIM_OC5_SetConfig+0xbc>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d007      	beq.n	800f912 <TIM_OC5_SetConfig+0x76>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a15      	ldr	r2, [pc, #84]	; (800f95c <TIM_OC5_SetConfig+0xc0>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d003      	beq.n	800f912 <TIM_OC5_SetConfig+0x76>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4a14      	ldr	r2, [pc, #80]	; (800f960 <TIM_OC5_SetConfig+0xc4>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d109      	bne.n	800f926 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	695b      	ldr	r3, [r3, #20]
 800f91e:	021b      	lsls	r3, r3, #8
 800f920:	697a      	ldr	r2, [r7, #20]
 800f922:	4313      	orrs	r3, r2
 800f924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	697a      	ldr	r2, [r7, #20]
 800f92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	685a      	ldr	r2, [r3, #4]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	693a      	ldr	r2, [r7, #16]
 800f93e:	621a      	str	r2, [r3, #32]
}
 800f940:	bf00      	nop
 800f942:	371c      	adds	r7, #28
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	fffeff8f 	.word	0xfffeff8f
 800f950:	40010000 	.word	0x40010000
 800f954:	40010400 	.word	0x40010400
 800f958:	40014000 	.word	0x40014000
 800f95c:	40014400 	.word	0x40014400
 800f960:	40014800 	.word	0x40014800

0800f964 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f964:	b480      	push	{r7}
 800f966:	b087      	sub	sp, #28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a1b      	ldr	r3, [r3, #32]
 800f978:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	4b22      	ldr	r3, [pc, #136]	; (800fa18 <TIM_OC6_SetConfig+0xb4>)
 800f990:	4013      	ands	r3, r2
 800f992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	021b      	lsls	r3, r3, #8
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f9a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	051b      	lsls	r3, r3, #20
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4a19      	ldr	r2, [pc, #100]	; (800fa1c <TIM_OC6_SetConfig+0xb8>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d00f      	beq.n	800f9dc <TIM_OC6_SetConfig+0x78>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a18      	ldr	r2, [pc, #96]	; (800fa20 <TIM_OC6_SetConfig+0xbc>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d00b      	beq.n	800f9dc <TIM_OC6_SetConfig+0x78>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a17      	ldr	r2, [pc, #92]	; (800fa24 <TIM_OC6_SetConfig+0xc0>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d007      	beq.n	800f9dc <TIM_OC6_SetConfig+0x78>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a16      	ldr	r2, [pc, #88]	; (800fa28 <TIM_OC6_SetConfig+0xc4>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d003      	beq.n	800f9dc <TIM_OC6_SetConfig+0x78>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a15      	ldr	r2, [pc, #84]	; (800fa2c <TIM_OC6_SetConfig+0xc8>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d109      	bne.n	800f9f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	695b      	ldr	r3, [r3, #20]
 800f9e8:	029b      	lsls	r3, r3, #10
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	685a      	ldr	r2, [r3, #4]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	621a      	str	r2, [r3, #32]
}
 800fa0a:	bf00      	nop
 800fa0c:	371c      	adds	r7, #28
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	feff8fff 	.word	0xfeff8fff
 800fa1c:	40010000 	.word	0x40010000
 800fa20:	40010400 	.word	0x40010400
 800fa24:	40014000 	.word	0x40014000
 800fa28:	40014400 	.word	0x40014400
 800fa2c:	40014800 	.word	0x40014800

0800fa30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b087      	sub	sp, #28
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6a1b      	ldr	r3, [r3, #32]
 800fa40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6a1b      	ldr	r3, [r3, #32]
 800fa46:	f023 0201 	bic.w	r2, r3, #1
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	011b      	lsls	r3, r3, #4
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	f023 030a 	bic.w	r3, r3, #10
 800fa6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa6e:	697a      	ldr	r2, [r7, #20]
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	4313      	orrs	r3, r2
 800fa74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	693a      	ldr	r2, [r7, #16]
 800fa7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	621a      	str	r2, [r3, #32]
}
 800fa82:	bf00      	nop
 800fa84:	371c      	adds	r7, #28
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr

0800fa8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa8e:	b480      	push	{r7}
 800fa90:	b087      	sub	sp, #28
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	60f8      	str	r0, [r7, #12]
 800fa96:	60b9      	str	r1, [r7, #8]
 800fa98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	f023 0210 	bic.w	r2, r3, #16
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	699b      	ldr	r3, [r3, #24]
 800fab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	031b      	lsls	r3, r3, #12
 800fabe:	693a      	ldr	r2, [r7, #16]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800faca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	011b      	lsls	r3, r3, #4
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	697a      	ldr	r2, [r7, #20]
 800fae0:	621a      	str	r2, [r3, #32]
}
 800fae2:	bf00      	nop
 800fae4:	371c      	adds	r7, #28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
	...

0800faf0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	4b09      	ldr	r3, [pc, #36]	; (800fb28 <TIM_ITRx_SetConfig+0x38>)
 800fb04:	4013      	ands	r3, r2
 800fb06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb08:	683a      	ldr	r2, [r7, #0]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	f043 0307 	orr.w	r3, r3, #7
 800fb12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	609a      	str	r2, [r3, #8]
}
 800fb1a:	bf00      	nop
 800fb1c:	3714      	adds	r7, #20
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	ffcfff8f 	.word	0xffcfff8f

0800fb2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b087      	sub	sp, #28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	689b      	ldr	r3, [r3, #8]
 800fb3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	021a      	lsls	r2, r3, #8
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	431a      	orrs	r2, r3
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	4313      	orrs	r3, r2
 800fb54:	697a      	ldr	r2, [r7, #20]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	609a      	str	r2, [r3, #8]
}
 800fb60:	bf00      	nop
 800fb62:	371c      	adds	r7, #28
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b087      	sub	sp, #28
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	f003 031f 	and.w	r3, r3, #31
 800fb7e:	2201      	movs	r2, #1
 800fb80:	fa02 f303 	lsl.w	r3, r2, r3
 800fb84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6a1a      	ldr	r2, [r3, #32]
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	43db      	mvns	r3, r3
 800fb8e:	401a      	ands	r2, r3
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6a1a      	ldr	r2, [r3, #32]
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	f003 031f 	and.w	r3, r3, #31
 800fb9e:	6879      	ldr	r1, [r7, #4]
 800fba0:	fa01 f303 	lsl.w	r3, r1, r3
 800fba4:	431a      	orrs	r2, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	621a      	str	r2, [r3, #32]
}
 800fbaa:	bf00      	nop
 800fbac:	371c      	adds	r7, #28
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
	...

0800fbb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d101      	bne.n	800fbd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbcc:	2302      	movs	r3, #2
 800fbce:	e06d      	b.n	800fcac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2202      	movs	r2, #2
 800fbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a30      	ldr	r2, [pc, #192]	; (800fcb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d004      	beq.n	800fc04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a2f      	ldr	r2, [pc, #188]	; (800fcbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d108      	bne.n	800fc16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	4313      	orrs	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a20      	ldr	r2, [pc, #128]	; (800fcb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d022      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc42:	d01d      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a1d      	ldr	r2, [pc, #116]	; (800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d018      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	4a1c      	ldr	r2, [pc, #112]	; (800fcc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d013      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4a1a      	ldr	r2, [pc, #104]	; (800fcc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d00e      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a15      	ldr	r2, [pc, #84]	; (800fcbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d009      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4a16      	ldr	r2, [pc, #88]	; (800fccc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d004      	beq.n	800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a15      	ldr	r2, [pc, #84]	; (800fcd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d10c      	bne.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3714      	adds	r7, #20
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr
 800fcb8:	40010000 	.word	0x40010000
 800fcbc:	40010400 	.word	0x40010400
 800fcc0:	40000400 	.word	0x40000400
 800fcc4:	40000800 	.word	0x40000800
 800fcc8:	40000c00 	.word	0x40000c00
 800fccc:	40001800 	.word	0x40001800
 800fcd0:	40014000 	.word	0x40014000

0800fcd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d101      	bne.n	800fcf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fcec:	2302      	movs	r3, #2
 800fcee:	e065      	b.n	800fdbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	699b      	ldr	r3, [r3, #24]
 800fd64:	041b      	lsls	r3, r3, #16
 800fd66:	4313      	orrs	r3, r2
 800fd68:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a16      	ldr	r2, [pc, #88]	; (800fdc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d004      	beq.n	800fd7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a14      	ldr	r2, [pc, #80]	; (800fdcc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d115      	bne.n	800fdaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd88:	051b      	lsls	r3, r3, #20
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	69db      	ldr	r3, [r3, #28]
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3714      	adds	r7, #20
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr
 800fdc8:	40010000 	.word	0x40010000
 800fdcc:	40010400 	.word	0x40010400

0800fdd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fdec:	bf00      	nop
 800fdee:	370c      	adds	r7, #12
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d101      	bne.n	800fe1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e042      	b.n	800fea4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d106      	bne.n	800fe36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7f3 fbf7 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2224      	movs	r2, #36	; 0x24
 800fe3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f022 0201 	bic.w	r2, r2, #1
 800fe4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d002      	beq.n	800fe5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f001 fc42 	bl	80116e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fed7 	bl	8010c10 <UART_SetConfig>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d101      	bne.n	800fe6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e01b      	b.n	800fea4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	689a      	ldr	r2, [r3, #8]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f042 0201 	orr.w	r2, r2, #1
 800fe9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f001 fcc1 	bl	8011824 <UART_CheckIdleState>
 800fea2:	4603      	mov	r3, r0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b08a      	sub	sp, #40	; 0x28
 800feb0:	af02      	add	r7, sp, #8
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	603b      	str	r3, [r7, #0]
 800feb8:	4613      	mov	r3, r2
 800feba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fec2:	2b20      	cmp	r3, #32
 800fec4:	d17b      	bne.n	800ffbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <HAL_UART_Transmit+0x26>
 800fecc:	88fb      	ldrh	r3, [r7, #6]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d101      	bne.n	800fed6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	e074      	b.n	800ffc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2221      	movs	r2, #33	; 0x21
 800fee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fee6:	f7f3 ff1b 	bl	8003d20 <HAL_GetTick>
 800feea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	88fa      	ldrh	r2, [r7, #6]
 800fef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	88fa      	ldrh	r2, [r7, #6]
 800fef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff04:	d108      	bne.n	800ff18 <HAL_UART_Transmit+0x6c>
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d104      	bne.n	800ff18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	61bb      	str	r3, [r7, #24]
 800ff16:	e003      	b.n	800ff20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ff20:	e030      	b.n	800ff84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	2180      	movs	r1, #128	; 0x80
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f001 fd23 	bl	8011978 <UART_WaitOnFlagUntilTimeout>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d005      	beq.n	800ff44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2220      	movs	r2, #32
 800ff3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ff40:	2303      	movs	r3, #3
 800ff42:	e03d      	b.n	800ffc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d10b      	bne.n	800ff62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	3302      	adds	r3, #2
 800ff5e:	61bb      	str	r3, [r7, #24]
 800ff60:	e007      	b.n	800ff72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	781a      	ldrb	r2, [r3, #0]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1c8      	bne.n	800ff22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	2200      	movs	r2, #0
 800ff98:	2140      	movs	r1, #64	; 0x40
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f001 fcec 	bl	8011978 <UART_WaitOnFlagUntilTimeout>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d005      	beq.n	800ffb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2220      	movs	r2, #32
 800ffaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ffae:	2303      	movs	r3, #3
 800ffb0:	e006      	b.n	800ffc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2220      	movs	r2, #32
 800ffb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e000      	b.n	800ffc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ffbe:	2302      	movs	r3, #2
  }
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b08a      	sub	sp, #40	; 0x28
 800ffcc:	af02      	add	r7, sp, #8
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	603b      	str	r3, [r7, #0]
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffde:	2b20      	cmp	r3, #32
 800ffe0:	f040 80b5 	bne.w	801014e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d002      	beq.n	800fff0 <HAL_UART_Receive+0x28>
 800ffea:	88fb      	ldrh	r3, [r7, #6]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d101      	bne.n	800fff4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fff0:	2301      	movs	r3, #1
 800fff2:	e0ad      	b.n	8010150 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2222      	movs	r2, #34	; 0x22
 8010000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2200      	movs	r2, #0
 8010008:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801000a:	f7f3 fe89 	bl	8003d20 <HAL_GetTick>
 801000e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	88fa      	ldrh	r2, [r7, #6]
 8010014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	88fa      	ldrh	r2, [r7, #6]
 801001c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010028:	d10e      	bne.n	8010048 <HAL_UART_Receive+0x80>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d105      	bne.n	801003e <HAL_UART_Receive+0x76>
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010038:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801003c:	e02d      	b.n	801009a <HAL_UART_Receive+0xd2>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	22ff      	movs	r2, #255	; 0xff
 8010042:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010046:	e028      	b.n	801009a <HAL_UART_Receive+0xd2>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10d      	bne.n	801006c <HAL_UART_Receive+0xa4>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d104      	bne.n	8010062 <HAL_UART_Receive+0x9a>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	22ff      	movs	r2, #255	; 0xff
 801005c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010060:	e01b      	b.n	801009a <HAL_UART_Receive+0xd2>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	227f      	movs	r2, #127	; 0x7f
 8010066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801006a:	e016      	b.n	801009a <HAL_UART_Receive+0xd2>
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010074:	d10d      	bne.n	8010092 <HAL_UART_Receive+0xca>
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d104      	bne.n	8010088 <HAL_UART_Receive+0xc0>
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	227f      	movs	r2, #127	; 0x7f
 8010082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010086:	e008      	b.n	801009a <HAL_UART_Receive+0xd2>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	223f      	movs	r2, #63	; 0x3f
 801008c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010090:	e003      	b.n	801009a <HAL_UART_Receive+0xd2>
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2200      	movs	r2, #0
 8010096:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100aa:	d108      	bne.n	80100be <HAL_UART_Receive+0xf6>
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d104      	bne.n	80100be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80100b4:	2300      	movs	r3, #0
 80100b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	61bb      	str	r3, [r7, #24]
 80100bc:	e003      	b.n	80100c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80100c6:	e036      	b.n	8010136 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	2200      	movs	r2, #0
 80100d0:	2120      	movs	r1, #32
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f001 fc50 	bl	8011978 <UART_WaitOnFlagUntilTimeout>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d005      	beq.n	80100ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2220      	movs	r2, #32
 80100e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80100e6:	2303      	movs	r3, #3
 80100e8:	e032      	b.n	8010150 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d10c      	bne.n	801010a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	8a7b      	ldrh	r3, [r7, #18]
 80100fa:	4013      	ands	r3, r2
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	3302      	adds	r3, #2
 8010106:	61bb      	str	r3, [r7, #24]
 8010108:	e00c      	b.n	8010124 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	b2da      	uxtb	r2, r3
 8010112:	8a7b      	ldrh	r3, [r7, #18]
 8010114:	b2db      	uxtb	r3, r3
 8010116:	4013      	ands	r3, r2
 8010118:	b2da      	uxtb	r2, r3
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	3301      	adds	r3, #1
 8010122:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801012a:	b29b      	uxth	r3, r3
 801012c:	3b01      	subs	r3, #1
 801012e:	b29a      	uxth	r2, r3
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801013c:	b29b      	uxth	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1c2      	bne.n	80100c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2220      	movs	r2, #32
 8010146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	e000      	b.n	8010150 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801014e:	2302      	movs	r3, #2
  }
}
 8010150:	4618      	mov	r0, r3
 8010152:	3720      	adds	r7, #32
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b08a      	sub	sp, #40	; 0x28
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	4613      	mov	r3, r2
 8010164:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801016c:	2b20      	cmp	r3, #32
 801016e:	d137      	bne.n	80101e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d002      	beq.n	801017c <HAL_UART_Receive_IT+0x24>
 8010176:	88fb      	ldrh	r3, [r7, #6]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d101      	bne.n	8010180 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	e030      	b.n	80101e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2200      	movs	r2, #0
 8010184:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a18      	ldr	r2, [pc, #96]	; (80101ec <HAL_UART_Receive_IT+0x94>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d01f      	beq.n	80101d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801019a:	2b00      	cmp	r3, #0
 801019c:	d018      	beq.n	80101d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	e853 3f00 	ldrex	r3, [r3]
 80101aa:	613b      	str	r3, [r7, #16]
   return(result);
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80101b2:	627b      	str	r3, [r7, #36]	; 0x24
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	461a      	mov	r2, r3
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	623b      	str	r3, [r7, #32]
 80101be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c0:	69f9      	ldr	r1, [r7, #28]
 80101c2:	6a3a      	ldr	r2, [r7, #32]
 80101c4:	e841 2300 	strex	r3, r2, [r1]
 80101c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1e6      	bne.n	801019e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80101d0:	88fb      	ldrh	r3, [r7, #6]
 80101d2:	461a      	mov	r2, r3
 80101d4:	68b9      	ldr	r1, [r7, #8]
 80101d6:	68f8      	ldr	r0, [r7, #12]
 80101d8:	f001 fc3c 	bl	8011a54 <UART_Start_Receive_IT>
 80101dc:	4603      	mov	r3, r0
 80101de:	e000      	b.n	80101e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80101e0:	2302      	movs	r3, #2
  }
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3728      	adds	r7, #40	; 0x28
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	58000c00 	.word	0x58000c00

080101f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08a      	sub	sp, #40	; 0x28
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	4613      	mov	r3, r2
 80101fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010204:	2b20      	cmp	r3, #32
 8010206:	d167      	bne.n	80102d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d002      	beq.n	8010214 <HAL_UART_Transmit_DMA+0x24>
 801020e:	88fb      	ldrh	r3, [r7, #6]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d101      	bne.n	8010218 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	e060      	b.n	80102da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	88fa      	ldrh	r2, [r7, #6]
 8010222:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	88fa      	ldrh	r2, [r7, #6]
 801022a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2200      	movs	r2, #0
 8010232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2221      	movs	r2, #33	; 0x21
 801023a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010242:	2b00      	cmp	r3, #0
 8010244:	d028      	beq.n	8010298 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801024a:	4a26      	ldr	r2, [pc, #152]	; (80102e4 <HAL_UART_Transmit_DMA+0xf4>)
 801024c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010252:	4a25      	ldr	r2, [pc, #148]	; (80102e8 <HAL_UART_Transmit_DMA+0xf8>)
 8010254:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801025a:	4a24      	ldr	r2, [pc, #144]	; (80102ec <HAL_UART_Transmit_DMA+0xfc>)
 801025c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010262:	2200      	movs	r2, #0
 8010264:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801026e:	4619      	mov	r1, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	3328      	adds	r3, #40	; 0x28
 8010276:	461a      	mov	r2, r3
 8010278:	88fb      	ldrh	r3, [r7, #6]
 801027a:	f7f6 f9d5 	bl	8006628 <HAL_DMA_Start_IT>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d009      	beq.n	8010298 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2210      	movs	r2, #16
 8010288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2220      	movs	r2, #32
 8010290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010294:	2301      	movs	r3, #1
 8010296:	e020      	b.n	80102da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2240      	movs	r2, #64	; 0x40
 801029e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3308      	adds	r3, #8
 80102a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	e853 3f00 	ldrex	r3, [r3]
 80102ae:	613b      	str	r3, [r7, #16]
   return(result);
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b6:	627b      	str	r3, [r7, #36]	; 0x24
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	3308      	adds	r3, #8
 80102be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c0:	623a      	str	r2, [r7, #32]
 80102c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c4:	69f9      	ldr	r1, [r7, #28]
 80102c6:	6a3a      	ldr	r2, [r7, #32]
 80102c8:	e841 2300 	strex	r3, r2, [r1]
 80102cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d1e5      	bne.n	80102a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80102d4:	2300      	movs	r3, #0
 80102d6:	e000      	b.n	80102da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80102d8:	2302      	movs	r3, #2
  }
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3728      	adds	r7, #40	; 0x28
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	08011de9 	.word	0x08011de9
 80102e8:	08011e7f 	.word	0x08011e7f
 80102ec:	08011e9b 	.word	0x08011e9b

080102f0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b09a      	sub	sp, #104	; 0x68
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010300:	e853 3f00 	ldrex	r3, [r3]
 8010304:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801030c:	667b      	str	r3, [r7, #100]	; 0x64
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	461a      	mov	r2, r3
 8010314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010316:	657b      	str	r3, [r7, #84]	; 0x54
 8010318:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801031a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801031c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801031e:	e841 2300 	strex	r3, r2, [r1]
 8010322:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010326:	2b00      	cmp	r3, #0
 8010328:	d1e6      	bne.n	80102f8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	3308      	adds	r3, #8
 8010330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010334:	e853 3f00 	ldrex	r3, [r3]
 8010338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801033a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801033c:	4b46      	ldr	r3, [pc, #280]	; (8010458 <HAL_UART_AbortReceive+0x168>)
 801033e:	4013      	ands	r3, r2
 8010340:	663b      	str	r3, [r7, #96]	; 0x60
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3308      	adds	r3, #8
 8010348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801034a:	643a      	str	r2, [r7, #64]	; 0x40
 801034c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010352:	e841 2300 	strex	r3, r2, [r1]
 8010356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	2b00      	cmp	r3, #0
 801035c:	d1e5      	bne.n	801032a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010362:	2b01      	cmp	r3, #1
 8010364:	d118      	bne.n	8010398 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801036c:	6a3b      	ldr	r3, [r7, #32]
 801036e:	e853 3f00 	ldrex	r3, [r3]
 8010372:	61fb      	str	r3, [r7, #28]
   return(result);
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	f023 0310 	bic.w	r3, r3, #16
 801037a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	461a      	mov	r2, r3
 8010382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010386:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801038a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801038c:	e841 2300 	strex	r3, r2, [r1]
 8010390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010394:	2b00      	cmp	r3, #0
 8010396:	d1e6      	bne.n	8010366 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103a2:	2b40      	cmp	r3, #64	; 0x40
 80103a4:	d13b      	bne.n	801041e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3308      	adds	r3, #8
 80103ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	e853 3f00 	ldrex	r3, [r3]
 80103b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3308      	adds	r3, #8
 80103c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103c6:	61ba      	str	r2, [r7, #24]
 80103c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ca:	6979      	ldr	r1, [r7, #20]
 80103cc:	69ba      	ldr	r2, [r7, #24]
 80103ce:	e841 2300 	strex	r3, r2, [r1]
 80103d2:	613b      	str	r3, [r7, #16]
   return(result);
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1e5      	bne.n	80103a6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d01c      	beq.n	801041e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103ea:	2200      	movs	r2, #0
 80103ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7f6 fb81 	bl	8006afc <HAL_DMA_Abort>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d00e      	beq.n	801041e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010406:	4618      	mov	r0, r3
 8010408:	f7f8 f806 	bl	8008418 <HAL_DMA_GetError>
 801040c:	4603      	mov	r3, r0
 801040e:	2b20      	cmp	r3, #32
 8010410:	d105      	bne.n	801041e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2210      	movs	r2, #16
 8010416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801041a:	2303      	movs	r3, #3
 801041c:	e017      	b.n	801044e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2200      	movs	r2, #0
 8010422:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	220f      	movs	r2, #15
 801042c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	699a      	ldr	r2, [r3, #24]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f042 0208 	orr.w	r2, r2, #8
 801043c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2220      	movs	r2, #32
 8010442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2200      	movs	r2, #0
 801044a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801044c:	2300      	movs	r3, #0
}
 801044e:	4618      	mov	r0, r3
 8010450:	3768      	adds	r7, #104	; 0x68
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	effffffe 	.word	0xeffffffe

0801045c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b0ba      	sub	sp, #232	; 0xe8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	69db      	ldr	r3, [r3, #28]
 801046a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010486:	f640 030f 	movw	r3, #2063	; 0x80f
 801048a:	4013      	ands	r3, r2
 801048c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010494:	2b00      	cmp	r3, #0
 8010496:	d11b      	bne.n	80104d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801049c:	f003 0320 	and.w	r3, r3, #32
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d015      	beq.n	80104d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80104a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104a8:	f003 0320 	and.w	r3, r3, #32
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d105      	bne.n	80104bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80104b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d009      	beq.n	80104d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 8377 	beq.w	8010bb4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	4798      	blx	r3
      }
      return;
 80104ce:	e371      	b.n	8010bb4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80104d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 8123 	beq.w	8010720 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80104da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80104de:	4b8d      	ldr	r3, [pc, #564]	; (8010714 <HAL_UART_IRQHandler+0x2b8>)
 80104e0:	4013      	ands	r3, r2
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d106      	bne.n	80104f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80104e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80104ea:	4b8b      	ldr	r3, [pc, #556]	; (8010718 <HAL_UART_IRQHandler+0x2bc>)
 80104ec:	4013      	ands	r3, r2
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f000 8116 	beq.w	8010720 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80104f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104f8:	f003 0301 	and.w	r3, r3, #1
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d011      	beq.n	8010524 <HAL_UART_IRQHandler+0xc8>
 8010500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00b      	beq.n	8010524 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2201      	movs	r2, #1
 8010512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801051a:	f043 0201 	orr.w	r2, r3, #1
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010528:	f003 0302 	and.w	r3, r3, #2
 801052c:	2b00      	cmp	r3, #0
 801052e:	d011      	beq.n	8010554 <HAL_UART_IRQHandler+0xf8>
 8010530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010534:	f003 0301 	and.w	r3, r3, #1
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00b      	beq.n	8010554 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2202      	movs	r2, #2
 8010542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801054a:	f043 0204 	orr.w	r2, r3, #4
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010558:	f003 0304 	and.w	r3, r3, #4
 801055c:	2b00      	cmp	r3, #0
 801055e:	d011      	beq.n	8010584 <HAL_UART_IRQHandler+0x128>
 8010560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010564:	f003 0301 	and.w	r3, r3, #1
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00b      	beq.n	8010584 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2204      	movs	r2, #4
 8010572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801057a:	f043 0202 	orr.w	r2, r3, #2
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010588:	f003 0308 	and.w	r3, r3, #8
 801058c:	2b00      	cmp	r3, #0
 801058e:	d017      	beq.n	80105c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010594:	f003 0320 	and.w	r3, r3, #32
 8010598:	2b00      	cmp	r3, #0
 801059a:	d105      	bne.n	80105a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801059c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105a0:	4b5c      	ldr	r3, [pc, #368]	; (8010714 <HAL_UART_IRQHandler+0x2b8>)
 80105a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2208      	movs	r2, #8
 80105ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b6:	f043 0208 	orr.w	r2, r3, #8
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80105c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d012      	beq.n	80105f2 <HAL_UART_IRQHandler+0x196>
 80105cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00c      	beq.n	80105f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105e8:	f043 0220 	orr.w	r2, r3, #32
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f000 82dd 	beq.w	8010bb8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80105fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010602:	f003 0320 	and.w	r3, r3, #32
 8010606:	2b00      	cmp	r3, #0
 8010608:	d013      	beq.n	8010632 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801060a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801060e:	f003 0320 	and.w	r3, r3, #32
 8010612:	2b00      	cmp	r3, #0
 8010614:	d105      	bne.n	8010622 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010626:	2b00      	cmp	r3, #0
 8010628:	d003      	beq.n	8010632 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010646:	2b40      	cmp	r3, #64	; 0x40
 8010648:	d005      	beq.n	8010656 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801064a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801064e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010652:	2b00      	cmp	r3, #0
 8010654:	d054      	beq.n	8010700 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f001 fb60 	bl	8011d1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010666:	2b40      	cmp	r3, #64	; 0x40
 8010668:	d146      	bne.n	80106f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3308      	adds	r3, #8
 8010670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010678:	e853 3f00 	ldrex	r3, [r3]
 801067c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	3308      	adds	r3, #8
 8010692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801069a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80106a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80106a6:	e841 2300 	strex	r3, r2, [r1]
 80106aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80106ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1d9      	bne.n	801066a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d017      	beq.n	80106f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106c6:	4a15      	ldr	r2, [pc, #84]	; (801071c <HAL_UART_IRQHandler+0x2c0>)
 80106c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7f6 fd31 	bl	8007138 <HAL_DMA_Abort_IT>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d019      	beq.n	8010710 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80106ea:	4610      	mov	r0, r2
 80106ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106ee:	e00f      	b.n	8010710 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 fa77 	bl	8010be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106f6:	e00b      	b.n	8010710 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 fa73 	bl	8010be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106fe:	e007      	b.n	8010710 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 fa6f 	bl	8010be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801070e:	e253      	b.n	8010bb8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010710:	bf00      	nop
    return;
 8010712:	e251      	b.n	8010bb8 <HAL_UART_IRQHandler+0x75c>
 8010714:	10000001 	.word	0x10000001
 8010718:	04000120 	.word	0x04000120
 801071c:	08011f1b 	.word	0x08011f1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010724:	2b01      	cmp	r3, #1
 8010726:	f040 81e7 	bne.w	8010af8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801072a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801072e:	f003 0310 	and.w	r3, r3, #16
 8010732:	2b00      	cmp	r3, #0
 8010734:	f000 81e0 	beq.w	8010af8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073c:	f003 0310 	and.w	r3, r3, #16
 8010740:	2b00      	cmp	r3, #0
 8010742:	f000 81d9 	beq.w	8010af8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2210      	movs	r2, #16
 801074c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010758:	2b40      	cmp	r3, #64	; 0x40
 801075a:	f040 8151 	bne.w	8010a00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a96      	ldr	r2, [pc, #600]	; (80109c0 <HAL_UART_IRQHandler+0x564>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d068      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4a93      	ldr	r2, [pc, #588]	; (80109c4 <HAL_UART_IRQHandler+0x568>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d061      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4a91      	ldr	r2, [pc, #580]	; (80109c8 <HAL_UART_IRQHandler+0x56c>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d05a      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4a8e      	ldr	r2, [pc, #568]	; (80109cc <HAL_UART_IRQHandler+0x570>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d053      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a8c      	ldr	r2, [pc, #560]	; (80109d0 <HAL_UART_IRQHandler+0x574>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d04c      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a89      	ldr	r2, [pc, #548]	; (80109d4 <HAL_UART_IRQHandler+0x578>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d045      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a87      	ldr	r2, [pc, #540]	; (80109d8 <HAL_UART_IRQHandler+0x57c>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d03e      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a84      	ldr	r2, [pc, #528]	; (80109dc <HAL_UART_IRQHandler+0x580>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d037      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4a82      	ldr	r2, [pc, #520]	; (80109e0 <HAL_UART_IRQHandler+0x584>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d030      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4a7f      	ldr	r2, [pc, #508]	; (80109e4 <HAL_UART_IRQHandler+0x588>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d029      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a7d      	ldr	r2, [pc, #500]	; (80109e8 <HAL_UART_IRQHandler+0x58c>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d022      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a7a      	ldr	r2, [pc, #488]	; (80109ec <HAL_UART_IRQHandler+0x590>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d01b      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4a78      	ldr	r2, [pc, #480]	; (80109f0 <HAL_UART_IRQHandler+0x594>)
 8010810:	4293      	cmp	r3, r2
 8010812:	d014      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4a75      	ldr	r2, [pc, #468]	; (80109f4 <HAL_UART_IRQHandler+0x598>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d00d      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4a73      	ldr	r2, [pc, #460]	; (80109f8 <HAL_UART_IRQHandler+0x59c>)
 801082c:	4293      	cmp	r3, r2
 801082e:	d006      	beq.n	801083e <HAL_UART_IRQHandler+0x3e2>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4a70      	ldr	r2, [pc, #448]	; (80109fc <HAL_UART_IRQHandler+0x5a0>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d106      	bne.n	801084c <HAL_UART_IRQHandler+0x3f0>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	b29b      	uxth	r3, r3
 801084a:	e005      	b.n	8010858 <HAL_UART_IRQHandler+0x3fc>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	b29b      	uxth	r3, r3
 8010858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801085c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 81ab 	beq.w	8010bbc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801086c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010870:	429a      	cmp	r2, r3
 8010872:	f080 81a3 	bcs.w	8010bbc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801087c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010886:	69db      	ldr	r3, [r3, #28]
 8010888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801088c:	f000 8087 	beq.w	801099e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801089c:	e853 3f00 	ldrex	r3, [r3]
 80108a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80108a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	461a      	mov	r2, r3
 80108b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80108be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80108c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80108ca:	e841 2300 	strex	r3, r2, [r1]
 80108ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80108d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1da      	bne.n	8010890 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	3308      	adds	r3, #8
 80108e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108e4:	e853 3f00 	ldrex	r3, [r3]
 80108e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80108ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80108ec:	f023 0301 	bic.w	r3, r3, #1
 80108f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3308      	adds	r3, #8
 80108fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80108fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801090a:	e841 2300 	strex	r3, r2, [r1]
 801090e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010912:	2b00      	cmp	r3, #0
 8010914:	d1e1      	bne.n	80108da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	3308      	adds	r3, #8
 801091c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801091e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010920:	e853 3f00 	ldrex	r3, [r3]
 8010924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801092c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	3308      	adds	r3, #8
 8010936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801093a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801093c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010942:	e841 2300 	strex	r3, r2, [r1]
 8010946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1e3      	bne.n	8010916 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2220      	movs	r2, #32
 8010952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010964:	e853 3f00 	ldrex	r3, [r3]
 8010968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801096a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801096c:	f023 0310 	bic.w	r3, r3, #16
 8010970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	461a      	mov	r2, r3
 801097a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801097e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010980:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010986:	e841 2300 	strex	r3, r2, [r1]
 801098a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801098c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1e4      	bne.n	801095c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010998:	4618      	mov	r0, r3
 801099a:	f7f6 f8af 	bl	8006afc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2202      	movs	r2, #2
 80109a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	1ad3      	subs	r3, r2, r3
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f91d 	bl	8010bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80109be:	e0fd      	b.n	8010bbc <HAL_UART_IRQHandler+0x760>
 80109c0:	40020010 	.word	0x40020010
 80109c4:	40020028 	.word	0x40020028
 80109c8:	40020040 	.word	0x40020040
 80109cc:	40020058 	.word	0x40020058
 80109d0:	40020070 	.word	0x40020070
 80109d4:	40020088 	.word	0x40020088
 80109d8:	400200a0 	.word	0x400200a0
 80109dc:	400200b8 	.word	0x400200b8
 80109e0:	40020410 	.word	0x40020410
 80109e4:	40020428 	.word	0x40020428
 80109e8:	40020440 	.word	0x40020440
 80109ec:	40020458 	.word	0x40020458
 80109f0:	40020470 	.word	0x40020470
 80109f4:	40020488 	.word	0x40020488
 80109f8:	400204a0 	.word	0x400204a0
 80109fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f000 80cf 	beq.w	8010bc0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010a22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f000 80ca 	beq.w	8010bc0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a34:	e853 3f00 	ldrex	r3, [r3]
 8010a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	461a      	mov	r2, r3
 8010a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a56:	e841 2300 	strex	r3, r2, [r1]
 8010a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1e4      	bne.n	8010a2c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3308      	adds	r3, #8
 8010a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	e853 3f00 	ldrex	r3, [r3]
 8010a70:	623b      	str	r3, [r7, #32]
   return(result);
 8010a72:	6a3a      	ldr	r2, [r7, #32]
 8010a74:	4b55      	ldr	r3, [pc, #340]	; (8010bcc <HAL_UART_IRQHandler+0x770>)
 8010a76:	4013      	ands	r3, r2
 8010a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	3308      	adds	r3, #8
 8010a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010a86:	633a      	str	r2, [r7, #48]	; 0x30
 8010a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a8e:	e841 2300 	strex	r3, r2, [r1]
 8010a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1e3      	bne.n	8010a62 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2220      	movs	r2, #32
 8010a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	e853 3f00 	ldrex	r3, [r3]
 8010aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f023 0310 	bic.w	r3, r3, #16
 8010ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	461a      	mov	r2, r3
 8010acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ad0:	61fb      	str	r3, [r7, #28]
 8010ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad4:	69b9      	ldr	r1, [r7, #24]
 8010ad6:	69fa      	ldr	r2, [r7, #28]
 8010ad8:	e841 2300 	strex	r3, r2, [r1]
 8010adc:	617b      	str	r3, [r7, #20]
   return(result);
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1e4      	bne.n	8010aae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010aee:	4619      	mov	r1, r3
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 f881 	bl	8010bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010af6:	e063      	b.n	8010bc0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d00e      	beq.n	8010b22 <HAL_UART_IRQHandler+0x6c6>
 8010b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d008      	beq.n	8010b22 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f001 ff5a 	bl	80129d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010b20:	e051      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d014      	beq.n	8010b58 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d105      	bne.n	8010b46 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d008      	beq.n	8010b58 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d03a      	beq.n	8010bc4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	4798      	blx	r3
    }
    return;
 8010b56:	e035      	b.n	8010bc4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d009      	beq.n	8010b78 <HAL_UART_IRQHandler+0x71c>
 8010b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d003      	beq.n	8010b78 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f001 f9e8 	bl	8011f46 <UART_EndTransmit_IT>
    return;
 8010b76:	e026      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d009      	beq.n	8010b98 <HAL_UART_IRQHandler+0x73c>
 8010b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d003      	beq.n	8010b98 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 ff33 	bl	80129fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010b96:	e016      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d010      	beq.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
 8010ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	da0c      	bge.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f001 ff1b 	bl	80129e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010bb2:	e008      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010bb4:	bf00      	nop
 8010bb6:	e006      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010bb8:	bf00      	nop
 8010bba:	e004      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010bbc:	bf00      	nop
 8010bbe:	e002      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010bc0:	bf00      	nop
 8010bc2:	e000      	b.n	8010bc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010bc4:	bf00      	nop
  }
}
 8010bc6:	37e8      	adds	r7, #232	; 0xe8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	effffffe 	.word	0xeffffffe

08010bd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010bd8:	bf00      	nop
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010bec:	bf00      	nop
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	460b      	mov	r3, r1
 8010c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010c04:	bf00      	nop
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c14:	b092      	sub	sp, #72	; 0x48
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	689a      	ldr	r2, [r3, #8]
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	431a      	orrs	r2, r3
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	695b      	ldr	r3, [r3, #20]
 8010c2e:	431a      	orrs	r2, r3
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	4bbe      	ldr	r3, [pc, #760]	; (8010f38 <UART_SetConfig+0x328>)
 8010c40:	4013      	ands	r3, r2
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	6812      	ldr	r2, [r2, #0]
 8010c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c48:	430b      	orrs	r3, r1
 8010c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	68da      	ldr	r2, [r3, #12]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	430a      	orrs	r2, r1
 8010c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	699b      	ldr	r3, [r3, #24]
 8010c66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4ab3      	ldr	r2, [pc, #716]	; (8010f3c <UART_SetConfig+0x32c>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d004      	beq.n	8010c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	6a1b      	ldr	r3, [r3, #32]
 8010c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	689a      	ldr	r2, [r3, #8]
 8010c82:	4baf      	ldr	r3, [pc, #700]	; (8010f40 <UART_SetConfig+0x330>)
 8010c84:	4013      	ands	r3, r2
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c8c:	430b      	orrs	r3, r1
 8010c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c96:	f023 010f 	bic.w	r1, r3, #15
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	430a      	orrs	r2, r1
 8010ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	4aa6      	ldr	r2, [pc, #664]	; (8010f44 <UART_SetConfig+0x334>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d177      	bne.n	8010da0 <UART_SetConfig+0x190>
 8010cb0:	4ba5      	ldr	r3, [pc, #660]	; (8010f48 <UART_SetConfig+0x338>)
 8010cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cb8:	2b28      	cmp	r3, #40	; 0x28
 8010cba:	d86d      	bhi.n	8010d98 <UART_SetConfig+0x188>
 8010cbc:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <UART_SetConfig+0xb4>)
 8010cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc2:	bf00      	nop
 8010cc4:	08010d69 	.word	0x08010d69
 8010cc8:	08010d99 	.word	0x08010d99
 8010ccc:	08010d99 	.word	0x08010d99
 8010cd0:	08010d99 	.word	0x08010d99
 8010cd4:	08010d99 	.word	0x08010d99
 8010cd8:	08010d99 	.word	0x08010d99
 8010cdc:	08010d99 	.word	0x08010d99
 8010ce0:	08010d99 	.word	0x08010d99
 8010ce4:	08010d71 	.word	0x08010d71
 8010ce8:	08010d99 	.word	0x08010d99
 8010cec:	08010d99 	.word	0x08010d99
 8010cf0:	08010d99 	.word	0x08010d99
 8010cf4:	08010d99 	.word	0x08010d99
 8010cf8:	08010d99 	.word	0x08010d99
 8010cfc:	08010d99 	.word	0x08010d99
 8010d00:	08010d99 	.word	0x08010d99
 8010d04:	08010d79 	.word	0x08010d79
 8010d08:	08010d99 	.word	0x08010d99
 8010d0c:	08010d99 	.word	0x08010d99
 8010d10:	08010d99 	.word	0x08010d99
 8010d14:	08010d99 	.word	0x08010d99
 8010d18:	08010d99 	.word	0x08010d99
 8010d1c:	08010d99 	.word	0x08010d99
 8010d20:	08010d99 	.word	0x08010d99
 8010d24:	08010d81 	.word	0x08010d81
 8010d28:	08010d99 	.word	0x08010d99
 8010d2c:	08010d99 	.word	0x08010d99
 8010d30:	08010d99 	.word	0x08010d99
 8010d34:	08010d99 	.word	0x08010d99
 8010d38:	08010d99 	.word	0x08010d99
 8010d3c:	08010d99 	.word	0x08010d99
 8010d40:	08010d99 	.word	0x08010d99
 8010d44:	08010d89 	.word	0x08010d89
 8010d48:	08010d99 	.word	0x08010d99
 8010d4c:	08010d99 	.word	0x08010d99
 8010d50:	08010d99 	.word	0x08010d99
 8010d54:	08010d99 	.word	0x08010d99
 8010d58:	08010d99 	.word	0x08010d99
 8010d5c:	08010d99 	.word	0x08010d99
 8010d60:	08010d99 	.word	0x08010d99
 8010d64:	08010d91 	.word	0x08010d91
 8010d68:	2301      	movs	r3, #1
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e222      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010d70:	2304      	movs	r3, #4
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e21e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010d78:	2308      	movs	r3, #8
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e21a      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010d80:	2310      	movs	r3, #16
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e216      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010d88:	2320      	movs	r3, #32
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e212      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010d90:	2340      	movs	r3, #64	; 0x40
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e20e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010d98:	2380      	movs	r3, #128	; 0x80
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e20a      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4a69      	ldr	r2, [pc, #420]	; (8010f4c <UART_SetConfig+0x33c>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d130      	bne.n	8010e0c <UART_SetConfig+0x1fc>
 8010daa:	4b67      	ldr	r3, [pc, #412]	; (8010f48 <UART_SetConfig+0x338>)
 8010dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dae:	f003 0307 	and.w	r3, r3, #7
 8010db2:	2b05      	cmp	r3, #5
 8010db4:	d826      	bhi.n	8010e04 <UART_SetConfig+0x1f4>
 8010db6:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <UART_SetConfig+0x1ac>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010dd5 	.word	0x08010dd5
 8010dc0:	08010ddd 	.word	0x08010ddd
 8010dc4:	08010de5 	.word	0x08010de5
 8010dc8:	08010ded 	.word	0x08010ded
 8010dcc:	08010df5 	.word	0x08010df5
 8010dd0:	08010dfd 	.word	0x08010dfd
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e1ec      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010ddc:	2304      	movs	r3, #4
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e1e8      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010de4:	2308      	movs	r3, #8
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e1e4      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010dec:	2310      	movs	r3, #16
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e1e0      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010df4:	2320      	movs	r3, #32
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e1dc      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010dfc:	2340      	movs	r3, #64	; 0x40
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e1d8      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e04:	2380      	movs	r3, #128	; 0x80
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e1d4      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a4f      	ldr	r2, [pc, #316]	; (8010f50 <UART_SetConfig+0x340>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d130      	bne.n	8010e78 <UART_SetConfig+0x268>
 8010e16:	4b4c      	ldr	r3, [pc, #304]	; (8010f48 <UART_SetConfig+0x338>)
 8010e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e1a:	f003 0307 	and.w	r3, r3, #7
 8010e1e:	2b05      	cmp	r3, #5
 8010e20:	d826      	bhi.n	8010e70 <UART_SetConfig+0x260>
 8010e22:	a201      	add	r2, pc, #4	; (adr r2, 8010e28 <UART_SetConfig+0x218>)
 8010e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e28:	08010e41 	.word	0x08010e41
 8010e2c:	08010e49 	.word	0x08010e49
 8010e30:	08010e51 	.word	0x08010e51
 8010e34:	08010e59 	.word	0x08010e59
 8010e38:	08010e61 	.word	0x08010e61
 8010e3c:	08010e69 	.word	0x08010e69
 8010e40:	2300      	movs	r3, #0
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e1b6      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e48:	2304      	movs	r3, #4
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e1b2      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e50:	2308      	movs	r3, #8
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e1ae      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e58:	2310      	movs	r3, #16
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e1aa      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e60:	2320      	movs	r3, #32
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e1a6      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e68:	2340      	movs	r3, #64	; 0x40
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e1a2      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e70:	2380      	movs	r3, #128	; 0x80
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e19e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4a35      	ldr	r2, [pc, #212]	; (8010f54 <UART_SetConfig+0x344>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d130      	bne.n	8010ee4 <UART_SetConfig+0x2d4>
 8010e82:	4b31      	ldr	r3, [pc, #196]	; (8010f48 <UART_SetConfig+0x338>)
 8010e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e86:	f003 0307 	and.w	r3, r3, #7
 8010e8a:	2b05      	cmp	r3, #5
 8010e8c:	d826      	bhi.n	8010edc <UART_SetConfig+0x2cc>
 8010e8e:	a201      	add	r2, pc, #4	; (adr r2, 8010e94 <UART_SetConfig+0x284>)
 8010e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e94:	08010ead 	.word	0x08010ead
 8010e98:	08010eb5 	.word	0x08010eb5
 8010e9c:	08010ebd 	.word	0x08010ebd
 8010ea0:	08010ec5 	.word	0x08010ec5
 8010ea4:	08010ecd 	.word	0x08010ecd
 8010ea8:	08010ed5 	.word	0x08010ed5
 8010eac:	2300      	movs	r3, #0
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e180      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010eb4:	2304      	movs	r3, #4
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e17c      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010ebc:	2308      	movs	r3, #8
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e178      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e174      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010ecc:	2320      	movs	r3, #32
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e170      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010ed4:	2340      	movs	r3, #64	; 0x40
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e16c      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010edc:	2380      	movs	r3, #128	; 0x80
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e168      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a1b      	ldr	r2, [pc, #108]	; (8010f58 <UART_SetConfig+0x348>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d142      	bne.n	8010f74 <UART_SetConfig+0x364>
 8010eee:	4b16      	ldr	r3, [pc, #88]	; (8010f48 <UART_SetConfig+0x338>)
 8010ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ef2:	f003 0307 	and.w	r3, r3, #7
 8010ef6:	2b05      	cmp	r3, #5
 8010ef8:	d838      	bhi.n	8010f6c <UART_SetConfig+0x35c>
 8010efa:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <UART_SetConfig+0x2f0>)
 8010efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f00:	08010f19 	.word	0x08010f19
 8010f04:	08010f21 	.word	0x08010f21
 8010f08:	08010f29 	.word	0x08010f29
 8010f0c:	08010f31 	.word	0x08010f31
 8010f10:	08010f5d 	.word	0x08010f5d
 8010f14:	08010f65 	.word	0x08010f65
 8010f18:	2300      	movs	r3, #0
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e14a      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f20:	2304      	movs	r3, #4
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e146      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f28:	2308      	movs	r3, #8
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e142      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f30:	2310      	movs	r3, #16
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e13e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f38:	cfff69f3 	.word	0xcfff69f3
 8010f3c:	58000c00 	.word	0x58000c00
 8010f40:	11fff4ff 	.word	0x11fff4ff
 8010f44:	40011000 	.word	0x40011000
 8010f48:	58024400 	.word	0x58024400
 8010f4c:	40004400 	.word	0x40004400
 8010f50:	40004800 	.word	0x40004800
 8010f54:	40004c00 	.word	0x40004c00
 8010f58:	40005000 	.word	0x40005000
 8010f5c:	2320      	movs	r3, #32
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f62:	e128      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f64:	2340      	movs	r3, #64	; 0x40
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e124      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f6c:	2380      	movs	r3, #128	; 0x80
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e120      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4acb      	ldr	r2, [pc, #812]	; (80112a8 <UART_SetConfig+0x698>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d176      	bne.n	801106c <UART_SetConfig+0x45c>
 8010f7e:	4bcb      	ldr	r3, [pc, #812]	; (80112ac <UART_SetConfig+0x69c>)
 8010f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f86:	2b28      	cmp	r3, #40	; 0x28
 8010f88:	d86c      	bhi.n	8011064 <UART_SetConfig+0x454>
 8010f8a:	a201      	add	r2, pc, #4	; (adr r2, 8010f90 <UART_SetConfig+0x380>)
 8010f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f90:	08011035 	.word	0x08011035
 8010f94:	08011065 	.word	0x08011065
 8010f98:	08011065 	.word	0x08011065
 8010f9c:	08011065 	.word	0x08011065
 8010fa0:	08011065 	.word	0x08011065
 8010fa4:	08011065 	.word	0x08011065
 8010fa8:	08011065 	.word	0x08011065
 8010fac:	08011065 	.word	0x08011065
 8010fb0:	0801103d 	.word	0x0801103d
 8010fb4:	08011065 	.word	0x08011065
 8010fb8:	08011065 	.word	0x08011065
 8010fbc:	08011065 	.word	0x08011065
 8010fc0:	08011065 	.word	0x08011065
 8010fc4:	08011065 	.word	0x08011065
 8010fc8:	08011065 	.word	0x08011065
 8010fcc:	08011065 	.word	0x08011065
 8010fd0:	08011045 	.word	0x08011045
 8010fd4:	08011065 	.word	0x08011065
 8010fd8:	08011065 	.word	0x08011065
 8010fdc:	08011065 	.word	0x08011065
 8010fe0:	08011065 	.word	0x08011065
 8010fe4:	08011065 	.word	0x08011065
 8010fe8:	08011065 	.word	0x08011065
 8010fec:	08011065 	.word	0x08011065
 8010ff0:	0801104d 	.word	0x0801104d
 8010ff4:	08011065 	.word	0x08011065
 8010ff8:	08011065 	.word	0x08011065
 8010ffc:	08011065 	.word	0x08011065
 8011000:	08011065 	.word	0x08011065
 8011004:	08011065 	.word	0x08011065
 8011008:	08011065 	.word	0x08011065
 801100c:	08011065 	.word	0x08011065
 8011010:	08011055 	.word	0x08011055
 8011014:	08011065 	.word	0x08011065
 8011018:	08011065 	.word	0x08011065
 801101c:	08011065 	.word	0x08011065
 8011020:	08011065 	.word	0x08011065
 8011024:	08011065 	.word	0x08011065
 8011028:	08011065 	.word	0x08011065
 801102c:	08011065 	.word	0x08011065
 8011030:	0801105d 	.word	0x0801105d
 8011034:	2301      	movs	r3, #1
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e0bc      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801103c:	2304      	movs	r3, #4
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e0b8      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011044:	2308      	movs	r3, #8
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e0b4      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801104c:	2310      	movs	r3, #16
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e0b0      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011054:	2320      	movs	r3, #32
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e0ac      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801105c:	2340      	movs	r3, #64	; 0x40
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e0a8      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e0a4      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a8f      	ldr	r2, [pc, #572]	; (80112b0 <UART_SetConfig+0x6a0>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d130      	bne.n	80110d8 <UART_SetConfig+0x4c8>
 8011076:	4b8d      	ldr	r3, [pc, #564]	; (80112ac <UART_SetConfig+0x69c>)
 8011078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107a:	f003 0307 	and.w	r3, r3, #7
 801107e:	2b05      	cmp	r3, #5
 8011080:	d826      	bhi.n	80110d0 <UART_SetConfig+0x4c0>
 8011082:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <UART_SetConfig+0x478>)
 8011084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011088:	080110a1 	.word	0x080110a1
 801108c:	080110a9 	.word	0x080110a9
 8011090:	080110b1 	.word	0x080110b1
 8011094:	080110b9 	.word	0x080110b9
 8011098:	080110c1 	.word	0x080110c1
 801109c:	080110c9 	.word	0x080110c9
 80110a0:	2300      	movs	r3, #0
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e086      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110a8:	2304      	movs	r3, #4
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e082      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110b0:	2308      	movs	r3, #8
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e07e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110b8:	2310      	movs	r3, #16
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e07a      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110c0:	2320      	movs	r3, #32
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e076      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110c8:	2340      	movs	r3, #64	; 0x40
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e072      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110d0:	2380      	movs	r3, #128	; 0x80
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e06e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a75      	ldr	r2, [pc, #468]	; (80112b4 <UART_SetConfig+0x6a4>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d130      	bne.n	8011144 <UART_SetConfig+0x534>
 80110e2:	4b72      	ldr	r3, [pc, #456]	; (80112ac <UART_SetConfig+0x69c>)
 80110e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e6:	f003 0307 	and.w	r3, r3, #7
 80110ea:	2b05      	cmp	r3, #5
 80110ec:	d826      	bhi.n	801113c <UART_SetConfig+0x52c>
 80110ee:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <UART_SetConfig+0x4e4>)
 80110f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f4:	0801110d 	.word	0x0801110d
 80110f8:	08011115 	.word	0x08011115
 80110fc:	0801111d 	.word	0x0801111d
 8011100:	08011125 	.word	0x08011125
 8011104:	0801112d 	.word	0x0801112d
 8011108:	08011135 	.word	0x08011135
 801110c:	2300      	movs	r3, #0
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e050      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011114:	2304      	movs	r3, #4
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e04c      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801111c:	2308      	movs	r3, #8
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e048      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011124:	2310      	movs	r3, #16
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e044      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801112c:	2320      	movs	r3, #32
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e040      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011134:	2340      	movs	r3, #64	; 0x40
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e03c      	b.n	80111b6 <UART_SetConfig+0x5a6>
 801113c:	2380      	movs	r3, #128	; 0x80
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e038      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a5b      	ldr	r2, [pc, #364]	; (80112b8 <UART_SetConfig+0x6a8>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d130      	bne.n	80111b0 <UART_SetConfig+0x5a0>
 801114e:	4b57      	ldr	r3, [pc, #348]	; (80112ac <UART_SetConfig+0x69c>)
 8011150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011152:	f003 0307 	and.w	r3, r3, #7
 8011156:	2b05      	cmp	r3, #5
 8011158:	d826      	bhi.n	80111a8 <UART_SetConfig+0x598>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <UART_SetConfig+0x550>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011179 	.word	0x08011179
 8011164:	08011181 	.word	0x08011181
 8011168:	08011189 	.word	0x08011189
 801116c:	08011191 	.word	0x08011191
 8011170:	08011199 	.word	0x08011199
 8011174:	080111a1 	.word	0x080111a1
 8011178:	2302      	movs	r3, #2
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e01a      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011180:	2304      	movs	r3, #4
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e016      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011188:	2308      	movs	r3, #8
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e012      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011190:	2310      	movs	r3, #16
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e00e      	b.n	80111b6 <UART_SetConfig+0x5a6>
 8011198:	2320      	movs	r3, #32
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e00a      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80111a0:	2340      	movs	r3, #64	; 0x40
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e006      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80111a8:	2380      	movs	r3, #128	; 0x80
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e002      	b.n	80111b6 <UART_SetConfig+0x5a6>
 80111b0:	2380      	movs	r3, #128	; 0x80
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4a3f      	ldr	r2, [pc, #252]	; (80112b8 <UART_SetConfig+0x6a8>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	f040 80f8 	bne.w	80113b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80111c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111c6:	2b20      	cmp	r3, #32
 80111c8:	dc46      	bgt.n	8011258 <UART_SetConfig+0x648>
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	f2c0 8082 	blt.w	80112d4 <UART_SetConfig+0x6c4>
 80111d0:	3b02      	subs	r3, #2
 80111d2:	2b1e      	cmp	r3, #30
 80111d4:	d87e      	bhi.n	80112d4 <UART_SetConfig+0x6c4>
 80111d6:	a201      	add	r2, pc, #4	; (adr r2, 80111dc <UART_SetConfig+0x5cc>)
 80111d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111dc:	0801125f 	.word	0x0801125f
 80111e0:	080112d5 	.word	0x080112d5
 80111e4:	08011267 	.word	0x08011267
 80111e8:	080112d5 	.word	0x080112d5
 80111ec:	080112d5 	.word	0x080112d5
 80111f0:	080112d5 	.word	0x080112d5
 80111f4:	08011277 	.word	0x08011277
 80111f8:	080112d5 	.word	0x080112d5
 80111fc:	080112d5 	.word	0x080112d5
 8011200:	080112d5 	.word	0x080112d5
 8011204:	080112d5 	.word	0x080112d5
 8011208:	080112d5 	.word	0x080112d5
 801120c:	080112d5 	.word	0x080112d5
 8011210:	080112d5 	.word	0x080112d5
 8011214:	08011287 	.word	0x08011287
 8011218:	080112d5 	.word	0x080112d5
 801121c:	080112d5 	.word	0x080112d5
 8011220:	080112d5 	.word	0x080112d5
 8011224:	080112d5 	.word	0x080112d5
 8011228:	080112d5 	.word	0x080112d5
 801122c:	080112d5 	.word	0x080112d5
 8011230:	080112d5 	.word	0x080112d5
 8011234:	080112d5 	.word	0x080112d5
 8011238:	080112d5 	.word	0x080112d5
 801123c:	080112d5 	.word	0x080112d5
 8011240:	080112d5 	.word	0x080112d5
 8011244:	080112d5 	.word	0x080112d5
 8011248:	080112d5 	.word	0x080112d5
 801124c:	080112d5 	.word	0x080112d5
 8011250:	080112d5 	.word	0x080112d5
 8011254:	080112c7 	.word	0x080112c7
 8011258:	2b40      	cmp	r3, #64	; 0x40
 801125a:	d037      	beq.n	80112cc <UART_SetConfig+0x6bc>
 801125c:	e03a      	b.n	80112d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801125e:	f7fb fce5 	bl	800cc2c <HAL_RCCEx_GetD3PCLK1Freq>
 8011262:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011264:	e03c      	b.n	80112e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801126a:	4618      	mov	r0, r3
 801126c:	f7fb fcf4 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011274:	e034      	b.n	80112e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011276:	f107 0318 	add.w	r3, r7, #24
 801127a:	4618      	mov	r0, r3
 801127c:	f7fb fe40 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011280:	69fb      	ldr	r3, [r7, #28]
 8011282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011284:	e02c      	b.n	80112e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011286:	4b09      	ldr	r3, [pc, #36]	; (80112ac <UART_SetConfig+0x69c>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f003 0320 	and.w	r3, r3, #32
 801128e:	2b00      	cmp	r3, #0
 8011290:	d016      	beq.n	80112c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011292:	4b06      	ldr	r3, [pc, #24]	; (80112ac <UART_SetConfig+0x69c>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	08db      	lsrs	r3, r3, #3
 8011298:	f003 0303 	and.w	r3, r3, #3
 801129c:	4a07      	ldr	r2, [pc, #28]	; (80112bc <UART_SetConfig+0x6ac>)
 801129e:	fa22 f303 	lsr.w	r3, r2, r3
 80112a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112a4:	e01c      	b.n	80112e0 <UART_SetConfig+0x6d0>
 80112a6:	bf00      	nop
 80112a8:	40011400 	.word	0x40011400
 80112ac:	58024400 	.word	0x58024400
 80112b0:	40007800 	.word	0x40007800
 80112b4:	40007c00 	.word	0x40007c00
 80112b8:	58000c00 	.word	0x58000c00
 80112bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80112c0:	4b9d      	ldr	r3, [pc, #628]	; (8011538 <UART_SetConfig+0x928>)
 80112c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112c4:	e00c      	b.n	80112e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112c6:	4b9d      	ldr	r3, [pc, #628]	; (801153c <UART_SetConfig+0x92c>)
 80112c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ca:	e009      	b.n	80112e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d2:	e005      	b.n	80112e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80112d4:	2300      	movs	r3, #0
 80112d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80112e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	f000 81de 	beq.w	80116a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112ec:	4a94      	ldr	r2, [pc, #592]	; (8011540 <UART_SetConfig+0x930>)
 80112ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112f2:	461a      	mov	r2, r3
 80112f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80112fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	685a      	ldr	r2, [r3, #4]
 8011300:	4613      	mov	r3, r2
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	4413      	add	r3, r2
 8011306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011308:	429a      	cmp	r2, r3
 801130a:	d305      	bcc.n	8011318 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011314:	429a      	cmp	r2, r3
 8011316:	d903      	bls.n	8011320 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011318:	2301      	movs	r3, #1
 801131a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801131e:	e1c1      	b.n	80116a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011322:	2200      	movs	r2, #0
 8011324:	60bb      	str	r3, [r7, #8]
 8011326:	60fa      	str	r2, [r7, #12]
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132c:	4a84      	ldr	r2, [pc, #528]	; (8011540 <UART_SetConfig+0x930>)
 801132e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011332:	b29b      	uxth	r3, r3
 8011334:	2200      	movs	r2, #0
 8011336:	603b      	str	r3, [r7, #0]
 8011338:	607a      	str	r2, [r7, #4]
 801133a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801133e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011342:	f7ee ffcd 	bl	80002e0 <__aeabi_uldivmod>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	4610      	mov	r0, r2
 801134c:	4619      	mov	r1, r3
 801134e:	f04f 0200 	mov.w	r2, #0
 8011352:	f04f 0300 	mov.w	r3, #0
 8011356:	020b      	lsls	r3, r1, #8
 8011358:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801135c:	0202      	lsls	r2, r0, #8
 801135e:	6979      	ldr	r1, [r7, #20]
 8011360:	6849      	ldr	r1, [r1, #4]
 8011362:	0849      	lsrs	r1, r1, #1
 8011364:	2000      	movs	r0, #0
 8011366:	460c      	mov	r4, r1
 8011368:	4605      	mov	r5, r0
 801136a:	eb12 0804 	adds.w	r8, r2, r4
 801136e:	eb43 0905 	adc.w	r9, r3, r5
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	469a      	mov	sl, r3
 801137a:	4693      	mov	fp, r2
 801137c:	4652      	mov	r2, sl
 801137e:	465b      	mov	r3, fp
 8011380:	4640      	mov	r0, r8
 8011382:	4649      	mov	r1, r9
 8011384:	f7ee ffac 	bl	80002e0 <__aeabi_uldivmod>
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	4613      	mov	r3, r2
 801138e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011396:	d308      	bcc.n	80113aa <UART_SetConfig+0x79a>
 8011398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801139e:	d204      	bcs.n	80113aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113a6:	60da      	str	r2, [r3, #12]
 80113a8:	e17c      	b.n	80116a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80113b0:	e178      	b.n	80116a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	69db      	ldr	r3, [r3, #28]
 80113b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113ba:	f040 80c5 	bne.w	8011548 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80113be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113c2:	2b20      	cmp	r3, #32
 80113c4:	dc48      	bgt.n	8011458 <UART_SetConfig+0x848>
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	db7b      	blt.n	80114c2 <UART_SetConfig+0x8b2>
 80113ca:	2b20      	cmp	r3, #32
 80113cc:	d879      	bhi.n	80114c2 <UART_SetConfig+0x8b2>
 80113ce:	a201      	add	r2, pc, #4	; (adr r2, 80113d4 <UART_SetConfig+0x7c4>)
 80113d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d4:	0801145f 	.word	0x0801145f
 80113d8:	08011467 	.word	0x08011467
 80113dc:	080114c3 	.word	0x080114c3
 80113e0:	080114c3 	.word	0x080114c3
 80113e4:	0801146f 	.word	0x0801146f
 80113e8:	080114c3 	.word	0x080114c3
 80113ec:	080114c3 	.word	0x080114c3
 80113f0:	080114c3 	.word	0x080114c3
 80113f4:	0801147f 	.word	0x0801147f
 80113f8:	080114c3 	.word	0x080114c3
 80113fc:	080114c3 	.word	0x080114c3
 8011400:	080114c3 	.word	0x080114c3
 8011404:	080114c3 	.word	0x080114c3
 8011408:	080114c3 	.word	0x080114c3
 801140c:	080114c3 	.word	0x080114c3
 8011410:	080114c3 	.word	0x080114c3
 8011414:	0801148f 	.word	0x0801148f
 8011418:	080114c3 	.word	0x080114c3
 801141c:	080114c3 	.word	0x080114c3
 8011420:	080114c3 	.word	0x080114c3
 8011424:	080114c3 	.word	0x080114c3
 8011428:	080114c3 	.word	0x080114c3
 801142c:	080114c3 	.word	0x080114c3
 8011430:	080114c3 	.word	0x080114c3
 8011434:	080114c3 	.word	0x080114c3
 8011438:	080114c3 	.word	0x080114c3
 801143c:	080114c3 	.word	0x080114c3
 8011440:	080114c3 	.word	0x080114c3
 8011444:	080114c3 	.word	0x080114c3
 8011448:	080114c3 	.word	0x080114c3
 801144c:	080114c3 	.word	0x080114c3
 8011450:	080114c3 	.word	0x080114c3
 8011454:	080114b5 	.word	0x080114b5
 8011458:	2b40      	cmp	r3, #64	; 0x40
 801145a:	d02e      	beq.n	80114ba <UART_SetConfig+0x8aa>
 801145c:	e031      	b.n	80114c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801145e:	f7f9 fbed 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 8011462:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011464:	e033      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011466:	f7f9 fbff 	bl	800ac68 <HAL_RCC_GetPCLK2Freq>
 801146a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801146c:	e02f      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011472:	4618      	mov	r0, r3
 8011474:	f7fb fbf0 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801147c:	e027      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801147e:	f107 0318 	add.w	r3, r7, #24
 8011482:	4618      	mov	r0, r3
 8011484:	f7fb fd3c 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801148c:	e01f      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801148e:	4b2d      	ldr	r3, [pc, #180]	; (8011544 <UART_SetConfig+0x934>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f003 0320 	and.w	r3, r3, #32
 8011496:	2b00      	cmp	r3, #0
 8011498:	d009      	beq.n	80114ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801149a:	4b2a      	ldr	r3, [pc, #168]	; (8011544 <UART_SetConfig+0x934>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	08db      	lsrs	r3, r3, #3
 80114a0:	f003 0303 	and.w	r3, r3, #3
 80114a4:	4a24      	ldr	r2, [pc, #144]	; (8011538 <UART_SetConfig+0x928>)
 80114a6:	fa22 f303 	lsr.w	r3, r2, r3
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114ac:	e00f      	b.n	80114ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114ae:	4b22      	ldr	r3, [pc, #136]	; (8011538 <UART_SetConfig+0x928>)
 80114b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b2:	e00c      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114b4:	4b21      	ldr	r3, [pc, #132]	; (801153c <UART_SetConfig+0x92c>)
 80114b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b8:	e009      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c0:	e005      	b.n	80114ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114c2:	2300      	movs	r3, #0
 80114c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 80e7 	beq.w	80116a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114da:	4a19      	ldr	r2, [pc, #100]	; (8011540 <UART_SetConfig+0x930>)
 80114dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114e0:	461a      	mov	r2, r3
 80114e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80114e8:	005a      	lsls	r2, r3, #1
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	085b      	lsrs	r3, r3, #1
 80114f0:	441a      	add	r2, r3
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80114fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fe:	2b0f      	cmp	r3, #15
 8011500:	d916      	bls.n	8011530 <UART_SetConfig+0x920>
 8011502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011508:	d212      	bcs.n	8011530 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801150a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150c:	b29b      	uxth	r3, r3
 801150e:	f023 030f 	bic.w	r3, r3, #15
 8011512:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011516:	085b      	lsrs	r3, r3, #1
 8011518:	b29b      	uxth	r3, r3
 801151a:	f003 0307 	and.w	r3, r3, #7
 801151e:	b29a      	uxth	r2, r3
 8011520:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011522:	4313      	orrs	r3, r2
 8011524:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801152c:	60da      	str	r2, [r3, #12]
 801152e:	e0b9      	b.n	80116a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011530:	2301      	movs	r3, #1
 8011532:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011536:	e0b5      	b.n	80116a4 <UART_SetConfig+0xa94>
 8011538:	03d09000 	.word	0x03d09000
 801153c:	003d0900 	.word	0x003d0900
 8011540:	08017628 	.word	0x08017628
 8011544:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011548:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801154c:	2b20      	cmp	r3, #32
 801154e:	dc49      	bgt.n	80115e4 <UART_SetConfig+0x9d4>
 8011550:	2b00      	cmp	r3, #0
 8011552:	db7c      	blt.n	801164e <UART_SetConfig+0xa3e>
 8011554:	2b20      	cmp	r3, #32
 8011556:	d87a      	bhi.n	801164e <UART_SetConfig+0xa3e>
 8011558:	a201      	add	r2, pc, #4	; (adr r2, 8011560 <UART_SetConfig+0x950>)
 801155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801155e:	bf00      	nop
 8011560:	080115eb 	.word	0x080115eb
 8011564:	080115f3 	.word	0x080115f3
 8011568:	0801164f 	.word	0x0801164f
 801156c:	0801164f 	.word	0x0801164f
 8011570:	080115fb 	.word	0x080115fb
 8011574:	0801164f 	.word	0x0801164f
 8011578:	0801164f 	.word	0x0801164f
 801157c:	0801164f 	.word	0x0801164f
 8011580:	0801160b 	.word	0x0801160b
 8011584:	0801164f 	.word	0x0801164f
 8011588:	0801164f 	.word	0x0801164f
 801158c:	0801164f 	.word	0x0801164f
 8011590:	0801164f 	.word	0x0801164f
 8011594:	0801164f 	.word	0x0801164f
 8011598:	0801164f 	.word	0x0801164f
 801159c:	0801164f 	.word	0x0801164f
 80115a0:	0801161b 	.word	0x0801161b
 80115a4:	0801164f 	.word	0x0801164f
 80115a8:	0801164f 	.word	0x0801164f
 80115ac:	0801164f 	.word	0x0801164f
 80115b0:	0801164f 	.word	0x0801164f
 80115b4:	0801164f 	.word	0x0801164f
 80115b8:	0801164f 	.word	0x0801164f
 80115bc:	0801164f 	.word	0x0801164f
 80115c0:	0801164f 	.word	0x0801164f
 80115c4:	0801164f 	.word	0x0801164f
 80115c8:	0801164f 	.word	0x0801164f
 80115cc:	0801164f 	.word	0x0801164f
 80115d0:	0801164f 	.word	0x0801164f
 80115d4:	0801164f 	.word	0x0801164f
 80115d8:	0801164f 	.word	0x0801164f
 80115dc:	0801164f 	.word	0x0801164f
 80115e0:	08011641 	.word	0x08011641
 80115e4:	2b40      	cmp	r3, #64	; 0x40
 80115e6:	d02e      	beq.n	8011646 <UART_SetConfig+0xa36>
 80115e8:	e031      	b.n	801164e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115ea:	f7f9 fb27 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 80115ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115f0:	e033      	b.n	801165a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115f2:	f7f9 fb39 	bl	800ac68 <HAL_RCC_GetPCLK2Freq>
 80115f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115f8:	e02f      	b.n	801165a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fb fb2a 	bl	800cc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011608:	e027      	b.n	801165a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801160a:	f107 0318 	add.w	r3, r7, #24
 801160e:	4618      	mov	r0, r3
 8011610:	f7fb fc76 	bl	800cf00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011618:	e01f      	b.n	801165a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801161a:	4b2d      	ldr	r3, [pc, #180]	; (80116d0 <UART_SetConfig+0xac0>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f003 0320 	and.w	r3, r3, #32
 8011622:	2b00      	cmp	r3, #0
 8011624:	d009      	beq.n	801163a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011626:	4b2a      	ldr	r3, [pc, #168]	; (80116d0 <UART_SetConfig+0xac0>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	08db      	lsrs	r3, r3, #3
 801162c:	f003 0303 	and.w	r3, r3, #3
 8011630:	4a28      	ldr	r2, [pc, #160]	; (80116d4 <UART_SetConfig+0xac4>)
 8011632:	fa22 f303 	lsr.w	r3, r2, r3
 8011636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011638:	e00f      	b.n	801165a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801163a:	4b26      	ldr	r3, [pc, #152]	; (80116d4 <UART_SetConfig+0xac4>)
 801163c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801163e:	e00c      	b.n	801165a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011640:	4b25      	ldr	r3, [pc, #148]	; (80116d8 <UART_SetConfig+0xac8>)
 8011642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011644:	e009      	b.n	801165a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801164a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801164c:	e005      	b.n	801165a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801164e:	2300      	movs	r3, #0
 8011650:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011652:	2301      	movs	r3, #1
 8011654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011658:	bf00      	nop
    }

    if (pclk != 0U)
 801165a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d021      	beq.n	80116a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011664:	4a1d      	ldr	r2, [pc, #116]	; (80116dc <UART_SetConfig+0xacc>)
 8011666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801166a:	461a      	mov	r2, r3
 801166c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801166e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	085b      	lsrs	r3, r3, #1
 8011678:	441a      	add	r2, r3
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011682:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011686:	2b0f      	cmp	r3, #15
 8011688:	d909      	bls.n	801169e <UART_SetConfig+0xa8e>
 801168a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011690:	d205      	bcs.n	801169e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011694:	b29a      	uxth	r2, r3
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	60da      	str	r2, [r3, #12]
 801169c:	e002      	b.n	80116a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801169e:	2301      	movs	r3, #1
 80116a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	2201      	movs	r2, #1
 80116a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	2201      	movs	r2, #1
 80116b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	2200      	movs	r2, #0
 80116b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	2200      	movs	r2, #0
 80116be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80116c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3748      	adds	r7, #72	; 0x48
 80116c8:	46bd      	mov	sp, r7
 80116ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116ce:	bf00      	nop
 80116d0:	58024400 	.word	0x58024400
 80116d4:	03d09000 	.word	0x03d09000
 80116d8:	003d0900 	.word	0x003d0900
 80116dc:	08017628 	.word	0x08017628

080116e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116ec:	f003 0308 	and.w	r3, r3, #8
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00a      	beq.n	801170a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	430a      	orrs	r2, r1
 8011708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00a      	beq.n	801172c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	430a      	orrs	r2, r1
 801172a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011730:	f003 0302 	and.w	r3, r3, #2
 8011734:	2b00      	cmp	r3, #0
 8011736:	d00a      	beq.n	801174e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	430a      	orrs	r2, r1
 801174c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011752:	f003 0304 	and.w	r3, r3, #4
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00a      	beq.n	8011770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	430a      	orrs	r2, r1
 801176e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011774:	f003 0310 	and.w	r3, r3, #16
 8011778:	2b00      	cmp	r3, #0
 801177a:	d00a      	beq.n	8011792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	689b      	ldr	r3, [r3, #8]
 8011782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	430a      	orrs	r2, r1
 8011790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011796:	f003 0320 	and.w	r3, r3, #32
 801179a:	2b00      	cmp	r3, #0
 801179c:	d00a      	beq.n	80117b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	430a      	orrs	r2, r1
 80117b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d01a      	beq.n	80117f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	430a      	orrs	r2, r1
 80117d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117de:	d10a      	bne.n	80117f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	430a      	orrs	r2, r1
 80117f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00a      	beq.n	8011818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	430a      	orrs	r2, r1
 8011816:	605a      	str	r2, [r3, #4]
  }
}
 8011818:	bf00      	nop
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr

08011824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b098      	sub	sp, #96	; 0x60
 8011828:	af02      	add	r7, sp, #8
 801182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011834:	f7f2 fa74 	bl	8003d20 <HAL_GetTick>
 8011838:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	f003 0308 	and.w	r3, r3, #8
 8011844:	2b08      	cmp	r3, #8
 8011846:	d12f      	bne.n	80118a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011850:	2200      	movs	r2, #0
 8011852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 f88e 	bl	8011978 <UART_WaitOnFlagUntilTimeout>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d022      	beq.n	80118a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186a:	e853 3f00 	ldrex	r3, [r3]
 801186e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011876:	653b      	str	r3, [r7, #80]	; 0x50
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	461a      	mov	r2, r3
 801187e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011880:	647b      	str	r3, [r7, #68]	; 0x44
 8011882:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011888:	e841 2300 	strex	r3, r2, [r1]
 801188c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1e6      	bne.n	8011862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2220      	movs	r2, #32
 8011898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2200      	movs	r2, #0
 80118a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118a4:	2303      	movs	r3, #3
 80118a6:	e063      	b.n	8011970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f003 0304 	and.w	r3, r3, #4
 80118b2:	2b04      	cmp	r3, #4
 80118b4:	d149      	bne.n	801194a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118be:	2200      	movs	r2, #0
 80118c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f000 f857 	bl	8011978 <UART_WaitOnFlagUntilTimeout>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d03c      	beq.n	801194a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d8:	e853 3f00 	ldrex	r3, [r3]
 80118dc:	623b      	str	r3, [r7, #32]
   return(result);
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80118e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	461a      	mov	r2, r3
 80118ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ee:	633b      	str	r3, [r7, #48]	; 0x30
 80118f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118f6:	e841 2300 	strex	r3, r2, [r1]
 80118fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1e6      	bne.n	80118d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3308      	adds	r3, #8
 8011908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	e853 3f00 	ldrex	r3, [r3]
 8011910:	60fb      	str	r3, [r7, #12]
   return(result);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f023 0301 	bic.w	r3, r3, #1
 8011918:	64bb      	str	r3, [r7, #72]	; 0x48
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	3308      	adds	r3, #8
 8011920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011922:	61fa      	str	r2, [r7, #28]
 8011924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011926:	69b9      	ldr	r1, [r7, #24]
 8011928:	69fa      	ldr	r2, [r7, #28]
 801192a:	e841 2300 	strex	r3, r2, [r1]
 801192e:	617b      	str	r3, [r7, #20]
   return(result);
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d1e5      	bne.n	8011902 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2220      	movs	r2, #32
 801193a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011946:	2303      	movs	r3, #3
 8011948:	e012      	b.n	8011970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2220      	movs	r2, #32
 801194e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2220      	movs	r2, #32
 8011956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3758      	adds	r7, #88	; 0x58
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	603b      	str	r3, [r7, #0]
 8011984:	4613      	mov	r3, r2
 8011986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011988:	e04f      	b.n	8011a2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011990:	d04b      	beq.n	8011a2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011992:	f7f2 f9c5 	bl	8003d20 <HAL_GetTick>
 8011996:	4602      	mov	r2, r0
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	69ba      	ldr	r2, [r7, #24]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d302      	bcc.n	80119a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d101      	bne.n	80119ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80119a8:	2303      	movs	r3, #3
 80119aa:	e04e      	b.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f003 0304 	and.w	r3, r3, #4
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d037      	beq.n	8011a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	2b80      	cmp	r3, #128	; 0x80
 80119be:	d034      	beq.n	8011a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	2b40      	cmp	r3, #64	; 0x40
 80119c4:	d031      	beq.n	8011a2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	69db      	ldr	r3, [r3, #28]
 80119cc:	f003 0308 	and.w	r3, r3, #8
 80119d0:	2b08      	cmp	r3, #8
 80119d2:	d110      	bne.n	80119f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2208      	movs	r2, #8
 80119da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	f000 f99d 	bl	8011d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2208      	movs	r2, #8
 80119e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	e029      	b.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	69db      	ldr	r3, [r3, #28]
 80119fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a04:	d111      	bne.n	8011a2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 f983 	bl	8011d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2220      	movs	r2, #32
 8011a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2200      	movs	r2, #0
 8011a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011a26:	2303      	movs	r3, #3
 8011a28:	e00f      	b.n	8011a4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	69da      	ldr	r2, [r3, #28]
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	4013      	ands	r3, r2
 8011a34:	68ba      	ldr	r2, [r7, #8]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	bf0c      	ite	eq
 8011a3a:	2301      	moveq	r3, #1
 8011a3c:	2300      	movne	r3, #0
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	461a      	mov	r2, r3
 8011a42:	79fb      	ldrb	r3, [r7, #7]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d0a0      	beq.n	801198a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3710      	adds	r7, #16
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
	...

08011a54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a54:	b480      	push	{r7}
 8011a56:	b0a3      	sub	sp, #140	; 0x8c
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	4613      	mov	r3, r2
 8011a60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	68ba      	ldr	r2, [r7, #8]
 8011a66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	88fa      	ldrh	r2, [r7, #6]
 8011a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	88fa      	ldrh	r2, [r7, #6]
 8011a74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a86:	d10e      	bne.n	8011aa6 <UART_Start_Receive_IT+0x52>
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d105      	bne.n	8011a9c <UART_Start_Receive_IT+0x48>
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011a96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011a9a:	e02d      	b.n	8011af8 <UART_Start_Receive_IT+0xa4>
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	22ff      	movs	r2, #255	; 0xff
 8011aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011aa4:	e028      	b.n	8011af8 <UART_Start_Receive_IT+0xa4>
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d10d      	bne.n	8011aca <UART_Start_Receive_IT+0x76>
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d104      	bne.n	8011ac0 <UART_Start_Receive_IT+0x6c>
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	22ff      	movs	r2, #255	; 0xff
 8011aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011abe:	e01b      	b.n	8011af8 <UART_Start_Receive_IT+0xa4>
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	227f      	movs	r2, #127	; 0x7f
 8011ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ac8:	e016      	b.n	8011af8 <UART_Start_Receive_IT+0xa4>
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011ad2:	d10d      	bne.n	8011af0 <UART_Start_Receive_IT+0x9c>
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	691b      	ldr	r3, [r3, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d104      	bne.n	8011ae6 <UART_Start_Receive_IT+0x92>
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	227f      	movs	r2, #127	; 0x7f
 8011ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011ae4:	e008      	b.n	8011af8 <UART_Start_Receive_IT+0xa4>
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	223f      	movs	r2, #63	; 0x3f
 8011aea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011aee:	e003      	b.n	8011af8 <UART_Start_Receive_IT+0xa4>
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2200      	movs	r2, #0
 8011af4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2222      	movs	r2, #34	; 0x22
 8011b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	3308      	adds	r3, #8
 8011b0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b12:	e853 3f00 	ldrex	r3, [r3]
 8011b16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b1a:	f043 0301 	orr.w	r3, r3, #1
 8011b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	3308      	adds	r3, #8
 8011b28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011b2c:	673a      	str	r2, [r7, #112]	; 0x70
 8011b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011b32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011b34:	e841 2300 	strex	r3, r2, [r1]
 8011b38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1e3      	bne.n	8011b08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b48:	d14f      	bne.n	8011bea <UART_Start_Receive_IT+0x196>
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011b50:	88fa      	ldrh	r2, [r7, #6]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d349      	bcc.n	8011bea <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	689b      	ldr	r3, [r3, #8]
 8011b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b5e:	d107      	bne.n	8011b70 <UART_Start_Receive_IT+0x11c>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	691b      	ldr	r3, [r3, #16]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d103      	bne.n	8011b70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	4a47      	ldr	r2, [pc, #284]	; (8011c88 <UART_Start_Receive_IT+0x234>)
 8011b6c:	675a      	str	r2, [r3, #116]	; 0x74
 8011b6e:	e002      	b.n	8011b76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	4a46      	ldr	r2, [pc, #280]	; (8011c8c <UART_Start_Receive_IT+0x238>)
 8011b74:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d01a      	beq.n	8011bb4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b86:	e853 3f00 	ldrex	r3, [r3]
 8011b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011ba2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011ba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ba8:	e841 2300 	strex	r3, r2, [r1]
 8011bac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1e4      	bne.n	8011b7e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	3308      	adds	r3, #8
 8011bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bbe:	e853 3f00 	ldrex	r3, [r3]
 8011bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bd4:	64ba      	str	r2, [r7, #72]	; 0x48
 8011bd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bdc:	e841 2300 	strex	r3, r2, [r1]
 8011be0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1e5      	bne.n	8011bb4 <UART_Start_Receive_IT+0x160>
 8011be8:	e046      	b.n	8011c78 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011bf2:	d107      	bne.n	8011c04 <UART_Start_Receive_IT+0x1b0>
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	691b      	ldr	r3, [r3, #16]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d103      	bne.n	8011c04 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	4a24      	ldr	r2, [pc, #144]	; (8011c90 <UART_Start_Receive_IT+0x23c>)
 8011c00:	675a      	str	r2, [r3, #116]	; 0x74
 8011c02:	e002      	b.n	8011c0a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	4a23      	ldr	r2, [pc, #140]	; (8011c94 <UART_Start_Receive_IT+0x240>)
 8011c08:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d019      	beq.n	8011c46 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c1a:	e853 3f00 	ldrex	r3, [r3]
 8011c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011c26:	677b      	str	r3, [r7, #116]	; 0x74
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c30:	637b      	str	r3, [r7, #52]	; 0x34
 8011c32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c38:	e841 2300 	strex	r3, r2, [r1]
 8011c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1e6      	bne.n	8011c12 <UART_Start_Receive_IT+0x1be>
 8011c44:	e018      	b.n	8011c78 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	e853 3f00 	ldrex	r3, [r3]
 8011c52:	613b      	str	r3, [r7, #16]
   return(result);
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	f043 0320 	orr.w	r3, r3, #32
 8011c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	461a      	mov	r2, r3
 8011c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c64:	623b      	str	r3, [r7, #32]
 8011c66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c68:	69f9      	ldr	r1, [r7, #28]
 8011c6a:	6a3a      	ldr	r2, [r7, #32]
 8011c6c:	e841 2300 	strex	r3, r2, [r1]
 8011c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d1e6      	bne.n	8011c46 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011c78:	2300      	movs	r3, #0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	378c      	adds	r7, #140	; 0x8c
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	0801266d 	.word	0x0801266d
 8011c8c:	0801230d 	.word	0x0801230d
 8011c90:	08012155 	.word	0x08012155
 8011c94:	08011f9d 	.word	0x08011f9d

08011c98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b08f      	sub	sp, #60	; 0x3c
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca6:	6a3b      	ldr	r3, [r7, #32]
 8011ca8:	e853 3f00 	ldrex	r3, [r3]
 8011cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cc0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cc6:	e841 2300 	strex	r3, r2, [r1]
 8011cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1e6      	bne.n	8011ca0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	3308      	adds	r3, #8
 8011cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	e853 3f00 	ldrex	r3, [r3]
 8011ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	3308      	adds	r3, #8
 8011cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cf2:	61ba      	str	r2, [r7, #24]
 8011cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf6:	6979      	ldr	r1, [r7, #20]
 8011cf8:	69ba      	ldr	r2, [r7, #24]
 8011cfa:	e841 2300 	strex	r3, r2, [r1]
 8011cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d1e5      	bne.n	8011cd2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2220      	movs	r2, #32
 8011d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011d0e:	bf00      	nop
 8011d10:	373c      	adds	r7, #60	; 0x3c
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr
	...

08011d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b095      	sub	sp, #84	; 0x54
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d2c:	e853 3f00 	ldrex	r3, [r3]
 8011d30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d42:	643b      	str	r3, [r7, #64]	; 0x40
 8011d44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d4a:	e841 2300 	strex	r3, r2, [r1]
 8011d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1e6      	bne.n	8011d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	3308      	adds	r3, #8
 8011d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5e:	6a3b      	ldr	r3, [r7, #32]
 8011d60:	e853 3f00 	ldrex	r3, [r3]
 8011d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d66:	69fa      	ldr	r2, [r7, #28]
 8011d68:	4b1e      	ldr	r3, [pc, #120]	; (8011de4 <UART_EndRxTransfer+0xc8>)
 8011d6a:	4013      	ands	r3, r2
 8011d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3308      	adds	r3, #8
 8011d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d7e:	e841 2300 	strex	r3, r2, [r1]
 8011d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1e5      	bne.n	8011d56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d118      	bne.n	8011dc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	e853 3f00 	ldrex	r3, [r3]
 8011d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	f023 0310 	bic.w	r3, r3, #16
 8011da6:	647b      	str	r3, [r7, #68]	; 0x44
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	461a      	mov	r2, r3
 8011dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011db0:	61bb      	str	r3, [r7, #24]
 8011db2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db4:	6979      	ldr	r1, [r7, #20]
 8011db6:	69ba      	ldr	r2, [r7, #24]
 8011db8:	e841 2300 	strex	r3, r2, [r1]
 8011dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1e6      	bne.n	8011d92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2220      	movs	r2, #32
 8011dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011dd8:	bf00      	nop
 8011dda:	3754      	adds	r7, #84	; 0x54
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr
 8011de4:	effffffe 	.word	0xeffffffe

08011de8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b090      	sub	sp, #64	; 0x40
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	69db      	ldr	r3, [r3, #28]
 8011dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dfe:	d037      	beq.n	8011e70 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e02:	2200      	movs	r2, #0
 8011e04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	e853 3f00 	ldrex	r3, [r3]
 8011e16:	623b      	str	r3, [r7, #32]
   return(result);
 8011e18:	6a3b      	ldr	r3, [r7, #32]
 8011e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	3308      	adds	r3, #8
 8011e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e28:	633a      	str	r2, [r7, #48]	; 0x30
 8011e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e30:	e841 2300 	strex	r3, r2, [r1]
 8011e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d1e5      	bne.n	8011e08 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	e853 3f00 	ldrex	r3, [r3]
 8011e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e50:	637b      	str	r3, [r7, #52]	; 0x34
 8011e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	461a      	mov	r2, r3
 8011e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e5a:	61fb      	str	r3, [r7, #28]
 8011e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e5e:	69b9      	ldr	r1, [r7, #24]
 8011e60:	69fa      	ldr	r2, [r7, #28]
 8011e62:	e841 2300 	strex	r3, r2, [r1]
 8011e66:	617b      	str	r3, [r7, #20]
   return(result);
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d1e6      	bne.n	8011e3c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e6e:	e002      	b.n	8011e76 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011e70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e72:	f7f0 f991 	bl	8002198 <HAL_UART_TxCpltCallback>
}
 8011e76:	bf00      	nop
 8011e78:	3740      	adds	r7, #64	; 0x40
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b084      	sub	sp, #16
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f7fe fe9f 	bl	8010bd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e92:	bf00      	nop
 8011e94:	3710      	adds	r7, #16
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b086      	sub	sp, #24
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ea6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011eae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011eb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ec2:	2b80      	cmp	r3, #128	; 0x80
 8011ec4:	d109      	bne.n	8011eda <UART_DMAError+0x40>
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	2b21      	cmp	r3, #33	; 0x21
 8011eca:	d106      	bne.n	8011eda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011ed4:	6978      	ldr	r0, [r7, #20]
 8011ed6:	f7ff fedf 	bl	8011c98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ee4:	2b40      	cmp	r3, #64	; 0x40
 8011ee6:	d109      	bne.n	8011efc <UART_DMAError+0x62>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2b22      	cmp	r3, #34	; 0x22
 8011eec:	d106      	bne.n	8011efc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011ef6:	6978      	ldr	r0, [r7, #20]
 8011ef8:	f7ff ff10 	bl	8011d1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f02:	f043 0210 	orr.w	r2, r3, #16
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011f0c:	6978      	ldr	r0, [r7, #20]
 8011f0e:	f7fe fe69 	bl	8010be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f12:	bf00      	nop
 8011f14:	3718      	adds	r7, #24
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b084      	sub	sp, #16
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2200      	movs	r2, #0
 8011f34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011f38:	68f8      	ldr	r0, [r7, #12]
 8011f3a:	f7fe fe53 	bl	8010be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f3e:	bf00      	nop
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b088      	sub	sp, #32
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	e853 3f00 	ldrex	r3, [r3]
 8011f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f62:	61fb      	str	r3, [r7, #28]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	61bb      	str	r3, [r7, #24]
 8011f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f70:	6979      	ldr	r1, [r7, #20]
 8011f72:	69ba      	ldr	r2, [r7, #24]
 8011f74:	e841 2300 	strex	r3, r2, [r1]
 8011f78:	613b      	str	r3, [r7, #16]
   return(result);
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1e6      	bne.n	8011f4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2220      	movs	r2, #32
 8011f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7f0 f902 	bl	8002198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f94:	bf00      	nop
 8011f96:	3720      	adds	r7, #32
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b09c      	sub	sp, #112	; 0x70
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011faa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fb4:	2b22      	cmp	r3, #34	; 0x22
 8011fb6:	f040 80be 	bne.w	8012136 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011fc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011fc8:	b2d9      	uxtb	r1, r3
 8011fca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fd4:	400a      	ands	r2, r1
 8011fd6:	b2d2      	uxtb	r2, r2
 8011fd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fde:	1c5a      	adds	r2, r3, #1
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	3b01      	subs	r3, #1
 8011fee:	b29a      	uxth	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f040 80a1 	bne.w	8012146 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200c:	e853 3f00 	ldrex	r3, [r3]
 8012010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012018:	66bb      	str	r3, [r7, #104]	; 0x68
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	461a      	mov	r2, r3
 8012020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012022:	65bb      	str	r3, [r7, #88]	; 0x58
 8012024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801202a:	e841 2300 	strex	r3, r2, [r1]
 801202e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012032:	2b00      	cmp	r3, #0
 8012034:	d1e6      	bne.n	8012004 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	3308      	adds	r3, #8
 801203c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012040:	e853 3f00 	ldrex	r3, [r3]
 8012044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012048:	f023 0301 	bic.w	r3, r3, #1
 801204c:	667b      	str	r3, [r7, #100]	; 0x64
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	3308      	adds	r3, #8
 8012054:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012056:	647a      	str	r2, [r7, #68]	; 0x44
 8012058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801205a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801205c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801205e:	e841 2300 	strex	r3, r2, [r1]
 8012062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1e5      	bne.n	8012036 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2220      	movs	r2, #32
 801206e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	4a33      	ldr	r2, [pc, #204]	; (8012150 <UART_RxISR_8BIT+0x1b4>)
 8012084:	4293      	cmp	r3, r2
 8012086:	d01f      	beq.n	80120c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012092:	2b00      	cmp	r3, #0
 8012094:	d018      	beq.n	80120c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209e:	e853 3f00 	ldrex	r3, [r3]
 80120a2:	623b      	str	r3, [r7, #32]
   return(result);
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80120aa:	663b      	str	r3, [r7, #96]	; 0x60
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	461a      	mov	r2, r3
 80120b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120b4:	633b      	str	r3, [r7, #48]	; 0x30
 80120b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120bc:	e841 2300 	strex	r3, r2, [r1]
 80120c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d1e6      	bne.n	8012096 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d12e      	bne.n	801212e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2200      	movs	r2, #0
 80120d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	e853 3f00 	ldrex	r3, [r3]
 80120e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f023 0310 	bic.w	r3, r3, #16
 80120ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	461a      	mov	r2, r3
 80120f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120f4:	61fb      	str	r3, [r7, #28]
 80120f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f8:	69b9      	ldr	r1, [r7, #24]
 80120fa:	69fa      	ldr	r2, [r7, #28]
 80120fc:	e841 2300 	strex	r3, r2, [r1]
 8012100:	617b      	str	r3, [r7, #20]
   return(result);
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1e6      	bne.n	80120d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	69db      	ldr	r3, [r3, #28]
 801210e:	f003 0310 	and.w	r3, r3, #16
 8012112:	2b10      	cmp	r3, #16
 8012114:	d103      	bne.n	801211e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2210      	movs	r2, #16
 801211c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012124:	4619      	mov	r1, r3
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f7fe fd66 	bl	8010bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801212c:	e00b      	b.n	8012146 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ee faaa 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012134:	e007      	b.n	8012146 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	699a      	ldr	r2, [r3, #24]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f042 0208 	orr.w	r2, r2, #8
 8012144:	619a      	str	r2, [r3, #24]
}
 8012146:	bf00      	nop
 8012148:	3770      	adds	r7, #112	; 0x70
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	58000c00 	.word	0x58000c00

08012154 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b09c      	sub	sp, #112	; 0x70
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012162:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801216c:	2b22      	cmp	r3, #34	; 0x22
 801216e:	f040 80be 	bne.w	80122ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012178:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012180:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012182:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012186:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801218a:	4013      	ands	r3, r2
 801218c:	b29a      	uxth	r2, r3
 801218e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012190:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012196:	1c9a      	adds	r2, r3, #2
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	3b01      	subs	r3, #1
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f040 80a1 	bne.w	80122fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121c4:	e853 3f00 	ldrex	r3, [r3]
 80121c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80121ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80121d0:	667b      	str	r3, [r7, #100]	; 0x64
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	461a      	mov	r2, r3
 80121d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121da:	657b      	str	r3, [r7, #84]	; 0x54
 80121dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80121e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80121e2:	e841 2300 	strex	r3, r2, [r1]
 80121e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80121e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1e6      	bne.n	80121bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	3308      	adds	r3, #8
 80121f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f8:	e853 3f00 	ldrex	r3, [r3]
 80121fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80121fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012200:	f023 0301 	bic.w	r3, r3, #1
 8012204:	663b      	str	r3, [r7, #96]	; 0x60
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	3308      	adds	r3, #8
 801220c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801220e:	643a      	str	r2, [r7, #64]	; 0x40
 8012210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012216:	e841 2300 	strex	r3, r2, [r1]
 801221a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1e5      	bne.n	80121ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2220      	movs	r2, #32
 8012226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2200      	movs	r2, #0
 801222e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a33      	ldr	r2, [pc, #204]	; (8012308 <UART_RxISR_16BIT+0x1b4>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d01f      	beq.n	8012280 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801224a:	2b00      	cmp	r3, #0
 801224c:	d018      	beq.n	8012280 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	e853 3f00 	ldrex	r3, [r3]
 801225a:	61fb      	str	r3, [r7, #28]
   return(result);
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	461a      	mov	r2, r3
 801226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801226e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012274:	e841 2300 	strex	r3, r2, [r1]
 8012278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1e6      	bne.n	801224e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012284:	2b01      	cmp	r3, #1
 8012286:	d12e      	bne.n	80122e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	e853 3f00 	ldrex	r3, [r3]
 801229a:	60bb      	str	r3, [r7, #8]
   return(result);
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	f023 0310 	bic.w	r3, r3, #16
 80122a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	461a      	mov	r2, r3
 80122aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122ac:	61bb      	str	r3, [r7, #24]
 80122ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b0:	6979      	ldr	r1, [r7, #20]
 80122b2:	69ba      	ldr	r2, [r7, #24]
 80122b4:	e841 2300 	strex	r3, r2, [r1]
 80122b8:	613b      	str	r3, [r7, #16]
   return(result);
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1e6      	bne.n	801228e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	69db      	ldr	r3, [r3, #28]
 80122c6:	f003 0310 	and.w	r3, r3, #16
 80122ca:	2b10      	cmp	r3, #16
 80122cc:	d103      	bne.n	80122d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2210      	movs	r2, #16
 80122d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122dc:	4619      	mov	r1, r3
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7fe fc8a 	bl	8010bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80122e4:	e00b      	b.n	80122fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ee f9ce 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 80122ec:	e007      	b.n	80122fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	699a      	ldr	r2, [r3, #24]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f042 0208 	orr.w	r2, r2, #8
 80122fc:	619a      	str	r2, [r3, #24]
}
 80122fe:	bf00      	nop
 8012300:	3770      	adds	r7, #112	; 0x70
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	58000c00 	.word	0x58000c00

0801230c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b0ac      	sub	sp, #176	; 0xb0
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801231a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	69db      	ldr	r3, [r3, #28]
 8012324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012342:	2b22      	cmp	r3, #34	; 0x22
 8012344:	f040 8180 	bne.w	8012648 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801234e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012352:	e123      	b.n	801259c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801235e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012362:	b2d9      	uxtb	r1, r3
 8012364:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012368:	b2da      	uxtb	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801236e:	400a      	ands	r2, r1
 8012370:	b2d2      	uxtb	r2, r2
 8012372:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012378:	1c5a      	adds	r2, r3, #1
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012384:	b29b      	uxth	r3, r3
 8012386:	3b01      	subs	r3, #1
 8012388:	b29a      	uxth	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	69db      	ldr	r3, [r3, #28]
 8012396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801239a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801239e:	f003 0307 	and.w	r3, r3, #7
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d053      	beq.n	801244e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80123a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123aa:	f003 0301 	and.w	r3, r3, #1
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d011      	beq.n	80123d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80123b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80123b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00b      	beq.n	80123d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2201      	movs	r2, #1
 80123c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123cc:	f043 0201 	orr.w	r2, r3, #1
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123da:	f003 0302 	and.w	r3, r3, #2
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d011      	beq.n	8012406 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80123e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80123e6:	f003 0301 	and.w	r3, r3, #1
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00b      	beq.n	8012406 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	2202      	movs	r2, #2
 80123f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123fc:	f043 0204 	orr.w	r2, r3, #4
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801240a:	f003 0304 	and.w	r3, r3, #4
 801240e:	2b00      	cmp	r3, #0
 8012410:	d011      	beq.n	8012436 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012416:	f003 0301 	and.w	r3, r3, #1
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00b      	beq.n	8012436 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	2204      	movs	r2, #4
 8012424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801242c:	f043 0202 	orr.w	r2, r3, #2
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801243c:	2b00      	cmp	r3, #0
 801243e:	d006      	beq.n	801244e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7fe fbcf 	bl	8010be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012454:	b29b      	uxth	r3, r3
 8012456:	2b00      	cmp	r3, #0
 8012458:	f040 80a0 	bne.w	801259c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012464:	e853 3f00 	ldrex	r3, [r3]
 8012468:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801246a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801246c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	461a      	mov	r2, r3
 801247a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801247e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012480:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012482:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012486:	e841 2300 	strex	r3, r2, [r1]
 801248a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801248c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801248e:	2b00      	cmp	r3, #0
 8012490:	d1e4      	bne.n	801245c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3308      	adds	r3, #8
 8012498:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801249c:	e853 3f00 	ldrex	r3, [r3]
 80124a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80124a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124a4:	4b6e      	ldr	r3, [pc, #440]	; (8012660 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80124a6:	4013      	ands	r3, r2
 80124a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	3308      	adds	r3, #8
 80124b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80124b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80124b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80124bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124be:	e841 2300 	strex	r3, r2, [r1]
 80124c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80124c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1e3      	bne.n	8012492 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2220      	movs	r2, #32
 80124ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2200      	movs	r2, #0
 80124d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2200      	movs	r2, #0
 80124dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	4a60      	ldr	r2, [pc, #384]	; (8012664 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d021      	beq.n	801252c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d01a      	beq.n	801252c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124fe:	e853 3f00 	ldrex	r3, [r3]
 8012502:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801250a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	461a      	mov	r2, r3
 8012514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012518:	657b      	str	r3, [r7, #84]	; 0x54
 801251a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801251c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801251e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012520:	e841 2300 	strex	r3, r2, [r1]
 8012524:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012528:	2b00      	cmp	r3, #0
 801252a:	d1e4      	bne.n	80124f6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012530:	2b01      	cmp	r3, #1
 8012532:	d130      	bne.n	8012596 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012542:	e853 3f00 	ldrex	r3, [r3]
 8012546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254a:	f023 0310 	bic.w	r3, r3, #16
 801254e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801255c:	643b      	str	r3, [r7, #64]	; 0x40
 801255e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012564:	e841 2300 	strex	r3, r2, [r1]
 8012568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256c:	2b00      	cmp	r3, #0
 801256e:	d1e4      	bne.n	801253a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	69db      	ldr	r3, [r3, #28]
 8012576:	f003 0310 	and.w	r3, r3, #16
 801257a:	2b10      	cmp	r3, #16
 801257c:	d103      	bne.n	8012586 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2210      	movs	r2, #16
 8012584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801258c:	4619      	mov	r1, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7fe fb32 	bl	8010bf8 <HAL_UARTEx_RxEventCallback>
 8012594:	e002      	b.n	801259c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7ee f876 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801259c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d006      	beq.n	80125b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80125a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80125a8:	f003 0320 	and.w	r3, r3, #32
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f47f aed1 	bne.w	8012354 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80125bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d049      	beq.n	8012658 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80125ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d242      	bcs.n	8012658 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	3308      	adds	r3, #8
 80125d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	e853 3f00 	ldrex	r3, [r3]
 80125e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80125e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	3308      	adds	r3, #8
 80125f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80125f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80125f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80125fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125fe:	e841 2300 	strex	r3, r2, [r1]
 8012602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1e3      	bne.n	80125d2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4a16      	ldr	r2, [pc, #88]	; (8012668 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801260e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	e853 3f00 	ldrex	r3, [r3]
 801261c:	60bb      	str	r3, [r7, #8]
   return(result);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	f043 0320 	orr.w	r3, r3, #32
 8012624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	461a      	mov	r2, r3
 801262e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012632:	61bb      	str	r3, [r7, #24]
 8012634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012636:	6979      	ldr	r1, [r7, #20]
 8012638:	69ba      	ldr	r2, [r7, #24]
 801263a:	e841 2300 	strex	r3, r2, [r1]
 801263e:	613b      	str	r3, [r7, #16]
   return(result);
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d1e4      	bne.n	8012610 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012646:	e007      	b.n	8012658 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	699a      	ldr	r2, [r3, #24]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f042 0208 	orr.w	r2, r2, #8
 8012656:	619a      	str	r2, [r3, #24]
}
 8012658:	bf00      	nop
 801265a:	37b0      	adds	r7, #176	; 0xb0
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	effffffe 	.word	0xeffffffe
 8012664:	58000c00 	.word	0x58000c00
 8012668:	08011f9d 	.word	0x08011f9d

0801266c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b0ae      	sub	sp, #184	; 0xb8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801267a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	69db      	ldr	r3, [r3, #28]
 8012684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126a2:	2b22      	cmp	r3, #34	; 0x22
 80126a4:	f040 8184 	bne.w	80129b0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126ae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126b2:	e127      	b.n	8012904 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80126c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80126ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80126ce:	4013      	ands	r3, r2
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126dc:	1c9a      	adds	r2, r3, #2
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	3b01      	subs	r3, #1
 80126ec:	b29a      	uxth	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	69db      	ldr	r3, [r3, #28]
 80126fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80126fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012702:	f003 0307 	and.w	r3, r3, #7
 8012706:	2b00      	cmp	r3, #0
 8012708:	d053      	beq.n	80127b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801270a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801270e:	f003 0301 	and.w	r3, r3, #1
 8012712:	2b00      	cmp	r3, #0
 8012714:	d011      	beq.n	801273a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801271e:	2b00      	cmp	r3, #0
 8012720:	d00b      	beq.n	801273a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2201      	movs	r2, #1
 8012728:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012730:	f043 0201 	orr.w	r2, r3, #1
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801273a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801273e:	f003 0302 	and.w	r3, r3, #2
 8012742:	2b00      	cmp	r3, #0
 8012744:	d011      	beq.n	801276a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801274a:	f003 0301 	and.w	r3, r3, #1
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00b      	beq.n	801276a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2202      	movs	r2, #2
 8012758:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012760:	f043 0204 	orr.w	r2, r3, #4
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801276e:	f003 0304 	and.w	r3, r3, #4
 8012772:	2b00      	cmp	r3, #0
 8012774:	d011      	beq.n	801279a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00b      	beq.n	801279a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2204      	movs	r2, #4
 8012788:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012790:	f043 0202 	orr.w	r2, r3, #2
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d006      	beq.n	80127b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7fe fa1d 	bl	8010be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2200      	movs	r2, #0
 80127ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f040 80a2 	bne.w	8012904 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127c8:	e853 3f00 	ldrex	r3, [r3]
 80127cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80127ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	461a      	mov	r2, r3
 80127de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80127e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80127e6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80127ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80127ee:	e841 2300 	strex	r3, r2, [r1]
 80127f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80127f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1e2      	bne.n	80127c0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	3308      	adds	r3, #8
 8012800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012804:	e853 3f00 	ldrex	r3, [r3]
 8012808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801280a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801280c:	4b6e      	ldr	r3, [pc, #440]	; (80129c8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801280e:	4013      	ands	r3, r2
 8012810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3308      	adds	r3, #8
 801281a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801281e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012826:	e841 2300 	strex	r3, r2, [r1]
 801282a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801282c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1e3      	bne.n	80127fa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2220      	movs	r2, #32
 8012836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2200      	movs	r2, #0
 801283e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a60      	ldr	r2, [pc, #384]	; (80129cc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d021      	beq.n	8012894 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801285a:	2b00      	cmp	r3, #0
 801285c:	d01a      	beq.n	8012894 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012866:	e853 3f00 	ldrex	r3, [r3]
 801286a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801286c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801286e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	461a      	mov	r2, r3
 801287c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012880:	65bb      	str	r3, [r7, #88]	; 0x58
 8012882:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012888:	e841 2300 	strex	r3, r2, [r1]
 801288c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801288e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012890:	2b00      	cmp	r3, #0
 8012892:	d1e4      	bne.n	801285e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012898:	2b01      	cmp	r3, #1
 801289a:	d130      	bne.n	80128fe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2200      	movs	r2, #0
 80128a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128aa:	e853 3f00 	ldrex	r3, [r3]
 80128ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80128b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128b2:	f023 0310 	bic.w	r3, r3, #16
 80128b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	461a      	mov	r2, r3
 80128c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128c4:	647b      	str	r3, [r7, #68]	; 0x44
 80128c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80128ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128cc:	e841 2300 	strex	r3, r2, [r1]
 80128d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80128d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1e4      	bne.n	80128a2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	69db      	ldr	r3, [r3, #28]
 80128de:	f003 0310 	and.w	r3, r3, #16
 80128e2:	2b10      	cmp	r3, #16
 80128e4:	d103      	bne.n	80128ee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2210      	movs	r2, #16
 80128ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80128f4:	4619      	mov	r1, r3
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7fe f97e 	bl	8010bf8 <HAL_UARTEx_RxEventCallback>
 80128fc:	e002      	b.n	8012904 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ed fec2 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012904:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012908:	2b00      	cmp	r3, #0
 801290a:	d006      	beq.n	801291a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801290c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012910:	f003 0320 	and.w	r3, r3, #32
 8012914:	2b00      	cmp	r3, #0
 8012916:	f47f aecd 	bne.w	80126b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012920:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012924:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012928:	2b00      	cmp	r3, #0
 801292a:	d049      	beq.n	80129c0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012932:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012936:	429a      	cmp	r2, r3
 8012938:	d242      	bcs.n	80129c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	3308      	adds	r3, #8
 8012940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012944:	e853 3f00 	ldrex	r3, [r3]
 8012948:	623b      	str	r3, [r7, #32]
   return(result);
 801294a:	6a3b      	ldr	r3, [r7, #32]
 801294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	3308      	adds	r3, #8
 801295a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801295e:	633a      	str	r2, [r7, #48]	; 0x30
 8012960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012966:	e841 2300 	strex	r3, r2, [r1]
 801296a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801296e:	2b00      	cmp	r3, #0
 8012970:	d1e3      	bne.n	801293a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	4a16      	ldr	r2, [pc, #88]	; (80129d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012976:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	e853 3f00 	ldrex	r3, [r3]
 8012984:	60fb      	str	r3, [r7, #12]
   return(result);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	f043 0320 	orr.w	r3, r3, #32
 801298c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	461a      	mov	r2, r3
 8012996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801299a:	61fb      	str	r3, [r7, #28]
 801299c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801299e:	69b9      	ldr	r1, [r7, #24]
 80129a0:	69fa      	ldr	r2, [r7, #28]
 80129a2:	e841 2300 	strex	r3, r2, [r1]
 80129a6:	617b      	str	r3, [r7, #20]
   return(result);
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d1e4      	bne.n	8012978 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129ae:	e007      	b.n	80129c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	699a      	ldr	r2, [r3, #24]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f042 0208 	orr.w	r2, r2, #8
 80129be:	619a      	str	r2, [r3, #24]
}
 80129c0:	bf00      	nop
 80129c2:	37b8      	adds	r7, #184	; 0xb8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	effffffe 	.word	0xeffffffe
 80129cc:	58000c00 	.word	0x58000c00
 80129d0:	08012155 	.word	0x08012155

080129d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80129dc:	bf00      	nop
 80129de:	370c      	adds	r7, #12
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80129f0:	bf00      	nop
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b083      	sub	sp, #12
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012a04:	bf00      	nop
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b089      	sub	sp, #36	; 0x24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <HAL_UARTEx_EnableStopMode+0x16>
 8012a22:	2302      	movs	r3, #2
 8012a24:	e021      	b.n	8012a6a <HAL_UARTEx_EnableStopMode+0x5a>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	e853 3f00 	ldrex	r3, [r3]
 8012a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	f043 0302 	orr.w	r3, r3, #2
 8012a42:	61fb      	str	r3, [r7, #28]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	461a      	mov	r2, r3
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	61bb      	str	r3, [r7, #24]
 8012a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a50:	6979      	ldr	r1, [r7, #20]
 8012a52:	69ba      	ldr	r2, [r7, #24]
 8012a54:	e841 2300 	strex	r3, r2, [r1]
 8012a58:	613b      	str	r3, [r7, #16]
   return(result);
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d1e6      	bne.n	8012a2e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3724      	adds	r7, #36	; 0x24
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr

08012a76 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012a76:	b580      	push	{r7, lr}
 8012a78:	b084      	sub	sp, #16
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d101      	bne.n	8012a8c <HAL_UARTEx_EnableFifoMode+0x16>
 8012a88:	2302      	movs	r3, #2
 8012a8a:	e02b      	b.n	8012ae4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2201      	movs	r2, #1
 8012a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2224      	movs	r2, #36	; 0x24
 8012a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f022 0201 	bic.w	r2, r2, #1
 8012ab2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012aba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012ac2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 f8c3 	bl	8012c58 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2220      	movs	r2, #32
 8012ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2200      	movs	r2, #0
 8012ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ae2:	2300      	movs	r3, #0
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3710      	adds	r7, #16
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012afa:	2b01      	cmp	r3, #1
 8012afc:	d101      	bne.n	8012b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8012afe:	2302      	movs	r3, #2
 8012b00:	e027      	b.n	8012b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2201      	movs	r2, #1
 8012b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2224      	movs	r2, #36	; 0x24
 8012b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f022 0201 	bic.w	r2, r2, #1
 8012b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2200      	movs	r2, #0
 8012b36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2220      	movs	r2, #32
 8012b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b50:	2300      	movs	r3, #0
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3714      	adds	r7, #20
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr

08012b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b084      	sub	sp, #16
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
 8012b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d101      	bne.n	8012b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012b72:	2302      	movs	r3, #2
 8012b74:	e02d      	b.n	8012bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2224      	movs	r2, #36	; 0x24
 8012b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f022 0201 	bic.w	r2, r2, #1
 8012b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	689b      	ldr	r3, [r3, #8]
 8012ba4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	683a      	ldr	r2, [r7, #0]
 8012bae:	430a      	orrs	r2, r1
 8012bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 f850 	bl	8012c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	68fa      	ldr	r2, [r7, #12]
 8012bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2220      	movs	r2, #32
 8012bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3710      	adds	r7, #16
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b084      	sub	sp, #16
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d101      	bne.n	8012bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012bee:	2302      	movs	r3, #2
 8012bf0:	e02d      	b.n	8012c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2224      	movs	r2, #36	; 0x24
 8012bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f022 0201 	bic.w	r2, r2, #1
 8012c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	689b      	ldr	r3, [r3, #8]
 8012c20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	683a      	ldr	r2, [r7, #0]
 8012c2a:	430a      	orrs	r2, r1
 8012c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f000 f812 	bl	8012c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	68fa      	ldr	r2, [r7, #12]
 8012c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2220      	movs	r2, #32
 8012c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3710      	adds	r7, #16
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
	...

08012c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d108      	bne.n	8012c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2201      	movs	r2, #1
 8012c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012c78:	e031      	b.n	8012cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012c7a:	2310      	movs	r3, #16
 8012c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012c7e:	2310      	movs	r3, #16
 8012c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	689b      	ldr	r3, [r3, #8]
 8012c88:	0e5b      	lsrs	r3, r3, #25
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	f003 0307 	and.w	r3, r3, #7
 8012c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	0f5b      	lsrs	r3, r3, #29
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 0307 	and.w	r3, r3, #7
 8012ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ca2:	7bbb      	ldrb	r3, [r7, #14]
 8012ca4:	7b3a      	ldrb	r2, [r7, #12]
 8012ca6:	4911      	ldr	r1, [pc, #68]	; (8012cec <UARTEx_SetNbDataToProcess+0x94>)
 8012ca8:	5c8a      	ldrb	r2, [r1, r2]
 8012caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012cae:	7b3a      	ldrb	r2, [r7, #12]
 8012cb0:	490f      	ldr	r1, [pc, #60]	; (8012cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8012cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012cc0:	7bfb      	ldrb	r3, [r7, #15]
 8012cc2:	7b7a      	ldrb	r2, [r7, #13]
 8012cc4:	4909      	ldr	r1, [pc, #36]	; (8012cec <UARTEx_SetNbDataToProcess+0x94>)
 8012cc6:	5c8a      	ldrb	r2, [r1, r2]
 8012cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012ccc:	7b7a      	ldrb	r2, [r7, #13]
 8012cce:	4908      	ldr	r1, [pc, #32]	; (8012cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8012cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012cde:	bf00      	nop
 8012ce0:	3714      	adds	r7, #20
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop
 8012cec:	08017640 	.word	0x08017640
 8012cf0:	08017648 	.word	0x08017648

08012cf4 <__NVIC_SetPriority>:
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	6039      	str	r1, [r7, #0]
 8012cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	db0a      	blt.n	8012d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	490c      	ldr	r1, [pc, #48]	; (8012d40 <__NVIC_SetPriority+0x4c>)
 8012d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d12:	0112      	lsls	r2, r2, #4
 8012d14:	b2d2      	uxtb	r2, r2
 8012d16:	440b      	add	r3, r1
 8012d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012d1c:	e00a      	b.n	8012d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	b2da      	uxtb	r2, r3
 8012d22:	4908      	ldr	r1, [pc, #32]	; (8012d44 <__NVIC_SetPriority+0x50>)
 8012d24:	88fb      	ldrh	r3, [r7, #6]
 8012d26:	f003 030f 	and.w	r3, r3, #15
 8012d2a:	3b04      	subs	r3, #4
 8012d2c:	0112      	lsls	r2, r2, #4
 8012d2e:	b2d2      	uxtb	r2, r2
 8012d30:	440b      	add	r3, r1
 8012d32:	761a      	strb	r2, [r3, #24]
}
 8012d34:	bf00      	nop
 8012d36:	370c      	adds	r7, #12
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3e:	4770      	bx	lr
 8012d40:	e000e100 	.word	0xe000e100
 8012d44:	e000ed00 	.word	0xe000ed00

08012d48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012d4c:	4b05      	ldr	r3, [pc, #20]	; (8012d64 <SysTick_Handler+0x1c>)
 8012d4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012d50:	f002 fc92 	bl	8015678 <xTaskGetSchedulerState>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d001      	beq.n	8012d5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012d5a:	f003 fab5 	bl	80162c8 <xPortSysTickHandler>
  }
}
 8012d5e:	bf00      	nop
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	e000e010 	.word	0xe000e010

08012d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	f06f 0004 	mvn.w	r0, #4
 8012d72:	f7ff ffbf 	bl	8012cf4 <__NVIC_SetPriority>
#endif
}
 8012d76:	bf00      	nop
 8012d78:	bd80      	pop	{r7, pc}
	...

08012d7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d82:	f3ef 8305 	mrs	r3, IPSR
 8012d86:	603b      	str	r3, [r7, #0]
  return(result);
 8012d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d003      	beq.n	8012d96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012d8e:	f06f 0305 	mvn.w	r3, #5
 8012d92:	607b      	str	r3, [r7, #4]
 8012d94:	e00c      	b.n	8012db0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012d96:	4b0a      	ldr	r3, [pc, #40]	; (8012dc0 <osKernelInitialize+0x44>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d105      	bne.n	8012daa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012d9e:	4b08      	ldr	r3, [pc, #32]	; (8012dc0 <osKernelInitialize+0x44>)
 8012da0:	2201      	movs	r2, #1
 8012da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012da4:	2300      	movs	r3, #0
 8012da6:	607b      	str	r3, [r7, #4]
 8012da8:	e002      	b.n	8012db0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012db0:	687b      	ldr	r3, [r7, #4]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	370c      	adds	r7, #12
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	24001110 	.word	0x24001110

08012dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dca:	f3ef 8305 	mrs	r3, IPSR
 8012dce:	603b      	str	r3, [r7, #0]
  return(result);
 8012dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d003      	beq.n	8012dde <osKernelStart+0x1a>
    stat = osErrorISR;
 8012dd6:	f06f 0305 	mvn.w	r3, #5
 8012dda:	607b      	str	r3, [r7, #4]
 8012ddc:	e010      	b.n	8012e00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012dde:	4b0b      	ldr	r3, [pc, #44]	; (8012e0c <osKernelStart+0x48>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d109      	bne.n	8012dfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012de6:	f7ff ffbf 	bl	8012d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012dea:	4b08      	ldr	r3, [pc, #32]	; (8012e0c <osKernelStart+0x48>)
 8012dec:	2202      	movs	r2, #2
 8012dee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012df0:	f001 ff54 	bl	8014c9c <vTaskStartScheduler>
      stat = osOK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	607b      	str	r3, [r7, #4]
 8012df8:	e002      	b.n	8012e00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012e00:	687b      	ldr	r3, [r7, #4]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	24001110 	.word	0x24001110

08012e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b08e      	sub	sp, #56	; 0x38
 8012e14:	af04      	add	r7, sp, #16
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	60b9      	str	r1, [r7, #8]
 8012e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e20:	f3ef 8305 	mrs	r3, IPSR
 8012e24:	617b      	str	r3, [r7, #20]
  return(result);
 8012e26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d17e      	bne.n	8012f2a <osThreadNew+0x11a>
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d07b      	beq.n	8012f2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012e32:	2380      	movs	r3, #128	; 0x80
 8012e34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012e36:	2318      	movs	r3, #24
 8012e38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d045      	beq.n	8012ed6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d002      	beq.n	8012e58 <osThreadNew+0x48>
        name = attr->name;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	699b      	ldr	r3, [r3, #24]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	699b      	ldr	r3, [r3, #24]
 8012e64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d008      	beq.n	8012e7e <osThreadNew+0x6e>
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	2b38      	cmp	r3, #56	; 0x38
 8012e70:	d805      	bhi.n	8012e7e <osThreadNew+0x6e>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	f003 0301 	and.w	r3, r3, #1
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d001      	beq.n	8012e82 <osThreadNew+0x72>
        return (NULL);
 8012e7e:	2300      	movs	r3, #0
 8012e80:	e054      	b.n	8012f2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	695b      	ldr	r3, [r3, #20]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d003      	beq.n	8012e92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	695b      	ldr	r3, [r3, #20]
 8012e8e:	089b      	lsrs	r3, r3, #2
 8012e90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	689b      	ldr	r3, [r3, #8]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d00e      	beq.n	8012eb8 <osThreadNew+0xa8>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	2b5b      	cmp	r3, #91	; 0x5b
 8012ea0:	d90a      	bls.n	8012eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d006      	beq.n	8012eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	695b      	ldr	r3, [r3, #20]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d002      	beq.n	8012eb8 <osThreadNew+0xa8>
        mem = 1;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	61bb      	str	r3, [r7, #24]
 8012eb6:	e010      	b.n	8012eda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d10c      	bne.n	8012eda <osThreadNew+0xca>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	68db      	ldr	r3, [r3, #12]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d108      	bne.n	8012eda <osThreadNew+0xca>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d104      	bne.n	8012eda <osThreadNew+0xca>
          mem = 0;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	61bb      	str	r3, [r7, #24]
 8012ed4:	e001      	b.n	8012eda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d110      	bne.n	8012f02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012ee8:	9202      	str	r2, [sp, #8]
 8012eea:	9301      	str	r3, [sp, #4]
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	6a3a      	ldr	r2, [r7, #32]
 8012ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ef6:	68f8      	ldr	r0, [r7, #12]
 8012ef8:	f001 fbe0 	bl	80146bc <xTaskCreateStatic>
 8012efc:	4603      	mov	r3, r0
 8012efe:	613b      	str	r3, [r7, #16]
 8012f00:	e013      	b.n	8012f2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d110      	bne.n	8012f2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	f107 0310 	add.w	r3, r7, #16
 8012f10:	9301      	str	r3, [sp, #4]
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	9300      	str	r3, [sp, #0]
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	f001 fc2b 	bl	8014776 <xTaskCreate>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d001      	beq.n	8012f2a <osThreadNew+0x11a>
            hTask = NULL;
 8012f26:	2300      	movs	r3, #0
 8012f28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012f2a:	693b      	ldr	r3, [r7, #16]
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3728      	adds	r7, #40	; 0x28
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012f34:	b480      	push	{r7}
 8012f36:	b083      	sub	sp, #12
 8012f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f3a:	f3ef 8305 	mrs	r3, IPSR
 8012f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8012f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d003      	beq.n	8012f4e <osThreadYield+0x1a>
    stat = osErrorISR;
 8012f46:	f06f 0305 	mvn.w	r3, #5
 8012f4a:	607b      	str	r3, [r7, #4]
 8012f4c:	e009      	b.n	8012f62 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012f52:	4b07      	ldr	r3, [pc, #28]	; (8012f70 <osThreadYield+0x3c>)
 8012f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f58:	601a      	str	r2, [r3, #0]
 8012f5a:	f3bf 8f4f 	dsb	sy
 8012f5e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012f62:	687b      	ldr	r3, [r7, #4]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	370c      	adds	r7, #12
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr
 8012f70:	e000ed04 	.word	0xe000ed04

08012f74 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f80:	f3ef 8305 	mrs	r3, IPSR
 8012f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f86:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d003      	beq.n	8012f94 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012f8c:	f06f 0305 	mvn.w	r3, #5
 8012f90:	617b      	str	r3, [r7, #20]
 8012f92:	e00b      	b.n	8012fac <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d103      	bne.n	8012fa2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012f9a:	f06f 0303 	mvn.w	r3, #3
 8012f9e:	617b      	str	r3, [r7, #20]
 8012fa0:	e004      	b.n	8012fac <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012fa6:	6938      	ldr	r0, [r7, #16]
 8012fa8:	f001 fd5e 	bl	8014a68 <vTaskSuspend>
  }

  return (stat);
 8012fac:	697b      	ldr	r3, [r7, #20]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3718      	adds	r7, #24
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b084      	sub	sp, #16
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fbe:	f3ef 8305 	mrs	r3, IPSR
 8012fc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8012fc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d003      	beq.n	8012fd2 <osDelay+0x1c>
    stat = osErrorISR;
 8012fca:	f06f 0305 	mvn.w	r3, #5
 8012fce:	60fb      	str	r3, [r7, #12]
 8012fd0:	e007      	b.n	8012fe2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d002      	beq.n	8012fe2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f001 fd0f 	bl	8014a00 <vTaskDelay>
    }
  }

  return (stat);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b086      	sub	sp, #24
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ff8:	f3ef 8305 	mrs	r3, IPSR
 8012ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ffe:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013000:	2b00      	cmp	r3, #0
 8013002:	d12d      	bne.n	8013060 <osEventFlagsNew+0x74>
    mem = -1;
 8013004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013008:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d015      	beq.n	801303c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d006      	beq.n	8013026 <osEventFlagsNew+0x3a>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	2b1f      	cmp	r3, #31
 801301e:	d902      	bls.n	8013026 <osEventFlagsNew+0x3a>
        mem = 1;
 8013020:	2301      	movs	r3, #1
 8013022:	613b      	str	r3, [r7, #16]
 8013024:	e00c      	b.n	8013040 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	689b      	ldr	r3, [r3, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d108      	bne.n	8013040 <osEventFlagsNew+0x54>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d104      	bne.n	8013040 <osEventFlagsNew+0x54>
          mem = 0;
 8013036:	2300      	movs	r3, #0
 8013038:	613b      	str	r3, [r7, #16]
 801303a:	e001      	b.n	8013040 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801303c:	2300      	movs	r3, #0
 801303e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	2b01      	cmp	r3, #1
 8013044:	d106      	bne.n	8013054 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	4618      	mov	r0, r3
 801304c:	f000 fa70 	bl	8013530 <xEventGroupCreateStatic>
 8013050:	6178      	str	r0, [r7, #20]
 8013052:	e005      	b.n	8013060 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d102      	bne.n	8013060 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801305a:	f000 faa0 	bl	801359e <xEventGroupCreate>
 801305e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013060:	697b      	ldr	r3, [r7, #20]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3718      	adds	r7, #24
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
	...

0801306c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d004      	beq.n	801308a <osEventFlagsSet+0x1e>
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013086:	2b00      	cmp	r3, #0
 8013088:	d003      	beq.n	8013092 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801308a:	f06f 0303 	mvn.w	r3, #3
 801308e:	617b      	str	r3, [r7, #20]
 8013090:	e028      	b.n	80130e4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013092:	f3ef 8305 	mrs	r3, IPSR
 8013096:	60fb      	str	r3, [r7, #12]
  return(result);
 8013098:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801309a:	2b00      	cmp	r3, #0
 801309c:	d01d      	beq.n	80130da <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801309e:	2300      	movs	r3, #0
 80130a0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80130a2:	f107 0308 	add.w	r3, r7, #8
 80130a6:	461a      	mov	r2, r3
 80130a8:	6839      	ldr	r1, [r7, #0]
 80130aa:	6938      	ldr	r0, [r7, #16]
 80130ac:	f000 fc98 	bl	80139e0 <xEventGroupSetBitsFromISR>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d103      	bne.n	80130be <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80130b6:	f06f 0302 	mvn.w	r3, #2
 80130ba:	617b      	str	r3, [r7, #20]
 80130bc:	e012      	b.n	80130e4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00d      	beq.n	80130e4 <osEventFlagsSet+0x78>
 80130c8:	4b09      	ldr	r3, [pc, #36]	; (80130f0 <osEventFlagsSet+0x84>)
 80130ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ce:	601a      	str	r2, [r3, #0]
 80130d0:	f3bf 8f4f 	dsb	sy
 80130d4:	f3bf 8f6f 	isb	sy
 80130d8:	e004      	b.n	80130e4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80130da:	6839      	ldr	r1, [r7, #0]
 80130dc:	6938      	ldr	r0, [r7, #16]
 80130de:	f000 fbb7 	bl	8013850 <xEventGroupSetBits>
 80130e2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80130e4:	697b      	ldr	r3, [r7, #20]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3718      	adds	r7, #24
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	e000ed04 	.word	0xe000ed04

080130f4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b086      	sub	sp, #24
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d004      	beq.n	8013112 <osEventFlagsClear+0x1e>
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801310e:	2b00      	cmp	r3, #0
 8013110:	d003      	beq.n	801311a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013112:	f06f 0303 	mvn.w	r3, #3
 8013116:	617b      	str	r3, [r7, #20]
 8013118:	e019      	b.n	801314e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801311a:	f3ef 8305 	mrs	r3, IPSR
 801311e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013120:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00e      	beq.n	8013144 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013126:	6938      	ldr	r0, [r7, #16]
 8013128:	f000 fb6e 	bl	8013808 <xEventGroupGetBitsFromISR>
 801312c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801312e:	6839      	ldr	r1, [r7, #0]
 8013130:	6938      	ldr	r0, [r7, #16]
 8013132:	f000 fb55 	bl	80137e0 <xEventGroupClearBitsFromISR>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d108      	bne.n	801314e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801313c:	f06f 0302 	mvn.w	r3, #2
 8013140:	617b      	str	r3, [r7, #20]
 8013142:	e004      	b.n	801314e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013144:	6839      	ldr	r1, [r7, #0]
 8013146:	6938      	ldr	r0, [r7, #16]
 8013148:	f000 fb12 	bl	8013770 <xEventGroupClearBits>
 801314c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801314e:	697b      	ldr	r3, [r7, #20]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3718      	adds	r7, #24
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8013158:	b580      	push	{r7, lr}
 801315a:	b086      	sub	sp, #24
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d102      	bne.n	8013170 <osEventFlagsGet+0x18>
    rflags = 0U;
 801316a:	2300      	movs	r3, #0
 801316c:	617b      	str	r3, [r7, #20]
 801316e:	e00f      	b.n	8013190 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013170:	f3ef 8305 	mrs	r3, IPSR
 8013174:	60fb      	str	r3, [r7, #12]
  return(result);
 8013176:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013178:	2b00      	cmp	r3, #0
 801317a:	d004      	beq.n	8013186 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801317c:	6938      	ldr	r0, [r7, #16]
 801317e:	f000 fb43 	bl	8013808 <xEventGroupGetBitsFromISR>
 8013182:	6178      	str	r0, [r7, #20]
 8013184:	e004      	b.n	8013190 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8013186:	2100      	movs	r1, #0
 8013188:	6938      	ldr	r0, [r7, #16]
 801318a:	f000 faf1 	bl	8013770 <xEventGroupClearBits>
 801318e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013190:	697b      	ldr	r3, [r7, #20]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801319a:	b580      	push	{r7, lr}
 801319c:	b08c      	sub	sp, #48	; 0x30
 801319e:	af02      	add	r7, sp, #8
 80131a0:	60f8      	str	r0, [r7, #12]
 80131a2:	60b9      	str	r1, [r7, #8]
 80131a4:	607a      	str	r2, [r7, #4]
 80131a6:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d004      	beq.n	80131bc <osEventFlagsWait+0x22>
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d003      	beq.n	80131c4 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80131bc:	f06f 0303 	mvn.w	r3, #3
 80131c0:	61fb      	str	r3, [r7, #28]
 80131c2:	e04b      	b.n	801325c <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131c4:	f3ef 8305 	mrs	r3, IPSR
 80131c8:	617b      	str	r3, [r7, #20]
  return(result);
 80131ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d003      	beq.n	80131d8 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80131d0:	f06f 0305 	mvn.w	r3, #5
 80131d4:	61fb      	str	r3, [r7, #28]
 80131d6:	e041      	b.n	801325c <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f003 0301 	and.w	r3, r3, #1
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d002      	beq.n	80131e8 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80131e2:	2301      	movs	r3, #1
 80131e4:	627b      	str	r3, [r7, #36]	; 0x24
 80131e6:	e001      	b.n	80131ec <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80131e8:	2300      	movs	r3, #0
 80131ea:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f003 0302 	and.w	r3, r3, #2
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d002      	beq.n	80131fc <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80131f6:	2300      	movs	r3, #0
 80131f8:	623b      	str	r3, [r7, #32]
 80131fa:	e001      	b.n	8013200 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80131fc:	2301      	movs	r3, #1
 80131fe:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013206:	6a3a      	ldr	r2, [r7, #32]
 8013208:	68b9      	ldr	r1, [r7, #8]
 801320a:	69b8      	ldr	r0, [r7, #24]
 801320c:	f000 f9e2 	bl	80135d4 <xEventGroupWaitBits>
 8013210:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f003 0301 	and.w	r3, r3, #1
 8013218:	2b00      	cmp	r3, #0
 801321a:	d010      	beq.n	801323e <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801321c:	68ba      	ldr	r2, [r7, #8]
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	4013      	ands	r3, r2
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	429a      	cmp	r2, r3
 8013226:	d019      	beq.n	801325c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d003      	beq.n	8013236 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801322e:	f06f 0301 	mvn.w	r3, #1
 8013232:	61fb      	str	r3, [r7, #28]
 8013234:	e012      	b.n	801325c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013236:	f06f 0302 	mvn.w	r3, #2
 801323a:	61fb      	str	r3, [r7, #28]
 801323c:	e00e      	b.n	801325c <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801323e:	68ba      	ldr	r2, [r7, #8]
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	4013      	ands	r3, r2
 8013244:	2b00      	cmp	r3, #0
 8013246:	d109      	bne.n	801325c <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d003      	beq.n	8013256 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801324e:	f06f 0301 	mvn.w	r3, #1
 8013252:	61fb      	str	r3, [r7, #28]
 8013254:	e002      	b.n	801325c <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013256:	f06f 0302 	mvn.w	r3, #2
 801325a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801325c:	69fb      	ldr	r3, [r7, #28]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3728      	adds	r7, #40	; 0x28
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013266:	b580      	push	{r7, lr}
 8013268:	b08a      	sub	sp, #40	; 0x28
 801326a:	af02      	add	r7, sp, #8
 801326c:	60f8      	str	r0, [r7, #12]
 801326e:	60b9      	str	r1, [r7, #8]
 8013270:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013272:	2300      	movs	r3, #0
 8013274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013276:	f3ef 8305 	mrs	r3, IPSR
 801327a:	613b      	str	r3, [r7, #16]
  return(result);
 801327c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801327e:	2b00      	cmp	r3, #0
 8013280:	d15f      	bne.n	8013342 <osMessageQueueNew+0xdc>
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d05c      	beq.n	8013342 <osMessageQueueNew+0xdc>
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d059      	beq.n	8013342 <osMessageQueueNew+0xdc>
    mem = -1;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013292:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d029      	beq.n	80132ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	689b      	ldr	r3, [r3, #8]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d012      	beq.n	80132c8 <osMessageQueueNew+0x62>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	2b4f      	cmp	r3, #79	; 0x4f
 80132a8:	d90e      	bls.n	80132c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d00a      	beq.n	80132c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	695a      	ldr	r2, [r3, #20]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	68b9      	ldr	r1, [r7, #8]
 80132ba:	fb01 f303 	mul.w	r3, r1, r3
 80132be:	429a      	cmp	r2, r3
 80132c0:	d302      	bcc.n	80132c8 <osMessageQueueNew+0x62>
        mem = 1;
 80132c2:	2301      	movs	r3, #1
 80132c4:	61bb      	str	r3, [r7, #24]
 80132c6:	e014      	b.n	80132f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d110      	bne.n	80132f2 <osMessageQueueNew+0x8c>
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d10c      	bne.n	80132f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d108      	bne.n	80132f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	695b      	ldr	r3, [r3, #20]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d104      	bne.n	80132f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	61bb      	str	r3, [r7, #24]
 80132ec:	e001      	b.n	80132f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80132ee:	2300      	movs	r3, #0
 80132f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	2b01      	cmp	r3, #1
 80132f6:	d10b      	bne.n	8013310 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	691a      	ldr	r2, [r3, #16]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	689b      	ldr	r3, [r3, #8]
 8013300:	2100      	movs	r1, #0
 8013302:	9100      	str	r1, [sp, #0]
 8013304:	68b9      	ldr	r1, [r7, #8]
 8013306:	68f8      	ldr	r0, [r7, #12]
 8013308:	f000 fc9a 	bl	8013c40 <xQueueGenericCreateStatic>
 801330c:	61f8      	str	r0, [r7, #28]
 801330e:	e008      	b.n	8013322 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d105      	bne.n	8013322 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013316:	2200      	movs	r2, #0
 8013318:	68b9      	ldr	r1, [r7, #8]
 801331a:	68f8      	ldr	r0, [r7, #12]
 801331c:	f000 fd08 	bl	8013d30 <xQueueGenericCreate>
 8013320:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d00c      	beq.n	8013342 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d003      	beq.n	8013336 <osMessageQueueNew+0xd0>
        name = attr->name;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	617b      	str	r3, [r7, #20]
 8013334:	e001      	b.n	801333a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013336:	2300      	movs	r3, #0
 8013338:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801333a:	6979      	ldr	r1, [r7, #20]
 801333c:	69f8      	ldr	r0, [r7, #28]
 801333e:	f001 f95f 	bl	8014600 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013342:	69fb      	ldr	r3, [r7, #28]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3720      	adds	r7, #32
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801334c:	b580      	push	{r7, lr}
 801334e:	b088      	sub	sp, #32
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	603b      	str	r3, [r7, #0]
 8013358:	4613      	mov	r3, r2
 801335a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013360:	2300      	movs	r3, #0
 8013362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013364:	f3ef 8305 	mrs	r3, IPSR
 8013368:	617b      	str	r3, [r7, #20]
  return(result);
 801336a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801336c:	2b00      	cmp	r3, #0
 801336e:	d028      	beq.n	80133c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d005      	beq.n	8013382 <osMessageQueuePut+0x36>
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d002      	beq.n	8013382 <osMessageQueuePut+0x36>
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d003      	beq.n	801338a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013382:	f06f 0303 	mvn.w	r3, #3
 8013386:	61fb      	str	r3, [r7, #28]
 8013388:	e038      	b.n	80133fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801338a:	2300      	movs	r3, #0
 801338c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801338e:	f107 0210 	add.w	r2, r7, #16
 8013392:	2300      	movs	r3, #0
 8013394:	68b9      	ldr	r1, [r7, #8]
 8013396:	69b8      	ldr	r0, [r7, #24]
 8013398:	f000 fe26 	bl	8013fe8 <xQueueGenericSendFromISR>
 801339c:	4603      	mov	r3, r0
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d003      	beq.n	80133aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80133a2:	f06f 0302 	mvn.w	r3, #2
 80133a6:	61fb      	str	r3, [r7, #28]
 80133a8:	e028      	b.n	80133fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d025      	beq.n	80133fc <osMessageQueuePut+0xb0>
 80133b0:	4b15      	ldr	r3, [pc, #84]	; (8013408 <osMessageQueuePut+0xbc>)
 80133b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133b6:	601a      	str	r2, [r3, #0]
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	e01c      	b.n	80133fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d002      	beq.n	80133ce <osMessageQueuePut+0x82>
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d103      	bne.n	80133d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80133ce:	f06f 0303 	mvn.w	r3, #3
 80133d2:	61fb      	str	r3, [r7, #28]
 80133d4:	e012      	b.n	80133fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80133d6:	2300      	movs	r3, #0
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	68b9      	ldr	r1, [r7, #8]
 80133dc:	69b8      	ldr	r0, [r7, #24]
 80133de:	f000 fd05 	bl	8013dec <xQueueGenericSend>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d009      	beq.n	80133fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d003      	beq.n	80133f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80133ee:	f06f 0301 	mvn.w	r3, #1
 80133f2:	61fb      	str	r3, [r7, #28]
 80133f4:	e002      	b.n	80133fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80133f6:	f06f 0302 	mvn.w	r3, #2
 80133fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80133fc:	69fb      	ldr	r3, [r7, #28]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3720      	adds	r7, #32
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	e000ed04 	.word	0xe000ed04

0801340c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801340c:	b580      	push	{r7, lr}
 801340e:	b088      	sub	sp, #32
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
 8013418:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801341e:	2300      	movs	r3, #0
 8013420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013422:	f3ef 8305 	mrs	r3, IPSR
 8013426:	617b      	str	r3, [r7, #20]
  return(result);
 8013428:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801342a:	2b00      	cmp	r3, #0
 801342c:	d028      	beq.n	8013480 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d005      	beq.n	8013440 <osMessageQueueGet+0x34>
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d002      	beq.n	8013440 <osMessageQueueGet+0x34>
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d003      	beq.n	8013448 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013440:	f06f 0303 	mvn.w	r3, #3
 8013444:	61fb      	str	r3, [r7, #28]
 8013446:	e037      	b.n	80134b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013448:	2300      	movs	r3, #0
 801344a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801344c:	f107 0310 	add.w	r3, r7, #16
 8013450:	461a      	mov	r2, r3
 8013452:	68b9      	ldr	r1, [r7, #8]
 8013454:	69b8      	ldr	r0, [r7, #24]
 8013456:	f000 ff43 	bl	80142e0 <xQueueReceiveFromISR>
 801345a:	4603      	mov	r3, r0
 801345c:	2b01      	cmp	r3, #1
 801345e:	d003      	beq.n	8013468 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013460:	f06f 0302 	mvn.w	r3, #2
 8013464:	61fb      	str	r3, [r7, #28]
 8013466:	e027      	b.n	80134b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d024      	beq.n	80134b8 <osMessageQueueGet+0xac>
 801346e:	4b15      	ldr	r3, [pc, #84]	; (80134c4 <osMessageQueueGet+0xb8>)
 8013470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	f3bf 8f4f 	dsb	sy
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	e01b      	b.n	80134b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d002      	beq.n	801348c <osMessageQueueGet+0x80>
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d103      	bne.n	8013494 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801348c:	f06f 0303 	mvn.w	r3, #3
 8013490:	61fb      	str	r3, [r7, #28]
 8013492:	e011      	b.n	80134b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013494:	683a      	ldr	r2, [r7, #0]
 8013496:	68b9      	ldr	r1, [r7, #8]
 8013498:	69b8      	ldr	r0, [r7, #24]
 801349a:	f000 fe41 	bl	8014120 <xQueueReceive>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	d009      	beq.n	80134b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d003      	beq.n	80134b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80134aa:	f06f 0301 	mvn.w	r3, #1
 80134ae:	61fb      	str	r3, [r7, #28]
 80134b0:	e002      	b.n	80134b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80134b2:	f06f 0302 	mvn.w	r3, #2
 80134b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80134b8:	69fb      	ldr	r3, [r7, #28]
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3720      	adds	r7, #32
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	e000ed04 	.word	0xe000ed04

080134c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80134c8:	b480      	push	{r7}
 80134ca:	b085      	sub	sp, #20
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	4a07      	ldr	r2, [pc, #28]	; (80134f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80134d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	4a06      	ldr	r2, [pc, #24]	; (80134f8 <vApplicationGetIdleTaskMemory+0x30>)
 80134de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2280      	movs	r2, #128	; 0x80
 80134e4:	601a      	str	r2, [r3, #0]
}
 80134e6:	bf00      	nop
 80134e8:	3714      	adds	r7, #20
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop
 80134f4:	24001114 	.word	0x24001114
 80134f8:	24001170 	.word	0x24001170

080134fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	4a07      	ldr	r2, [pc, #28]	; (8013528 <vApplicationGetTimerTaskMemory+0x2c>)
 801350c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	4a06      	ldr	r2, [pc, #24]	; (801352c <vApplicationGetTimerTaskMemory+0x30>)
 8013512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f44f 7280 	mov.w	r2, #256	; 0x100
 801351a:	601a      	str	r2, [r3, #0]
}
 801351c:	bf00      	nop
 801351e:	3714      	adds	r7, #20
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr
 8013528:	24001370 	.word	0x24001370
 801352c:	240013cc 	.word	0x240013cc

08013530 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10a      	bne.n	8013554 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013542:	f383 8811 	msr	BASEPRI, r3
 8013546:	f3bf 8f6f 	isb	sy
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013550:	bf00      	nop
 8013552:	e7fe      	b.n	8013552 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013554:	2320      	movs	r3, #32
 8013556:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2b20      	cmp	r3, #32
 801355c:	d00a      	beq.n	8013574 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013562:	f383 8811 	msr	BASEPRI, r3
 8013566:	f3bf 8f6f 	isb	sy
 801356a:	f3bf 8f4f 	dsb	sy
 801356e:	60fb      	str	r3, [r7, #12]
}
 8013570:	bf00      	nop
 8013572:	e7fe      	b.n	8013572 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00a      	beq.n	8013594 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	2200      	movs	r2, #0
 8013582:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	3304      	adds	r3, #4
 8013588:	4618      	mov	r0, r3
 801358a:	f000 fa3d 	bl	8013a08 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	2201      	movs	r2, #1
 8013592:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013594:	697b      	ldr	r3, [r7, #20]
	}
 8013596:	4618      	mov	r0, r3
 8013598:	3718      	adds	r7, #24
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801359e:	b580      	push	{r7, lr}
 80135a0:	b082      	sub	sp, #8
 80135a2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80135a4:	2020      	movs	r0, #32
 80135a6:	f002 ff1f 	bl	80163e8 <pvPortMalloc>
 80135aa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d00a      	beq.n	80135c8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	3304      	adds	r3, #4
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 fa23 	bl	8013a08 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2200      	movs	r2, #0
 80135c6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80135c8:	687b      	ldr	r3, [r7, #4]
	}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3708      	adds	r7, #8
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
	...

080135d4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b090      	sub	sp, #64	; 0x40
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
 80135e0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80135e6:	2300      	movs	r3, #0
 80135e8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80135ea:	2300      	movs	r3, #0
 80135ec:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d10a      	bne.n	801360a <xEventGroupWaitBits+0x36>
	__asm volatile
 80135f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f8:	f383 8811 	msr	BASEPRI, r3
 80135fc:	f3bf 8f6f 	isb	sy
 8013600:	f3bf 8f4f 	dsb	sy
 8013604:	623b      	str	r3, [r7, #32]
}
 8013606:	bf00      	nop
 8013608:	e7fe      	b.n	8013608 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013610:	2b00      	cmp	r3, #0
 8013612:	d00a      	beq.n	801362a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013618:	f383 8811 	msr	BASEPRI, r3
 801361c:	f3bf 8f6f 	isb	sy
 8013620:	f3bf 8f4f 	dsb	sy
 8013624:	61fb      	str	r3, [r7, #28]
}
 8013626:	bf00      	nop
 8013628:	e7fe      	b.n	8013628 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d10a      	bne.n	8013646 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013634:	f383 8811 	msr	BASEPRI, r3
 8013638:	f3bf 8f6f 	isb	sy
 801363c:	f3bf 8f4f 	dsb	sy
 8013640:	61bb      	str	r3, [r7, #24]
}
 8013642:	bf00      	nop
 8013644:	e7fe      	b.n	8013644 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013646:	f002 f817 	bl	8015678 <xTaskGetSchedulerState>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <xEventGroupWaitBits+0x82>
 8013650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013652:	2b00      	cmp	r3, #0
 8013654:	d101      	bne.n	801365a <xEventGroupWaitBits+0x86>
 8013656:	2301      	movs	r3, #1
 8013658:	e000      	b.n	801365c <xEventGroupWaitBits+0x88>
 801365a:	2300      	movs	r3, #0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d10a      	bne.n	8013676 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	617b      	str	r3, [r7, #20]
}
 8013672:	bf00      	nop
 8013674:	e7fe      	b.n	8013674 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013676:	f001 fb77 	bl	8014d68 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	68b9      	ldr	r1, [r7, #8]
 8013684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013686:	f000 f988 	bl	801399a <prvTestWaitCondition>
 801368a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368e:	2b00      	cmp	r3, #0
 8013690:	d00e      	beq.n	80136b0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013696:	2300      	movs	r3, #0
 8013698:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d028      	beq.n	80136f2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80136a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	43db      	mvns	r3, r3
 80136a8:	401a      	ands	r2, r3
 80136aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	e020      	b.n	80136f2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80136b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d104      	bne.n	80136c0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80136b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80136ba:	2301      	movs	r3, #1
 80136bc:	633b      	str	r3, [r7, #48]	; 0x30
 80136be:	e018      	b.n	80136f2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d003      	beq.n	80136ce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80136c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80136cc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d003      	beq.n	80136dc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80136d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80136da:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80136dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136de:	1d18      	adds	r0, r3, #4
 80136e0:	68ba      	ldr	r2, [r7, #8]
 80136e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e4:	4313      	orrs	r3, r2
 80136e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136e8:	4619      	mov	r1, r3
 80136ea:	f001 fd3d 	bl	8015168 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80136f2:	f001 fb47 	bl	8014d84 <xTaskResumeAll>
 80136f6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80136f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d031      	beq.n	8013762 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80136fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013700:	2b00      	cmp	r3, #0
 8013702:	d107      	bne.n	8013714 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013704:	4b19      	ldr	r3, [pc, #100]	; (801376c <xEventGroupWaitBits+0x198>)
 8013706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	f3bf 8f4f 	dsb	sy
 8013710:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013714:	f002 f83c 	bl	8015790 <uxTaskResetEventItemValue>
 8013718:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801371a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013720:	2b00      	cmp	r3, #0
 8013722:	d11a      	bne.n	801375a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013724:	f002 fd3e 	bl	80161a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	68b9      	ldr	r1, [r7, #8]
 8013732:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013734:	f000 f931 	bl	801399a <prvTestWaitCondition>
 8013738:	4603      	mov	r3, r0
 801373a:	2b00      	cmp	r3, #0
 801373c:	d009      	beq.n	8013752 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d006      	beq.n	8013752 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	43db      	mvns	r3, r3
 801374c:	401a      	ands	r2, r3
 801374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013750:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013752:	2301      	movs	r3, #1
 8013754:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013756:	f002 fd55 	bl	8016204 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801375a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801375c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013760:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013764:	4618      	mov	r0, r3
 8013766:	3740      	adds	r7, #64	; 0x40
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	e000ed04 	.word	0xe000ed04

08013770 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b086      	sub	sp, #24
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d10a      	bne.n	801379a <xEventGroupClearBits+0x2a>
	__asm volatile
 8013784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013788:	f383 8811 	msr	BASEPRI, r3
 801378c:	f3bf 8f6f 	isb	sy
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	60fb      	str	r3, [r7, #12]
}
 8013796:	bf00      	nop
 8013798:	e7fe      	b.n	8013798 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d00a      	beq.n	80137ba <xEventGroupClearBits+0x4a>
	__asm volatile
 80137a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a8:	f383 8811 	msr	BASEPRI, r3
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	f3bf 8f4f 	dsb	sy
 80137b4:	60bb      	str	r3, [r7, #8]
}
 80137b6:	bf00      	nop
 80137b8:	e7fe      	b.n	80137b8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80137ba:	f002 fcf3 	bl	80161a4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	43db      	mvns	r3, r3
 80137cc:	401a      	ands	r2, r3
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80137d2:	f002 fd17 	bl	8016204 <vPortExitCritical>

	return uxReturn;
 80137d6:	693b      	ldr	r3, [r7, #16]
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3718      	adds	r7, #24
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b084      	sub	sp, #16
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80137ea:	2300      	movs	r3, #0
 80137ec:	683a      	ldr	r2, [r7, #0]
 80137ee:	6879      	ldr	r1, [r7, #4]
 80137f0:	4804      	ldr	r0, [pc, #16]	; (8013804 <xEventGroupClearBitsFromISR+0x24>)
 80137f2:	f002 fb87 	bl	8015f04 <xTimerPendFunctionCallFromISR>
 80137f6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80137f8:	68fb      	ldr	r3, [r7, #12]
	}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3710      	adds	r7, #16
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	08013981 	.word	0x08013981

08013808 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013808:	b480      	push	{r7}
 801380a:	b089      	sub	sp, #36	; 0x24
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013814:	f3ef 8211 	mrs	r2, BASEPRI
 8013818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381c:	f383 8811 	msr	BASEPRI, r3
 8013820:	f3bf 8f6f 	isb	sy
 8013824:	f3bf 8f4f 	dsb	sy
 8013828:	60fa      	str	r2, [r7, #12]
 801382a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801382c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801382e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	617b      	str	r3, [r7, #20]
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013840:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013842:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013844:	4618      	mov	r0, r3
 8013846:	3724      	adds	r7, #36	; 0x24
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b08e      	sub	sp, #56	; 0x38
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801385a:	2300      	movs	r3, #0
 801385c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013862:	2300      	movs	r3, #0
 8013864:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d10a      	bne.n	8013882 <xEventGroupSetBits+0x32>
	__asm volatile
 801386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013870:	f383 8811 	msr	BASEPRI, r3
 8013874:	f3bf 8f6f 	isb	sy
 8013878:	f3bf 8f4f 	dsb	sy
 801387c:	613b      	str	r3, [r7, #16]
}
 801387e:	bf00      	nop
 8013880:	e7fe      	b.n	8013880 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013888:	2b00      	cmp	r3, #0
 801388a:	d00a      	beq.n	80138a2 <xEventGroupSetBits+0x52>
	__asm volatile
 801388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	60fb      	str	r3, [r7, #12]
}
 801389e:	bf00      	nop
 80138a0:	e7fe      	b.n	80138a0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80138a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a4:	3304      	adds	r3, #4
 80138a6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138aa:	3308      	adds	r3, #8
 80138ac:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80138ae:	f001 fa5b 	bl	8014d68 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80138b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b4:	68db      	ldr	r3, [r3, #12]
 80138b6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80138b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	431a      	orrs	r2, r3
 80138c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80138c4:	e03c      	b.n	8013940 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80138c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80138cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80138d2:	2300      	movs	r3, #0
 80138d4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138dc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80138e4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d108      	bne.n	8013902 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80138f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	4013      	ands	r3, r2
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00b      	beq.n	8013914 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80138fc:	2301      	movs	r3, #1
 80138fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013900:	e008      	b.n	8013914 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	4013      	ands	r3, r2
 801390a:	69ba      	ldr	r2, [r7, #24]
 801390c:	429a      	cmp	r2, r3
 801390e:	d101      	bne.n	8013914 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013910:	2301      	movs	r3, #1
 8013912:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013916:	2b00      	cmp	r3, #0
 8013918:	d010      	beq.n	801393c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013920:	2b00      	cmp	r3, #0
 8013922:	d003      	beq.n	801392c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	4313      	orrs	r3, r2
 801392a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013934:	4619      	mov	r1, r3
 8013936:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013938:	f001 fce2 	bl	8015300 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013942:	6a3b      	ldr	r3, [r7, #32]
 8013944:	429a      	cmp	r2, r3
 8013946:	d1be      	bne.n	80138c6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394e:	43db      	mvns	r3, r3
 8013950:	401a      	ands	r2, r3
 8013952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013954:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013956:	f001 fa15 	bl	8014d84 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395c:	681b      	ldr	r3, [r3, #0]
}
 801395e:	4618      	mov	r0, r3
 8013960:	3738      	adds	r7, #56	; 0x38
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013966:	b580      	push	{r7, lr}
 8013968:	b082      	sub	sp, #8
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
 801396e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013970:	6839      	ldr	r1, [r7, #0]
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7ff ff6c 	bl	8013850 <xEventGroupSetBits>
}
 8013978:	bf00      	nop
 801397a:	3708      	adds	r7, #8
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801398a:	6839      	ldr	r1, [r7, #0]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7ff feef 	bl	8013770 <xEventGroupClearBits>
}
 8013992:	bf00      	nop
 8013994:	3708      	adds	r7, #8
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801399a:	b480      	push	{r7}
 801399c:	b087      	sub	sp, #28
 801399e:	af00      	add	r7, sp, #0
 80139a0:	60f8      	str	r0, [r7, #12]
 80139a2:	60b9      	str	r1, [r7, #8]
 80139a4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80139a6:	2300      	movs	r3, #0
 80139a8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d107      	bne.n	80139c0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80139b0:	68fa      	ldr	r2, [r7, #12]
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	4013      	ands	r3, r2
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00a      	beq.n	80139d0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80139ba:	2301      	movs	r3, #1
 80139bc:	617b      	str	r3, [r7, #20]
 80139be:	e007      	b.n	80139d0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80139c0:	68fa      	ldr	r2, [r7, #12]
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	4013      	ands	r3, r2
 80139c6:	68ba      	ldr	r2, [r7, #8]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d101      	bne.n	80139d0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80139cc:	2301      	movs	r3, #1
 80139ce:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80139d0:	697b      	ldr	r3, [r7, #20]
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	371c      	adds	r7, #28
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr
	...

080139e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b086      	sub	sp, #24
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	68f9      	ldr	r1, [r7, #12]
 80139f2:	4804      	ldr	r0, [pc, #16]	; (8013a04 <xEventGroupSetBitsFromISR+0x24>)
 80139f4:	f002 fa86 	bl	8015f04 <xTimerPendFunctionCallFromISR>
 80139f8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80139fa:	697b      	ldr	r3, [r7, #20]
	}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3718      	adds	r7, #24
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	08013967 	.word	0x08013967

08013a08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f103 0208 	add.w	r2, r3, #8
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f103 0208 	add.w	r2, r3, #8
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f103 0208 	add.w	r2, r3, #8
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013a3c:	bf00      	nop
 8013a3e:	370c      	adds	r7, #12
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2200      	movs	r2, #0
 8013a54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013a56:	bf00      	nop
 8013a58:	370c      	adds	r7, #12
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr

08013a62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013a62:	b480      	push	{r7}
 8013a64:	b085      	sub	sp, #20
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
 8013a6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	689a      	ldr	r2, [r3, #8]
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	683a      	ldr	r2, [r7, #0]
 8013a86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	683a      	ldr	r2, [r7, #0]
 8013a8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	1c5a      	adds	r2, r3, #1
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	601a      	str	r2, [r3, #0]
}
 8013a9e:	bf00      	nop
 8013aa0:	3714      	adds	r7, #20
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr

08013aaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013aaa:	b480      	push	{r7}
 8013aac:	b085      	sub	sp, #20
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
 8013ab2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ac0:	d103      	bne.n	8013aca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	691b      	ldr	r3, [r3, #16]
 8013ac6:	60fb      	str	r3, [r7, #12]
 8013ac8:	e00c      	b.n	8013ae4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	3308      	adds	r3, #8
 8013ace:	60fb      	str	r3, [r7, #12]
 8013ad0:	e002      	b.n	8013ad8 <vListInsert+0x2e>
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	60fb      	str	r3, [r7, #12]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	68ba      	ldr	r2, [r7, #8]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d2f6      	bcs.n	8013ad2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	685a      	ldr	r2, [r3, #4]
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	683a      	ldr	r2, [r7, #0]
 8013af2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	683a      	ldr	r2, [r7, #0]
 8013afe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	1c5a      	adds	r2, r3, #1
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	601a      	str	r2, [r3, #0]
}
 8013b10:	bf00      	nop
 8013b12:	3714      	adds	r7, #20
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b085      	sub	sp, #20
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	691b      	ldr	r3, [r3, #16]
 8013b28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	6892      	ldr	r2, [r2, #8]
 8013b32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	6852      	ldr	r2, [r2, #4]
 8013b3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	687a      	ldr	r2, [r7, #4]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d103      	bne.n	8013b50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	689a      	ldr	r2, [r3, #8]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2200      	movs	r2, #0
 8013b54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	1e5a      	subs	r2, r3, #1
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	681b      	ldr	r3, [r3, #0]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3714      	adds	r7, #20
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d10a      	bne.n	8013b9a <xQueueGenericReset+0x2a>
	__asm volatile
 8013b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b88:	f383 8811 	msr	BASEPRI, r3
 8013b8c:	f3bf 8f6f 	isb	sy
 8013b90:	f3bf 8f4f 	dsb	sy
 8013b94:	60bb      	str	r3, [r7, #8]
}
 8013b96:	bf00      	nop
 8013b98:	e7fe      	b.n	8013b98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013b9a:	f002 fb03 	bl	80161a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ba6:	68f9      	ldr	r1, [r7, #12]
 8013ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013baa:	fb01 f303 	mul.w	r3, r1, r3
 8013bae:	441a      	add	r2, r3
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	68f9      	ldr	r1, [r7, #12]
 8013bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013bd0:	fb01 f303 	mul.w	r3, r1, r3
 8013bd4:	441a      	add	r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	22ff      	movs	r2, #255	; 0xff
 8013bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	22ff      	movs	r2, #255	; 0xff
 8013be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d114      	bne.n	8013c1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	691b      	ldr	r3, [r3, #16]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d01a      	beq.n	8013c2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	3310      	adds	r3, #16
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f001 fb1b 	bl	8015238 <xTaskRemoveFromEventList>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d012      	beq.n	8013c2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013c08:	4b0c      	ldr	r3, [pc, #48]	; (8013c3c <xQueueGenericReset+0xcc>)
 8013c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	f3bf 8f4f 	dsb	sy
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	e009      	b.n	8013c2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	3310      	adds	r3, #16
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7ff fef2 	bl	8013a08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	3324      	adds	r3, #36	; 0x24
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7ff feed 	bl	8013a08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013c2e:	f002 fae9 	bl	8016204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013c32:	2301      	movs	r3, #1
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3710      	adds	r7, #16
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	e000ed04 	.word	0xe000ed04

08013c40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b08e      	sub	sp, #56	; 0x38
 8013c44:	af02      	add	r7, sp, #8
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
 8013c4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d10a      	bne.n	8013c6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c58:	f383 8811 	msr	BASEPRI, r3
 8013c5c:	f3bf 8f6f 	isb	sy
 8013c60:	f3bf 8f4f 	dsb	sy
 8013c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013c66:	bf00      	nop
 8013c68:	e7fe      	b.n	8013c68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d10a      	bne.n	8013c86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c74:	f383 8811 	msr	BASEPRI, r3
 8013c78:	f3bf 8f6f 	isb	sy
 8013c7c:	f3bf 8f4f 	dsb	sy
 8013c80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013c82:	bf00      	nop
 8013c84:	e7fe      	b.n	8013c84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d002      	beq.n	8013c92 <xQueueGenericCreateStatic+0x52>
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d001      	beq.n	8013c96 <xQueueGenericCreateStatic+0x56>
 8013c92:	2301      	movs	r3, #1
 8013c94:	e000      	b.n	8013c98 <xQueueGenericCreateStatic+0x58>
 8013c96:	2300      	movs	r3, #0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d10a      	bne.n	8013cb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca0:	f383 8811 	msr	BASEPRI, r3
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f3bf 8f4f 	dsb	sy
 8013cac:	623b      	str	r3, [r7, #32]
}
 8013cae:	bf00      	nop
 8013cb0:	e7fe      	b.n	8013cb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d102      	bne.n	8013cbe <xQueueGenericCreateStatic+0x7e>
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d101      	bne.n	8013cc2 <xQueueGenericCreateStatic+0x82>
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e000      	b.n	8013cc4 <xQueueGenericCreateStatic+0x84>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10a      	bne.n	8013cde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ccc:	f383 8811 	msr	BASEPRI, r3
 8013cd0:	f3bf 8f6f 	isb	sy
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	61fb      	str	r3, [r7, #28]
}
 8013cda:	bf00      	nop
 8013cdc:	e7fe      	b.n	8013cdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013cde:	2350      	movs	r3, #80	; 0x50
 8013ce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	2b50      	cmp	r3, #80	; 0x50
 8013ce6:	d00a      	beq.n	8013cfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cec:	f383 8811 	msr	BASEPRI, r3
 8013cf0:	f3bf 8f6f 	isb	sy
 8013cf4:	f3bf 8f4f 	dsb	sy
 8013cf8:	61bb      	str	r3, [r7, #24]
}
 8013cfa:	bf00      	nop
 8013cfc:	e7fe      	b.n	8013cfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013cfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00d      	beq.n	8013d26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013d12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	68b9      	ldr	r1, [r7, #8]
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f000 f83f 	bl	8013da4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3730      	adds	r7, #48	; 0x30
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b08a      	sub	sp, #40	; 0x28
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	60b9      	str	r1, [r7, #8]
 8013d3a:	4613      	mov	r3, r2
 8013d3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d10a      	bne.n	8013d5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8013d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d48:	f383 8811 	msr	BASEPRI, r3
 8013d4c:	f3bf 8f6f 	isb	sy
 8013d50:	f3bf 8f4f 	dsb	sy
 8013d54:	613b      	str	r3, [r7, #16]
}
 8013d56:	bf00      	nop
 8013d58:	e7fe      	b.n	8013d58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	68ba      	ldr	r2, [r7, #8]
 8013d5e:	fb02 f303 	mul.w	r3, r2, r3
 8013d62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	3350      	adds	r3, #80	; 0x50
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f002 fb3d 	bl	80163e8 <pvPortMalloc>
 8013d6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d011      	beq.n	8013d9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	3350      	adds	r3, #80	; 0x50
 8013d7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	2200      	movs	r2, #0
 8013d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013d88:	79fa      	ldrb	r2, [r7, #7]
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	4613      	mov	r3, r2
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	68b9      	ldr	r1, [r7, #8]
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f000 f805 	bl	8013da4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3720      	adds	r7, #32
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	607a      	str	r2, [r7, #4]
 8013db0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d103      	bne.n	8013dc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	69ba      	ldr	r2, [r7, #24]
 8013dbc:	601a      	str	r2, [r3, #0]
 8013dbe:	e002      	b.n	8013dc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	68ba      	ldr	r2, [r7, #8]
 8013dd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013dd2:	2101      	movs	r1, #1
 8013dd4:	69b8      	ldr	r0, [r7, #24]
 8013dd6:	f7ff fecb 	bl	8013b70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	78fa      	ldrb	r2, [r7, #3]
 8013dde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013de2:	bf00      	nop
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
	...

08013dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b08e      	sub	sp, #56	; 0x38
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
 8013df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d10a      	bne.n	8013e1e <xQueueGenericSend+0x32>
	__asm volatile
 8013e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e0c:	f383 8811 	msr	BASEPRI, r3
 8013e10:	f3bf 8f6f 	isb	sy
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e1a:	bf00      	nop
 8013e1c:	e7fe      	b.n	8013e1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d103      	bne.n	8013e2c <xQueueGenericSend+0x40>
 8013e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d101      	bne.n	8013e30 <xQueueGenericSend+0x44>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e000      	b.n	8013e32 <xQueueGenericSend+0x46>
 8013e30:	2300      	movs	r3, #0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10a      	bne.n	8013e4c <xQueueGenericSend+0x60>
	__asm volatile
 8013e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e3a:	f383 8811 	msr	BASEPRI, r3
 8013e3e:	f3bf 8f6f 	isb	sy
 8013e42:	f3bf 8f4f 	dsb	sy
 8013e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e48:	bf00      	nop
 8013e4a:	e7fe      	b.n	8013e4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	2b02      	cmp	r3, #2
 8013e50:	d103      	bne.n	8013e5a <xQueueGenericSend+0x6e>
 8013e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d101      	bne.n	8013e5e <xQueueGenericSend+0x72>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e000      	b.n	8013e60 <xQueueGenericSend+0x74>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d10a      	bne.n	8013e7a <xQueueGenericSend+0x8e>
	__asm volatile
 8013e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e68:	f383 8811 	msr	BASEPRI, r3
 8013e6c:	f3bf 8f6f 	isb	sy
 8013e70:	f3bf 8f4f 	dsb	sy
 8013e74:	623b      	str	r3, [r7, #32]
}
 8013e76:	bf00      	nop
 8013e78:	e7fe      	b.n	8013e78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e7a:	f001 fbfd 	bl	8015678 <xTaskGetSchedulerState>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d102      	bne.n	8013e8a <xQueueGenericSend+0x9e>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d101      	bne.n	8013e8e <xQueueGenericSend+0xa2>
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e000      	b.n	8013e90 <xQueueGenericSend+0xa4>
 8013e8e:	2300      	movs	r3, #0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d10a      	bne.n	8013eaa <xQueueGenericSend+0xbe>
	__asm volatile
 8013e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e98:	f383 8811 	msr	BASEPRI, r3
 8013e9c:	f3bf 8f6f 	isb	sy
 8013ea0:	f3bf 8f4f 	dsb	sy
 8013ea4:	61fb      	str	r3, [r7, #28]
}
 8013ea6:	bf00      	nop
 8013ea8:	e7fe      	b.n	8013ea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013eaa:	f002 f97b 	bl	80161a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d302      	bcc.n	8013ec0 <xQueueGenericSend+0xd4>
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	2b02      	cmp	r3, #2
 8013ebe:	d129      	bne.n	8013f14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ec0:	683a      	ldr	r2, [r7, #0]
 8013ec2:	68b9      	ldr	r1, [r7, #8]
 8013ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ec6:	f000 fa8b 	bl	80143e0 <prvCopyDataToQueue>
 8013eca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d010      	beq.n	8013ef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed6:	3324      	adds	r3, #36	; 0x24
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f001 f9ad 	bl	8015238 <xTaskRemoveFromEventList>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d013      	beq.n	8013f0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013ee4:	4b3f      	ldr	r3, [pc, #252]	; (8013fe4 <xQueueGenericSend+0x1f8>)
 8013ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013eea:	601a      	str	r2, [r3, #0]
 8013eec:	f3bf 8f4f 	dsb	sy
 8013ef0:	f3bf 8f6f 	isb	sy
 8013ef4:	e00a      	b.n	8013f0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d007      	beq.n	8013f0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013efc:	4b39      	ldr	r3, [pc, #228]	; (8013fe4 <xQueueGenericSend+0x1f8>)
 8013efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	f3bf 8f4f 	dsb	sy
 8013f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013f0c:	f002 f97a 	bl	8016204 <vPortExitCritical>
				return pdPASS;
 8013f10:	2301      	movs	r3, #1
 8013f12:	e063      	b.n	8013fdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d103      	bne.n	8013f22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f1a:	f002 f973 	bl	8016204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	e05c      	b.n	8013fdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d106      	bne.n	8013f36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f28:	f107 0314 	add.w	r3, r7, #20
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f001 fa49 	bl	80153c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f32:	2301      	movs	r3, #1
 8013f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f36:	f002 f965 	bl	8016204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f3a:	f000 ff15 	bl	8014d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f3e:	f002 f931 	bl	80161a4 <vPortEnterCritical>
 8013f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f48:	b25b      	sxtb	r3, r3
 8013f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f4e:	d103      	bne.n	8013f58 <xQueueGenericSend+0x16c>
 8013f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f52:	2200      	movs	r2, #0
 8013f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f5e:	b25b      	sxtb	r3, r3
 8013f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f64:	d103      	bne.n	8013f6e <xQueueGenericSend+0x182>
 8013f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f68:	2200      	movs	r2, #0
 8013f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f6e:	f002 f949 	bl	8016204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f72:	1d3a      	adds	r2, r7, #4
 8013f74:	f107 0314 	add.w	r3, r7, #20
 8013f78:	4611      	mov	r1, r2
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f001 fa38 	bl	80153f0 <xTaskCheckForTimeOut>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d124      	bne.n	8013fd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f88:	f000 fb22 	bl	80145d0 <prvIsQueueFull>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d018      	beq.n	8013fc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f94:	3310      	adds	r3, #16
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	4611      	mov	r1, r2
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f001 f8c0 	bl	8015120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fa2:	f000 faad 	bl	8014500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013fa6:	f000 feed 	bl	8014d84 <xTaskResumeAll>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	f47f af7c 	bne.w	8013eaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013fb2:	4b0c      	ldr	r3, [pc, #48]	; (8013fe4 <xQueueGenericSend+0x1f8>)
 8013fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fb8:	601a      	str	r2, [r3, #0]
 8013fba:	f3bf 8f4f 	dsb	sy
 8013fbe:	f3bf 8f6f 	isb	sy
 8013fc2:	e772      	b.n	8013eaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fc6:	f000 fa9b 	bl	8014500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013fca:	f000 fedb 	bl	8014d84 <xTaskResumeAll>
 8013fce:	e76c      	b.n	8013eaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fd2:	f000 fa95 	bl	8014500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013fd6:	f000 fed5 	bl	8014d84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3738      	adds	r7, #56	; 0x38
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	e000ed04 	.word	0xe000ed04

08013fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b090      	sub	sp, #64	; 0x40
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d10a      	bne.n	8014016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014004:	f383 8811 	msr	BASEPRI, r3
 8014008:	f3bf 8f6f 	isb	sy
 801400c:	f3bf 8f4f 	dsb	sy
 8014010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014012:	bf00      	nop
 8014014:	e7fe      	b.n	8014014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d103      	bne.n	8014024 <xQueueGenericSendFromISR+0x3c>
 801401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014020:	2b00      	cmp	r3, #0
 8014022:	d101      	bne.n	8014028 <xQueueGenericSendFromISR+0x40>
 8014024:	2301      	movs	r3, #1
 8014026:	e000      	b.n	801402a <xQueueGenericSendFromISR+0x42>
 8014028:	2300      	movs	r3, #0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d10a      	bne.n	8014044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014032:	f383 8811 	msr	BASEPRI, r3
 8014036:	f3bf 8f6f 	isb	sy
 801403a:	f3bf 8f4f 	dsb	sy
 801403e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014040:	bf00      	nop
 8014042:	e7fe      	b.n	8014042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	2b02      	cmp	r3, #2
 8014048:	d103      	bne.n	8014052 <xQueueGenericSendFromISR+0x6a>
 801404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801404e:	2b01      	cmp	r3, #1
 8014050:	d101      	bne.n	8014056 <xQueueGenericSendFromISR+0x6e>
 8014052:	2301      	movs	r3, #1
 8014054:	e000      	b.n	8014058 <xQueueGenericSendFromISR+0x70>
 8014056:	2300      	movs	r3, #0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d10a      	bne.n	8014072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014060:	f383 8811 	msr	BASEPRI, r3
 8014064:	f3bf 8f6f 	isb	sy
 8014068:	f3bf 8f4f 	dsb	sy
 801406c:	623b      	str	r3, [r7, #32]
}
 801406e:	bf00      	nop
 8014070:	e7fe      	b.n	8014070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014072:	f002 f979 	bl	8016368 <vPortValidateInterruptPriority>
	__asm volatile
 8014076:	f3ef 8211 	mrs	r2, BASEPRI
 801407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801407e:	f383 8811 	msr	BASEPRI, r3
 8014082:	f3bf 8f6f 	isb	sy
 8014086:	f3bf 8f4f 	dsb	sy
 801408a:	61fa      	str	r2, [r7, #28]
 801408c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801408e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801409a:	429a      	cmp	r2, r3
 801409c:	d302      	bcc.n	80140a4 <xQueueGenericSendFromISR+0xbc>
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	2b02      	cmp	r3, #2
 80140a2:	d12f      	bne.n	8014104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80140a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80140ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80140b4:	683a      	ldr	r2, [r7, #0]
 80140b6:	68b9      	ldr	r1, [r7, #8]
 80140b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80140ba:	f000 f991 	bl	80143e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80140be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80140c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140c6:	d112      	bne.n	80140ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80140c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d016      	beq.n	80140fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80140d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d2:	3324      	adds	r3, #36	; 0x24
 80140d4:	4618      	mov	r0, r3
 80140d6:	f001 f8af 	bl	8015238 <xTaskRemoveFromEventList>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d00e      	beq.n	80140fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00b      	beq.n	80140fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2201      	movs	r2, #1
 80140ea:	601a      	str	r2, [r3, #0]
 80140ec:	e007      	b.n	80140fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80140ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140f2:	3301      	adds	r3, #1
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	b25a      	sxtb	r2, r3
 80140f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80140fe:	2301      	movs	r3, #1
 8014100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014102:	e001      	b.n	8014108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014104:	2300      	movs	r3, #0
 8014106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	f383 8811 	msr	BASEPRI, r3
}
 8014112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014116:	4618      	mov	r0, r3
 8014118:	3740      	adds	r7, #64	; 0x40
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
	...

08014120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b08c      	sub	sp, #48	; 0x30
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801412c:	2300      	movs	r3, #0
 801412e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014136:	2b00      	cmp	r3, #0
 8014138:	d10a      	bne.n	8014150 <xQueueReceive+0x30>
	__asm volatile
 801413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801413e:	f383 8811 	msr	BASEPRI, r3
 8014142:	f3bf 8f6f 	isb	sy
 8014146:	f3bf 8f4f 	dsb	sy
 801414a:	623b      	str	r3, [r7, #32]
}
 801414c:	bf00      	nop
 801414e:	e7fe      	b.n	801414e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d103      	bne.n	801415e <xQueueReceive+0x3e>
 8014156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801415a:	2b00      	cmp	r3, #0
 801415c:	d101      	bne.n	8014162 <xQueueReceive+0x42>
 801415e:	2301      	movs	r3, #1
 8014160:	e000      	b.n	8014164 <xQueueReceive+0x44>
 8014162:	2300      	movs	r3, #0
 8014164:	2b00      	cmp	r3, #0
 8014166:	d10a      	bne.n	801417e <xQueueReceive+0x5e>
	__asm volatile
 8014168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801416c:	f383 8811 	msr	BASEPRI, r3
 8014170:	f3bf 8f6f 	isb	sy
 8014174:	f3bf 8f4f 	dsb	sy
 8014178:	61fb      	str	r3, [r7, #28]
}
 801417a:	bf00      	nop
 801417c:	e7fe      	b.n	801417c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801417e:	f001 fa7b 	bl	8015678 <xTaskGetSchedulerState>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d102      	bne.n	801418e <xQueueReceive+0x6e>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d101      	bne.n	8014192 <xQueueReceive+0x72>
 801418e:	2301      	movs	r3, #1
 8014190:	e000      	b.n	8014194 <xQueueReceive+0x74>
 8014192:	2300      	movs	r3, #0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10a      	bne.n	80141ae <xQueueReceive+0x8e>
	__asm volatile
 8014198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801419c:	f383 8811 	msr	BASEPRI, r3
 80141a0:	f3bf 8f6f 	isb	sy
 80141a4:	f3bf 8f4f 	dsb	sy
 80141a8:	61bb      	str	r3, [r7, #24]
}
 80141aa:	bf00      	nop
 80141ac:	e7fe      	b.n	80141ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141ae:	f001 fff9 	bl	80161a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80141b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d01f      	beq.n	80141fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80141be:	68b9      	ldr	r1, [r7, #8]
 80141c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141c2:	f000 f977 	bl	80144b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80141c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c8:	1e5a      	subs	r2, r3, #1
 80141ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d0:	691b      	ldr	r3, [r3, #16]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d00f      	beq.n	80141f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d8:	3310      	adds	r3, #16
 80141da:	4618      	mov	r0, r3
 80141dc:	f001 f82c 	bl	8015238 <xTaskRemoveFromEventList>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d007      	beq.n	80141f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80141e6:	4b3d      	ldr	r3, [pc, #244]	; (80142dc <xQueueReceive+0x1bc>)
 80141e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141ec:	601a      	str	r2, [r3, #0]
 80141ee:	f3bf 8f4f 	dsb	sy
 80141f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80141f6:	f002 f805 	bl	8016204 <vPortExitCritical>
				return pdPASS;
 80141fa:	2301      	movs	r3, #1
 80141fc:	e069      	b.n	80142d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d103      	bne.n	801420c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014204:	f001 fffe 	bl	8016204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014208:	2300      	movs	r3, #0
 801420a:	e062      	b.n	80142d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420e:	2b00      	cmp	r3, #0
 8014210:	d106      	bne.n	8014220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014212:	f107 0310 	add.w	r3, r7, #16
 8014216:	4618      	mov	r0, r3
 8014218:	f001 f8d4 	bl	80153c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801421c:	2301      	movs	r3, #1
 801421e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014220:	f001 fff0 	bl	8016204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014224:	f000 fda0 	bl	8014d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014228:	f001 ffbc 	bl	80161a4 <vPortEnterCritical>
 801422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014232:	b25b      	sxtb	r3, r3
 8014234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014238:	d103      	bne.n	8014242 <xQueueReceive+0x122>
 801423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423c:	2200      	movs	r2, #0
 801423e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014248:	b25b      	sxtb	r3, r3
 801424a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801424e:	d103      	bne.n	8014258 <xQueueReceive+0x138>
 8014250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014252:	2200      	movs	r2, #0
 8014254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014258:	f001 ffd4 	bl	8016204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801425c:	1d3a      	adds	r2, r7, #4
 801425e:	f107 0310 	add.w	r3, r7, #16
 8014262:	4611      	mov	r1, r2
 8014264:	4618      	mov	r0, r3
 8014266:	f001 f8c3 	bl	80153f0 <xTaskCheckForTimeOut>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d123      	bne.n	80142b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014272:	f000 f997 	bl	80145a4 <prvIsQueueEmpty>
 8014276:	4603      	mov	r3, r0
 8014278:	2b00      	cmp	r3, #0
 801427a:	d017      	beq.n	80142ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427e:	3324      	adds	r3, #36	; 0x24
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	4611      	mov	r1, r2
 8014284:	4618      	mov	r0, r3
 8014286:	f000 ff4b 	bl	8015120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801428a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801428c:	f000 f938 	bl	8014500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014290:	f000 fd78 	bl	8014d84 <xTaskResumeAll>
 8014294:	4603      	mov	r3, r0
 8014296:	2b00      	cmp	r3, #0
 8014298:	d189      	bne.n	80141ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801429a:	4b10      	ldr	r3, [pc, #64]	; (80142dc <xQueueReceive+0x1bc>)
 801429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142a0:	601a      	str	r2, [r3, #0]
 80142a2:	f3bf 8f4f 	dsb	sy
 80142a6:	f3bf 8f6f 	isb	sy
 80142aa:	e780      	b.n	80141ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80142ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142ae:	f000 f927 	bl	8014500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142b2:	f000 fd67 	bl	8014d84 <xTaskResumeAll>
 80142b6:	e77a      	b.n	80141ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80142b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142ba:	f000 f921 	bl	8014500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142be:	f000 fd61 	bl	8014d84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142c4:	f000 f96e 	bl	80145a4 <prvIsQueueEmpty>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f43f af6f 	beq.w	80141ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80142d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3730      	adds	r7, #48	; 0x30
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	e000ed04 	.word	0xe000ed04

080142e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b08e      	sub	sp, #56	; 0x38
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80142f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d10a      	bne.n	801430c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80142f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142fa:	f383 8811 	msr	BASEPRI, r3
 80142fe:	f3bf 8f6f 	isb	sy
 8014302:	f3bf 8f4f 	dsb	sy
 8014306:	623b      	str	r3, [r7, #32]
}
 8014308:	bf00      	nop
 801430a:	e7fe      	b.n	801430a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d103      	bne.n	801431a <xQueueReceiveFromISR+0x3a>
 8014312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <xQueueReceiveFromISR+0x3e>
 801431a:	2301      	movs	r3, #1
 801431c:	e000      	b.n	8014320 <xQueueReceiveFromISR+0x40>
 801431e:	2300      	movs	r3, #0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10a      	bne.n	801433a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014328:	f383 8811 	msr	BASEPRI, r3
 801432c:	f3bf 8f6f 	isb	sy
 8014330:	f3bf 8f4f 	dsb	sy
 8014334:	61fb      	str	r3, [r7, #28]
}
 8014336:	bf00      	nop
 8014338:	e7fe      	b.n	8014338 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801433a:	f002 f815 	bl	8016368 <vPortValidateInterruptPriority>
	__asm volatile
 801433e:	f3ef 8211 	mrs	r2, BASEPRI
 8014342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014346:	f383 8811 	msr	BASEPRI, r3
 801434a:	f3bf 8f6f 	isb	sy
 801434e:	f3bf 8f4f 	dsb	sy
 8014352:	61ba      	str	r2, [r7, #24]
 8014354:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014356:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014358:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801435e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014362:	2b00      	cmp	r3, #0
 8014364:	d02f      	beq.n	80143c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801436c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014370:	68b9      	ldr	r1, [r7, #8]
 8014372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014374:	f000 f89e 	bl	80144b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801437a:	1e5a      	subs	r2, r3, #1
 801437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014388:	d112      	bne.n	80143b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d016      	beq.n	80143c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014394:	3310      	adds	r3, #16
 8014396:	4618      	mov	r0, r3
 8014398:	f000 ff4e 	bl	8015238 <xTaskRemoveFromEventList>
 801439c:	4603      	mov	r3, r0
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d00e      	beq.n	80143c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d00b      	beq.n	80143c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2201      	movs	r2, #1
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	e007      	b.n	80143c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80143b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143b4:	3301      	adds	r3, #1
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	b25a      	sxtb	r2, r3
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80143c0:	2301      	movs	r3, #1
 80143c2:	637b      	str	r3, [r7, #52]	; 0x34
 80143c4:	e001      	b.n	80143ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80143c6:	2300      	movs	r3, #0
 80143c8:	637b      	str	r3, [r7, #52]	; 0x34
 80143ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	f383 8811 	msr	BASEPRI, r3
}
 80143d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80143d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3738      	adds	r7, #56	; 0x38
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80143ec:	2300      	movs	r3, #0
 80143ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d10d      	bne.n	801441a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d14d      	bne.n	80144a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	689b      	ldr	r3, [r3, #8]
 801440a:	4618      	mov	r0, r3
 801440c:	f001 f952 	bl	80156b4 <xTaskPriorityDisinherit>
 8014410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2200      	movs	r2, #0
 8014416:	609a      	str	r2, [r3, #8]
 8014418:	e043      	b.n	80144a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d119      	bne.n	8014454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	6858      	ldr	r0, [r3, #4]
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014428:	461a      	mov	r2, r3
 801442a:	68b9      	ldr	r1, [r7, #8]
 801442c:	f002 fa00 	bl	8016830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	685a      	ldr	r2, [r3, #4]
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014438:	441a      	add	r2, r3
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	685a      	ldr	r2, [r3, #4]
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	689b      	ldr	r3, [r3, #8]
 8014446:	429a      	cmp	r2, r3
 8014448:	d32b      	bcc.n	80144a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	605a      	str	r2, [r3, #4]
 8014452:	e026      	b.n	80144a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	68d8      	ldr	r0, [r3, #12]
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801445c:	461a      	mov	r2, r3
 801445e:	68b9      	ldr	r1, [r7, #8]
 8014460:	f002 f9e6 	bl	8016830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	68da      	ldr	r2, [r3, #12]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801446c:	425b      	negs	r3, r3
 801446e:	441a      	add	r2, r3
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	68da      	ldr	r2, [r3, #12]
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	429a      	cmp	r2, r3
 801447e:	d207      	bcs.n	8014490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	689a      	ldr	r2, [r3, #8]
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014488:	425b      	negs	r3, r3
 801448a:	441a      	add	r2, r3
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b02      	cmp	r3, #2
 8014494:	d105      	bne.n	80144a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d002      	beq.n	80144a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	3b01      	subs	r3, #1
 80144a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	1c5a      	adds	r2, r3, #1
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80144aa:	697b      	ldr	r3, [r7, #20]
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3718      	adds	r7, #24
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d018      	beq.n	80144f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	68da      	ldr	r2, [r3, #12]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ce:	441a      	add	r2, r3
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	68da      	ldr	r2, [r3, #12]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	689b      	ldr	r3, [r3, #8]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d303      	bcc.n	80144e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681a      	ldr	r2, [r3, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	68d9      	ldr	r1, [r3, #12]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144f0:	461a      	mov	r2, r3
 80144f2:	6838      	ldr	r0, [r7, #0]
 80144f4:	f002 f99c 	bl	8016830 <memcpy>
	}
}
 80144f8:	bf00      	nop
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b084      	sub	sp, #16
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014508:	f001 fe4c 	bl	80161a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014514:	e011      	b.n	801453a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801451a:	2b00      	cmp	r3, #0
 801451c:	d012      	beq.n	8014544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	3324      	adds	r3, #36	; 0x24
 8014522:	4618      	mov	r0, r3
 8014524:	f000 fe88 	bl	8015238 <xTaskRemoveFromEventList>
 8014528:	4603      	mov	r3, r0
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801452e:	f000 ffc1 	bl	80154b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014532:	7bfb      	ldrb	r3, [r7, #15]
 8014534:	3b01      	subs	r3, #1
 8014536:	b2db      	uxtb	r3, r3
 8014538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801453e:	2b00      	cmp	r3, #0
 8014540:	dce9      	bgt.n	8014516 <prvUnlockQueue+0x16>
 8014542:	e000      	b.n	8014546 <prvUnlockQueue+0x46>
					break;
 8014544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	22ff      	movs	r2, #255	; 0xff
 801454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801454e:	f001 fe59 	bl	8016204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014552:	f001 fe27 	bl	80161a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801455c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801455e:	e011      	b.n	8014584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	691b      	ldr	r3, [r3, #16]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d012      	beq.n	801458e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	3310      	adds	r3, #16
 801456c:	4618      	mov	r0, r3
 801456e:	f000 fe63 	bl	8015238 <xTaskRemoveFromEventList>
 8014572:	4603      	mov	r3, r0
 8014574:	2b00      	cmp	r3, #0
 8014576:	d001      	beq.n	801457c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014578:	f000 ff9c 	bl	80154b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801457c:	7bbb      	ldrb	r3, [r7, #14]
 801457e:	3b01      	subs	r3, #1
 8014580:	b2db      	uxtb	r3, r3
 8014582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014588:	2b00      	cmp	r3, #0
 801458a:	dce9      	bgt.n	8014560 <prvUnlockQueue+0x60>
 801458c:	e000      	b.n	8014590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801458e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	22ff      	movs	r2, #255	; 0xff
 8014594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014598:	f001 fe34 	bl	8016204 <vPortExitCritical>
}
 801459c:	bf00      	nop
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80145ac:	f001 fdfa 	bl	80161a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d102      	bne.n	80145be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80145b8:	2301      	movs	r3, #1
 80145ba:	60fb      	str	r3, [r7, #12]
 80145bc:	e001      	b.n	80145c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80145be:	2300      	movs	r3, #0
 80145c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80145c2:	f001 fe1f 	bl	8016204 <vPortExitCritical>

	return xReturn;
 80145c6:	68fb      	ldr	r3, [r7, #12]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3710      	adds	r7, #16
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80145d8:	f001 fde4 	bl	80161a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d102      	bne.n	80145ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80145e8:	2301      	movs	r3, #1
 80145ea:	60fb      	str	r3, [r7, #12]
 80145ec:	e001      	b.n	80145f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80145ee:	2300      	movs	r3, #0
 80145f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80145f2:	f001 fe07 	bl	8016204 <vPortExitCritical>

	return xReturn;
 80145f6:	68fb      	ldr	r3, [r7, #12]
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3710      	adds	r7, #16
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014600:	b480      	push	{r7}
 8014602:	b085      	sub	sp, #20
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801460a:	2300      	movs	r3, #0
 801460c:	60fb      	str	r3, [r7, #12]
 801460e:	e014      	b.n	801463a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014610:	4a0f      	ldr	r2, [pc, #60]	; (8014650 <vQueueAddToRegistry+0x50>)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d10b      	bne.n	8014634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801461c:	490c      	ldr	r1, [pc, #48]	; (8014650 <vQueueAddToRegistry+0x50>)
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	683a      	ldr	r2, [r7, #0]
 8014622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014626:	4a0a      	ldr	r2, [pc, #40]	; (8014650 <vQueueAddToRegistry+0x50>)
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	4413      	add	r3, r2
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014632:	e006      	b.n	8014642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	3301      	adds	r3, #1
 8014638:	60fb      	str	r3, [r7, #12]
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2b07      	cmp	r3, #7
 801463e:	d9e7      	bls.n	8014610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014640:	bf00      	nop
 8014642:	bf00      	nop
 8014644:	3714      	adds	r7, #20
 8014646:	46bd      	mov	sp, r7
 8014648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop
 8014650:	240017cc 	.word	0x240017cc

08014654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014664:	f001 fd9e 	bl	80161a4 <vPortEnterCritical>
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801466e:	b25b      	sxtb	r3, r3
 8014670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014674:	d103      	bne.n	801467e <vQueueWaitForMessageRestricted+0x2a>
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	2200      	movs	r2, #0
 801467a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014684:	b25b      	sxtb	r3, r3
 8014686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801468a:	d103      	bne.n	8014694 <vQueueWaitForMessageRestricted+0x40>
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	2200      	movs	r2, #0
 8014690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014694:	f001 fdb6 	bl	8016204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801469c:	2b00      	cmp	r3, #0
 801469e:	d106      	bne.n	80146ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	3324      	adds	r3, #36	; 0x24
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	68b9      	ldr	r1, [r7, #8]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 fd99 	bl	80151e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80146ae:	6978      	ldr	r0, [r7, #20]
 80146b0:	f7ff ff26 	bl	8014500 <prvUnlockQueue>
	}
 80146b4:	bf00      	nop
 80146b6:	3718      	adds	r7, #24
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b08e      	sub	sp, #56	; 0x38
 80146c0:	af04      	add	r7, sp, #16
 80146c2:	60f8      	str	r0, [r7, #12]
 80146c4:	60b9      	str	r1, [r7, #8]
 80146c6:	607a      	str	r2, [r7, #4]
 80146c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80146ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d10a      	bne.n	80146e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80146d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d4:	f383 8811 	msr	BASEPRI, r3
 80146d8:	f3bf 8f6f 	isb	sy
 80146dc:	f3bf 8f4f 	dsb	sy
 80146e0:	623b      	str	r3, [r7, #32]
}
 80146e2:	bf00      	nop
 80146e4:	e7fe      	b.n	80146e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80146e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d10a      	bne.n	8014702 <xTaskCreateStatic+0x46>
	__asm volatile
 80146ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f0:	f383 8811 	msr	BASEPRI, r3
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	f3bf 8f4f 	dsb	sy
 80146fc:	61fb      	str	r3, [r7, #28]
}
 80146fe:	bf00      	nop
 8014700:	e7fe      	b.n	8014700 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014702:	235c      	movs	r3, #92	; 0x5c
 8014704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	2b5c      	cmp	r3, #92	; 0x5c
 801470a:	d00a      	beq.n	8014722 <xTaskCreateStatic+0x66>
	__asm volatile
 801470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014710:	f383 8811 	msr	BASEPRI, r3
 8014714:	f3bf 8f6f 	isb	sy
 8014718:	f3bf 8f4f 	dsb	sy
 801471c:	61bb      	str	r3, [r7, #24]
}
 801471e:	bf00      	nop
 8014720:	e7fe      	b.n	8014720 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014722:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014726:	2b00      	cmp	r3, #0
 8014728:	d01e      	beq.n	8014768 <xTaskCreateStatic+0xac>
 801472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801472c:	2b00      	cmp	r3, #0
 801472e:	d01b      	beq.n	8014768 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014732:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014738:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	2202      	movs	r2, #2
 801473e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014742:	2300      	movs	r3, #0
 8014744:	9303      	str	r3, [sp, #12]
 8014746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014748:	9302      	str	r3, [sp, #8]
 801474a:	f107 0314 	add.w	r3, r7, #20
 801474e:	9301      	str	r3, [sp, #4]
 8014750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014752:	9300      	str	r3, [sp, #0]
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	68b9      	ldr	r1, [r7, #8]
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f000 f850 	bl	8014800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014762:	f000 f8dd 	bl	8014920 <prvAddNewTaskToReadyList>
 8014766:	e001      	b.n	801476c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014768:	2300      	movs	r3, #0
 801476a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801476c:	697b      	ldr	r3, [r7, #20]
	}
 801476e:	4618      	mov	r0, r3
 8014770:	3728      	adds	r7, #40	; 0x28
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}

08014776 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014776:	b580      	push	{r7, lr}
 8014778:	b08c      	sub	sp, #48	; 0x30
 801477a:	af04      	add	r7, sp, #16
 801477c:	60f8      	str	r0, [r7, #12]
 801477e:	60b9      	str	r1, [r7, #8]
 8014780:	603b      	str	r3, [r7, #0]
 8014782:	4613      	mov	r3, r2
 8014784:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014786:	88fb      	ldrh	r3, [r7, #6]
 8014788:	009b      	lsls	r3, r3, #2
 801478a:	4618      	mov	r0, r3
 801478c:	f001 fe2c 	bl	80163e8 <pvPortMalloc>
 8014790:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00e      	beq.n	80147b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014798:	205c      	movs	r0, #92	; 0x5c
 801479a:	f001 fe25 	bl	80163e8 <pvPortMalloc>
 801479e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d003      	beq.n	80147ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	697a      	ldr	r2, [r7, #20]
 80147aa:	631a      	str	r2, [r3, #48]	; 0x30
 80147ac:	e005      	b.n	80147ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80147ae:	6978      	ldr	r0, [r7, #20]
 80147b0:	f001 fee6 	bl	8016580 <vPortFree>
 80147b4:	e001      	b.n	80147ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80147b6:	2300      	movs	r3, #0
 80147b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80147ba:	69fb      	ldr	r3, [r7, #28]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d017      	beq.n	80147f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80147c0:	69fb      	ldr	r3, [r7, #28]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80147c8:	88fa      	ldrh	r2, [r7, #6]
 80147ca:	2300      	movs	r3, #0
 80147cc:	9303      	str	r3, [sp, #12]
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	9302      	str	r3, [sp, #8]
 80147d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d4:	9301      	str	r3, [sp, #4]
 80147d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	68b9      	ldr	r1, [r7, #8]
 80147de:	68f8      	ldr	r0, [r7, #12]
 80147e0:	f000 f80e 	bl	8014800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80147e4:	69f8      	ldr	r0, [r7, #28]
 80147e6:	f000 f89b 	bl	8014920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80147ea:	2301      	movs	r3, #1
 80147ec:	61bb      	str	r3, [r7, #24]
 80147ee:	e002      	b.n	80147f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80147f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80147f6:	69bb      	ldr	r3, [r7, #24]
	}
 80147f8:	4618      	mov	r0, r3
 80147fa:	3720      	adds	r7, #32
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}

08014800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b088      	sub	sp, #32
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
 801480c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014810:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	461a      	mov	r2, r3
 8014818:	21a5      	movs	r1, #165	; 0xa5
 801481a:	f002 f817 	bl	801684c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014822:	6879      	ldr	r1, [r7, #4]
 8014824:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014828:	440b      	add	r3, r1
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	4413      	add	r3, r2
 801482e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	f023 0307 	bic.w	r3, r3, #7
 8014836:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	f003 0307 	and.w	r3, r3, #7
 801483e:	2b00      	cmp	r3, #0
 8014840:	d00a      	beq.n	8014858 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014846:	f383 8811 	msr	BASEPRI, r3
 801484a:	f3bf 8f6f 	isb	sy
 801484e:	f3bf 8f4f 	dsb	sy
 8014852:	617b      	str	r3, [r7, #20]
}
 8014854:	bf00      	nop
 8014856:	e7fe      	b.n	8014856 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d01f      	beq.n	801489e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801485e:	2300      	movs	r3, #0
 8014860:	61fb      	str	r3, [r7, #28]
 8014862:	e012      	b.n	801488a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014864:	68ba      	ldr	r2, [r7, #8]
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	4413      	add	r3, r2
 801486a:	7819      	ldrb	r1, [r3, #0]
 801486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	4413      	add	r3, r2
 8014872:	3334      	adds	r3, #52	; 0x34
 8014874:	460a      	mov	r2, r1
 8014876:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014878:	68ba      	ldr	r2, [r7, #8]
 801487a:	69fb      	ldr	r3, [r7, #28]
 801487c:	4413      	add	r3, r2
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d006      	beq.n	8014892 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	3301      	adds	r3, #1
 8014888:	61fb      	str	r3, [r7, #28]
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	2b0f      	cmp	r3, #15
 801488e:	d9e9      	bls.n	8014864 <prvInitialiseNewTask+0x64>
 8014890:	e000      	b.n	8014894 <prvInitialiseNewTask+0x94>
			{
				break;
 8014892:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014896:	2200      	movs	r2, #0
 8014898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801489c:	e003      	b.n	80148a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a0:	2200      	movs	r2, #0
 80148a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80148a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a8:	2b37      	cmp	r3, #55	; 0x37
 80148aa:	d901      	bls.n	80148b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80148ac:	2337      	movs	r3, #55	; 0x37
 80148ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80148b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80148b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80148bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148be:	2200      	movs	r2, #0
 80148c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80148c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c4:	3304      	adds	r3, #4
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7ff f8be 	bl	8013a48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80148cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ce:	3318      	adds	r3, #24
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7ff f8b9 	bl	8013a48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80148d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80148e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80148ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ee:	2200      	movs	r2, #0
 80148f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80148f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f4:	2200      	movs	r2, #0
 80148f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80148fa:	683a      	ldr	r2, [r7, #0]
 80148fc:	68f9      	ldr	r1, [r7, #12]
 80148fe:	69b8      	ldr	r0, [r7, #24]
 8014900:	f001 fb20 	bl	8015f44 <pxPortInitialiseStack>
 8014904:	4602      	mov	r2, r0
 8014906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014908:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014916:	bf00      	nop
 8014918:	3720      	adds	r7, #32
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
	...

08014920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014928:	f001 fc3c 	bl	80161a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801492c:	4b2d      	ldr	r3, [pc, #180]	; (80149e4 <prvAddNewTaskToReadyList+0xc4>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	3301      	adds	r3, #1
 8014932:	4a2c      	ldr	r2, [pc, #176]	; (80149e4 <prvAddNewTaskToReadyList+0xc4>)
 8014934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014936:	4b2c      	ldr	r3, [pc, #176]	; (80149e8 <prvAddNewTaskToReadyList+0xc8>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d109      	bne.n	8014952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801493e:	4a2a      	ldr	r2, [pc, #168]	; (80149e8 <prvAddNewTaskToReadyList+0xc8>)
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014944:	4b27      	ldr	r3, [pc, #156]	; (80149e4 <prvAddNewTaskToReadyList+0xc4>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b01      	cmp	r3, #1
 801494a:	d110      	bne.n	801496e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801494c:	f000 fdd6 	bl	80154fc <prvInitialiseTaskLists>
 8014950:	e00d      	b.n	801496e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014952:	4b26      	ldr	r3, [pc, #152]	; (80149ec <prvAddNewTaskToReadyList+0xcc>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d109      	bne.n	801496e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801495a:	4b23      	ldr	r3, [pc, #140]	; (80149e8 <prvAddNewTaskToReadyList+0xc8>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014964:	429a      	cmp	r2, r3
 8014966:	d802      	bhi.n	801496e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014968:	4a1f      	ldr	r2, [pc, #124]	; (80149e8 <prvAddNewTaskToReadyList+0xc8>)
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801496e:	4b20      	ldr	r3, [pc, #128]	; (80149f0 <prvAddNewTaskToReadyList+0xd0>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	3301      	adds	r3, #1
 8014974:	4a1e      	ldr	r2, [pc, #120]	; (80149f0 <prvAddNewTaskToReadyList+0xd0>)
 8014976:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014978:	4b1d      	ldr	r3, [pc, #116]	; (80149f0 <prvAddNewTaskToReadyList+0xd0>)
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014984:	4b1b      	ldr	r3, [pc, #108]	; (80149f4 <prvAddNewTaskToReadyList+0xd4>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	429a      	cmp	r2, r3
 801498a:	d903      	bls.n	8014994 <prvAddNewTaskToReadyList+0x74>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014990:	4a18      	ldr	r2, [pc, #96]	; (80149f4 <prvAddNewTaskToReadyList+0xd4>)
 8014992:	6013      	str	r3, [r2, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014998:	4613      	mov	r3, r2
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	4413      	add	r3, r2
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	4a15      	ldr	r2, [pc, #84]	; (80149f8 <prvAddNewTaskToReadyList+0xd8>)
 80149a2:	441a      	add	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	3304      	adds	r3, #4
 80149a8:	4619      	mov	r1, r3
 80149aa:	4610      	mov	r0, r2
 80149ac:	f7ff f859 	bl	8013a62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80149b0:	f001 fc28 	bl	8016204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80149b4:	4b0d      	ldr	r3, [pc, #52]	; (80149ec <prvAddNewTaskToReadyList+0xcc>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d00e      	beq.n	80149da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80149bc:	4b0a      	ldr	r3, [pc, #40]	; (80149e8 <prvAddNewTaskToReadyList+0xc8>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d207      	bcs.n	80149da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80149ca:	4b0c      	ldr	r3, [pc, #48]	; (80149fc <prvAddNewTaskToReadyList+0xdc>)
 80149cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149d0:	601a      	str	r2, [r3, #0]
 80149d2:	f3bf 8f4f 	dsb	sy
 80149d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149da:	bf00      	nop
 80149dc:	3708      	adds	r7, #8
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	24001ce0 	.word	0x24001ce0
 80149e8:	2400180c 	.word	0x2400180c
 80149ec:	24001cec 	.word	0x24001cec
 80149f0:	24001cfc 	.word	0x24001cfc
 80149f4:	24001ce8 	.word	0x24001ce8
 80149f8:	24001810 	.word	0x24001810
 80149fc:	e000ed04 	.word	0xe000ed04

08014a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d017      	beq.n	8014a42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014a12:	4b13      	ldr	r3, [pc, #76]	; (8014a60 <vTaskDelay+0x60>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d00a      	beq.n	8014a30 <vTaskDelay+0x30>
	__asm volatile
 8014a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a1e:	f383 8811 	msr	BASEPRI, r3
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	f3bf 8f4f 	dsb	sy
 8014a2a:	60bb      	str	r3, [r7, #8]
}
 8014a2c:	bf00      	nop
 8014a2e:	e7fe      	b.n	8014a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014a30:	f000 f99a 	bl	8014d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014a34:	2100      	movs	r1, #0
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f000 fec2 	bl	80157c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014a3c:	f000 f9a2 	bl	8014d84 <xTaskResumeAll>
 8014a40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d107      	bne.n	8014a58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014a48:	4b06      	ldr	r3, [pc, #24]	; (8014a64 <vTaskDelay+0x64>)
 8014a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a4e:	601a      	str	r2, [r3, #0]
 8014a50:	f3bf 8f4f 	dsb	sy
 8014a54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a58:	bf00      	nop
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	24001d08 	.word	0x24001d08
 8014a64:	e000ed04 	.word	0xe000ed04

08014a68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014a70:	f001 fb98 	bl	80161a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d102      	bne.n	8014a80 <vTaskSuspend+0x18>
 8014a7a:	4b30      	ldr	r3, [pc, #192]	; (8014b3c <vTaskSuspend+0xd4>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	e000      	b.n	8014a82 <vTaskSuspend+0x1a>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	3304      	adds	r3, #4
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7ff f847 	bl	8013b1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d004      	beq.n	8014aa0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	3318      	adds	r3, #24
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7ff f83e 	bl	8013b1c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	3304      	adds	r3, #4
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	4826      	ldr	r0, [pc, #152]	; (8014b40 <vTaskSuspend+0xd8>)
 8014aa8:	f7fe ffdb 	bl	8013a62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014ab2:	b2db      	uxtb	r3, r3
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d103      	bne.n	8014ac0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	2200      	movs	r2, #0
 8014abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014ac0:	f001 fba0 	bl	8016204 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014ac4:	4b1f      	ldr	r3, [pc, #124]	; (8014b44 <vTaskSuspend+0xdc>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d005      	beq.n	8014ad8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014acc:	f001 fb6a 	bl	80161a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014ad0:	f000 fdb2 	bl	8015638 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014ad4:	f001 fb96 	bl	8016204 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014ad8:	4b18      	ldr	r3, [pc, #96]	; (8014b3c <vTaskSuspend+0xd4>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d127      	bne.n	8014b32 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014ae2:	4b18      	ldr	r3, [pc, #96]	; (8014b44 <vTaskSuspend+0xdc>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d017      	beq.n	8014b1a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014aea:	4b17      	ldr	r3, [pc, #92]	; (8014b48 <vTaskSuspend+0xe0>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d00a      	beq.n	8014b08 <vTaskSuspend+0xa0>
	__asm volatile
 8014af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af6:	f383 8811 	msr	BASEPRI, r3
 8014afa:	f3bf 8f6f 	isb	sy
 8014afe:	f3bf 8f4f 	dsb	sy
 8014b02:	60bb      	str	r3, [r7, #8]
}
 8014b04:	bf00      	nop
 8014b06:	e7fe      	b.n	8014b06 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014b08:	4b10      	ldr	r3, [pc, #64]	; (8014b4c <vTaskSuspend+0xe4>)
 8014b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b0e:	601a      	str	r2, [r3, #0]
 8014b10:	f3bf 8f4f 	dsb	sy
 8014b14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b18:	e00b      	b.n	8014b32 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014b1a:	4b09      	ldr	r3, [pc, #36]	; (8014b40 <vTaskSuspend+0xd8>)
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	4b0c      	ldr	r3, [pc, #48]	; (8014b50 <vTaskSuspend+0xe8>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d103      	bne.n	8014b2e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014b26:	4b05      	ldr	r3, [pc, #20]	; (8014b3c <vTaskSuspend+0xd4>)
 8014b28:	2200      	movs	r2, #0
 8014b2a:	601a      	str	r2, [r3, #0]
	}
 8014b2c:	e001      	b.n	8014b32 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014b2e:	f000 fa99 	bl	8015064 <vTaskSwitchContext>
	}
 8014b32:	bf00      	nop
 8014b34:	3710      	adds	r7, #16
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	2400180c 	.word	0x2400180c
 8014b40:	24001ccc 	.word	0x24001ccc
 8014b44:	24001cec 	.word	0x24001cec
 8014b48:	24001d08 	.word	0x24001d08
 8014b4c:	e000ed04 	.word	0xe000ed04
 8014b50:	24001ce0 	.word	0x24001ce0

08014b54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014b54:	b480      	push	{r7}
 8014b56:	b087      	sub	sp, #28
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10a      	bne.n	8014b80 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b6e:	f383 8811 	msr	BASEPRI, r3
 8014b72:	f3bf 8f6f 	isb	sy
 8014b76:	f3bf 8f4f 	dsb	sy
 8014b7a:	60fb      	str	r3, [r7, #12]
}
 8014b7c:	bf00      	nop
 8014b7e:	e7fe      	b.n	8014b7e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b80:	693b      	ldr	r3, [r7, #16]
 8014b82:	695b      	ldr	r3, [r3, #20]
 8014b84:	4a0a      	ldr	r2, [pc, #40]	; (8014bb0 <prvTaskIsTaskSuspended+0x5c>)
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d10a      	bne.n	8014ba0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b8e:	4a09      	ldr	r2, [pc, #36]	; (8014bb4 <prvTaskIsTaskSuspended+0x60>)
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d005      	beq.n	8014ba0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d101      	bne.n	8014ba0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ba0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	371c      	adds	r7, #28
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bac:	4770      	bx	lr
 8014bae:	bf00      	nop
 8014bb0:	24001ccc 	.word	0x24001ccc
 8014bb4:	24001ca0 	.word	0x24001ca0

08014bb8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b08a      	sub	sp, #40	; 0x28
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10a      	bne.n	8014be4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	61bb      	str	r3, [r7, #24]
}
 8014be0:	bf00      	nop
 8014be2:	e7fe      	b.n	8014be2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014be4:	f001 fbc0 	bl	8016368 <vPortValidateInterruptPriority>
	__asm volatile
 8014be8:	f3ef 8211 	mrs	r2, BASEPRI
 8014bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	617a      	str	r2, [r7, #20]
 8014bfe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014c00:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014c02:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014c04:	6a38      	ldr	r0, [r7, #32]
 8014c06:	f7ff ffa5 	bl	8014b54 <prvTaskIsTaskSuspended>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d030      	beq.n	8014c72 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c10:	4b1d      	ldr	r3, [pc, #116]	; (8014c88 <xTaskResumeFromISR+0xd0>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d126      	bne.n	8014c66 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c18:	6a3b      	ldr	r3, [r7, #32]
 8014c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c1c:	4b1b      	ldr	r3, [pc, #108]	; (8014c8c <xTaskResumeFromISR+0xd4>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d301      	bcc.n	8014c2a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014c26:	2301      	movs	r3, #1
 8014c28:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	3304      	adds	r3, #4
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7fe ff74 	bl	8013b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c34:	6a3b      	ldr	r3, [r7, #32]
 8014c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c38:	4b15      	ldr	r3, [pc, #84]	; (8014c90 <xTaskResumeFromISR+0xd8>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d903      	bls.n	8014c48 <xTaskResumeFromISR+0x90>
 8014c40:	6a3b      	ldr	r3, [r7, #32]
 8014c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c44:	4a12      	ldr	r2, [pc, #72]	; (8014c90 <xTaskResumeFromISR+0xd8>)
 8014c46:	6013      	str	r3, [r2, #0]
 8014c48:	6a3b      	ldr	r3, [r7, #32]
 8014c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c4c:	4613      	mov	r3, r2
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	4413      	add	r3, r2
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4a0f      	ldr	r2, [pc, #60]	; (8014c94 <xTaskResumeFromISR+0xdc>)
 8014c56:	441a      	add	r2, r3
 8014c58:	6a3b      	ldr	r3, [r7, #32]
 8014c5a:	3304      	adds	r3, #4
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	4610      	mov	r0, r2
 8014c60:	f7fe feff 	bl	8013a62 <vListInsertEnd>
 8014c64:	e005      	b.n	8014c72 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014c66:	6a3b      	ldr	r3, [r7, #32]
 8014c68:	3318      	adds	r3, #24
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	480a      	ldr	r0, [pc, #40]	; (8014c98 <xTaskResumeFromISR+0xe0>)
 8014c6e:	f7fe fef8 	bl	8013a62 <vListInsertEnd>
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	f383 8811 	msr	BASEPRI, r3
}
 8014c7c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3728      	adds	r7, #40	; 0x28
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	24001d08 	.word	0x24001d08
 8014c8c:	2400180c 	.word	0x2400180c
 8014c90:	24001ce8 	.word	0x24001ce8
 8014c94:	24001810 	.word	0x24001810
 8014c98:	24001ca0 	.word	0x24001ca0

08014c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b08a      	sub	sp, #40	; 0x28
 8014ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014caa:	463a      	mov	r2, r7
 8014cac:	1d39      	adds	r1, r7, #4
 8014cae:	f107 0308 	add.w	r3, r7, #8
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fe fc08 	bl	80134c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014cb8:	6839      	ldr	r1, [r7, #0]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	9202      	str	r2, [sp, #8]
 8014cc0:	9301      	str	r3, [sp, #4]
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	9300      	str	r3, [sp, #0]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	460a      	mov	r2, r1
 8014cca:	4921      	ldr	r1, [pc, #132]	; (8014d50 <vTaskStartScheduler+0xb4>)
 8014ccc:	4821      	ldr	r0, [pc, #132]	; (8014d54 <vTaskStartScheduler+0xb8>)
 8014cce:	f7ff fcf5 	bl	80146bc <xTaskCreateStatic>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	4a20      	ldr	r2, [pc, #128]	; (8014d58 <vTaskStartScheduler+0xbc>)
 8014cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014cd8:	4b1f      	ldr	r3, [pc, #124]	; (8014d58 <vTaskStartScheduler+0xbc>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d002      	beq.n	8014ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	617b      	str	r3, [r7, #20]
 8014ce4:	e001      	b.n	8014cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d102      	bne.n	8014cf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014cf0:	f000 fdba 	bl	8015868 <xTimerCreateTimerTask>
 8014cf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d116      	bne.n	8014d2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8014cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d00:	f383 8811 	msr	BASEPRI, r3
 8014d04:	f3bf 8f6f 	isb	sy
 8014d08:	f3bf 8f4f 	dsb	sy
 8014d0c:	613b      	str	r3, [r7, #16]
}
 8014d0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014d10:	4b12      	ldr	r3, [pc, #72]	; (8014d5c <vTaskStartScheduler+0xc0>)
 8014d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014d18:	4b11      	ldr	r3, [pc, #68]	; (8014d60 <vTaskStartScheduler+0xc4>)
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014d1e:	4b11      	ldr	r3, [pc, #68]	; (8014d64 <vTaskStartScheduler+0xc8>)
 8014d20:	2200      	movs	r2, #0
 8014d22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014d24:	f001 f99c 	bl	8016060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014d28:	e00e      	b.n	8014d48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d30:	d10a      	bne.n	8014d48 <vTaskStartScheduler+0xac>
	__asm volatile
 8014d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d36:	f383 8811 	msr	BASEPRI, r3
 8014d3a:	f3bf 8f6f 	isb	sy
 8014d3e:	f3bf 8f4f 	dsb	sy
 8014d42:	60fb      	str	r3, [r7, #12]
}
 8014d44:	bf00      	nop
 8014d46:	e7fe      	b.n	8014d46 <vTaskStartScheduler+0xaa>
}
 8014d48:	bf00      	nop
 8014d4a:	3718      	adds	r7, #24
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	080174d8 	.word	0x080174d8
 8014d54:	080154cd 	.word	0x080154cd
 8014d58:	24001d04 	.word	0x24001d04
 8014d5c:	24001d00 	.word	0x24001d00
 8014d60:	24001cec 	.word	0x24001cec
 8014d64:	24001ce4 	.word	0x24001ce4

08014d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014d68:	b480      	push	{r7}
 8014d6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014d6c:	4b04      	ldr	r3, [pc, #16]	; (8014d80 <vTaskSuspendAll+0x18>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	3301      	adds	r3, #1
 8014d72:	4a03      	ldr	r2, [pc, #12]	; (8014d80 <vTaskSuspendAll+0x18>)
 8014d74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014d76:	bf00      	nop
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr
 8014d80:	24001d08 	.word	0x24001d08

08014d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014d92:	4b42      	ldr	r3, [pc, #264]	; (8014e9c <xTaskResumeAll+0x118>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d10a      	bne.n	8014db0 <xTaskResumeAll+0x2c>
	__asm volatile
 8014d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d9e:	f383 8811 	msr	BASEPRI, r3
 8014da2:	f3bf 8f6f 	isb	sy
 8014da6:	f3bf 8f4f 	dsb	sy
 8014daa:	603b      	str	r3, [r7, #0]
}
 8014dac:	bf00      	nop
 8014dae:	e7fe      	b.n	8014dae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014db0:	f001 f9f8 	bl	80161a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014db4:	4b39      	ldr	r3, [pc, #228]	; (8014e9c <xTaskResumeAll+0x118>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	3b01      	subs	r3, #1
 8014dba:	4a38      	ldr	r2, [pc, #224]	; (8014e9c <xTaskResumeAll+0x118>)
 8014dbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014dbe:	4b37      	ldr	r3, [pc, #220]	; (8014e9c <xTaskResumeAll+0x118>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d162      	bne.n	8014e8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014dc6:	4b36      	ldr	r3, [pc, #216]	; (8014ea0 <xTaskResumeAll+0x11c>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d05e      	beq.n	8014e8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014dce:	e02f      	b.n	8014e30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dd0:	4b34      	ldr	r3, [pc, #208]	; (8014ea4 <xTaskResumeAll+0x120>)
 8014dd2:	68db      	ldr	r3, [r3, #12]
 8014dd4:	68db      	ldr	r3, [r3, #12]
 8014dd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	3318      	adds	r3, #24
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7fe fe9d 	bl	8013b1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	3304      	adds	r3, #4
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fe fe98 	bl	8013b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014df0:	4b2d      	ldr	r3, [pc, #180]	; (8014ea8 <xTaskResumeAll+0x124>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d903      	bls.n	8014e00 <xTaskResumeAll+0x7c>
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dfc:	4a2a      	ldr	r2, [pc, #168]	; (8014ea8 <xTaskResumeAll+0x124>)
 8014dfe:	6013      	str	r3, [r2, #0]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e04:	4613      	mov	r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	4413      	add	r3, r2
 8014e0a:	009b      	lsls	r3, r3, #2
 8014e0c:	4a27      	ldr	r2, [pc, #156]	; (8014eac <xTaskResumeAll+0x128>)
 8014e0e:	441a      	add	r2, r3
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	3304      	adds	r3, #4
 8014e14:	4619      	mov	r1, r3
 8014e16:	4610      	mov	r0, r2
 8014e18:	f7fe fe23 	bl	8013a62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e20:	4b23      	ldr	r3, [pc, #140]	; (8014eb0 <xTaskResumeAll+0x12c>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d302      	bcc.n	8014e30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014e2a:	4b22      	ldr	r3, [pc, #136]	; (8014eb4 <xTaskResumeAll+0x130>)
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e30:	4b1c      	ldr	r3, [pc, #112]	; (8014ea4 <xTaskResumeAll+0x120>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d1cb      	bne.n	8014dd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d001      	beq.n	8014e42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014e3e:	f000 fbfb 	bl	8015638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014e42:	4b1d      	ldr	r3, [pc, #116]	; (8014eb8 <xTaskResumeAll+0x134>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d010      	beq.n	8014e70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014e4e:	f000 f847 	bl	8014ee0 <xTaskIncrementTick>
 8014e52:	4603      	mov	r3, r0
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d002      	beq.n	8014e5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014e58:	4b16      	ldr	r3, [pc, #88]	; (8014eb4 <xTaskResumeAll+0x130>)
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	3b01      	subs	r3, #1
 8014e62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d1f1      	bne.n	8014e4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014e6a:	4b13      	ldr	r3, [pc, #76]	; (8014eb8 <xTaskResumeAll+0x134>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014e70:	4b10      	ldr	r3, [pc, #64]	; (8014eb4 <xTaskResumeAll+0x130>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d009      	beq.n	8014e8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014e7c:	4b0f      	ldr	r3, [pc, #60]	; (8014ebc <xTaskResumeAll+0x138>)
 8014e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e82:	601a      	str	r2, [r3, #0]
 8014e84:	f3bf 8f4f 	dsb	sy
 8014e88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014e8c:	f001 f9ba 	bl	8016204 <vPortExitCritical>

	return xAlreadyYielded;
 8014e90:	68bb      	ldr	r3, [r7, #8]
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3710      	adds	r7, #16
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	24001d08 	.word	0x24001d08
 8014ea0:	24001ce0 	.word	0x24001ce0
 8014ea4:	24001ca0 	.word	0x24001ca0
 8014ea8:	24001ce8 	.word	0x24001ce8
 8014eac:	24001810 	.word	0x24001810
 8014eb0:	2400180c 	.word	0x2400180c
 8014eb4:	24001cf4 	.word	0x24001cf4
 8014eb8:	24001cf0 	.word	0x24001cf0
 8014ebc:	e000ed04 	.word	0xe000ed04

08014ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014ec6:	4b05      	ldr	r3, [pc, #20]	; (8014edc <xTaskGetTickCount+0x1c>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014ecc:	687b      	ldr	r3, [r7, #4]
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	370c      	adds	r7, #12
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop
 8014edc:	24001ce4 	.word	0x24001ce4

08014ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b086      	sub	sp, #24
 8014ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014eea:	4b53      	ldr	r3, [pc, #332]	; (8015038 <xTaskIncrementTick+0x158>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	f040 8095 	bne.w	801501e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014ef4:	4b51      	ldr	r3, [pc, #324]	; (801503c <xTaskIncrementTick+0x15c>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014efc:	4a4f      	ldr	r2, [pc, #316]	; (801503c <xTaskIncrementTick+0x15c>)
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d120      	bne.n	8014f4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014f08:	4b4d      	ldr	r3, [pc, #308]	; (8015040 <xTaskIncrementTick+0x160>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d00a      	beq.n	8014f28 <xTaskIncrementTick+0x48>
	__asm volatile
 8014f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f16:	f383 8811 	msr	BASEPRI, r3
 8014f1a:	f3bf 8f6f 	isb	sy
 8014f1e:	f3bf 8f4f 	dsb	sy
 8014f22:	603b      	str	r3, [r7, #0]
}
 8014f24:	bf00      	nop
 8014f26:	e7fe      	b.n	8014f26 <xTaskIncrementTick+0x46>
 8014f28:	4b45      	ldr	r3, [pc, #276]	; (8015040 <xTaskIncrementTick+0x160>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	60fb      	str	r3, [r7, #12]
 8014f2e:	4b45      	ldr	r3, [pc, #276]	; (8015044 <xTaskIncrementTick+0x164>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	4a43      	ldr	r2, [pc, #268]	; (8015040 <xTaskIncrementTick+0x160>)
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	4a43      	ldr	r2, [pc, #268]	; (8015044 <xTaskIncrementTick+0x164>)
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6013      	str	r3, [r2, #0]
 8014f3c:	4b42      	ldr	r3, [pc, #264]	; (8015048 <xTaskIncrementTick+0x168>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	3301      	adds	r3, #1
 8014f42:	4a41      	ldr	r2, [pc, #260]	; (8015048 <xTaskIncrementTick+0x168>)
 8014f44:	6013      	str	r3, [r2, #0]
 8014f46:	f000 fb77 	bl	8015638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014f4a:	4b40      	ldr	r3, [pc, #256]	; (801504c <xTaskIncrementTick+0x16c>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	693a      	ldr	r2, [r7, #16]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d349      	bcc.n	8014fe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f54:	4b3a      	ldr	r3, [pc, #232]	; (8015040 <xTaskIncrementTick+0x160>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d104      	bne.n	8014f68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f5e:	4b3b      	ldr	r3, [pc, #236]	; (801504c <xTaskIncrementTick+0x16c>)
 8014f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f64:	601a      	str	r2, [r3, #0]
					break;
 8014f66:	e03f      	b.n	8014fe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f68:	4b35      	ldr	r3, [pc, #212]	; (8015040 <xTaskIncrementTick+0x160>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	68db      	ldr	r3, [r3, #12]
 8014f6e:	68db      	ldr	r3, [r3, #12]
 8014f70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014f78:	693a      	ldr	r2, [r7, #16]
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d203      	bcs.n	8014f88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014f80:	4a32      	ldr	r2, [pc, #200]	; (801504c <xTaskIncrementTick+0x16c>)
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014f86:	e02f      	b.n	8014fe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	3304      	adds	r3, #4
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fe fdc5 	bl	8013b1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d004      	beq.n	8014fa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	3318      	adds	r3, #24
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fe fdbc 	bl	8013b1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa8:	4b29      	ldr	r3, [pc, #164]	; (8015050 <xTaskIncrementTick+0x170>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d903      	bls.n	8014fb8 <xTaskIncrementTick+0xd8>
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb4:	4a26      	ldr	r2, [pc, #152]	; (8015050 <xTaskIncrementTick+0x170>)
 8014fb6:	6013      	str	r3, [r2, #0]
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4413      	add	r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	4a23      	ldr	r2, [pc, #140]	; (8015054 <xTaskIncrementTick+0x174>)
 8014fc6:	441a      	add	r2, r3
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	3304      	adds	r3, #4
 8014fcc:	4619      	mov	r1, r3
 8014fce:	4610      	mov	r0, r2
 8014fd0:	f7fe fd47 	bl	8013a62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd8:	4b1f      	ldr	r3, [pc, #124]	; (8015058 <xTaskIncrementTick+0x178>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d3b8      	bcc.n	8014f54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014fe6:	e7b5      	b.n	8014f54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014fe8:	4b1b      	ldr	r3, [pc, #108]	; (8015058 <xTaskIncrementTick+0x178>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fee:	4919      	ldr	r1, [pc, #100]	; (8015054 <xTaskIncrementTick+0x174>)
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	4413      	add	r3, r2
 8014ff6:	009b      	lsls	r3, r3, #2
 8014ff8:	440b      	add	r3, r1
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d901      	bls.n	8015004 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015000:	2301      	movs	r3, #1
 8015002:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015004:	4b15      	ldr	r3, [pc, #84]	; (801505c <xTaskIncrementTick+0x17c>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d101      	bne.n	8015010 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801500c:	f7eb faea 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015010:	4b13      	ldr	r3, [pc, #76]	; (8015060 <xTaskIncrementTick+0x180>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d009      	beq.n	801502c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015018:	2301      	movs	r3, #1
 801501a:	617b      	str	r3, [r7, #20]
 801501c:	e006      	b.n	801502c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801501e:	4b0f      	ldr	r3, [pc, #60]	; (801505c <xTaskIncrementTick+0x17c>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	3301      	adds	r3, #1
 8015024:	4a0d      	ldr	r2, [pc, #52]	; (801505c <xTaskIncrementTick+0x17c>)
 8015026:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015028:	f7eb fadc 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801502c:	697b      	ldr	r3, [r7, #20]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3718      	adds	r7, #24
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	24001d08 	.word	0x24001d08
 801503c:	24001ce4 	.word	0x24001ce4
 8015040:	24001c98 	.word	0x24001c98
 8015044:	24001c9c 	.word	0x24001c9c
 8015048:	24001cf8 	.word	0x24001cf8
 801504c:	24001d00 	.word	0x24001d00
 8015050:	24001ce8 	.word	0x24001ce8
 8015054:	24001810 	.word	0x24001810
 8015058:	2400180c 	.word	0x2400180c
 801505c:	24001cf0 	.word	0x24001cf0
 8015060:	24001cf4 	.word	0x24001cf4

08015064 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015064:	b480      	push	{r7}
 8015066:	b085      	sub	sp, #20
 8015068:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801506a:	4b28      	ldr	r3, [pc, #160]	; (801510c <vTaskSwitchContext+0xa8>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d003      	beq.n	801507a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015072:	4b27      	ldr	r3, [pc, #156]	; (8015110 <vTaskSwitchContext+0xac>)
 8015074:	2201      	movs	r2, #1
 8015076:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015078:	e041      	b.n	80150fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801507a:	4b25      	ldr	r3, [pc, #148]	; (8015110 <vTaskSwitchContext+0xac>)
 801507c:	2200      	movs	r2, #0
 801507e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015080:	4b24      	ldr	r3, [pc, #144]	; (8015114 <vTaskSwitchContext+0xb0>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	60fb      	str	r3, [r7, #12]
 8015086:	e010      	b.n	80150aa <vTaskSwitchContext+0x46>
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d10a      	bne.n	80150a4 <vTaskSwitchContext+0x40>
	__asm volatile
 801508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015092:	f383 8811 	msr	BASEPRI, r3
 8015096:	f3bf 8f6f 	isb	sy
 801509a:	f3bf 8f4f 	dsb	sy
 801509e:	607b      	str	r3, [r7, #4]
}
 80150a0:	bf00      	nop
 80150a2:	e7fe      	b.n	80150a2 <vTaskSwitchContext+0x3e>
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	3b01      	subs	r3, #1
 80150a8:	60fb      	str	r3, [r7, #12]
 80150aa:	491b      	ldr	r1, [pc, #108]	; (8015118 <vTaskSwitchContext+0xb4>)
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	4613      	mov	r3, r2
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	4413      	add	r3, r2
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	440b      	add	r3, r1
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d0e4      	beq.n	8015088 <vTaskSwitchContext+0x24>
 80150be:	68fa      	ldr	r2, [r7, #12]
 80150c0:	4613      	mov	r3, r2
 80150c2:	009b      	lsls	r3, r3, #2
 80150c4:	4413      	add	r3, r2
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	4a13      	ldr	r2, [pc, #76]	; (8015118 <vTaskSwitchContext+0xb4>)
 80150ca:	4413      	add	r3, r2
 80150cc:	60bb      	str	r3, [r7, #8]
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	685a      	ldr	r2, [r3, #4]
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	605a      	str	r2, [r3, #4]
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	685a      	ldr	r2, [r3, #4]
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	3308      	adds	r3, #8
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d104      	bne.n	80150ee <vTaskSwitchContext+0x8a>
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	685a      	ldr	r2, [r3, #4]
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	605a      	str	r2, [r3, #4]
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	4a09      	ldr	r2, [pc, #36]	; (801511c <vTaskSwitchContext+0xb8>)
 80150f6:	6013      	str	r3, [r2, #0]
 80150f8:	4a06      	ldr	r2, [pc, #24]	; (8015114 <vTaskSwitchContext+0xb0>)
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	6013      	str	r3, [r2, #0]
}
 80150fe:	bf00      	nop
 8015100:	3714      	adds	r7, #20
 8015102:	46bd      	mov	sp, r7
 8015104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	24001d08 	.word	0x24001d08
 8015110:	24001cf4 	.word	0x24001cf4
 8015114:	24001ce8 	.word	0x24001ce8
 8015118:	24001810 	.word	0x24001810
 801511c:	2400180c 	.word	0x2400180c

08015120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d10a      	bne.n	8015146 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015134:	f383 8811 	msr	BASEPRI, r3
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	f3bf 8f4f 	dsb	sy
 8015140:	60fb      	str	r3, [r7, #12]
}
 8015142:	bf00      	nop
 8015144:	e7fe      	b.n	8015144 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015146:	4b07      	ldr	r3, [pc, #28]	; (8015164 <vTaskPlaceOnEventList+0x44>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	3318      	adds	r3, #24
 801514c:	4619      	mov	r1, r3
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f7fe fcab 	bl	8013aaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015154:	2101      	movs	r1, #1
 8015156:	6838      	ldr	r0, [r7, #0]
 8015158:	f000 fb32 	bl	80157c0 <prvAddCurrentTaskToDelayedList>
}
 801515c:	bf00      	nop
 801515e:	3710      	adds	r7, #16
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	2400180c 	.word	0x2400180c

08015168 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b086      	sub	sp, #24
 801516c:	af00      	add	r7, sp, #0
 801516e:	60f8      	str	r0, [r7, #12]
 8015170:	60b9      	str	r1, [r7, #8]
 8015172:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d10a      	bne.n	8015190 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517e:	f383 8811 	msr	BASEPRI, r3
 8015182:	f3bf 8f6f 	isb	sy
 8015186:	f3bf 8f4f 	dsb	sy
 801518a:	617b      	str	r3, [r7, #20]
}
 801518c:	bf00      	nop
 801518e:	e7fe      	b.n	801518e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015190:	4b11      	ldr	r3, [pc, #68]	; (80151d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d10a      	bne.n	80151ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519c:	f383 8811 	msr	BASEPRI, r3
 80151a0:	f3bf 8f6f 	isb	sy
 80151a4:	f3bf 8f4f 	dsb	sy
 80151a8:	613b      	str	r3, [r7, #16]
}
 80151aa:	bf00      	nop
 80151ac:	e7fe      	b.n	80151ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80151ae:	4b0b      	ldr	r3, [pc, #44]	; (80151dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	68ba      	ldr	r2, [r7, #8]
 80151b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80151b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80151ba:	4b08      	ldr	r3, [pc, #32]	; (80151dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	3318      	adds	r3, #24
 80151c0:	4619      	mov	r1, r3
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	f7fe fc4d 	bl	8013a62 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80151c8:	2101      	movs	r1, #1
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f000 faf8 	bl	80157c0 <prvAddCurrentTaskToDelayedList>
}
 80151d0:	bf00      	nop
 80151d2:	3718      	adds	r7, #24
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	24001d08 	.word	0x24001d08
 80151dc:	2400180c 	.word	0x2400180c

080151e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b086      	sub	sp, #24
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	60f8      	str	r0, [r7, #12]
 80151e8:	60b9      	str	r1, [r7, #8]
 80151ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d10a      	bne.n	8015208 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80151f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f6:	f383 8811 	msr	BASEPRI, r3
 80151fa:	f3bf 8f6f 	isb	sy
 80151fe:	f3bf 8f4f 	dsb	sy
 8015202:	617b      	str	r3, [r7, #20]
}
 8015204:	bf00      	nop
 8015206:	e7fe      	b.n	8015206 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015208:	4b0a      	ldr	r3, [pc, #40]	; (8015234 <vTaskPlaceOnEventListRestricted+0x54>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	3318      	adds	r3, #24
 801520e:	4619      	mov	r1, r3
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f7fe fc26 	bl	8013a62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d002      	beq.n	8015222 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801521c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015220:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015222:	6879      	ldr	r1, [r7, #4]
 8015224:	68b8      	ldr	r0, [r7, #8]
 8015226:	f000 facb 	bl	80157c0 <prvAddCurrentTaskToDelayedList>
	}
 801522a:	bf00      	nop
 801522c:	3718      	adds	r7, #24
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	2400180c 	.word	0x2400180c

08015238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b086      	sub	sp, #24
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d10a      	bne.n	8015264 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015252:	f383 8811 	msr	BASEPRI, r3
 8015256:	f3bf 8f6f 	isb	sy
 801525a:	f3bf 8f4f 	dsb	sy
 801525e:	60fb      	str	r3, [r7, #12]
}
 8015260:	bf00      	nop
 8015262:	e7fe      	b.n	8015262 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015264:	693b      	ldr	r3, [r7, #16]
 8015266:	3318      	adds	r3, #24
 8015268:	4618      	mov	r0, r3
 801526a:	f7fe fc57 	bl	8013b1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801526e:	4b1e      	ldr	r3, [pc, #120]	; (80152e8 <xTaskRemoveFromEventList+0xb0>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d11d      	bne.n	80152b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	3304      	adds	r3, #4
 801527a:	4618      	mov	r0, r3
 801527c:	f7fe fc4e 	bl	8013b1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015284:	4b19      	ldr	r3, [pc, #100]	; (80152ec <xTaskRemoveFromEventList+0xb4>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	429a      	cmp	r2, r3
 801528a:	d903      	bls.n	8015294 <xTaskRemoveFromEventList+0x5c>
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015290:	4a16      	ldr	r2, [pc, #88]	; (80152ec <xTaskRemoveFromEventList+0xb4>)
 8015292:	6013      	str	r3, [r2, #0]
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015298:	4613      	mov	r3, r2
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	4413      	add	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4a13      	ldr	r2, [pc, #76]	; (80152f0 <xTaskRemoveFromEventList+0xb8>)
 80152a2:	441a      	add	r2, r3
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	3304      	adds	r3, #4
 80152a8:	4619      	mov	r1, r3
 80152aa:	4610      	mov	r0, r2
 80152ac:	f7fe fbd9 	bl	8013a62 <vListInsertEnd>
 80152b0:	e005      	b.n	80152be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80152b2:	693b      	ldr	r3, [r7, #16]
 80152b4:	3318      	adds	r3, #24
 80152b6:	4619      	mov	r1, r3
 80152b8:	480e      	ldr	r0, [pc, #56]	; (80152f4 <xTaskRemoveFromEventList+0xbc>)
 80152ba:	f7fe fbd2 	bl	8013a62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80152be:	693b      	ldr	r3, [r7, #16]
 80152c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152c2:	4b0d      	ldr	r3, [pc, #52]	; (80152f8 <xTaskRemoveFromEventList+0xc0>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d905      	bls.n	80152d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80152cc:	2301      	movs	r3, #1
 80152ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80152d0:	4b0a      	ldr	r3, [pc, #40]	; (80152fc <xTaskRemoveFromEventList+0xc4>)
 80152d2:	2201      	movs	r2, #1
 80152d4:	601a      	str	r2, [r3, #0]
 80152d6:	e001      	b.n	80152dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80152d8:	2300      	movs	r3, #0
 80152da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80152dc:	697b      	ldr	r3, [r7, #20]
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3718      	adds	r7, #24
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	bf00      	nop
 80152e8:	24001d08 	.word	0x24001d08
 80152ec:	24001ce8 	.word	0x24001ce8
 80152f0:	24001810 	.word	0x24001810
 80152f4:	24001ca0 	.word	0x24001ca0
 80152f8:	2400180c 	.word	0x2400180c
 80152fc:	24001cf4 	.word	0x24001cf4

08015300 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b086      	sub	sp, #24
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801530a:	4b29      	ldr	r3, [pc, #164]	; (80153b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d10a      	bne.n	8015328 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	613b      	str	r3, [r7, #16]
}
 8015324:	bf00      	nop
 8015326:	e7fe      	b.n	8015326 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	68db      	ldr	r3, [r3, #12]
 8015336:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d10a      	bne.n	8015354 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	60fb      	str	r3, [r7, #12]
}
 8015350:	bf00      	nop
 8015352:	e7fe      	b.n	8015352 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f7fe fbe1 	bl	8013b1c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	3304      	adds	r3, #4
 801535e:	4618      	mov	r0, r3
 8015360:	f7fe fbdc 	bl	8013b1c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015368:	4b12      	ldr	r3, [pc, #72]	; (80153b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	429a      	cmp	r2, r3
 801536e:	d903      	bls.n	8015378 <vTaskRemoveFromUnorderedEventList+0x78>
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015374:	4a0f      	ldr	r2, [pc, #60]	; (80153b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015376:	6013      	str	r3, [r2, #0]
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801537c:	4613      	mov	r3, r2
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	4413      	add	r3, r2
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	4a0c      	ldr	r2, [pc, #48]	; (80153b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015386:	441a      	add	r2, r3
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	3304      	adds	r3, #4
 801538c:	4619      	mov	r1, r3
 801538e:	4610      	mov	r0, r2
 8015390:	f7fe fb67 	bl	8013a62 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015398:	4b08      	ldr	r3, [pc, #32]	; (80153bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801539e:	429a      	cmp	r2, r3
 80153a0:	d902      	bls.n	80153a8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80153a2:	4b07      	ldr	r3, [pc, #28]	; (80153c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80153a4:	2201      	movs	r2, #1
 80153a6:	601a      	str	r2, [r3, #0]
	}
}
 80153a8:	bf00      	nop
 80153aa:	3718      	adds	r7, #24
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	24001d08 	.word	0x24001d08
 80153b4:	24001ce8 	.word	0x24001ce8
 80153b8:	24001810 	.word	0x24001810
 80153bc:	2400180c 	.word	0x2400180c
 80153c0:	24001cf4 	.word	0x24001cf4

080153c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80153cc:	4b06      	ldr	r3, [pc, #24]	; (80153e8 <vTaskInternalSetTimeOutState+0x24>)
 80153ce:	681a      	ldr	r2, [r3, #0]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80153d4:	4b05      	ldr	r3, [pc, #20]	; (80153ec <vTaskInternalSetTimeOutState+0x28>)
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	605a      	str	r2, [r3, #4]
}
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr
 80153e8:	24001cf8 	.word	0x24001cf8
 80153ec:	24001ce4 	.word	0x24001ce4

080153f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b088      	sub	sp, #32
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d10a      	bne.n	8015416 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015404:	f383 8811 	msr	BASEPRI, r3
 8015408:	f3bf 8f6f 	isb	sy
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	613b      	str	r3, [r7, #16]
}
 8015412:	bf00      	nop
 8015414:	e7fe      	b.n	8015414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d10a      	bne.n	8015432 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015420:	f383 8811 	msr	BASEPRI, r3
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	f3bf 8f4f 	dsb	sy
 801542c:	60fb      	str	r3, [r7, #12]
}
 801542e:	bf00      	nop
 8015430:	e7fe      	b.n	8015430 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015432:	f000 feb7 	bl	80161a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015436:	4b1d      	ldr	r3, [pc, #116]	; (80154ac <xTaskCheckForTimeOut+0xbc>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	69ba      	ldr	r2, [r7, #24]
 8015442:	1ad3      	subs	r3, r2, r3
 8015444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801544e:	d102      	bne.n	8015456 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015450:	2300      	movs	r3, #0
 8015452:	61fb      	str	r3, [r7, #28]
 8015454:	e023      	b.n	801549e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	4b15      	ldr	r3, [pc, #84]	; (80154b0 <xTaskCheckForTimeOut+0xc0>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	429a      	cmp	r2, r3
 8015460:	d007      	beq.n	8015472 <xTaskCheckForTimeOut+0x82>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	69ba      	ldr	r2, [r7, #24]
 8015468:	429a      	cmp	r2, r3
 801546a:	d302      	bcc.n	8015472 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801546c:	2301      	movs	r3, #1
 801546e:	61fb      	str	r3, [r7, #28]
 8015470:	e015      	b.n	801549e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	697a      	ldr	r2, [r7, #20]
 8015478:	429a      	cmp	r2, r3
 801547a:	d20b      	bcs.n	8015494 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	1ad2      	subs	r2, r2, r3
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f7ff ff9b 	bl	80153c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801548e:	2300      	movs	r3, #0
 8015490:	61fb      	str	r3, [r7, #28]
 8015492:	e004      	b.n	801549e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	2200      	movs	r2, #0
 8015498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801549a:	2301      	movs	r3, #1
 801549c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801549e:	f000 feb1 	bl	8016204 <vPortExitCritical>

	return xReturn;
 80154a2:	69fb      	ldr	r3, [r7, #28]
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	3720      	adds	r7, #32
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}
 80154ac:	24001ce4 	.word	0x24001ce4
 80154b0:	24001cf8 	.word	0x24001cf8

080154b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80154b4:	b480      	push	{r7}
 80154b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80154b8:	4b03      	ldr	r3, [pc, #12]	; (80154c8 <vTaskMissedYield+0x14>)
 80154ba:	2201      	movs	r2, #1
 80154bc:	601a      	str	r2, [r3, #0]
}
 80154be:	bf00      	nop
 80154c0:	46bd      	mov	sp, r7
 80154c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c6:	4770      	bx	lr
 80154c8:	24001cf4 	.word	0x24001cf4

080154cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80154d4:	f000 f852 	bl	801557c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80154d8:	4b06      	ldr	r3, [pc, #24]	; (80154f4 <prvIdleTask+0x28>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	2b01      	cmp	r3, #1
 80154de:	d9f9      	bls.n	80154d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80154e0:	4b05      	ldr	r3, [pc, #20]	; (80154f8 <prvIdleTask+0x2c>)
 80154e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154e6:	601a      	str	r2, [r3, #0]
 80154e8:	f3bf 8f4f 	dsb	sy
 80154ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80154f0:	e7f0      	b.n	80154d4 <prvIdleTask+0x8>
 80154f2:	bf00      	nop
 80154f4:	24001810 	.word	0x24001810
 80154f8:	e000ed04 	.word	0xe000ed04

080154fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015502:	2300      	movs	r3, #0
 8015504:	607b      	str	r3, [r7, #4]
 8015506:	e00c      	b.n	8015522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	4613      	mov	r3, r2
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	4413      	add	r3, r2
 8015510:	009b      	lsls	r3, r3, #2
 8015512:	4a12      	ldr	r2, [pc, #72]	; (801555c <prvInitialiseTaskLists+0x60>)
 8015514:	4413      	add	r3, r2
 8015516:	4618      	mov	r0, r3
 8015518:	f7fe fa76 	bl	8013a08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	3301      	adds	r3, #1
 8015520:	607b      	str	r3, [r7, #4]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2b37      	cmp	r3, #55	; 0x37
 8015526:	d9ef      	bls.n	8015508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015528:	480d      	ldr	r0, [pc, #52]	; (8015560 <prvInitialiseTaskLists+0x64>)
 801552a:	f7fe fa6d 	bl	8013a08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801552e:	480d      	ldr	r0, [pc, #52]	; (8015564 <prvInitialiseTaskLists+0x68>)
 8015530:	f7fe fa6a 	bl	8013a08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015534:	480c      	ldr	r0, [pc, #48]	; (8015568 <prvInitialiseTaskLists+0x6c>)
 8015536:	f7fe fa67 	bl	8013a08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801553a:	480c      	ldr	r0, [pc, #48]	; (801556c <prvInitialiseTaskLists+0x70>)
 801553c:	f7fe fa64 	bl	8013a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015540:	480b      	ldr	r0, [pc, #44]	; (8015570 <prvInitialiseTaskLists+0x74>)
 8015542:	f7fe fa61 	bl	8013a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015546:	4b0b      	ldr	r3, [pc, #44]	; (8015574 <prvInitialiseTaskLists+0x78>)
 8015548:	4a05      	ldr	r2, [pc, #20]	; (8015560 <prvInitialiseTaskLists+0x64>)
 801554a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801554c:	4b0a      	ldr	r3, [pc, #40]	; (8015578 <prvInitialiseTaskLists+0x7c>)
 801554e:	4a05      	ldr	r2, [pc, #20]	; (8015564 <prvInitialiseTaskLists+0x68>)
 8015550:	601a      	str	r2, [r3, #0]
}
 8015552:	bf00      	nop
 8015554:	3708      	adds	r7, #8
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	24001810 	.word	0x24001810
 8015560:	24001c70 	.word	0x24001c70
 8015564:	24001c84 	.word	0x24001c84
 8015568:	24001ca0 	.word	0x24001ca0
 801556c:	24001cb4 	.word	0x24001cb4
 8015570:	24001ccc 	.word	0x24001ccc
 8015574:	24001c98 	.word	0x24001c98
 8015578:	24001c9c 	.word	0x24001c9c

0801557c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015582:	e019      	b.n	80155b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015584:	f000 fe0e 	bl	80161a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015588:	4b10      	ldr	r3, [pc, #64]	; (80155cc <prvCheckTasksWaitingTermination+0x50>)
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	3304      	adds	r3, #4
 8015594:	4618      	mov	r0, r3
 8015596:	f7fe fac1 	bl	8013b1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801559a:	4b0d      	ldr	r3, [pc, #52]	; (80155d0 <prvCheckTasksWaitingTermination+0x54>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	3b01      	subs	r3, #1
 80155a0:	4a0b      	ldr	r2, [pc, #44]	; (80155d0 <prvCheckTasksWaitingTermination+0x54>)
 80155a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80155a4:	4b0b      	ldr	r3, [pc, #44]	; (80155d4 <prvCheckTasksWaitingTermination+0x58>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	3b01      	subs	r3, #1
 80155aa:	4a0a      	ldr	r2, [pc, #40]	; (80155d4 <prvCheckTasksWaitingTermination+0x58>)
 80155ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80155ae:	f000 fe29 	bl	8016204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	f000 f810 	bl	80155d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80155b8:	4b06      	ldr	r3, [pc, #24]	; (80155d4 <prvCheckTasksWaitingTermination+0x58>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1e1      	bne.n	8015584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80155c0:	bf00      	nop
 80155c2:	bf00      	nop
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	24001cb4 	.word	0x24001cb4
 80155d0:	24001ce0 	.word	0x24001ce0
 80155d4:	24001cc8 	.word	0x24001cc8

080155d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d108      	bne.n	80155fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155ee:	4618      	mov	r0, r3
 80155f0:	f000 ffc6 	bl	8016580 <vPortFree>
				vPortFree( pxTCB );
 80155f4:	6878      	ldr	r0, [r7, #4]
 80155f6:	f000 ffc3 	bl	8016580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80155fa:	e018      	b.n	801562e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015602:	2b01      	cmp	r3, #1
 8015604:	d103      	bne.n	801560e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f000 ffba 	bl	8016580 <vPortFree>
	}
 801560c:	e00f      	b.n	801562e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015614:	2b02      	cmp	r3, #2
 8015616:	d00a      	beq.n	801562e <prvDeleteTCB+0x56>
	__asm volatile
 8015618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801561c:	f383 8811 	msr	BASEPRI, r3
 8015620:	f3bf 8f6f 	isb	sy
 8015624:	f3bf 8f4f 	dsb	sy
 8015628:	60fb      	str	r3, [r7, #12]
}
 801562a:	bf00      	nop
 801562c:	e7fe      	b.n	801562c <prvDeleteTCB+0x54>
	}
 801562e:	bf00      	nop
 8015630:	3710      	adds	r7, #16
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
	...

08015638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015638:	b480      	push	{r7}
 801563a:	b083      	sub	sp, #12
 801563c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801563e:	4b0c      	ldr	r3, [pc, #48]	; (8015670 <prvResetNextTaskUnblockTime+0x38>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d104      	bne.n	8015652 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015648:	4b0a      	ldr	r3, [pc, #40]	; (8015674 <prvResetNextTaskUnblockTime+0x3c>)
 801564a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801564e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015650:	e008      	b.n	8015664 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015652:	4b07      	ldr	r3, [pc, #28]	; (8015670 <prvResetNextTaskUnblockTime+0x38>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	685b      	ldr	r3, [r3, #4]
 8015660:	4a04      	ldr	r2, [pc, #16]	; (8015674 <prvResetNextTaskUnblockTime+0x3c>)
 8015662:	6013      	str	r3, [r2, #0]
}
 8015664:	bf00      	nop
 8015666:	370c      	adds	r7, #12
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr
 8015670:	24001c98 	.word	0x24001c98
 8015674:	24001d00 	.word	0x24001d00

08015678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015678:	b480      	push	{r7}
 801567a:	b083      	sub	sp, #12
 801567c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801567e:	4b0b      	ldr	r3, [pc, #44]	; (80156ac <xTaskGetSchedulerState+0x34>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d102      	bne.n	801568c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015686:	2301      	movs	r3, #1
 8015688:	607b      	str	r3, [r7, #4]
 801568a:	e008      	b.n	801569e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801568c:	4b08      	ldr	r3, [pc, #32]	; (80156b0 <xTaskGetSchedulerState+0x38>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d102      	bne.n	801569a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015694:	2302      	movs	r3, #2
 8015696:	607b      	str	r3, [r7, #4]
 8015698:	e001      	b.n	801569e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801569a:	2300      	movs	r3, #0
 801569c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801569e:	687b      	ldr	r3, [r7, #4]
	}
 80156a0:	4618      	mov	r0, r3
 80156a2:	370c      	adds	r7, #12
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr
 80156ac:	24001cec 	.word	0x24001cec
 80156b0:	24001d08 	.word	0x24001d08

080156b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b086      	sub	sp, #24
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80156c0:	2300      	movs	r3, #0
 80156c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d056      	beq.n	8015778 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80156ca:	4b2e      	ldr	r3, [pc, #184]	; (8015784 <xTaskPriorityDisinherit+0xd0>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	693a      	ldr	r2, [r7, #16]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d00a      	beq.n	80156ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80156d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d8:	f383 8811 	msr	BASEPRI, r3
 80156dc:	f3bf 8f6f 	isb	sy
 80156e0:	f3bf 8f4f 	dsb	sy
 80156e4:	60fb      	str	r3, [r7, #12]
}
 80156e6:	bf00      	nop
 80156e8:	e7fe      	b.n	80156e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10a      	bne.n	8015708 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80156f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f6:	f383 8811 	msr	BASEPRI, r3
 80156fa:	f3bf 8f6f 	isb	sy
 80156fe:	f3bf 8f4f 	dsb	sy
 8015702:	60bb      	str	r3, [r7, #8]
}
 8015704:	bf00      	nop
 8015706:	e7fe      	b.n	8015706 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801570c:	1e5a      	subs	r2, r3, #1
 801570e:	693b      	ldr	r3, [r7, #16]
 8015710:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801571a:	429a      	cmp	r2, r3
 801571c:	d02c      	beq.n	8015778 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015722:	2b00      	cmp	r3, #0
 8015724:	d128      	bne.n	8015778 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015726:	693b      	ldr	r3, [r7, #16]
 8015728:	3304      	adds	r3, #4
 801572a:	4618      	mov	r0, r3
 801572c:	f7fe f9f6 	bl	8013b1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801573c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015748:	4b0f      	ldr	r3, [pc, #60]	; (8015788 <xTaskPriorityDisinherit+0xd4>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	429a      	cmp	r2, r3
 801574e:	d903      	bls.n	8015758 <xTaskPriorityDisinherit+0xa4>
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015754:	4a0c      	ldr	r2, [pc, #48]	; (8015788 <xTaskPriorityDisinherit+0xd4>)
 8015756:	6013      	str	r3, [r2, #0]
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801575c:	4613      	mov	r3, r2
 801575e:	009b      	lsls	r3, r3, #2
 8015760:	4413      	add	r3, r2
 8015762:	009b      	lsls	r3, r3, #2
 8015764:	4a09      	ldr	r2, [pc, #36]	; (801578c <xTaskPriorityDisinherit+0xd8>)
 8015766:	441a      	add	r2, r3
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	3304      	adds	r3, #4
 801576c:	4619      	mov	r1, r3
 801576e:	4610      	mov	r0, r2
 8015770:	f7fe f977 	bl	8013a62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015774:	2301      	movs	r3, #1
 8015776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015778:	697b      	ldr	r3, [r7, #20]
	}
 801577a:	4618      	mov	r0, r3
 801577c:	3718      	adds	r7, #24
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	2400180c 	.word	0x2400180c
 8015788:	24001ce8 	.word	0x24001ce8
 801578c:	24001810 	.word	0x24001810

08015790 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015796:	4b09      	ldr	r3, [pc, #36]	; (80157bc <uxTaskResetEventItemValue+0x2c>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	699b      	ldr	r3, [r3, #24]
 801579c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801579e:	4b07      	ldr	r3, [pc, #28]	; (80157bc <uxTaskResetEventItemValue+0x2c>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157a4:	4b05      	ldr	r3, [pc, #20]	; (80157bc <uxTaskResetEventItemValue+0x2c>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80157ac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80157ae:	687b      	ldr	r3, [r7, #4]
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr
 80157bc:	2400180c 	.word	0x2400180c

080157c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b084      	sub	sp, #16
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80157ca:	4b21      	ldr	r3, [pc, #132]	; (8015850 <prvAddCurrentTaskToDelayedList+0x90>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157d0:	4b20      	ldr	r3, [pc, #128]	; (8015854 <prvAddCurrentTaskToDelayedList+0x94>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	3304      	adds	r3, #4
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fe f9a0 	bl	8013b1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157e2:	d10a      	bne.n	80157fa <prvAddCurrentTaskToDelayedList+0x3a>
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d007      	beq.n	80157fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80157ea:	4b1a      	ldr	r3, [pc, #104]	; (8015854 <prvAddCurrentTaskToDelayedList+0x94>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	3304      	adds	r3, #4
 80157f0:	4619      	mov	r1, r3
 80157f2:	4819      	ldr	r0, [pc, #100]	; (8015858 <prvAddCurrentTaskToDelayedList+0x98>)
 80157f4:	f7fe f935 	bl	8013a62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80157f8:	e026      	b.n	8015848 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80157fa:	68fa      	ldr	r2, [r7, #12]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	4413      	add	r3, r2
 8015800:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015802:	4b14      	ldr	r3, [pc, #80]	; (8015854 <prvAddCurrentTaskToDelayedList+0x94>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	68ba      	ldr	r2, [r7, #8]
 8015808:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801580a:	68ba      	ldr	r2, [r7, #8]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	429a      	cmp	r2, r3
 8015810:	d209      	bcs.n	8015826 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015812:	4b12      	ldr	r3, [pc, #72]	; (801585c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	4b0f      	ldr	r3, [pc, #60]	; (8015854 <prvAddCurrentTaskToDelayedList+0x94>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	3304      	adds	r3, #4
 801581c:	4619      	mov	r1, r3
 801581e:	4610      	mov	r0, r2
 8015820:	f7fe f943 	bl	8013aaa <vListInsert>
}
 8015824:	e010      	b.n	8015848 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015826:	4b0e      	ldr	r3, [pc, #56]	; (8015860 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	4b0a      	ldr	r3, [pc, #40]	; (8015854 <prvAddCurrentTaskToDelayedList+0x94>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	3304      	adds	r3, #4
 8015830:	4619      	mov	r1, r3
 8015832:	4610      	mov	r0, r2
 8015834:	f7fe f939 	bl	8013aaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015838:	4b0a      	ldr	r3, [pc, #40]	; (8015864 <prvAddCurrentTaskToDelayedList+0xa4>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	68ba      	ldr	r2, [r7, #8]
 801583e:	429a      	cmp	r2, r3
 8015840:	d202      	bcs.n	8015848 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015842:	4a08      	ldr	r2, [pc, #32]	; (8015864 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	6013      	str	r3, [r2, #0]
}
 8015848:	bf00      	nop
 801584a:	3710      	adds	r7, #16
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}
 8015850:	24001ce4 	.word	0x24001ce4
 8015854:	2400180c 	.word	0x2400180c
 8015858:	24001ccc 	.word	0x24001ccc
 801585c:	24001c9c 	.word	0x24001c9c
 8015860:	24001c98 	.word	0x24001c98
 8015864:	24001d00 	.word	0x24001d00

08015868 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08a      	sub	sp, #40	; 0x28
 801586c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801586e:	2300      	movs	r3, #0
 8015870:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015872:	f000 fb07 	bl	8015e84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015876:	4b1c      	ldr	r3, [pc, #112]	; (80158e8 <xTimerCreateTimerTask+0x80>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d021      	beq.n	80158c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801587e:	2300      	movs	r3, #0
 8015880:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015882:	2300      	movs	r3, #0
 8015884:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015886:	1d3a      	adds	r2, r7, #4
 8015888:	f107 0108 	add.w	r1, r7, #8
 801588c:	f107 030c 	add.w	r3, r7, #12
 8015890:	4618      	mov	r0, r3
 8015892:	f7fd fe33 	bl	80134fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015896:	6879      	ldr	r1, [r7, #4]
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	68fa      	ldr	r2, [r7, #12]
 801589c:	9202      	str	r2, [sp, #8]
 801589e:	9301      	str	r3, [sp, #4]
 80158a0:	2302      	movs	r3, #2
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	2300      	movs	r3, #0
 80158a6:	460a      	mov	r2, r1
 80158a8:	4910      	ldr	r1, [pc, #64]	; (80158ec <xTimerCreateTimerTask+0x84>)
 80158aa:	4811      	ldr	r0, [pc, #68]	; (80158f0 <xTimerCreateTimerTask+0x88>)
 80158ac:	f7fe ff06 	bl	80146bc <xTaskCreateStatic>
 80158b0:	4603      	mov	r3, r0
 80158b2:	4a10      	ldr	r2, [pc, #64]	; (80158f4 <xTimerCreateTimerTask+0x8c>)
 80158b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80158b6:	4b0f      	ldr	r3, [pc, #60]	; (80158f4 <xTimerCreateTimerTask+0x8c>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d001      	beq.n	80158c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80158be:	2301      	movs	r3, #1
 80158c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d10a      	bne.n	80158de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80158c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158cc:	f383 8811 	msr	BASEPRI, r3
 80158d0:	f3bf 8f6f 	isb	sy
 80158d4:	f3bf 8f4f 	dsb	sy
 80158d8:	613b      	str	r3, [r7, #16]
}
 80158da:	bf00      	nop
 80158dc:	e7fe      	b.n	80158dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80158de:	697b      	ldr	r3, [r7, #20]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3718      	adds	r7, #24
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	24001d3c 	.word	0x24001d3c
 80158ec:	080174e0 	.word	0x080174e0
 80158f0:	08015a2d 	.word	0x08015a2d
 80158f4:	24001d40 	.word	0x24001d40

080158f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b08a      	sub	sp, #40	; 0x28
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015906:	2300      	movs	r3, #0
 8015908:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10a      	bne.n	8015926 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015914:	f383 8811 	msr	BASEPRI, r3
 8015918:	f3bf 8f6f 	isb	sy
 801591c:	f3bf 8f4f 	dsb	sy
 8015920:	623b      	str	r3, [r7, #32]
}
 8015922:	bf00      	nop
 8015924:	e7fe      	b.n	8015924 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015926:	4b1a      	ldr	r3, [pc, #104]	; (8015990 <xTimerGenericCommand+0x98>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d02a      	beq.n	8015984 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	2b05      	cmp	r3, #5
 801593e:	dc18      	bgt.n	8015972 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015940:	f7ff fe9a 	bl	8015678 <xTaskGetSchedulerState>
 8015944:	4603      	mov	r3, r0
 8015946:	2b02      	cmp	r3, #2
 8015948:	d109      	bne.n	801595e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801594a:	4b11      	ldr	r3, [pc, #68]	; (8015990 <xTimerGenericCommand+0x98>)
 801594c:	6818      	ldr	r0, [r3, #0]
 801594e:	f107 0110 	add.w	r1, r7, #16
 8015952:	2300      	movs	r3, #0
 8015954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015956:	f7fe fa49 	bl	8013dec <xQueueGenericSend>
 801595a:	6278      	str	r0, [r7, #36]	; 0x24
 801595c:	e012      	b.n	8015984 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801595e:	4b0c      	ldr	r3, [pc, #48]	; (8015990 <xTimerGenericCommand+0x98>)
 8015960:	6818      	ldr	r0, [r3, #0]
 8015962:	f107 0110 	add.w	r1, r7, #16
 8015966:	2300      	movs	r3, #0
 8015968:	2200      	movs	r2, #0
 801596a:	f7fe fa3f 	bl	8013dec <xQueueGenericSend>
 801596e:	6278      	str	r0, [r7, #36]	; 0x24
 8015970:	e008      	b.n	8015984 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015972:	4b07      	ldr	r3, [pc, #28]	; (8015990 <xTimerGenericCommand+0x98>)
 8015974:	6818      	ldr	r0, [r3, #0]
 8015976:	f107 0110 	add.w	r1, r7, #16
 801597a:	2300      	movs	r3, #0
 801597c:	683a      	ldr	r2, [r7, #0]
 801597e:	f7fe fb33 	bl	8013fe8 <xQueueGenericSendFromISR>
 8015982:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015986:	4618      	mov	r0, r3
 8015988:	3728      	adds	r7, #40	; 0x28
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop
 8015990:	24001d3c 	.word	0x24001d3c

08015994 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b088      	sub	sp, #32
 8015998:	af02      	add	r7, sp, #8
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801599e:	4b22      	ldr	r3, [pc, #136]	; (8015a28 <prvProcessExpiredTimer+0x94>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	3304      	adds	r3, #4
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7fe f8b5 	bl	8013b1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159b8:	f003 0304 	and.w	r3, r3, #4
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d022      	beq.n	8015a06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	699a      	ldr	r2, [r3, #24]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	18d1      	adds	r1, r2, r3
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	683a      	ldr	r2, [r7, #0]
 80159cc:	6978      	ldr	r0, [r7, #20]
 80159ce:	f000 f8d1 	bl	8015b74 <prvInsertTimerInActiveList>
 80159d2:	4603      	mov	r3, r0
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d01f      	beq.n	8015a18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80159d8:	2300      	movs	r3, #0
 80159da:	9300      	str	r3, [sp, #0]
 80159dc:	2300      	movs	r3, #0
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	2100      	movs	r1, #0
 80159e2:	6978      	ldr	r0, [r7, #20]
 80159e4:	f7ff ff88 	bl	80158f8 <xTimerGenericCommand>
 80159e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d113      	bne.n	8015a18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80159f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f4:	f383 8811 	msr	BASEPRI, r3
 80159f8:	f3bf 8f6f 	isb	sy
 80159fc:	f3bf 8f4f 	dsb	sy
 8015a00:	60fb      	str	r3, [r7, #12]
}
 8015a02:	bf00      	nop
 8015a04:	e7fe      	b.n	8015a04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a0c:	f023 0301 	bic.w	r3, r3, #1
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	6a1b      	ldr	r3, [r3, #32]
 8015a1c:	6978      	ldr	r0, [r7, #20]
 8015a1e:	4798      	blx	r3
}
 8015a20:	bf00      	nop
 8015a22:	3718      	adds	r7, #24
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	24001d34 	.word	0x24001d34

08015a2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015a34:	f107 0308 	add.w	r3, r7, #8
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f000 f857 	bl	8015aec <prvGetNextExpireTime>
 8015a3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	4619      	mov	r1, r3
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	f000 f803 	bl	8015a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015a4a:	f000 f8d5 	bl	8015bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015a4e:	e7f1      	b.n	8015a34 <prvTimerTask+0x8>

08015a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015a5a:	f7ff f985 	bl	8014d68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015a5e:	f107 0308 	add.w	r3, r7, #8
 8015a62:	4618      	mov	r0, r3
 8015a64:	f000 f866 	bl	8015b34 <prvSampleTimeNow>
 8015a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d130      	bne.n	8015ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d10a      	bne.n	8015a8c <prvProcessTimerOrBlockTask+0x3c>
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d806      	bhi.n	8015a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015a7e:	f7ff f981 	bl	8014d84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015a82:	68f9      	ldr	r1, [r7, #12]
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f7ff ff85 	bl	8015994 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015a8a:	e024      	b.n	8015ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d008      	beq.n	8015aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015a92:	4b13      	ldr	r3, [pc, #76]	; (8015ae0 <prvProcessTimerOrBlockTask+0x90>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d101      	bne.n	8015aa0 <prvProcessTimerOrBlockTask+0x50>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	e000      	b.n	8015aa2 <prvProcessTimerOrBlockTask+0x52>
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015aa4:	4b0f      	ldr	r3, [pc, #60]	; (8015ae4 <prvProcessTimerOrBlockTask+0x94>)
 8015aa6:	6818      	ldr	r0, [r3, #0]
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	1ad3      	subs	r3, r2, r3
 8015aae:	683a      	ldr	r2, [r7, #0]
 8015ab0:	4619      	mov	r1, r3
 8015ab2:	f7fe fdcf 	bl	8014654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015ab6:	f7ff f965 	bl	8014d84 <xTaskResumeAll>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d10a      	bne.n	8015ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015ac0:	4b09      	ldr	r3, [pc, #36]	; (8015ae8 <prvProcessTimerOrBlockTask+0x98>)
 8015ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ac6:	601a      	str	r2, [r3, #0]
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	f3bf 8f6f 	isb	sy
}
 8015ad0:	e001      	b.n	8015ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015ad2:	f7ff f957 	bl	8014d84 <xTaskResumeAll>
}
 8015ad6:	bf00      	nop
 8015ad8:	3710      	adds	r7, #16
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
 8015ade:	bf00      	nop
 8015ae0:	24001d38 	.word	0x24001d38
 8015ae4:	24001d3c 	.word	0x24001d3c
 8015ae8:	e000ed04 	.word	0xe000ed04

08015aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015aec:	b480      	push	{r7}
 8015aee:	b085      	sub	sp, #20
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015af4:	4b0e      	ldr	r3, [pc, #56]	; (8015b30 <prvGetNextExpireTime+0x44>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d101      	bne.n	8015b02 <prvGetNextExpireTime+0x16>
 8015afe:	2201      	movs	r2, #1
 8015b00:	e000      	b.n	8015b04 <prvGetNextExpireTime+0x18>
 8015b02:	2200      	movs	r2, #0
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d105      	bne.n	8015b1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015b10:	4b07      	ldr	r3, [pc, #28]	; (8015b30 <prvGetNextExpireTime+0x44>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	60fb      	str	r3, [r7, #12]
 8015b1a:	e001      	b.n	8015b20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015b20:	68fb      	ldr	r3, [r7, #12]
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3714      	adds	r7, #20
 8015b26:	46bd      	mov	sp, r7
 8015b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2c:	4770      	bx	lr
 8015b2e:	bf00      	nop
 8015b30:	24001d34 	.word	0x24001d34

08015b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b084      	sub	sp, #16
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015b3c:	f7ff f9c0 	bl	8014ec0 <xTaskGetTickCount>
 8015b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015b42:	4b0b      	ldr	r3, [pc, #44]	; (8015b70 <prvSampleTimeNow+0x3c>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	68fa      	ldr	r2, [r7, #12]
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	d205      	bcs.n	8015b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015b4c:	f000 f936 	bl	8015dbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2201      	movs	r2, #1
 8015b54:	601a      	str	r2, [r3, #0]
 8015b56:	e002      	b.n	8015b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015b5e:	4a04      	ldr	r2, [pc, #16]	; (8015b70 <prvSampleTimeNow+0x3c>)
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015b64:	68fb      	ldr	r3, [r7, #12]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	24001d44 	.word	0x24001d44

08015b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b086      	sub	sp, #24
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	60f8      	str	r0, [r7, #12]
 8015b7c:	60b9      	str	r1, [r7, #8]
 8015b7e:	607a      	str	r2, [r7, #4]
 8015b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015b82:	2300      	movs	r3, #0
 8015b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	68ba      	ldr	r2, [r7, #8]
 8015b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	68fa      	ldr	r2, [r7, #12]
 8015b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015b92:	68ba      	ldr	r2, [r7, #8]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d812      	bhi.n	8015bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	1ad2      	subs	r2, r2, r3
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	699b      	ldr	r3, [r3, #24]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d302      	bcc.n	8015bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	617b      	str	r3, [r7, #20]
 8015bac:	e01b      	b.n	8015be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015bae:	4b10      	ldr	r3, [pc, #64]	; (8015bf0 <prvInsertTimerInActiveList+0x7c>)
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	4619      	mov	r1, r3
 8015bb8:	4610      	mov	r0, r2
 8015bba:	f7fd ff76 	bl	8013aaa <vListInsert>
 8015bbe:	e012      	b.n	8015be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015bc0:	687a      	ldr	r2, [r7, #4]
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d206      	bcs.n	8015bd6 <prvInsertTimerInActiveList+0x62>
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d302      	bcc.n	8015bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	617b      	str	r3, [r7, #20]
 8015bd4:	e007      	b.n	8015be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015bd6:	4b07      	ldr	r3, [pc, #28]	; (8015bf4 <prvInsertTimerInActiveList+0x80>)
 8015bd8:	681a      	ldr	r2, [r3, #0]
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	3304      	adds	r3, #4
 8015bde:	4619      	mov	r1, r3
 8015be0:	4610      	mov	r0, r2
 8015be2:	f7fd ff62 	bl	8013aaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015be6:	697b      	ldr	r3, [r7, #20]
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3718      	adds	r7, #24
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	24001d38 	.word	0x24001d38
 8015bf4:	24001d34 	.word	0x24001d34

08015bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b08e      	sub	sp, #56	; 0x38
 8015bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015bfe:	e0ca      	b.n	8015d96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	da18      	bge.n	8015c38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015c06:	1d3b      	adds	r3, r7, #4
 8015c08:	3304      	adds	r3, #4
 8015c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d10a      	bne.n	8015c28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c16:	f383 8811 	msr	BASEPRI, r3
 8015c1a:	f3bf 8f6f 	isb	sy
 8015c1e:	f3bf 8f4f 	dsb	sy
 8015c22:	61fb      	str	r3, [r7, #28]
}
 8015c24:	bf00      	nop
 8015c26:	e7fe      	b.n	8015c26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c2e:	6850      	ldr	r0, [r2, #4]
 8015c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c32:	6892      	ldr	r2, [r2, #8]
 8015c34:	4611      	mov	r1, r2
 8015c36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f2c0 80aa 	blt.w	8015d94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c46:	695b      	ldr	r3, [r3, #20]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d004      	beq.n	8015c56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c4e:	3304      	adds	r3, #4
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7fd ff63 	bl	8013b1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015c56:	463b      	mov	r3, r7
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7ff ff6b 	bl	8015b34 <prvSampleTimeNow>
 8015c5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2b09      	cmp	r3, #9
 8015c64:	f200 8097 	bhi.w	8015d96 <prvProcessReceivedCommands+0x19e>
 8015c68:	a201      	add	r2, pc, #4	; (adr r2, 8015c70 <prvProcessReceivedCommands+0x78>)
 8015c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c6e:	bf00      	nop
 8015c70:	08015c99 	.word	0x08015c99
 8015c74:	08015c99 	.word	0x08015c99
 8015c78:	08015c99 	.word	0x08015c99
 8015c7c:	08015d0d 	.word	0x08015d0d
 8015c80:	08015d21 	.word	0x08015d21
 8015c84:	08015d6b 	.word	0x08015d6b
 8015c88:	08015c99 	.word	0x08015c99
 8015c8c:	08015c99 	.word	0x08015c99
 8015c90:	08015d0d 	.word	0x08015d0d
 8015c94:	08015d21 	.word	0x08015d21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c9e:	f043 0301 	orr.w	r3, r3, #1
 8015ca2:	b2da      	uxtb	r2, r3
 8015ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015caa:	68ba      	ldr	r2, [r7, #8]
 8015cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cae:	699b      	ldr	r3, [r3, #24]
 8015cb0:	18d1      	adds	r1, r2, r3
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cb8:	f7ff ff5c 	bl	8015b74 <prvInsertTimerInActiveList>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d069      	beq.n	8015d96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc4:	6a1b      	ldr	r3, [r3, #32]
 8015cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015cd0:	f003 0304 	and.w	r3, r3, #4
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d05e      	beq.n	8015d96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015cd8:	68ba      	ldr	r2, [r7, #8]
 8015cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cdc:	699b      	ldr	r3, [r3, #24]
 8015cde:	441a      	add	r2, r3
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	9300      	str	r3, [sp, #0]
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	2100      	movs	r1, #0
 8015ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cea:	f7ff fe05 	bl	80158f8 <xTimerGenericCommand>
 8015cee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015cf0:	6a3b      	ldr	r3, [r7, #32]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d14f      	bne.n	8015d96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cfa:	f383 8811 	msr	BASEPRI, r3
 8015cfe:	f3bf 8f6f 	isb	sy
 8015d02:	f3bf 8f4f 	dsb	sy
 8015d06:	61bb      	str	r3, [r7, #24]
}
 8015d08:	bf00      	nop
 8015d0a:	e7fe      	b.n	8015d0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d12:	f023 0301 	bic.w	r3, r3, #1
 8015d16:	b2da      	uxtb	r2, r3
 8015d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015d1e:	e03a      	b.n	8015d96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d26:	f043 0301 	orr.w	r3, r3, #1
 8015d2a:	b2da      	uxtb	r2, r3
 8015d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015d32:	68ba      	ldr	r2, [r7, #8]
 8015d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d3a:	699b      	ldr	r3, [r3, #24]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d10a      	bne.n	8015d56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d44:	f383 8811 	msr	BASEPRI, r3
 8015d48:	f3bf 8f6f 	isb	sy
 8015d4c:	f3bf 8f4f 	dsb	sy
 8015d50:	617b      	str	r3, [r7, #20]
}
 8015d52:	bf00      	nop
 8015d54:	e7fe      	b.n	8015d54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d58:	699a      	ldr	r2, [r3, #24]
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5c:	18d1      	adds	r1, r2, r3
 8015d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d64:	f7ff ff06 	bl	8015b74 <prvInsertTimerInActiveList>
					break;
 8015d68:	e015      	b.n	8015d96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d70:	f003 0302 	and.w	r3, r3, #2
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d103      	bne.n	8015d80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d7a:	f000 fc01 	bl	8016580 <vPortFree>
 8015d7e:	e00a      	b.n	8015d96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d86:	f023 0301 	bic.w	r3, r3, #1
 8015d8a:	b2da      	uxtb	r2, r3
 8015d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015d92:	e000      	b.n	8015d96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015d94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015d96:	4b08      	ldr	r3, [pc, #32]	; (8015db8 <prvProcessReceivedCommands+0x1c0>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	1d39      	adds	r1, r7, #4
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7fe f9be 	bl	8014120 <xQueueReceive>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	f47f af2a 	bne.w	8015c00 <prvProcessReceivedCommands+0x8>
	}
}
 8015dac:	bf00      	nop
 8015dae:	bf00      	nop
 8015db0:	3730      	adds	r7, #48	; 0x30
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	24001d3c 	.word	0x24001d3c

08015dbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b088      	sub	sp, #32
 8015dc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015dc2:	e048      	b.n	8015e56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015dc4:	4b2d      	ldr	r3, [pc, #180]	; (8015e7c <prvSwitchTimerLists+0xc0>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	68db      	ldr	r3, [r3, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015dce:	4b2b      	ldr	r3, [pc, #172]	; (8015e7c <prvSwitchTimerLists+0xc0>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	68db      	ldr	r3, [r3, #12]
 8015dd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fd fe9d 	bl	8013b1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	6a1b      	ldr	r3, [r3, #32]
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015df0:	f003 0304 	and.w	r3, r3, #4
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d02e      	beq.n	8015e56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	699b      	ldr	r3, [r3, #24]
 8015dfc:	693a      	ldr	r2, [r7, #16]
 8015dfe:	4413      	add	r3, r2
 8015e00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015e02:	68ba      	ldr	r2, [r7, #8]
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d90e      	bls.n	8015e28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	68ba      	ldr	r2, [r7, #8]
 8015e0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	68fa      	ldr	r2, [r7, #12]
 8015e14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015e16:	4b19      	ldr	r3, [pc, #100]	; (8015e7c <prvSwitchTimerLists+0xc0>)
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	4619      	mov	r1, r3
 8015e20:	4610      	mov	r0, r2
 8015e22:	f7fd fe42 	bl	8013aaa <vListInsert>
 8015e26:	e016      	b.n	8015e56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015e28:	2300      	movs	r3, #0
 8015e2a:	9300      	str	r3, [sp, #0]
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	693a      	ldr	r2, [r7, #16]
 8015e30:	2100      	movs	r1, #0
 8015e32:	68f8      	ldr	r0, [r7, #12]
 8015e34:	f7ff fd60 	bl	80158f8 <xTimerGenericCommand>
 8015e38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d10a      	bne.n	8015e56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e44:	f383 8811 	msr	BASEPRI, r3
 8015e48:	f3bf 8f6f 	isb	sy
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	603b      	str	r3, [r7, #0]
}
 8015e52:	bf00      	nop
 8015e54:	e7fe      	b.n	8015e54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015e56:	4b09      	ldr	r3, [pc, #36]	; (8015e7c <prvSwitchTimerLists+0xc0>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d1b1      	bne.n	8015dc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015e60:	4b06      	ldr	r3, [pc, #24]	; (8015e7c <prvSwitchTimerLists+0xc0>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015e66:	4b06      	ldr	r3, [pc, #24]	; (8015e80 <prvSwitchTimerLists+0xc4>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	4a04      	ldr	r2, [pc, #16]	; (8015e7c <prvSwitchTimerLists+0xc0>)
 8015e6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015e6e:	4a04      	ldr	r2, [pc, #16]	; (8015e80 <prvSwitchTimerLists+0xc4>)
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	6013      	str	r3, [r2, #0]
}
 8015e74:	bf00      	nop
 8015e76:	3718      	adds	r7, #24
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	24001d34 	.word	0x24001d34
 8015e80:	24001d38 	.word	0x24001d38

08015e84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015e8a:	f000 f98b 	bl	80161a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015e8e:	4b15      	ldr	r3, [pc, #84]	; (8015ee4 <prvCheckForValidListAndQueue+0x60>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d120      	bne.n	8015ed8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015e96:	4814      	ldr	r0, [pc, #80]	; (8015ee8 <prvCheckForValidListAndQueue+0x64>)
 8015e98:	f7fd fdb6 	bl	8013a08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015e9c:	4813      	ldr	r0, [pc, #76]	; (8015eec <prvCheckForValidListAndQueue+0x68>)
 8015e9e:	f7fd fdb3 	bl	8013a08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015ea2:	4b13      	ldr	r3, [pc, #76]	; (8015ef0 <prvCheckForValidListAndQueue+0x6c>)
 8015ea4:	4a10      	ldr	r2, [pc, #64]	; (8015ee8 <prvCheckForValidListAndQueue+0x64>)
 8015ea6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015ea8:	4b12      	ldr	r3, [pc, #72]	; (8015ef4 <prvCheckForValidListAndQueue+0x70>)
 8015eaa:	4a10      	ldr	r2, [pc, #64]	; (8015eec <prvCheckForValidListAndQueue+0x68>)
 8015eac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015eae:	2300      	movs	r3, #0
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	4b11      	ldr	r3, [pc, #68]	; (8015ef8 <prvCheckForValidListAndQueue+0x74>)
 8015eb4:	4a11      	ldr	r2, [pc, #68]	; (8015efc <prvCheckForValidListAndQueue+0x78>)
 8015eb6:	2110      	movs	r1, #16
 8015eb8:	200a      	movs	r0, #10
 8015eba:	f7fd fec1 	bl	8013c40 <xQueueGenericCreateStatic>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	4a08      	ldr	r2, [pc, #32]	; (8015ee4 <prvCheckForValidListAndQueue+0x60>)
 8015ec2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015ec4:	4b07      	ldr	r3, [pc, #28]	; (8015ee4 <prvCheckForValidListAndQueue+0x60>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d005      	beq.n	8015ed8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015ecc:	4b05      	ldr	r3, [pc, #20]	; (8015ee4 <prvCheckForValidListAndQueue+0x60>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	490b      	ldr	r1, [pc, #44]	; (8015f00 <prvCheckForValidListAndQueue+0x7c>)
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7fe fb94 	bl	8014600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015ed8:	f000 f994 	bl	8016204 <vPortExitCritical>
}
 8015edc:	bf00      	nop
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	24001d3c 	.word	0x24001d3c
 8015ee8:	24001d0c 	.word	0x24001d0c
 8015eec:	24001d20 	.word	0x24001d20
 8015ef0:	24001d34 	.word	0x24001d34
 8015ef4:	24001d38 	.word	0x24001d38
 8015ef8:	24001de8 	.word	0x24001de8
 8015efc:	24001d48 	.word	0x24001d48
 8015f00:	080174e8 	.word	0x080174e8

08015f04 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b08a      	sub	sp, #40	; 0x28
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	60b9      	str	r1, [r7, #8]
 8015f0e:	607a      	str	r2, [r7, #4]
 8015f10:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015f12:	f06f 0301 	mvn.w	r3, #1
 8015f16:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015f24:	4b06      	ldr	r3, [pc, #24]	; (8015f40 <xTimerPendFunctionCallFromISR+0x3c>)
 8015f26:	6818      	ldr	r0, [r3, #0]
 8015f28:	f107 0114 	add.w	r1, r7, #20
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	683a      	ldr	r2, [r7, #0]
 8015f30:	f7fe f85a 	bl	8013fe8 <xQueueGenericSendFromISR>
 8015f34:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3728      	adds	r7, #40	; 0x28
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}
 8015f40:	24001d3c 	.word	0x24001d3c

08015f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015f44:	b480      	push	{r7}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	3b04      	subs	r3, #4
 8015f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	3b04      	subs	r3, #4
 8015f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015f64:	68bb      	ldr	r3, [r7, #8]
 8015f66:	f023 0201 	bic.w	r2, r3, #1
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	3b04      	subs	r3, #4
 8015f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015f74:	4a0c      	ldr	r2, [pc, #48]	; (8015fa8 <pxPortInitialiseStack+0x64>)
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	3b14      	subs	r3, #20
 8015f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	3b04      	subs	r3, #4
 8015f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f06f 0202 	mvn.w	r2, #2
 8015f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	3b20      	subs	r3, #32
 8015f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015f9a:	68fb      	ldr	r3, [r7, #12]
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3714      	adds	r7, #20
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr
 8015fa8:	08015fad 	.word	0x08015fad

08015fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015fac:	b480      	push	{r7}
 8015fae:	b085      	sub	sp, #20
 8015fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015fb6:	4b12      	ldr	r3, [pc, #72]	; (8016000 <prvTaskExitError+0x54>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fbe:	d00a      	beq.n	8015fd6 <prvTaskExitError+0x2a>
	__asm volatile
 8015fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc4:	f383 8811 	msr	BASEPRI, r3
 8015fc8:	f3bf 8f6f 	isb	sy
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	60fb      	str	r3, [r7, #12]
}
 8015fd2:	bf00      	nop
 8015fd4:	e7fe      	b.n	8015fd4 <prvTaskExitError+0x28>
	__asm volatile
 8015fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fda:	f383 8811 	msr	BASEPRI, r3
 8015fde:	f3bf 8f6f 	isb	sy
 8015fe2:	f3bf 8f4f 	dsb	sy
 8015fe6:	60bb      	str	r3, [r7, #8]
}
 8015fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015fea:	bf00      	nop
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d0fc      	beq.n	8015fec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ff2:	bf00      	nop
 8015ff4:	bf00      	nop
 8015ff6:	3714      	adds	r7, #20
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffe:	4770      	bx	lr
 8016000:	240000a0 	.word	0x240000a0
	...

08016010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016010:	4b07      	ldr	r3, [pc, #28]	; (8016030 <pxCurrentTCBConst2>)
 8016012:	6819      	ldr	r1, [r3, #0]
 8016014:	6808      	ldr	r0, [r1, #0]
 8016016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601a:	f380 8809 	msr	PSP, r0
 801601e:	f3bf 8f6f 	isb	sy
 8016022:	f04f 0000 	mov.w	r0, #0
 8016026:	f380 8811 	msr	BASEPRI, r0
 801602a:	4770      	bx	lr
 801602c:	f3af 8000 	nop.w

08016030 <pxCurrentTCBConst2>:
 8016030:	2400180c 	.word	0x2400180c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016034:	bf00      	nop
 8016036:	bf00      	nop

08016038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016038:	4808      	ldr	r0, [pc, #32]	; (801605c <prvPortStartFirstTask+0x24>)
 801603a:	6800      	ldr	r0, [r0, #0]
 801603c:	6800      	ldr	r0, [r0, #0]
 801603e:	f380 8808 	msr	MSP, r0
 8016042:	f04f 0000 	mov.w	r0, #0
 8016046:	f380 8814 	msr	CONTROL, r0
 801604a:	b662      	cpsie	i
 801604c:	b661      	cpsie	f
 801604e:	f3bf 8f4f 	dsb	sy
 8016052:	f3bf 8f6f 	isb	sy
 8016056:	df00      	svc	0
 8016058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801605a:	bf00      	nop
 801605c:	e000ed08 	.word	0xe000ed08

08016060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b086      	sub	sp, #24
 8016064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016066:	4b46      	ldr	r3, [pc, #280]	; (8016180 <xPortStartScheduler+0x120>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	4a46      	ldr	r2, [pc, #280]	; (8016184 <xPortStartScheduler+0x124>)
 801606c:	4293      	cmp	r3, r2
 801606e:	d10a      	bne.n	8016086 <xPortStartScheduler+0x26>
	__asm volatile
 8016070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016074:	f383 8811 	msr	BASEPRI, r3
 8016078:	f3bf 8f6f 	isb	sy
 801607c:	f3bf 8f4f 	dsb	sy
 8016080:	613b      	str	r3, [r7, #16]
}
 8016082:	bf00      	nop
 8016084:	e7fe      	b.n	8016084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016086:	4b3e      	ldr	r3, [pc, #248]	; (8016180 <xPortStartScheduler+0x120>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	4a3f      	ldr	r2, [pc, #252]	; (8016188 <xPortStartScheduler+0x128>)
 801608c:	4293      	cmp	r3, r2
 801608e:	d10a      	bne.n	80160a6 <xPortStartScheduler+0x46>
	__asm volatile
 8016090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016094:	f383 8811 	msr	BASEPRI, r3
 8016098:	f3bf 8f6f 	isb	sy
 801609c:	f3bf 8f4f 	dsb	sy
 80160a0:	60fb      	str	r3, [r7, #12]
}
 80160a2:	bf00      	nop
 80160a4:	e7fe      	b.n	80160a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80160a6:	4b39      	ldr	r3, [pc, #228]	; (801618c <xPortStartScheduler+0x12c>)
 80160a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	22ff      	movs	r2, #255	; 0xff
 80160b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80160c0:	78fb      	ldrb	r3, [r7, #3]
 80160c2:	b2db      	uxtb	r3, r3
 80160c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80160c8:	b2da      	uxtb	r2, r3
 80160ca:	4b31      	ldr	r3, [pc, #196]	; (8016190 <xPortStartScheduler+0x130>)
 80160cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80160ce:	4b31      	ldr	r3, [pc, #196]	; (8016194 <xPortStartScheduler+0x134>)
 80160d0:	2207      	movs	r2, #7
 80160d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80160d4:	e009      	b.n	80160ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80160d6:	4b2f      	ldr	r3, [pc, #188]	; (8016194 <xPortStartScheduler+0x134>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	3b01      	subs	r3, #1
 80160dc:	4a2d      	ldr	r2, [pc, #180]	; (8016194 <xPortStartScheduler+0x134>)
 80160de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80160e0:	78fb      	ldrb	r3, [r7, #3]
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80160ea:	78fb      	ldrb	r3, [r7, #3]
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160f2:	2b80      	cmp	r3, #128	; 0x80
 80160f4:	d0ef      	beq.n	80160d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80160f6:	4b27      	ldr	r3, [pc, #156]	; (8016194 <xPortStartScheduler+0x134>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	f1c3 0307 	rsb	r3, r3, #7
 80160fe:	2b04      	cmp	r3, #4
 8016100:	d00a      	beq.n	8016118 <xPortStartScheduler+0xb8>
	__asm volatile
 8016102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016106:	f383 8811 	msr	BASEPRI, r3
 801610a:	f3bf 8f6f 	isb	sy
 801610e:	f3bf 8f4f 	dsb	sy
 8016112:	60bb      	str	r3, [r7, #8]
}
 8016114:	bf00      	nop
 8016116:	e7fe      	b.n	8016116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016118:	4b1e      	ldr	r3, [pc, #120]	; (8016194 <xPortStartScheduler+0x134>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	021b      	lsls	r3, r3, #8
 801611e:	4a1d      	ldr	r2, [pc, #116]	; (8016194 <xPortStartScheduler+0x134>)
 8016120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016122:	4b1c      	ldr	r3, [pc, #112]	; (8016194 <xPortStartScheduler+0x134>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801612a:	4a1a      	ldr	r2, [pc, #104]	; (8016194 <xPortStartScheduler+0x134>)
 801612c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	b2da      	uxtb	r2, r3
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016136:	4b18      	ldr	r3, [pc, #96]	; (8016198 <xPortStartScheduler+0x138>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	4a17      	ldr	r2, [pc, #92]	; (8016198 <xPortStartScheduler+0x138>)
 801613c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016142:	4b15      	ldr	r3, [pc, #84]	; (8016198 <xPortStartScheduler+0x138>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4a14      	ldr	r2, [pc, #80]	; (8016198 <xPortStartScheduler+0x138>)
 8016148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801614c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801614e:	f000 f8dd 	bl	801630c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016152:	4b12      	ldr	r3, [pc, #72]	; (801619c <xPortStartScheduler+0x13c>)
 8016154:	2200      	movs	r2, #0
 8016156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016158:	f000 f8fc 	bl	8016354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801615c:	4b10      	ldr	r3, [pc, #64]	; (80161a0 <xPortStartScheduler+0x140>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	4a0f      	ldr	r2, [pc, #60]	; (80161a0 <xPortStartScheduler+0x140>)
 8016162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016168:	f7ff ff66 	bl	8016038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801616c:	f7fe ff7a 	bl	8015064 <vTaskSwitchContext>
	prvTaskExitError();
 8016170:	f7ff ff1c 	bl	8015fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016174:	2300      	movs	r3, #0
}
 8016176:	4618      	mov	r0, r3
 8016178:	3718      	adds	r7, #24
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}
 801617e:	bf00      	nop
 8016180:	e000ed00 	.word	0xe000ed00
 8016184:	410fc271 	.word	0x410fc271
 8016188:	410fc270 	.word	0x410fc270
 801618c:	e000e400 	.word	0xe000e400
 8016190:	24001e38 	.word	0x24001e38
 8016194:	24001e3c 	.word	0x24001e3c
 8016198:	e000ed20 	.word	0xe000ed20
 801619c:	240000a0 	.word	0x240000a0
 80161a0:	e000ef34 	.word	0xe000ef34

080161a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80161a4:	b480      	push	{r7}
 80161a6:	b083      	sub	sp, #12
 80161a8:	af00      	add	r7, sp, #0
	__asm volatile
 80161aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ae:	f383 8811 	msr	BASEPRI, r3
 80161b2:	f3bf 8f6f 	isb	sy
 80161b6:	f3bf 8f4f 	dsb	sy
 80161ba:	607b      	str	r3, [r7, #4]
}
 80161bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80161be:	4b0f      	ldr	r3, [pc, #60]	; (80161fc <vPortEnterCritical+0x58>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	3301      	adds	r3, #1
 80161c4:	4a0d      	ldr	r2, [pc, #52]	; (80161fc <vPortEnterCritical+0x58>)
 80161c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80161c8:	4b0c      	ldr	r3, [pc, #48]	; (80161fc <vPortEnterCritical+0x58>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	d10f      	bne.n	80161f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80161d0:	4b0b      	ldr	r3, [pc, #44]	; (8016200 <vPortEnterCritical+0x5c>)
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d00a      	beq.n	80161f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80161da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161de:	f383 8811 	msr	BASEPRI, r3
 80161e2:	f3bf 8f6f 	isb	sy
 80161e6:	f3bf 8f4f 	dsb	sy
 80161ea:	603b      	str	r3, [r7, #0]
}
 80161ec:	bf00      	nop
 80161ee:	e7fe      	b.n	80161ee <vPortEnterCritical+0x4a>
	}
}
 80161f0:	bf00      	nop
 80161f2:	370c      	adds	r7, #12
 80161f4:	46bd      	mov	sp, r7
 80161f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fa:	4770      	bx	lr
 80161fc:	240000a0 	.word	0x240000a0
 8016200:	e000ed04 	.word	0xe000ed04

08016204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801620a:	4b12      	ldr	r3, [pc, #72]	; (8016254 <vPortExitCritical+0x50>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d10a      	bne.n	8016228 <vPortExitCritical+0x24>
	__asm volatile
 8016212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016216:	f383 8811 	msr	BASEPRI, r3
 801621a:	f3bf 8f6f 	isb	sy
 801621e:	f3bf 8f4f 	dsb	sy
 8016222:	607b      	str	r3, [r7, #4]
}
 8016224:	bf00      	nop
 8016226:	e7fe      	b.n	8016226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016228:	4b0a      	ldr	r3, [pc, #40]	; (8016254 <vPortExitCritical+0x50>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	3b01      	subs	r3, #1
 801622e:	4a09      	ldr	r2, [pc, #36]	; (8016254 <vPortExitCritical+0x50>)
 8016230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016232:	4b08      	ldr	r3, [pc, #32]	; (8016254 <vPortExitCritical+0x50>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d105      	bne.n	8016246 <vPortExitCritical+0x42>
 801623a:	2300      	movs	r3, #0
 801623c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	f383 8811 	msr	BASEPRI, r3
}
 8016244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016246:	bf00      	nop
 8016248:	370c      	adds	r7, #12
 801624a:	46bd      	mov	sp, r7
 801624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016250:	4770      	bx	lr
 8016252:	bf00      	nop
 8016254:	240000a0 	.word	0x240000a0
	...

08016260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016260:	f3ef 8009 	mrs	r0, PSP
 8016264:	f3bf 8f6f 	isb	sy
 8016268:	4b15      	ldr	r3, [pc, #84]	; (80162c0 <pxCurrentTCBConst>)
 801626a:	681a      	ldr	r2, [r3, #0]
 801626c:	f01e 0f10 	tst.w	lr, #16
 8016270:	bf08      	it	eq
 8016272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801627a:	6010      	str	r0, [r2, #0]
 801627c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016284:	f380 8811 	msr	BASEPRI, r0
 8016288:	f3bf 8f4f 	dsb	sy
 801628c:	f3bf 8f6f 	isb	sy
 8016290:	f7fe fee8 	bl	8015064 <vTaskSwitchContext>
 8016294:	f04f 0000 	mov.w	r0, #0
 8016298:	f380 8811 	msr	BASEPRI, r0
 801629c:	bc09      	pop	{r0, r3}
 801629e:	6819      	ldr	r1, [r3, #0]
 80162a0:	6808      	ldr	r0, [r1, #0]
 80162a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a6:	f01e 0f10 	tst.w	lr, #16
 80162aa:	bf08      	it	eq
 80162ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80162b0:	f380 8809 	msr	PSP, r0
 80162b4:	f3bf 8f6f 	isb	sy
 80162b8:	4770      	bx	lr
 80162ba:	bf00      	nop
 80162bc:	f3af 8000 	nop.w

080162c0 <pxCurrentTCBConst>:
 80162c0:	2400180c 	.word	0x2400180c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80162c4:	bf00      	nop
 80162c6:	bf00      	nop

080162c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
	__asm volatile
 80162ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d2:	f383 8811 	msr	BASEPRI, r3
 80162d6:	f3bf 8f6f 	isb	sy
 80162da:	f3bf 8f4f 	dsb	sy
 80162de:	607b      	str	r3, [r7, #4]
}
 80162e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80162e2:	f7fe fdfd 	bl	8014ee0 <xTaskIncrementTick>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d003      	beq.n	80162f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80162ec:	4b06      	ldr	r3, [pc, #24]	; (8016308 <xPortSysTickHandler+0x40>)
 80162ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162f2:	601a      	str	r2, [r3, #0]
 80162f4:	2300      	movs	r3, #0
 80162f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	f383 8811 	msr	BASEPRI, r3
}
 80162fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016300:	bf00      	nop
 8016302:	3708      	adds	r7, #8
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}
 8016308:	e000ed04 	.word	0xe000ed04

0801630c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801630c:	b480      	push	{r7}
 801630e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016310:	4b0b      	ldr	r3, [pc, #44]	; (8016340 <vPortSetupTimerInterrupt+0x34>)
 8016312:	2200      	movs	r2, #0
 8016314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016316:	4b0b      	ldr	r3, [pc, #44]	; (8016344 <vPortSetupTimerInterrupt+0x38>)
 8016318:	2200      	movs	r2, #0
 801631a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801631c:	4b0a      	ldr	r3, [pc, #40]	; (8016348 <vPortSetupTimerInterrupt+0x3c>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	4a0a      	ldr	r2, [pc, #40]	; (801634c <vPortSetupTimerInterrupt+0x40>)
 8016322:	fba2 2303 	umull	r2, r3, r2, r3
 8016326:	099b      	lsrs	r3, r3, #6
 8016328:	4a09      	ldr	r2, [pc, #36]	; (8016350 <vPortSetupTimerInterrupt+0x44>)
 801632a:	3b01      	subs	r3, #1
 801632c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801632e:	4b04      	ldr	r3, [pc, #16]	; (8016340 <vPortSetupTimerInterrupt+0x34>)
 8016330:	2207      	movs	r2, #7
 8016332:	601a      	str	r2, [r3, #0]
}
 8016334:	bf00      	nop
 8016336:	46bd      	mov	sp, r7
 8016338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633c:	4770      	bx	lr
 801633e:	bf00      	nop
 8016340:	e000e010 	.word	0xe000e010
 8016344:	e000e018 	.word	0xe000e018
 8016348:	24000090 	.word	0x24000090
 801634c:	10624dd3 	.word	0x10624dd3
 8016350:	e000e014 	.word	0xe000e014

08016354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016364 <vPortEnableVFP+0x10>
 8016358:	6801      	ldr	r1, [r0, #0]
 801635a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801635e:	6001      	str	r1, [r0, #0]
 8016360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016362:	bf00      	nop
 8016364:	e000ed88 	.word	0xe000ed88

08016368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016368:	b480      	push	{r7}
 801636a:	b085      	sub	sp, #20
 801636c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801636e:	f3ef 8305 	mrs	r3, IPSR
 8016372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2b0f      	cmp	r3, #15
 8016378:	d914      	bls.n	80163a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801637a:	4a17      	ldr	r2, [pc, #92]	; (80163d8 <vPortValidateInterruptPriority+0x70>)
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	4413      	add	r3, r2
 8016380:	781b      	ldrb	r3, [r3, #0]
 8016382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016384:	4b15      	ldr	r3, [pc, #84]	; (80163dc <vPortValidateInterruptPriority+0x74>)
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	7afa      	ldrb	r2, [r7, #11]
 801638a:	429a      	cmp	r2, r3
 801638c:	d20a      	bcs.n	80163a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016392:	f383 8811 	msr	BASEPRI, r3
 8016396:	f3bf 8f6f 	isb	sy
 801639a:	f3bf 8f4f 	dsb	sy
 801639e:	607b      	str	r3, [r7, #4]
}
 80163a0:	bf00      	nop
 80163a2:	e7fe      	b.n	80163a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80163a4:	4b0e      	ldr	r3, [pc, #56]	; (80163e0 <vPortValidateInterruptPriority+0x78>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80163ac:	4b0d      	ldr	r3, [pc, #52]	; (80163e4 <vPortValidateInterruptPriority+0x7c>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	429a      	cmp	r2, r3
 80163b2:	d90a      	bls.n	80163ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80163b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b8:	f383 8811 	msr	BASEPRI, r3
 80163bc:	f3bf 8f6f 	isb	sy
 80163c0:	f3bf 8f4f 	dsb	sy
 80163c4:	603b      	str	r3, [r7, #0]
}
 80163c6:	bf00      	nop
 80163c8:	e7fe      	b.n	80163c8 <vPortValidateInterruptPriority+0x60>
	}
 80163ca:	bf00      	nop
 80163cc:	3714      	adds	r7, #20
 80163ce:	46bd      	mov	sp, r7
 80163d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop
 80163d8:	e000e3f0 	.word	0xe000e3f0
 80163dc:	24001e38 	.word	0x24001e38
 80163e0:	e000ed0c 	.word	0xe000ed0c
 80163e4:	24001e3c 	.word	0x24001e3c

080163e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b08a      	sub	sp, #40	; 0x28
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80163f0:	2300      	movs	r3, #0
 80163f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80163f4:	f7fe fcb8 	bl	8014d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80163f8:	4b5b      	ldr	r3, [pc, #364]	; (8016568 <pvPortMalloc+0x180>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d101      	bne.n	8016404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016400:	f000 f920 	bl	8016644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016404:	4b59      	ldr	r3, [pc, #356]	; (801656c <pvPortMalloc+0x184>)
 8016406:	681a      	ldr	r2, [r3, #0]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	4013      	ands	r3, r2
 801640c:	2b00      	cmp	r3, #0
 801640e:	f040 8093 	bne.w	8016538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d01d      	beq.n	8016454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016418:	2208      	movs	r2, #8
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	4413      	add	r3, r2
 801641e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f003 0307 	and.w	r3, r3, #7
 8016426:	2b00      	cmp	r3, #0
 8016428:	d014      	beq.n	8016454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	f023 0307 	bic.w	r3, r3, #7
 8016430:	3308      	adds	r3, #8
 8016432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f003 0307 	and.w	r3, r3, #7
 801643a:	2b00      	cmp	r3, #0
 801643c:	d00a      	beq.n	8016454 <pvPortMalloc+0x6c>
	__asm volatile
 801643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016442:	f383 8811 	msr	BASEPRI, r3
 8016446:	f3bf 8f6f 	isb	sy
 801644a:	f3bf 8f4f 	dsb	sy
 801644e:	617b      	str	r3, [r7, #20]
}
 8016450:	bf00      	nop
 8016452:	e7fe      	b.n	8016452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d06e      	beq.n	8016538 <pvPortMalloc+0x150>
 801645a:	4b45      	ldr	r3, [pc, #276]	; (8016570 <pvPortMalloc+0x188>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	687a      	ldr	r2, [r7, #4]
 8016460:	429a      	cmp	r2, r3
 8016462:	d869      	bhi.n	8016538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016464:	4b43      	ldr	r3, [pc, #268]	; (8016574 <pvPortMalloc+0x18c>)
 8016466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016468:	4b42      	ldr	r3, [pc, #264]	; (8016574 <pvPortMalloc+0x18c>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801646e:	e004      	b.n	801647a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	687a      	ldr	r2, [r7, #4]
 8016480:	429a      	cmp	r2, r3
 8016482:	d903      	bls.n	801648c <pvPortMalloc+0xa4>
 8016484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d1f1      	bne.n	8016470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801648c:	4b36      	ldr	r3, [pc, #216]	; (8016568 <pvPortMalloc+0x180>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016492:	429a      	cmp	r2, r3
 8016494:	d050      	beq.n	8016538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016496:	6a3b      	ldr	r3, [r7, #32]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	2208      	movs	r2, #8
 801649c:	4413      	add	r3, r2
 801649e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80164a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a2:	681a      	ldr	r2, [r3, #0]
 80164a4:	6a3b      	ldr	r3, [r7, #32]
 80164a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80164a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164aa:	685a      	ldr	r2, [r3, #4]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	1ad2      	subs	r2, r2, r3
 80164b0:	2308      	movs	r3, #8
 80164b2:	005b      	lsls	r3, r3, #1
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d91f      	bls.n	80164f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80164b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	4413      	add	r3, r2
 80164be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80164c0:	69bb      	ldr	r3, [r7, #24]
 80164c2:	f003 0307 	and.w	r3, r3, #7
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d00a      	beq.n	80164e0 <pvPortMalloc+0xf8>
	__asm volatile
 80164ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ce:	f383 8811 	msr	BASEPRI, r3
 80164d2:	f3bf 8f6f 	isb	sy
 80164d6:	f3bf 8f4f 	dsb	sy
 80164da:	613b      	str	r3, [r7, #16]
}
 80164dc:	bf00      	nop
 80164de:	e7fe      	b.n	80164de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80164e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e2:	685a      	ldr	r2, [r3, #4]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	1ad2      	subs	r2, r2, r3
 80164e8:	69bb      	ldr	r3, [r7, #24]
 80164ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80164ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ee:	687a      	ldr	r2, [r7, #4]
 80164f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80164f2:	69b8      	ldr	r0, [r7, #24]
 80164f4:	f000 f908 	bl	8016708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80164f8:	4b1d      	ldr	r3, [pc, #116]	; (8016570 <pvPortMalloc+0x188>)
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	1ad3      	subs	r3, r2, r3
 8016502:	4a1b      	ldr	r2, [pc, #108]	; (8016570 <pvPortMalloc+0x188>)
 8016504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016506:	4b1a      	ldr	r3, [pc, #104]	; (8016570 <pvPortMalloc+0x188>)
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	4b1b      	ldr	r3, [pc, #108]	; (8016578 <pvPortMalloc+0x190>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	429a      	cmp	r2, r3
 8016510:	d203      	bcs.n	801651a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016512:	4b17      	ldr	r3, [pc, #92]	; (8016570 <pvPortMalloc+0x188>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	4a18      	ldr	r2, [pc, #96]	; (8016578 <pvPortMalloc+0x190>)
 8016518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	685a      	ldr	r2, [r3, #4]
 801651e:	4b13      	ldr	r3, [pc, #76]	; (801656c <pvPortMalloc+0x184>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	431a      	orrs	r2, r3
 8016524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652a:	2200      	movs	r2, #0
 801652c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801652e:	4b13      	ldr	r3, [pc, #76]	; (801657c <pvPortMalloc+0x194>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	3301      	adds	r3, #1
 8016534:	4a11      	ldr	r2, [pc, #68]	; (801657c <pvPortMalloc+0x194>)
 8016536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016538:	f7fe fc24 	bl	8014d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801653c:	69fb      	ldr	r3, [r7, #28]
 801653e:	f003 0307 	and.w	r3, r3, #7
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00a      	beq.n	801655c <pvPortMalloc+0x174>
	__asm volatile
 8016546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654a:	f383 8811 	msr	BASEPRI, r3
 801654e:	f3bf 8f6f 	isb	sy
 8016552:	f3bf 8f4f 	dsb	sy
 8016556:	60fb      	str	r3, [r7, #12]
}
 8016558:	bf00      	nop
 801655a:	e7fe      	b.n	801655a <pvPortMalloc+0x172>
	return pvReturn;
 801655c:	69fb      	ldr	r3, [r7, #28]
}
 801655e:	4618      	mov	r0, r3
 8016560:	3728      	adds	r7, #40	; 0x28
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	24005a48 	.word	0x24005a48
 801656c:	24005a5c 	.word	0x24005a5c
 8016570:	24005a4c 	.word	0x24005a4c
 8016574:	24005a40 	.word	0x24005a40
 8016578:	24005a50 	.word	0x24005a50
 801657c:	24005a54 	.word	0x24005a54

08016580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d04d      	beq.n	801662e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016592:	2308      	movs	r3, #8
 8016594:	425b      	negs	r3, r3
 8016596:	697a      	ldr	r2, [r7, #20]
 8016598:	4413      	add	r3, r2
 801659a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	685a      	ldr	r2, [r3, #4]
 80165a4:	4b24      	ldr	r3, [pc, #144]	; (8016638 <vPortFree+0xb8>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4013      	ands	r3, r2
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d10a      	bne.n	80165c4 <vPortFree+0x44>
	__asm volatile
 80165ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b2:	f383 8811 	msr	BASEPRI, r3
 80165b6:	f3bf 8f6f 	isb	sy
 80165ba:	f3bf 8f4f 	dsb	sy
 80165be:	60fb      	str	r3, [r7, #12]
}
 80165c0:	bf00      	nop
 80165c2:	e7fe      	b.n	80165c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80165c4:	693b      	ldr	r3, [r7, #16]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d00a      	beq.n	80165e2 <vPortFree+0x62>
	__asm volatile
 80165cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d0:	f383 8811 	msr	BASEPRI, r3
 80165d4:	f3bf 8f6f 	isb	sy
 80165d8:	f3bf 8f4f 	dsb	sy
 80165dc:	60bb      	str	r3, [r7, #8]
}
 80165de:	bf00      	nop
 80165e0:	e7fe      	b.n	80165e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	685a      	ldr	r2, [r3, #4]
 80165e6:	4b14      	ldr	r3, [pc, #80]	; (8016638 <vPortFree+0xb8>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	4013      	ands	r3, r2
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d01e      	beq.n	801662e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80165f0:	693b      	ldr	r3, [r7, #16]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d11a      	bne.n	801662e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	685a      	ldr	r2, [r3, #4]
 80165fc:	4b0e      	ldr	r3, [pc, #56]	; (8016638 <vPortFree+0xb8>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	43db      	mvns	r3, r3
 8016602:	401a      	ands	r2, r3
 8016604:	693b      	ldr	r3, [r7, #16]
 8016606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016608:	f7fe fbae 	bl	8014d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	685a      	ldr	r2, [r3, #4]
 8016610:	4b0a      	ldr	r3, [pc, #40]	; (801663c <vPortFree+0xbc>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4413      	add	r3, r2
 8016616:	4a09      	ldr	r2, [pc, #36]	; (801663c <vPortFree+0xbc>)
 8016618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801661a:	6938      	ldr	r0, [r7, #16]
 801661c:	f000 f874 	bl	8016708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016620:	4b07      	ldr	r3, [pc, #28]	; (8016640 <vPortFree+0xc0>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	3301      	adds	r3, #1
 8016626:	4a06      	ldr	r2, [pc, #24]	; (8016640 <vPortFree+0xc0>)
 8016628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801662a:	f7fe fbab 	bl	8014d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801662e:	bf00      	nop
 8016630:	3718      	adds	r7, #24
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	24005a5c 	.word	0x24005a5c
 801663c:	24005a4c 	.word	0x24005a4c
 8016640:	24005a58 	.word	0x24005a58

08016644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016644:	b480      	push	{r7}
 8016646:	b085      	sub	sp, #20
 8016648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801664a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801664e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016650:	4b27      	ldr	r3, [pc, #156]	; (80166f0 <prvHeapInit+0xac>)
 8016652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	f003 0307 	and.w	r3, r3, #7
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00c      	beq.n	8016678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	3307      	adds	r3, #7
 8016662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f023 0307 	bic.w	r3, r3, #7
 801666a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801666c:	68ba      	ldr	r2, [r7, #8]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	1ad3      	subs	r3, r2, r3
 8016672:	4a1f      	ldr	r2, [pc, #124]	; (80166f0 <prvHeapInit+0xac>)
 8016674:	4413      	add	r3, r2
 8016676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801667c:	4a1d      	ldr	r2, [pc, #116]	; (80166f4 <prvHeapInit+0xb0>)
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016682:	4b1c      	ldr	r3, [pc, #112]	; (80166f4 <prvHeapInit+0xb0>)
 8016684:	2200      	movs	r2, #0
 8016686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	68ba      	ldr	r2, [r7, #8]
 801668c:	4413      	add	r3, r2
 801668e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016690:	2208      	movs	r2, #8
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	1a9b      	subs	r3, r3, r2
 8016696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	f023 0307 	bic.w	r3, r3, #7
 801669e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	4a15      	ldr	r2, [pc, #84]	; (80166f8 <prvHeapInit+0xb4>)
 80166a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80166a6:	4b14      	ldr	r3, [pc, #80]	; (80166f8 <prvHeapInit+0xb4>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	2200      	movs	r2, #0
 80166ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80166ae:	4b12      	ldr	r3, [pc, #72]	; (80166f8 <prvHeapInit+0xb4>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2200      	movs	r2, #0
 80166b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	68fa      	ldr	r2, [r7, #12]
 80166be:	1ad2      	subs	r2, r2, r3
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80166c4:	4b0c      	ldr	r3, [pc, #48]	; (80166f8 <prvHeapInit+0xb4>)
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	4a0a      	ldr	r2, [pc, #40]	; (80166fc <prvHeapInit+0xb8>)
 80166d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	685b      	ldr	r3, [r3, #4]
 80166d8:	4a09      	ldr	r2, [pc, #36]	; (8016700 <prvHeapInit+0xbc>)
 80166da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80166dc:	4b09      	ldr	r3, [pc, #36]	; (8016704 <prvHeapInit+0xc0>)
 80166de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80166e2:	601a      	str	r2, [r3, #0]
}
 80166e4:	bf00      	nop
 80166e6:	3714      	adds	r7, #20
 80166e8:	46bd      	mov	sp, r7
 80166ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ee:	4770      	bx	lr
 80166f0:	24001e40 	.word	0x24001e40
 80166f4:	24005a40 	.word	0x24005a40
 80166f8:	24005a48 	.word	0x24005a48
 80166fc:	24005a50 	.word	0x24005a50
 8016700:	24005a4c 	.word	0x24005a4c
 8016704:	24005a5c 	.word	0x24005a5c

08016708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016708:	b480      	push	{r7}
 801670a:	b085      	sub	sp, #20
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016710:	4b28      	ldr	r3, [pc, #160]	; (80167b4 <prvInsertBlockIntoFreeList+0xac>)
 8016712:	60fb      	str	r3, [r7, #12]
 8016714:	e002      	b.n	801671c <prvInsertBlockIntoFreeList+0x14>
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	60fb      	str	r3, [r7, #12]
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	429a      	cmp	r2, r3
 8016724:	d8f7      	bhi.n	8016716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	68ba      	ldr	r2, [r7, #8]
 8016730:	4413      	add	r3, r2
 8016732:	687a      	ldr	r2, [r7, #4]
 8016734:	429a      	cmp	r2, r3
 8016736:	d108      	bne.n	801674a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	685a      	ldr	r2, [r3, #4]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	441a      	add	r2, r3
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	685b      	ldr	r3, [r3, #4]
 8016752:	68ba      	ldr	r2, [r7, #8]
 8016754:	441a      	add	r2, r3
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	429a      	cmp	r2, r3
 801675c:	d118      	bne.n	8016790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681a      	ldr	r2, [r3, #0]
 8016762:	4b15      	ldr	r3, [pc, #84]	; (80167b8 <prvInsertBlockIntoFreeList+0xb0>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	429a      	cmp	r2, r3
 8016768:	d00d      	beq.n	8016786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	685a      	ldr	r2, [r3, #4]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	685b      	ldr	r3, [r3, #4]
 8016774:	441a      	add	r2, r3
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	e008      	b.n	8016798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016786:	4b0c      	ldr	r3, [pc, #48]	; (80167b8 <prvInsertBlockIntoFreeList+0xb0>)
 8016788:	681a      	ldr	r2, [r3, #0]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	e003      	b.n	8016798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	681a      	ldr	r2, [r3, #0]
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016798:	68fa      	ldr	r2, [r7, #12]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	429a      	cmp	r2, r3
 801679e:	d002      	beq.n	80167a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80167a6:	bf00      	nop
 80167a8:	3714      	adds	r7, #20
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop
 80167b4:	24005a40 	.word	0x24005a40
 80167b8:	24005a48 	.word	0x24005a48

080167bc <__errno>:
 80167bc:	4b01      	ldr	r3, [pc, #4]	; (80167c4 <__errno+0x8>)
 80167be:	6818      	ldr	r0, [r3, #0]
 80167c0:	4770      	bx	lr
 80167c2:	bf00      	nop
 80167c4:	240000a4 	.word	0x240000a4

080167c8 <__libc_init_array>:
 80167c8:	b570      	push	{r4, r5, r6, lr}
 80167ca:	4d0d      	ldr	r5, [pc, #52]	; (8016800 <__libc_init_array+0x38>)
 80167cc:	4c0d      	ldr	r4, [pc, #52]	; (8016804 <__libc_init_array+0x3c>)
 80167ce:	1b64      	subs	r4, r4, r5
 80167d0:	10a4      	asrs	r4, r4, #2
 80167d2:	2600      	movs	r6, #0
 80167d4:	42a6      	cmp	r6, r4
 80167d6:	d109      	bne.n	80167ec <__libc_init_array+0x24>
 80167d8:	4d0b      	ldr	r5, [pc, #44]	; (8016808 <__libc_init_array+0x40>)
 80167da:	4c0c      	ldr	r4, [pc, #48]	; (801680c <__libc_init_array+0x44>)
 80167dc:	f000 fd3c 	bl	8017258 <_init>
 80167e0:	1b64      	subs	r4, r4, r5
 80167e2:	10a4      	asrs	r4, r4, #2
 80167e4:	2600      	movs	r6, #0
 80167e6:	42a6      	cmp	r6, r4
 80167e8:	d105      	bne.n	80167f6 <__libc_init_array+0x2e>
 80167ea:	bd70      	pop	{r4, r5, r6, pc}
 80167ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80167f0:	4798      	blx	r3
 80167f2:	3601      	adds	r6, #1
 80167f4:	e7ee      	b.n	80167d4 <__libc_init_array+0xc>
 80167f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80167fa:	4798      	blx	r3
 80167fc:	3601      	adds	r6, #1
 80167fe:	e7f2      	b.n	80167e6 <__libc_init_array+0x1e>
 8016800:	080176bc 	.word	0x080176bc
 8016804:	080176bc 	.word	0x080176bc
 8016808:	080176bc 	.word	0x080176bc
 801680c:	080176c0 	.word	0x080176c0

08016810 <malloc>:
 8016810:	4b02      	ldr	r3, [pc, #8]	; (801681c <malloc+0xc>)
 8016812:	4601      	mov	r1, r0
 8016814:	6818      	ldr	r0, [r3, #0]
 8016816:	f000 b88d 	b.w	8016934 <_malloc_r>
 801681a:	bf00      	nop
 801681c:	240000a4 	.word	0x240000a4

08016820 <free>:
 8016820:	4b02      	ldr	r3, [pc, #8]	; (801682c <free+0xc>)
 8016822:	4601      	mov	r1, r0
 8016824:	6818      	ldr	r0, [r3, #0]
 8016826:	f000 b819 	b.w	801685c <_free_r>
 801682a:	bf00      	nop
 801682c:	240000a4 	.word	0x240000a4

08016830 <memcpy>:
 8016830:	440a      	add	r2, r1
 8016832:	4291      	cmp	r1, r2
 8016834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016838:	d100      	bne.n	801683c <memcpy+0xc>
 801683a:	4770      	bx	lr
 801683c:	b510      	push	{r4, lr}
 801683e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016846:	4291      	cmp	r1, r2
 8016848:	d1f9      	bne.n	801683e <memcpy+0xe>
 801684a:	bd10      	pop	{r4, pc}

0801684c <memset>:
 801684c:	4402      	add	r2, r0
 801684e:	4603      	mov	r3, r0
 8016850:	4293      	cmp	r3, r2
 8016852:	d100      	bne.n	8016856 <memset+0xa>
 8016854:	4770      	bx	lr
 8016856:	f803 1b01 	strb.w	r1, [r3], #1
 801685a:	e7f9      	b.n	8016850 <memset+0x4>

0801685c <_free_r>:
 801685c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801685e:	2900      	cmp	r1, #0
 8016860:	d044      	beq.n	80168ec <_free_r+0x90>
 8016862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016866:	9001      	str	r0, [sp, #4]
 8016868:	2b00      	cmp	r3, #0
 801686a:	f1a1 0404 	sub.w	r4, r1, #4
 801686e:	bfb8      	it	lt
 8016870:	18e4      	addlt	r4, r4, r3
 8016872:	f000 fc39 	bl	80170e8 <__malloc_lock>
 8016876:	4a1e      	ldr	r2, [pc, #120]	; (80168f0 <_free_r+0x94>)
 8016878:	9801      	ldr	r0, [sp, #4]
 801687a:	6813      	ldr	r3, [r2, #0]
 801687c:	b933      	cbnz	r3, 801688c <_free_r+0x30>
 801687e:	6063      	str	r3, [r4, #4]
 8016880:	6014      	str	r4, [r2, #0]
 8016882:	b003      	add	sp, #12
 8016884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016888:	f000 bc34 	b.w	80170f4 <__malloc_unlock>
 801688c:	42a3      	cmp	r3, r4
 801688e:	d908      	bls.n	80168a2 <_free_r+0x46>
 8016890:	6825      	ldr	r5, [r4, #0]
 8016892:	1961      	adds	r1, r4, r5
 8016894:	428b      	cmp	r3, r1
 8016896:	bf01      	itttt	eq
 8016898:	6819      	ldreq	r1, [r3, #0]
 801689a:	685b      	ldreq	r3, [r3, #4]
 801689c:	1949      	addeq	r1, r1, r5
 801689e:	6021      	streq	r1, [r4, #0]
 80168a0:	e7ed      	b.n	801687e <_free_r+0x22>
 80168a2:	461a      	mov	r2, r3
 80168a4:	685b      	ldr	r3, [r3, #4]
 80168a6:	b10b      	cbz	r3, 80168ac <_free_r+0x50>
 80168a8:	42a3      	cmp	r3, r4
 80168aa:	d9fa      	bls.n	80168a2 <_free_r+0x46>
 80168ac:	6811      	ldr	r1, [r2, #0]
 80168ae:	1855      	adds	r5, r2, r1
 80168b0:	42a5      	cmp	r5, r4
 80168b2:	d10b      	bne.n	80168cc <_free_r+0x70>
 80168b4:	6824      	ldr	r4, [r4, #0]
 80168b6:	4421      	add	r1, r4
 80168b8:	1854      	adds	r4, r2, r1
 80168ba:	42a3      	cmp	r3, r4
 80168bc:	6011      	str	r1, [r2, #0]
 80168be:	d1e0      	bne.n	8016882 <_free_r+0x26>
 80168c0:	681c      	ldr	r4, [r3, #0]
 80168c2:	685b      	ldr	r3, [r3, #4]
 80168c4:	6053      	str	r3, [r2, #4]
 80168c6:	4421      	add	r1, r4
 80168c8:	6011      	str	r1, [r2, #0]
 80168ca:	e7da      	b.n	8016882 <_free_r+0x26>
 80168cc:	d902      	bls.n	80168d4 <_free_r+0x78>
 80168ce:	230c      	movs	r3, #12
 80168d0:	6003      	str	r3, [r0, #0]
 80168d2:	e7d6      	b.n	8016882 <_free_r+0x26>
 80168d4:	6825      	ldr	r5, [r4, #0]
 80168d6:	1961      	adds	r1, r4, r5
 80168d8:	428b      	cmp	r3, r1
 80168da:	bf04      	itt	eq
 80168dc:	6819      	ldreq	r1, [r3, #0]
 80168de:	685b      	ldreq	r3, [r3, #4]
 80168e0:	6063      	str	r3, [r4, #4]
 80168e2:	bf04      	itt	eq
 80168e4:	1949      	addeq	r1, r1, r5
 80168e6:	6021      	streq	r1, [r4, #0]
 80168e8:	6054      	str	r4, [r2, #4]
 80168ea:	e7ca      	b.n	8016882 <_free_r+0x26>
 80168ec:	b003      	add	sp, #12
 80168ee:	bd30      	pop	{r4, r5, pc}
 80168f0:	24005a60 	.word	0x24005a60

080168f4 <sbrk_aligned>:
 80168f4:	b570      	push	{r4, r5, r6, lr}
 80168f6:	4e0e      	ldr	r6, [pc, #56]	; (8016930 <sbrk_aligned+0x3c>)
 80168f8:	460c      	mov	r4, r1
 80168fa:	6831      	ldr	r1, [r6, #0]
 80168fc:	4605      	mov	r5, r0
 80168fe:	b911      	cbnz	r1, 8016906 <sbrk_aligned+0x12>
 8016900:	f000 f902 	bl	8016b08 <_sbrk_r>
 8016904:	6030      	str	r0, [r6, #0]
 8016906:	4621      	mov	r1, r4
 8016908:	4628      	mov	r0, r5
 801690a:	f000 f8fd 	bl	8016b08 <_sbrk_r>
 801690e:	1c43      	adds	r3, r0, #1
 8016910:	d00a      	beq.n	8016928 <sbrk_aligned+0x34>
 8016912:	1cc4      	adds	r4, r0, #3
 8016914:	f024 0403 	bic.w	r4, r4, #3
 8016918:	42a0      	cmp	r0, r4
 801691a:	d007      	beq.n	801692c <sbrk_aligned+0x38>
 801691c:	1a21      	subs	r1, r4, r0
 801691e:	4628      	mov	r0, r5
 8016920:	f000 f8f2 	bl	8016b08 <_sbrk_r>
 8016924:	3001      	adds	r0, #1
 8016926:	d101      	bne.n	801692c <sbrk_aligned+0x38>
 8016928:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801692c:	4620      	mov	r0, r4
 801692e:	bd70      	pop	{r4, r5, r6, pc}
 8016930:	24005a64 	.word	0x24005a64

08016934 <_malloc_r>:
 8016934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016938:	1ccd      	adds	r5, r1, #3
 801693a:	f025 0503 	bic.w	r5, r5, #3
 801693e:	3508      	adds	r5, #8
 8016940:	2d0c      	cmp	r5, #12
 8016942:	bf38      	it	cc
 8016944:	250c      	movcc	r5, #12
 8016946:	2d00      	cmp	r5, #0
 8016948:	4607      	mov	r7, r0
 801694a:	db01      	blt.n	8016950 <_malloc_r+0x1c>
 801694c:	42a9      	cmp	r1, r5
 801694e:	d905      	bls.n	801695c <_malloc_r+0x28>
 8016950:	230c      	movs	r3, #12
 8016952:	603b      	str	r3, [r7, #0]
 8016954:	2600      	movs	r6, #0
 8016956:	4630      	mov	r0, r6
 8016958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695c:	4e2e      	ldr	r6, [pc, #184]	; (8016a18 <_malloc_r+0xe4>)
 801695e:	f000 fbc3 	bl	80170e8 <__malloc_lock>
 8016962:	6833      	ldr	r3, [r6, #0]
 8016964:	461c      	mov	r4, r3
 8016966:	bb34      	cbnz	r4, 80169b6 <_malloc_r+0x82>
 8016968:	4629      	mov	r1, r5
 801696a:	4638      	mov	r0, r7
 801696c:	f7ff ffc2 	bl	80168f4 <sbrk_aligned>
 8016970:	1c43      	adds	r3, r0, #1
 8016972:	4604      	mov	r4, r0
 8016974:	d14d      	bne.n	8016a12 <_malloc_r+0xde>
 8016976:	6834      	ldr	r4, [r6, #0]
 8016978:	4626      	mov	r6, r4
 801697a:	2e00      	cmp	r6, #0
 801697c:	d140      	bne.n	8016a00 <_malloc_r+0xcc>
 801697e:	6823      	ldr	r3, [r4, #0]
 8016980:	4631      	mov	r1, r6
 8016982:	4638      	mov	r0, r7
 8016984:	eb04 0803 	add.w	r8, r4, r3
 8016988:	f000 f8be 	bl	8016b08 <_sbrk_r>
 801698c:	4580      	cmp	r8, r0
 801698e:	d13a      	bne.n	8016a06 <_malloc_r+0xd2>
 8016990:	6821      	ldr	r1, [r4, #0]
 8016992:	3503      	adds	r5, #3
 8016994:	1a6d      	subs	r5, r5, r1
 8016996:	f025 0503 	bic.w	r5, r5, #3
 801699a:	3508      	adds	r5, #8
 801699c:	2d0c      	cmp	r5, #12
 801699e:	bf38      	it	cc
 80169a0:	250c      	movcc	r5, #12
 80169a2:	4629      	mov	r1, r5
 80169a4:	4638      	mov	r0, r7
 80169a6:	f7ff ffa5 	bl	80168f4 <sbrk_aligned>
 80169aa:	3001      	adds	r0, #1
 80169ac:	d02b      	beq.n	8016a06 <_malloc_r+0xd2>
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	442b      	add	r3, r5
 80169b2:	6023      	str	r3, [r4, #0]
 80169b4:	e00e      	b.n	80169d4 <_malloc_r+0xa0>
 80169b6:	6822      	ldr	r2, [r4, #0]
 80169b8:	1b52      	subs	r2, r2, r5
 80169ba:	d41e      	bmi.n	80169fa <_malloc_r+0xc6>
 80169bc:	2a0b      	cmp	r2, #11
 80169be:	d916      	bls.n	80169ee <_malloc_r+0xba>
 80169c0:	1961      	adds	r1, r4, r5
 80169c2:	42a3      	cmp	r3, r4
 80169c4:	6025      	str	r5, [r4, #0]
 80169c6:	bf18      	it	ne
 80169c8:	6059      	strne	r1, [r3, #4]
 80169ca:	6863      	ldr	r3, [r4, #4]
 80169cc:	bf08      	it	eq
 80169ce:	6031      	streq	r1, [r6, #0]
 80169d0:	5162      	str	r2, [r4, r5]
 80169d2:	604b      	str	r3, [r1, #4]
 80169d4:	4638      	mov	r0, r7
 80169d6:	f104 060b 	add.w	r6, r4, #11
 80169da:	f000 fb8b 	bl	80170f4 <__malloc_unlock>
 80169de:	f026 0607 	bic.w	r6, r6, #7
 80169e2:	1d23      	adds	r3, r4, #4
 80169e4:	1af2      	subs	r2, r6, r3
 80169e6:	d0b6      	beq.n	8016956 <_malloc_r+0x22>
 80169e8:	1b9b      	subs	r3, r3, r6
 80169ea:	50a3      	str	r3, [r4, r2]
 80169ec:	e7b3      	b.n	8016956 <_malloc_r+0x22>
 80169ee:	6862      	ldr	r2, [r4, #4]
 80169f0:	42a3      	cmp	r3, r4
 80169f2:	bf0c      	ite	eq
 80169f4:	6032      	streq	r2, [r6, #0]
 80169f6:	605a      	strne	r2, [r3, #4]
 80169f8:	e7ec      	b.n	80169d4 <_malloc_r+0xa0>
 80169fa:	4623      	mov	r3, r4
 80169fc:	6864      	ldr	r4, [r4, #4]
 80169fe:	e7b2      	b.n	8016966 <_malloc_r+0x32>
 8016a00:	4634      	mov	r4, r6
 8016a02:	6876      	ldr	r6, [r6, #4]
 8016a04:	e7b9      	b.n	801697a <_malloc_r+0x46>
 8016a06:	230c      	movs	r3, #12
 8016a08:	603b      	str	r3, [r7, #0]
 8016a0a:	4638      	mov	r0, r7
 8016a0c:	f000 fb72 	bl	80170f4 <__malloc_unlock>
 8016a10:	e7a1      	b.n	8016956 <_malloc_r+0x22>
 8016a12:	6025      	str	r5, [r4, #0]
 8016a14:	e7de      	b.n	80169d4 <_malloc_r+0xa0>
 8016a16:	bf00      	nop
 8016a18:	24005a60 	.word	0x24005a60

08016a1c <_puts_r>:
 8016a1c:	b570      	push	{r4, r5, r6, lr}
 8016a1e:	460e      	mov	r6, r1
 8016a20:	4605      	mov	r5, r0
 8016a22:	b118      	cbz	r0, 8016a2c <_puts_r+0x10>
 8016a24:	6983      	ldr	r3, [r0, #24]
 8016a26:	b90b      	cbnz	r3, 8016a2c <_puts_r+0x10>
 8016a28:	f000 fa58 	bl	8016edc <__sinit>
 8016a2c:	69ab      	ldr	r3, [r5, #24]
 8016a2e:	68ac      	ldr	r4, [r5, #8]
 8016a30:	b913      	cbnz	r3, 8016a38 <_puts_r+0x1c>
 8016a32:	4628      	mov	r0, r5
 8016a34:	f000 fa52 	bl	8016edc <__sinit>
 8016a38:	4b2c      	ldr	r3, [pc, #176]	; (8016aec <_puts_r+0xd0>)
 8016a3a:	429c      	cmp	r4, r3
 8016a3c:	d120      	bne.n	8016a80 <_puts_r+0x64>
 8016a3e:	686c      	ldr	r4, [r5, #4]
 8016a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a42:	07db      	lsls	r3, r3, #31
 8016a44:	d405      	bmi.n	8016a52 <_puts_r+0x36>
 8016a46:	89a3      	ldrh	r3, [r4, #12]
 8016a48:	0598      	lsls	r0, r3, #22
 8016a4a:	d402      	bmi.n	8016a52 <_puts_r+0x36>
 8016a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a4e:	f000 fae3 	bl	8017018 <__retarget_lock_acquire_recursive>
 8016a52:	89a3      	ldrh	r3, [r4, #12]
 8016a54:	0719      	lsls	r1, r3, #28
 8016a56:	d51d      	bpl.n	8016a94 <_puts_r+0x78>
 8016a58:	6923      	ldr	r3, [r4, #16]
 8016a5a:	b1db      	cbz	r3, 8016a94 <_puts_r+0x78>
 8016a5c:	3e01      	subs	r6, #1
 8016a5e:	68a3      	ldr	r3, [r4, #8]
 8016a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a64:	3b01      	subs	r3, #1
 8016a66:	60a3      	str	r3, [r4, #8]
 8016a68:	bb39      	cbnz	r1, 8016aba <_puts_r+0x9e>
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	da38      	bge.n	8016ae0 <_puts_r+0xc4>
 8016a6e:	4622      	mov	r2, r4
 8016a70:	210a      	movs	r1, #10
 8016a72:	4628      	mov	r0, r5
 8016a74:	f000 f858 	bl	8016b28 <__swbuf_r>
 8016a78:	3001      	adds	r0, #1
 8016a7a:	d011      	beq.n	8016aa0 <_puts_r+0x84>
 8016a7c:	250a      	movs	r5, #10
 8016a7e:	e011      	b.n	8016aa4 <_puts_r+0x88>
 8016a80:	4b1b      	ldr	r3, [pc, #108]	; (8016af0 <_puts_r+0xd4>)
 8016a82:	429c      	cmp	r4, r3
 8016a84:	d101      	bne.n	8016a8a <_puts_r+0x6e>
 8016a86:	68ac      	ldr	r4, [r5, #8]
 8016a88:	e7da      	b.n	8016a40 <_puts_r+0x24>
 8016a8a:	4b1a      	ldr	r3, [pc, #104]	; (8016af4 <_puts_r+0xd8>)
 8016a8c:	429c      	cmp	r4, r3
 8016a8e:	bf08      	it	eq
 8016a90:	68ec      	ldreq	r4, [r5, #12]
 8016a92:	e7d5      	b.n	8016a40 <_puts_r+0x24>
 8016a94:	4621      	mov	r1, r4
 8016a96:	4628      	mov	r0, r5
 8016a98:	f000 f898 	bl	8016bcc <__swsetup_r>
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d0dd      	beq.n	8016a5c <_puts_r+0x40>
 8016aa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016aa6:	07da      	lsls	r2, r3, #31
 8016aa8:	d405      	bmi.n	8016ab6 <_puts_r+0x9a>
 8016aaa:	89a3      	ldrh	r3, [r4, #12]
 8016aac:	059b      	lsls	r3, r3, #22
 8016aae:	d402      	bmi.n	8016ab6 <_puts_r+0x9a>
 8016ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ab2:	f000 fab2 	bl	801701a <__retarget_lock_release_recursive>
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	bd70      	pop	{r4, r5, r6, pc}
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	da04      	bge.n	8016ac8 <_puts_r+0xac>
 8016abe:	69a2      	ldr	r2, [r4, #24]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	dc06      	bgt.n	8016ad2 <_puts_r+0xb6>
 8016ac4:	290a      	cmp	r1, #10
 8016ac6:	d004      	beq.n	8016ad2 <_puts_r+0xb6>
 8016ac8:	6823      	ldr	r3, [r4, #0]
 8016aca:	1c5a      	adds	r2, r3, #1
 8016acc:	6022      	str	r2, [r4, #0]
 8016ace:	7019      	strb	r1, [r3, #0]
 8016ad0:	e7c5      	b.n	8016a5e <_puts_r+0x42>
 8016ad2:	4622      	mov	r2, r4
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	f000 f827 	bl	8016b28 <__swbuf_r>
 8016ada:	3001      	adds	r0, #1
 8016adc:	d1bf      	bne.n	8016a5e <_puts_r+0x42>
 8016ade:	e7df      	b.n	8016aa0 <_puts_r+0x84>
 8016ae0:	6823      	ldr	r3, [r4, #0]
 8016ae2:	250a      	movs	r5, #10
 8016ae4:	1c5a      	adds	r2, r3, #1
 8016ae6:	6022      	str	r2, [r4, #0]
 8016ae8:	701d      	strb	r5, [r3, #0]
 8016aea:	e7db      	b.n	8016aa4 <_puts_r+0x88>
 8016aec:	08017674 	.word	0x08017674
 8016af0:	08017694 	.word	0x08017694
 8016af4:	08017654 	.word	0x08017654

08016af8 <puts>:
 8016af8:	4b02      	ldr	r3, [pc, #8]	; (8016b04 <puts+0xc>)
 8016afa:	4601      	mov	r1, r0
 8016afc:	6818      	ldr	r0, [r3, #0]
 8016afe:	f7ff bf8d 	b.w	8016a1c <_puts_r>
 8016b02:	bf00      	nop
 8016b04:	240000a4 	.word	0x240000a4

08016b08 <_sbrk_r>:
 8016b08:	b538      	push	{r3, r4, r5, lr}
 8016b0a:	4d06      	ldr	r5, [pc, #24]	; (8016b24 <_sbrk_r+0x1c>)
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	4604      	mov	r4, r0
 8016b10:	4608      	mov	r0, r1
 8016b12:	602b      	str	r3, [r5, #0]
 8016b14:	f7ec ffcc 	bl	8003ab0 <_sbrk>
 8016b18:	1c43      	adds	r3, r0, #1
 8016b1a:	d102      	bne.n	8016b22 <_sbrk_r+0x1a>
 8016b1c:	682b      	ldr	r3, [r5, #0]
 8016b1e:	b103      	cbz	r3, 8016b22 <_sbrk_r+0x1a>
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	bd38      	pop	{r3, r4, r5, pc}
 8016b24:	24005a6c 	.word	0x24005a6c

08016b28 <__swbuf_r>:
 8016b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2a:	460e      	mov	r6, r1
 8016b2c:	4614      	mov	r4, r2
 8016b2e:	4605      	mov	r5, r0
 8016b30:	b118      	cbz	r0, 8016b3a <__swbuf_r+0x12>
 8016b32:	6983      	ldr	r3, [r0, #24]
 8016b34:	b90b      	cbnz	r3, 8016b3a <__swbuf_r+0x12>
 8016b36:	f000 f9d1 	bl	8016edc <__sinit>
 8016b3a:	4b21      	ldr	r3, [pc, #132]	; (8016bc0 <__swbuf_r+0x98>)
 8016b3c:	429c      	cmp	r4, r3
 8016b3e:	d12b      	bne.n	8016b98 <__swbuf_r+0x70>
 8016b40:	686c      	ldr	r4, [r5, #4]
 8016b42:	69a3      	ldr	r3, [r4, #24]
 8016b44:	60a3      	str	r3, [r4, #8]
 8016b46:	89a3      	ldrh	r3, [r4, #12]
 8016b48:	071a      	lsls	r2, r3, #28
 8016b4a:	d52f      	bpl.n	8016bac <__swbuf_r+0x84>
 8016b4c:	6923      	ldr	r3, [r4, #16]
 8016b4e:	b36b      	cbz	r3, 8016bac <__swbuf_r+0x84>
 8016b50:	6923      	ldr	r3, [r4, #16]
 8016b52:	6820      	ldr	r0, [r4, #0]
 8016b54:	1ac0      	subs	r0, r0, r3
 8016b56:	6963      	ldr	r3, [r4, #20]
 8016b58:	b2f6      	uxtb	r6, r6
 8016b5a:	4283      	cmp	r3, r0
 8016b5c:	4637      	mov	r7, r6
 8016b5e:	dc04      	bgt.n	8016b6a <__swbuf_r+0x42>
 8016b60:	4621      	mov	r1, r4
 8016b62:	4628      	mov	r0, r5
 8016b64:	f000 f926 	bl	8016db4 <_fflush_r>
 8016b68:	bb30      	cbnz	r0, 8016bb8 <__swbuf_r+0x90>
 8016b6a:	68a3      	ldr	r3, [r4, #8]
 8016b6c:	3b01      	subs	r3, #1
 8016b6e:	60a3      	str	r3, [r4, #8]
 8016b70:	6823      	ldr	r3, [r4, #0]
 8016b72:	1c5a      	adds	r2, r3, #1
 8016b74:	6022      	str	r2, [r4, #0]
 8016b76:	701e      	strb	r6, [r3, #0]
 8016b78:	6963      	ldr	r3, [r4, #20]
 8016b7a:	3001      	adds	r0, #1
 8016b7c:	4283      	cmp	r3, r0
 8016b7e:	d004      	beq.n	8016b8a <__swbuf_r+0x62>
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	07db      	lsls	r3, r3, #31
 8016b84:	d506      	bpl.n	8016b94 <__swbuf_r+0x6c>
 8016b86:	2e0a      	cmp	r6, #10
 8016b88:	d104      	bne.n	8016b94 <__swbuf_r+0x6c>
 8016b8a:	4621      	mov	r1, r4
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	f000 f911 	bl	8016db4 <_fflush_r>
 8016b92:	b988      	cbnz	r0, 8016bb8 <__swbuf_r+0x90>
 8016b94:	4638      	mov	r0, r7
 8016b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b98:	4b0a      	ldr	r3, [pc, #40]	; (8016bc4 <__swbuf_r+0x9c>)
 8016b9a:	429c      	cmp	r4, r3
 8016b9c:	d101      	bne.n	8016ba2 <__swbuf_r+0x7a>
 8016b9e:	68ac      	ldr	r4, [r5, #8]
 8016ba0:	e7cf      	b.n	8016b42 <__swbuf_r+0x1a>
 8016ba2:	4b09      	ldr	r3, [pc, #36]	; (8016bc8 <__swbuf_r+0xa0>)
 8016ba4:	429c      	cmp	r4, r3
 8016ba6:	bf08      	it	eq
 8016ba8:	68ec      	ldreq	r4, [r5, #12]
 8016baa:	e7ca      	b.n	8016b42 <__swbuf_r+0x1a>
 8016bac:	4621      	mov	r1, r4
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f000 f80c 	bl	8016bcc <__swsetup_r>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d0cb      	beq.n	8016b50 <__swbuf_r+0x28>
 8016bb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016bbc:	e7ea      	b.n	8016b94 <__swbuf_r+0x6c>
 8016bbe:	bf00      	nop
 8016bc0:	08017674 	.word	0x08017674
 8016bc4:	08017694 	.word	0x08017694
 8016bc8:	08017654 	.word	0x08017654

08016bcc <__swsetup_r>:
 8016bcc:	4b32      	ldr	r3, [pc, #200]	; (8016c98 <__swsetup_r+0xcc>)
 8016bce:	b570      	push	{r4, r5, r6, lr}
 8016bd0:	681d      	ldr	r5, [r3, #0]
 8016bd2:	4606      	mov	r6, r0
 8016bd4:	460c      	mov	r4, r1
 8016bd6:	b125      	cbz	r5, 8016be2 <__swsetup_r+0x16>
 8016bd8:	69ab      	ldr	r3, [r5, #24]
 8016bda:	b913      	cbnz	r3, 8016be2 <__swsetup_r+0x16>
 8016bdc:	4628      	mov	r0, r5
 8016bde:	f000 f97d 	bl	8016edc <__sinit>
 8016be2:	4b2e      	ldr	r3, [pc, #184]	; (8016c9c <__swsetup_r+0xd0>)
 8016be4:	429c      	cmp	r4, r3
 8016be6:	d10f      	bne.n	8016c08 <__swsetup_r+0x3c>
 8016be8:	686c      	ldr	r4, [r5, #4]
 8016bea:	89a3      	ldrh	r3, [r4, #12]
 8016bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016bf0:	0719      	lsls	r1, r3, #28
 8016bf2:	d42c      	bmi.n	8016c4e <__swsetup_r+0x82>
 8016bf4:	06dd      	lsls	r5, r3, #27
 8016bf6:	d411      	bmi.n	8016c1c <__swsetup_r+0x50>
 8016bf8:	2309      	movs	r3, #9
 8016bfa:	6033      	str	r3, [r6, #0]
 8016bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c00:	81a3      	strh	r3, [r4, #12]
 8016c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c06:	e03e      	b.n	8016c86 <__swsetup_r+0xba>
 8016c08:	4b25      	ldr	r3, [pc, #148]	; (8016ca0 <__swsetup_r+0xd4>)
 8016c0a:	429c      	cmp	r4, r3
 8016c0c:	d101      	bne.n	8016c12 <__swsetup_r+0x46>
 8016c0e:	68ac      	ldr	r4, [r5, #8]
 8016c10:	e7eb      	b.n	8016bea <__swsetup_r+0x1e>
 8016c12:	4b24      	ldr	r3, [pc, #144]	; (8016ca4 <__swsetup_r+0xd8>)
 8016c14:	429c      	cmp	r4, r3
 8016c16:	bf08      	it	eq
 8016c18:	68ec      	ldreq	r4, [r5, #12]
 8016c1a:	e7e6      	b.n	8016bea <__swsetup_r+0x1e>
 8016c1c:	0758      	lsls	r0, r3, #29
 8016c1e:	d512      	bpl.n	8016c46 <__swsetup_r+0x7a>
 8016c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c22:	b141      	cbz	r1, 8016c36 <__swsetup_r+0x6a>
 8016c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c28:	4299      	cmp	r1, r3
 8016c2a:	d002      	beq.n	8016c32 <__swsetup_r+0x66>
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	f7ff fe15 	bl	801685c <_free_r>
 8016c32:	2300      	movs	r3, #0
 8016c34:	6363      	str	r3, [r4, #52]	; 0x34
 8016c36:	89a3      	ldrh	r3, [r4, #12]
 8016c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c3c:	81a3      	strh	r3, [r4, #12]
 8016c3e:	2300      	movs	r3, #0
 8016c40:	6063      	str	r3, [r4, #4]
 8016c42:	6923      	ldr	r3, [r4, #16]
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	89a3      	ldrh	r3, [r4, #12]
 8016c48:	f043 0308 	orr.w	r3, r3, #8
 8016c4c:	81a3      	strh	r3, [r4, #12]
 8016c4e:	6923      	ldr	r3, [r4, #16]
 8016c50:	b94b      	cbnz	r3, 8016c66 <__swsetup_r+0x9a>
 8016c52:	89a3      	ldrh	r3, [r4, #12]
 8016c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c5c:	d003      	beq.n	8016c66 <__swsetup_r+0x9a>
 8016c5e:	4621      	mov	r1, r4
 8016c60:	4630      	mov	r0, r6
 8016c62:	f000 fa01 	bl	8017068 <__smakebuf_r>
 8016c66:	89a0      	ldrh	r0, [r4, #12]
 8016c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c6c:	f010 0301 	ands.w	r3, r0, #1
 8016c70:	d00a      	beq.n	8016c88 <__swsetup_r+0xbc>
 8016c72:	2300      	movs	r3, #0
 8016c74:	60a3      	str	r3, [r4, #8]
 8016c76:	6963      	ldr	r3, [r4, #20]
 8016c78:	425b      	negs	r3, r3
 8016c7a:	61a3      	str	r3, [r4, #24]
 8016c7c:	6923      	ldr	r3, [r4, #16]
 8016c7e:	b943      	cbnz	r3, 8016c92 <__swsetup_r+0xc6>
 8016c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016c84:	d1ba      	bne.n	8016bfc <__swsetup_r+0x30>
 8016c86:	bd70      	pop	{r4, r5, r6, pc}
 8016c88:	0781      	lsls	r1, r0, #30
 8016c8a:	bf58      	it	pl
 8016c8c:	6963      	ldrpl	r3, [r4, #20]
 8016c8e:	60a3      	str	r3, [r4, #8]
 8016c90:	e7f4      	b.n	8016c7c <__swsetup_r+0xb0>
 8016c92:	2000      	movs	r0, #0
 8016c94:	e7f7      	b.n	8016c86 <__swsetup_r+0xba>
 8016c96:	bf00      	nop
 8016c98:	240000a4 	.word	0x240000a4
 8016c9c:	08017674 	.word	0x08017674
 8016ca0:	08017694 	.word	0x08017694
 8016ca4:	08017654 	.word	0x08017654

08016ca8 <__sflush_r>:
 8016ca8:	898a      	ldrh	r2, [r1, #12]
 8016caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cae:	4605      	mov	r5, r0
 8016cb0:	0710      	lsls	r0, r2, #28
 8016cb2:	460c      	mov	r4, r1
 8016cb4:	d458      	bmi.n	8016d68 <__sflush_r+0xc0>
 8016cb6:	684b      	ldr	r3, [r1, #4]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	dc05      	bgt.n	8016cc8 <__sflush_r+0x20>
 8016cbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	dc02      	bgt.n	8016cc8 <__sflush_r+0x20>
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cca:	2e00      	cmp	r6, #0
 8016ccc:	d0f9      	beq.n	8016cc2 <__sflush_r+0x1a>
 8016cce:	2300      	movs	r3, #0
 8016cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016cd4:	682f      	ldr	r7, [r5, #0]
 8016cd6:	602b      	str	r3, [r5, #0]
 8016cd8:	d032      	beq.n	8016d40 <__sflush_r+0x98>
 8016cda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016cdc:	89a3      	ldrh	r3, [r4, #12]
 8016cde:	075a      	lsls	r2, r3, #29
 8016ce0:	d505      	bpl.n	8016cee <__sflush_r+0x46>
 8016ce2:	6863      	ldr	r3, [r4, #4]
 8016ce4:	1ac0      	subs	r0, r0, r3
 8016ce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ce8:	b10b      	cbz	r3, 8016cee <__sflush_r+0x46>
 8016cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016cec:	1ac0      	subs	r0, r0, r3
 8016cee:	2300      	movs	r3, #0
 8016cf0:	4602      	mov	r2, r0
 8016cf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cf4:	6a21      	ldr	r1, [r4, #32]
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	47b0      	blx	r6
 8016cfa:	1c43      	adds	r3, r0, #1
 8016cfc:	89a3      	ldrh	r3, [r4, #12]
 8016cfe:	d106      	bne.n	8016d0e <__sflush_r+0x66>
 8016d00:	6829      	ldr	r1, [r5, #0]
 8016d02:	291d      	cmp	r1, #29
 8016d04:	d82c      	bhi.n	8016d60 <__sflush_r+0xb8>
 8016d06:	4a2a      	ldr	r2, [pc, #168]	; (8016db0 <__sflush_r+0x108>)
 8016d08:	40ca      	lsrs	r2, r1
 8016d0a:	07d6      	lsls	r6, r2, #31
 8016d0c:	d528      	bpl.n	8016d60 <__sflush_r+0xb8>
 8016d0e:	2200      	movs	r2, #0
 8016d10:	6062      	str	r2, [r4, #4]
 8016d12:	04d9      	lsls	r1, r3, #19
 8016d14:	6922      	ldr	r2, [r4, #16]
 8016d16:	6022      	str	r2, [r4, #0]
 8016d18:	d504      	bpl.n	8016d24 <__sflush_r+0x7c>
 8016d1a:	1c42      	adds	r2, r0, #1
 8016d1c:	d101      	bne.n	8016d22 <__sflush_r+0x7a>
 8016d1e:	682b      	ldr	r3, [r5, #0]
 8016d20:	b903      	cbnz	r3, 8016d24 <__sflush_r+0x7c>
 8016d22:	6560      	str	r0, [r4, #84]	; 0x54
 8016d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d26:	602f      	str	r7, [r5, #0]
 8016d28:	2900      	cmp	r1, #0
 8016d2a:	d0ca      	beq.n	8016cc2 <__sflush_r+0x1a>
 8016d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d30:	4299      	cmp	r1, r3
 8016d32:	d002      	beq.n	8016d3a <__sflush_r+0x92>
 8016d34:	4628      	mov	r0, r5
 8016d36:	f7ff fd91 	bl	801685c <_free_r>
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	6360      	str	r0, [r4, #52]	; 0x34
 8016d3e:	e7c1      	b.n	8016cc4 <__sflush_r+0x1c>
 8016d40:	6a21      	ldr	r1, [r4, #32]
 8016d42:	2301      	movs	r3, #1
 8016d44:	4628      	mov	r0, r5
 8016d46:	47b0      	blx	r6
 8016d48:	1c41      	adds	r1, r0, #1
 8016d4a:	d1c7      	bne.n	8016cdc <__sflush_r+0x34>
 8016d4c:	682b      	ldr	r3, [r5, #0]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d0c4      	beq.n	8016cdc <__sflush_r+0x34>
 8016d52:	2b1d      	cmp	r3, #29
 8016d54:	d001      	beq.n	8016d5a <__sflush_r+0xb2>
 8016d56:	2b16      	cmp	r3, #22
 8016d58:	d101      	bne.n	8016d5e <__sflush_r+0xb6>
 8016d5a:	602f      	str	r7, [r5, #0]
 8016d5c:	e7b1      	b.n	8016cc2 <__sflush_r+0x1a>
 8016d5e:	89a3      	ldrh	r3, [r4, #12]
 8016d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d64:	81a3      	strh	r3, [r4, #12]
 8016d66:	e7ad      	b.n	8016cc4 <__sflush_r+0x1c>
 8016d68:	690f      	ldr	r7, [r1, #16]
 8016d6a:	2f00      	cmp	r7, #0
 8016d6c:	d0a9      	beq.n	8016cc2 <__sflush_r+0x1a>
 8016d6e:	0793      	lsls	r3, r2, #30
 8016d70:	680e      	ldr	r6, [r1, #0]
 8016d72:	bf08      	it	eq
 8016d74:	694b      	ldreq	r3, [r1, #20]
 8016d76:	600f      	str	r7, [r1, #0]
 8016d78:	bf18      	it	ne
 8016d7a:	2300      	movne	r3, #0
 8016d7c:	eba6 0807 	sub.w	r8, r6, r7
 8016d80:	608b      	str	r3, [r1, #8]
 8016d82:	f1b8 0f00 	cmp.w	r8, #0
 8016d86:	dd9c      	ble.n	8016cc2 <__sflush_r+0x1a>
 8016d88:	6a21      	ldr	r1, [r4, #32]
 8016d8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016d8c:	4643      	mov	r3, r8
 8016d8e:	463a      	mov	r2, r7
 8016d90:	4628      	mov	r0, r5
 8016d92:	47b0      	blx	r6
 8016d94:	2800      	cmp	r0, #0
 8016d96:	dc06      	bgt.n	8016da6 <__sflush_r+0xfe>
 8016d98:	89a3      	ldrh	r3, [r4, #12]
 8016d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d9e:	81a3      	strh	r3, [r4, #12]
 8016da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016da4:	e78e      	b.n	8016cc4 <__sflush_r+0x1c>
 8016da6:	4407      	add	r7, r0
 8016da8:	eba8 0800 	sub.w	r8, r8, r0
 8016dac:	e7e9      	b.n	8016d82 <__sflush_r+0xda>
 8016dae:	bf00      	nop
 8016db0:	20400001 	.word	0x20400001

08016db4 <_fflush_r>:
 8016db4:	b538      	push	{r3, r4, r5, lr}
 8016db6:	690b      	ldr	r3, [r1, #16]
 8016db8:	4605      	mov	r5, r0
 8016dba:	460c      	mov	r4, r1
 8016dbc:	b913      	cbnz	r3, 8016dc4 <_fflush_r+0x10>
 8016dbe:	2500      	movs	r5, #0
 8016dc0:	4628      	mov	r0, r5
 8016dc2:	bd38      	pop	{r3, r4, r5, pc}
 8016dc4:	b118      	cbz	r0, 8016dce <_fflush_r+0x1a>
 8016dc6:	6983      	ldr	r3, [r0, #24]
 8016dc8:	b90b      	cbnz	r3, 8016dce <_fflush_r+0x1a>
 8016dca:	f000 f887 	bl	8016edc <__sinit>
 8016dce:	4b14      	ldr	r3, [pc, #80]	; (8016e20 <_fflush_r+0x6c>)
 8016dd0:	429c      	cmp	r4, r3
 8016dd2:	d11b      	bne.n	8016e0c <_fflush_r+0x58>
 8016dd4:	686c      	ldr	r4, [r5, #4]
 8016dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d0ef      	beq.n	8016dbe <_fflush_r+0xa>
 8016dde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016de0:	07d0      	lsls	r0, r2, #31
 8016de2:	d404      	bmi.n	8016dee <_fflush_r+0x3a>
 8016de4:	0599      	lsls	r1, r3, #22
 8016de6:	d402      	bmi.n	8016dee <_fflush_r+0x3a>
 8016de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dea:	f000 f915 	bl	8017018 <__retarget_lock_acquire_recursive>
 8016dee:	4628      	mov	r0, r5
 8016df0:	4621      	mov	r1, r4
 8016df2:	f7ff ff59 	bl	8016ca8 <__sflush_r>
 8016df6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016df8:	07da      	lsls	r2, r3, #31
 8016dfa:	4605      	mov	r5, r0
 8016dfc:	d4e0      	bmi.n	8016dc0 <_fflush_r+0xc>
 8016dfe:	89a3      	ldrh	r3, [r4, #12]
 8016e00:	059b      	lsls	r3, r3, #22
 8016e02:	d4dd      	bmi.n	8016dc0 <_fflush_r+0xc>
 8016e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e06:	f000 f908 	bl	801701a <__retarget_lock_release_recursive>
 8016e0a:	e7d9      	b.n	8016dc0 <_fflush_r+0xc>
 8016e0c:	4b05      	ldr	r3, [pc, #20]	; (8016e24 <_fflush_r+0x70>)
 8016e0e:	429c      	cmp	r4, r3
 8016e10:	d101      	bne.n	8016e16 <_fflush_r+0x62>
 8016e12:	68ac      	ldr	r4, [r5, #8]
 8016e14:	e7df      	b.n	8016dd6 <_fflush_r+0x22>
 8016e16:	4b04      	ldr	r3, [pc, #16]	; (8016e28 <_fflush_r+0x74>)
 8016e18:	429c      	cmp	r4, r3
 8016e1a:	bf08      	it	eq
 8016e1c:	68ec      	ldreq	r4, [r5, #12]
 8016e1e:	e7da      	b.n	8016dd6 <_fflush_r+0x22>
 8016e20:	08017674 	.word	0x08017674
 8016e24:	08017694 	.word	0x08017694
 8016e28:	08017654 	.word	0x08017654

08016e2c <std>:
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	b510      	push	{r4, lr}
 8016e30:	4604      	mov	r4, r0
 8016e32:	e9c0 3300 	strd	r3, r3, [r0]
 8016e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e3a:	6083      	str	r3, [r0, #8]
 8016e3c:	8181      	strh	r1, [r0, #12]
 8016e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8016e40:	81c2      	strh	r2, [r0, #14]
 8016e42:	6183      	str	r3, [r0, #24]
 8016e44:	4619      	mov	r1, r3
 8016e46:	2208      	movs	r2, #8
 8016e48:	305c      	adds	r0, #92	; 0x5c
 8016e4a:	f7ff fcff 	bl	801684c <memset>
 8016e4e:	4b05      	ldr	r3, [pc, #20]	; (8016e64 <std+0x38>)
 8016e50:	6263      	str	r3, [r4, #36]	; 0x24
 8016e52:	4b05      	ldr	r3, [pc, #20]	; (8016e68 <std+0x3c>)
 8016e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e56:	4b05      	ldr	r3, [pc, #20]	; (8016e6c <std+0x40>)
 8016e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e5a:	4b05      	ldr	r3, [pc, #20]	; (8016e70 <std+0x44>)
 8016e5c:	6224      	str	r4, [r4, #32]
 8016e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8016e60:	bd10      	pop	{r4, pc}
 8016e62:	bf00      	nop
 8016e64:	08017101 	.word	0x08017101
 8016e68:	08017123 	.word	0x08017123
 8016e6c:	0801715b 	.word	0x0801715b
 8016e70:	0801717f 	.word	0x0801717f

08016e74 <_cleanup_r>:
 8016e74:	4901      	ldr	r1, [pc, #4]	; (8016e7c <_cleanup_r+0x8>)
 8016e76:	f000 b8af 	b.w	8016fd8 <_fwalk_reent>
 8016e7a:	bf00      	nop
 8016e7c:	08016db5 	.word	0x08016db5

08016e80 <__sfmoreglue>:
 8016e80:	b570      	push	{r4, r5, r6, lr}
 8016e82:	2268      	movs	r2, #104	; 0x68
 8016e84:	1e4d      	subs	r5, r1, #1
 8016e86:	4355      	muls	r5, r2
 8016e88:	460e      	mov	r6, r1
 8016e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016e8e:	f7ff fd51 	bl	8016934 <_malloc_r>
 8016e92:	4604      	mov	r4, r0
 8016e94:	b140      	cbz	r0, 8016ea8 <__sfmoreglue+0x28>
 8016e96:	2100      	movs	r1, #0
 8016e98:	e9c0 1600 	strd	r1, r6, [r0]
 8016e9c:	300c      	adds	r0, #12
 8016e9e:	60a0      	str	r0, [r4, #8]
 8016ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ea4:	f7ff fcd2 	bl	801684c <memset>
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}

08016eac <__sfp_lock_acquire>:
 8016eac:	4801      	ldr	r0, [pc, #4]	; (8016eb4 <__sfp_lock_acquire+0x8>)
 8016eae:	f000 b8b3 	b.w	8017018 <__retarget_lock_acquire_recursive>
 8016eb2:	bf00      	nop
 8016eb4:	24005a69 	.word	0x24005a69

08016eb8 <__sfp_lock_release>:
 8016eb8:	4801      	ldr	r0, [pc, #4]	; (8016ec0 <__sfp_lock_release+0x8>)
 8016eba:	f000 b8ae 	b.w	801701a <__retarget_lock_release_recursive>
 8016ebe:	bf00      	nop
 8016ec0:	24005a69 	.word	0x24005a69

08016ec4 <__sinit_lock_acquire>:
 8016ec4:	4801      	ldr	r0, [pc, #4]	; (8016ecc <__sinit_lock_acquire+0x8>)
 8016ec6:	f000 b8a7 	b.w	8017018 <__retarget_lock_acquire_recursive>
 8016eca:	bf00      	nop
 8016ecc:	24005a6a 	.word	0x24005a6a

08016ed0 <__sinit_lock_release>:
 8016ed0:	4801      	ldr	r0, [pc, #4]	; (8016ed8 <__sinit_lock_release+0x8>)
 8016ed2:	f000 b8a2 	b.w	801701a <__retarget_lock_release_recursive>
 8016ed6:	bf00      	nop
 8016ed8:	24005a6a 	.word	0x24005a6a

08016edc <__sinit>:
 8016edc:	b510      	push	{r4, lr}
 8016ede:	4604      	mov	r4, r0
 8016ee0:	f7ff fff0 	bl	8016ec4 <__sinit_lock_acquire>
 8016ee4:	69a3      	ldr	r3, [r4, #24]
 8016ee6:	b11b      	cbz	r3, 8016ef0 <__sinit+0x14>
 8016ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016eec:	f7ff bff0 	b.w	8016ed0 <__sinit_lock_release>
 8016ef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ef4:	6523      	str	r3, [r4, #80]	; 0x50
 8016ef6:	4b13      	ldr	r3, [pc, #76]	; (8016f44 <__sinit+0x68>)
 8016ef8:	4a13      	ldr	r2, [pc, #76]	; (8016f48 <__sinit+0x6c>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	62a2      	str	r2, [r4, #40]	; 0x28
 8016efe:	42a3      	cmp	r3, r4
 8016f00:	bf04      	itt	eq
 8016f02:	2301      	moveq	r3, #1
 8016f04:	61a3      	streq	r3, [r4, #24]
 8016f06:	4620      	mov	r0, r4
 8016f08:	f000 f820 	bl	8016f4c <__sfp>
 8016f0c:	6060      	str	r0, [r4, #4]
 8016f0e:	4620      	mov	r0, r4
 8016f10:	f000 f81c 	bl	8016f4c <__sfp>
 8016f14:	60a0      	str	r0, [r4, #8]
 8016f16:	4620      	mov	r0, r4
 8016f18:	f000 f818 	bl	8016f4c <__sfp>
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	60e0      	str	r0, [r4, #12]
 8016f20:	2104      	movs	r1, #4
 8016f22:	6860      	ldr	r0, [r4, #4]
 8016f24:	f7ff ff82 	bl	8016e2c <std>
 8016f28:	68a0      	ldr	r0, [r4, #8]
 8016f2a:	2201      	movs	r2, #1
 8016f2c:	2109      	movs	r1, #9
 8016f2e:	f7ff ff7d 	bl	8016e2c <std>
 8016f32:	68e0      	ldr	r0, [r4, #12]
 8016f34:	2202      	movs	r2, #2
 8016f36:	2112      	movs	r1, #18
 8016f38:	f7ff ff78 	bl	8016e2c <std>
 8016f3c:	2301      	movs	r3, #1
 8016f3e:	61a3      	str	r3, [r4, #24]
 8016f40:	e7d2      	b.n	8016ee8 <__sinit+0xc>
 8016f42:	bf00      	nop
 8016f44:	08017650 	.word	0x08017650
 8016f48:	08016e75 	.word	0x08016e75

08016f4c <__sfp>:
 8016f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4e:	4607      	mov	r7, r0
 8016f50:	f7ff ffac 	bl	8016eac <__sfp_lock_acquire>
 8016f54:	4b1e      	ldr	r3, [pc, #120]	; (8016fd0 <__sfp+0x84>)
 8016f56:	681e      	ldr	r6, [r3, #0]
 8016f58:	69b3      	ldr	r3, [r6, #24]
 8016f5a:	b913      	cbnz	r3, 8016f62 <__sfp+0x16>
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	f7ff ffbd 	bl	8016edc <__sinit>
 8016f62:	3648      	adds	r6, #72	; 0x48
 8016f64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016f68:	3b01      	subs	r3, #1
 8016f6a:	d503      	bpl.n	8016f74 <__sfp+0x28>
 8016f6c:	6833      	ldr	r3, [r6, #0]
 8016f6e:	b30b      	cbz	r3, 8016fb4 <__sfp+0x68>
 8016f70:	6836      	ldr	r6, [r6, #0]
 8016f72:	e7f7      	b.n	8016f64 <__sfp+0x18>
 8016f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016f78:	b9d5      	cbnz	r5, 8016fb0 <__sfp+0x64>
 8016f7a:	4b16      	ldr	r3, [pc, #88]	; (8016fd4 <__sfp+0x88>)
 8016f7c:	60e3      	str	r3, [r4, #12]
 8016f7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016f82:	6665      	str	r5, [r4, #100]	; 0x64
 8016f84:	f000 f847 	bl	8017016 <__retarget_lock_init_recursive>
 8016f88:	f7ff ff96 	bl	8016eb8 <__sfp_lock_release>
 8016f8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016f90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016f94:	6025      	str	r5, [r4, #0]
 8016f96:	61a5      	str	r5, [r4, #24]
 8016f98:	2208      	movs	r2, #8
 8016f9a:	4629      	mov	r1, r5
 8016f9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016fa0:	f7ff fc54 	bl	801684c <memset>
 8016fa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016fa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016fac:	4620      	mov	r0, r4
 8016fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb0:	3468      	adds	r4, #104	; 0x68
 8016fb2:	e7d9      	b.n	8016f68 <__sfp+0x1c>
 8016fb4:	2104      	movs	r1, #4
 8016fb6:	4638      	mov	r0, r7
 8016fb8:	f7ff ff62 	bl	8016e80 <__sfmoreglue>
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	6030      	str	r0, [r6, #0]
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d1d5      	bne.n	8016f70 <__sfp+0x24>
 8016fc4:	f7ff ff78 	bl	8016eb8 <__sfp_lock_release>
 8016fc8:	230c      	movs	r3, #12
 8016fca:	603b      	str	r3, [r7, #0]
 8016fcc:	e7ee      	b.n	8016fac <__sfp+0x60>
 8016fce:	bf00      	nop
 8016fd0:	08017650 	.word	0x08017650
 8016fd4:	ffff0001 	.word	0xffff0001

08016fd8 <_fwalk_reent>:
 8016fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fdc:	4606      	mov	r6, r0
 8016fde:	4688      	mov	r8, r1
 8016fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016fe4:	2700      	movs	r7, #0
 8016fe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016fea:	f1b9 0901 	subs.w	r9, r9, #1
 8016fee:	d505      	bpl.n	8016ffc <_fwalk_reent+0x24>
 8016ff0:	6824      	ldr	r4, [r4, #0]
 8016ff2:	2c00      	cmp	r4, #0
 8016ff4:	d1f7      	bne.n	8016fe6 <_fwalk_reent+0xe>
 8016ff6:	4638      	mov	r0, r7
 8016ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ffc:	89ab      	ldrh	r3, [r5, #12]
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	d907      	bls.n	8017012 <_fwalk_reent+0x3a>
 8017002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017006:	3301      	adds	r3, #1
 8017008:	d003      	beq.n	8017012 <_fwalk_reent+0x3a>
 801700a:	4629      	mov	r1, r5
 801700c:	4630      	mov	r0, r6
 801700e:	47c0      	blx	r8
 8017010:	4307      	orrs	r7, r0
 8017012:	3568      	adds	r5, #104	; 0x68
 8017014:	e7e9      	b.n	8016fea <_fwalk_reent+0x12>

08017016 <__retarget_lock_init_recursive>:
 8017016:	4770      	bx	lr

08017018 <__retarget_lock_acquire_recursive>:
 8017018:	4770      	bx	lr

0801701a <__retarget_lock_release_recursive>:
 801701a:	4770      	bx	lr

0801701c <__swhatbuf_r>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	460e      	mov	r6, r1
 8017020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017024:	2900      	cmp	r1, #0
 8017026:	b096      	sub	sp, #88	; 0x58
 8017028:	4614      	mov	r4, r2
 801702a:	461d      	mov	r5, r3
 801702c:	da08      	bge.n	8017040 <__swhatbuf_r+0x24>
 801702e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017032:	2200      	movs	r2, #0
 8017034:	602a      	str	r2, [r5, #0]
 8017036:	061a      	lsls	r2, r3, #24
 8017038:	d410      	bmi.n	801705c <__swhatbuf_r+0x40>
 801703a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801703e:	e00e      	b.n	801705e <__swhatbuf_r+0x42>
 8017040:	466a      	mov	r2, sp
 8017042:	f000 f8c3 	bl	80171cc <_fstat_r>
 8017046:	2800      	cmp	r0, #0
 8017048:	dbf1      	blt.n	801702e <__swhatbuf_r+0x12>
 801704a:	9a01      	ldr	r2, [sp, #4]
 801704c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017054:	425a      	negs	r2, r3
 8017056:	415a      	adcs	r2, r3
 8017058:	602a      	str	r2, [r5, #0]
 801705a:	e7ee      	b.n	801703a <__swhatbuf_r+0x1e>
 801705c:	2340      	movs	r3, #64	; 0x40
 801705e:	2000      	movs	r0, #0
 8017060:	6023      	str	r3, [r4, #0]
 8017062:	b016      	add	sp, #88	; 0x58
 8017064:	bd70      	pop	{r4, r5, r6, pc}
	...

08017068 <__smakebuf_r>:
 8017068:	898b      	ldrh	r3, [r1, #12]
 801706a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801706c:	079d      	lsls	r5, r3, #30
 801706e:	4606      	mov	r6, r0
 8017070:	460c      	mov	r4, r1
 8017072:	d507      	bpl.n	8017084 <__smakebuf_r+0x1c>
 8017074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	6123      	str	r3, [r4, #16]
 801707c:	2301      	movs	r3, #1
 801707e:	6163      	str	r3, [r4, #20]
 8017080:	b002      	add	sp, #8
 8017082:	bd70      	pop	{r4, r5, r6, pc}
 8017084:	ab01      	add	r3, sp, #4
 8017086:	466a      	mov	r2, sp
 8017088:	f7ff ffc8 	bl	801701c <__swhatbuf_r>
 801708c:	9900      	ldr	r1, [sp, #0]
 801708e:	4605      	mov	r5, r0
 8017090:	4630      	mov	r0, r6
 8017092:	f7ff fc4f 	bl	8016934 <_malloc_r>
 8017096:	b948      	cbnz	r0, 80170ac <__smakebuf_r+0x44>
 8017098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801709c:	059a      	lsls	r2, r3, #22
 801709e:	d4ef      	bmi.n	8017080 <__smakebuf_r+0x18>
 80170a0:	f023 0303 	bic.w	r3, r3, #3
 80170a4:	f043 0302 	orr.w	r3, r3, #2
 80170a8:	81a3      	strh	r3, [r4, #12]
 80170aa:	e7e3      	b.n	8017074 <__smakebuf_r+0xc>
 80170ac:	4b0d      	ldr	r3, [pc, #52]	; (80170e4 <__smakebuf_r+0x7c>)
 80170ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80170b0:	89a3      	ldrh	r3, [r4, #12]
 80170b2:	6020      	str	r0, [r4, #0]
 80170b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170b8:	81a3      	strh	r3, [r4, #12]
 80170ba:	9b00      	ldr	r3, [sp, #0]
 80170bc:	6163      	str	r3, [r4, #20]
 80170be:	9b01      	ldr	r3, [sp, #4]
 80170c0:	6120      	str	r0, [r4, #16]
 80170c2:	b15b      	cbz	r3, 80170dc <__smakebuf_r+0x74>
 80170c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170c8:	4630      	mov	r0, r6
 80170ca:	f000 f891 	bl	80171f0 <_isatty_r>
 80170ce:	b128      	cbz	r0, 80170dc <__smakebuf_r+0x74>
 80170d0:	89a3      	ldrh	r3, [r4, #12]
 80170d2:	f023 0303 	bic.w	r3, r3, #3
 80170d6:	f043 0301 	orr.w	r3, r3, #1
 80170da:	81a3      	strh	r3, [r4, #12]
 80170dc:	89a0      	ldrh	r0, [r4, #12]
 80170de:	4305      	orrs	r5, r0
 80170e0:	81a5      	strh	r5, [r4, #12]
 80170e2:	e7cd      	b.n	8017080 <__smakebuf_r+0x18>
 80170e4:	08016e75 	.word	0x08016e75

080170e8 <__malloc_lock>:
 80170e8:	4801      	ldr	r0, [pc, #4]	; (80170f0 <__malloc_lock+0x8>)
 80170ea:	f7ff bf95 	b.w	8017018 <__retarget_lock_acquire_recursive>
 80170ee:	bf00      	nop
 80170f0:	24005a68 	.word	0x24005a68

080170f4 <__malloc_unlock>:
 80170f4:	4801      	ldr	r0, [pc, #4]	; (80170fc <__malloc_unlock+0x8>)
 80170f6:	f7ff bf90 	b.w	801701a <__retarget_lock_release_recursive>
 80170fa:	bf00      	nop
 80170fc:	24005a68 	.word	0x24005a68

08017100 <__sread>:
 8017100:	b510      	push	{r4, lr}
 8017102:	460c      	mov	r4, r1
 8017104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017108:	f000 f894 	bl	8017234 <_read_r>
 801710c:	2800      	cmp	r0, #0
 801710e:	bfab      	itete	ge
 8017110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017112:	89a3      	ldrhlt	r3, [r4, #12]
 8017114:	181b      	addge	r3, r3, r0
 8017116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801711a:	bfac      	ite	ge
 801711c:	6563      	strge	r3, [r4, #84]	; 0x54
 801711e:	81a3      	strhlt	r3, [r4, #12]
 8017120:	bd10      	pop	{r4, pc}

08017122 <__swrite>:
 8017122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017126:	461f      	mov	r7, r3
 8017128:	898b      	ldrh	r3, [r1, #12]
 801712a:	05db      	lsls	r3, r3, #23
 801712c:	4605      	mov	r5, r0
 801712e:	460c      	mov	r4, r1
 8017130:	4616      	mov	r6, r2
 8017132:	d505      	bpl.n	8017140 <__swrite+0x1e>
 8017134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017138:	2302      	movs	r3, #2
 801713a:	2200      	movs	r2, #0
 801713c:	f000 f868 	bl	8017210 <_lseek_r>
 8017140:	89a3      	ldrh	r3, [r4, #12]
 8017142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801714a:	81a3      	strh	r3, [r4, #12]
 801714c:	4632      	mov	r2, r6
 801714e:	463b      	mov	r3, r7
 8017150:	4628      	mov	r0, r5
 8017152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017156:	f000 b817 	b.w	8017188 <_write_r>

0801715a <__sseek>:
 801715a:	b510      	push	{r4, lr}
 801715c:	460c      	mov	r4, r1
 801715e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017162:	f000 f855 	bl	8017210 <_lseek_r>
 8017166:	1c43      	adds	r3, r0, #1
 8017168:	89a3      	ldrh	r3, [r4, #12]
 801716a:	bf15      	itete	ne
 801716c:	6560      	strne	r0, [r4, #84]	; 0x54
 801716e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017176:	81a3      	strheq	r3, [r4, #12]
 8017178:	bf18      	it	ne
 801717a:	81a3      	strhne	r3, [r4, #12]
 801717c:	bd10      	pop	{r4, pc}

0801717e <__sclose>:
 801717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017182:	f000 b813 	b.w	80171ac <_close_r>
	...

08017188 <_write_r>:
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4d07      	ldr	r5, [pc, #28]	; (80171a8 <_write_r+0x20>)
 801718c:	4604      	mov	r4, r0
 801718e:	4608      	mov	r0, r1
 8017190:	4611      	mov	r1, r2
 8017192:	2200      	movs	r2, #0
 8017194:	602a      	str	r2, [r5, #0]
 8017196:	461a      	mov	r2, r3
 8017198:	f7ec fc39 	bl	8003a0e <_write>
 801719c:	1c43      	adds	r3, r0, #1
 801719e:	d102      	bne.n	80171a6 <_write_r+0x1e>
 80171a0:	682b      	ldr	r3, [r5, #0]
 80171a2:	b103      	cbz	r3, 80171a6 <_write_r+0x1e>
 80171a4:	6023      	str	r3, [r4, #0]
 80171a6:	bd38      	pop	{r3, r4, r5, pc}
 80171a8:	24005a6c 	.word	0x24005a6c

080171ac <_close_r>:
 80171ac:	b538      	push	{r3, r4, r5, lr}
 80171ae:	4d06      	ldr	r5, [pc, #24]	; (80171c8 <_close_r+0x1c>)
 80171b0:	2300      	movs	r3, #0
 80171b2:	4604      	mov	r4, r0
 80171b4:	4608      	mov	r0, r1
 80171b6:	602b      	str	r3, [r5, #0]
 80171b8:	f7ec fc45 	bl	8003a46 <_close>
 80171bc:	1c43      	adds	r3, r0, #1
 80171be:	d102      	bne.n	80171c6 <_close_r+0x1a>
 80171c0:	682b      	ldr	r3, [r5, #0]
 80171c2:	b103      	cbz	r3, 80171c6 <_close_r+0x1a>
 80171c4:	6023      	str	r3, [r4, #0]
 80171c6:	bd38      	pop	{r3, r4, r5, pc}
 80171c8:	24005a6c 	.word	0x24005a6c

080171cc <_fstat_r>:
 80171cc:	b538      	push	{r3, r4, r5, lr}
 80171ce:	4d07      	ldr	r5, [pc, #28]	; (80171ec <_fstat_r+0x20>)
 80171d0:	2300      	movs	r3, #0
 80171d2:	4604      	mov	r4, r0
 80171d4:	4608      	mov	r0, r1
 80171d6:	4611      	mov	r1, r2
 80171d8:	602b      	str	r3, [r5, #0]
 80171da:	f7ec fc40 	bl	8003a5e <_fstat>
 80171de:	1c43      	adds	r3, r0, #1
 80171e0:	d102      	bne.n	80171e8 <_fstat_r+0x1c>
 80171e2:	682b      	ldr	r3, [r5, #0]
 80171e4:	b103      	cbz	r3, 80171e8 <_fstat_r+0x1c>
 80171e6:	6023      	str	r3, [r4, #0]
 80171e8:	bd38      	pop	{r3, r4, r5, pc}
 80171ea:	bf00      	nop
 80171ec:	24005a6c 	.word	0x24005a6c

080171f0 <_isatty_r>:
 80171f0:	b538      	push	{r3, r4, r5, lr}
 80171f2:	4d06      	ldr	r5, [pc, #24]	; (801720c <_isatty_r+0x1c>)
 80171f4:	2300      	movs	r3, #0
 80171f6:	4604      	mov	r4, r0
 80171f8:	4608      	mov	r0, r1
 80171fa:	602b      	str	r3, [r5, #0]
 80171fc:	f7ec fc3f 	bl	8003a7e <_isatty>
 8017200:	1c43      	adds	r3, r0, #1
 8017202:	d102      	bne.n	801720a <_isatty_r+0x1a>
 8017204:	682b      	ldr	r3, [r5, #0]
 8017206:	b103      	cbz	r3, 801720a <_isatty_r+0x1a>
 8017208:	6023      	str	r3, [r4, #0]
 801720a:	bd38      	pop	{r3, r4, r5, pc}
 801720c:	24005a6c 	.word	0x24005a6c

08017210 <_lseek_r>:
 8017210:	b538      	push	{r3, r4, r5, lr}
 8017212:	4d07      	ldr	r5, [pc, #28]	; (8017230 <_lseek_r+0x20>)
 8017214:	4604      	mov	r4, r0
 8017216:	4608      	mov	r0, r1
 8017218:	4611      	mov	r1, r2
 801721a:	2200      	movs	r2, #0
 801721c:	602a      	str	r2, [r5, #0]
 801721e:	461a      	mov	r2, r3
 8017220:	f7ec fc38 	bl	8003a94 <_lseek>
 8017224:	1c43      	adds	r3, r0, #1
 8017226:	d102      	bne.n	801722e <_lseek_r+0x1e>
 8017228:	682b      	ldr	r3, [r5, #0]
 801722a:	b103      	cbz	r3, 801722e <_lseek_r+0x1e>
 801722c:	6023      	str	r3, [r4, #0]
 801722e:	bd38      	pop	{r3, r4, r5, pc}
 8017230:	24005a6c 	.word	0x24005a6c

08017234 <_read_r>:
 8017234:	b538      	push	{r3, r4, r5, lr}
 8017236:	4d07      	ldr	r5, [pc, #28]	; (8017254 <_read_r+0x20>)
 8017238:	4604      	mov	r4, r0
 801723a:	4608      	mov	r0, r1
 801723c:	4611      	mov	r1, r2
 801723e:	2200      	movs	r2, #0
 8017240:	602a      	str	r2, [r5, #0]
 8017242:	461a      	mov	r2, r3
 8017244:	f7ec fbc6 	bl	80039d4 <_read>
 8017248:	1c43      	adds	r3, r0, #1
 801724a:	d102      	bne.n	8017252 <_read_r+0x1e>
 801724c:	682b      	ldr	r3, [r5, #0]
 801724e:	b103      	cbz	r3, 8017252 <_read_r+0x1e>
 8017250:	6023      	str	r3, [r4, #0]
 8017252:	bd38      	pop	{r3, r4, r5, pc}
 8017254:	24005a6c 	.word	0x24005a6c

08017258 <_init>:
 8017258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725a:	bf00      	nop
 801725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801725e:	bc08      	pop	{r3}
 8017260:	469e      	mov	lr, r3
 8017262:	4770      	bx	lr

08017264 <_fini>:
 8017264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017266:	bf00      	nop
 8017268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726a:	bc08      	pop	{r3}
 801726c:	469e      	mov	lr, r3
 801726e:	4770      	bx	lr
