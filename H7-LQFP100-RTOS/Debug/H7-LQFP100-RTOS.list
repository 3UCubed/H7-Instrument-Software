
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011110  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080113b0  080113b0  000213b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080116c0  080116c0  000216c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080116c8  080116c8  000216c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080116cc  080116cc  000216cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080116d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d7c  24000078  08011748  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004df4  08011748  00034df4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dc64  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d9f  00000000  00000000  0005dd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002330  00000000  00000000  00062ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002168  00000000  00000000  00064de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006c77  00000000  00000000  00066f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c639  00000000  00000000  0006dbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018b18e  00000000  00000000  0009a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00225386  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009eec  00000000  00000000  002253d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011398 	.word	0x08011398

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08011398 	.word	0x08011398

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00d f9ca 	bl	800d994 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f00d f9bf 	bl	800d994 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f00d f9b4 	bl	800d994 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f010 fa22 	bl	8010a78 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2400024c 	.word	0x2400024c
 8000640:	240003d8 	.word	0x240003d8
 8000644:	24000298 	.word	0x24000298
 8000648:	240002e4 	.word	0x240002e4
 800064c:	080113e0 	.word	0x080113e0

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f00a fccf 	bl	800b000 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f010 f9b1 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f010 f9ad 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f010 f9a9 	bl	8010a78 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f010 f9a5 	bl	8010a78 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f010 f9a1 	bl	8010a78 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f010 f99d 	bl	8010a78 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f010 f999 	bl	8010a78 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f010 f995 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f010 f991 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f010 f98d 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f010 f989 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f010 f985 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f010 f981 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f010 f97d 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f010 f979 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f010 f975 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f010 f971 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f010 f96d 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f010 f969 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f010 f965 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f010 f961 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f010 f95d 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f010 f959 	bl	8010a78 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f010 f955 	bl	8010a78 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f010 f951 	bl	8010a78 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f010 f94d 	bl	8010a78 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f010 f949 	bl	8010a78 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f010 f945 	bl	8010a78 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f010 f941 	bl	8010a78 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f010 f93d 	bl	8010a78 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	240003dc 	.word	0x240003dc
 800080c:	24000330 	.word	0x24000330
 8000810:	080113f8 	.word	0x080113f8
 8000814:	08011400 	.word	0x08011400
 8000818:	0801140c 	.word	0x0801140c
 800081c:	08011414 	.word	0x08011414
 8000820:	08011420 	.word	0x08011420
 8000824:	08011434 	.word	0x08011434
 8000828:	08011440 	.word	0x08011440
 800082c:	0801144c 	.word	0x0801144c
 8000830:	08011458 	.word	0x08011458
 8000834:	08011464 	.word	0x08011464
 8000838:	08011470 	.word	0x08011470
 800083c:	08011480 	.word	0x08011480
 8000840:	0801148c 	.word	0x0801148c
 8000844:	08011498 	.word	0x08011498
 8000848:	080114a8 	.word	0x080114a8
 800084c:	080114b8 	.word	0x080114b8
 8000850:	080114c4 	.word	0x080114c4
 8000854:	080114d0 	.word	0x080114d0
 8000858:	080114dc 	.word	0x080114dc
 800085c:	080114e8 	.word	0x080114e8
 8000860:	080114f4 	.word	0x080114f4
 8000864:	08011500 	.word	0x08011500
 8000868:	0801150c 	.word	0x0801150c
 800086c:	0801151c 	.word	0x0801151c
 8000870:	0801152c 	.word	0x0801152c
 8000874:	08011534 	.word	0x08011534
 8000878:	0801153c 	.word	0x0801153c
 800087c:	08011544 	.word	0x08011544
 8000880:	08011550 	.word	0x08011550
 8000884:	08011558 	.word	0x08011558

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 fab8 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f86e 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fc86 	bl	80011a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f000 fc64 	bl	8001164 <MX_DMA_Init>
  MX_TIM2_Init();
 800089c:	f000 fb52 	bl	8000f44 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a0:	f000 fbc6 	bl	8001030 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fc12 	bl	80010cc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 fa06 	bl	8000cb8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80008ac:	f000 fa44 	bl	8000d38 <MX_SPI2_Init>
  MX_ADC1_Init();
 80008b0:	f000 f8dc 	bl	8000a6c <MX_ADC1_Init>
  MX_TIM1_Init();
 80008b4:	f000 fa98 	bl	8000de8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <main+0xa4>)
 80008bc:	f009 f8fa 	bl	8009ab4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008c0:	2100      	movs	r1, #0
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <main+0xa8>)
 80008c4:	f009 f8f6 	bl	8009ab4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008c8:	2100      	movs	r1, #0
 80008ca:	481a      	ldr	r0, [pc, #104]	; (8000934 <main+0xac>)
 80008cc:	f009 f8f2 	bl	8009ab4 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008d0:	f00c ff2a 	bl	800d728 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008d4:	4a18      	ldr	r2, [pc, #96]	; (8000938 <main+0xb0>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <main+0xb4>)
 80008da:	f00c ff6f 	bl	800d7bc <osThreadNew>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <main+0xb8>)
 80008e2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008e4:	4a17      	ldr	r2, [pc, #92]	; (8000944 <main+0xbc>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4817      	ldr	r0, [pc, #92]	; (8000948 <main+0xc0>)
 80008ea:	f00c ff67 	bl	800d7bc <osThreadNew>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a16      	ldr	r2, [pc, #88]	; (800094c <main+0xc4>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80008f4:	4a16      	ldr	r2, [pc, #88]	; (8000950 <main+0xc8>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <main+0xcc>)
 80008fa:	f00c ff5f 	bl	800d7bc <osThreadNew>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <main+0xd0>)
 8000902:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <main+0xd4>)
 8000906:	2100      	movs	r1, #0
 8000908:	4815      	ldr	r0, [pc, #84]	; (8000960 <main+0xd8>)
 800090a:	f00c ff57 	bl	800d7bc <osThreadNew>
 800090e:	4603      	mov	r3, r0
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <main+0xdc>)
 8000912:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 8000914:	2000      	movs	r0, #0
 8000916:	f00c fffe 	bl	800d916 <osEventFlagsNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <main+0xe0>)
 800091e:	6013      	str	r3, [r2, #0]
  printf("Starting kernal...\n");
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <main+0xe4>)
 8000922:	f010 f8a9 	bl	8010a78 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000926:	f00c ff23 	bl	800d770 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800092a:	e7fe      	b.n	800092a <main+0xa2>
 800092c:	2400024c 	.word	0x2400024c
 8000930:	24000298 	.word	0x24000298
 8000934:	240002e4 	.word	0x240002e4
 8000938:	0801158c 	.word	0x0801158c
 800093c:	08001215 	.word	0x08001215
 8000940:	240003c4 	.word	0x240003c4
 8000944:	080115b0 	.word	0x080115b0
 8000948:	08001245 	.word	0x08001245
 800094c:	240003c8 	.word	0x240003c8
 8000950:	080115d4 	.word	0x080115d4
 8000954:	08001275 	.word	0x08001275
 8000958:	240003cc 	.word	0x240003cc
 800095c:	080115f8 	.word	0x080115f8
 8000960:	080012a5 	.word	0x080012a5
 8000964:	240003d0 	.word	0x240003d0
 8000968:	240003d8 	.word	0x240003d8
 800096c:	08011560 	.word	0x08011560

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	; 0x70
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f010 f804 	bl	801098c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00f fffe 	bl	801098c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000990:	2002      	movs	r0, #2
 8000992:	f005 f921 	bl	8005bd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <SystemClock_Config+0xf4>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <SystemClock_Config+0xf4>)
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <SystemClock_Config+0xf4>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <SystemClock_Config+0xf8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <SystemClock_Config+0xf8>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <SystemClock_Config+0xf8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009cc:	bf00      	nop
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <SystemClock_Config+0xf8>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009da:	d1f8      	bne.n	80009ce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ec:	2300      	movs	r3, #0
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80009f4:	2309      	movs	r3, #9
 80009f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 f918 	bl	8005c4c <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a22:	f000 fc63 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	233f      	movs	r3, #63	; 0x3f
 8000a28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 fd57 	bl	8006500 <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000a58:	f000 fc48 	bl	80012ec <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3770      	adds	r7, #112	; 0x70
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58000400 	.word	0x58000400
 8000a68:	58024800 	.word	0x58024800

08000a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a90:	4b7c      	ldr	r3, [pc, #496]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000a92:	4a7d      	ldr	r2, [pc, #500]	; (8000c88 <MX_ADC1_Init+0x21c>)
 8000a94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a96:	4b7b      	ldr	r3, [pc, #492]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000a98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9e:	4b79      	ldr	r3, [pc, #484]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aa4:	4b77      	ldr	r3, [pc, #476]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b76      	ldr	r3, [pc, #472]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b74      	ldr	r3, [pc, #464]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab6:	4b73      	ldr	r3, [pc, #460]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000abc:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b70      	ldr	r3, [pc, #448]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b6e      	ldr	r3, [pc, #440]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ada:	4b6a      	ldr	r3, [pc, #424]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ae2:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae8:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af0:	4864      	ldr	r0, [pc, #400]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000af2:	f001 fb79 	bl	80021e8 <HAL_ADC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000afc:	f000 fbf6 	bl	80012ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	485e      	ldr	r0, [pc, #376]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000b0c:	f002 f99c 	bl	8002e48 <HAL_ADCEx_MultiModeConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000b16:	f000 fbe9 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <MX_ADC1_Init+0x220>)
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1e:	2306      	movs	r3, #6
 8000b20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b22:	2307      	movs	r3, #7
 8000b24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4851      	ldr	r0, [pc, #324]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000b3e:	f001 fcf5 	bl	800252c <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000b48:	f000 fbd0 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b4c:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <MX_ADC1_Init+0x224>)
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b50:	230c      	movs	r3, #12
 8000b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	484a      	ldr	r0, [pc, #296]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000b5a:	f001 fce7 	bl	800252c <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000b64:	f000 fbc2 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b68:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <MX_ADC1_Init+0x228>)
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	4843      	ldr	r0, [pc, #268]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000b76:	f001 fcd9 	bl	800252c <HAL_ADC_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000b80:	f000 fbb4 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <MX_ADC1_Init+0x22c>)
 8000b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b88:	2318      	movs	r3, #24
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483c      	ldr	r0, [pc, #240]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000b92:	f001 fccb 	bl	800252c <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000b9c:	f000 fba6 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <MX_ADC1_Init+0x230>)
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4835      	ldr	r0, [pc, #212]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000bb0:	f001 fcbc 	bl	800252c <HAL_ADC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000bba:	f000 fb97 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <MX_ADC1_Init+0x234>)
 8000bc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000bc2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	482d      	ldr	r0, [pc, #180]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000bce:	f001 fcad 	bl	800252c <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000bd8:	f000 fb88 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <MX_ADC1_Init+0x238>)
 8000bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000be0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000be4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4619      	mov	r1, r3
 8000bea:	4826      	ldr	r0, [pc, #152]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000bec:	f001 fc9e 	bl	800252c <HAL_ADC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000bf6:	f000 fb79 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_ADC1_Init+0x23c>)
 8000bfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bfe:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000c0a:	f001 fc8f 	bl	800252c <HAL_ADC_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000c14:	f000 fb6a 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_ADC1_Init+0x240>)
 8000c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000c1c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000c20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	4619      	mov	r1, r3
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000c28:	f001 fc80 	bl	800252c <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000c32:	f000 fb5b 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_ADC1_Init+0x244>)
 8000c38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	480e      	ldr	r0, [pc, #56]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000c4a:	f001 fc6f 	bl	800252c <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000c54:	f000 fb4a 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_ADC1_Init+0x248>)
 8000c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000c5c:	f240 2306 	movw	r3, #518	; 0x206
 8000c60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000c62:	2307      	movs	r3, #7
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_ADC1_Init+0x218>)
 8000c6c:	f001 fc5e 	bl	800252c <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000c76:	f000 fb39 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000094 	.word	0x24000094
 8000c88:	40022000 	.word	0x40022000
 8000c8c:	0c900008 	.word	0x0c900008
 8000c90:	10c00010 	.word	0x10c00010
 8000c94:	14f00020 	.word	0x14f00020
 8000c98:	1d500080 	.word	0x1d500080
 8000c9c:	21800100 	.word	0x21800100
 8000ca0:	25b00200 	.word	0x25b00200
 8000ca4:	2a000400 	.word	0x2a000400
 8000ca8:	2e300800 	.word	0x2e300800
 8000cac:	3ac04000 	.word	0x3ac04000
 8000cb0:	3ef08000 	.word	0x3ef08000
 8000cb4:	47520000 	.word	0x47520000

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f004 fe3c 	bl	8005970 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 faf5 	bl	80012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f004 fecf 	bl	8005aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 faec 	bl	80012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f004 ff11 	bl	8005b3e <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fae3 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000170 	.word	0x24000170
 8000d30:	40005400 	.word	0x40005400
 8000d34:	00707cbb 	.word	0x00707cbb

08000d38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <MX_SPI2_Init+0xac>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d50:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d54:	220f      	movs	r2, #15
 8000d56:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d6a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d6e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000d72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_SPI2_Init+0xa8>)
 8000dcc:	f008 fc64 	bl	8009698 <HAL_SPI_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000dd6:	f000 fa89 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	240001c4 	.word	0x240001c4
 8000de4:	40003800 	.word	0x40003800

08000de8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09a      	sub	sp, #104	; 0x68
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	222c      	movs	r2, #44	; 0x2c
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00f fdb2 	bl	801098c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e2a:	4a45      	ldr	r2, [pc, #276]	; (8000f40 <MX_TIM1_Init+0x158>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e30:	227f      	movs	r2, #127	; 0x7f
 8000e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8000e3a:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e3c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000e40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e48:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e54:	4839      	ldr	r0, [pc, #228]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e56:	f008 fd5e 	bl	8009916 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e60:	f000 fa44 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4832      	ldr	r0, [pc, #200]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e72:	f009 f9f5 	bl	800a260 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e7c:	f000 fa36 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e80:	482e      	ldr	r0, [pc, #184]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000e82:	f008 ff71 	bl	8009d68 <HAL_TIM_PWM_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e8c:	f000 fa2e 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4826      	ldr	r0, [pc, #152]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000ea4:	f009 ff32 	bl	800ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000eae:	f000 fa1d 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	; 0x60
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8000eb6:	f240 13df 	movw	r3, #479	; 0x1df
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4818      	ldr	r0, [pc, #96]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000eda:	f009 f8ad 	bl	800a038 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ee4:	f000 fa02 	bl	80012ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000f1e:	f009 ff83 	bl	800ae28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000f28:	f000 f9e0 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_TIM1_Init+0x154>)
 8000f2e:	f000 fc37 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 8000f32:	bf00      	nop
 8000f34:	3768      	adds	r7, #104	; 0x68
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2400024c 	.word	0x2400024c
 8000f40:	40010000 	.word	0x40010000

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <MX_TIM2_Init+0xe8>)
 8000f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_TIM2_Init+0xe8>)
 8000f80:	223f      	movs	r2, #63	; 0x3f
 8000f82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_TIM2_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_TIM2_Init+0xe8>)
 8000f8c:	f640 4234 	movw	r2, #3124	; 0xc34
 8000f90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_TIM2_Init+0xe8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_TIM2_Init+0xe8>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9e:	4823      	ldr	r0, [pc, #140]	; (800102c <MX_TIM2_Init+0xe8>)
 8000fa0:	f008 fcb9 	bl	8009916 <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000faa:	f000 f99f 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481c      	ldr	r0, [pc, #112]	; (800102c <MX_TIM2_Init+0xe8>)
 8000fbc:	f009 f950 	bl	800a260 <HAL_TIM_ConfigClockSource>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fc6:	f000 f991 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <MX_TIM2_Init+0xe8>)
 8000fcc:	f008 fecc 	bl	8009d68 <HAL_TIM_PWM_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000fd6:	f000 f989 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_TIM2_Init+0xe8>)
 8000fea:	f009 fe8f 	bl	800ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ff4:	f000 f97a 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff8:	2360      	movs	r3, #96	; 0x60
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	220c      	movs	r2, #12
 800100c:	4619      	mov	r1, r3
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <MX_TIM2_Init+0xe8>)
 8001010:	f009 f812 	bl	800a038 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800101a:	f000 f967 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <MX_TIM2_Init+0xe8>)
 8001020:	f000 fbbe 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	24000298 	.word	0x24000298

08001030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <MX_TIM3_Init+0x98>)
 8001052:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001056:	223f      	movs	r2, #63	; 0x3f
 8001058:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM3_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001062:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001066:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_TIM3_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001076:	f008 fc4e 	bl	8009916 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001080:	f000 f934 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001092:	f009 f8e5 	bl	800a260 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800109c:	f000 f926 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM3_Init+0x94>)
 80010ae:	f009 fe2d 	bl	800ad0c <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f000 f918 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240002e4 	.word	0x240002e4
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010d8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_USART1_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_USART1_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_USART1_UART_Init+0x90>)
 8001116:	f009 ff23 	bl	800af60 <HAL_UART_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001120:	f000 f8e4 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	2100      	movs	r1, #0
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_USART1_UART_Init+0x90>)
 8001128:	f00c f9ef 	bl	800d50a <HAL_UARTEx_SetTxFifoThreshold>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001132:	f000 f8db 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_USART1_UART_Init+0x90>)
 800113a:	f00c fa24 	bl	800d586 <HAL_UARTEx_SetRxFifoThreshold>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 f8d2 	bl	80012ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_USART1_UART_Init+0x90>)
 800114a:	f00c f9a5 	bl	800d498 <HAL_UARTEx_DisableFifoMode>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 f8ca 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	24000330 	.word	0x24000330
 8001160:	40011000 	.word	0x40011000

08001164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_DMA_Init+0x3c>)
 800116c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <MX_DMA_Init+0x3c>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_DMA_Init+0x3c>)
 800117c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2105      	movs	r1, #5
 800118c:	200b      	movs	r0, #11
 800118e:	f001 fff1 	bl	8003174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001192:	200b      	movs	r0, #11
 8001194:	f002 f808 	bl	80031a8 <HAL_NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a08      	ldr	r2, [pc, #32]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_GPIO_Init+0x6c>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	58024400 	.word	0x58024400

08001214 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <PMT_init+0x28>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001224:	2200      	movs	r2, #0
 8001226:	2101      	movs	r1, #1
 8001228:	f00c fbf8 	bl	800da1c <osEventFlagsWait>
	    //sample_pmt(pmt_data);
		pmt_seq++;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <PMT_init+0x2c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <PMT_init+0x2c>)
 8001236:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001238:	e7f0      	b.n	800121c <PMT_init+0x8>
 800123a:	bf00      	nop
 800123c:	240003d8 	.word	0x240003d8
 8001240:	240003d4 	.word	0x240003d4

08001244 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <ERPA_init+0x28>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	f00c fbe0 	bl	800da1c <osEventFlagsWait>
		erpa_seq++;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <ERPA_init+0x2c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <ERPA_init+0x2c>)
 8001266:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001268:	e7f0      	b.n	800124c <ERPA_init+0x8>
 800126a:	bf00      	nop
 800126c:	240003d8 	.word	0x240003d8
 8001270:	240003d5 	.word	0x240003d5

08001274 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HK_init+0x28>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001284:	2200      	movs	r2, #0
 8001286:	2104      	movs	r1, #4
 8001288:	f00c fbc8 	bl	800da1c <osEventFlagsWait>
		hk_seq++;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HK_init+0x2c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <HK_init+0x2c>)
 8001296:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001298:	e7f0      	b.n	800127c <HK_init+0x8>
 800129a:	bf00      	nop
 800129c:	240003d8 	.word	0x240003d8
 80012a0:	240003d6 	.word	0x240003d6

080012a4 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	4904      	ldr	r1, [pc, #16]	; (80012c0 <UART_RX_init+0x1c>)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <UART_RX_init+0x20>)
 80012b2:	f009 fea5 	bl	800b000 <HAL_UART_Receive_IT>
		osDelay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f00c fb12 	bl	800d8e0 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80012bc:	e7f6      	b.n	80012ac <UART_RX_init+0x8>
 80012be:	bf00      	nop
 80012c0:	240003dc 	.word	0x240003dc
 80012c4:	24000330 	.word	0x24000330

080012c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012da:	f000 fdcd 	bl	8001e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40001000 	.word	0x40001000

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x38>)
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_MspInit+0x38>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_MspInit+0x38>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	210f      	movs	r1, #15
 8001320:	f06f 0001 	mvn.w	r0, #1
 8001324:	f001 ff26 	bl	8003174 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58024400 	.word	0x58024400

08001334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0bc      	sub	sp, #240	; 0xf0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	22c0      	movs	r2, #192	; 0xc0
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f00f fb19 	bl	801098c <memset>
  if(hadc->Instance==ADC1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a62      	ldr	r2, [pc, #392]	; (80014e8 <HAL_ADC_MspInit+0x1b4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f040 80bd 	bne.w	80014e0 <HAL_ADC_MspInit+0x1ac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001366:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001372:	2304      	movs	r3, #4
 8001374:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001376:	2309      	movs	r3, #9
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800137a:	2304      	movs	r3, #4
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800137e:	2302      	movs	r3, #2
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001382:	2302      	movs	r3, #2
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001386:	23c0      	movs	r3, #192	; 0xc0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800138a:	2320      	movs	r3, #32
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 800138e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 fc7c 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80013aa:	f7ff ff9f 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013b6:	f043 0320 	orr.w	r3, r3, #32
 80013ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	4a3e      	ldr	r2, [pc, #248]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001426:	2333      	movs	r3, #51	; 0x33
 8001428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142c:	2303      	movs	r3, #3
 800142e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001438:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143c:	4619      	mov	r1, r3
 800143e:	482c      	ldr	r0, [pc, #176]	; (80014f0 <HAL_ADC_MspInit+0x1bc>)
 8001440:	f004 f8e6 	bl	8005610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001444:	23ce      	movs	r3, #206	; 0xce
 8001446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800145a:	4619      	mov	r1, r3
 800145c:	4825      	ldr	r0, [pc, #148]	; (80014f4 <HAL_ADC_MspInit+0x1c0>)
 800145e:	f004 f8d7 	bl	8005610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001462:	2303      	movs	r3, #3
 8001464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001478:	4619      	mov	r1, r3
 800147a:	481f      	ldr	r0, [pc, #124]	; (80014f8 <HAL_ADC_MspInit+0x1c4>)
 800147c:	f004 f8c8 	bl	8005610 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_ADC_MspInit+0x1cc>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 8001488:	2209      	movs	r2, #9
 800148a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 800149a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014c6:	f001 fe7d 	bl	80031c4 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0x1a0>
    {
      Error_Handler();
 80014d0:	f7ff ff0c 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	37f0      	adds	r7, #240	; 0xf0
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40022000 	.word	0x40022000
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020800 	.word	0x58020800
 80014f4:	58020000 	.word	0x58020000
 80014f8:	58020400 	.word	0x58020400
 80014fc:	240000f8 	.word	0x240000f8
 8001500:	40020010 	.word	0x40020010

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0ba      	sub	sp, #232	; 0xe8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	22c0      	movs	r2, #192	; 0xc0
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00f fa31 	bl	801098c <memset>
  if(hi2c->Instance==I2C1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_I2C_MspInit+0xc8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d146      	bne.n	80015c2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001534:	f04f 0208 	mov.w	r2, #8
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4618      	mov	r0, r3
 800154c:	f005 fba6 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001556:	f7ff fec9 	bl	80012ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_I2C_MspInit+0xcc>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_I2C_MspInit+0xcc>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_I2C_MspInit+0xcc>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001592:	2304      	movs	r3, #4
 8001594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <HAL_I2C_MspInit+0xd0>)
 80015a0:	f004 f836 	bl	8005610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_I2C_MspInit+0xcc>)
 80015a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <HAL_I2C_MspInit+0xcc>)
 80015ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_I2C_MspInit+0xcc>)
 80015b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	37e8      	adds	r7, #232	; 0xe8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40005400 	.word	0x40005400
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58020400 	.word	0x58020400

080015d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ba      	sub	sp, #232	; 0xe8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	22c0      	movs	r2, #192	; 0xc0
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00f f9c7 	bl	801098c <memset>
  if(hspi->Instance==SPI2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a26      	ldr	r2, [pc, #152]	; (800169c <HAL_SPI_MspInit+0xc4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d145      	bne.n	8001694 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001614:	2300      	movs	r3, #0
 8001616:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4618      	mov	r0, r3
 800161e:	f005 fb3d 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001628:	f7ff fe60 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 800162e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 800163e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001668:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800166c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001682:	2305      	movs	r3, #5
 8001684:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_SPI_MspInit+0xcc>)
 8001690:	f003 ffbe 	bl	8005610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	37e8      	adds	r7, #232	; 0xe8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40003800 	.word	0x40003800
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020400 	.word	0x58020400

080016a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a37      	ldr	r2, [pc, #220]	; (8001794 <HAL_TIM_Base_MspInit+0xec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12f      	bne.n	800171a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 80016bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c0:	4a35      	ldr	r2, [pc, #212]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 80016cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2105      	movs	r1, #5
 80016dc:	2018      	movs	r0, #24
 80016de:	f001 fd49 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80016e2:	2018      	movs	r0, #24
 80016e4:	f001 fd60 	bl	80031a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2105      	movs	r1, #5
 80016ec:	2019      	movs	r0, #25
 80016ee:	f001 fd41 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016f2:	2019      	movs	r0, #25
 80016f4:	f001 fd58 	bl	80031a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2105      	movs	r1, #5
 80016fc:	201a      	movs	r0, #26
 80016fe:	f001 fd39 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001702:	201a      	movs	r0, #26
 8001704:	f001 fd50 	bl	80031a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2105      	movs	r1, #5
 800170c:	201b      	movs	r0, #27
 800170e:	f001 fd31 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001712:	201b      	movs	r0, #27
 8001714:	f001 fd48 	bl	80031a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001718:	e038      	b.n	800178c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001722:	d117      	bne.n	8001754 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 8001726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 8001736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2105      	movs	r1, #5
 8001746:	201c      	movs	r0, #28
 8001748:	f001 fd14 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174c:	201c      	movs	r0, #28
 800174e:	f001 fd2b 	bl	80031a8 <HAL_NVIC_EnableIRQ>
}
 8001752:	e01b      	b.n	800178c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_TIM_Base_MspInit+0xf4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d116      	bne.n	800178c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 8001760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_TIM_Base_MspInit+0xf0>)
 8001770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2105      	movs	r1, #5
 8001780:	201d      	movs	r0, #29
 8001782:	f001 fcf7 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001786:	201d      	movs	r0, #29
 8001788:	f001 fd0e 	bl	80031a8 <HAL_NVIC_EnableIRQ>
}
 800178c:	bf00      	nop
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40010000 	.word	0x40010000
 8001798:	58024400 	.word	0x58024400
 800179c:	40000400 	.word	0x40000400

080017a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a26      	ldr	r2, [pc, #152]	; (8001858 <HAL_TIM_MspPostInit+0xb8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d120      	bne.n	8001804 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_TIM_MspPostInit+0xbc>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_TIM_MspPostInit+0xbc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_TIM_MspPostInit+0xbc>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4818      	ldr	r0, [pc, #96]	; (8001860 <HAL_TIM_MspPostInit+0xc0>)
 80017fe:	f003 ff07 	bl	8005610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001802:	e024      	b.n	800184e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d11f      	bne.n	800184e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_TIM_MspPostInit+0xbc>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_TIM_MspPostInit+0xbc>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_TIM_MspPostInit+0xbc>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800182c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800183e:	2301      	movs	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4806      	ldr	r0, [pc, #24]	; (8001864 <HAL_TIM_MspPostInit+0xc4>)
 800184a:	f003 fee1 	bl	8005610 <HAL_GPIO_Init>
}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40010000 	.word	0x40010000
 800185c:	58024400 	.word	0x58024400
 8001860:	58020000 	.word	0x58020000
 8001864:	58020400 	.word	0x58020400

08001868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0ba      	sub	sp, #232	; 0xe8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	22c0      	movs	r2, #192	; 0xc0
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f00f f87f 	bl	801098c <memset>
  if(huart->Instance==USART1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <HAL_UART_MspInit+0xd8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d14e      	bne.n	8001936 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001898:	f04f 0201 	mov.w	r2, #1
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 f9f4 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018ba:	f7ff fd17 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_UART_MspInit+0xdc>)
 80018c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_UART_MspInit+0xdc>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_UART_MspInit+0xdc>)
 80018d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_UART_MspInit+0xdc>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_UART_MspInit+0xdc>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_UART_MspInit+0xdc>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001914:	2307      	movs	r3, #7
 8001916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800191e:	4619      	mov	r1, r3
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <HAL_UART_MspInit+0xe0>)
 8001922:	f003 fe75 	bl	8005610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	2025      	movs	r0, #37	; 0x25
 800192c:	f001 fc22 	bl	8003174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001930:	2025      	movs	r0, #37	; 0x25
 8001932:	f001 fc39 	bl	80031a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	37e8      	adds	r7, #232	; 0xe8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40011000 	.word	0x40011000
 8001944:	58024400 	.word	0x58024400
 8001948:	58020000 	.word	0x58020000

0800194c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b090      	sub	sp, #64	; 0x40
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b0f      	cmp	r3, #15
 8001958:	d827      	bhi.n	80019aa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800195a:	2200      	movs	r2, #0
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f001 fc08 	bl	8003174 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001964:	2036      	movs	r0, #54	; 0x36
 8001966:	f001 fc1f 	bl	80031a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800196a:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_InitTick+0xc4>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_InitTick+0xc8>)
 8001972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001976:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_InitTick+0xc8>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_InitTick+0xc8>)
 8001982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198e:	f107 0210 	add.w	r2, r7, #16
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f005 f93d 	bl	8006c18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_InitTick+0x6a>
 80019a8:	e001      	b.n	80019ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e02b      	b.n	8001a06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ae:	f005 f907 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 80019b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80019b4:	e004      	b.n	80019c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019b6:	f005 f903 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 80019ba:	4603      	mov	r3, r0
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_InitTick+0xcc>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9b      	lsrs	r3, r3, #18
 80019ca:	3b01      	subs	r3, #1
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_InitTick+0xd0>)
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_InitTick+0xd4>)
 80019d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_InitTick+0xd0>)
 80019d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019dc:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <HAL_InitTick+0xd0>)
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_InitTick+0xd0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_InitTick+0xd0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <HAL_InitTick+0xd0>)
 80019f0:	f007 ff91 	bl	8009916 <HAL_TIM_Base_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d104      	bne.n	8001a04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019fa:	4808      	ldr	r0, [pc, #32]	; (8001a1c <HAL_InitTick+0xd0>)
 80019fc:	f007 ffe2 	bl	80099c4 <HAL_TIM_Base_Start_IT>
 8001a00:	4603      	mov	r3, r0
 8001a02:	e000      	b.n	8001a06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3740      	adds	r7, #64	; 0x40
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	24000008 	.word	0x24000008
 8001a14:	58024400 	.word	0x58024400
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	24000440 	.word	0x24000440
 8001a20:	40001000 	.word	0x40001000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Stream0_IRQHandler+0x10>)
 8001a56:	f002 fc75 	bl	8004344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240000f8 	.word	0x240000f8

08001a64 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM1_BRK_IRQHandler+0x10>)
 8001a6a:	f008 f9de 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2400024c 	.word	0x2400024c

08001a78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM1_UP_IRQHandler+0x10>)
 8001a7e:	f008 f9d4 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2400024c 	.word	0x2400024c

08001a8c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001a92:	f008 f9ca 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2400024c 	.word	0x2400024c

08001aa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM1_CC_IRQHandler+0x10>)
 8001aa6:	f008 f9c0 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2400024c 	.word	0x2400024c

08001ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM2_IRQHandler+0x10>)
 8001aba:	f008 f9b6 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	24000298 	.word	0x24000298

08001ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIM3_IRQHandler+0x10>)
 8001ace:	f008 f9ac 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	240002e4 	.word	0x240002e4

08001adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <USART1_IRQHandler+0x10>)
 8001ae2:	f009 fad9 	bl	800b098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	24000330 	.word	0x24000330

08001af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM6_DAC_IRQHandler+0x10>)
 8001af6:	f008 f998 	bl	8009e2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24000440 	.word	0x24000440

08001b04 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <ITM_SendChar+0x48>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <ITM_SendChar+0x48>)
 8001b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <ITM_SendChar+0x4c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <ITM_SendChar+0x4c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8001b26:	bf00      	nop
 8001b28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f8      	beq.n	8001b28 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8001b36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000edfc 	.word	0xe000edfc
 8001b50:	e0000e00 	.word	0xe0000e00

08001b54 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e00a      	b.n	8001b7c <_read+0x28>
		*ptr++ = __io_getchar();
 8001b66:	f3af 8000 	nop.w
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf0      	blt.n	8001b66 <_read+0x12>
	}

	return len;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e009      	b.n	8001bb4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	60ba      	str	r2, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ffab 	bl	8001b04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf1      	blt.n	8001ba0 <_write+0x12>
	}
	return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_close>:

int _close(int file) {
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_fstat>:

int _fstat(int file, struct stat *st) {
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bee:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_isatty>:

int _isatty(int file) {
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
		errno = ENOMEM;
 8001c60:	f00e fe5c 	bl	801091c <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	24080000 	.word	0x24080000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	2400048c 	.word	0x2400048c
 8001c98:	24004df8 	.word	0x24004df8

08001c9c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <SystemInit+0xe4>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <SystemInit+0xe4>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <SystemInit+0xe8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d807      	bhi.n	8001ccc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <SystemInit+0xe8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 030f 	bic.w	r3, r3, #15
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <SystemInit+0xe8>)
 8001cc6:	f043 0307 	orr.w	r3, r3, #7
 8001cca:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <SystemInit+0xec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2d      	ldr	r2, [pc, #180]	; (8001d88 <SystemInit+0xec>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <SystemInit+0xec>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <SystemInit+0xec>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4929      	ldr	r1, [pc, #164]	; (8001d88 <SystemInit+0xec>)
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <SystemInit+0xf0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <SystemInit+0xe8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <SystemInit+0xe8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 030f 	bic.w	r3, r3, #15
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <SystemInit+0xe8>)
 8001d00:	f043 0307 	orr.w	r3, r3, #7
 8001d04:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <SystemInit+0xec>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <SystemInit+0xec>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <SystemInit+0xec>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <SystemInit+0xec>)
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <SystemInit+0xf4>)
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <SystemInit+0xec>)
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <SystemInit+0xf8>)
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <SystemInit+0xec>)
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <SystemInit+0xfc>)
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <SystemInit+0xec>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <SystemInit+0xec>)
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <SystemInit+0xfc>)
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <SystemInit+0xec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <SystemInit+0xec>)
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <SystemInit+0xfc>)
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <SystemInit+0xec>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <SystemInit+0xec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <SystemInit+0xec>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <SystemInit+0xec>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <SystemInit+0x100>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <SystemInit+0x104>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d66:	d202      	bcs.n	8001d6e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <SystemInit+0x108>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <SystemInit+0x10c>)
 8001d70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	52002000 	.word	0x52002000
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d90:	02020200 	.word	0x02020200
 8001d94:	01ff0000 	.word	0x01ff0000
 8001d98:	01010280 	.word	0x01010280
 8001d9c:	5c001000 	.word	0x5c001000
 8001da0:	ffff0000 	.word	0xffff0000
 8001da4:	51008108 	.word	0x51008108
 8001da8:	52004000 	.word	0x52004000

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db0:	f7ff ff74 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	; (8001dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	; (8001df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dda:	f00e fda5 	bl	8010928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dde:	f7fe fd53 	bl	8000888 <main>
  bx  lr
 8001de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001de8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dec:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001df0:	080116d0 	.word	0x080116d0
  ldr r2, =_sbss
 8001df4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001df8:	24004df4 	.word	0x24004df4

08001dfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC3_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e06:	2003      	movs	r0, #3
 8001e08:	f001 f9a9 	bl	800315e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e0c:	f004 fd2e 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_Init+0x68>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	4913      	ldr	r1, [pc, #76]	; (8001e6c <HAL_Init+0x6c>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_Init+0x68>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_Init+0x6c>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_Init+0x70>)
 8001e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_Init+0x74>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f7ff fd7e 	bl	800194c <HAL_InitTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e002      	b.n	8001e60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5a:	f7ff fa4d 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	0801161c 	.word	0x0801161c
 8001e70:	24000004 	.word	0x24000004
 8001e74:	24000000 	.word	0x24000000

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2400000c 	.word	0x2400000c
 8001e9c:	24000490 	.word	0x24000490

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	24000490 	.word	0x24000490

08001eb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetREVID+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	5c001000 	.word	0x5c001000

08001ed0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3360      	adds	r3, #96	; 0x60
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3360      	adds	r3, #96	; 0x60
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3330      	adds	r3, #48	; 0x30
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	211f      	movs	r1, #31
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 011f 	and.w	r1, r3, #31
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	431a      	orrs	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3314      	adds	r3, #20
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0e5b      	lsrs	r3, r3, #25
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0d1b      	lsrs	r3, r3, #20
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2107      	movs	r1, #7
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0318 	and.w	r3, r3, #24
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b4:	40d9      	lsrs	r1, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	400b      	ands	r3, r1
 80020ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	000fffff 	.word	0x000fffff

080020d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	5fffffc0 	.word	0x5fffffc0

080020fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800210c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002110:	d101      	bne.n	8002116 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LL_ADC_EnableInternalRegulator+0x24>)
 8002132:	4013      	ands	r3, r2
 8002134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	6fffffc0 	.word	0x6fffffc0

0800214c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002160:	d101      	bne.n	8002166 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <LL_ADC_IsEnabled+0x18>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_ADC_IsEnabled+0x1a>
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d101      	bne.n	80021d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e18f      	b.n	8002522 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff f88f 	bl	8001334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff67 	bl	80020fc <LL_ADC_IsDeepPowerDownEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff4d 	bl	80020d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff82 	bl	800214c <LL_ADC_IsInternalRegulatorEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d114      	bne.n	8002278 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff66 	bl	8002124 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002258:	4b87      	ldr	r3, [pc, #540]	; (8002478 <HAL_ADC_Init+0x290>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	4a87      	ldr	r2, [pc, #540]	; (800247c <HAL_ADC_Init+0x294>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800226a:	e002      	b.n	8002272 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3b01      	subs	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f9      	bne.n	800226c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff65 	bl	800214c <LL_ADC_IsInternalRegulatorEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff76 	bl	800219a <LL_ADC_REG_IsConversionOngoing>
 80022ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8129 	bne.w	8002510 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 8125 	bne.w	8002510 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff4a 	bl	8002174 <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d136      	bne.n	8002354 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a65      	ldr	r2, [pc, #404]	; (8002480 <HAL_ADC_Init+0x298>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_ADC_Init+0x112>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a63      	ldr	r2, [pc, #396]	; (8002484 <HAL_ADC_Init+0x29c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10e      	bne.n	8002318 <HAL_ADC_Init+0x130>
 80022fa:	4861      	ldr	r0, [pc, #388]	; (8002480 <HAL_ADC_Init+0x298>)
 80022fc:	f7ff ff3a 	bl	8002174 <LL_ADC_IsEnabled>
 8002300:	4604      	mov	r4, r0
 8002302:	4860      	ldr	r0, [pc, #384]	; (8002484 <HAL_ADC_Init+0x29c>)
 8002304:	f7ff ff36 	bl	8002174 <LL_ADC_IsEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	4323      	orrs	r3, r4
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e008      	b.n	800232a <HAL_ADC_Init+0x142>
 8002318:	485b      	ldr	r0, [pc, #364]	; (8002488 <HAL_ADC_Init+0x2a0>)
 800231a:	f7ff ff2b 	bl	8002174 <LL_ADC_IsEnabled>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d012      	beq.n	8002354 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a53      	ldr	r2, [pc, #332]	; (8002480 <HAL_ADC_Init+0x298>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_ADC_Init+0x15a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a51      	ldr	r2, [pc, #324]	; (8002484 <HAL_ADC_Init+0x29c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Init+0x15e>
 8002342:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_ADC_Init+0x2a4>)
 8002344:	e000      	b.n	8002348 <HAL_ADC_Init+0x160>
 8002346:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_ADC_Init+0x2a8>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f7ff fdbe 	bl	8001ed0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002354:	f7ff fdb0 	bl	8001eb8 <HAL_GetREVID>
 8002358:	4603      	mov	r3, r0
 800235a:	f241 0203 	movw	r2, #4099	; 0x1003
 800235e:	4293      	cmp	r3, r2
 8002360:	d914      	bls.n	800238c <HAL_ADC_Init+0x1a4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d110      	bne.n	800238c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7d5b      	ldrb	r3, [r3, #21]
 800236e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002374:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800237a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7f1b      	ldrb	r3, [r3, #28]
 8002380:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002382:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002384:	f043 030c 	orr.w	r3, r3, #12
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	e00d      	b.n	80023a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7d5b      	ldrb	r3, [r3, #21]
 8002390:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002396:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800239c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7f1b      	ldrb	r3, [r3, #28]
 80023a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7f1b      	ldrb	r3, [r3, #28]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	045b      	lsls	r3, r3, #17
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_ADC_Init+0x2ac>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	69b9      	ldr	r1, [r7, #24]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fed1 	bl	800219a <LL_ADC_REG_IsConversionOngoing>
 80023f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fede 	bl	80021c0 <LL_ADC_INJ_IsConversionOngoing>
 8002404:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d15f      	bne.n	80024cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d15c      	bne.n	80024cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7d1b      	ldrb	r3, [r3, #20]
 8002416:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <HAL_ADC_Init+0x2b0>)
 8002428:	4013      	ands	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	430b      	orrs	r3, r1
 8002432:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243a:	2b01      	cmp	r3, #1
 800243c:	d130      	bne.n	80024a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_ADC_Init+0x2b4>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002452:	3a01      	subs	r2, #1
 8002454:	0411      	lsls	r1, r2, #16
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002460:	4311      	orrs	r1, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002466:	430a      	orrs	r2, r1
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	e01c      	b.n	80024b0 <HAL_ADC_Init+0x2c8>
 8002476:	bf00      	nop
 8002478:	24000000 	.word	0x24000000
 800247c:	053e2d63 	.word	0x053e2d63
 8002480:	40022000 	.word	0x40022000
 8002484:	40022100 	.word	0x40022100
 8002488:	58026000 	.word	0x58026000
 800248c:	40022300 	.word	0x40022300
 8002490:	58026300 	.word	0x58026300
 8002494:	fff0c003 	.word	0xfff0c003
 8002498:	ffffbffc 	.word	0xffffbffc
 800249c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fb8c 	bl	8002be4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10c      	bne.n	80024ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f023 010f 	bic.w	r1, r3, #15
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
 80024ec:	e007      	b.n	80024fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 020f 	bic.w	r2, r2, #15
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
 800250e:	e007      	b.n	8002520 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0210 	orr.w	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002520:	7ffb      	ldrb	r3, [r7, #31]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop

0800252c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b0a1      	sub	sp, #132	; 0x84
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_ADC_ConfigChannel+0x1b0>)
 8002546:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x2a>
 8002552:	2302      	movs	r3, #2
 8002554:	e32e      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x688>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fe19 	bl	800219a <LL_ADC_REG_IsConversionOngoing>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8313 	bne.w	8002b96 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db2c      	blt.n	80025d2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x6a>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2201      	movs	r2, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	e016      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x98>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e003      	b.n	80025ba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80025b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2201      	movs	r2, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	69d1      	ldr	r1, [r2, #28]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	f7ff fcfe 	bl	8001fe0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fdd6 	bl	800219a <LL_ADC_REG_IsConversionOngoing>
 80025ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fde3 	bl	80021c0 <LL_ADC_INJ_IsConversionOngoing>
 80025fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80b8 	bne.w	8002774 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 80b4 	bne.w	8002774 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	461a      	mov	r2, r3
 800261a:	f7ff fd0d 	bl	8002038 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800261e:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <HAL_ADC_ConfigChannel+0x1b4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262a:	d10b      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x118>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	e01d      	b.n	8002680 <HAL_ADC_ConfigChannel+0x154>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <HAL_ADC_ConfigChannel+0x13e>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	e00a      	b.n	8002680 <HAL_ADC_ConfigChannel+0x154>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d02c      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6919      	ldr	r1, [r3, #16]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002698:	f7ff fc4e 	bl	8001f38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6919      	ldr	r1, [r3, #16]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	7e5b      	ldrb	r3, [r3, #25]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x186>
 80026ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026b0:	e000      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x188>
 80026b2:	2300      	movs	r3, #0
 80026b4:	461a      	mov	r2, r3
 80026b6:	f7ff fc78 	bl	8001faa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	7e1b      	ldrb	r3, [r3, #24]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1a4>
 80026ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026ce:	e000      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x1a6>
 80026d0:	2300      	movs	r3, #0
 80026d2:	461a      	mov	r2, r3
 80026d4:	f7ff fc50 	bl	8001f78 <LL_ADC_SetDataRightShift>
 80026d8:	e04c      	b.n	8002774 <HAL_ADC_ConfigChannel+0x248>
 80026da:	bf00      	nop
 80026dc:	47ff0000 	.word	0x47ff0000
 80026e0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	069b      	lsls	r3, r3, #26
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002706:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	069b      	lsls	r3, r3, #26
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800272a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	069b      	lsls	r3, r3, #26
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800274e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	069b      	lsls	r3, r3, #26
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002772:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fcfb 	bl	8002174 <LL_ADC_IsEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 8211 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff fc7c 	bl	8002090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4aa1      	ldr	r2, [pc, #644]	; (8002a24 <HAL_ADC_ConfigChannel+0x4f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f040 812e 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x2a0>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e019      	b.n	8002800 <HAL_ADC_ConfigChannel+0x2d4>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80027de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e003      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80027e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2b09      	cmp	r3, #9
 80027f8:	bf94      	ite	ls
 80027fa:	2301      	movls	r3, #1
 80027fc:	2300      	movhi	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002800:	2b00      	cmp	r3, #0
 8002802:	d079      	beq.n	80028f8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x2f4>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281e:	e015      	b.n	800284c <HAL_ADC_ConfigChannel+0x320>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800282e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002830:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800283c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ADC_ConfigChannel+0x340>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	3301      	adds	r3, #1
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	e017      	b.n	800289c <HAL_ADC_ConfigChannel+0x370>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800287e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	ea42 0103 	orr.w	r1, r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x396>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	051b      	lsls	r3, r3, #20
 80028c0:	e018      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x3c8>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e003      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f4:	430b      	orrs	r3, r1
 80028f6:	e07e      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x3e8>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	3301      	adds	r3, #1
 800290c:	069b      	lsls	r3, r3, #26
 800290e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002912:	e015      	b.n	8002940 <HAL_ADC_ConfigChannel+0x414>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e003      	b.n	8002938 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	069b      	lsls	r3, r3, #26
 800293c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x434>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	3301      	adds	r3, #1
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	e017      	b.n	8002990 <HAL_ADC_ConfigChannel+0x464>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	61bb      	str	r3, [r7, #24]
  return result;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e003      	b.n	8002984 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	ea42 0103 	orr.w	r1, r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x490>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	051b      	lsls	r3, r3, #20
 80029b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ba:	e01b      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x4c8>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	60fb      	str	r3, [r7, #12]
  return result;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e003      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	051b      	lsls	r3, r3, #20
 80029f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	430b      	orrs	r3, r1
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7ff fb1c 	bl	8002038 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f280 80cf 	bge.w	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_ADC_ConfigChannel+0x4fc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x4f2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_ADC_ConfigChannel+0x500>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x508>
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_ADC_ConfigChannel+0x504>)
 8002a20:	e009      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x50a>
 8002a22:	bf00      	nop
 8002a24:	47ff0000 	.word	0x47ff0000
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40022100 	.word	0x40022100
 8002a30:	40022300 	.word	0x40022300
 8002a34:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_ADC_ConfigChannel+0x690>)
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fa70 	bl	8001f1c <LL_ADC_GetCommonPathInternalCh>
 8002a3c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5f      	ldr	r2, [pc, #380]	; (8002bc0 <HAL_ADC_ConfigChannel+0x694>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x526>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_ADC_ConfigChannel+0x698>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10e      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x544>
 8002a52:	485b      	ldr	r0, [pc, #364]	; (8002bc0 <HAL_ADC_ConfigChannel+0x694>)
 8002a54:	f7ff fb8e 	bl	8002174 <LL_ADC_IsEnabled>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	485a      	ldr	r0, [pc, #360]	; (8002bc4 <HAL_ADC_ConfigChannel+0x698>)
 8002a5c:	f7ff fb8a 	bl	8002174 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4323      	orrs	r3, r4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e008      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x556>
 8002a70:	4855      	ldr	r0, [pc, #340]	; (8002bc8 <HAL_ADC_ConfigChannel+0x69c>)
 8002a72:	f7ff fb7f 	bl	8002174 <LL_ADC_IsEnabled>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d07d      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <HAL_ADC_ConfigChannel+0x6a0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d130      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x5c6>
 8002a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d12b      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <HAL_ADC_ConfigChannel+0x69c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 8081 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a45      	ldr	r2, [pc, #276]	; (8002bc0 <HAL_ADC_ConfigChannel+0x694>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x58e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a43      	ldr	r2, [pc, #268]	; (8002bc4 <HAL_ADC_ConfigChannel+0x698>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x592>
 8002aba:	4a45      	ldr	r2, [pc, #276]	; (8002bd0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002abc:	e000      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x594>
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <HAL_ADC_ConfigChannel+0x690>)
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f7ff fa14 	bl	8001ef6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_ADC_ConfigChannel+0x6a8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	4a40      	ldr	r2, [pc, #256]	; (8002bd8 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	3301      	adds	r3, #1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ae2:	e002      	b.n	8002aea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af0:	e05a      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a39      	ldr	r2, [pc, #228]	; (8002bdc <HAL_ADC_ConfigChannel+0x6b0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d11e      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x60e>
 8002afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d119      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <HAL_ADC_ConfigChannel+0x69c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d14b      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_ADC_ConfigChannel+0x694>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x5f8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_ADC_ConfigChannel+0x698>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x5fc>
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002b26:	e000      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x5fe>
 8002b28:	4a24      	ldr	r2, [pc, #144]	; (8002bbc <HAL_ADC_ConfigChannel+0x690>)
 8002b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7ff f9df 	bl	8001ef6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b38:	e036      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d131      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
 8002b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d12c      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_ADC_ConfigChannel+0x69c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d127      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_ADC_ConfigChannel+0x694>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x640>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_ADC_ConfigChannel+0x698>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x644>
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002b6e:	e000      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x646>
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_ADC_ConfigChannel+0x690>)
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff f9bb 	bl	8001ef6 <LL_ADC_SetCommonPathInternalCh>
 8002b80:	e012      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b94:	e008      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bb0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3784      	adds	r7, #132	; 0x84
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}
 8002bbc:	58026300 	.word	0x58026300
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40022100 	.word	0x40022100
 8002bc8:	58026000 	.word	0x58026000
 8002bcc:	cb840000 	.word	0xcb840000
 8002bd0:	40022300 	.word	0x40022300
 8002bd4:	24000000 	.word	0x24000000
 8002bd8:	053e2d63 	.word	0x053e2d63
 8002bdc:	c7520000 	.word	0xc7520000
 8002be0:	cfb80000 	.word	0xcfb80000

08002be4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7a      	ldr	r2, [pc, #488]	; (8002ddc <ADC_ConfigureBoostMode+0x1f8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <ADC_ConfigureBoostMode+0x1c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a79      	ldr	r2, [pc, #484]	; (8002de0 <ADC_ConfigureBoostMode+0x1fc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <ADC_ConfigureBoostMode+0x30>
 8002c00:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <ADC_ConfigureBoostMode+0x200>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e008      	b.n	8002c26 <ADC_ConfigureBoostMode+0x42>
 8002c14:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <ADC_ConfigureBoostMode+0x204>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01c      	beq.n	8002c64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c2a:	f003 ff99 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8002c2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c38:	d010      	beq.n	8002c5c <ADC_ConfigureBoostMode+0x78>
 8002c3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c3e:	d873      	bhi.n	8002d28 <ADC_ConfigureBoostMode+0x144>
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d002      	beq.n	8002c4c <ADC_ConfigureBoostMode+0x68>
 8002c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c4a:	d16d      	bne.n	8002d28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	60fb      	str	r3, [r7, #12]
        break;
 8002c5a:	e068      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	60fb      	str	r3, [r7, #12]
        break;
 8002c62:	e064      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	f005 fa20 	bl	80080b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c7a:	d051      	beq.n	8002d20 <ADC_ConfigureBoostMode+0x13c>
 8002c7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c80:	d854      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002c82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c86:	d047      	beq.n	8002d18 <ADC_ConfigureBoostMode+0x134>
 8002c88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c8c:	d84e      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002c8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c92:	d03d      	beq.n	8002d10 <ADC_ConfigureBoostMode+0x12c>
 8002c94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c98:	d848      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9e:	d033      	beq.n	8002d08 <ADC_ConfigureBoostMode+0x124>
 8002ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ca4:	d842      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002ca6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002caa:	d029      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x11c>
 8002cac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cb0:	d83c      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002cb2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cb6:	d01a      	beq.n	8002cee <ADC_ConfigureBoostMode+0x10a>
 8002cb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cbc:	d836      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002cbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002cc2:	d014      	beq.n	8002cee <ADC_ConfigureBoostMode+0x10a>
 8002cc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002cc8:	d830      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cce:	d00e      	beq.n	8002cee <ADC_ConfigureBoostMode+0x10a>
 8002cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd4:	d82a      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002cd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cda:	d008      	beq.n	8002cee <ADC_ConfigureBoostMode+0x10a>
 8002cdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ce0:	d824      	bhi.n	8002d2c <ADC_ConfigureBoostMode+0x148>
 8002ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ce6:	d002      	beq.n	8002cee <ADC_ConfigureBoostMode+0x10a>
 8002ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cec:	d11e      	bne.n	8002d2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
        break;
 8002cfe:	e016      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
        break;
 8002d06:	e012      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	60fb      	str	r3, [r7, #12]
        break;
 8002d0e:	e00e      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	60fb      	str	r3, [r7, #12]
        break;
 8002d16:	e00a      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	09db      	lsrs	r3, r3, #7
 8002d1c:	60fb      	str	r3, [r7, #12]
        break;
 8002d1e:	e006      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	60fb      	str	r3, [r7, #12]
        break;
 8002d26:	e002      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002d2c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d2e:	f7ff f8c3 	bl	8001eb8 <HAL_GetREVID>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d815      	bhi.n	8002d68 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <ADC_ConfigureBoostMode+0x208>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d908      	bls.n	8002d56 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d54:	e03e      	b.n	8002dd4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d64:	609a      	str	r2, [r3, #8]
}
 8002d66:	e035      	b.n	8002dd4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <ADC_ConfigureBoostMode+0x20c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d808      	bhi.n	8002d88 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	e025      	b.n	8002dd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <ADC_ConfigureBoostMode+0x210>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d80a      	bhi.n	8002da6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	e016      	b.n	8002dd4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <ADC_ConfigureBoostMode+0x214>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d80a      	bhi.n	8002dc4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	609a      	str	r2, [r3, #8]
}
 8002dc2:	e007      	b.n	8002dd4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40022100 	.word	0x40022100
 8002de4:	40022300 	.word	0x40022300
 8002de8:	58026300 	.word	0x58026300
 8002dec:	01312d00 	.word	0x01312d00
 8002df0:	005f5e10 	.word	0x005f5e10
 8002df4:	00bebc20 	.word	0x00bebc20
 8002df8:	017d7840 	.word	0x017d7840

08002dfc <LL_ADC_IsEnabled>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <LL_ADC_IsEnabled+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_ADC_IsEnabled+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d101      	bne.n	8002e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b09f      	sub	sp, #124	; 0x7c
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0be      	b.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d102      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	e001      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e09d      	b.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ffb9 	bl	8002e22 <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ffb3 	bl	8002e22 <LL_ADC_REG_IsConversionOngoing>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d17f      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d17c      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a46      	ldr	r2, [pc, #280]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002edc:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ede:	e000      	b.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ee0:	4b45      	ldr	r3, [pc, #276]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ee2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d039      	beq.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10e      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f12:	4836      	ldr	r0, [pc, #216]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f14:	f7ff ff72 	bl	8002dfc <LL_ADC_IsEnabled>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	4835      	ldr	r0, [pc, #212]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f1c:	f7ff ff6e 	bl	8002dfc <LL_ADC_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4323      	orrs	r3, r4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e008      	b.n	8002f42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002f30:	4832      	ldr	r0, [pc, #200]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f32:	f7ff ff63 	bl	8002dfc <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d047      	beq.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	6811      	ldr	r1, [r2, #0]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f5e:	e03a      	b.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10e      	bne.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f80:	481a      	ldr	r0, [pc, #104]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f82:	f7ff ff3b 	bl	8002dfc <LL_ADC_IsEnabled>
 8002f86:	4604      	mov	r4, r0
 8002f88:	4819      	ldr	r0, [pc, #100]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f8a:	f7ff ff37 	bl	8002dfc <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4323      	orrs	r3, r4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e008      	b.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f9e:	4817      	ldr	r0, [pc, #92]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002fa0:	f7ff ff2c 	bl	8002dfc <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fbe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc0:	e009      	b.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fd4:	e000      	b.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	377c      	adds	r7, #124	; 0x7c
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40022100 	.word	0x40022100
 8002ff4:	40022300 	.word	0x40022300
 8002ff8:	58026300 	.word	0x58026300
 8002ffc:	58026000 	.word	0x58026000
 8003000:	fffff0e0 	.word	0xfffff0e0

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <__NVIC_SetPriorityGrouping+0x40>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 800302e:	4313      	orrs	r3, r2
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	; (8003044 <__NVIC_SetPriorityGrouping+0x40>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00
 8003048:	05fa0000 	.word	0x05fa0000

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ff4c 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003182:	f7ff ff63 	bl	800304c <__NVIC_GetPriorityGrouping>
 8003186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	6978      	ldr	r0, [r7, #20]
 800318e:	f7ff ffb3 	bl	80030f8 <NVIC_EncodePriority>
 8003192:	4602      	mov	r2, r0
 8003194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff82 	bl	80030a4 <__NVIC_SetPriority>
}
 80031a0:	bf00      	nop
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ff56 	bl	8003068 <__NVIC_EnableIRQ>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7fe fe68 	bl	8001ea0 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e316      	b.n	800380a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_DMA_Init+0x1b8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d04a      	beq.n	800327c <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_DMA_Init+0x1bc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d045      	beq.n	800327c <HAL_DMA_Init+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a63      	ldr	r2, [pc, #396]	; (8003384 <HAL_DMA_Init+0x1c0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d040      	beq.n	800327c <HAL_DMA_Init+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a62      	ldr	r2, [pc, #392]	; (8003388 <HAL_DMA_Init+0x1c4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d03b      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a60      	ldr	r2, [pc, #384]	; (800338c <HAL_DMA_Init+0x1c8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d036      	beq.n	800327c <HAL_DMA_Init+0xb8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5f      	ldr	r2, [pc, #380]	; (8003390 <HAL_DMA_Init+0x1cc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d031      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_DMA_Init+0x1d0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02c      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_DMA_Init+0x1d4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d027      	beq.n	800327c <HAL_DMA_Init+0xb8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5a      	ldr	r2, [pc, #360]	; (800339c <HAL_DMA_Init+0x1d8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a59      	ldr	r2, [pc, #356]	; (80033a0 <HAL_DMA_Init+0x1dc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d01d      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a57      	ldr	r2, [pc, #348]	; (80033a4 <HAL_DMA_Init+0x1e0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d018      	beq.n	800327c <HAL_DMA_Init+0xb8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_DMA_Init+0x1e4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a54      	ldr	r2, [pc, #336]	; (80033ac <HAL_DMA_Init+0x1e8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_DMA_Init+0xb8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a53      	ldr	r2, [pc, #332]	; (80033b0 <HAL_DMA_Init+0x1ec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_DMA_Init+0x1f0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_DMA_Init+0xb8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <HAL_DMA_Init+0x1f4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_DMA_Init+0xbc>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_DMA_Init+0xbe>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 813b 	beq.w	80034fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a37      	ldr	r2, [pc, #220]	; (800337c <HAL_DMA_Init+0x1b8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d04a      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a36      	ldr	r2, [pc, #216]	; (8003380 <HAL_DMA_Init+0x1bc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d045      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a34      	ldr	r2, [pc, #208]	; (8003384 <HAL_DMA_Init+0x1c0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d040      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a33      	ldr	r2, [pc, #204]	; (8003388 <HAL_DMA_Init+0x1c4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d03b      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <HAL_DMA_Init+0x1c8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d036      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a30      	ldr	r2, [pc, #192]	; (8003390 <HAL_DMA_Init+0x1cc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d031      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <HAL_DMA_Init+0x1d0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02c      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2d      	ldr	r2, [pc, #180]	; (8003398 <HAL_DMA_Init+0x1d4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d027      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2b      	ldr	r2, [pc, #172]	; (800339c <HAL_DMA_Init+0x1d8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d022      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <HAL_DMA_Init+0x1dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d01d      	beq.n	8003338 <HAL_DMA_Init+0x174>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <HAL_DMA_Init+0x1e0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d018      	beq.n	8003338 <HAL_DMA_Init+0x174>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_DMA_Init+0x1e4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <HAL_DMA_Init+0x174>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_DMA_Init+0x1e8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00e      	beq.n	8003338 <HAL_DMA_Init+0x174>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_DMA_Init+0x1ec>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d009      	beq.n	8003338 <HAL_DMA_Init+0x174>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_DMA_Init+0x1f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_DMA_Init+0x174>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <HAL_DMA_Init+0x1f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d108      	bne.n	800334a <HAL_DMA_Init+0x186>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e007      	b.n	800335a <HAL_DMA_Init+0x196>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800335a:	e02f      	b.n	80033bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335c:	f7fe fda0 	bl	8001ea0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b05      	cmp	r3, #5
 8003368:	d928      	bls.n	80033bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e246      	b.n	800380a <HAL_DMA_Init+0x646>
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1c8      	bne.n	800335c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4b83      	ldr	r3, [pc, #524]	; (80035e4 <HAL_DMA_Init+0x420>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b04      	cmp	r3, #4
 800340e:	d107      	bne.n	8003420 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	4313      	orrs	r3, r2
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003420:	4b71      	ldr	r3, [pc, #452]	; (80035e8 <HAL_DMA_Init+0x424>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b71      	ldr	r3, [pc, #452]	; (80035ec <HAL_DMA_Init+0x428>)
 8003426:	4013      	ands	r3, r2
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342c:	d328      	bcc.n	8003480 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b28      	cmp	r3, #40	; 0x28
 8003434:	d903      	bls.n	800343e <HAL_DMA_Init+0x27a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b2e      	cmp	r3, #46	; 0x2e
 800343c:	d917      	bls.n	800346e <HAL_DMA_Init+0x2aa>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b3e      	cmp	r3, #62	; 0x3e
 8003444:	d903      	bls.n	800344e <HAL_DMA_Init+0x28a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b42      	cmp	r3, #66	; 0x42
 800344c:	d90f      	bls.n	800346e <HAL_DMA_Init+0x2aa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b46      	cmp	r3, #70	; 0x46
 8003454:	d903      	bls.n	800345e <HAL_DMA_Init+0x29a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b48      	cmp	r3, #72	; 0x48
 800345c:	d907      	bls.n	800346e <HAL_DMA_Init+0x2aa>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b4e      	cmp	r3, #78	; 0x4e
 8003464:	d905      	bls.n	8003472 <HAL_DMA_Init+0x2ae>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b52      	cmp	r3, #82	; 0x52
 800346c:	d801      	bhi.n	8003472 <HAL_DMA_Init+0x2ae>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_DMA_Init+0x2b0>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d117      	bne.n	80034da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 ff1d 	bl	80052fc <DMA_CheckFifoParam>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2240      	movs	r2, #64	; 0x40
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e197      	b.n	800380a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f001 fe58 	bl	8005198 <DMA_CalcBaseAndBitshift>
 80034e8:	4603      	mov	r3, r0
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	223f      	movs	r2, #63	; 0x3f
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e0cd      	b.n	800369a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_DMA_Init+0x42c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Init+0x38a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a39      	ldr	r2, [pc, #228]	; (80035f4 <HAL_DMA_Init+0x430>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_Init+0x38a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <HAL_DMA_Init+0x434>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_Init+0x38a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a36      	ldr	r2, [pc, #216]	; (80035fc <HAL_DMA_Init+0x438>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_Init+0x38a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a35      	ldr	r2, [pc, #212]	; (8003600 <HAL_DMA_Init+0x43c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Init+0x38a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a33      	ldr	r2, [pc, #204]	; (8003604 <HAL_DMA_Init+0x440>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_Init+0x38a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a32      	ldr	r2, [pc, #200]	; (8003608 <HAL_DMA_Init+0x444>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_Init+0x38a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_DMA_Init+0x448>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_DMA_Init+0x38e>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_DMA_Init+0x390>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8097 	beq.w	8003688 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <HAL_DMA_Init+0x42c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d021      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <HAL_DMA_Init+0x430>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01c      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_DMA_Init+0x434>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d017      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_DMA_Init+0x438>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d012      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_DMA_Init+0x43c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00d      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_DMA_Init+0x440>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d008      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <HAL_DMA_Init+0x444>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_Init+0x3e4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <HAL_DMA_Init+0x448>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_DMA_Init+0x44c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d020      	beq.n	8003614 <HAL_DMA_Init+0x450>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b80      	cmp	r3, #128	; 0x80
 80035d8:	d102      	bne.n	80035e0 <HAL_DMA_Init+0x41c>
 80035da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035de:	e01a      	b.n	8003616 <HAL_DMA_Init+0x452>
 80035e0:	2300      	movs	r3, #0
 80035e2:	e018      	b.n	8003616 <HAL_DMA_Init+0x452>
 80035e4:	fe10803f 	.word	0xfe10803f
 80035e8:	5c001000 	.word	0x5c001000
 80035ec:	ffff0000 	.word	0xffff0000
 80035f0:	58025408 	.word	0x58025408
 80035f4:	5802541c 	.word	0x5802541c
 80035f8:	58025430 	.word	0x58025430
 80035fc:	58025444 	.word	0x58025444
 8003600:	58025458 	.word	0x58025458
 8003604:	5802546c 	.word	0x5802546c
 8003608:	58025480 	.word	0x58025480
 800360c:	58025494 	.word	0x58025494
 8003610:	fffe000f 	.word	0xfffe000f
 8003614:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68d2      	ldr	r2, [r2, #12]
 800361a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800361c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800362c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800363c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003644:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <HAL_DMA_Init+0x650>)
 800365c:	4413      	add	r3, r2
 800365e:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_DMA_Init+0x654>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 fd93 	bl	8005198 <DMA_CalcBaseAndBitshift>
 8003672:	4603      	mov	r3, r0
 8003674:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2201      	movs	r2, #1
 8003680:	409a      	lsls	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	e008      	b.n	800369a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2240      	movs	r2, #64	; 0x40
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0b7      	b.n	800380a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5f      	ldr	r2, [pc, #380]	; (800381c <HAL_DMA_Init+0x658>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d072      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_DMA_Init+0x65c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d06d      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	; (8003824 <HAL_DMA_Init+0x660>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d068      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5a      	ldr	r2, [pc, #360]	; (8003828 <HAL_DMA_Init+0x664>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d063      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a59      	ldr	r2, [pc, #356]	; (800382c <HAL_DMA_Init+0x668>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d05e      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a57      	ldr	r2, [pc, #348]	; (8003830 <HAL_DMA_Init+0x66c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d059      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_DMA_Init+0x670>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d054      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a54      	ldr	r2, [pc, #336]	; (8003838 <HAL_DMA_Init+0x674>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04f      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a53      	ldr	r2, [pc, #332]	; (800383c <HAL_DMA_Init+0x678>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04a      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_DMA_Init+0x67c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d045      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_DMA_Init+0x680>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <HAL_DMA_Init+0x684>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d03b      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4d      	ldr	r2, [pc, #308]	; (800384c <HAL_DMA_Init+0x688>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_DMA_Init+0x68c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4a      	ldr	r2, [pc, #296]	; (8003854 <HAL_DMA_Init+0x690>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d02c      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a48      	ldr	r2, [pc, #288]	; (8003858 <HAL_DMA_Init+0x694>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a47      	ldr	r2, [pc, #284]	; (800385c <HAL_DMA_Init+0x698>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a45      	ldr	r2, [pc, #276]	; (8003860 <HAL_DMA_Init+0x69c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a44      	ldr	r2, [pc, #272]	; (8003864 <HAL_DMA_Init+0x6a0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_DMA_Init+0x6a4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a41      	ldr	r2, [pc, #260]	; (800386c <HAL_DMA_Init+0x6a8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3f      	ldr	r2, [pc, #252]	; (8003870 <HAL_DMA_Init+0x6ac>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3e      	ldr	r2, [pc, #248]	; (8003874 <HAL_DMA_Init+0x6b0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_DMA_Init+0x5c6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3c      	ldr	r2, [pc, #240]	; (8003878 <HAL_DMA_Init+0x6b4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_DMA_Init+0x5ca>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_DMA_Init+0x5cc>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d032      	beq.n	80037fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f001 fe2d 	bl	80053f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d102      	bne.n	80037a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_DMA_Init+0x624>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d80c      	bhi.n	80037e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f001 feaa 	bl	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e008      	b.n	80037fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	a7fdabf8 	.word	0xa7fdabf8
 8003818:	cccccccd 	.word	0xcccccccd
 800381c:	40020010 	.word	0x40020010
 8003820:	40020028 	.word	0x40020028
 8003824:	40020040 	.word	0x40020040
 8003828:	40020058 	.word	0x40020058
 800382c:	40020070 	.word	0x40020070
 8003830:	40020088 	.word	0x40020088
 8003834:	400200a0 	.word	0x400200a0
 8003838:	400200b8 	.word	0x400200b8
 800383c:	40020410 	.word	0x40020410
 8003840:	40020428 	.word	0x40020428
 8003844:	40020440 	.word	0x40020440
 8003848:	40020458 	.word	0x40020458
 800384c:	40020470 	.word	0x40020470
 8003850:	40020488 	.word	0x40020488
 8003854:	400204a0 	.word	0x400204a0
 8003858:	400204b8 	.word	0x400204b8
 800385c:	58025408 	.word	0x58025408
 8003860:	5802541c 	.word	0x5802541c
 8003864:	58025430 	.word	0x58025430
 8003868:	58025444 	.word	0x58025444
 800386c:	58025458 	.word	0x58025458
 8003870:	5802546c 	.word	0x5802546c
 8003874:	58025480 	.word	0x58025480
 8003878:	58025494 	.word	0x58025494

0800387c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003884:	f7fe fb0c 	bl	8001ea0 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e2dc      	b.n	8003e4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d008      	beq.n	80038b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e2cd      	b.n	8003e4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a76      	ldr	r2, [pc, #472]	; (8003a90 <HAL_DMA_Abort+0x214>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d04a      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a74      	ldr	r2, [pc, #464]	; (8003a94 <HAL_DMA_Abort+0x218>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d045      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <HAL_DMA_Abort+0x21c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d040      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <HAL_DMA_Abort+0x220>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d03b      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a70      	ldr	r2, [pc, #448]	; (8003aa0 <HAL_DMA_Abort+0x224>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d036      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <HAL_DMA_Abort+0x228>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d031      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6d      	ldr	r2, [pc, #436]	; (8003aa8 <HAL_DMA_Abort+0x22c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d02c      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6b      	ldr	r2, [pc, #428]	; (8003aac <HAL_DMA_Abort+0x230>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d027      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <HAL_DMA_Abort+0x234>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a68      	ldr	r2, [pc, #416]	; (8003ab4 <HAL_DMA_Abort+0x238>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01d      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <HAL_DMA_Abort+0x23c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a65      	ldr	r2, [pc, #404]	; (8003abc <HAL_DMA_Abort+0x240>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a64      	ldr	r2, [pc, #400]	; (8003ac0 <HAL_DMA_Abort+0x244>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a62      	ldr	r2, [pc, #392]	; (8003ac4 <HAL_DMA_Abort+0x248>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a61      	ldr	r2, [pc, #388]	; (8003ac8 <HAL_DMA_Abort+0x24c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_DMA_Abort+0xd6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a5f      	ldr	r2, [pc, #380]	; (8003acc <HAL_DMA_Abort+0x250>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_DMA_Abort+0xda>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_DMA_Abort+0xdc>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 021e 	bic.w	r2, r2, #30
 800396a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e00a      	b.n	800399a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020e 	bic.w	r2, r2, #14
 8003992:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_DMA_Abort+0x214>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d072      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3a      	ldr	r2, [pc, #232]	; (8003a94 <HAL_DMA_Abort+0x218>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d06d      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <HAL_DMA_Abort+0x21c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d068      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <HAL_DMA_Abort+0x220>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d063      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a36      	ldr	r2, [pc, #216]	; (8003aa0 <HAL_DMA_Abort+0x224>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d05e      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_DMA_Abort+0x228>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d059      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a33      	ldr	r2, [pc, #204]	; (8003aa8 <HAL_DMA_Abort+0x22c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d054      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a31      	ldr	r2, [pc, #196]	; (8003aac <HAL_DMA_Abort+0x230>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04f      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <HAL_DMA_Abort+0x234>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2e      	ldr	r2, [pc, #184]	; (8003ab4 <HAL_DMA_Abort+0x238>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_DMA_Abort+0x23c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_DMA_Abort+0x240>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_DMA_Abort+0x244>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <HAL_DMA_Abort+0x248>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_DMA_Abort+0x24c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <HAL_DMA_Abort+0x250>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_DMA_Abort+0x254>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_DMA_Abort+0x258>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_Abort+0x25c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_DMA_Abort+0x260>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_Abort+0x264>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_DMA_Abort+0x268>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_Abort+0x26c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_Abort+0x20e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_DMA_Abort+0x270>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d132      	bne.n	8003af0 <HAL_DMA_Abort+0x274>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e031      	b.n	8003af2 <HAL_DMA_Abort+0x276>
 8003a8e:	bf00      	nop
 8003a90:	40020010 	.word	0x40020010
 8003a94:	40020028 	.word	0x40020028
 8003a98:	40020040 	.word	0x40020040
 8003a9c:	40020058 	.word	0x40020058
 8003aa0:	40020070 	.word	0x40020070
 8003aa4:	40020088 	.word	0x40020088
 8003aa8:	400200a0 	.word	0x400200a0
 8003aac:	400200b8 	.word	0x400200b8
 8003ab0:	40020410 	.word	0x40020410
 8003ab4:	40020428 	.word	0x40020428
 8003ab8:	40020440 	.word	0x40020440
 8003abc:	40020458 	.word	0x40020458
 8003ac0:	40020470 	.word	0x40020470
 8003ac4:	40020488 	.word	0x40020488
 8003ac8:	400204a0 	.word	0x400204a0
 8003acc:	400204b8 	.word	0x400204b8
 8003ad0:	58025408 	.word	0x58025408
 8003ad4:	5802541c 	.word	0x5802541c
 8003ad8:	58025430 	.word	0x58025430
 8003adc:	58025444 	.word	0x58025444
 8003ae0:	58025458 	.word	0x58025458
 8003ae4:	5802546c 	.word	0x5802546c
 8003ae8:	58025480 	.word	0x58025480
 8003aec:	58025494 	.word	0x58025494
 8003af0:	2300      	movs	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6d      	ldr	r2, [pc, #436]	; (8003cc0 <HAL_DMA_Abort+0x444>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04a      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6b      	ldr	r2, [pc, #428]	; (8003cc4 <HAL_DMA_Abort+0x448>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d045      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_DMA_Abort+0x44c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	; (8003ccc <HAL_DMA_Abort+0x450>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_DMA_Abort+0x454>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d036      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_DMA_Abort+0x458>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a64      	ldr	r2, [pc, #400]	; (8003cd8 <HAL_DMA_Abort+0x45c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02c      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a62      	ldr	r2, [pc, #392]	; (8003cdc <HAL_DMA_Abort+0x460>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d027      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a61      	ldr	r2, [pc, #388]	; (8003ce0 <HAL_DMA_Abort+0x464>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5f      	ldr	r2, [pc, #380]	; (8003ce4 <HAL_DMA_Abort+0x468>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a5e      	ldr	r2, [pc, #376]	; (8003ce8 <HAL_DMA_Abort+0x46c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <HAL_DMA_Abort+0x470>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5b      	ldr	r2, [pc, #364]	; (8003cf0 <HAL_DMA_Abort+0x474>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a59      	ldr	r2, [pc, #356]	; (8003cf4 <HAL_DMA_Abort+0x478>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_DMA_Abort+0x47c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_Abort+0x32a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a56      	ldr	r2, [pc, #344]	; (8003cfc <HAL_DMA_Abort+0x480>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <HAL_DMA_Abort+0x33c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e007      	b.n	8003bc8 <HAL_DMA_Abort+0x34c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bc8:	e013      	b.n	8003bf2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bca:	f7fe f969 	bl	8001ea0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d90c      	bls.n	8003bf2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e12d      	b.n	8003e4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2f      	ldr	r2, [pc, #188]	; (8003cc0 <HAL_DMA_Abort+0x444>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d04a      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <HAL_DMA_Abort+0x448>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d045      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <HAL_DMA_Abort+0x44c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d040      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_DMA_Abort+0x450>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d03b      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_DMA_Abort+0x454>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d036      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_DMA_Abort+0x458>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d031      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_DMA_Abort+0x45c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d02c      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_DMA_Abort+0x460>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d027      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_DMA_Abort+0x464>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d022      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <HAL_DMA_Abort+0x468>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01d      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <HAL_DMA_Abort+0x46c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d018      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_DMA_Abort+0x470>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_DMA_Abort+0x474>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_DMA_Abort+0x478>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_DMA_Abort+0x47c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_DMA_Abort+0x422>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_DMA_Abort+0x480>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DMA_Abort+0x426>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_DMA_Abort+0x428>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02b      	beq.n	8003d00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	223f      	movs	r2, #63	; 0x3f
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	e02a      	b.n	8003d16 <HAL_DMA_Abort+0x49a>
 8003cc0:	40020010 	.word	0x40020010
 8003cc4:	40020028 	.word	0x40020028
 8003cc8:	40020040 	.word	0x40020040
 8003ccc:	40020058 	.word	0x40020058
 8003cd0:	40020070 	.word	0x40020070
 8003cd4:	40020088 	.word	0x40020088
 8003cd8:	400200a0 	.word	0x400200a0
 8003cdc:	400200b8 	.word	0x400200b8
 8003ce0:	40020410 	.word	0x40020410
 8003ce4:	40020428 	.word	0x40020428
 8003ce8:	40020440 	.word	0x40020440
 8003cec:	40020458 	.word	0x40020458
 8003cf0:	40020470 	.word	0x40020470
 8003cf4:	40020488 	.word	0x40020488
 8003cf8:	400204a0 	.word	0x400204a0
 8003cfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2201      	movs	r2, #1
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a4f      	ldr	r2, [pc, #316]	; (8003e58 <HAL_DMA_Abort+0x5dc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d072      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a4d      	ldr	r2, [pc, #308]	; (8003e5c <HAL_DMA_Abort+0x5e0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d06d      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4c      	ldr	r2, [pc, #304]	; (8003e60 <HAL_DMA_Abort+0x5e4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d068      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <HAL_DMA_Abort+0x5e8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d063      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a49      	ldr	r2, [pc, #292]	; (8003e68 <HAL_DMA_Abort+0x5ec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d05e      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a47      	ldr	r2, [pc, #284]	; (8003e6c <HAL_DMA_Abort+0x5f0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d059      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_DMA_Abort+0x5f4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d054      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a44      	ldr	r2, [pc, #272]	; (8003e74 <HAL_DMA_Abort+0x5f8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04f      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a43      	ldr	r2, [pc, #268]	; (8003e78 <HAL_DMA_Abort+0x5fc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04a      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <HAL_DMA_Abort+0x600>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d045      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <HAL_DMA_Abort+0x604>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a3e      	ldr	r2, [pc, #248]	; (8003e84 <HAL_DMA_Abort+0x608>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3d      	ldr	r2, [pc, #244]	; (8003e88 <HAL_DMA_Abort+0x60c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <HAL_DMA_Abort+0x610>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <HAL_DMA_Abort+0x614>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d02c      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <HAL_DMA_Abort+0x618>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a37      	ldr	r2, [pc, #220]	; (8003e98 <HAL_DMA_Abort+0x61c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a35      	ldr	r2, [pc, #212]	; (8003e9c <HAL_DMA_Abort+0x620>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a34      	ldr	r2, [pc, #208]	; (8003ea0 <HAL_DMA_Abort+0x624>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a32      	ldr	r2, [pc, #200]	; (8003ea4 <HAL_DMA_Abort+0x628>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a31      	ldr	r2, [pc, #196]	; (8003ea8 <HAL_DMA_Abort+0x62c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2f      	ldr	r2, [pc, #188]	; (8003eac <HAL_DMA_Abort+0x630>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2e      	ldr	r2, [pc, #184]	; (8003eb0 <HAL_DMA_Abort+0x634>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_Abort+0x58a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <HAL_DMA_Abort+0x638>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Abort+0x58e>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_DMA_Abort+0x590>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40020010 	.word	0x40020010
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020040 	.word	0x40020040
 8003e64:	40020058 	.word	0x40020058
 8003e68:	40020070 	.word	0x40020070
 8003e6c:	40020088 	.word	0x40020088
 8003e70:	400200a0 	.word	0x400200a0
 8003e74:	400200b8 	.word	0x400200b8
 8003e78:	40020410 	.word	0x40020410
 8003e7c:	40020428 	.word	0x40020428
 8003e80:	40020440 	.word	0x40020440
 8003e84:	40020458 	.word	0x40020458
 8003e88:	40020470 	.word	0x40020470
 8003e8c:	40020488 	.word	0x40020488
 8003e90:	400204a0 	.word	0x400204a0
 8003e94:	400204b8 	.word	0x400204b8
 8003e98:	58025408 	.word	0x58025408
 8003e9c:	5802541c 	.word	0x5802541c
 8003ea0:	58025430 	.word	0x58025430
 8003ea4:	58025444 	.word	0x58025444
 8003ea8:	58025458 	.word	0x58025458
 8003eac:	5802546c 	.word	0x5802546c
 8003eb0:	58025480 	.word	0x58025480
 8003eb4:	58025494 	.word	0x58025494

08003eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e237      	b.n	800433a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e22c      	b.n	800433a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <HAL_DMA_Abort_IT+0x1a0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d04a      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5b      	ldr	r2, [pc, #364]	; (800405c <HAL_DMA_Abort_IT+0x1a4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d045      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a59      	ldr	r2, [pc, #356]	; (8004060 <HAL_DMA_Abort_IT+0x1a8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d040      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_DMA_Abort_IT+0x1ac>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d03b      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <HAL_DMA_Abort_IT+0x1b0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d036      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a55      	ldr	r2, [pc, #340]	; (800406c <HAL_DMA_Abort_IT+0x1b4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d031      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a53      	ldr	r2, [pc, #332]	; (8004070 <HAL_DMA_Abort_IT+0x1b8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d02c      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a52      	ldr	r2, [pc, #328]	; (8004074 <HAL_DMA_Abort_IT+0x1bc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d027      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a50      	ldr	r2, [pc, #320]	; (8004078 <HAL_DMA_Abort_IT+0x1c0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d022      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a4f      	ldr	r2, [pc, #316]	; (800407c <HAL_DMA_Abort_IT+0x1c4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d01d      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <HAL_DMA_Abort_IT+0x1c8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d018      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4c      	ldr	r2, [pc, #304]	; (8004084 <HAL_DMA_Abort_IT+0x1cc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4a      	ldr	r2, [pc, #296]	; (8004088 <HAL_DMA_Abort_IT+0x1d0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00e      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a49      	ldr	r2, [pc, #292]	; (800408c <HAL_DMA_Abort_IT+0x1d4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a47      	ldr	r2, [pc, #284]	; (8004090 <HAL_DMA_Abort_IT+0x1d8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a46      	ldr	r2, [pc, #280]	; (8004094 <HAL_DMA_Abort_IT+0x1dc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMA_Abort_IT+0xcc>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_DMA_Abort_IT+0xce>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8086 	beq.w	8004098 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <HAL_DMA_Abort_IT+0x1a0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04a      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2e      	ldr	r2, [pc, #184]	; (800405c <HAL_DMA_Abort_IT+0x1a4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d045      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <HAL_DMA_Abort_IT+0x1a8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d040      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <HAL_DMA_Abort_IT+0x1ac>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d03b      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a29      	ldr	r2, [pc, #164]	; (8004068 <HAL_DMA_Abort_IT+0x1b0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d036      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a28      	ldr	r2, [pc, #160]	; (800406c <HAL_DMA_Abort_IT+0x1b4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a26      	ldr	r2, [pc, #152]	; (8004070 <HAL_DMA_Abort_IT+0x1b8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02c      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <HAL_DMA_Abort_IT+0x1bc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d027      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a23      	ldr	r2, [pc, #140]	; (8004078 <HAL_DMA_Abort_IT+0x1c0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d022      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_DMA_Abort_IT+0x1c4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01d      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <HAL_DMA_Abort_IT+0x1c8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d018      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <HAL_DMA_Abort_IT+0x1cc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_DMA_Abort_IT+0x1d0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_DMA_Abort_IT+0x1d4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_DMA_Abort_IT+0x1d8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_DMA_Abort_IT+0x17c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a19      	ldr	r2, [pc, #100]	; (8004094 <HAL_DMA_Abort_IT+0x1dc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <HAL_DMA_Abort_IT+0x18e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e178      	b.n	8004338 <HAL_DMA_Abort_IT+0x480>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e16f      	b.n	8004338 <HAL_DMA_Abort_IT+0x480>
 8004058:	40020010 	.word	0x40020010
 800405c:	40020028 	.word	0x40020028
 8004060:	40020040 	.word	0x40020040
 8004064:	40020058 	.word	0x40020058
 8004068:	40020070 	.word	0x40020070
 800406c:	40020088 	.word	0x40020088
 8004070:	400200a0 	.word	0x400200a0
 8004074:	400200b8 	.word	0x400200b8
 8004078:	40020410 	.word	0x40020410
 800407c:	40020428 	.word	0x40020428
 8004080:	40020440 	.word	0x40020440
 8004084:	40020458 	.word	0x40020458
 8004088:	40020470 	.word	0x40020470
 800408c:	40020488 	.word	0x40020488
 8004090:	400204a0 	.word	0x400204a0
 8004094:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 020e 	bic.w	r2, r2, #14
 80040a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6c      	ldr	r2, [pc, #432]	; (8004260 <HAL_DMA_Abort_IT+0x3a8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6b      	ldr	r2, [pc, #428]	; (8004264 <HAL_DMA_Abort_IT+0x3ac>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a69      	ldr	r2, [pc, #420]	; (8004268 <HAL_DMA_Abort_IT+0x3b0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a68      	ldr	r2, [pc, #416]	; (800426c <HAL_DMA_Abort_IT+0x3b4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a66      	ldr	r2, [pc, #408]	; (8004270 <HAL_DMA_Abort_IT+0x3b8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a65      	ldr	r2, [pc, #404]	; (8004274 <HAL_DMA_Abort_IT+0x3bc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a63      	ldr	r2, [pc, #396]	; (8004278 <HAL_DMA_Abort_IT+0x3c0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a62      	ldr	r2, [pc, #392]	; (800427c <HAL_DMA_Abort_IT+0x3c4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a60      	ldr	r2, [pc, #384]	; (8004280 <HAL_DMA_Abort_IT+0x3c8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a5f      	ldr	r2, [pc, #380]	; (8004284 <HAL_DMA_Abort_IT+0x3cc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5d      	ldr	r2, [pc, #372]	; (8004288 <HAL_DMA_Abort_IT+0x3d0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5c      	ldr	r2, [pc, #368]	; (800428c <HAL_DMA_Abort_IT+0x3d4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5a      	ldr	r2, [pc, #360]	; (8004290 <HAL_DMA_Abort_IT+0x3d8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a59      	ldr	r2, [pc, #356]	; (8004294 <HAL_DMA_Abort_IT+0x3dc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a57      	ldr	r2, [pc, #348]	; (8004298 <HAL_DMA_Abort_IT+0x3e0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_Abort_IT+0x290>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a56      	ldr	r2, [pc, #344]	; (800429c <HAL_DMA_Abort_IT+0x3e4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <HAL_DMA_Abort_IT+0x2a2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e007      	b.n	800416a <HAL_DMA_Abort_IT+0x2b2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <HAL_DMA_Abort_IT+0x3a8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d072      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3a      	ldr	r2, [pc, #232]	; (8004264 <HAL_DMA_Abort_IT+0x3ac>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d06d      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a39      	ldr	r2, [pc, #228]	; (8004268 <HAL_DMA_Abort_IT+0x3b0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d068      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a37      	ldr	r2, [pc, #220]	; (800426c <HAL_DMA_Abort_IT+0x3b4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d063      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a36      	ldr	r2, [pc, #216]	; (8004270 <HAL_DMA_Abort_IT+0x3b8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d05e      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a34      	ldr	r2, [pc, #208]	; (8004274 <HAL_DMA_Abort_IT+0x3bc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d059      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_DMA_Abort_IT+0x3c0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d054      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_DMA_Abort_IT+0x3c4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d04f      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a30      	ldr	r2, [pc, #192]	; (8004280 <HAL_DMA_Abort_IT+0x3c8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04a      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2e      	ldr	r2, [pc, #184]	; (8004284 <HAL_DMA_Abort_IT+0x3cc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d045      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <HAL_DMA_Abort_IT+0x3d0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d040      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <HAL_DMA_Abort_IT+0x3d4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d03b      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <HAL_DMA_Abort_IT+0x3d8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a28      	ldr	r2, [pc, #160]	; (8004294 <HAL_DMA_Abort_IT+0x3dc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a27      	ldr	r2, [pc, #156]	; (8004298 <HAL_DMA_Abort_IT+0x3e0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02c      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <HAL_DMA_Abort_IT+0x3e4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d027      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <HAL_DMA_Abort_IT+0x3e8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <HAL_DMA_Abort_IT+0x3ec>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <HAL_DMA_Abort_IT+0x3f0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <HAL_DMA_Abort_IT+0x3f4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_DMA_Abort_IT+0x3f8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_DMA_Abort_IT+0x3fc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_DMA_Abort_IT+0x400>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_DMA_Abort_IT+0x3a2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <HAL_DMA_Abort_IT+0x404>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d132      	bne.n	80042c0 <HAL_DMA_Abort_IT+0x408>
 800425a:	2301      	movs	r3, #1
 800425c:	e031      	b.n	80042c2 <HAL_DMA_Abort_IT+0x40a>
 800425e:	bf00      	nop
 8004260:	40020010 	.word	0x40020010
 8004264:	40020028 	.word	0x40020028
 8004268:	40020040 	.word	0x40020040
 800426c:	40020058 	.word	0x40020058
 8004270:	40020070 	.word	0x40020070
 8004274:	40020088 	.word	0x40020088
 8004278:	400200a0 	.word	0x400200a0
 800427c:	400200b8 	.word	0x400200b8
 8004280:	40020410 	.word	0x40020410
 8004284:	40020428 	.word	0x40020428
 8004288:	40020440 	.word	0x40020440
 800428c:	40020458 	.word	0x40020458
 8004290:	40020470 	.word	0x40020470
 8004294:	40020488 	.word	0x40020488
 8004298:	400204a0 	.word	0x400204a0
 800429c:	400204b8 	.word	0x400204b8
 80042a0:	58025408 	.word	0x58025408
 80042a4:	5802541c 	.word	0x5802541c
 80042a8:	58025430 	.word	0x58025430
 80042ac:	58025444 	.word	0x58025444
 80042b0:	58025458 	.word	0x58025458
 80042b4:	5802546c 	.word	0x5802546c
 80042b8:	58025480 	.word	0x58025480
 80042bc:	58025494 	.word	0x58025494
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d028      	beq.n	8004318 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800430c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004316:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop

08004344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004350:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <HAL_DMA_IRQHandler+0x1ac>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a67      	ldr	r2, [pc, #412]	; (80044f4 <HAL_DMA_IRQHandler+0x1b0>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a9b      	lsrs	r3, r3, #10
 800435c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5f      	ldr	r2, [pc, #380]	; (80044f8 <HAL_DMA_IRQHandler+0x1b4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d04a      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <HAL_DMA_IRQHandler+0x1b8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d045      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5c      	ldr	r2, [pc, #368]	; (8004500 <HAL_DMA_IRQHandler+0x1bc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d040      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5a      	ldr	r2, [pc, #360]	; (8004504 <HAL_DMA_IRQHandler+0x1c0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03b      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a59      	ldr	r2, [pc, #356]	; (8004508 <HAL_DMA_IRQHandler+0x1c4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d036      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a57      	ldr	r2, [pc, #348]	; (800450c <HAL_DMA_IRQHandler+0x1c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_DMA_IRQHandler+0x1cc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d02c      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a54      	ldr	r2, [pc, #336]	; (8004514 <HAL_DMA_IRQHandler+0x1d0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d027      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a53      	ldr	r2, [pc, #332]	; (8004518 <HAL_DMA_IRQHandler+0x1d4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a51      	ldr	r2, [pc, #324]	; (800451c <HAL_DMA_IRQHandler+0x1d8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_DMA_IRQHandler+0x1dc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a4e      	ldr	r2, [pc, #312]	; (8004524 <HAL_DMA_IRQHandler+0x1e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4d      	ldr	r2, [pc, #308]	; (8004528 <HAL_DMA_IRQHandler+0x1e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_DMA_IRQHandler+0x1e8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <HAL_DMA_IRQHandler+0x1ec>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_DMA_IRQHandler+0xd2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a48      	ldr	r2, [pc, #288]	; (8004534 <HAL_DMA_IRQHandler+0x1f0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_DMA_IRQHandler+0xd6>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_DMA_IRQHandler+0xd8>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 842b 	beq.w	8004c78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2208      	movs	r2, #8
 800442c:	409a      	lsls	r2, r3
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a2 	beq.w	800457c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_DMA_IRQHandler+0x1b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d04a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_DMA_IRQHandler+0x1b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d045      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <HAL_DMA_IRQHandler+0x1bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d040      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <HAL_DMA_IRQHandler+0x1c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d03b      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_DMA_IRQHandler+0x1c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d036      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <HAL_DMA_IRQHandler+0x1c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d031      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_DMA_IRQHandler+0x1cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02c      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a24      	ldr	r2, [pc, #144]	; (8004514 <HAL_DMA_IRQHandler+0x1d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d027      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_DMA_IRQHandler+0x1d4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	; (800451c <HAL_DMA_IRQHandler+0x1d8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_DMA_IRQHandler+0x1dc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_DMA_IRQHandler+0x1e0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_DMA_IRQHandler+0x1e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_DMA_IRQHandler+0x1e8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_DMA_IRQHandler+0x1ec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x194>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_DMA_IRQHandler+0x1f0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d12f      	bne.n	8004538 <HAL_DMA_IRQHandler+0x1f4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e02e      	b.n	800454c <HAL_DMA_IRQHandler+0x208>
 80044ee:	bf00      	nop
 80044f0:	24000000 	.word	0x24000000
 80044f4:	1b4e81b5 	.word	0x1b4e81b5
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2208      	movs	r2, #8
 800456a:	409a      	lsls	r2, r3
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d06e      	beq.n	8004670 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <HAL_DMA_IRQHandler+0x3f8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d04a      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a67      	ldr	r2, [pc, #412]	; (8004740 <HAL_DMA_IRQHandler+0x3fc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d045      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a66      	ldr	r2, [pc, #408]	; (8004744 <HAL_DMA_IRQHandler+0x400>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d040      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a64      	ldr	r2, [pc, #400]	; (8004748 <HAL_DMA_IRQHandler+0x404>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d03b      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a63      	ldr	r2, [pc, #396]	; (800474c <HAL_DMA_IRQHandler+0x408>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d036      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_DMA_IRQHandler+0x40c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d031      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a60      	ldr	r2, [pc, #384]	; (8004754 <HAL_DMA_IRQHandler+0x410>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d02c      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5e      	ldr	r2, [pc, #376]	; (8004758 <HAL_DMA_IRQHandler+0x414>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d027      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5d      	ldr	r2, [pc, #372]	; (800475c <HAL_DMA_IRQHandler+0x418>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5b      	ldr	r2, [pc, #364]	; (8004760 <HAL_DMA_IRQHandler+0x41c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5a      	ldr	r2, [pc, #360]	; (8004764 <HAL_DMA_IRQHandler+0x420>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a58      	ldr	r2, [pc, #352]	; (8004768 <HAL_DMA_IRQHandler+0x424>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a57      	ldr	r2, [pc, #348]	; (800476c <HAL_DMA_IRQHandler+0x428>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_DMA_IRQHandler+0x42c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a54      	ldr	r2, [pc, #336]	; (8004774 <HAL_DMA_IRQHandler+0x430>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_DMA_IRQHandler+0x2ee>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_DMA_IRQHandler+0x434>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10a      	bne.n	8004648 <HAL_DMA_IRQHandler+0x304>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e003      	b.n	8004650 <HAL_DMA_IRQHandler+0x30c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2204      	movs	r2, #4
 800467a:	409a      	lsls	r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 808f 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2c      	ldr	r2, [pc, #176]	; (800473c <HAL_DMA_IRQHandler+0x3f8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <HAL_DMA_IRQHandler+0x3fc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a29      	ldr	r2, [pc, #164]	; (8004744 <HAL_DMA_IRQHandler+0x400>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_DMA_IRQHandler+0x404>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_DMA_IRQHandler+0x408>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <HAL_DMA_IRQHandler+0x40c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a23      	ldr	r2, [pc, #140]	; (8004754 <HAL_DMA_IRQHandler+0x410>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_DMA_IRQHandler+0x414>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <HAL_DMA_IRQHandler+0x418>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_DMA_IRQHandler+0x41c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_DMA_IRQHandler+0x420>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_DMA_IRQHandler+0x424>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_DMA_IRQHandler+0x428>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_DMA_IRQHandler+0x42c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_DMA_IRQHandler+0x430>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0x3e2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_DMA_IRQHandler+0x434>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d12a      	bne.n	800477c <HAL_DMA_IRQHandler+0x438>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e023      	b.n	8004784 <HAL_DMA_IRQHandler+0x440>
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f043 0204 	orr.w	r2, r3, #4
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2210      	movs	r2, #16
 80047ae:	409a      	lsls	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a6 	beq.w	8004906 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a85      	ldr	r2, [pc, #532]	; (80049d4 <HAL_DMA_IRQHandler+0x690>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d04a      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a83      	ldr	r2, [pc, #524]	; (80049d8 <HAL_DMA_IRQHandler+0x694>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d045      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a82      	ldr	r2, [pc, #520]	; (80049dc <HAL_DMA_IRQHandler+0x698>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d040      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a80      	ldr	r2, [pc, #512]	; (80049e0 <HAL_DMA_IRQHandler+0x69c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7f      	ldr	r2, [pc, #508]	; (80049e4 <HAL_DMA_IRQHandler+0x6a0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d036      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7d      	ldr	r2, [pc, #500]	; (80049e8 <HAL_DMA_IRQHandler+0x6a4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d031      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7c      	ldr	r2, [pc, #496]	; (80049ec <HAL_DMA_IRQHandler+0x6a8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d02c      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7a      	ldr	r2, [pc, #488]	; (80049f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a77      	ldr	r2, [pc, #476]	; (80049f8 <HAL_DMA_IRQHandler+0x6b4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01d      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a76      	ldr	r2, [pc, #472]	; (80049fc <HAL_DMA_IRQHandler+0x6b8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_DMA_IRQHandler+0x6bc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a73      	ldr	r2, [pc, #460]	; (8004a04 <HAL_DMA_IRQHandler+0x6c0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a71      	ldr	r2, [pc, #452]	; (8004a08 <HAL_DMA_IRQHandler+0x6c4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a70      	ldr	r2, [pc, #448]	; (8004a0c <HAL_DMA_IRQHandler+0x6c8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_DMA_IRQHandler+0x516>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6e      	ldr	r2, [pc, #440]	; (8004a10 <HAL_DMA_IRQHandler+0x6cc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10a      	bne.n	8004870 <HAL_DMA_IRQHandler+0x52c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e009      	b.n	8004884 <HAL_DMA_IRQHandler+0x540>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03e      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2210      	movs	r2, #16
 8004892:	409a      	lsls	r2, r3
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d108      	bne.n	80048c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d024      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
 80048c4:	e01f      	b.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
 80048d6:	e016      	b.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2220      	movs	r2, #32
 8004910:	409a      	lsls	r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8110 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <HAL_DMA_IRQHandler+0x690>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_DMA_IRQHandler+0x694>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_DMA_IRQHandler+0x698>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_DMA_IRQHandler+0x69c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <HAL_DMA_IRQHandler+0x6a0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <HAL_DMA_IRQHandler+0x6a4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_DMA_IRQHandler+0x6a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <HAL_DMA_IRQHandler+0x6b4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <HAL_DMA_IRQHandler+0x6b8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_DMA_IRQHandler+0x6bc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_DMA_IRQHandler+0x6c0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <HAL_DMA_IRQHandler+0x6c4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_DMA_IRQHandler+0x6c8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_IRQHandler+0x678>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <HAL_DMA_IRQHandler+0x6cc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d12b      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x6d0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e02a      	b.n	8004a28 <HAL_DMA_IRQHandler+0x6e4>
 80049d2:	bf00      	nop
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8087 	beq.w	8004b3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2220      	movs	r2, #32
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d139      	bne.n	8004abe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0216 	bic.w	r2, r2, #22
 8004a58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <HAL_DMA_IRQHandler+0x736>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0208 	bic.w	r2, r2, #8
 8004a88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	223f      	movs	r2, #63	; 0x3f
 8004a94:	409a      	lsls	r2, r3
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 834a 	beq.w	8005148 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
          }
          return;
 8004abc:	e344      	b.n	8005148 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02c      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e027      	b.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e01e      	b.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0210 	bic.w	r2, r2, #16
 8004b1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8306 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8088 	beq.w	8004c64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <HAL_DMA_IRQHandler+0xa08>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d04a      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a79      	ldr	r2, [pc, #484]	; (8004d50 <HAL_DMA_IRQHandler+0xa0c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d045      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a77      	ldr	r2, [pc, #476]	; (8004d54 <HAL_DMA_IRQHandler+0xa10>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d040      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a76      	ldr	r2, [pc, #472]	; (8004d58 <HAL_DMA_IRQHandler+0xa14>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d03b      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a74      	ldr	r2, [pc, #464]	; (8004d5c <HAL_DMA_IRQHandler+0xa18>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d036      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a73      	ldr	r2, [pc, #460]	; (8004d60 <HAL_DMA_IRQHandler+0xa1c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d031      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a71      	ldr	r2, [pc, #452]	; (8004d64 <HAL_DMA_IRQHandler+0xa20>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02c      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a70      	ldr	r2, [pc, #448]	; (8004d68 <HAL_DMA_IRQHandler+0xa24>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d027      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a6e      	ldr	r2, [pc, #440]	; (8004d6c <HAL_DMA_IRQHandler+0xa28>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6d      	ldr	r2, [pc, #436]	; (8004d70 <HAL_DMA_IRQHandler+0xa2c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6b      	ldr	r2, [pc, #428]	; (8004d74 <HAL_DMA_IRQHandler+0xa30>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6a      	ldr	r2, [pc, #424]	; (8004d78 <HAL_DMA_IRQHandler+0xa34>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a68      	ldr	r2, [pc, #416]	; (8004d7c <HAL_DMA_IRQHandler+0xa38>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <HAL_DMA_IRQHandler+0xa3c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a65      	ldr	r2, [pc, #404]	; (8004d84 <HAL_DMA_IRQHandler+0xa40>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x8b8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a64      	ldr	r2, [pc, #400]	; (8004d88 <HAL_DMA_IRQHandler+0xa44>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x8ca>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e007      	b.n	8004c1e <HAL_DMA_IRQHandler+0x8da>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d307      	bcc.n	8004c3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f2      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x8da>
 8004c38:	e000      	b.n	8004c3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c52:	e003      	b.n	8004c5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8272 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	e26c      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a43      	ldr	r2, [pc, #268]	; (8004d8c <HAL_DMA_IRQHandler+0xa48>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a42      	ldr	r2, [pc, #264]	; (8004d90 <HAL_DMA_IRQHandler+0xa4c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <HAL_DMA_IRQHandler+0xa50>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <HAL_DMA_IRQHandler+0xa54>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <HAL_DMA_IRQHandler+0xa58>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3c      	ldr	r2, [pc, #240]	; (8004da0 <HAL_DMA_IRQHandler+0xa5c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3a      	ldr	r2, [pc, #232]	; (8004da4 <HAL_DMA_IRQHandler+0xa60>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x984>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a39      	ldr	r2, [pc, #228]	; (8004da8 <HAL_DMA_IRQHandler+0xa64>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x988>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_DMA_IRQHandler+0x98a>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 823f 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80cd 	beq.w	8004e8c <HAL_DMA_IRQHandler+0xb48>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80c7 	beq.w	8004e8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2204      	movs	r2, #4
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d049      	beq.n	8004dac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8210 	beq.w	800514c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d34:	e20a      	b.n	800514c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8206 	beq.w	800514c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d48:	e200      	b.n	800514c <HAL_DMA_IRQHandler+0xe08>
 8004d4a:	bf00      	nop
 8004d4c:	40020010 	.word	0x40020010
 8004d50:	40020028 	.word	0x40020028
 8004d54:	40020040 	.word	0x40020040
 8004d58:	40020058 	.word	0x40020058
 8004d5c:	40020070 	.word	0x40020070
 8004d60:	40020088 	.word	0x40020088
 8004d64:	400200a0 	.word	0x400200a0
 8004d68:	400200b8 	.word	0x400200b8
 8004d6c:	40020410 	.word	0x40020410
 8004d70:	40020428 	.word	0x40020428
 8004d74:	40020440 	.word	0x40020440
 8004d78:	40020458 	.word	0x40020458
 8004d7c:	40020470 	.word	0x40020470
 8004d80:	40020488 	.word	0x40020488
 8004d84:	400204a0 	.word	0x400204a0
 8004d88:	400204b8 	.word	0x400204b8
 8004d8c:	58025408 	.word	0x58025408
 8004d90:	5802541c 	.word	0x5802541c
 8004d94:	58025430 	.word	0x58025430
 8004d98:	58025444 	.word	0x58025444
 8004d9c:	58025458 	.word	0x58025458
 8004da0:	5802546c 	.word	0x5802546c
 8004da4:	58025480 	.word	0x58025480
 8004da8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d160      	bne.n	8004e78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7f      	ldr	r2, [pc, #508]	; (8004fb8 <HAL_DMA_IRQHandler+0xc74>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d04a      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a7d      	ldr	r2, [pc, #500]	; (8004fbc <HAL_DMA_IRQHandler+0xc78>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d045      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7c      	ldr	r2, [pc, #496]	; (8004fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d040      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7a      	ldr	r2, [pc, #488]	; (8004fc4 <HAL_DMA_IRQHandler+0xc80>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d03b      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a79      	ldr	r2, [pc, #484]	; (8004fc8 <HAL_DMA_IRQHandler+0xc84>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d036      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a77      	ldr	r2, [pc, #476]	; (8004fcc <HAL_DMA_IRQHandler+0xc88>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d031      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a76      	ldr	r2, [pc, #472]	; (8004fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d02c      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_DMA_IRQHandler+0xc90>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d027      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	; (8004fd8 <HAL_DMA_IRQHandler+0xc94>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a71      	ldr	r2, [pc, #452]	; (8004fdc <HAL_DMA_IRQHandler+0xc98>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a70      	ldr	r2, [pc, #448]	; (8004fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_DMA_IRQHandler+0xca0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6d      	ldr	r2, [pc, #436]	; (8004fe8 <HAL_DMA_IRQHandler+0xca4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6b      	ldr	r2, [pc, #428]	; (8004fec <HAL_DMA_IRQHandler+0xca8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a6a      	ldr	r2, [pc, #424]	; (8004ff0 <HAL_DMA_IRQHandler+0xcac>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xb12>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a68      	ldr	r2, [pc, #416]	; (8004ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <HAL_DMA_IRQHandler+0xb24>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0208 	bic.w	r2, r2, #8
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_DMA_IRQHandler+0xb34>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0204 	bic.w	r2, r2, #4
 8004e76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8165 	beq.w	800514c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e8a:	e15f      	b.n	800514c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2202      	movs	r2, #2
 8004e96:	409a      	lsls	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80c5 	beq.w	800502c <HAL_DMA_IRQHandler+0xce8>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80bf 	beq.w	800502c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d018      	beq.n	8004efa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 813a 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee4:	e134      	b.n	8005150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8130 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef8:	e12a      	b.n	8005150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8089 	bne.w	8005018 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <HAL_DMA_IRQHandler+0xc74>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d04a      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <HAL_DMA_IRQHandler+0xc78>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d045      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d040      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <HAL_DMA_IRQHandler+0xc80>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d03b      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <HAL_DMA_IRQHandler+0xc84>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d036      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <HAL_DMA_IRQHandler+0xc88>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d031      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a22      	ldr	r2, [pc, #136]	; (8004fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d02c      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a20      	ldr	r2, [pc, #128]	; (8004fd4 <HAL_DMA_IRQHandler+0xc90>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d027      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <HAL_DMA_IRQHandler+0xc94>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d022      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_DMA_IRQHandler+0xc98>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01d      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d018      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <HAL_DMA_IRQHandler+0xca0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_DMA_IRQHandler+0xca4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_DMA_IRQHandler+0xca8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_DMA_IRQHandler+0xcac>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xc62>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d128      	bne.n	8004ff8 <HAL_DMA_IRQHandler+0xcb4>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0214 	bic.w	r2, r2, #20
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e027      	b.n	8005008 <HAL_DMA_IRQHandler+0xcc4>
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 020a 	bic.w	r2, r2, #10
 8005006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8097 	beq.w	8005150 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502a:	e091      	b.n	8005150 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2208      	movs	r2, #8
 8005036:	409a      	lsls	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8088 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8082 	beq.w	8005152 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <HAL_DMA_IRQHandler+0xe14>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3f      	ldr	r2, [pc, #252]	; (800515c <HAL_DMA_IRQHandler+0xe18>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3e      	ldr	r2, [pc, #248]	; (8005160 <HAL_DMA_IRQHandler+0xe1c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <HAL_DMA_IRQHandler+0xe20>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3b      	ldr	r2, [pc, #236]	; (8005168 <HAL_DMA_IRQHandler+0xe24>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a39      	ldr	r2, [pc, #228]	; (800516c <HAL_DMA_IRQHandler+0xe28>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <HAL_DMA_IRQHandler+0xe2c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a36      	ldr	r2, [pc, #216]	; (8005174 <HAL_DMA_IRQHandler+0xe30>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <HAL_DMA_IRQHandler+0xe34>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a33      	ldr	r2, [pc, #204]	; (800517c <HAL_DMA_IRQHandler+0xe38>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <HAL_DMA_IRQHandler+0xe3c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <HAL_DMA_IRQHandler+0xe40>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <HAL_DMA_IRQHandler+0xe44>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2d      	ldr	r2, [pc, #180]	; (800518c <HAL_DMA_IRQHandler+0xe48>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <HAL_DMA_IRQHandler+0xe4c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0xdaa>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2a      	ldr	r2, [pc, #168]	; (8005194 <HAL_DMA_IRQHandler+0xe50>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d108      	bne.n	8005100 <HAL_DMA_IRQHandler+0xdbc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 021c 	bic.w	r2, r2, #28
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <HAL_DMA_IRQHandler+0xdcc>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020e 	bic.w	r2, r2, #14
 800510e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2201      	movs	r2, #1
 800511a:	409a      	lsls	r2, r3
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
 8005146:	e004      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005150:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005152:	3728      	adds	r7, #40	; 0x28
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40020010 	.word	0x40020010
 800515c:	40020028 	.word	0x40020028
 8005160:	40020040 	.word	0x40020040
 8005164:	40020058 	.word	0x40020058
 8005168:	40020070 	.word	0x40020070
 800516c:	40020088 	.word	0x40020088
 8005170:	400200a0 	.word	0x400200a0
 8005174:	400200b8 	.word	0x400200b8
 8005178:	40020410 	.word	0x40020410
 800517c:	40020428 	.word	0x40020428
 8005180:	40020440 	.word	0x40020440
 8005184:	40020458 	.word	0x40020458
 8005188:	40020470 	.word	0x40020470
 800518c:	40020488 	.word	0x40020488
 8005190:	400204a0 	.word	0x400204a0
 8005194:	400204b8 	.word	0x400204b8

08005198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a42      	ldr	r2, [pc, #264]	; (80052b0 <DMA_CalcBaseAndBitshift+0x118>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d04a      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a41      	ldr	r2, [pc, #260]	; (80052b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d045      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3f      	ldr	r2, [pc, #252]	; (80052b8 <DMA_CalcBaseAndBitshift+0x120>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3e      	ldr	r2, [pc, #248]	; (80052bc <DMA_CalcBaseAndBitshift+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d03b      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <DMA_CalcBaseAndBitshift+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d036      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a3b      	ldr	r2, [pc, #236]	; (80052c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a39      	ldr	r2, [pc, #228]	; (80052c8 <DMA_CalcBaseAndBitshift+0x130>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02c      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a38      	ldr	r2, [pc, #224]	; (80052cc <DMA_CalcBaseAndBitshift+0x134>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d027      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a36      	ldr	r2, [pc, #216]	; (80052d0 <DMA_CalcBaseAndBitshift+0x138>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a35      	ldr	r2, [pc, #212]	; (80052d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <DMA_CalcBaseAndBitshift+0x140>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a32      	ldr	r2, [pc, #200]	; (80052dc <DMA_CalcBaseAndBitshift+0x144>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a30      	ldr	r2, [pc, #192]	; (80052e0 <DMA_CalcBaseAndBitshift+0x148>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <DMA_CalcBaseAndBitshift+0x150>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <DMA_CalcBaseAndBitshift+0xa8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2c      	ldr	r2, [pc, #176]	; (80052ec <DMA_CalcBaseAndBitshift+0x154>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <DMA_CalcBaseAndBitshift+0xac>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <DMA_CalcBaseAndBitshift+0xae>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d024      	beq.n	8005294 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	3b10      	subs	r3, #16
 8005252:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <DMA_CalcBaseAndBitshift+0x158>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005264:	5cd3      	ldrb	r3, [r2, r3]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d908      	bls.n	8005284 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <DMA_CalcBaseAndBitshift+0x160>)
 800527a:	4013      	ands	r3, r2
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	659a      	str	r2, [r3, #88]	; 0x58
 8005282:	e00d      	b.n	80052a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <DMA_CalcBaseAndBitshift+0x160>)
 800528c:	4013      	ands	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6593      	str	r3, [r2, #88]	; 0x58
 8005292:	e005      	b.n	80052a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40020010 	.word	0x40020010
 80052b4:	40020028 	.word	0x40020028
 80052b8:	40020040 	.word	0x40020040
 80052bc:	40020058 	.word	0x40020058
 80052c0:	40020070 	.word	0x40020070
 80052c4:	40020088 	.word	0x40020088
 80052c8:	400200a0 	.word	0x400200a0
 80052cc:	400200b8 	.word	0x400200b8
 80052d0:	40020410 	.word	0x40020410
 80052d4:	40020428 	.word	0x40020428
 80052d8:	40020440 	.word	0x40020440
 80052dc:	40020458 	.word	0x40020458
 80052e0:	40020470 	.word	0x40020470
 80052e4:	40020488 	.word	0x40020488
 80052e8:	400204a0 	.word	0x400204a0
 80052ec:	400204b8 	.word	0x400204b8
 80052f0:	aaaaaaab 	.word	0xaaaaaaab
 80052f4:	0801162c 	.word	0x0801162c
 80052f8:	fffffc00 	.word	0xfffffc00

080052fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d120      	bne.n	8005352 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	2b03      	cmp	r3, #3
 8005316:	d858      	bhi.n	80053ca <DMA_CheckFifoParam+0xce>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <DMA_CheckFifoParam+0x24>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005331 	.word	0x08005331
 8005324:	08005343 	.word	0x08005343
 8005328:	08005331 	.word	0x08005331
 800532c:	080053cb 	.word	0x080053cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d048      	beq.n	80053ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005340:	e045      	b.n	80053ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800534a:	d142      	bne.n	80053d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005350:	e03f      	b.n	80053d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	d123      	bne.n	80053a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	2b03      	cmp	r3, #3
 8005362:	d838      	bhi.n	80053d6 <DMA_CheckFifoParam+0xda>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <DMA_CheckFifoParam+0x70>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	0800537d 	.word	0x0800537d
 8005370:	08005383 	.word	0x08005383
 8005374:	0800537d 	.word	0x0800537d
 8005378:	08005395 	.word	0x08005395
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
        break;
 8005380:	e030      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d025      	beq.n	80053da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005392:	e022      	b.n	80053da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800539c:	d11f      	bne.n	80053de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053a2:	e01c      	b.n	80053de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d902      	bls.n	80053b2 <DMA_CheckFifoParam+0xb6>
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80053b0:	e018      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
        break;
 80053b6:	e015      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00e      	beq.n	80053e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
    break;
 80053c8:	e00b      	b.n	80053e2 <DMA_CheckFifoParam+0xe6>
        break;
 80053ca:	bf00      	nop
 80053cc:	e00a      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        break;
 80053ce:	bf00      	nop
 80053d0:	e008      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        break;
 80053d2:	bf00      	nop
 80053d4:	e006      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        break;
 80053d6:	bf00      	nop
 80053d8:	e004      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        break;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
        break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <DMA_CheckFifoParam+0xe8>
    break;
 80053e2:	bf00      	nop
    }
  }

  return status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop

080053f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a38      	ldr	r2, [pc, #224]	; (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a36      	ldr	r2, [pc, #216]	; (80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a35      	ldr	r2, [pc, #212]	; (80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a33      	ldr	r2, [pc, #204]	; (80054f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a32      	ldr	r2, [pc, #200]	; (80054f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a30      	ldr	r2, [pc, #192]	; (80054fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2d      	ldr	r2, [pc, #180]	; (8005504 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01a      	beq.n	8005492 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	3b08      	subs	r3, #8
 8005464:	4a28      	ldr	r2, [pc, #160]	; (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a24      	ldr	r2, [pc, #144]	; (8005510 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005480:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2201      	movs	r2, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005490:	e024      	b.n	80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	3b10      	subs	r3, #16
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d806      	bhi.n	80054ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d902      	bls.n	80054ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3308      	adds	r3, #8
 80054b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80054cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	58025408 	.word	0x58025408
 80054ec:	5802541c 	.word	0x5802541c
 80054f0:	58025430 	.word	0x58025430
 80054f4:	58025444 	.word	0x58025444
 80054f8:	58025458 	.word	0x58025458
 80054fc:	5802546c 	.word	0x5802546c
 8005500:	58025480 	.word	0x58025480
 8005504:	58025494 	.word	0x58025494
 8005508:	cccccccd 	.word	0xcccccccd
 800550c:	16009600 	.word	0x16009600
 8005510:	58025880 	.word	0x58025880
 8005514:	aaaaaaab 	.word	0xaaaaaaab
 8005518:	400204b8 	.word	0x400204b8
 800551c:	4002040f 	.word	0x4002040f
 8005520:	10008200 	.word	0x10008200
 8005524:	40020880 	.word	0x40020880

08005528 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d04a      	beq.n	80055d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d847      	bhi.n	80055d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1b      	ldr	r2, [pc, #108]	; (80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80055b0:	671a      	str	r2, [r3, #112]	; 0x70
 80055b2:	e009      	b.n	80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	461a      	mov	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80055c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	2201      	movs	r2, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	58025408 	.word	0x58025408
 80055e4:	5802541c 	.word	0x5802541c
 80055e8:	58025430 	.word	0x58025430
 80055ec:	58025444 	.word	0x58025444
 80055f0:	58025458 	.word	0x58025458
 80055f4:	5802546c 	.word	0x5802546c
 80055f8:	58025480 	.word	0x58025480
 80055fc:	58025494 	.word	0x58025494
 8005600:	1600963f 	.word	0x1600963f
 8005604:	58025940 	.word	0x58025940
 8005608:	1000823f 	.word	0x1000823f
 800560c:	40020940 	.word	0x40020940

08005610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800561e:	4b89      	ldr	r3, [pc, #548]	; (8005844 <HAL_GPIO_Init+0x234>)
 8005620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005622:	e194      	b.n	800594e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	2101      	movs	r1, #1
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	4013      	ands	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8186 	beq.w	8005948 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d005      	beq.n	8005654 <HAL_GPIO_Init+0x44>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d130      	bne.n	80056b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	2203      	movs	r2, #3
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800568a:	2201      	movs	r2, #1
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 0201 	and.w	r2, r3, #1
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d017      	beq.n	80056f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	2203      	movs	r2, #3
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d123      	bne.n	8005746 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	08da      	lsrs	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3208      	adds	r2, #8
 8005706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	220f      	movs	r2, #15
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4313      	orrs	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	08da      	lsrs	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3208      	adds	r2, #8
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0203 	and.w	r2, r3, #3
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80e0 	beq.w	8005948 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005788:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <HAL_GPIO_Init+0x238>)
 800578a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800578e:	4a2e      	ldr	r2, [pc, #184]	; (8005848 <HAL_GPIO_Init+0x238>)
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005798:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_GPIO_Init+0x238>)
 800579a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057a6:	4a29      	ldr	r2, [pc, #164]	; (800584c <HAL_GPIO_Init+0x23c>)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	089b      	lsrs	r3, r3, #2
 80057ac:	3302      	adds	r3, #2
 80057ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	220f      	movs	r2, #15
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a20      	ldr	r2, [pc, #128]	; (8005850 <HAL_GPIO_Init+0x240>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d052      	beq.n	8005878 <HAL_GPIO_Init+0x268>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_GPIO_Init+0x244>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d031      	beq.n	800583e <HAL_GPIO_Init+0x22e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <HAL_GPIO_Init+0x248>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02b      	beq.n	800583a <HAL_GPIO_Init+0x22a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	; (800585c <HAL_GPIO_Init+0x24c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d025      	beq.n	8005836 <HAL_GPIO_Init+0x226>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_GPIO_Init+0x250>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01f      	beq.n	8005832 <HAL_GPIO_Init+0x222>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <HAL_GPIO_Init+0x254>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d019      	beq.n	800582e <HAL_GPIO_Init+0x21e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <HAL_GPIO_Init+0x258>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_GPIO_Init+0x21a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_GPIO_Init+0x25c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00d      	beq.n	8005826 <HAL_GPIO_Init+0x216>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a18      	ldr	r2, [pc, #96]	; (8005870 <HAL_GPIO_Init+0x260>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d007      	beq.n	8005822 <HAL_GPIO_Init+0x212>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <HAL_GPIO_Init+0x264>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_GPIO_Init+0x20e>
 800581a:	2309      	movs	r3, #9
 800581c:	e02d      	b.n	800587a <HAL_GPIO_Init+0x26a>
 800581e:	230a      	movs	r3, #10
 8005820:	e02b      	b.n	800587a <HAL_GPIO_Init+0x26a>
 8005822:	2308      	movs	r3, #8
 8005824:	e029      	b.n	800587a <HAL_GPIO_Init+0x26a>
 8005826:	2307      	movs	r3, #7
 8005828:	e027      	b.n	800587a <HAL_GPIO_Init+0x26a>
 800582a:	2306      	movs	r3, #6
 800582c:	e025      	b.n	800587a <HAL_GPIO_Init+0x26a>
 800582e:	2305      	movs	r3, #5
 8005830:	e023      	b.n	800587a <HAL_GPIO_Init+0x26a>
 8005832:	2304      	movs	r3, #4
 8005834:	e021      	b.n	800587a <HAL_GPIO_Init+0x26a>
 8005836:	2303      	movs	r3, #3
 8005838:	e01f      	b.n	800587a <HAL_GPIO_Init+0x26a>
 800583a:	2302      	movs	r3, #2
 800583c:	e01d      	b.n	800587a <HAL_GPIO_Init+0x26a>
 800583e:	2301      	movs	r3, #1
 8005840:	e01b      	b.n	800587a <HAL_GPIO_Init+0x26a>
 8005842:	bf00      	nop
 8005844:	58000080 	.word	0x58000080
 8005848:	58024400 	.word	0x58024400
 800584c:	58000400 	.word	0x58000400
 8005850:	58020000 	.word	0x58020000
 8005854:	58020400 	.word	0x58020400
 8005858:	58020800 	.word	0x58020800
 800585c:	58020c00 	.word	0x58020c00
 8005860:	58021000 	.word	0x58021000
 8005864:	58021400 	.word	0x58021400
 8005868:	58021800 	.word	0x58021800
 800586c:	58021c00 	.word	0x58021c00
 8005870:	58022000 	.word	0x58022000
 8005874:	58022400 	.word	0x58022400
 8005878:	2300      	movs	r3, #0
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	f002 0203 	and.w	r2, r2, #3
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	4093      	lsls	r3, r2
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4313      	orrs	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800588a:	4938      	ldr	r1, [pc, #224]	; (800596c <HAL_GPIO_Init+0x35c>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f47f ae63 	bne.w	8005624 <HAL_GPIO_Init+0x14>
  }
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	3724      	adds	r7, #36	; 0x24
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	58000400 	.word	0x58000400

08005970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e08b      	b.n	8005a9a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb fdb4 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2224      	movs	r2, #36	; 0x24
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d107      	bne.n	80059ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	e006      	b.n	80059f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d108      	bne.n	8005a12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	e007      	b.n	8005a22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6859      	ldr	r1, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_I2C_Init+0x134>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	02008000 	.word	0x02008000

08005aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d138      	bne.n	8005b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e032      	b.n	8005b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d139      	bne.n	8005bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e033      	b.n	8005bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2224      	movs	r2, #36	; 0x24
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005be0:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d00a      	beq.n	8005c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d001      	beq.n	8005bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e01f      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e01d      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 0207 	bic.w	r2, r3, #7
 8005c0a:	490f      	ldr	r1, [pc, #60]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c12:	f7fc f945 	bl	8001ea0 <HAL_GetTick>
 8005c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c18:	e009      	b.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c1a:	f7fc f941 	bl	8001ea0 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c28:	d901      	bls.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	58024800 	.word	0x58024800

08005c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08c      	sub	sp, #48	; 0x30
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f000 bc48 	b.w	80064f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8088 	beq.w	8005d7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6e:	4b99      	ldr	r3, [pc, #612]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c78:	4b96      	ldr	r3, [pc, #600]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d007      	beq.n	8005c94 <HAL_RCC_OscConfig+0x48>
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	2b18      	cmp	r3, #24
 8005c88:	d111      	bne.n	8005cae <HAL_RCC_OscConfig+0x62>
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d10c      	bne.n	8005cae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c94:	4b8f      	ldr	r3, [pc, #572]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d06d      	beq.n	8005d7c <HAL_RCC_OscConfig+0x130>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d169      	bne.n	8005d7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f000 bc21 	b.w	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x7a>
 8005cb8:	4b86      	ldr	r3, [pc, #536]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a85      	ldr	r2, [pc, #532]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e02e      	b.n	8005d24 <HAL_RCC_OscConfig+0xd8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x9c>
 8005cce:	4b81      	ldr	r3, [pc, #516]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a80      	ldr	r2, [pc, #512]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b7e      	ldr	r3, [pc, #504]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7d      	ldr	r2, [pc, #500]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <HAL_RCC_OscConfig+0xd8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCC_OscConfig+0xc0>
 8005cf2:	4b78      	ldr	r3, [pc, #480]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a77      	ldr	r2, [pc, #476]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b75      	ldr	r3, [pc, #468]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a74      	ldr	r2, [pc, #464]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCC_OscConfig+0xd8>
 8005d0c:	4b71      	ldr	r3, [pc, #452]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a70      	ldr	r2, [pc, #448]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b6e      	ldr	r3, [pc, #440]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6d      	ldr	r2, [pc, #436]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fc f8b8 	bl	8001ea0 <HAL_GetTick>
 8005d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fc f8b4 	bl	8001ea0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	; 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e3d4      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d46:	4b63      	ldr	r3, [pc, #396]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0xe8>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fc f8a4 	bl	8001ea0 <HAL_GetTick>
 8005d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fc f8a0 	bl	8001ea0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	; 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e3c0      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d6e:	4b59      	ldr	r3, [pc, #356]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x110>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80ca 	beq.w	8005f20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d8c:	4b51      	ldr	r3, [pc, #324]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d96:	4b4f      	ldr	r3, [pc, #316]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_RCC_OscConfig+0x166>
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2b18      	cmp	r3, #24
 8005da6:	d156      	bne.n	8005e56 <HAL_RCC_OscConfig+0x20a>
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d151      	bne.n	8005e56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db2:	4b48      	ldr	r3, [pc, #288]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x17e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e392      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dca:	4b42      	ldr	r3, [pc, #264]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 0219 	bic.w	r2, r3, #25
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	493f      	ldr	r1, [pc, #252]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fc f860 	bl	8001ea0 <HAL_GetTick>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de4:	f7fc f85c 	bl	8001ea0 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e37c      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e02:	f7fc f859 	bl	8001eb8 <HAL_GetREVID>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d817      	bhi.n	8005e40 <HAL_RCC_OscConfig+0x1f4>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d108      	bne.n	8005e2a <HAL_RCC_OscConfig+0x1de>
 8005e18:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e20:	4a2c      	ldr	r2, [pc, #176]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e28:	e07a      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	4926      	ldr	r1, [pc, #152]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e3e:	e06f      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	4921      	ldr	r1, [pc, #132]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e54:	e064      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d047      	beq.n	8005eee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 0219 	bic.w	r2, r3, #25
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	491a      	ldr	r1, [pc, #104]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fc f816 	bl	8001ea0 <HAL_GetTick>
 8005e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e78:	f7fc f812 	bl	8001ea0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e332      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	f7fc f80f 	bl	8001eb8 <HAL_GetREVID>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d819      	bhi.n	8005ed8 <HAL_RCC_OscConfig+0x28c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d108      	bne.n	8005ebe <HAL_RCC_OscConfig+0x272>
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005eb4:	4a07      	ldr	r2, [pc, #28]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e030      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
 8005ebe:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	4901      	ldr	r1, [pc, #4]	; (8005ed4 <HAL_RCC_OscConfig+0x288>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
 8005ed2:	e025      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	4b9a      	ldr	r3, [pc, #616]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	061b      	lsls	r3, r3, #24
 8005ee6:	4997      	ldr	r1, [pc, #604]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	e018      	b.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b95      	ldr	r3, [pc, #596]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a94      	ldr	r2, [pc, #592]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fb ffd1 	bl	8001ea0 <HAL_GetTick>
 8005efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f02:	f7fb ffcd 	bl	8001ea0 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e2ed      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f14:	4b8b      	ldr	r3, [pc, #556]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1f0      	bne.n	8005f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80a9 	beq.w	8006080 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f2e:	4b85      	ldr	r3, [pc, #532]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f38:	4b82      	ldr	r3, [pc, #520]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d007      	beq.n	8005f54 <HAL_RCC_OscConfig+0x308>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b18      	cmp	r3, #24
 8005f48:	d13a      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x374>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d135      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f54:	4b7b      	ldr	r3, [pc, #492]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_OscConfig+0x320>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e2c1      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f6c:	f7fb ffa4 	bl	8001eb8 <HAL_GetREVID>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d817      	bhi.n	8005faa <HAL_RCC_OscConfig+0x35e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d108      	bne.n	8005f94 <HAL_RCC_OscConfig+0x348>
 8005f82:	4b70      	ldr	r3, [pc, #448]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f8a:	4a6e      	ldr	r2, [pc, #440]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f92:	e075      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f94:	4b6b      	ldr	r3, [pc, #428]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	069b      	lsls	r3, r3, #26
 8005fa2:	4968      	ldr	r1, [pc, #416]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fa8:	e06a      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005faa:	4b66      	ldr	r3, [pc, #408]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	4962      	ldr	r1, [pc, #392]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fbe:	e05f      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d042      	beq.n	800604e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fc8:	4b5e      	ldr	r3, [pc, #376]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a5d      	ldr	r2, [pc, #372]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd4:	f7fb ff64 	bl	8001ea0 <HAL_GetTick>
 8005fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005fdc:	f7fb ff60 	bl	8001ea0 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e280      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fee:	4b55      	ldr	r3, [pc, #340]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ffa:	f7fb ff5d 	bl	8001eb8 <HAL_GetREVID>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f241 0203 	movw	r2, #4099	; 0x1003
 8006004:	4293      	cmp	r3, r2
 8006006:	d817      	bhi.n	8006038 <HAL_RCC_OscConfig+0x3ec>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	2b20      	cmp	r3, #32
 800600e:	d108      	bne.n	8006022 <HAL_RCC_OscConfig+0x3d6>
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006018:	4a4a      	ldr	r2, [pc, #296]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 800601a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601e:	6053      	str	r3, [r2, #4]
 8006020:	e02e      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
 8006022:	4b48      	ldr	r3, [pc, #288]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	069b      	lsls	r3, r3, #26
 8006030:	4944      	ldr	r1, [pc, #272]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006032:	4313      	orrs	r3, r2
 8006034:	604b      	str	r3, [r1, #4]
 8006036:	e023      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	493f      	ldr	r1, [pc, #252]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006048:	4313      	orrs	r3, r2
 800604a:	60cb      	str	r3, [r1, #12]
 800604c:	e018      	b.n	8006080 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800604e:	4b3d      	ldr	r3, [pc, #244]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a3c      	ldr	r2, [pc, #240]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605a:	f7fb ff21 	bl	8001ea0 <HAL_GetTick>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006062:	f7fb ff1d 	bl	8001ea0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e23d      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006074:	4b33      	ldr	r3, [pc, #204]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f0      	bne.n	8006062 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d036      	beq.n	80060fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d019      	beq.n	80060c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006094:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006098:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fb fefe 	bl	8001ea0 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a8:	f7fb fefa 	bl	8001ea0 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e21a      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ba:	4b22      	ldr	r3, [pc, #136]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x45c>
 80060c6:	e018      	b.n	80060fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c8:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fb fee4 	bl	8001ea0 <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060dc:	f7fb fee0 	bl	8001ea0 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e200      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060ee:	4b15      	ldr	r3, [pc, #84]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 80060f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d039      	beq.n	800617a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01c      	beq.n	8006148 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006118:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800611a:	f7fb fec1 	bl	8001ea0 <HAL_GetTick>
 800611e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006122:	f7fb febd 	bl	8001ea0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e1dd      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006134:	4b03      	ldr	r3, [pc, #12]	; (8006144 <HAL_RCC_OscConfig+0x4f8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f0      	beq.n	8006122 <HAL_RCC_OscConfig+0x4d6>
 8006140:	e01b      	b.n	800617a <HAL_RCC_OscConfig+0x52e>
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006148:	4b9b      	ldr	r3, [pc, #620]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a9a      	ldr	r2, [pc, #616]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800614e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006152:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006154:	f7fb fea4 	bl	8001ea0 <HAL_GetTick>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615c:	f7fb fea0 	bl	8001ea0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e1c0      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800616e:	4b92      	ldr	r3, [pc, #584]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8081 	beq.w	800628a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006188:	4b8c      	ldr	r3, [pc, #560]	; (80063bc <HAL_RCC_OscConfig+0x770>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a8b      	ldr	r2, [pc, #556]	; (80063bc <HAL_RCC_OscConfig+0x770>)
 800618e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006194:	f7fb fe84 	bl	8001ea0 <HAL_GetTick>
 8006198:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619c:	f7fb fe80 	bl	8001ea0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	; 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e1a0      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ae:	4b83      	ldr	r3, [pc, #524]	; (80063bc <HAL_RCC_OscConfig+0x770>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d106      	bne.n	80061d0 <HAL_RCC_OscConfig+0x584>
 80061c2:	4b7d      	ldr	r3, [pc, #500]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	4a7c      	ldr	r2, [pc, #496]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6713      	str	r3, [r2, #112]	; 0x70
 80061ce:	e02d      	b.n	800622c <HAL_RCC_OscConfig+0x5e0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCC_OscConfig+0x5a6>
 80061d8:	4b77      	ldr	r3, [pc, #476]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	4a76      	ldr	r2, [pc, #472]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	6713      	str	r3, [r2, #112]	; 0x70
 80061e4:	4b74      	ldr	r3, [pc, #464]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	4a73      	ldr	r2, [pc, #460]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061ea:	f023 0304 	bic.w	r3, r3, #4
 80061ee:	6713      	str	r3, [r2, #112]	; 0x70
 80061f0:	e01c      	b.n	800622c <HAL_RCC_OscConfig+0x5e0>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0x5c8>
 80061fa:	4b6f      	ldr	r3, [pc, #444]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a6e      	ldr	r2, [pc, #440]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6713      	str	r3, [r2, #112]	; 0x70
 8006206:	4b6c      	ldr	r3, [pc, #432]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4a6b      	ldr	r2, [pc, #428]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6713      	str	r3, [r2, #112]	; 0x70
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0x5e0>
 8006214:	4b68      	ldr	r3, [pc, #416]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006218:	4a67      	ldr	r2, [pc, #412]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6713      	str	r3, [r2, #112]	; 0x70
 8006220:	4b65      	ldr	r3, [pc, #404]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4a64      	ldr	r2, [pc, #400]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006226:	f023 0304 	bic.w	r3, r3, #4
 800622a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d015      	beq.n	8006260 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fb fe34 	bl	8001ea0 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800623a:	e00a      	b.n	8006252 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623c:	f7fb fe30 	bl	8001ea0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f241 3288 	movw	r2, #5000	; 0x1388
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e14e      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006252:	4b59      	ldr	r3, [pc, #356]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ee      	beq.n	800623c <HAL_RCC_OscConfig+0x5f0>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fb fe1e 	bl	8001ea0 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006266:	e00a      	b.n	800627e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fb fe1a 	bl	8001ea0 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	; 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e138      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800627e:	4b4e      	ldr	r3, [pc, #312]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1ee      	bne.n	8006268 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 812d 	beq.w	80064ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006294:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629c:	2b18      	cmp	r3, #24
 800629e:	f000 80bd 	beq.w	800641c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	f040 809e 	bne.w	80063e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ac:	4b42      	ldr	r3, [pc, #264]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a41      	ldr	r2, [pc, #260]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fb fdf2 	bl	8001ea0 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fb fdee 	bl	8001ea0 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e10e      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062d2:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062de:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062e2:	4b37      	ldr	r3, [pc, #220]	; (80063c0 <HAL_RCC_OscConfig+0x774>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	430a      	orrs	r2, r1
 80062f2:	4931      	ldr	r1, [pc, #196]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	628b      	str	r3, [r1, #40]	; 0x28
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	3b01      	subs	r3, #1
 80062fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	3b01      	subs	r3, #1
 8006308:	025b      	lsls	r3, r3, #9
 800630a:	b29b      	uxth	r3, r3
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	3b01      	subs	r3, #1
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	3b01      	subs	r3, #1
 8006322:	061b      	lsls	r3, r3, #24
 8006324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006328:	4923      	ldr	r1, [pc, #140]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800632a:	4313      	orrs	r3, r2
 800632c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800632e:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	4a21      	ldr	r2, [pc, #132]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800633a:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800633c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633e:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <HAL_RCC_OscConfig+0x778>)
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006346:	00d2      	lsls	r2, r2, #3
 8006348:	491b      	ldr	r1, [pc, #108]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800634e:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f023 020c 	bic.w	r2, r3, #12
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	4917      	ldr	r1, [pc, #92]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006360:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	f023 0202 	bic.w	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	4912      	ldr	r1, [pc, #72]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800636e:	4313      	orrs	r3, r2
 8006370:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006388:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006394:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	4a07      	ldr	r2, [pc, #28]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <HAL_RCC_OscConfig+0x76c>)
 80063a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ae:	f7fb fd77 	bl	8001ea0 <HAL_GetTick>
 80063b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063b4:	e011      	b.n	80063da <HAL_RCC_OscConfig+0x78e>
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	58024800 	.word	0x58024800
 80063c0:	fffffc0c 	.word	0xfffffc0c
 80063c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c8:	f7fb fd6a 	bl	8001ea0 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e08a      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063da:	4b47      	ldr	r3, [pc, #284]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0x77c>
 80063e6:	e082      	b.n	80064ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e8:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a42      	ldr	r2, [pc, #264]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80063ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f4:	f7fb fd54 	bl	8001ea0 <HAL_GetTick>
 80063f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063fc:	f7fb fd50 	bl	8001ea0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e070      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800640e:	4b3a      	ldr	r3, [pc, #232]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x7b0>
 800641a:	e068      	b.n	80064ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800641c:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006422:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b01      	cmp	r3, #1
 800642e:	d031      	beq.n	8006494 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f003 0203 	and.w	r2, r3, #3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d12a      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d122      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800645a:	429a      	cmp	r2, r3
 800645c:	d11a      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	0a5b      	lsrs	r3, r3, #9
 8006462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800646c:	429a      	cmp	r2, r3
 800646e:	d111      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d108      	bne.n	8006494 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	0e1b      	lsrs	r3, r3, #24
 8006486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e02b      	b.n	80064f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006498:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	08db      	lsrs	r3, r3, #3
 800649e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d01f      	beq.n	80064ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	4a11      	ldr	r2, [pc, #68]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ba:	f7fb fcf1 	bl	8001ea0 <HAL_GetTick>
 80064be:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064c0:	bf00      	nop
 80064c2:	f7fb fced 	bl	8001ea0 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d0f9      	beq.n	80064c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <HAL_RCC_OscConfig+0x8b0>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064da:	00d2      	lsls	r2, r2, #3
 80064dc:	4906      	ldr	r1, [pc, #24]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <HAL_RCC_OscConfig+0x8ac>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3730      	adds	r7, #48	; 0x30
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	58024400 	.word	0x58024400
 80064fc:	ffff0007 	.word	0xffff0007

08006500 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e19c      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006514:	4b8a      	ldr	r3, [pc, #552]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d910      	bls.n	8006544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	4b87      	ldr	r3, [pc, #540]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 020f 	bic.w	r2, r3, #15
 800652a:	4985      	ldr	r1, [pc, #532]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006532:	4b83      	ldr	r3, [pc, #524]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e184      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	4b7b      	ldr	r3, [pc, #492]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800655c:	429a      	cmp	r2, r3
 800655e:	d908      	bls.n	8006572 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006560:	4b78      	ldr	r3, [pc, #480]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	4975      	ldr	r1, [pc, #468]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800656e:	4313      	orrs	r3, r2
 8006570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d010      	beq.n	80065a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	4b70      	ldr	r3, [pc, #448]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800658a:	429a      	cmp	r2, r3
 800658c:	d908      	bls.n	80065a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	496a      	ldr	r1, [pc, #424]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800659c:	4313      	orrs	r3, r2
 800659e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	4b64      	ldr	r3, [pc, #400]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d908      	bls.n	80065ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065bc:	4b61      	ldr	r3, [pc, #388]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	495e      	ldr	r1, [pc, #376]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	4b59      	ldr	r3, [pc, #356]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d908      	bls.n	80065fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065ea:	4b56      	ldr	r3, [pc, #344]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	4953      	ldr	r1, [pc, #332]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	4b4d      	ldr	r3, [pc, #308]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	429a      	cmp	r2, r3
 8006616:	d908      	bls.n	800662a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006618:	4b4a      	ldr	r3, [pc, #296]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f023 020f 	bic.w	r2, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4947      	ldr	r1, [pc, #284]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006626:	4313      	orrs	r3, r2
 8006628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d055      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006636:	4b43      	ldr	r3, [pc, #268]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	4940      	ldr	r1, [pc, #256]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006644:	4313      	orrs	r3, r2
 8006646:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d107      	bne.n	8006660 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006650:	4b3c      	ldr	r3, [pc, #240]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d121      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0f6      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d107      	bne.n	8006678 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006668:	4b36      	ldr	r3, [pc, #216]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d115      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0ea      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006680:	4b30      	ldr	r3, [pc, #192]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0de      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006690:	4b2c      	ldr	r3, [pc, #176]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0d6      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f023 0207 	bic.w	r2, r3, #7
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4925      	ldr	r1, [pc, #148]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b2:	f7fb fbf5 	bl	8001ea0 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ba:	f7fb fbf1 	bl	8001ea0 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0be      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	429a      	cmp	r2, r3
 80066e0:	d1eb      	bne.n	80066ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	4b14      	ldr	r3, [pc, #80]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d208      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f023 020f 	bic.w	r2, r3, #15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	490e      	ldr	r1, [pc, #56]	; (8006744 <HAL_RCC_ClockConfig+0x244>)
 800670c:	4313      	orrs	r3, r2
 800670e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d214      	bcs.n	8006748 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 020f 	bic.w	r2, r3, #15
 8006726:	4906      	ldr	r1, [pc, #24]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <HAL_RCC_ClockConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d005      	beq.n	8006748 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e086      	b.n	800684e <HAL_RCC_ClockConfig+0x34e>
 8006740:	52002000 	.word	0x52002000
 8006744:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	4b3f      	ldr	r3, [pc, #252]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006760:	429a      	cmp	r2, r3
 8006762:	d208      	bcs.n	8006776 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006764:	4b3c      	ldr	r3, [pc, #240]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	4939      	ldr	r1, [pc, #228]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006772:	4313      	orrs	r3, r2
 8006774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d010      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	4b34      	ldr	r3, [pc, #208]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800678e:	429a      	cmp	r2, r3
 8006790:	d208      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	492e      	ldr	r1, [pc, #184]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699a      	ldr	r2, [r3, #24]
 80067b4:	4b28      	ldr	r3, [pc, #160]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067bc:	429a      	cmp	r2, r3
 80067be:	d208      	bcs.n	80067d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067c0:	4b25      	ldr	r3, [pc, #148]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	4922      	ldr	r1, [pc, #136]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d208      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067ee:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	4917      	ldr	r1, [pc, #92]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006800:	f000 f834 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	4912      	ldr	r1, [pc, #72]	; (800685c <HAL_RCC_ClockConfig+0x35c>)
 8006812:	5ccb      	ldrb	r3, [r1, r3]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
 800681c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_RCC_ClockConfig+0x358>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <HAL_RCC_ClockConfig+0x35c>)
 8006828:	5cd3      	ldrb	r3, [r2, r3]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <HAL_RCC_ClockConfig+0x360>)
 8006836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006838:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x364>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800683e:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <HAL_RCC_ClockConfig+0x368>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fb f882 	bl	800194c <HAL_InitTick>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
 800685c:	0801161c 	.word	0x0801161c
 8006860:	24000004 	.word	0x24000004
 8006864:	24000000 	.word	0x24000000
 8006868:	24000008 	.word	0x24000008

0800686c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	; 0x24
 8006870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006872:	4bb3      	ldr	r3, [pc, #716]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800687a:	2b18      	cmp	r3, #24
 800687c:	f200 8155 	bhi.w	8006b2a <HAL_RCC_GetSysClockFreq+0x2be>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068ed 	.word	0x080068ed
 800688c:	08006b2b 	.word	0x08006b2b
 8006890:	08006b2b 	.word	0x08006b2b
 8006894:	08006b2b 	.word	0x08006b2b
 8006898:	08006b2b 	.word	0x08006b2b
 800689c:	08006b2b 	.word	0x08006b2b
 80068a0:	08006b2b 	.word	0x08006b2b
 80068a4:	08006b2b 	.word	0x08006b2b
 80068a8:	08006913 	.word	0x08006913
 80068ac:	08006b2b 	.word	0x08006b2b
 80068b0:	08006b2b 	.word	0x08006b2b
 80068b4:	08006b2b 	.word	0x08006b2b
 80068b8:	08006b2b 	.word	0x08006b2b
 80068bc:	08006b2b 	.word	0x08006b2b
 80068c0:	08006b2b 	.word	0x08006b2b
 80068c4:	08006b2b 	.word	0x08006b2b
 80068c8:	08006919 	.word	0x08006919
 80068cc:	08006b2b 	.word	0x08006b2b
 80068d0:	08006b2b 	.word	0x08006b2b
 80068d4:	08006b2b 	.word	0x08006b2b
 80068d8:	08006b2b 	.word	0x08006b2b
 80068dc:	08006b2b 	.word	0x08006b2b
 80068e0:	08006b2b 	.word	0x08006b2b
 80068e4:	08006b2b 	.word	0x08006b2b
 80068e8:	0800691f 	.word	0x0800691f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ec:	4b94      	ldr	r3, [pc, #592]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f8:	4b91      	ldr	r3, [pc, #580]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	08db      	lsrs	r3, r3, #3
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	4a90      	ldr	r2, [pc, #576]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800690a:	e111      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800690c:	4b8d      	ldr	r3, [pc, #564]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800690e:	61bb      	str	r3, [r7, #24]
      break;
 8006910:	e10e      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006912:	4b8d      	ldr	r3, [pc, #564]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006914:	61bb      	str	r3, [r7, #24]
      break;
 8006916:	e10b      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006918:	4b8c      	ldr	r3, [pc, #560]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800691a:	61bb      	str	r3, [r7, #24]
      break;
 800691c:	e108      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691e:	4b88      	ldr	r3, [pc, #544]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006928:	4b85      	ldr	r3, [pc, #532]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	091b      	lsrs	r3, r3, #4
 800692e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006932:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006934:	4b82      	ldr	r3, [pc, #520]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800693e:	4b80      	ldr	r3, [pc, #512]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80e1 	beq.w	8006b24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b02      	cmp	r3, #2
 8006966:	f000 8083 	beq.w	8006a70 <HAL_RCC_GetSysClockFreq+0x204>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f200 80a1 	bhi.w	8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x114>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d056      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800697e:	e099      	b.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006980:	4b6f      	ldr	r3, [pc, #444]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02d      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800698c:	4b6c      	ldr	r3, [pc, #432]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a6b      	ldr	r2, [pc, #428]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	4b62      	ldr	r3, [pc, #392]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069e6:	e087      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fa:	4b51      	ldr	r3, [pc, #324]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a2a:	e065      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3e:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a6e:	e043      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b2f      	ldr	r3, [pc, #188]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ab2:	e021      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b1e      	ldr	r3, [pc, #120]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ada:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006af6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	0a5b      	lsrs	r3, r3, #9
 8006afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b02:	3301      	adds	r3, #1
 8006b04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1c:	ee17 3a90 	vmov	r3, s15
 8006b20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b22:	e005      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
      break;
 8006b28:	e002      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b2a:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b2c:	61bb      	str	r3, [r7, #24]
      break;
 8006b2e:	bf00      	nop
  }

  return sysclockfreq;
 8006b30:	69bb      	ldr	r3, [r7, #24]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3724      	adds	r7, #36	; 0x24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	58024400 	.word	0x58024400
 8006b44:	03d09000 	.word	0x03d09000
 8006b48:	003d0900 	.word	0x003d0900
 8006b4c:	017d7840 	.word	0x017d7840
 8006b50:	46000000 	.word	0x46000000
 8006b54:	4c742400 	.word	0x4c742400
 8006b58:	4a742400 	.word	0x4a742400
 8006b5c:	4bbebc20 	.word	0x4bbebc20

08006b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b66:	f7ff fe81 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	490f      	ldr	r1, [pc, #60]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b78:	5ccb      	ldrb	r3, [r1, r3]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b8e:	5cd3      	ldrb	r3, [r2, r3]
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b9e:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	0801161c 	.word	0x0801161c
 8006bb8:	24000004 	.word	0x24000004
 8006bbc:	24000000 	.word	0x24000000

08006bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bc4:	f7ff ffcc 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	4904      	ldr	r1, [pc, #16]	; (8006be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bd6:	5ccb      	ldrb	r3, [r1, r3]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	58024400 	.word	0x58024400
 8006be8:	0801161c 	.word	0x0801161c

08006bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bf0:	f7ff ffb6 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4904      	ldr	r1, [pc, #16]	; (8006c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	58024400 	.word	0x58024400
 8006c14:	0801161c 	.word	0x0801161c

08006c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	223f      	movs	r2, #63	; 0x3f
 8006c26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 0207 	and.w	r2, r3, #7
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006c34:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006c40:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006c4c:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006c58:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <HAL_RCC_GetClockConfig+0x7c>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <HAL_RCC_GetClockConfig+0x80>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	601a      	str	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	58024400 	.word	0x58024400
 8006c98:	52002000 	.word	0x52002000

08006c9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca0:	b0ca      	sub	sp, #296	; 0x128
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	ea54 0305 	orrs.w	r3, r4, r5
 8006cc6:	d049      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cd2:	d02f      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006cd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cd8:	d828      	bhi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cde:	d01a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ce4:	d822      	bhi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cee:	d007      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cf0:	e01c      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf2:	4bb8      	ldr	r3, [pc, #736]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	4ab7      	ldr	r2, [pc, #732]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cfe:	e01a      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d04:	3308      	adds	r3, #8
 8006d06:	2102      	movs	r1, #2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 fb61 	bl	80093d0 <RCCEx_PLL2_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d14:	e00f      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1a:	3328      	adds	r3, #40	; 0x28
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f002 fc08 	bl	8009534 <RCCEx_PLL3_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d2a:	e004      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d32:	e000      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d3e:	4ba5      	ldr	r3, [pc, #660]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d4c:	4aa1      	ldr	r2, [pc, #644]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	6513      	str	r3, [r2, #80]	; 0x50
 8006d52:	e003      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006d68:	f04f 0900 	mov.w	r9, #0
 8006d6c:	ea58 0309 	orrs.w	r3, r8, r9
 8006d70:	d047      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d82a      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d7c:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006d99 	.word	0x08006d99
 8006d88:	08006da7 	.word	0x08006da7
 8006d8c:	08006dbd 	.word	0x08006dbd
 8006d90:	08006ddb 	.word	0x08006ddb
 8006d94:	08006ddb 	.word	0x08006ddb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d98:	4b8e      	ldr	r3, [pc, #568]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	4a8d      	ldr	r2, [pc, #564]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006da4:	e01a      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006daa:	3308      	adds	r3, #8
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f002 fb0e 	bl	80093d0 <RCCEx_PLL2_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dba:	e00f      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc0:	3328      	adds	r3, #40	; 0x28
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f002 fbb5 	bl	8009534 <RCCEx_PLL3_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dd0:	e004      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dd8:	e000      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006de4:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	f023 0107 	bic.w	r1, r3, #7
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	4a78      	ldr	r2, [pc, #480]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6513      	str	r3, [r2, #80]	; 0x50
 8006df8:	e003      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006e0e:	f04f 0b00 	mov.w	fp, #0
 8006e12:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e16:	d04c      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	d030      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e28:	d829      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e2c:	d02d      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e30:	d825      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e32:	2b80      	cmp	r3, #128	; 0x80
 8006e34:	d018      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e36:	2b80      	cmp	r3, #128	; 0x80
 8006e38:	d821      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d007      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e42:	e01c      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e44:	4b63      	ldr	r3, [pc, #396]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	4a62      	ldr	r2, [pc, #392]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e50:	e01c      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e56:	3308      	adds	r3, #8
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f002 fab8 	bl	80093d0 <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e66:	e011      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6c:	3328      	adds	r3, #40	; 0x28
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 fb5f 	bl	8009534 <RCCEx_PLL3_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e7c:	e006      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e84:	e002      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e94:	4b4f      	ldr	r3, [pc, #316]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e98:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	4a4c      	ldr	r2, [pc, #304]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6513      	str	r3, [r2, #80]	; 0x50
 8006ea8:	e003      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006ebe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ec8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d053      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ede:	d035      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ee4:	d82e      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006eea:	d031      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006eec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ef0:	d828      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef6:	d01a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006efc:	d822      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f06:	d007      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f08:	e01c      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0a:	4b32      	ldr	r3, [pc, #200]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f16:	e01c      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 fa55 	bl	80093d0 <RCCEx_PLL2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f2c:	e011      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	3328      	adds	r3, #40	; 0x28
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f002 fafc 	bl	8009534 <RCCEx_PLL3_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f42:	e006      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f4a:	e002      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f5a:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f6a:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f70:	e003      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006f86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f90:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006f94:	460b      	mov	r3, r1
 8006f96:	4313      	orrs	r3, r2
 8006f98:	d056      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fa6:	d038      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fac:	d831      	bhi.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fb2:	d034      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006fb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fb8:	d82b      	bhi.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fbe:	d01d      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc4:	d825      	bhi.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d006      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fce:	d00a      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006fd0:	e01f      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd8:	4ba2      	ldr	r3, [pc, #648]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4aa1      	ldr	r2, [pc, #644]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe4:	e01c      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fea:	3308      	adds	r3, #8
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 f9ee 	bl	80093d0 <RCCEx_PLL2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ffa:	e011      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007000:	3328      	adds	r3, #40	; 0x28
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f002 fa95 	bl	8009534 <RCCEx_PLL3_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007010:	e006      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007018:	e002      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800701a:	bf00      	nop
 800701c:	e000      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800701e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007028:	4b8e      	ldr	r3, [pc, #568]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800702a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007034:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007038:	4a8a      	ldr	r2, [pc, #552]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703a:	430b      	orrs	r3, r1
 800703c:	6593      	str	r3, [r2, #88]	; 0x58
 800703e:	e003      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007058:	2300      	movs	r3, #0
 800705a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800705e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d03a      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706e:	2b30      	cmp	r3, #48	; 0x30
 8007070:	d01f      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007072:	2b30      	cmp	r3, #48	; 0x30
 8007074:	d819      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d00c      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800707a:	2b20      	cmp	r3, #32
 800707c:	d815      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d019      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007082:	2b10      	cmp	r3, #16
 8007084:	d111      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007086:	4b77      	ldr	r3, [pc, #476]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4a76      	ldr	r2, [pc, #472]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800708c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007092:	e011      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007098:	3308      	adds	r3, #8
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f002 f997 	bl	80093d0 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070a8:	e006      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070b0:	e002      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070c0:	4b68      	ldr	r3, [pc, #416]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	4a65      	ldr	r2, [pc, #404]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80070ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070ee:	2300      	movs	r3, #0
 80070f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	d051      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007108:	d035      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800710a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800710e:	d82e      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007114:	d031      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800711a:	d828      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800711c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007120:	d01a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007126:	d822      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800712c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007130:	d007      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007132:	e01c      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007134:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a4a      	ldr	r2, [pc, #296]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800713a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007140:	e01c      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007146:	3308      	adds	r3, #8
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f002 f940 	bl	80093d0 <RCCEx_PLL2_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007156:	e011      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715c:	3328      	adds	r3, #40	; 0x28
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f002 f9e7 	bl	8009534 <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800716c:	e006      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007174:	e002      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800717a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007184:	4b37      	ldr	r3, [pc, #220]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007188:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007192:	4a34      	ldr	r2, [pc, #208]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007194:	430b      	orrs	r3, r1
 8007196:	6513      	str	r3, [r2, #80]	; 0x50
 8007198:	e003      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800719e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80071ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071b2:	2300      	movs	r3, #0
 80071b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d056      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071cc:	d033      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071d2:	d82c      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071d8:	d02f      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80071da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071de:	d826      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071e4:	d02b      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80071e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ea:	d820      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f0:	d012      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80071f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f6:	d81a      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d022      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007200:	d115      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007206:	3308      	adds	r3, #8
 8007208:	2101      	movs	r1, #1
 800720a:	4618      	mov	r0, r3
 800720c:	f002 f8e0 	bl	80093d0 <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007216:	e015      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800721c:	3328      	adds	r3, #40	; 0x28
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f002 f987 	bl	8009534 <RCCEx_PLL3_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800722c:	e00a      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007234:	e006      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007236:	bf00      	nop
 8007238:	e004      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10d      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800724e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007250:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725a:	4a02      	ldr	r2, [pc, #8]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725c:	430b      	orrs	r3, r1
 800725e:	6513      	str	r3, [r2, #80]	; 0x50
 8007260:	e006      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007262:	bf00      	nop
 8007264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800726c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007280:	2300      	movs	r3, #0
 8007282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007286:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800728a:	460b      	mov	r3, r1
 800728c:	4313      	orrs	r3, r2
 800728e:	d055      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800729c:	d033      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800729e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a2:	d82c      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d02f      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ae:	d826      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072b4:	d02b      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80072b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ba:	d820      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c0:	d012      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80072c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c6:	d81a      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d022      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80072cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d0:	d115      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d6:	3308      	adds	r3, #8
 80072d8:	2101      	movs	r1, #1
 80072da:	4618      	mov	r0, r3
 80072dc:	f002 f878 	bl	80093d0 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072e6:	e015      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ec:	3328      	adds	r3, #40	; 0x28
 80072ee:	2101      	movs	r1, #1
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 f91f 	bl	8009534 <RCCEx_PLL3_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072fc:	e00a      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007304:	e006      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800731c:	4ba3      	ldr	r3, [pc, #652]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800731e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007320:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800732c:	4a9f      	ldr	r2, [pc, #636]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800732e:	430b      	orrs	r3, r1
 8007330:	6593      	str	r3, [r2, #88]	; 0x58
 8007332:	e003      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800733c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800734c:	2300      	movs	r3, #0
 800734e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007356:	460b      	mov	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	d037      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007366:	d00e      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736c:	d816      	bhi.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007376:	d111      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007378:	4b8c      	ldr	r3, [pc, #560]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a8b      	ldr	r2, [pc, #556]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800737e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007384:	e00f      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738a:	3308      	adds	r3, #8
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f002 f81e 	bl	80093d0 <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800739a:	e004      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073a2:	e000      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073ae:	4b7f      	ldr	r3, [pc, #508]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	4a7b      	ldr	r2, [pc, #492]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073be:	430b      	orrs	r3, r1
 80073c0:	6513      	str	r3, [r2, #80]	; 0x50
 80073c2:	e003      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80073d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d039      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d81c      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007439 	.word	0x08007439
 8007400:	0800740d 	.word	0x0800740d
 8007404:	0800741b 	.word	0x0800741b
 8007408:	08007439 	.word	0x08007439
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4b67      	ldr	r3, [pc, #412]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a66      	ldr	r2, [pc, #408]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007418:	e00f      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741e:	3308      	adds	r3, #8
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f001 ffd4 	bl	80093d0 <RCCEx_PLL2_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800742e:	e004      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007442:	4b5a      	ldr	r3, [pc, #360]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007446:	f023 0103 	bic.w	r1, r3, #3
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	4a56      	ldr	r2, [pc, #344]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007452:	430b      	orrs	r3, r1
 8007454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800745c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800746c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007476:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	f000 809f 	beq.w	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007482:	4b4b      	ldr	r3, [pc, #300]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a4a      	ldr	r2, [pc, #296]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800748c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800748e:	f7fa fd07 	bl	8001ea0 <HAL_GetTick>
 8007492:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007496:	e00b      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007498:	f7fa fd02 	bl	8001ea0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b64      	cmp	r3, #100	; 0x64
 80074a6:	d903      	bls.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074ae:	e005      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b0:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0ed      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80074bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d179      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074c4:	4b39      	ldr	r3, [pc, #228]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074d0:	4053      	eors	r3, r2
 80074d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d015      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074da:	4b34      	ldr	r3, [pc, #208]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074e6:	4b31      	ldr	r3, [pc, #196]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a30      	ldr	r2, [pc, #192]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074f2:	4b2e      	ldr	r3, [pc, #184]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a2d      	ldr	r2, [pc, #180]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074fe:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007500:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007504:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800750e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007512:	d118      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fa fcc4 	bl	8001ea0 <HAL_GetTick>
 8007518:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800751c:	e00d      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800751e:	f7fa fcbf 	bl	8001ea0 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007528:	1ad2      	subs	r2, r2, r3
 800752a:	f241 3388 	movw	r3, #5000	; 0x1388
 800752e:	429a      	cmp	r2, r3
 8007530:	d903      	bls.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007538:	e005      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800753a:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0eb      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800754a:	2b00      	cmp	r3, #0
 800754c:	d129      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755e:	d10e      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007570:	091a      	lsrs	r2, r3, #4
 8007572:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007574:	4013      	ands	r3, r2
 8007576:	4a0d      	ldr	r2, [pc, #52]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6113      	str	r3, [r2, #16]
 800757c:	e005      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800757e:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	4a0a      	ldr	r2, [pc, #40]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007584:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007588:	6113      	str	r3, [r2, #16]
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800758c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800759a:	4a04      	ldr	r2, [pc, #16]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759c:	430b      	orrs	r3, r1
 800759e:	6713      	str	r3, [r2, #112]	; 0x70
 80075a0:	e00e      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80075aa:	e009      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80075ac:	58024400 	.word	0x58024400
 80075b0:	58024800 	.word	0x58024800
 80075b4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f002 0301 	and.w	r3, r2, #1
 80075cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075d0:	2300      	movs	r3, #0
 80075d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075da:	460b      	mov	r3, r1
 80075dc:	4313      	orrs	r3, r2
 80075de:	f000 8089 	beq.w	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e8:	2b28      	cmp	r3, #40	; 0x28
 80075ea:	d86b      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	080076cd 	.word	0x080076cd
 80075f8:	080076c5 	.word	0x080076c5
 80075fc:	080076c5 	.word	0x080076c5
 8007600:	080076c5 	.word	0x080076c5
 8007604:	080076c5 	.word	0x080076c5
 8007608:	080076c5 	.word	0x080076c5
 800760c:	080076c5 	.word	0x080076c5
 8007610:	080076c5 	.word	0x080076c5
 8007614:	08007699 	.word	0x08007699
 8007618:	080076c5 	.word	0x080076c5
 800761c:	080076c5 	.word	0x080076c5
 8007620:	080076c5 	.word	0x080076c5
 8007624:	080076c5 	.word	0x080076c5
 8007628:	080076c5 	.word	0x080076c5
 800762c:	080076c5 	.word	0x080076c5
 8007630:	080076c5 	.word	0x080076c5
 8007634:	080076af 	.word	0x080076af
 8007638:	080076c5 	.word	0x080076c5
 800763c:	080076c5 	.word	0x080076c5
 8007640:	080076c5 	.word	0x080076c5
 8007644:	080076c5 	.word	0x080076c5
 8007648:	080076c5 	.word	0x080076c5
 800764c:	080076c5 	.word	0x080076c5
 8007650:	080076c5 	.word	0x080076c5
 8007654:	080076cd 	.word	0x080076cd
 8007658:	080076c5 	.word	0x080076c5
 800765c:	080076c5 	.word	0x080076c5
 8007660:	080076c5 	.word	0x080076c5
 8007664:	080076c5 	.word	0x080076c5
 8007668:	080076c5 	.word	0x080076c5
 800766c:	080076c5 	.word	0x080076c5
 8007670:	080076c5 	.word	0x080076c5
 8007674:	080076cd 	.word	0x080076cd
 8007678:	080076c5 	.word	0x080076c5
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076c5 	.word	0x080076c5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076c5 	.word	0x080076c5
 800768c:	080076c5 	.word	0x080076c5
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076cd 	.word	0x080076cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	3308      	adds	r3, #8
 800769e:	2101      	movs	r1, #1
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 fe95 	bl	80093d0 <RCCEx_PLL2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076ac:	e00f      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b2:	3328      	adds	r3, #40	; 0x28
 80076b4:	2101      	movs	r1, #1
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 ff3c 	bl	8009534 <RCCEx_PLL3_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076d6:	4bbf      	ldr	r3, [pc, #764]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e4:	4abb      	ldr	r2, [pc, #748]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e6:	430b      	orrs	r3, r1
 80076e8:	6553      	str	r3, [r2, #84]	; 0x54
 80076ea:	e003      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f002 0302 	and.w	r3, r2, #2
 8007700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007704:	2300      	movs	r3, #0
 8007706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800770a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800770e:	460b      	mov	r3, r1
 8007710:	4313      	orrs	r3, r2
 8007712:	d041      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771a:	2b05      	cmp	r3, #5
 800771c:	d824      	bhi.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800771e:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007771 	.word	0x08007771
 8007728:	0800773d 	.word	0x0800773d
 800772c:	08007753 	.word	0x08007753
 8007730:	08007771 	.word	0x08007771
 8007734:	08007771 	.word	0x08007771
 8007738:	08007771 	.word	0x08007771
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007740:	3308      	adds	r3, #8
 8007742:	2101      	movs	r1, #1
 8007744:	4618      	mov	r0, r3
 8007746:	f001 fe43 	bl	80093d0 <RCCEx_PLL2_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007750:	e00f      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007756:	3328      	adds	r3, #40	; 0x28
 8007758:	2101      	movs	r1, #1
 800775a:	4618      	mov	r0, r3
 800775c:	f001 feea 	bl	8009534 <RCCEx_PLL3_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007766:	e004      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800776e:	e000      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800777a:	4b96      	ldr	r3, [pc, #600]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f023 0107 	bic.w	r1, r3, #7
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007788:	4a92      	ldr	r2, [pc, #584]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800778a:	430b      	orrs	r3, r1
 800778c:	6553      	str	r3, [r2, #84]	; 0x54
 800778e:	e003      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007794:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f002 0304 	and.w	r3, r2, #4
 80077a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	d044      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	d825      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	08007819 	.word	0x08007819
 80077d0:	080077e5 	.word	0x080077e5
 80077d4:	080077fb 	.word	0x080077fb
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e8:	3308      	adds	r3, #8
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fdef 	bl	80093d0 <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077fe:	3328      	adds	r3, #40	; 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 fe96 	bl	8009534 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007822:	4b6c      	ldr	r3, [pc, #432]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007826:	f023 0107 	bic.w	r1, r3, #7
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007832:	4a68      	ldr	r2, [pc, #416]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007834:	430b      	orrs	r3, r1
 8007836:	6593      	str	r3, [r2, #88]	; 0x58
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800783e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f002 0320 	and.w	r3, r2, #32
 800784e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800785c:	460b      	mov	r3, r1
 800785e:	4313      	orrs	r3, r2
 8007860:	d055      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786e:	d033      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007874:	d82c      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d02f      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800787c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007880:	d826      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007886:	d02b      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800788c:	d820      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800788e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007892:	d012      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007898:	d81a      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d022      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800789e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a2:	d115      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a8:	3308      	adds	r3, #8
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fd8f 	bl	80093d0 <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078b8:	e015      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	3328      	adds	r3, #40	; 0x28
 80078c0:	2102      	movs	r1, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 fe36 	bl	8009534 <RCCEx_PLL3_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078ce:	e00a      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078d6:	e006      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10b      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078ee:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fe:	4a35      	ldr	r2, [pc, #212]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6553      	str	r3, [r2, #84]	; 0x54
 8007904:	e003      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800790a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800791a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800791e:	2300      	movs	r3, #0
 8007920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007924:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007928:	460b      	mov	r3, r1
 800792a:	4313      	orrs	r3, r2
 800792c:	d058      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007936:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800793a:	d033      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800793c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007940:	d82c      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007946:	d02f      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d826      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800794e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007952:	d02b      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007958:	d820      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800795a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795e:	d012      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007964:	d81a      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d022      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800796a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796e:	d115      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	3308      	adds	r3, #8
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f001 fd29 	bl	80093d0 <RCCEx_PLL2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007984:	e015      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798a:	3328      	adds	r3, #40	; 0x28
 800798c:	2102      	movs	r1, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fdd0 	bl	8009534 <RCCEx_PLL3_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800799a:	e00a      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a2:	e006      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079a4:	bf00      	nop
 80079a6:	e004      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079a8:	bf00      	nop
 80079aa:	e002      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079ac:	bf00      	nop
 80079ae:	e000      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10e      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079be:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ca:	4a02      	ldr	r2, [pc, #8]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6593      	str	r3, [r2, #88]	; 0x58
 80079d0:	e006      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80079ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d055      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a0c:	d033      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a12:	d82c      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a18:	d02f      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1e:	d826      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a24:	d02b      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a2a:	d820      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a30:	d012      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a36:	d81a      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d022      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a40:	d115      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a46:	3308      	adds	r3, #8
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 fcc0 	bl	80093d0 <RCCEx_PLL2_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a56:	e015      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5c:	3328      	adds	r3, #40	; 0x28
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 fd67 	bl	8009534 <RCCEx_PLL3_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a74:	e006      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a76:	bf00      	nop
 8007a78:	e004      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e002      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a8c:	4ba1      	ldr	r3, [pc, #644]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a90:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a9c:	4a9d      	ldr	r2, [pc, #628]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8007aa2:	e003      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f002 0308 	and.w	r3, r2, #8
 8007ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ac2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	d01e      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ade:	3328      	adds	r3, #40	; 0x28
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 fd26 	bl	8009534 <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007af4:	4b87      	ldr	r3, [pc, #540]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b04:	4a83      	ldr	r2, [pc, #524]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f002 0310 	and.w	r3, r2, #16
 8007b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007b24:	460b      	mov	r3, r1
 8007b26:	4313      	orrs	r3, r2
 8007b28:	d01e      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b36:	d10c      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3c:	3328      	adds	r3, #40	; 0x28
 8007b3e:	2102      	movs	r1, #2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 fcf7 	bl	8009534 <RCCEx_PLL3_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b52:	4b70      	ldr	r3, [pc, #448]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b62:	4a6c      	ldr	r2, [pc, #432]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d03e      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b94:	d022      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b9a:	d81b      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba4:	d00b      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007ba6:	e015      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bac:	3308      	adds	r3, #8
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 fc0d 	bl	80093d0 <RCCEx_PLL2_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bbc:	e00f      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc2:	3328      	adds	r3, #40	; 0x28
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 fcb4 	bl	8009534 <RCCEx_PLL3_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bda:	e000      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007be6:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bf6:	4a47      	ldr	r2, [pc, #284]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8007bfc:	e003      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007c12:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c14:	2300      	movs	r3, #0
 8007c16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	d03b      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c2e:	d01f      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c34:	d818      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c3a:	d003      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c40:	d007      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c44:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4a32      	ldr	r2, [pc, #200]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c50:	e00f      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c56:	3328      	adds	r3, #40	; 0x28
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 fc6a 	bl	8009534 <RCCEx_PLL3_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c66:	e004      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c6e:	e000      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c7a:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8a:	4a22      	ldr	r2, [pc, #136]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	6553      	str	r3, [r2, #84]	; 0x54
 8007c90:	e003      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007ca6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ca8:	2300      	movs	r3, #0
 8007caa:	677b      	str	r3, [r7, #116]	; 0x74
 8007cac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	d034      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc4:	d007      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007cc6:	e011      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cd4:	e00e      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cda:	3308      	adds	r3, #8
 8007cdc:	2102      	movs	r1, #2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fb76 	bl	80093d0 <RCCEx_PLL2_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cea:	e003      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10d      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0a:	4a02      	ldr	r2, [pc, #8]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d10:	e006      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d12:	bf00      	nop
 8007d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d2e:	2300      	movs	r3, #0
 8007d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007d36:	460b      	mov	r3, r1
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	d00c      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d40:	3328      	adds	r3, #40	; 0x28
 8007d42:	2102      	movs	r1, #2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 fbf5 	bl	8009534 <RCCEx_PLL3_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007d62:	663b      	str	r3, [r7, #96]	; 0x60
 8007d64:	2300      	movs	r3, #0
 8007d66:	667b      	str	r3, [r7, #100]	; 0x64
 8007d68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d038      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7e:	d018      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d84:	d811      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8a:	d014      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d90:	d80b      	bhi.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d011      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9c:	4bc3      	ldr	r3, [pc, #780]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	4ac2      	ldr	r2, [pc, #776]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007da8:	e008      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007db0:	e004      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007db2:	bf00      	nop
 8007db4:	e002      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dc4:	4bb9      	ldr	r3, [pc, #740]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dd4:	4ab5      	ldr	r2, [pc, #724]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	6553      	str	r3, [r2, #84]	; 0x54
 8007dda:	e003      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007df2:	2300      	movs	r3, #0
 8007df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007df6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	d009      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e00:	4baa      	ldr	r3, [pc, #680]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	4aa7      	ldr	r2, [pc, #668]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007e20:	653b      	str	r3, [r7, #80]	; 0x50
 8007e22:	2300      	movs	r3, #0
 8007e24:	657b      	str	r3, [r7, #84]	; 0x54
 8007e26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	d00a      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e30:	4b9e      	ldr	r3, [pc, #632]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e40:	4a9a      	ldr	r2, [pc, #616]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e54:	2300      	movs	r3, #0
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e62:	4b92      	ldr	r3, [pc, #584]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e66:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e70:	4a8e      	ldr	r2, [pc, #568]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e72:	430b      	orrs	r3, r1
 8007e74:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007e82:	643b      	str	r3, [r7, #64]	; 0x40
 8007e84:	2300      	movs	r3, #0
 8007e86:	647b      	str	r3, [r7, #68]	; 0x44
 8007e88:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	d00e      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e92:	4b86      	ldr	r3, [pc, #536]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	4a85      	ldr	r2, [pc, #532]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e9c:	6113      	str	r3, [r2, #16]
 8007e9e:	4b83      	ldr	r3, [pc, #524]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea0:	6919      	ldr	r1, [r3, #16]
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007eaa:	4a80      	ldr	r2, [pc, #512]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	d009      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ecc:	4b77      	ldr	r3, [pc, #476]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eda:	4a74      	ldr	r2, [pc, #464]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007edc:	430b      	orrs	r3, r1
 8007ede:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007eec:	633b      	str	r3, [r7, #48]	; 0x30
 8007eee:	2300      	movs	r3, #0
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	d00a      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007efc:	4b6b      	ldr	r3, [pc, #428]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f00:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	4a67      	ldr	r2, [pc, #412]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f24:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	d011      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f32:	3308      	adds	r3, #8
 8007f34:	2100      	movs	r1, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fa4a 	bl	80093d0 <RCCEx_PLL2_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	6239      	str	r1, [r7, #32]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
 8007f64:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	d011      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	3308      	adds	r3, #8
 8007f74:	2101      	movs	r1, #1
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 fa2a 	bl	80093d0 <RCCEx_PLL2_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	61b9      	str	r1, [r7, #24]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4313      	orrs	r3, r2
 8007fac:	d011      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fa0a 	bl	80093d0 <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	6139      	str	r1, [r7, #16]
 8007fde:	f003 0308 	and.w	r3, r3, #8
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4313      	orrs	r3, r2
 8007fec:	d011      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	3328      	adds	r3, #40	; 0x28
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fa9c 	bl	8009534 <RCCEx_PLL3_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800800e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	2100      	movs	r1, #0
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008028:	460b      	mov	r3, r1
 800802a:	4313      	orrs	r3, r2
 800802c:	d011      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008032:	3328      	adds	r3, #40	; 0x28
 8008034:	2101      	movs	r1, #1
 8008036:	4618      	mov	r0, r3
 8008038:	f001 fa7c 	bl	8009534 <RCCEx_PLL3_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800804e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	2100      	movs	r1, #0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008068:	460b      	mov	r3, r1
 800806a:	4313      	orrs	r3, r2
 800806c:	d011      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008072:	3328      	adds	r3, #40	; 0x28
 8008074:	2102      	movs	r1, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fa5c 	bl	8009534 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800808e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008092:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	e000      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80080a6:	46bd      	mov	sp, r7
 80080a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ac:	58024400 	.word	0x58024400

080080b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b090      	sub	sp, #64	; 0x40
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080be:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80080c2:	430b      	orrs	r3, r1
 80080c4:	f040 8094 	bne.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80080c8:	4b9e      	ldr	r3, [pc, #632]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	f200 8087 	bhi.w	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	080080f5 	.word	0x080080f5
 80080e4:	0800811d 	.word	0x0800811d
 80080e8:	08008145 	.word	0x08008145
 80080ec:	080081e1 	.word	0x080081e1
 80080f0:	0800816d 	.word	0x0800816d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080f4:	4b93      	ldr	r3, [pc, #588]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008100:	d108      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008106:	4618      	mov	r0, r3
 8008108:	f001 f810 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008110:	f000 bd45 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008118:	f000 bd41 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800811c:	4b89      	ldr	r3, [pc, #548]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008128:	d108      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800812a:	f107 0318 	add.w	r3, r7, #24
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fd54 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008138:	f000 bd31 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008140:	f000 bd2d 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008144:	4b7f      	ldr	r3, [pc, #508]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008150:	d108      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008152:	f107 030c 	add.w	r3, r7, #12
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fe94 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008160:	f000 bd1d 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008168:	f000 bd19 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800816c:	4b75      	ldr	r3, [pc, #468]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800816e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008174:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008176:	4b73      	ldr	r3, [pc, #460]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b04      	cmp	r3, #4
 8008180:	d10c      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008188:	4b6e      	ldr	r3, [pc, #440]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	4a6d      	ldr	r2, [pc, #436]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819a:	e01f      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800819c:	4b69      	ldr	r3, [pc, #420]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081b2:	4b66      	ldr	r3, [pc, #408]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b6:	e011      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081b8:	4b62      	ldr	r3, [pc, #392]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c4:	d106      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80081c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081cc:	d102      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081ce:	4b60      	ldr	r3, [pc, #384]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d2:	e003      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081d8:	f000 bce1 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081dc:	f000 bcdf 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081e0:	4b5c      	ldr	r3, [pc, #368]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e4:	f000 bcdb 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ec:	f000 bcd7 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80081f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80081f8:	430b      	orrs	r3, r1
 80081fa:	f040 80ad 	bne.w	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80081fe:	4b51      	ldr	r3, [pc, #324]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008202:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008206:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800820e:	d056      	beq.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008216:	f200 8090 	bhi.w	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	2bc0      	cmp	r3, #192	; 0xc0
 800821e:	f000 8088 	beq.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	2bc0      	cmp	r3, #192	; 0xc0
 8008226:	f200 8088 	bhi.w	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	2b80      	cmp	r3, #128	; 0x80
 800822e:	d032      	beq.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	f200 8081 	bhi.w	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	2b40      	cmp	r3, #64	; 0x40
 8008242:	d014      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008244:	e079      	b.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008246:	4b3f      	ldr	r3, [pc, #252]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008252:	d108      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008258:	4618      	mov	r0, r3
 800825a:	f000 ff67 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008262:	f000 bc9c 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826a:	f000 bc98 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800826e:	4b35      	ldr	r3, [pc, #212]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800827a:	d108      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827c:	f107 0318 	add.w	r3, r7, #24
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fcab 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828a:	f000 bc88 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008292:	f000 bc84 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008296:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800829e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a2:	d108      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fdeb 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b2:	f000 bc74 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b6:	2300      	movs	r3, #0
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ba:	f000 bc70 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082be:	4b21      	ldr	r3, [pc, #132]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d10c      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80082d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082da:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	08db      	lsrs	r3, r3, #3
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	4a18      	ldr	r2, [pc, #96]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ec:	e01f      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fa:	d106      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008302:	d102      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008304:	4b11      	ldr	r3, [pc, #68]	; (800834c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	e011      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830a:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008316:	d106      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008324:	e003      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800832a:	f000 bc38 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800832e:	f000 bc36 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008336:	f000 bc32 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833e:	f000 bc2e 	b.w	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008342:	bf00      	nop
 8008344:	58024400 	.word	0x58024400
 8008348:	03d09000 	.word	0x03d09000
 800834c:	003d0900 	.word	0x003d0900
 8008350:	017d7840 	.word	0x017d7840
 8008354:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800835c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008360:	430b      	orrs	r3, r1
 8008362:	f040 809c 	bne.w	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008366:	4b9e      	ldr	r3, [pc, #632]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800836e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008376:	d054      	beq.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800837e:	f200 808b 	bhi.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008388:	f000 8083 	beq.w	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008392:	f200 8081 	bhi.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800839c:	d02f      	beq.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a4:	d878      	bhi.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083b2:	d012      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80083b4:	e070      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083b6:	4b8a      	ldr	r3, [pc, #552]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083c2:	d107      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 feaf 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d2:	e3e4      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d8:	e3e1      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083da:	4b81      	ldr	r3, [pc, #516]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083e6:	d107      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e8:	f107 0318 	add.w	r3, r7, #24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fbf5 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f6:	e3d2      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fc:	e3cf      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083fe:	4b78      	ldr	r3, [pc, #480]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840a:	d107      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fd37 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841a:	e3c0      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008420:	e3bd      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008422:	4b6f      	ldr	r3, [pc, #444]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800842a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800842c:	4b6c      	ldr	r3, [pc, #432]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b04      	cmp	r3, #4
 8008436:	d10c      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800843e:	4b68      	ldr	r3, [pc, #416]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	08db      	lsrs	r3, r3, #3
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	4a66      	ldr	r2, [pc, #408]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800844a:	fa22 f303 	lsr.w	r3, r2, r3
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008450:	e01e      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008452:	4b63      	ldr	r3, [pc, #396]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845e:	d106      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008466:	d102      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008468:	4b5f      	ldr	r3, [pc, #380]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800846c:	e010      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800846e:	4b5c      	ldr	r3, [pc, #368]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800847a:	d106      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008482:	d102      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008484:	4b59      	ldr	r3, [pc, #356]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008488:	e002      	b.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800848e:	e386      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008490:	e385      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008492:	4b57      	ldr	r3, [pc, #348]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008496:	e382      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800849c:	e37f      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800849e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80084a6:	430b      	orrs	r3, r1
 80084a8:	f040 80a7 	bne.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80084ac:	4b4c      	ldr	r3, [pc, #304]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084bc:	d055      	beq.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084c4:	f200 8096 	bhi.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084ce:	f000 8084 	beq.w	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084d8:	f200 808c 	bhi.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084e2:	d030      	beq.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ea:	f200 8083 	bhi.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084fa:	d012      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80084fc:	e07a      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084fe:	4b38      	ldr	r3, [pc, #224]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800850a:	d107      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fe0b 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851a:	e340      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008520:	e33d      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008522:	4b2f      	ldr	r3, [pc, #188]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800852a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800852e:	d107      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008530:	f107 0318 	add.w	r3, r7, #24
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fb51 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853e:	e32e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008544:	e32b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008546:	4b26      	ldr	r3, [pc, #152]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800854e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008552:	d107      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008554:	f107 030c 	add.w	r3, r7, #12
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fc93 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008562:	e31c      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008568:	e319      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800856a:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800856c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008572:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008574:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b04      	cmp	r3, #4
 800857e:	d10c      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008586:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	08db      	lsrs	r3, r3, #3
 800858c:	f003 0303 	and.w	r3, r3, #3
 8008590:	4a14      	ldr	r2, [pc, #80]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008592:	fa22 f303 	lsr.w	r3, r2, r3
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008598:	e01e      	b.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800859a:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a6:	d106      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80085a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ae:	d102      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085b0:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085b4:	e010      	b.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085c2:	d106      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80085c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ca:	d102      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085cc:	4b07      	ldr	r3, [pc, #28]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d0:	e002      	b.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085d6:	e2e2      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085d8:	e2e1      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085de:	e2de      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085e0:	58024400 	.word	0x58024400
 80085e4:	03d09000 	.word	0x03d09000
 80085e8:	003d0900 	.word	0x003d0900
 80085ec:	017d7840 	.word	0x017d7840
 80085f0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f8:	e2d1      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80085fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085fe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008602:	430b      	orrs	r3, r1
 8008604:	f040 809c 	bne.w	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008608:	4b93      	ldr	r3, [pc, #588]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800860a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008610:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008618:	d054      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008620:	f200 808b 	bhi.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800862a:	f000 8083 	beq.w	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008634:	f200 8081 	bhi.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863e:	d02f      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008646:	d878      	bhi.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008654:	d012      	beq.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008656:	e070      	b.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008658:	4b7f      	ldr	r3, [pc, #508]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008664:	d107      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fd5e 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008674:	e293      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867a:	e290      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800867c:	4b76      	ldr	r3, [pc, #472]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008688:	d107      	bne.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868a:	f107 0318 	add.w	r3, r7, #24
 800868e:	4618      	mov	r0, r3
 8008690:	f000 faa4 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008698:	e281      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869e:	e27e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086a0:	4b6d      	ldr	r3, [pc, #436]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ac:	d107      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fbe6 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086bc:	e26f      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c2:	e26c      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086c4:	4b64      	ldr	r3, [pc, #400]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ce:	4b62      	ldr	r3, [pc, #392]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d10c      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d109      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e0:	4b5d      	ldr	r3, [pc, #372]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	4a5c      	ldr	r2, [pc, #368]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f2:	e01e      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086f4:	4b58      	ldr	r3, [pc, #352]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008700:	d106      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008708:	d102      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800870a:	4b55      	ldr	r3, [pc, #340]	; (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800870e:	e010      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008710:	4b51      	ldr	r3, [pc, #324]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800871c:	d106      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008724:	d102      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008726:	4b4f      	ldr	r3, [pc, #316]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800872a:	e002      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008730:	e235      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008732:	e234      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008734:	4b4c      	ldr	r3, [pc, #304]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008738:	e231      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800873e:	e22e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008744:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008748:	430b      	orrs	r3, r1
 800874a:	f040 808f 	bne.w	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800874e:	4b42      	ldr	r3, [pc, #264]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008752:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008756:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800875e:	d06b      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008766:	d874      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800876e:	d056      	beq.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008776:	d86c      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800877e:	d03b      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008786:	d864      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800878e:	d021      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008796:	d85c      	bhi.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a4:	d004      	beq.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80087a6:	e054      	b.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80087a8:	f7fe fa0a 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 80087ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087ae:	e1f6      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b0:	4b29      	ldr	r3, [pc, #164]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087bc:	d107      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087be:	f107 0318 	add.w	r3, r7, #24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fa0a 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087cc:	e1e7      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d2:	e1e4      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087d4:	4b20      	ldr	r3, [pc, #128]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e0:	d107      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e2:	f107 030c 	add.w	r3, r7, #12
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fb4c 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f0:	e1d5      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f6:	e1d2      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087f8:	4b17      	ldr	r3, [pc, #92]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b04      	cmp	r3, #4
 8008802:	d109      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008804:	4b14      	ldr	r3, [pc, #80]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	08db      	lsrs	r3, r3, #3
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	4a13      	ldr	r2, [pc, #76]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008810:	fa22 f303 	lsr.w	r3, r2, r3
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008816:	e1c2      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800881c:	e1bf      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800881e:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882a:	d102      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800882c:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008830:	e1b5      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008836:	e1b2      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008838:	4b07      	ldr	r3, [pc, #28]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008844:	d102      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800884a:	e1a8      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008850:	e1a5      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008856:	e1a2      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008858:	58024400 	.word	0x58024400
 800885c:	03d09000 	.word	0x03d09000
 8008860:	003d0900 	.word	0x003d0900
 8008864:	017d7840 	.word	0x017d7840
 8008868:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800886c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008870:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008874:	430b      	orrs	r3, r1
 8008876:	d173      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008878:	4b9c      	ldr	r3, [pc, #624]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008880:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008888:	d02f      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008890:	d863      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889e:	d012      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80088a0:	e05b      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a2:	4b92      	ldr	r3, [pc, #584]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088ae:	d107      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b0:	f107 0318 	add.w	r3, r7, #24
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 f991 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088be:	e16e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c4:	e16b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088c6:	4b89      	ldr	r3, [pc, #548]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d2:	d107      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d4:	f107 030c 	add.w	r3, r7, #12
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fad3 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e2:	e15c      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e8:	e159      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088ea:	4b80      	ldr	r3, [pc, #512]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088f4:	4b7d      	ldr	r3, [pc, #500]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d10c      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008906:	4b79      	ldr	r3, [pc, #484]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	08db      	lsrs	r3, r3, #3
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	4a77      	ldr	r2, [pc, #476]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008912:	fa22 f303 	lsr.w	r3, r2, r3
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008918:	e01e      	b.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800891a:	4b74      	ldr	r3, [pc, #464]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008926:	d106      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800892e:	d102      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008930:	4b70      	ldr	r3, [pc, #448]	; (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008934:	e010      	b.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008936:	4b6d      	ldr	r3, [pc, #436]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008942:	d106      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800894a:	d102      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800894c:	4b6a      	ldr	r3, [pc, #424]	; (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008950:	e002      	b.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008956:	e122      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008958:	e121      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800895e:	e11e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008964:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008968:	430b      	orrs	r3, r1
 800896a:	d133      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800896c:	4b5f      	ldr	r3, [pc, #380]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800896e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008974:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008982:	d012      	beq.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008984:	e023      	b.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008986:	4b59      	ldr	r3, [pc, #356]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008992:	d107      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fbc7 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a2:	e0fc      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a8:	e0f9      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089aa:	4b50      	ldr	r3, [pc, #320]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089b6:	d107      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b8:	f107 0318 	add.w	r3, r7, #24
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 f90d 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c6:	e0ea      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089cc:	e0e7      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d2:	e0e4      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80089d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80089dc:	430b      	orrs	r3, r1
 80089de:	f040 808d 	bne.w	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80089e2:	4b42      	ldr	r3, [pc, #264]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80089ea:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089f2:	d06b      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089fa:	d874      	bhi.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a02:	d056      	beq.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0a:	d86c      	bhi.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a12:	d03b      	beq.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a1a:	d864      	bhi.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a22:	d021      	beq.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a2a:	d85c      	bhi.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a38:	d004      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008a3a:	e054      	b.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a3c:	f000 f8b8 	bl	8008bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a40:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a42:	e0ac      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a44:	4b29      	ldr	r3, [pc, #164]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a50:	d107      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a52:	f107 0318 	add.w	r3, r7, #24
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f8c0 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a60:	e09d      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a66:	e09a      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a68:	4b20      	ldr	r3, [pc, #128]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a74:	d107      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fa02 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a84:	e08b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a8a:	e088      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a8c:	4b17      	ldr	r3, [pc, #92]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d109      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a98:	4b14      	ldr	r3, [pc, #80]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	08db      	lsrs	r3, r3, #3
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	4a13      	ldr	r2, [pc, #76]	; (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aaa:	e078      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab0:	e075      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ab2:	4b0e      	ldr	r3, [pc, #56]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abe:	d102      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ac0:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac4:	e06b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aca:	e068      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ade:	e05e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae4:	e05b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aea:	e058      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008aec:	58024400 	.word	0x58024400
 8008af0:	03d09000 	.word	0x03d09000
 8008af4:	003d0900 	.word	0x003d0900
 8008af8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b00:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008b04:	430b      	orrs	r3, r1
 8008b06:	d148      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b08:	4b27      	ldr	r3, [pc, #156]	; (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b18:	d02a      	beq.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b20:	d838      	bhi.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b2e:	d00d      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008b30:	e030      	b.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b32:	4b1d      	ldr	r3, [pc, #116]	; (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b3e:	d102      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b44:	e02b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b4a:	e028      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b4c:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b58:	d107      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fae4 	bl	800912c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b68:	e019      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b6e:	e016      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b70:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b7c:	d107      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b7e:	f107 0318 	add.w	r3, r7, #24
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f82a 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b8c:	e007      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b92:	e004      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b98:	e001      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3740      	adds	r7, #64	; 0x40
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	58024400 	.word	0x58024400
 8008bac:	017d7840 	.word	0x017d7840

08008bb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bb4:	f7fd ffd4 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	4904      	ldr	r1, [pc, #16]	; (8008bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	0801161c 	.word	0x0801161c

08008bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b089      	sub	sp, #36	; 0x24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008be4:	4ba1      	ldr	r3, [pc, #644]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0303 	and.w	r3, r3, #3
 8008bec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008bee:	4b9f      	ldr	r3, [pc, #636]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	0b1b      	lsrs	r3, r3, #12
 8008bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bfa:	4b9c      	ldr	r3, [pc, #624]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	091b      	lsrs	r3, r3, #4
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c06:	4b99      	ldr	r3, [pc, #612]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	08db      	lsrs	r3, r3, #3
 8008c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 8111 	beq.w	8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	f000 8083 	beq.w	8008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	f200 80a1 	bhi.w	8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d056      	beq.n	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c46:	e099      	b.n	8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c48:	4b88      	ldr	r3, [pc, #544]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d02d      	beq.n	8008cb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c54:	4b85      	ldr	r3, [pc, #532]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	08db      	lsrs	r3, r3, #3
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	4a84      	ldr	r2, [pc, #528]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
 8008c64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b7b      	ldr	r3, [pc, #492]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cae:	e087      	b.n	8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b6a      	ldr	r3, [pc, #424]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf2:	e065      	b.n	8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d06:	4b59      	ldr	r3, [pc, #356]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d36:	e043      	b.n	8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4a:	4b48      	ldr	r3, [pc, #288]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d7a:	e021      	b.n	8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8e:	4b37      	ldr	r3, [pc, #220]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	0a5b      	lsrs	r3, r3, #9
 8008dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de6:	ee17 2a90 	vmov	r2, s15
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008dee:	4b1f      	ldr	r3, [pc, #124]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	0c1b      	lsrs	r3, r3, #16
 8008df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e14:	ee17 2a90 	vmov	r2, s15
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e1c:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	0e1b      	lsrs	r3, r3, #24
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e42:	ee17 2a90 	vmov	r2, s15
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e4a:	e008      	b.n	8008e5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	609a      	str	r2, [r3, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	3724      	adds	r7, #36	; 0x24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	58024400 	.word	0x58024400
 8008e70:	03d09000 	.word	0x03d09000
 8008e74:	46000000 	.word	0x46000000
 8008e78:	4c742400 	.word	0x4c742400
 8008e7c:	4a742400 	.word	0x4a742400
 8008e80:	4bbebc20 	.word	0x4bbebc20

08008e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b089      	sub	sp, #36	; 0x24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e8c:	4ba1      	ldr	r3, [pc, #644]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e96:	4b9f      	ldr	r3, [pc, #636]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	0d1b      	lsrs	r3, r3, #20
 8008e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ea2:	4b9c      	ldr	r3, [pc, #624]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	0a1b      	lsrs	r3, r3, #8
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008eae:	4b99      	ldr	r3, [pc, #612]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	fb02 f303 	mul.w	r3, r2, r3
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8111 	beq.w	80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	f000 8083 	beq.w	8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	f200 80a1 	bhi.w	8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d056      	beq.n	8008f9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008eee:	e099      	b.n	8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ef0:	4b88      	ldr	r3, [pc, #544]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d02d      	beq.n	8008f58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008efc:	4b85      	ldr	r3, [pc, #532]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	08db      	lsrs	r3, r3, #3
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	4a84      	ldr	r2, [pc, #528]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f26:	4b7b      	ldr	r3, [pc, #492]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800911c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f56:	e087      	b.n	8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6a:	4b6a      	ldr	r3, [pc, #424]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800911c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f9a:	e065      	b.n	8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fae:	4b59      	ldr	r3, [pc, #356]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800911c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fde:	e043      	b.n	8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	ee07 3a90 	vmov	s15, r3
 8008fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff2:	4b48      	ldr	r3, [pc, #288]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009002:	ed97 6a03 	vldr	s12, [r7, #12]
 8009006:	eddf 5a45 	vldr	s11, [pc, #276]	; 800911c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800900a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009022:	e021      	b.n	8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009036:	4b37      	ldr	r3, [pc, #220]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009046:	ed97 6a03 	vldr	s12, [r7, #12]
 800904a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800911c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800904e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009066:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009068:	4b2a      	ldr	r3, [pc, #168]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800906a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906c:	0a5b      	lsrs	r3, r3, #9
 800906e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800907e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009082:	edd7 6a07 	vldr	s13, [r7, #28]
 8009086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800908a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800908e:	ee17 2a90 	vmov	r2, s15
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009096:	4b1f      	ldr	r3, [pc, #124]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	0c1b      	lsrs	r3, r3, #16
 800909c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090bc:	ee17 2a90 	vmov	r2, s15
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80090c4:	4b13      	ldr	r3, [pc, #76]	; (8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	0e1b      	lsrs	r3, r3, #24
 80090ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090de:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ea:	ee17 2a90 	vmov	r2, s15
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090f2:	e008      	b.n	8009106 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	609a      	str	r2, [r3, #8]
}
 8009106:	bf00      	nop
 8009108:	3724      	adds	r7, #36	; 0x24
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	58024400 	.word	0x58024400
 8009118:	03d09000 	.word	0x03d09000
 800911c:	46000000 	.word	0x46000000
 8009120:	4c742400 	.word	0x4c742400
 8009124:	4a742400 	.word	0x4a742400
 8009128:	4bbebc20 	.word	0x4bbebc20

0800912c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800912c:	b480      	push	{r7}
 800912e:	b089      	sub	sp, #36	; 0x24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009134:	4ba0      	ldr	r3, [pc, #640]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800913e:	4b9e      	ldr	r3, [pc, #632]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009142:	091b      	lsrs	r3, r3, #4
 8009144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009148:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800914a:	4b9b      	ldr	r3, [pc, #620]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009154:	4b98      	ldr	r3, [pc, #608]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009158:	08db      	lsrs	r3, r3, #3
 800915a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	fb02 f303 	mul.w	r3, r2, r3
 8009164:	ee07 3a90 	vmov	s15, r3
 8009168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8111 	beq.w	800939a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2b02      	cmp	r3, #2
 800917c:	f000 8083 	beq.w	8009286 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	2b02      	cmp	r3, #2
 8009184:	f200 80a1 	bhi.w	80092ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d056      	beq.n	8009242 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009194:	e099      	b.n	80092ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009196:	4b88      	ldr	r3, [pc, #544]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02d      	beq.n	80091fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091a2:	4b85      	ldr	r3, [pc, #532]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	4a83      	ldr	r2, [pc, #524]	; (80093bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091cc:	4b7a      	ldr	r3, [pc, #488]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d4:	ee07 3a90 	vmov	s15, r3
 80091d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80093c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091fc:	e087      	b.n	800930e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	ee07 3a90 	vmov	s15, r3
 8009204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009208:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80093c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800920c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009210:	4b69      	ldr	r3, [pc, #420]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009220:	ed97 6a03 	vldr	s12, [r7, #12]
 8009224:	eddf 5a66 	vldr	s11, [pc, #408]	; 80093c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800922c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009240:	e065      	b.n	800930e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009254:	4b58      	ldr	r3, [pc, #352]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925c:	ee07 3a90 	vmov	s15, r3
 8009260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009264:	ed97 6a03 	vldr	s12, [r7, #12]
 8009268:	eddf 5a55 	vldr	s11, [pc, #340]	; 80093c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800926c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009280:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009284:	e043      	b.n	800930e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	ee07 3a90 	vmov	s15, r3
 800928c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009290:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009298:	4b47      	ldr	r3, [pc, #284]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80093c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092c8:	e021      	b.n	800930e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80093c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80093c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800930c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800930e:	4b2a      	ldr	r3, [pc, #168]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	0a5b      	lsrs	r3, r3, #9
 8009314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009318:	ee07 3a90 	vmov	s15, r3
 800931c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009328:	edd7 6a07 	vldr	s13, [r7, #28]
 800932c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009334:	ee17 2a90 	vmov	r2, s15
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800933c:	4b1e      	ldr	r3, [pc, #120]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009356:	edd7 6a07 	vldr	s13, [r7, #28]
 800935a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800935e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009362:	ee17 2a90 	vmov	r2, s15
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800936a:	4b13      	ldr	r3, [pc, #76]	; (80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	0e1b      	lsrs	r3, r3, #24
 8009370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009384:	edd7 6a07 	vldr	s13, [r7, #28]
 8009388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800938c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009390:	ee17 2a90 	vmov	r2, s15
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009398:	e008      	b.n	80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	609a      	str	r2, [r3, #8]
}
 80093ac:	bf00      	nop
 80093ae:	3724      	adds	r7, #36	; 0x24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	58024400 	.word	0x58024400
 80093bc:	03d09000 	.word	0x03d09000
 80093c0:	46000000 	.word	0x46000000
 80093c4:	4c742400 	.word	0x4c742400
 80093c8:	4a742400 	.word	0x4a742400
 80093cc:	4bbebc20 	.word	0x4bbebc20

080093d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093de:	4b53      	ldr	r3, [pc, #332]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d101      	bne.n	80093ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e099      	b.n	8009522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093ee:	4b4f      	ldr	r3, [pc, #316]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a4e      	ldr	r2, [pc, #312]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80093f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fa:	f7f8 fd51 	bl	8001ea0 <HAL_GetTick>
 80093fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009400:	e008      	b.n	8009414 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009402:	f7f8 fd4d 	bl	8001ea0 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d901      	bls.n	8009414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e086      	b.n	8009522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009414:	4b45      	ldr	r3, [pc, #276]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1f0      	bne.n	8009402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009420:	4b42      	ldr	r3, [pc, #264]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	031b      	lsls	r3, r3, #12
 800942e:	493f      	ldr	r1, [pc, #252]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009430:	4313      	orrs	r3, r2
 8009432:	628b      	str	r3, [r1, #40]	; 0x28
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	3b01      	subs	r3, #1
 800943a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	3b01      	subs	r3, #1
 8009444:	025b      	lsls	r3, r3, #9
 8009446:	b29b      	uxth	r3, r3
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	3b01      	subs	r3, #1
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	3b01      	subs	r3, #1
 800945e:	061b      	lsls	r3, r3, #24
 8009460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009464:	4931      	ldr	r1, [pc, #196]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009466:	4313      	orrs	r3, r2
 8009468:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800946a:	4b30      	ldr	r3, [pc, #192]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	492d      	ldr	r1, [pc, #180]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009478:	4313      	orrs	r3, r2
 800947a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800947c:	4b2b      	ldr	r3, [pc, #172]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	f023 0220 	bic.w	r2, r3, #32
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	4928      	ldr	r1, [pc, #160]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 800948a:	4313      	orrs	r3, r2
 800948c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800948e:	4b27      	ldr	r3, [pc, #156]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	4a26      	ldr	r2, [pc, #152]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009494:	f023 0310 	bic.w	r3, r3, #16
 8009498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800949a:	4b24      	ldr	r3, [pc, #144]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 800949c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800949e:	4b24      	ldr	r3, [pc, #144]	; (8009530 <RCCEx_PLL2_Config+0x160>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	69d2      	ldr	r2, [r2, #28]
 80094a6:	00d2      	lsls	r2, r2, #3
 80094a8:	4920      	ldr	r1, [pc, #128]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094ae:	4b1f      	ldr	r3, [pc, #124]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	4a1e      	ldr	r2, [pc, #120]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094b4:	f043 0310 	orr.w	r3, r3, #16
 80094b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d106      	bne.n	80094ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094c0:	4b1a      	ldr	r3, [pc, #104]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	4a19      	ldr	r2, [pc, #100]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094cc:	e00f      	b.n	80094ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d106      	bne.n	80094e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094d4:	4b15      	ldr	r3, [pc, #84]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	4a14      	ldr	r2, [pc, #80]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094e0:	e005      	b.n	80094ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	4a11      	ldr	r2, [pc, #68]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a0e      	ldr	r2, [pc, #56]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 80094f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094fa:	f7f8 fcd1 	bl	8001ea0 <HAL_GetTick>
 80094fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009500:	e008      	b.n	8009514 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009502:	f7f8 fccd 	bl	8001ea0 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d901      	bls.n	8009514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e006      	b.n	8009522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009514:	4b05      	ldr	r3, [pc, #20]	; (800952c <RCCEx_PLL2_Config+0x15c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0f0      	beq.n	8009502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	58024400 	.word	0x58024400
 8009530:	ffff0007 	.word	0xffff0007

08009534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009542:	4b53      	ldr	r3, [pc, #332]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b03      	cmp	r3, #3
 800954c:	d101      	bne.n	8009552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e099      	b.n	8009686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009552:	4b4f      	ldr	r3, [pc, #316]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a4e      	ldr	r2, [pc, #312]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800955c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800955e:	f7f8 fc9f 	bl	8001ea0 <HAL_GetTick>
 8009562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009564:	e008      	b.n	8009578 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009566:	f7f8 fc9b 	bl	8001ea0 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e086      	b.n	8009686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009578:	4b45      	ldr	r3, [pc, #276]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f0      	bne.n	8009566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009584:	4b42      	ldr	r3, [pc, #264]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	051b      	lsls	r3, r3, #20
 8009592:	493f      	ldr	r1, [pc, #252]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009594:	4313      	orrs	r3, r2
 8009596:	628b      	str	r3, [r1, #40]	; 0x28
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	3b01      	subs	r3, #1
 800959e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	025b      	lsls	r3, r3, #9
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	041b      	lsls	r3, r3, #16
 80095b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095ba:	431a      	orrs	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	061b      	lsls	r3, r3, #24
 80095c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095c8:	4931      	ldr	r1, [pc, #196]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095ce:	4b30      	ldr	r3, [pc, #192]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	492d      	ldr	r1, [pc, #180]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095e0:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	4928      	ldr	r1, [pc, #160]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095f2:	4b27      	ldr	r3, [pc, #156]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	4a26      	ldr	r2, [pc, #152]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 80095f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095fe:	4b24      	ldr	r3, [pc, #144]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009602:	4b24      	ldr	r3, [pc, #144]	; (8009694 <RCCEx_PLL3_Config+0x160>)
 8009604:	4013      	ands	r3, r2
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	69d2      	ldr	r2, [r2, #28]
 800960a:	00d2      	lsls	r2, r2, #3
 800960c:	4920      	ldr	r1, [pc, #128]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800960e:	4313      	orrs	r3, r2
 8009610:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009612:	4b1f      	ldr	r3, [pc, #124]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	4a1e      	ldr	r2, [pc, #120]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800961c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009624:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	4a19      	ldr	r2, [pc, #100]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800962a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800962e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009630:	e00f      	b.n	8009652 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d106      	bne.n	8009646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009638:	4b15      	ldr	r3, [pc, #84]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	4a14      	ldr	r2, [pc, #80]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800963e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009644:	e005      	b.n	8009652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	4a11      	ldr	r2, [pc, #68]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800964c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009650:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a0e      	ldr	r2, [pc, #56]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 8009658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800965c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800965e:	f7f8 fc1f 	bl	8001ea0 <HAL_GetTick>
 8009662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009664:	e008      	b.n	8009678 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009666:	f7f8 fc1b 	bl	8001ea0 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d901      	bls.n	8009678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e006      	b.n	8009686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <RCCEx_PLL3_Config+0x15c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0f0      	beq.n	8009666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	58024400 	.word	0x58024400
 8009694:	ffff0007 	.word	0xffff0007

08009698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e10f      	b.n	80098ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a87      	ldr	r2, [pc, #540]	; (80098d4 <HAL_SPI_Init+0x23c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00f      	beq.n	80096da <HAL_SPI_Init+0x42>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a86      	ldr	r2, [pc, #536]	; (80098d8 <HAL_SPI_Init+0x240>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d00a      	beq.n	80096da <HAL_SPI_Init+0x42>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a84      	ldr	r2, [pc, #528]	; (80098dc <HAL_SPI_Init+0x244>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d005      	beq.n	80096da <HAL_SPI_Init+0x42>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	2b0f      	cmp	r3, #15
 80096d4:	d901      	bls.n	80096da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e0f7      	b.n	80098ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f900 	bl	80098e0 <SPI_GetPacketSize>
 80096e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a7b      	ldr	r2, [pc, #492]	; (80098d4 <HAL_SPI_Init+0x23c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d00c      	beq.n	8009706 <HAL_SPI_Init+0x6e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a79      	ldr	r2, [pc, #484]	; (80098d8 <HAL_SPI_Init+0x240>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d007      	beq.n	8009706 <HAL_SPI_Init+0x6e>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a78      	ldr	r2, [pc, #480]	; (80098dc <HAL_SPI_Init+0x244>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d002      	beq.n	8009706 <HAL_SPI_Init+0x6e>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b08      	cmp	r3, #8
 8009704:	d811      	bhi.n	800972a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800970a:	4a72      	ldr	r2, [pc, #456]	; (80098d4 <HAL_SPI_Init+0x23c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d009      	beq.n	8009724 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a70      	ldr	r2, [pc, #448]	; (80098d8 <HAL_SPI_Init+0x240>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d004      	beq.n	8009724 <HAL_SPI_Init+0x8c>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a6f      	ldr	r2, [pc, #444]	; (80098dc <HAL_SPI_Init+0x244>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d104      	bne.n	800972e <HAL_SPI_Init+0x96>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b10      	cmp	r3, #16
 8009728:	d901      	bls.n	800972e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0cd      	b.n	80098ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f7 ff48 	bl	80015d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0201 	bic.w	r2, r2, #1
 800975e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800976a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009774:	d119      	bne.n	80097aa <HAL_SPI_Init+0x112>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800977e:	d103      	bne.n	8009788 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009784:	2b00      	cmp	r3, #0
 8009786:	d008      	beq.n	800979a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10c      	bne.n	80097aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009798:	d107      	bne.n	80097aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <HAL_SPI_Init+0x13e>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	2b06      	cmp	r3, #6
 80097bc:	d90b      	bls.n	80097d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e007      	b.n	80097e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69da      	ldr	r2, [r3, #28]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ee:	431a      	orrs	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f8:	ea42 0103 	orr.w	r1, r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	431a      	orrs	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	431a      	orrs	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009846:	ea42 0103 	orr.w	r1, r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d113      	bne.n	8009886 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009870:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009884:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0201 	bic.w	r2, r2, #1
 8009894:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00a      	beq.n	80098b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	40013000 	.word	0x40013000
 80098d8:	40003800 	.word	0x40003800
 80098dc:	40003c00 	.word	0x40003c00

080098e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	3301      	adds	r3, #1
 80098f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	3301      	adds	r3, #1
 80098f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	3307      	adds	r3, #7
 80098fe:	08db      	lsrs	r3, r3, #3
 8009900:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	fb02 f303 	mul.w	r3, r2, r3
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e049      	b.n	80099bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7f7 feb3 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f000 fd99 	bl	800a48c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d001      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e054      	b.n	8009a86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a26      	ldr	r2, [pc, #152]	; (8009a94 <HAL_TIM_Base_Start_IT+0xd0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d022      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a06:	d01d      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a22      	ldr	r2, [pc, #136]	; (8009a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d018      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a21      	ldr	r2, [pc, #132]	; (8009a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00e      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d009      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1c      	ldr	r2, [pc, #112]	; (8009aa8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a1b      	ldr	r2, [pc, #108]	; (8009aac <HAL_TIM_Base_Start_IT+0xe8>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d115      	bne.n	8009a70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689a      	ldr	r2, [r3, #8]
 8009a4a:	4b19      	ldr	r3, [pc, #100]	; (8009ab0 <HAL_TIM_Base_Start_IT+0xec>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d015      	beq.n	8009a82 <HAL_TIM_Base_Start_IT+0xbe>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5c:	d011      	beq.n	8009a82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	e008      	b.n	8009a82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e000      	b.n	8009a84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	40010000 	.word	0x40010000
 8009a98:	40000400 	.word	0x40000400
 8009a9c:	40000800 	.word	0x40000800
 8009aa0:	40000c00 	.word	0x40000c00
 8009aa4:	40010400 	.word	0x40010400
 8009aa8:	40001800 	.word	0x40001800
 8009aac:	40014000 	.word	0x40014000
 8009ab0:	00010007 	.word	0x00010007

08009ab4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d109      	bne.n	8009adc <HAL_TIM_OC_Start_IT+0x28>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	bf14      	ite	ne
 8009ad4:	2301      	movne	r3, #1
 8009ad6:	2300      	moveq	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	e03c      	b.n	8009b56 <HAL_TIM_OC_Start_IT+0xa2>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d109      	bne.n	8009af6 <HAL_TIM_OC_Start_IT+0x42>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	bf14      	ite	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	2300      	moveq	r3, #0
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	e02f      	b.n	8009b56 <HAL_TIM_OC_Start_IT+0xa2>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d109      	bne.n	8009b10 <HAL_TIM_OC_Start_IT+0x5c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	bf14      	ite	ne
 8009b08:	2301      	movne	r3, #1
 8009b0a:	2300      	moveq	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	e022      	b.n	8009b56 <HAL_TIM_OC_Start_IT+0xa2>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b0c      	cmp	r3, #12
 8009b14:	d109      	bne.n	8009b2a <HAL_TIM_OC_Start_IT+0x76>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	bf14      	ite	ne
 8009b22:	2301      	movne	r3, #1
 8009b24:	2300      	moveq	r3, #0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	e015      	b.n	8009b56 <HAL_TIM_OC_Start_IT+0xa2>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b10      	cmp	r3, #16
 8009b2e:	d109      	bne.n	8009b44 <HAL_TIM_OC_Start_IT+0x90>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	bf14      	ite	ne
 8009b3c:	2301      	movne	r3, #1
 8009b3e:	2300      	moveq	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	e008      	b.n	8009b56 <HAL_TIM_OC_Start_IT+0xa2>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	bf14      	ite	ne
 8009b50:	2301      	movne	r3, #1
 8009b52:	2300      	moveq	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e0ec      	b.n	8009d38 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <HAL_TIM_OC_Start_IT+0xba>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b6c:	e023      	b.n	8009bb6 <HAL_TIM_OC_Start_IT+0x102>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d104      	bne.n	8009b7e <HAL_TIM_OC_Start_IT+0xca>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b7c:	e01b      	b.n	8009bb6 <HAL_TIM_OC_Start_IT+0x102>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d104      	bne.n	8009b8e <HAL_TIM_OC_Start_IT+0xda>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b8c:	e013      	b.n	8009bb6 <HAL_TIM_OC_Start_IT+0x102>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b0c      	cmp	r3, #12
 8009b92:	d104      	bne.n	8009b9e <HAL_TIM_OC_Start_IT+0xea>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b9c:	e00b      	b.n	8009bb6 <HAL_TIM_OC_Start_IT+0x102>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b10      	cmp	r3, #16
 8009ba2:	d104      	bne.n	8009bae <HAL_TIM_OC_Start_IT+0xfa>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bac:	e003      	b.n	8009bb6 <HAL_TIM_OC_Start_IT+0x102>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b0c      	cmp	r3, #12
 8009bba:	d841      	bhi.n	8009c40 <HAL_TIM_OC_Start_IT+0x18c>
 8009bbc:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <HAL_TIM_OC_Start_IT+0x110>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009bf9 	.word	0x08009bf9
 8009bc8:	08009c41 	.word	0x08009c41
 8009bcc:	08009c41 	.word	0x08009c41
 8009bd0:	08009c41 	.word	0x08009c41
 8009bd4:	08009c0b 	.word	0x08009c0b
 8009bd8:	08009c41 	.word	0x08009c41
 8009bdc:	08009c41 	.word	0x08009c41
 8009be0:	08009c41 	.word	0x08009c41
 8009be4:	08009c1d 	.word	0x08009c1d
 8009be8:	08009c41 	.word	0x08009c41
 8009bec:	08009c41 	.word	0x08009c41
 8009bf0:	08009c41 	.word	0x08009c41
 8009bf4:	08009c2f 	.word	0x08009c2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0202 	orr.w	r2, r2, #2
 8009c06:	60da      	str	r2, [r3, #12]
      break;
 8009c08:	e01d      	b.n	8009c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f042 0204 	orr.w	r2, r2, #4
 8009c18:	60da      	str	r2, [r3, #12]
      break;
 8009c1a:	e014      	b.n	8009c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f042 0208 	orr.w	r2, r2, #8
 8009c2a:	60da      	str	r2, [r3, #12]
      break;
 8009c2c:	e00b      	b.n	8009c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0210 	orr.w	r2, r2, #16
 8009c3c:	60da      	str	r2, [r3, #12]
      break;
 8009c3e:	e002      	b.n	8009c46 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
      break;
 8009c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d174      	bne.n	8009d36 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2201      	movs	r2, #1
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 f833 	bl	800acc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a38      	ldr	r2, [pc, #224]	; (8009d40 <HAL_TIM_OC_Start_IT+0x28c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d013      	beq.n	8009c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a36      	ldr	r2, [pc, #216]	; (8009d44 <HAL_TIM_OC_Start_IT+0x290>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00e      	beq.n	8009c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a35      	ldr	r2, [pc, #212]	; (8009d48 <HAL_TIM_OC_Start_IT+0x294>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d009      	beq.n	8009c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a33      	ldr	r2, [pc, #204]	; (8009d4c <HAL_TIM_OC_Start_IT+0x298>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d004      	beq.n	8009c8c <HAL_TIM_OC_Start_IT+0x1d8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a32      	ldr	r2, [pc, #200]	; (8009d50 <HAL_TIM_OC_Start_IT+0x29c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d101      	bne.n	8009c90 <HAL_TIM_OC_Start_IT+0x1dc>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e000      	b.n	8009c92 <HAL_TIM_OC_Start_IT+0x1de>
 8009c90:	2300      	movs	r3, #0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d007      	beq.n	8009ca6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a25      	ldr	r2, [pc, #148]	; (8009d40 <HAL_TIM_OC_Start_IT+0x28c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d022      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb8:	d01d      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a25      	ldr	r2, [pc, #148]	; (8009d54 <HAL_TIM_OC_Start_IT+0x2a0>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d018      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a23      	ldr	r2, [pc, #140]	; (8009d58 <HAL_TIM_OC_Start_IT+0x2a4>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d013      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a22      	ldr	r2, [pc, #136]	; (8009d5c <HAL_TIM_OC_Start_IT+0x2a8>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00e      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a19      	ldr	r2, [pc, #100]	; (8009d44 <HAL_TIM_OC_Start_IT+0x290>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d009      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a1e      	ldr	r2, [pc, #120]	; (8009d60 <HAL_TIM_OC_Start_IT+0x2ac>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d004      	beq.n	8009cf6 <HAL_TIM_OC_Start_IT+0x242>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <HAL_TIM_OC_Start_IT+0x294>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d115      	bne.n	8009d22 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	4b19      	ldr	r3, [pc, #100]	; (8009d64 <HAL_TIM_OC_Start_IT+0x2b0>)
 8009cfe:	4013      	ands	r3, r2
 8009d00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b06      	cmp	r3, #6
 8009d06:	d015      	beq.n	8009d34 <HAL_TIM_OC_Start_IT+0x280>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d0e:	d011      	beq.n	8009d34 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0201 	orr.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d20:	e008      	b.n	8009d34 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f042 0201 	orr.w	r2, r2, #1
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	e000      	b.n	8009d36 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40010000 	.word	0x40010000
 8009d44:	40010400 	.word	0x40010400
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	40014400 	.word	0x40014400
 8009d50:	40014800 	.word	0x40014800
 8009d54:	40000400 	.word	0x40000400
 8009d58:	40000800 	.word	0x40000800
 8009d5c:	40000c00 	.word	0x40000c00
 8009d60:	40001800 	.word	0x40001800
 8009d64:	00010007 	.word	0x00010007

08009d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e049      	b.n	8009e0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d106      	bne.n	8009d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f841 	bl	8009e16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f000 fb70 	bl	800a48c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d020      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d01b      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f06f 0202 	mvn.w	r2, #2
 8009e5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f003 0303 	and.w	r3, r3, #3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 faeb 	bl	800a450 <HAL_TIM_IC_CaptureCallback>
 8009e7a:	e005      	b.n	8009e88 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7f6 fbb1 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 faee 	bl	800a464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d020      	beq.n	8009eda <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f003 0304 	and.w	r3, r3, #4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01b      	beq.n	8009eda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f06f 0204 	mvn.w	r2, #4
 8009eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fac5 	bl	800a450 <HAL_TIM_IC_CaptureCallback>
 8009ec6:	e005      	b.n	8009ed4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7f6 fb8b 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fac8 	bl	800a464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d020      	beq.n	8009f26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f003 0308 	and.w	r3, r3, #8
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01b      	beq.n	8009f26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f06f 0208 	mvn.w	r2, #8
 8009ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2204      	movs	r2, #4
 8009efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	f003 0303 	and.w	r3, r3, #3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fa9f 	bl	800a450 <HAL_TIM_IC_CaptureCallback>
 8009f12:	e005      	b.n	8009f20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7f6 fb65 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 faa2 	bl	800a464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f003 0310 	and.w	r3, r3, #16
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d020      	beq.n	8009f72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f003 0310 	and.w	r3, r3, #16
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01b      	beq.n	8009f72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f06f 0210 	mvn.w	r2, #16
 8009f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2208      	movs	r2, #8
 8009f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa79 	bl	800a450 <HAL_TIM_IC_CaptureCallback>
 8009f5e:	e005      	b.n	8009f6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7f6 fb3f 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa7c 	bl	800a464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00c      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f06f 0201 	mvn.w	r2, #1
 8009f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7f7 f999 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d104      	bne.n	8009faa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00c      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 ffba 	bl	800af38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00c      	beq.n	8009fe8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 ffb2 	bl	800af4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00c      	beq.n	800a00c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d007      	beq.n	800a00c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fa36 	bl	800a478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00c      	beq.n	800a030 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f003 0320 	and.w	r3, r3, #32
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d007      	beq.n	800a030 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0220 	mvn.w	r2, #32
 800a028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 ff7a 	bl	800af24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a052:	2302      	movs	r3, #2
 800a054:	e0ff      	b.n	800a256 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b14      	cmp	r3, #20
 800a062:	f200 80f0 	bhi.w	800a246 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a066:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a0c1 	.word	0x0800a0c1
 800a070:	0800a247 	.word	0x0800a247
 800a074:	0800a247 	.word	0x0800a247
 800a078:	0800a247 	.word	0x0800a247
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a247 	.word	0x0800a247
 800a084:	0800a247 	.word	0x0800a247
 800a088:	0800a247 	.word	0x0800a247
 800a08c:	0800a143 	.word	0x0800a143
 800a090:	0800a247 	.word	0x0800a247
 800a094:	0800a247 	.word	0x0800a247
 800a098:	0800a247 	.word	0x0800a247
 800a09c:	0800a183 	.word	0x0800a183
 800a0a0:	0800a247 	.word	0x0800a247
 800a0a4:	0800a247 	.word	0x0800a247
 800a0a8:	0800a247 	.word	0x0800a247
 800a0ac:	0800a1c5 	.word	0x0800a1c5
 800a0b0:	0800a247 	.word	0x0800a247
 800a0b4:	0800a247 	.word	0x0800a247
 800a0b8:	0800a247 	.word	0x0800a247
 800a0bc:	0800a205 	.word	0x0800a205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fa86 	bl	800a5d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0208 	orr.w	r2, r2, #8
 800a0da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0204 	bic.w	r2, r2, #4
 800a0ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6999      	ldr	r1, [r3, #24]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	691a      	ldr	r2, [r3, #16]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	619a      	str	r2, [r3, #24]
      break;
 800a0fe:	e0a5      	b.n	800a24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 faf6 	bl	800a6f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6999      	ldr	r1, [r3, #24]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	021a      	lsls	r2, r3, #8
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	619a      	str	r2, [r3, #24]
      break;
 800a140:	e084      	b.n	800a24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fb5f 	bl	800a80c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0208 	orr.w	r2, r2, #8
 800a15c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0204 	bic.w	r2, r2, #4
 800a16c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69d9      	ldr	r1, [r3, #28]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	61da      	str	r2, [r3, #28]
      break;
 800a180:	e064      	b.n	800a24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fbc7 	bl	800a91c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a19c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69d9      	ldr	r1, [r3, #28]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	021a      	lsls	r2, r3, #8
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	61da      	str	r2, [r3, #28]
      break;
 800a1c2:	e043      	b.n	800a24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fc10 	bl	800a9f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f042 0208 	orr.w	r2, r2, #8
 800a1de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0204 	bic.w	r2, r2, #4
 800a1ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	691a      	ldr	r2, [r3, #16]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a202:	e023      	b.n	800a24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fc54 	bl	800aab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a21e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a22e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	021a      	lsls	r2, r3, #8
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a244:	e002      	b.n	800a24c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	75fb      	strb	r3, [r7, #23]
      break;
 800a24a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a254:	7dfb      	ldrb	r3, [r7, #23]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop

0800a260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a274:	2b01      	cmp	r3, #1
 800a276:	d101      	bne.n	800a27c <HAL_TIM_ConfigClockSource+0x1c>
 800a278:	2302      	movs	r3, #2
 800a27a:	e0dc      	b.n	800a436 <HAL_TIM_ConfigClockSource+0x1d6>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2202      	movs	r2, #2
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	4b6a      	ldr	r3, [pc, #424]	; (800a440 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a298:	4013      	ands	r3, r2
 800a29a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a64      	ldr	r2, [pc, #400]	; (800a444 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	f000 80a9 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2b8:	4a62      	ldr	r2, [pc, #392]	; (800a444 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	f200 80ae 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c0:	4a61      	ldr	r2, [pc, #388]	; (800a448 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	f000 80a1 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2c8:	4a5f      	ldr	r2, [pc, #380]	; (800a448 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	f200 80a6 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d0:	4a5e      	ldr	r2, [pc, #376]	; (800a44c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	f000 8099 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d8:	4a5c      	ldr	r2, [pc, #368]	; (800a44c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	f200 809e 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a2e4:	f000 8091 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a2ec:	f200 8096 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2f4:	f000 8089 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2fc:	f200 808e 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a304:	d03e      	beq.n	800a384 <HAL_TIM_ConfigClockSource+0x124>
 800a306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a30a:	f200 8087 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a312:	f000 8086 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1c2>
 800a316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a31a:	d87f      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a31c:	2b70      	cmp	r3, #112	; 0x70
 800a31e:	d01a      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0xf6>
 800a320:	2b70      	cmp	r3, #112	; 0x70
 800a322:	d87b      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a324:	2b60      	cmp	r3, #96	; 0x60
 800a326:	d050      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x16a>
 800a328:	2b60      	cmp	r3, #96	; 0x60
 800a32a:	d877      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a32c:	2b50      	cmp	r3, #80	; 0x50
 800a32e:	d03c      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x14a>
 800a330:	2b50      	cmp	r3, #80	; 0x50
 800a332:	d873      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a334:	2b40      	cmp	r3, #64	; 0x40
 800a336:	d058      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x18a>
 800a338:	2b40      	cmp	r3, #64	; 0x40
 800a33a:	d86f      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a33c:	2b30      	cmp	r3, #48	; 0x30
 800a33e:	d064      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a340:	2b30      	cmp	r3, #48	; 0x30
 800a342:	d86b      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a344:	2b20      	cmp	r3, #32
 800a346:	d060      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a348:	2b20      	cmp	r3, #32
 800a34a:	d867      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d05c      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a350:	2b10      	cmp	r3, #16
 800a352:	d05a      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a354:	e062      	b.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6899      	ldr	r1, [r3, #8]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f000 fc8b 	bl	800ac80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	609a      	str	r2, [r3, #8]
      break;
 800a382:	e04f      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	6899      	ldr	r1, [r3, #8]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f000 fc74 	bl	800ac80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3a6:	609a      	str	r2, [r3, #8]
      break;
 800a3a8:	e03c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6859      	ldr	r1, [r3, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f000 fbe4 	bl	800ab84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2150      	movs	r1, #80	; 0x50
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fc3e 	bl	800ac44 <TIM_ITRx_SetConfig>
      break;
 800a3c8:	e02c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	6859      	ldr	r1, [r3, #4]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f000 fc03 	bl	800abe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2160      	movs	r1, #96	; 0x60
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fc2e 	bl	800ac44 <TIM_ITRx_SetConfig>
      break;
 800a3e8:	e01c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	6859      	ldr	r1, [r3, #4]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f000 fbc4 	bl	800ab84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2140      	movs	r1, #64	; 0x40
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fc1e 	bl	800ac44 <TIM_ITRx_SetConfig>
      break;
 800a408:	e00c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f000 fc15 	bl	800ac44 <TIM_ITRx_SetConfig>
      break;
 800a41a:	e003      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
      break;
 800a420:	e000      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a434:	7bfb      	ldrb	r3, [r7, #15]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	ffceff88 	.word	0xffceff88
 800a444:	00100040 	.word	0x00100040
 800a448:	00100030 	.word	0x00100030
 800a44c:	00100020 	.word	0x00100020

0800a450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a46      	ldr	r2, [pc, #280]	; (800a5b8 <TIM_Base_SetConfig+0x12c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d013      	beq.n	800a4cc <TIM_Base_SetConfig+0x40>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4aa:	d00f      	beq.n	800a4cc <TIM_Base_SetConfig+0x40>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a43      	ldr	r2, [pc, #268]	; (800a5bc <TIM_Base_SetConfig+0x130>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d00b      	beq.n	800a4cc <TIM_Base_SetConfig+0x40>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a42      	ldr	r2, [pc, #264]	; (800a5c0 <TIM_Base_SetConfig+0x134>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d007      	beq.n	800a4cc <TIM_Base_SetConfig+0x40>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a41      	ldr	r2, [pc, #260]	; (800a5c4 <TIM_Base_SetConfig+0x138>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d003      	beq.n	800a4cc <TIM_Base_SetConfig+0x40>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a40      	ldr	r2, [pc, #256]	; (800a5c8 <TIM_Base_SetConfig+0x13c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d108      	bne.n	800a4de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a35      	ldr	r2, [pc, #212]	; (800a5b8 <TIM_Base_SetConfig+0x12c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d01f      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ec:	d01b      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a32      	ldr	r2, [pc, #200]	; (800a5bc <TIM_Base_SetConfig+0x130>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d017      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a31      	ldr	r2, [pc, #196]	; (800a5c0 <TIM_Base_SetConfig+0x134>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d013      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a30      	ldr	r2, [pc, #192]	; (800a5c4 <TIM_Base_SetConfig+0x138>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00f      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a2f      	ldr	r2, [pc, #188]	; (800a5c8 <TIM_Base_SetConfig+0x13c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d00b      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a2e      	ldr	r2, [pc, #184]	; (800a5cc <TIM_Base_SetConfig+0x140>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d007      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a2d      	ldr	r2, [pc, #180]	; (800a5d0 <TIM_Base_SetConfig+0x144>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d003      	beq.n	800a526 <TIM_Base_SetConfig+0x9a>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a2c      	ldr	r2, [pc, #176]	; (800a5d4 <TIM_Base_SetConfig+0x148>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d108      	bne.n	800a538 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a52c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a16      	ldr	r2, [pc, #88]	; (800a5b8 <TIM_Base_SetConfig+0x12c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00f      	beq.n	800a584 <TIM_Base_SetConfig+0xf8>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a18      	ldr	r2, [pc, #96]	; (800a5c8 <TIM_Base_SetConfig+0x13c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d00b      	beq.n	800a584 <TIM_Base_SetConfig+0xf8>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a17      	ldr	r2, [pc, #92]	; (800a5cc <TIM_Base_SetConfig+0x140>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d007      	beq.n	800a584 <TIM_Base_SetConfig+0xf8>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <TIM_Base_SetConfig+0x144>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d003      	beq.n	800a584 <TIM_Base_SetConfig+0xf8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a15      	ldr	r2, [pc, #84]	; (800a5d4 <TIM_Base_SetConfig+0x148>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d103      	bne.n	800a58c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	691a      	ldr	r2, [r3, #16]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d105      	bne.n	800a5aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	f023 0201 	bic.w	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	611a      	str	r2, [r3, #16]
  }
}
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40010000 	.word	0x40010000
 800a5bc:	40000400 	.word	0x40000400
 800a5c0:	40000800 	.word	0x40000800
 800a5c4:	40000c00 	.word	0x40000c00
 800a5c8:	40010400 	.word	0x40010400
 800a5cc:	40014000 	.word	0x40014000
 800a5d0:	40014400 	.word	0x40014400
 800a5d4:	40014800 	.word	0x40014800

0800a5d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b087      	sub	sp, #28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	f023 0201 	bic.w	r2, r3, #1
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	699b      	ldr	r3, [r3, #24]
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4b37      	ldr	r3, [pc, #220]	; (800a6e0 <TIM_OC1_SetConfig+0x108>)
 800a604:	4013      	ands	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4313      	orrs	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f023 0302 	bic.w	r3, r3, #2
 800a620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	4313      	orrs	r3, r2
 800a62a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a2d      	ldr	r2, [pc, #180]	; (800a6e4 <TIM_OC1_SetConfig+0x10c>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d00f      	beq.n	800a654 <TIM_OC1_SetConfig+0x7c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a2c      	ldr	r2, [pc, #176]	; (800a6e8 <TIM_OC1_SetConfig+0x110>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d00b      	beq.n	800a654 <TIM_OC1_SetConfig+0x7c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a2b      	ldr	r2, [pc, #172]	; (800a6ec <TIM_OC1_SetConfig+0x114>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d007      	beq.n	800a654 <TIM_OC1_SetConfig+0x7c>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a2a      	ldr	r2, [pc, #168]	; (800a6f0 <TIM_OC1_SetConfig+0x118>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d003      	beq.n	800a654 <TIM_OC1_SetConfig+0x7c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a29      	ldr	r2, [pc, #164]	; (800a6f4 <TIM_OC1_SetConfig+0x11c>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d10c      	bne.n	800a66e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f023 0308 	bic.w	r3, r3, #8
 800a65a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f023 0304 	bic.w	r3, r3, #4
 800a66c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a1c      	ldr	r2, [pc, #112]	; (800a6e4 <TIM_OC1_SetConfig+0x10c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00f      	beq.n	800a696 <TIM_OC1_SetConfig+0xbe>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a1b      	ldr	r2, [pc, #108]	; (800a6e8 <TIM_OC1_SetConfig+0x110>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00b      	beq.n	800a696 <TIM_OC1_SetConfig+0xbe>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a1a      	ldr	r2, [pc, #104]	; (800a6ec <TIM_OC1_SetConfig+0x114>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d007      	beq.n	800a696 <TIM_OC1_SetConfig+0xbe>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a19      	ldr	r2, [pc, #100]	; (800a6f0 <TIM_OC1_SetConfig+0x118>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d003      	beq.n	800a696 <TIM_OC1_SetConfig+0xbe>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <TIM_OC1_SetConfig+0x11c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d111      	bne.n	800a6ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a69c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	621a      	str	r2, [r3, #32]
}
 800a6d4:	bf00      	nop
 800a6d6:	371c      	adds	r7, #28
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	fffeff8f 	.word	0xfffeff8f
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40010400 	.word	0x40010400
 800a6ec:	40014000 	.word	0x40014000
 800a6f0:	40014400 	.word	0x40014400
 800a6f4:	40014800 	.word	0x40014800

0800a6f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	f023 0210 	bic.w	r2, r3, #16
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4b34      	ldr	r3, [pc, #208]	; (800a7f4 <TIM_OC2_SetConfig+0xfc>)
 800a724:	4013      	ands	r3, r2
 800a726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a72e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	021b      	lsls	r3, r3, #8
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f023 0320 	bic.w	r3, r3, #32
 800a742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a29      	ldr	r2, [pc, #164]	; (800a7f8 <TIM_OC2_SetConfig+0x100>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d003      	beq.n	800a760 <TIM_OC2_SetConfig+0x68>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a28      	ldr	r2, [pc, #160]	; (800a7fc <TIM_OC2_SetConfig+0x104>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d10d      	bne.n	800a77c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	4313      	orrs	r3, r2
 800a772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a77a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a1e      	ldr	r2, [pc, #120]	; (800a7f8 <TIM_OC2_SetConfig+0x100>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00f      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xac>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a1d      	ldr	r2, [pc, #116]	; (800a7fc <TIM_OC2_SetConfig+0x104>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d00b      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xac>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a1c      	ldr	r2, [pc, #112]	; (800a800 <TIM_OC2_SetConfig+0x108>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d007      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xac>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a1b      	ldr	r2, [pc, #108]	; (800a804 <TIM_OC2_SetConfig+0x10c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d003      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xac>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1a      	ldr	r2, [pc, #104]	; (800a808 <TIM_OC2_SetConfig+0x110>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d113      	bne.n	800a7cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	621a      	str	r2, [r3, #32]
}
 800a7e6:	bf00      	nop
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	feff8fff 	.word	0xfeff8fff
 800a7f8:	40010000 	.word	0x40010000
 800a7fc:	40010400 	.word	0x40010400
 800a800:	40014000 	.word	0x40014000
 800a804:	40014400 	.word	0x40014400
 800a808:	40014800 	.word	0x40014800

0800a80c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a1b      	ldr	r3, [r3, #32]
 800a820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4b33      	ldr	r3, [pc, #204]	; (800a904 <TIM_OC3_SetConfig+0xf8>)
 800a838:	4013      	ands	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 0303 	bic.w	r3, r3, #3
 800a842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	021b      	lsls	r3, r3, #8
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a28      	ldr	r2, [pc, #160]	; (800a908 <TIM_OC3_SetConfig+0xfc>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d003      	beq.n	800a872 <TIM_OC3_SetConfig+0x66>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a27      	ldr	r2, [pc, #156]	; (800a90c <TIM_OC3_SetConfig+0x100>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d10d      	bne.n	800a88e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4313      	orrs	r3, r2
 800a884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a88c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a1d      	ldr	r2, [pc, #116]	; (800a908 <TIM_OC3_SetConfig+0xfc>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d00f      	beq.n	800a8b6 <TIM_OC3_SetConfig+0xaa>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a1c      	ldr	r2, [pc, #112]	; (800a90c <TIM_OC3_SetConfig+0x100>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d00b      	beq.n	800a8b6 <TIM_OC3_SetConfig+0xaa>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a1b      	ldr	r2, [pc, #108]	; (800a910 <TIM_OC3_SetConfig+0x104>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d007      	beq.n	800a8b6 <TIM_OC3_SetConfig+0xaa>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a1a      	ldr	r2, [pc, #104]	; (800a914 <TIM_OC3_SetConfig+0x108>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d003      	beq.n	800a8b6 <TIM_OC3_SetConfig+0xaa>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a19      	ldr	r2, [pc, #100]	; (800a918 <TIM_OC3_SetConfig+0x10c>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d113      	bne.n	800a8de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	011b      	lsls	r3, r3, #4
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	621a      	str	r2, [r3, #32]
}
 800a8f8:	bf00      	nop
 800a8fa:	371c      	adds	r7, #28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	fffeff8f 	.word	0xfffeff8f
 800a908:	40010000 	.word	0x40010000
 800a90c:	40010400 	.word	0x40010400
 800a910:	40014000 	.word	0x40014000
 800a914:	40014400 	.word	0x40014400
 800a918:	40014800 	.word	0x40014800

0800a91c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	4b24      	ldr	r3, [pc, #144]	; (800a9d8 <TIM_OC4_SetConfig+0xbc>)
 800a948:	4013      	ands	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	031b      	lsls	r3, r3, #12
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a19      	ldr	r2, [pc, #100]	; (800a9dc <TIM_OC4_SetConfig+0xc0>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d00f      	beq.n	800a99c <TIM_OC4_SetConfig+0x80>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a18      	ldr	r2, [pc, #96]	; (800a9e0 <TIM_OC4_SetConfig+0xc4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d00b      	beq.n	800a99c <TIM_OC4_SetConfig+0x80>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a17      	ldr	r2, [pc, #92]	; (800a9e4 <TIM_OC4_SetConfig+0xc8>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d007      	beq.n	800a99c <TIM_OC4_SetConfig+0x80>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a16      	ldr	r2, [pc, #88]	; (800a9e8 <TIM_OC4_SetConfig+0xcc>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d003      	beq.n	800a99c <TIM_OC4_SetConfig+0x80>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a15      	ldr	r2, [pc, #84]	; (800a9ec <TIM_OC4_SetConfig+0xd0>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d109      	bne.n	800a9b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	019b      	lsls	r3, r3, #6
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	621a      	str	r2, [r3, #32]
}
 800a9ca:	bf00      	nop
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	feff8fff 	.word	0xfeff8fff
 800a9dc:	40010000 	.word	0x40010000
 800a9e0:	40010400 	.word	0x40010400
 800a9e4:	40014000 	.word	0x40014000
 800a9e8:	40014400 	.word	0x40014400
 800a9ec:	40014800 	.word	0x40014800

0800a9f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <TIM_OC5_SetConfig+0xb0>)
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aa30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	041b      	lsls	r3, r3, #16
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <TIM_OC5_SetConfig+0xb4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d00f      	beq.n	800aa66 <TIM_OC5_SetConfig+0x76>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <TIM_OC5_SetConfig+0xb8>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00b      	beq.n	800aa66 <TIM_OC5_SetConfig+0x76>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a16      	ldr	r2, [pc, #88]	; (800aaac <TIM_OC5_SetConfig+0xbc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d007      	beq.n	800aa66 <TIM_OC5_SetConfig+0x76>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a15      	ldr	r2, [pc, #84]	; (800aab0 <TIM_OC5_SetConfig+0xc0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d003      	beq.n	800aa66 <TIM_OC5_SetConfig+0x76>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a14      	ldr	r2, [pc, #80]	; (800aab4 <TIM_OC5_SetConfig+0xc4>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d109      	bne.n	800aa7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	021b      	lsls	r3, r3, #8
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	621a      	str	r2, [r3, #32]
}
 800aa94:	bf00      	nop
 800aa96:	371c      	adds	r7, #28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	fffeff8f 	.word	0xfffeff8f
 800aaa4:	40010000 	.word	0x40010000
 800aaa8:	40010400 	.word	0x40010400
 800aaac:	40014000 	.word	0x40014000
 800aab0:	40014400 	.word	0x40014400
 800aab4:	40014800 	.word	0x40014800

0800aab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4b22      	ldr	r3, [pc, #136]	; (800ab6c <TIM_OC6_SetConfig+0xb4>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	021b      	lsls	r3, r3, #8
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aafa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	051b      	lsls	r3, r3, #20
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a19      	ldr	r2, [pc, #100]	; (800ab70 <TIM_OC6_SetConfig+0xb8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d00f      	beq.n	800ab30 <TIM_OC6_SetConfig+0x78>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a18      	ldr	r2, [pc, #96]	; (800ab74 <TIM_OC6_SetConfig+0xbc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d00b      	beq.n	800ab30 <TIM_OC6_SetConfig+0x78>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a17      	ldr	r2, [pc, #92]	; (800ab78 <TIM_OC6_SetConfig+0xc0>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d007      	beq.n	800ab30 <TIM_OC6_SetConfig+0x78>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a16      	ldr	r2, [pc, #88]	; (800ab7c <TIM_OC6_SetConfig+0xc4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d003      	beq.n	800ab30 <TIM_OC6_SetConfig+0x78>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a15      	ldr	r2, [pc, #84]	; (800ab80 <TIM_OC6_SetConfig+0xc8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d109      	bne.n	800ab44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	029b      	lsls	r3, r3, #10
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	621a      	str	r2, [r3, #32]
}
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	feff8fff 	.word	0xfeff8fff
 800ab70:	40010000 	.word	0x40010000
 800ab74:	40010400 	.word	0x40010400
 800ab78:	40014000 	.word	0x40014000
 800ab7c:	40014400 	.word	0x40014400
 800ab80:	40014800 	.word	0x40014800

0800ab84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	f023 0201 	bic.w	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f023 030a 	bic.w	r3, r3, #10
 800abc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b087      	sub	sp, #28
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	f023 0210 	bic.w	r2, r3, #16
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	031b      	lsls	r3, r3, #12
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	011b      	lsls	r3, r3, #4
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	621a      	str	r2, [r3, #32]
}
 800ac36:	bf00      	nop
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
	...

0800ac44 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <TIM_ITRx_SetConfig+0x38>)
 800ac58:	4013      	ands	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	f043 0307 	orr.w	r3, r3, #7
 800ac66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	609a      	str	r2, [r3, #8]
}
 800ac6e:	bf00      	nop
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	ffcfff8f 	.word	0xffcfff8f

0800ac80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	021a      	lsls	r2, r3, #8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	431a      	orrs	r2, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	4313      	orrs	r3, r2
 800acac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	609a      	str	r2, [r3, #8]
}
 800acb4:	bf00      	nop
 800acb6:	371c      	adds	r7, #28
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	f003 031f 	and.w	r3, r3, #31
 800acd2:	2201      	movs	r2, #1
 800acd4:	fa02 f303 	lsl.w	r3, r2, r3
 800acd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6a1a      	ldr	r2, [r3, #32]
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	43db      	mvns	r3, r3
 800ace2:	401a      	ands	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6a1a      	ldr	r2, [r3, #32]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f003 031f 	and.w	r3, r3, #31
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	fa01 f303 	lsl.w	r3, r1, r3
 800acf8:	431a      	orrs	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
	...

0800ad0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e06d      	b.n	800ae00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a30      	ldr	r2, [pc, #192]	; (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d004      	beq.n	800ad58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a2f      	ldr	r2, [pc, #188]	; (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d108      	bne.n	800ad6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a20      	ldr	r2, [pc, #128]	; (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d022      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad96:	d01d      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a1d      	ldr	r2, [pc, #116]	; (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d018      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a1c      	ldr	r2, [pc, #112]	; (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d013      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a1a      	ldr	r2, [pc, #104]	; (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d00e      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a15      	ldr	r2, [pc, #84]	; (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d009      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a16      	ldr	r2, [pc, #88]	; (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d004      	beq.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a15      	ldr	r2, [pc, #84]	; (800ae24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d10c      	bne.n	800adee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	40010000 	.word	0x40010000
 800ae10:	40010400 	.word	0x40010400
 800ae14:	40000400 	.word	0x40000400
 800ae18:	40000800 	.word	0x40000800
 800ae1c:	40000c00 	.word	0x40000c00
 800ae20:	40001800 	.word	0x40001800
 800ae24:	40014000 	.word	0x40014000

0800ae28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e065      	b.n	800af10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	041b      	lsls	r3, r3, #16
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a16      	ldr	r2, [pc, #88]	; (800af1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d004      	beq.n	800aed2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a14      	ldr	r2, [pc, #80]	; (800af20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d115      	bne.n	800aefe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	051b      	lsls	r3, r3, #20
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3714      	adds	r7, #20
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	40010000 	.word	0x40010000
 800af20:	40010400 	.word	0x40010400

0800af24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e042      	b.n	800aff8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d106      	bne.n	800af8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7f6 fc6f 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2224      	movs	r2, #36	; 0x24
 800af8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 0201 	bic.w	r2, r2, #1
 800afa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 f9b6 	bl	800c31c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fc4b 	bl	800b84c <UART_SetConfig>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d101      	bne.n	800afc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e01b      	b.n	800aff8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f042 0201 	orr.w	r2, r2, #1
 800afee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 fa35 	bl	800c460 <UART_CheckIdleState>
 800aff6:	4603      	mov	r3, r0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08a      	sub	sp, #40	; 0x28
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b014:	2b20      	cmp	r3, #32
 800b016:	d137      	bne.n	800b088 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_UART_Receive_IT+0x24>
 800b01e:	88fb      	ldrh	r3, [r7, #6]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e030      	b.n	800b08a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a18      	ldr	r2, [pc, #96]	; (800b094 <HAL_UART_Receive_IT+0x94>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d01f      	beq.n	800b078 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d018      	beq.n	800b078 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	e853 3f00 	ldrex	r3, [r3]
 800b052:	613b      	str	r3, [r7, #16]
   return(result);
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	461a      	mov	r2, r3
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	623b      	str	r3, [r7, #32]
 800b066:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	6a3a      	ldr	r2, [r7, #32]
 800b06c:	e841 2300 	strex	r3, r2, [r1]
 800b070:	61bb      	str	r3, [r7, #24]
   return(result);
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e6      	bne.n	800b046 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	461a      	mov	r2, r3
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f001 fb06 	bl	800c690 <UART_Start_Receive_IT>
 800b084:	4603      	mov	r3, r0
 800b086:	e000      	b.n	800b08a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b088:	2302      	movs	r3, #2
  }
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3728      	adds	r7, #40	; 0x28
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	58000c00 	.word	0x58000c00

0800b098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b0ba      	sub	sp, #232	; 0xe8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b0be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b0c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b0cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d11b      	bne.n	800b10c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d015      	beq.n	800b10c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e4:	f003 0320 	and.w	r3, r3, #32
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d105      	bne.n	800b0f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f000 8377 	beq.w	800b7f0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
      }
      return;
 800b10a:	e371      	b.n	800b7f0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 8123 	beq.w	800b35c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b116:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b11a:	4b8d      	ldr	r3, [pc, #564]	; (800b350 <HAL_UART_IRQHandler+0x2b8>)
 800b11c:	4013      	ands	r3, r2
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d106      	bne.n	800b130 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b126:	4b8b      	ldr	r3, [pc, #556]	; (800b354 <HAL_UART_IRQHandler+0x2bc>)
 800b128:	4013      	ands	r3, r2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 8116 	beq.w	800b35c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d011      	beq.n	800b160 <HAL_UART_IRQHandler+0xc8>
 800b13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00b      	beq.n	800b160 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2201      	movs	r2, #1
 800b14e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b156:	f043 0201 	orr.w	r2, r3, #1
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d011      	beq.n	800b190 <HAL_UART_IRQHandler+0xf8>
 800b16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2202      	movs	r2, #2
 800b17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b186:	f043 0204 	orr.w	r2, r3, #4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d011      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x128>
 800b19c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00b      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2204      	movs	r2, #4
 800b1ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b6:	f043 0202 	orr.w	r2, r3, #2
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d017      	beq.n	800b1fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d0:	f003 0320 	and.w	r3, r3, #32
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d105      	bne.n	800b1e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b1d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b1dc:	4b5c      	ldr	r3, [pc, #368]	; (800b350 <HAL_UART_IRQHandler+0x2b8>)
 800b1de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00b      	beq.n	800b1fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2208      	movs	r2, #8
 800b1ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f2:	f043 0208 	orr.w	r2, r3, #8
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b204:	2b00      	cmp	r3, #0
 800b206:	d012      	beq.n	800b22e <HAL_UART_IRQHandler+0x196>
 800b208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b20c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00c      	beq.n	800b22e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b21c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b224:	f043 0220 	orr.w	r2, r3, #32
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 82dd 	beq.w	800b7f4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	2b00      	cmp	r3, #0
 800b244:	d013      	beq.n	800b26e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b24a:	f003 0320 	and.w	r3, r3, #32
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d105      	bne.n	800b25e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d007      	beq.n	800b26e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b282:	2b40      	cmp	r3, #64	; 0x40
 800b284:	d005      	beq.n	800b292 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b28a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d054      	beq.n	800b33c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 fb1e 	bl	800c8d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a2:	2b40      	cmp	r3, #64	; 0x40
 800b2a4:	d146      	bne.n	800b334 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b2bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b2de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1d9      	bne.n	800b2a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d017      	beq.n	800b32c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b302:	4a15      	ldr	r2, [pc, #84]	; (800b358 <HAL_UART_IRQHandler+0x2c0>)
 800b304:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f8 fdd3 	bl	8003eb8 <HAL_DMA_Abort_IT>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d019      	beq.n	800b34c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b326:	4610      	mov	r0, r2
 800b328:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b32a:	e00f      	b.n	800b34c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fa77 	bl	800b820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b332:	e00b      	b.n	800b34c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fa73 	bl	800b820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b33a:	e007      	b.n	800b34c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fa6f 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b34a:	e253      	b.n	800b7f4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b34c:	bf00      	nop
    return;
 800b34e:	e251      	b.n	800b7f4 <HAL_UART_IRQHandler+0x75c>
 800b350:	10000001 	.word	0x10000001
 800b354:	04000120 	.word	0x04000120
 800b358:	0800c9a1 	.word	0x0800c9a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b360:	2b01      	cmp	r3, #1
 800b362:	f040 81e7 	bne.w	800b734 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b36a:	f003 0310 	and.w	r3, r3, #16
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 81e0 	beq.w	800b734 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b378:	f003 0310 	and.w	r3, r3, #16
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 81d9 	beq.w	800b734 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2210      	movs	r2, #16
 800b388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b394:	2b40      	cmp	r3, #64	; 0x40
 800b396:	f040 8151 	bne.w	800b63c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a96      	ldr	r2, [pc, #600]	; (800b5fc <HAL_UART_IRQHandler+0x564>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d068      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a93      	ldr	r2, [pc, #588]	; (800b600 <HAL_UART_IRQHandler+0x568>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d061      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a91      	ldr	r2, [pc, #580]	; (800b604 <HAL_UART_IRQHandler+0x56c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d05a      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a8e      	ldr	r2, [pc, #568]	; (800b608 <HAL_UART_IRQHandler+0x570>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d053      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a8c      	ldr	r2, [pc, #560]	; (800b60c <HAL_UART_IRQHandler+0x574>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d04c      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a89      	ldr	r2, [pc, #548]	; (800b610 <HAL_UART_IRQHandler+0x578>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d045      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a87      	ldr	r2, [pc, #540]	; (800b614 <HAL_UART_IRQHandler+0x57c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d03e      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a84      	ldr	r2, [pc, #528]	; (800b618 <HAL_UART_IRQHandler+0x580>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d037      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a82      	ldr	r2, [pc, #520]	; (800b61c <HAL_UART_IRQHandler+0x584>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d030      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a7f      	ldr	r2, [pc, #508]	; (800b620 <HAL_UART_IRQHandler+0x588>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d029      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a7d      	ldr	r2, [pc, #500]	; (800b624 <HAL_UART_IRQHandler+0x58c>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d022      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a7a      	ldr	r2, [pc, #488]	; (800b628 <HAL_UART_IRQHandler+0x590>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d01b      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a78      	ldr	r2, [pc, #480]	; (800b62c <HAL_UART_IRQHandler+0x594>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d014      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a75      	ldr	r2, [pc, #468]	; (800b630 <HAL_UART_IRQHandler+0x598>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d00d      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a73      	ldr	r2, [pc, #460]	; (800b634 <HAL_UART_IRQHandler+0x59c>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d006      	beq.n	800b47a <HAL_UART_IRQHandler+0x3e2>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a70      	ldr	r2, [pc, #448]	; (800b638 <HAL_UART_IRQHandler+0x5a0>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d106      	bne.n	800b488 <HAL_UART_IRQHandler+0x3f0>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	b29b      	uxth	r3, r3
 800b486:	e005      	b.n	800b494 <HAL_UART_IRQHandler+0x3fc>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	b29b      	uxth	r3, r3
 800b494:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 81ab 	beq.w	800b7f8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	f080 81a3 	bcs.w	800b7f8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4c2:	69db      	ldr	r3, [r3, #28]
 800b4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c8:	f000 8087 	beq.w	800b5da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b50e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1da      	bne.n	800b4cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3308      	adds	r3, #8
 800b51c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b528:	f023 0301 	bic.w	r3, r3, #1
 800b52c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3308      	adds	r3, #8
 800b536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b53a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b53e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b54c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e1      	bne.n	800b516 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3308      	adds	r3, #8
 800b572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b576:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b57c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b57e:	e841 2300 	strex	r3, r2, [r1]
 800b582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e3      	bne.n	800b552 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2220      	movs	r2, #32
 800b58e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a8:	f023 0310 	bic.w	r3, r3, #16
 800b5ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e4      	bne.n	800b598 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7f8 f951 	bl	800387c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f91d 	bl	800b834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5fa:	e0fd      	b.n	800b7f8 <HAL_UART_IRQHandler+0x760>
 800b5fc:	40020010 	.word	0x40020010
 800b600:	40020028 	.word	0x40020028
 800b604:	40020040 	.word	0x40020040
 800b608:	40020058 	.word	0x40020058
 800b60c:	40020070 	.word	0x40020070
 800b610:	40020088 	.word	0x40020088
 800b614:	400200a0 	.word	0x400200a0
 800b618:	400200b8 	.word	0x400200b8
 800b61c:	40020410 	.word	0x40020410
 800b620:	40020428 	.word	0x40020428
 800b624:	40020440 	.word	0x40020440
 800b628:	40020458 	.word	0x40020458
 800b62c:	40020470 	.word	0x40020470
 800b630:	40020488 	.word	0x40020488
 800b634:	400204a0 	.word	0x400204a0
 800b638:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b648:	b29b      	uxth	r3, r3
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b656:	b29b      	uxth	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 80cf 	beq.w	800b7fc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b65e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 80ca 	beq.w	800b7fc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b67c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b68a:	647b      	str	r3, [r7, #68]	; 0x44
 800b68c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e4      	bne.n	800b668 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ae:	6a3a      	ldr	r2, [r7, #32]
 800b6b0:	4b55      	ldr	r3, [pc, #340]	; (800b808 <HAL_UART_IRQHandler+0x770>)
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6c2:	633a      	str	r2, [r7, #48]	; 0x30
 800b6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ca:	e841 2300 	strex	r3, r2, [r1]
 800b6ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1e3      	bne.n	800b69e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	e853 3f00 	ldrex	r3, [r3]
 800b6f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 0310 	bic.w	r3, r3, #16
 800b6fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b710:	69b9      	ldr	r1, [r7, #24]
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	e841 2300 	strex	r3, r2, [r1]
 800b718:	617b      	str	r3, [r7, #20]
   return(result);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e4      	bne.n	800b6ea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b726:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f881 	bl	800b834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b732:	e063      	b.n	800b7fc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00e      	beq.n	800b75e <HAL_UART_IRQHandler+0x6c6>
 800b740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d008      	beq.n	800b75e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 fe80 	bl	800d45c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b75c:	e051      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b766:	2b00      	cmp	r3, #0
 800b768:	d014      	beq.n	800b794 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b772:	2b00      	cmp	r3, #0
 800b774:	d105      	bne.n	800b782 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b77a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d008      	beq.n	800b794 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b786:	2b00      	cmp	r3, #0
 800b788:	d03a      	beq.n	800b800 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	4798      	blx	r3
    }
    return;
 800b792:	e035      	b.n	800b800 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <HAL_UART_IRQHandler+0x71c>
 800b7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 f90d 	bl	800c9cc <UART_EndTransmit_IT>
    return;
 800b7b2:	e026      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d009      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x73c>
 800b7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f001 fe59 	bl	800d484 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7d2:	e016      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d010      	beq.n	800b802 <HAL_UART_IRQHandler+0x76a>
 800b7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	da0c      	bge.n	800b802 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f001 fe41 	bl	800d470 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7ee:	e008      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
      return;
 800b7f0:	bf00      	nop
 800b7f2:	e006      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
    return;
 800b7f4:	bf00      	nop
 800b7f6:	e004      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
      return;
 800b7f8:	bf00      	nop
 800b7fa:	e002      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
      return;
 800b7fc:	bf00      	nop
 800b7fe:	e000      	b.n	800b802 <HAL_UART_IRQHandler+0x76a>
    return;
 800b800:	bf00      	nop
  }
}
 800b802:	37e8      	adds	r7, #232	; 0xe8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	effffffe 	.word	0xeffffffe

0800b80c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b84c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b850:	b092      	sub	sp, #72	; 0x48
 800b852:	af00      	add	r7, sp, #0
 800b854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	431a      	orrs	r2, r3
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	431a      	orrs	r2, r3
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	4313      	orrs	r3, r2
 800b872:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4bbe      	ldr	r3, [pc, #760]	; (800bb74 <UART_SetConfig+0x328>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b884:	430b      	orrs	r3, r1
 800b886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	68da      	ldr	r2, [r3, #12]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4ab3      	ldr	r2, [pc, #716]	; (800bb78 <UART_SetConfig+0x32c>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d004      	beq.n	800b8b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689a      	ldr	r2, [r3, #8]
 800b8be:	4baf      	ldr	r3, [pc, #700]	; (800bb7c <UART_SetConfig+0x330>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	6812      	ldr	r2, [r2, #0]
 800b8c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	f023 010f 	bic.w	r1, r3, #15
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4aa6      	ldr	r2, [pc, #664]	; (800bb80 <UART_SetConfig+0x334>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d177      	bne.n	800b9dc <UART_SetConfig+0x190>
 800b8ec:	4ba5      	ldr	r3, [pc, #660]	; (800bb84 <UART_SetConfig+0x338>)
 800b8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8f4:	2b28      	cmp	r3, #40	; 0x28
 800b8f6:	d86d      	bhi.n	800b9d4 <UART_SetConfig+0x188>
 800b8f8:	a201      	add	r2, pc, #4	; (adr r2, 800b900 <UART_SetConfig+0xb4>)
 800b8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fe:	bf00      	nop
 800b900:	0800b9a5 	.word	0x0800b9a5
 800b904:	0800b9d5 	.word	0x0800b9d5
 800b908:	0800b9d5 	.word	0x0800b9d5
 800b90c:	0800b9d5 	.word	0x0800b9d5
 800b910:	0800b9d5 	.word	0x0800b9d5
 800b914:	0800b9d5 	.word	0x0800b9d5
 800b918:	0800b9d5 	.word	0x0800b9d5
 800b91c:	0800b9d5 	.word	0x0800b9d5
 800b920:	0800b9ad 	.word	0x0800b9ad
 800b924:	0800b9d5 	.word	0x0800b9d5
 800b928:	0800b9d5 	.word	0x0800b9d5
 800b92c:	0800b9d5 	.word	0x0800b9d5
 800b930:	0800b9d5 	.word	0x0800b9d5
 800b934:	0800b9d5 	.word	0x0800b9d5
 800b938:	0800b9d5 	.word	0x0800b9d5
 800b93c:	0800b9d5 	.word	0x0800b9d5
 800b940:	0800b9b5 	.word	0x0800b9b5
 800b944:	0800b9d5 	.word	0x0800b9d5
 800b948:	0800b9d5 	.word	0x0800b9d5
 800b94c:	0800b9d5 	.word	0x0800b9d5
 800b950:	0800b9d5 	.word	0x0800b9d5
 800b954:	0800b9d5 	.word	0x0800b9d5
 800b958:	0800b9d5 	.word	0x0800b9d5
 800b95c:	0800b9d5 	.word	0x0800b9d5
 800b960:	0800b9bd 	.word	0x0800b9bd
 800b964:	0800b9d5 	.word	0x0800b9d5
 800b968:	0800b9d5 	.word	0x0800b9d5
 800b96c:	0800b9d5 	.word	0x0800b9d5
 800b970:	0800b9d5 	.word	0x0800b9d5
 800b974:	0800b9d5 	.word	0x0800b9d5
 800b978:	0800b9d5 	.word	0x0800b9d5
 800b97c:	0800b9d5 	.word	0x0800b9d5
 800b980:	0800b9c5 	.word	0x0800b9c5
 800b984:	0800b9d5 	.word	0x0800b9d5
 800b988:	0800b9d5 	.word	0x0800b9d5
 800b98c:	0800b9d5 	.word	0x0800b9d5
 800b990:	0800b9d5 	.word	0x0800b9d5
 800b994:	0800b9d5 	.word	0x0800b9d5
 800b998:	0800b9d5 	.word	0x0800b9d5
 800b99c:	0800b9d5 	.word	0x0800b9d5
 800b9a0:	0800b9cd 	.word	0x0800b9cd
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9aa:	e222      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9b2:	e21e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ba:	e21a      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9c2:	e216      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9c4:	2320      	movs	r3, #32
 800b9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ca:	e212      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9cc:	2340      	movs	r3, #64	; 0x40
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9d2:	e20e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9d4:	2380      	movs	r3, #128	; 0x80
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9da:	e20a      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a69      	ldr	r2, [pc, #420]	; (800bb88 <UART_SetConfig+0x33c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d130      	bne.n	800ba48 <UART_SetConfig+0x1fc>
 800b9e6:	4b67      	ldr	r3, [pc, #412]	; (800bb84 <UART_SetConfig+0x338>)
 800b9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ea:	f003 0307 	and.w	r3, r3, #7
 800b9ee:	2b05      	cmp	r3, #5
 800b9f0:	d826      	bhi.n	800ba40 <UART_SetConfig+0x1f4>
 800b9f2:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <UART_SetConfig+0x1ac>)
 800b9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f8:	0800ba11 	.word	0x0800ba11
 800b9fc:	0800ba19 	.word	0x0800ba19
 800ba00:	0800ba21 	.word	0x0800ba21
 800ba04:	0800ba29 	.word	0x0800ba29
 800ba08:	0800ba31 	.word	0x0800ba31
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	2300      	movs	r3, #0
 800ba12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba16:	e1ec      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba18:	2304      	movs	r3, #4
 800ba1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba1e:	e1e8      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba20:	2308      	movs	r3, #8
 800ba22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba26:	e1e4      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba28:	2310      	movs	r3, #16
 800ba2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba2e:	e1e0      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba30:	2320      	movs	r3, #32
 800ba32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba36:	e1dc      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba38:	2340      	movs	r3, #64	; 0x40
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba3e:	e1d8      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba40:	2380      	movs	r3, #128	; 0x80
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba46:	e1d4      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a4f      	ldr	r2, [pc, #316]	; (800bb8c <UART_SetConfig+0x340>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d130      	bne.n	800bab4 <UART_SetConfig+0x268>
 800ba52:	4b4c      	ldr	r3, [pc, #304]	; (800bb84 <UART_SetConfig+0x338>)
 800ba54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba56:	f003 0307 	and.w	r3, r3, #7
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d826      	bhi.n	800baac <UART_SetConfig+0x260>
 800ba5e:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <UART_SetConfig+0x218>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800ba7d 	.word	0x0800ba7d
 800ba68:	0800ba85 	.word	0x0800ba85
 800ba6c:	0800ba8d 	.word	0x0800ba8d
 800ba70:	0800ba95 	.word	0x0800ba95
 800ba74:	0800ba9d 	.word	0x0800ba9d
 800ba78:	0800baa5 	.word	0x0800baa5
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba82:	e1b6      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba8a:	e1b2      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba92:	e1ae      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba94:	2310      	movs	r3, #16
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba9a:	e1aa      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800ba9c:	2320      	movs	r3, #32
 800ba9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baa2:	e1a6      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800baa4:	2340      	movs	r3, #64	; 0x40
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baaa:	e1a2      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800baac:	2380      	movs	r3, #128	; 0x80
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bab2:	e19e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a35      	ldr	r2, [pc, #212]	; (800bb90 <UART_SetConfig+0x344>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d130      	bne.n	800bb20 <UART_SetConfig+0x2d4>
 800babe:	4b31      	ldr	r3, [pc, #196]	; (800bb84 <UART_SetConfig+0x338>)
 800bac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d826      	bhi.n	800bb18 <UART_SetConfig+0x2cc>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <UART_SetConfig+0x284>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae9 	.word	0x0800bae9
 800bad4:	0800baf1 	.word	0x0800baf1
 800bad8:	0800baf9 	.word	0x0800baf9
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb09 	.word	0x0800bb09
 800bae4:	0800bb11 	.word	0x0800bb11
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baee:	e180      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800baf0:	2304      	movs	r3, #4
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baf6:	e17c      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800baf8:	2308      	movs	r3, #8
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bafe:	e178      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb00:	2310      	movs	r3, #16
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb06:	e174      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb0e:	e170      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb10:	2340      	movs	r3, #64	; 0x40
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb16:	e16c      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb18:	2380      	movs	r3, #128	; 0x80
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb1e:	e168      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a1b      	ldr	r2, [pc, #108]	; (800bb94 <UART_SetConfig+0x348>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d142      	bne.n	800bbb0 <UART_SetConfig+0x364>
 800bb2a:	4b16      	ldr	r3, [pc, #88]	; (800bb84 <UART_SetConfig+0x338>)
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2e:	f003 0307 	and.w	r3, r3, #7
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	d838      	bhi.n	800bba8 <UART_SetConfig+0x35c>
 800bb36:	a201      	add	r2, pc, #4	; (adr r2, 800bb3c <UART_SetConfig+0x2f0>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bb55 	.word	0x0800bb55
 800bb40:	0800bb5d 	.word	0x0800bb5d
 800bb44:	0800bb65 	.word	0x0800bb65
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb99 	.word	0x0800bb99
 800bb50:	0800bba1 	.word	0x0800bba1
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb5a:	e14a      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb5c:	2304      	movs	r3, #4
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb62:	e146      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb64:	2308      	movs	r3, #8
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb6a:	e142      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb6c:	2310      	movs	r3, #16
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb72:	e13e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bb74:	cfff69f3 	.word	0xcfff69f3
 800bb78:	58000c00 	.word	0x58000c00
 800bb7c:	11fff4ff 	.word	0x11fff4ff
 800bb80:	40011000 	.word	0x40011000
 800bb84:	58024400 	.word	0x58024400
 800bb88:	40004400 	.word	0x40004400
 800bb8c:	40004800 	.word	0x40004800
 800bb90:	40004c00 	.word	0x40004c00
 800bb94:	40005000 	.word	0x40005000
 800bb98:	2320      	movs	r3, #32
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb9e:	e128      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bba0:	2340      	movs	r3, #64	; 0x40
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bba6:	e124      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bba8:	2380      	movs	r3, #128	; 0x80
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbae:	e120      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4acb      	ldr	r2, [pc, #812]	; (800bee4 <UART_SetConfig+0x698>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d176      	bne.n	800bca8 <UART_SetConfig+0x45c>
 800bbba:	4bcb      	ldr	r3, [pc, #812]	; (800bee8 <UART_SetConfig+0x69c>)
 800bbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbc2:	2b28      	cmp	r3, #40	; 0x28
 800bbc4:	d86c      	bhi.n	800bca0 <UART_SetConfig+0x454>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <UART_SetConfig+0x380>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bc71 	.word	0x0800bc71
 800bbd0:	0800bca1 	.word	0x0800bca1
 800bbd4:	0800bca1 	.word	0x0800bca1
 800bbd8:	0800bca1 	.word	0x0800bca1
 800bbdc:	0800bca1 	.word	0x0800bca1
 800bbe0:	0800bca1 	.word	0x0800bca1
 800bbe4:	0800bca1 	.word	0x0800bca1
 800bbe8:	0800bca1 	.word	0x0800bca1
 800bbec:	0800bc79 	.word	0x0800bc79
 800bbf0:	0800bca1 	.word	0x0800bca1
 800bbf4:	0800bca1 	.word	0x0800bca1
 800bbf8:	0800bca1 	.word	0x0800bca1
 800bbfc:	0800bca1 	.word	0x0800bca1
 800bc00:	0800bca1 	.word	0x0800bca1
 800bc04:	0800bca1 	.word	0x0800bca1
 800bc08:	0800bca1 	.word	0x0800bca1
 800bc0c:	0800bc81 	.word	0x0800bc81
 800bc10:	0800bca1 	.word	0x0800bca1
 800bc14:	0800bca1 	.word	0x0800bca1
 800bc18:	0800bca1 	.word	0x0800bca1
 800bc1c:	0800bca1 	.word	0x0800bca1
 800bc20:	0800bca1 	.word	0x0800bca1
 800bc24:	0800bca1 	.word	0x0800bca1
 800bc28:	0800bca1 	.word	0x0800bca1
 800bc2c:	0800bc89 	.word	0x0800bc89
 800bc30:	0800bca1 	.word	0x0800bca1
 800bc34:	0800bca1 	.word	0x0800bca1
 800bc38:	0800bca1 	.word	0x0800bca1
 800bc3c:	0800bca1 	.word	0x0800bca1
 800bc40:	0800bca1 	.word	0x0800bca1
 800bc44:	0800bca1 	.word	0x0800bca1
 800bc48:	0800bca1 	.word	0x0800bca1
 800bc4c:	0800bc91 	.word	0x0800bc91
 800bc50:	0800bca1 	.word	0x0800bca1
 800bc54:	0800bca1 	.word	0x0800bca1
 800bc58:	0800bca1 	.word	0x0800bca1
 800bc5c:	0800bca1 	.word	0x0800bca1
 800bc60:	0800bca1 	.word	0x0800bca1
 800bc64:	0800bca1 	.word	0x0800bca1
 800bc68:	0800bca1 	.word	0x0800bca1
 800bc6c:	0800bc99 	.word	0x0800bc99
 800bc70:	2301      	movs	r3, #1
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc76:	e0bc      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bc78:	2304      	movs	r3, #4
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc7e:	e0b8      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bc80:	2308      	movs	r3, #8
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc86:	e0b4      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc8e:	e0b0      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bc90:	2320      	movs	r3, #32
 800bc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc96:	e0ac      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc9e:	e0a8      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bca0:	2380      	movs	r3, #128	; 0x80
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca6:	e0a4      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a8f      	ldr	r2, [pc, #572]	; (800beec <UART_SetConfig+0x6a0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d130      	bne.n	800bd14 <UART_SetConfig+0x4c8>
 800bcb2:	4b8d      	ldr	r3, [pc, #564]	; (800bee8 <UART_SetConfig+0x69c>)
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	2b05      	cmp	r3, #5
 800bcbc:	d826      	bhi.n	800bd0c <UART_SetConfig+0x4c0>
 800bcbe:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <UART_SetConfig+0x478>)
 800bcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc4:	0800bcdd 	.word	0x0800bcdd
 800bcc8:	0800bce5 	.word	0x0800bce5
 800bccc:	0800bced 	.word	0x0800bced
 800bcd0:	0800bcf5 	.word	0x0800bcf5
 800bcd4:	0800bcfd 	.word	0x0800bcfd
 800bcd8:	0800bd05 	.word	0x0800bd05
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e086      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bce4:	2304      	movs	r3, #4
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcea:	e082      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bcec:	2308      	movs	r3, #8
 800bcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcf2:	e07e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bcf4:	2310      	movs	r3, #16
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e07a      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd02:	e076      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd04:	2340      	movs	r3, #64	; 0x40
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0a:	e072      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd0c:	2380      	movs	r3, #128	; 0x80
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd12:	e06e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a75      	ldr	r2, [pc, #468]	; (800bef0 <UART_SetConfig+0x6a4>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d130      	bne.n	800bd80 <UART_SetConfig+0x534>
 800bd1e:	4b72      	ldr	r3, [pc, #456]	; (800bee8 <UART_SetConfig+0x69c>)
 800bd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d826      	bhi.n	800bd78 <UART_SetConfig+0x52c>
 800bd2a:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <UART_SetConfig+0x4e4>)
 800bd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd51 	.word	0x0800bd51
 800bd38:	0800bd59 	.word	0x0800bd59
 800bd3c:	0800bd61 	.word	0x0800bd61
 800bd40:	0800bd69 	.word	0x0800bd69
 800bd44:	0800bd71 	.word	0x0800bd71
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e050      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd50:	2304      	movs	r3, #4
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd56:	e04c      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd58:	2308      	movs	r3, #8
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd5e:	e048      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd60:	2310      	movs	r3, #16
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd66:	e044      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd6e:	e040      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd70:	2340      	movs	r3, #64	; 0x40
 800bd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd76:	e03c      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd78:	2380      	movs	r3, #128	; 0x80
 800bd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd7e:	e038      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a5b      	ldr	r2, [pc, #364]	; (800bef4 <UART_SetConfig+0x6a8>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d130      	bne.n	800bdec <UART_SetConfig+0x5a0>
 800bd8a:	4b57      	ldr	r3, [pc, #348]	; (800bee8 <UART_SetConfig+0x69c>)
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	2b05      	cmp	r3, #5
 800bd94:	d826      	bhi.n	800bde4 <UART_SetConfig+0x598>
 800bd96:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <UART_SetConfig+0x550>)
 800bd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9c:	0800bdb5 	.word	0x0800bdb5
 800bda0:	0800bdbd 	.word	0x0800bdbd
 800bda4:	0800bdc5 	.word	0x0800bdc5
 800bda8:	0800bdcd 	.word	0x0800bdcd
 800bdac:	0800bdd5 	.word	0x0800bdd5
 800bdb0:	0800bddd 	.word	0x0800bddd
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdba:	e01a      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdc2:	e016      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bdc4:	2308      	movs	r3, #8
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdca:	e012      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdd2:	e00e      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bdd4:	2320      	movs	r3, #32
 800bdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdda:	e00a      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bddc:	2340      	movs	r3, #64	; 0x40
 800bdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bde2:	e006      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bde4:	2380      	movs	r3, #128	; 0x80
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdea:	e002      	b.n	800bdf2 <UART_SetConfig+0x5a6>
 800bdec:	2380      	movs	r3, #128	; 0x80
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a3f      	ldr	r2, [pc, #252]	; (800bef4 <UART_SetConfig+0x6a8>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	f040 80f8 	bne.w	800bfee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bdfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be02:	2b20      	cmp	r3, #32
 800be04:	dc46      	bgt.n	800be94 <UART_SetConfig+0x648>
 800be06:	2b02      	cmp	r3, #2
 800be08:	f2c0 8082 	blt.w	800bf10 <UART_SetConfig+0x6c4>
 800be0c:	3b02      	subs	r3, #2
 800be0e:	2b1e      	cmp	r3, #30
 800be10:	d87e      	bhi.n	800bf10 <UART_SetConfig+0x6c4>
 800be12:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <UART_SetConfig+0x5cc>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be9b 	.word	0x0800be9b
 800be1c:	0800bf11 	.word	0x0800bf11
 800be20:	0800bea3 	.word	0x0800bea3
 800be24:	0800bf11 	.word	0x0800bf11
 800be28:	0800bf11 	.word	0x0800bf11
 800be2c:	0800bf11 	.word	0x0800bf11
 800be30:	0800beb3 	.word	0x0800beb3
 800be34:	0800bf11 	.word	0x0800bf11
 800be38:	0800bf11 	.word	0x0800bf11
 800be3c:	0800bf11 	.word	0x0800bf11
 800be40:	0800bf11 	.word	0x0800bf11
 800be44:	0800bf11 	.word	0x0800bf11
 800be48:	0800bf11 	.word	0x0800bf11
 800be4c:	0800bf11 	.word	0x0800bf11
 800be50:	0800bec3 	.word	0x0800bec3
 800be54:	0800bf11 	.word	0x0800bf11
 800be58:	0800bf11 	.word	0x0800bf11
 800be5c:	0800bf11 	.word	0x0800bf11
 800be60:	0800bf11 	.word	0x0800bf11
 800be64:	0800bf11 	.word	0x0800bf11
 800be68:	0800bf11 	.word	0x0800bf11
 800be6c:	0800bf11 	.word	0x0800bf11
 800be70:	0800bf11 	.word	0x0800bf11
 800be74:	0800bf11 	.word	0x0800bf11
 800be78:	0800bf11 	.word	0x0800bf11
 800be7c:	0800bf11 	.word	0x0800bf11
 800be80:	0800bf11 	.word	0x0800bf11
 800be84:	0800bf11 	.word	0x0800bf11
 800be88:	0800bf11 	.word	0x0800bf11
 800be8c:	0800bf11 	.word	0x0800bf11
 800be90:	0800bf03 	.word	0x0800bf03
 800be94:	2b40      	cmp	r3, #64	; 0x40
 800be96:	d037      	beq.n	800bf08 <UART_SetConfig+0x6bc>
 800be98:	e03a      	b.n	800bf10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be9a:	f7fc fe89 	bl	8008bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800be9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bea0:	e03c      	b.n	800bf1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fc fe98 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb0:	e034      	b.n	800bf1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb2:	f107 0318 	add.w	r3, r7, #24
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fc ffe4 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec0:	e02c      	b.n	800bf1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <UART_SetConfig+0x69c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0320 	and.w	r3, r3, #32
 800beca:	2b00      	cmp	r3, #0
 800becc:	d016      	beq.n	800befc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bece:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <UART_SetConfig+0x69c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	08db      	lsrs	r3, r3, #3
 800bed4:	f003 0303 	and.w	r3, r3, #3
 800bed8:	4a07      	ldr	r2, [pc, #28]	; (800bef8 <UART_SetConfig+0x6ac>)
 800beda:	fa22 f303 	lsr.w	r3, r2, r3
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bee0:	e01c      	b.n	800bf1c <UART_SetConfig+0x6d0>
 800bee2:	bf00      	nop
 800bee4:	40011400 	.word	0x40011400
 800bee8:	58024400 	.word	0x58024400
 800beec:	40007800 	.word	0x40007800
 800bef0:	40007c00 	.word	0x40007c00
 800bef4:	58000c00 	.word	0x58000c00
 800bef8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800befc:	4b9d      	ldr	r3, [pc, #628]	; (800c174 <UART_SetConfig+0x928>)
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf00:	e00c      	b.n	800bf1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf02:	4b9d      	ldr	r3, [pc, #628]	; (800c178 <UART_SetConfig+0x92c>)
 800bf04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf06:	e009      	b.n	800bf1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf0e:	e005      	b.n	800bf1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bf1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 81de 	beq.w	800c2e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	4a94      	ldr	r2, [pc, #592]	; (800c17c <UART_SetConfig+0x930>)
 800bf2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf32:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d305      	bcc.n	800bf54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d903      	bls.n	800bf5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bf5a:	e1c1      	b.n	800c2e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5e:	2200      	movs	r2, #0
 800bf60:	60bb      	str	r3, [r7, #8]
 800bf62:	60fa      	str	r2, [r7, #12]
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf68:	4a84      	ldr	r2, [pc, #528]	; (800c17c <UART_SetConfig+0x930>)
 800bf6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2200      	movs	r2, #0
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf7e:	f7f4 f9af 	bl	80002e0 <__aeabi_uldivmod>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4610      	mov	r0, r2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f04f 0200 	mov.w	r2, #0
 800bf8e:	f04f 0300 	mov.w	r3, #0
 800bf92:	020b      	lsls	r3, r1, #8
 800bf94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf98:	0202      	lsls	r2, r0, #8
 800bf9a:	6979      	ldr	r1, [r7, #20]
 800bf9c:	6849      	ldr	r1, [r1, #4]
 800bf9e:	0849      	lsrs	r1, r1, #1
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	eb12 0804 	adds.w	r8, r2, r4
 800bfaa:	eb43 0905 	adc.w	r9, r3, r5
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	469a      	mov	sl, r3
 800bfb6:	4693      	mov	fp, r2
 800bfb8:	4652      	mov	r2, sl
 800bfba:	465b      	mov	r3, fp
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	f7f4 f98e 	bl	80002e0 <__aeabi_uldivmod>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4613      	mov	r3, r2
 800bfca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfd2:	d308      	bcc.n	800bfe6 <UART_SetConfig+0x79a>
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfda:	d204      	bcs.n	800bfe6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe2:	60da      	str	r2, [r3, #12]
 800bfe4:	e17c      	b.n	800c2e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bfec:	e178      	b.n	800c2e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bff6:	f040 80c5 	bne.w	800c184 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bffa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bffe:	2b20      	cmp	r3, #32
 800c000:	dc48      	bgt.n	800c094 <UART_SetConfig+0x848>
 800c002:	2b00      	cmp	r3, #0
 800c004:	db7b      	blt.n	800c0fe <UART_SetConfig+0x8b2>
 800c006:	2b20      	cmp	r3, #32
 800c008:	d879      	bhi.n	800c0fe <UART_SetConfig+0x8b2>
 800c00a:	a201      	add	r2, pc, #4	; (adr r2, 800c010 <UART_SetConfig+0x7c4>)
 800c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c010:	0800c09b 	.word	0x0800c09b
 800c014:	0800c0a3 	.word	0x0800c0a3
 800c018:	0800c0ff 	.word	0x0800c0ff
 800c01c:	0800c0ff 	.word	0x0800c0ff
 800c020:	0800c0ab 	.word	0x0800c0ab
 800c024:	0800c0ff 	.word	0x0800c0ff
 800c028:	0800c0ff 	.word	0x0800c0ff
 800c02c:	0800c0ff 	.word	0x0800c0ff
 800c030:	0800c0bb 	.word	0x0800c0bb
 800c034:	0800c0ff 	.word	0x0800c0ff
 800c038:	0800c0ff 	.word	0x0800c0ff
 800c03c:	0800c0ff 	.word	0x0800c0ff
 800c040:	0800c0ff 	.word	0x0800c0ff
 800c044:	0800c0ff 	.word	0x0800c0ff
 800c048:	0800c0ff 	.word	0x0800c0ff
 800c04c:	0800c0ff 	.word	0x0800c0ff
 800c050:	0800c0cb 	.word	0x0800c0cb
 800c054:	0800c0ff 	.word	0x0800c0ff
 800c058:	0800c0ff 	.word	0x0800c0ff
 800c05c:	0800c0ff 	.word	0x0800c0ff
 800c060:	0800c0ff 	.word	0x0800c0ff
 800c064:	0800c0ff 	.word	0x0800c0ff
 800c068:	0800c0ff 	.word	0x0800c0ff
 800c06c:	0800c0ff 	.word	0x0800c0ff
 800c070:	0800c0ff 	.word	0x0800c0ff
 800c074:	0800c0ff 	.word	0x0800c0ff
 800c078:	0800c0ff 	.word	0x0800c0ff
 800c07c:	0800c0ff 	.word	0x0800c0ff
 800c080:	0800c0ff 	.word	0x0800c0ff
 800c084:	0800c0ff 	.word	0x0800c0ff
 800c088:	0800c0ff 	.word	0x0800c0ff
 800c08c:	0800c0ff 	.word	0x0800c0ff
 800c090:	0800c0f1 	.word	0x0800c0f1
 800c094:	2b40      	cmp	r3, #64	; 0x40
 800c096:	d02e      	beq.n	800c0f6 <UART_SetConfig+0x8aa>
 800c098:	e031      	b.n	800c0fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c09a:	f7fa fd91 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 800c09e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0a0:	e033      	b.n	800c10a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0a2:	f7fa fda3 	bl	8006bec <HAL_RCC_GetPCLK2Freq>
 800c0a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0a8:	e02f      	b.n	800c10a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fc fd94 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b8:	e027      	b.n	800c10a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ba:	f107 0318 	add.w	r3, r7, #24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fc fee0 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c8:	e01f      	b.n	800c10a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0ca:	4b2d      	ldr	r3, [pc, #180]	; (800c180 <UART_SetConfig+0x934>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f003 0320 	and.w	r3, r3, #32
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d009      	beq.n	800c0ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0d6:	4b2a      	ldr	r3, [pc, #168]	; (800c180 <UART_SetConfig+0x934>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	08db      	lsrs	r3, r3, #3
 800c0dc:	f003 0303 	and.w	r3, r3, #3
 800c0e0:	4a24      	ldr	r2, [pc, #144]	; (800c174 <UART_SetConfig+0x928>)
 800c0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0e8:	e00f      	b.n	800c10a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c0ea:	4b22      	ldr	r3, [pc, #136]	; (800c174 <UART_SetConfig+0x928>)
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ee:	e00c      	b.n	800c10a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0f0:	4b21      	ldr	r3, [pc, #132]	; (800c178 <UART_SetConfig+0x92c>)
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f4:	e009      	b.n	800c10a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fc:	e005      	b.n	800c10a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c0fe:	2300      	movs	r3, #0
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 80e7 	beq.w	800c2e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c116:	4a19      	ldr	r2, [pc, #100]	; (800c17c <UART_SetConfig+0x930>)
 800c118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c11c:	461a      	mov	r2, r3
 800c11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c120:	fbb3 f3f2 	udiv	r3, r3, r2
 800c124:	005a      	lsls	r2, r3, #1
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	085b      	lsrs	r3, r3, #1
 800c12c:	441a      	add	r2, r3
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	fbb2 f3f3 	udiv	r3, r2, r3
 800c136:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	2b0f      	cmp	r3, #15
 800c13c:	d916      	bls.n	800c16c <UART_SetConfig+0x920>
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c144:	d212      	bcs.n	800c16c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	b29b      	uxth	r3, r3
 800c14a:	f023 030f 	bic.w	r3, r3, #15
 800c14e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	b29b      	uxth	r3, r3
 800c156:	f003 0307 	and.w	r3, r3, #7
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c15e:	4313      	orrs	r3, r2
 800c160:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c168:	60da      	str	r2, [r3, #12]
 800c16a:	e0b9      	b.n	800c2e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c172:	e0b5      	b.n	800c2e0 <UART_SetConfig+0xa94>
 800c174:	03d09000 	.word	0x03d09000
 800c178:	003d0900 	.word	0x003d0900
 800c17c:	08011634 	.word	0x08011634
 800c180:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c184:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c188:	2b20      	cmp	r3, #32
 800c18a:	dc49      	bgt.n	800c220 <UART_SetConfig+0x9d4>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	db7c      	blt.n	800c28a <UART_SetConfig+0xa3e>
 800c190:	2b20      	cmp	r3, #32
 800c192:	d87a      	bhi.n	800c28a <UART_SetConfig+0xa3e>
 800c194:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <UART_SetConfig+0x950>)
 800c196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19a:	bf00      	nop
 800c19c:	0800c227 	.word	0x0800c227
 800c1a0:	0800c22f 	.word	0x0800c22f
 800c1a4:	0800c28b 	.word	0x0800c28b
 800c1a8:	0800c28b 	.word	0x0800c28b
 800c1ac:	0800c237 	.word	0x0800c237
 800c1b0:	0800c28b 	.word	0x0800c28b
 800c1b4:	0800c28b 	.word	0x0800c28b
 800c1b8:	0800c28b 	.word	0x0800c28b
 800c1bc:	0800c247 	.word	0x0800c247
 800c1c0:	0800c28b 	.word	0x0800c28b
 800c1c4:	0800c28b 	.word	0x0800c28b
 800c1c8:	0800c28b 	.word	0x0800c28b
 800c1cc:	0800c28b 	.word	0x0800c28b
 800c1d0:	0800c28b 	.word	0x0800c28b
 800c1d4:	0800c28b 	.word	0x0800c28b
 800c1d8:	0800c28b 	.word	0x0800c28b
 800c1dc:	0800c257 	.word	0x0800c257
 800c1e0:	0800c28b 	.word	0x0800c28b
 800c1e4:	0800c28b 	.word	0x0800c28b
 800c1e8:	0800c28b 	.word	0x0800c28b
 800c1ec:	0800c28b 	.word	0x0800c28b
 800c1f0:	0800c28b 	.word	0x0800c28b
 800c1f4:	0800c28b 	.word	0x0800c28b
 800c1f8:	0800c28b 	.word	0x0800c28b
 800c1fc:	0800c28b 	.word	0x0800c28b
 800c200:	0800c28b 	.word	0x0800c28b
 800c204:	0800c28b 	.word	0x0800c28b
 800c208:	0800c28b 	.word	0x0800c28b
 800c20c:	0800c28b 	.word	0x0800c28b
 800c210:	0800c28b 	.word	0x0800c28b
 800c214:	0800c28b 	.word	0x0800c28b
 800c218:	0800c28b 	.word	0x0800c28b
 800c21c:	0800c27d 	.word	0x0800c27d
 800c220:	2b40      	cmp	r3, #64	; 0x40
 800c222:	d02e      	beq.n	800c282 <UART_SetConfig+0xa36>
 800c224:	e031      	b.n	800c28a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c226:	f7fa fccb 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 800c22a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c22c:	e033      	b.n	800c296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c22e:	f7fa fcdd 	bl	8006bec <HAL_RCC_GetPCLK2Freq>
 800c232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c234:	e02f      	b.n	800c296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fc fcce 	bl	8008bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c244:	e027      	b.n	800c296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c246:	f107 0318 	add.w	r3, r7, #24
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fc fe1a 	bl	8008e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c254:	e01f      	b.n	800c296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c256:	4b2d      	ldr	r3, [pc, #180]	; (800c30c <UART_SetConfig+0xac0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0320 	and.w	r3, r3, #32
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d009      	beq.n	800c276 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c262:	4b2a      	ldr	r3, [pc, #168]	; (800c30c <UART_SetConfig+0xac0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	08db      	lsrs	r3, r3, #3
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	4a28      	ldr	r2, [pc, #160]	; (800c310 <UART_SetConfig+0xac4>)
 800c26e:	fa22 f303 	lsr.w	r3, r2, r3
 800c272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c274:	e00f      	b.n	800c296 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c276:	4b26      	ldr	r3, [pc, #152]	; (800c310 <UART_SetConfig+0xac4>)
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c27a:	e00c      	b.n	800c296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c27c:	4b25      	ldr	r3, [pc, #148]	; (800c314 <UART_SetConfig+0xac8>)
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c280:	e009      	b.n	800c296 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c288:	e005      	b.n	800c296 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c294:	bf00      	nop
    }

    if (pclk != 0U)
 800c296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d021      	beq.n	800c2e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	4a1d      	ldr	r2, [pc, #116]	; (800c318 <UART_SetConfig+0xacc>)
 800c2a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	085b      	lsrs	r3, r3, #1
 800c2b4:	441a      	add	r2, r3
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	2b0f      	cmp	r3, #15
 800c2c4:	d909      	bls.n	800c2da <UART_SetConfig+0xa8e>
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2cc:	d205      	bcs.n	800c2da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	60da      	str	r2, [r3, #12]
 800c2d8:	e002      	b.n	800c2e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c2fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c300:	4618      	mov	r0, r3
 800c302:	3748      	adds	r7, #72	; 0x48
 800c304:	46bd      	mov	sp, r7
 800c306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c30a:	bf00      	nop
 800c30c:	58024400 	.word	0x58024400
 800c310:	03d09000 	.word	0x03d09000
 800c314:	003d0900 	.word	0x003d0900
 800c318:	08011634 	.word	0x08011634

0800c31c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c328:	f003 0308 	and.w	r3, r3, #8
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00a      	beq.n	800c346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00a      	beq.n	800c368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	430a      	orrs	r2, r1
 800c366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	f003 0302 	and.w	r3, r3, #2
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00a      	beq.n	800c38a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38e:	f003 0304 	and.w	r3, r3, #4
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00a      	beq.n	800c3ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b0:	f003 0310 	and.w	r3, r3, #16
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00a      	beq.n	800c3ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d2:	f003 0320 	and.w	r3, r3, #32
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01a      	beq.n	800c432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c41a:	d10a      	bne.n	800c432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	430a      	orrs	r2, r1
 800c430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	430a      	orrs	r2, r1
 800c452:	605a      	str	r2, [r3, #4]
  }
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b098      	sub	sp, #96	; 0x60
 800c464:	af02      	add	r7, sp, #8
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c470:	f7f5 fd16 	bl	8001ea0 <HAL_GetTick>
 800c474:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0308 	and.w	r3, r3, #8
 800c480:	2b08      	cmp	r3, #8
 800c482:	d12f      	bne.n	800c4e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c48c:	2200      	movs	r2, #0
 800c48e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f88e 	bl	800c5b4 <UART_WaitOnFlagUntilTimeout>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d022      	beq.n	800c4e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	e853 3f00 	ldrex	r3, [r3]
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4b2:	653b      	str	r3, [r7, #80]	; 0x50
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c4be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4c4:	e841 2300 	strex	r3, r2, [r1]
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1e6      	bne.n	800c49e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2220      	movs	r2, #32
 800c4d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e063      	b.n	800c5ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d149      	bne.n	800c586 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f857 	bl	800c5b4 <UART_WaitOnFlagUntilTimeout>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d03c      	beq.n	800c586 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	e853 3f00 	ldrex	r3, [r3]
 800c518:	623b      	str	r3, [r7, #32]
   return(result);
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c520:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52a:	633b      	str	r3, [r7, #48]	; 0x30
 800c52c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c532:	e841 2300 	strex	r3, r2, [r1]
 800c536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1e6      	bne.n	800c50c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3308      	adds	r3, #8
 800c544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	e853 3f00 	ldrex	r3, [r3]
 800c54c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f023 0301 	bic.w	r3, r3, #1
 800c554:	64bb      	str	r3, [r7, #72]	; 0x48
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3308      	adds	r3, #8
 800c55c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c55e:	61fa      	str	r2, [r7, #28]
 800c560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c562:	69b9      	ldr	r1, [r7, #24]
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	e841 2300 	strex	r3, r2, [r1]
 800c56a:	617b      	str	r3, [r7, #20]
   return(result);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1e5      	bne.n	800c53e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e012      	b.n	800c5ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2220      	movs	r2, #32
 800c58a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2220      	movs	r2, #32
 800c592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3758      	adds	r7, #88	; 0x58
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5c4:	e04f      	b.n	800c666 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5cc:	d04b      	beq.n	800c666 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5ce:	f7f5 fc67 	bl	8001ea0 <HAL_GetTick>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d302      	bcc.n	800c5e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e04e      	b.n	800c686 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 0304 	and.w	r3, r3, #4
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d037      	beq.n	800c666 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b80      	cmp	r3, #128	; 0x80
 800c5fa:	d034      	beq.n	800c666 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2b40      	cmp	r3, #64	; 0x40
 800c600:	d031      	beq.n	800c666 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	f003 0308 	and.w	r3, r3, #8
 800c60c:	2b08      	cmp	r3, #8
 800c60e:	d110      	bne.n	800c632 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2208      	movs	r2, #8
 800c616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f000 f95b 	bl	800c8d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2208      	movs	r2, #8
 800c622:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e029      	b.n	800c686 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c63c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c640:	d111      	bne.n	800c666 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c64a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 f941 	bl	800c8d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2220      	movs	r2, #32
 800c656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c662:	2303      	movs	r3, #3
 800c664:	e00f      	b.n	800c686 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	69da      	ldr	r2, [r3, #28]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	4013      	ands	r3, r2
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	429a      	cmp	r2, r3
 800c674:	bf0c      	ite	eq
 800c676:	2301      	moveq	r3, #1
 800c678:	2300      	movne	r3, #0
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	461a      	mov	r2, r3
 800c67e:	79fb      	ldrb	r3, [r7, #7]
 800c680:	429a      	cmp	r2, r3
 800c682:	d0a0      	beq.n	800c5c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c690:	b480      	push	{r7}
 800c692:	b0a3      	sub	sp, #140	; 0x8c
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	4613      	mov	r3, r2
 800c69c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	88fa      	ldrh	r2, [r7, #6]
 800c6a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	88fa      	ldrh	r2, [r7, #6]
 800c6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6c2:	d10e      	bne.n	800c6e2 <UART_Start_Receive_IT+0x52>
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d105      	bne.n	800c6d8 <UART_Start_Receive_IT+0x48>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c6d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c6d6:	e02d      	b.n	800c734 <UART_Start_Receive_IT+0xa4>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	22ff      	movs	r2, #255	; 0xff
 800c6dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c6e0:	e028      	b.n	800c734 <UART_Start_Receive_IT+0xa4>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10d      	bne.n	800c706 <UART_Start_Receive_IT+0x76>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d104      	bne.n	800c6fc <UART_Start_Receive_IT+0x6c>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c6fa:	e01b      	b.n	800c734 <UART_Start_Receive_IT+0xa4>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	227f      	movs	r2, #127	; 0x7f
 800c700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c704:	e016      	b.n	800c734 <UART_Start_Receive_IT+0xa4>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c70e:	d10d      	bne.n	800c72c <UART_Start_Receive_IT+0x9c>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d104      	bne.n	800c722 <UART_Start_Receive_IT+0x92>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	227f      	movs	r2, #127	; 0x7f
 800c71c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c720:	e008      	b.n	800c734 <UART_Start_Receive_IT+0xa4>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	223f      	movs	r2, #63	; 0x3f
 800c726:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c72a:	e003      	b.n	800c734 <UART_Start_Receive_IT+0xa4>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2222      	movs	r2, #34	; 0x22
 800c740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3308      	adds	r3, #8
 800c74a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c74e:	e853 3f00 	ldrex	r3, [r3]
 800c752:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c756:	f043 0301 	orr.w	r3, r3, #1
 800c75a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c768:	673a      	str	r2, [r7, #112]	; 0x70
 800c76a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c76e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c770:	e841 2300 	strex	r3, r2, [r1]
 800c774:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1e3      	bne.n	800c744 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c784:	d14f      	bne.n	800c826 <UART_Start_Receive_IT+0x196>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c78c:	88fa      	ldrh	r2, [r7, #6]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d349      	bcc.n	800c826 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c79a:	d107      	bne.n	800c7ac <UART_Start_Receive_IT+0x11c>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d103      	bne.n	800c7ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4a47      	ldr	r2, [pc, #284]	; (800c8c4 <UART_Start_Receive_IT+0x234>)
 800c7a8:	675a      	str	r2, [r3, #116]	; 0x74
 800c7aa:	e002      	b.n	800c7b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4a46      	ldr	r2, [pc, #280]	; (800c8c8 <UART_Start_Receive_IT+0x238>)
 800c7b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d01a      	beq.n	800c7f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7c2:	e853 3f00 	ldrex	r3, [r3]
 800c7c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c7e4:	e841 2300 	strex	r3, r2, [r1]
 800c7e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c7ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1e4      	bne.n	800c7ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fa:	e853 3f00 	ldrex	r3, [r3]
 800c7fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c806:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3308      	adds	r3, #8
 800c80e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c810:	64ba      	str	r2, [r7, #72]	; 0x48
 800c812:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c814:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c818:	e841 2300 	strex	r3, r2, [r1]
 800c81c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1e5      	bne.n	800c7f0 <UART_Start_Receive_IT+0x160>
 800c824:	e046      	b.n	800c8b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c82e:	d107      	bne.n	800c840 <UART_Start_Receive_IT+0x1b0>
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d103      	bne.n	800c840 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4a24      	ldr	r2, [pc, #144]	; (800c8cc <UART_Start_Receive_IT+0x23c>)
 800c83c:	675a      	str	r2, [r3, #116]	; 0x74
 800c83e:	e002      	b.n	800c846 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	4a23      	ldr	r2, [pc, #140]	; (800c8d0 <UART_Start_Receive_IT+0x240>)
 800c844:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d019      	beq.n	800c882 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c862:	677b      	str	r3, [r7, #116]	; 0x74
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	461a      	mov	r2, r3
 800c86a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c86c:	637b      	str	r3, [r7, #52]	; 0x34
 800c86e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c874:	e841 2300 	strex	r3, r2, [r1]
 800c878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e6      	bne.n	800c84e <UART_Start_Receive_IT+0x1be>
 800c880:	e018      	b.n	800c8b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	e853 3f00 	ldrex	r3, [r3]
 800c88e:	613b      	str	r3, [r7, #16]
   return(result);
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f043 0320 	orr.w	r3, r3, #32
 800c896:	67bb      	str	r3, [r7, #120]	; 0x78
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	461a      	mov	r2, r3
 800c89e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8a0:	623b      	str	r3, [r7, #32]
 800c8a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a4:	69f9      	ldr	r1, [r7, #28]
 800c8a6:	6a3a      	ldr	r2, [r7, #32]
 800c8a8:	e841 2300 	strex	r3, r2, [r1]
 800c8ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1e6      	bne.n	800c882 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	378c      	adds	r7, #140	; 0x8c
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	0800d0f5 	.word	0x0800d0f5
 800c8c8:	0800cd95 	.word	0x0800cd95
 800c8cc:	0800cbdd 	.word	0x0800cbdd
 800c8d0:	0800ca25 	.word	0x0800ca25

0800c8d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b095      	sub	sp, #84	; 0x54
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e4:	e853 3f00 	ldrex	r3, [r3]
 800c8e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c8fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e6      	bne.n	800c8dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3308      	adds	r3, #8
 800c914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c91e:	69fa      	ldr	r2, [r7, #28]
 800c920:	4b1e      	ldr	r3, [pc, #120]	; (800c99c <UART_EndRxTransfer+0xc8>)
 800c922:	4013      	ands	r3, r2
 800c924:	64bb      	str	r3, [r7, #72]	; 0x48
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c92e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e5      	bne.n	800c90e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c946:	2b01      	cmp	r3, #1
 800c948:	d118      	bne.n	800c97c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	e853 3f00 	ldrex	r3, [r3]
 800c956:	60bb      	str	r3, [r7, #8]
   return(result);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	f023 0310 	bic.w	r3, r3, #16
 800c95e:	647b      	str	r3, [r7, #68]	; 0x44
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	461a      	mov	r2, r3
 800c966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c968:	61bb      	str	r3, [r7, #24]
 800c96a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96c:	6979      	ldr	r1, [r7, #20]
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	e841 2300 	strex	r3, r2, [r1]
 800c974:	613b      	str	r3, [r7, #16]
   return(result);
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e6      	bne.n	800c94a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2220      	movs	r2, #32
 800c980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c990:	bf00      	nop
 800c992:	3754      	adds	r7, #84	; 0x54
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	effffffe 	.word	0xeffffffe

0800c9a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7fe ff2e 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9c4:	bf00      	nop
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	e853 3f00 	ldrex	r3, [r3]
 800c9e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9e8:	61fb      	str	r3, [r7, #28]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	61bb      	str	r3, [r7, #24]
 800c9f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f6:	6979      	ldr	r1, [r7, #20]
 800c9f8:	69ba      	ldr	r2, [r7, #24]
 800c9fa:	e841 2300 	strex	r3, r2, [r1]
 800c9fe:	613b      	str	r3, [r7, #16]
   return(result);
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1e6      	bne.n	800c9d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2220      	movs	r2, #32
 800ca0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7fe fef9 	bl	800b80c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca1a:	bf00      	nop
 800ca1c:	3720      	adds	r7, #32
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
	...

0800ca24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b09c      	sub	sp, #112	; 0x70
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca3c:	2b22      	cmp	r3, #34	; 0x22
 800ca3e:	f040 80be 	bne.w	800cbbe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ca50:	b2d9      	uxtb	r1, r3
 800ca52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5c:	400a      	ands	r2, r1
 800ca5e:	b2d2      	uxtb	r2, r2
 800ca60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	3b01      	subs	r3, #1
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f040 80a1 	bne.w	800cbce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca94:	e853 3f00 	ldrex	r3, [r3]
 800ca98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa0:	66bb      	str	r3, [r7, #104]	; 0x68
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800caac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cab2:	e841 2300 	strex	r3, r2, [r1]
 800cab6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e6      	bne.n	800ca8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3308      	adds	r3, #8
 800cac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad0:	f023 0301 	bic.w	r3, r3, #1
 800cad4:	667b      	str	r3, [r7, #100]	; 0x64
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3308      	adds	r3, #8
 800cadc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cade:	647a      	str	r2, [r7, #68]	; 0x44
 800cae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cae6:	e841 2300 	strex	r3, r2, [r1]
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800caec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e5      	bne.n	800cabe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a33      	ldr	r2, [pc, #204]	; (800cbd8 <UART_RxISR_8BIT+0x1b4>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d01f      	beq.n	800cb50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d018      	beq.n	800cb50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	e853 3f00 	ldrex	r3, [r3]
 800cb2a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb32:	663b      	str	r3, [r7, #96]	; 0x60
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb3c:	633b      	str	r3, [r7, #48]	; 0x30
 800cb3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e6      	bne.n	800cb1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d12e      	bne.n	800cbb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	e853 3f00 	ldrex	r3, [r3]
 800cb6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f023 0310 	bic.w	r3, r3, #16
 800cb72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb7c:	61fb      	str	r3, [r7, #28]
 800cb7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb80:	69b9      	ldr	r1, [r7, #24]
 800cb82:	69fa      	ldr	r2, [r7, #28]
 800cb84:	e841 2300 	strex	r3, r2, [r1]
 800cb88:	617b      	str	r3, [r7, #20]
   return(result);
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1e6      	bne.n	800cb5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	f003 0310 	and.w	r3, r3, #16
 800cb9a:	2b10      	cmp	r3, #16
 800cb9c:	d103      	bne.n	800cba6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2210      	movs	r2, #16
 800cba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7fe fe40 	bl	800b834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbb4:	e00b      	b.n	800cbce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7f3 fd4a 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800cbbc:	e007      	b.n	800cbce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	699a      	ldr	r2, [r3, #24]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f042 0208 	orr.w	r2, r2, #8
 800cbcc:	619a      	str	r2, [r3, #24]
}
 800cbce:	bf00      	nop
 800cbd0:	3770      	adds	r7, #112	; 0x70
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	58000c00 	.word	0x58000c00

0800cbdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b09c      	sub	sp, #112	; 0x70
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf4:	2b22      	cmp	r3, #34	; 0x22
 800cbf6:	f040 80be 	bne.w	800cd76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cc0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cc12:	4013      	ands	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1e:	1c9a      	adds	r2, r3, #2
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f040 80a1 	bne.w	800cd86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc4c:	e853 3f00 	ldrex	r3, [r3]
 800cc50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc58:	667b      	str	r3, [r7, #100]	; 0x64
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc62:	657b      	str	r3, [r7, #84]	; 0x54
 800cc64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc6a:	e841 2300 	strex	r3, r2, [r1]
 800cc6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e6      	bne.n	800cc44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3308      	adds	r3, #8
 800cc7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc80:	e853 3f00 	ldrex	r3, [r3]
 800cc84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc88:	f023 0301 	bic.w	r3, r3, #1
 800cc8c:	663b      	str	r3, [r7, #96]	; 0x60
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3308      	adds	r3, #8
 800cc94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc96:	643a      	str	r2, [r7, #64]	; 0x40
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc9e:	e841 2300 	strex	r3, r2, [r1]
 800cca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e5      	bne.n	800cc76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2220      	movs	r2, #32
 800ccae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a33      	ldr	r2, [pc, #204]	; (800cd90 <UART_RxISR_16BIT+0x1b4>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d01f      	beq.n	800cd08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d018      	beq.n	800cd08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e6      	bne.n	800ccd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d12e      	bne.n	800cd6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	e853 3f00 	ldrex	r3, [r3]
 800cd22:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f023 0310 	bic.w	r3, r3, #16
 800cd2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	461a      	mov	r2, r3
 800cd32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd38:	6979      	ldr	r1, [r7, #20]
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	e841 2300 	strex	r3, r2, [r1]
 800cd40:	613b      	str	r3, [r7, #16]
   return(result);
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e6      	bne.n	800cd16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69db      	ldr	r3, [r3, #28]
 800cd4e:	f003 0310 	and.w	r3, r3, #16
 800cd52:	2b10      	cmp	r3, #16
 800cd54:	d103      	bne.n	800cd5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2210      	movs	r2, #16
 800cd5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7fe fd64 	bl	800b834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd6c:	e00b      	b.n	800cd86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7f3 fc6e 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800cd74:	e007      	b.n	800cd86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	699a      	ldr	r2, [r3, #24]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f042 0208 	orr.w	r2, r2, #8
 800cd84:	619a      	str	r2, [r3, #24]
}
 800cd86:	bf00      	nop
 800cd88:	3770      	adds	r7, #112	; 0x70
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	58000c00 	.word	0x58000c00

0800cd94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b0ac      	sub	sp, #176	; 0xb0
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cda2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdca:	2b22      	cmp	r3, #34	; 0x22
 800cdcc:	f040 8180 	bne.w	800d0d0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cdd6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cdda:	e123      	b.n	800d024 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cde6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cdea:	b2d9      	uxtb	r1, r3
 800cdec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf6:	400a      	ands	r2, r1
 800cdf8:	b2d2      	uxtb	r2, r2
 800cdfa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d053      	beq.n	800ced6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d011      	beq.n	800ce5e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ce3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ce3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00b      	beq.n	800ce5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce54:	f043 0201 	orr.w	r2, r3, #1
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d011      	beq.n	800ce8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ce6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00b      	beq.n	800ce8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce84:	f043 0204 	orr.w	r2, r3, #4
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d011      	beq.n	800cebe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ce9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00b      	beq.n	800cebe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2204      	movs	r2, #4
 800ceac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceb4:	f043 0202 	orr.w	r2, r3, #2
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d006      	beq.n	800ced6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7fe fca9 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cedc:	b29b      	uxth	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 80a0 	bne.w	800d024 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ceec:	e853 3f00 	ldrex	r3, [r3]
 800cef0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800cef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	461a      	mov	r2, r3
 800cf02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cf08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cf0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf0e:	e841 2300 	strex	r3, r2, [r1]
 800cf12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800cf14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1e4      	bne.n	800cee4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3308      	adds	r3, #8
 800cf20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf24:	e853 3f00 	ldrex	r3, [r3]
 800cf28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cf2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf2c:	4b6e      	ldr	r3, [pc, #440]	; (800d0e8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800cf2e:	4013      	ands	r3, r2
 800cf30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3308      	adds	r3, #8
 800cf3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf3e:	66ba      	str	r2, [r7, #104]	; 0x68
 800cf40:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf42:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cf44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf46:	e841 2300 	strex	r3, r2, [r1]
 800cf4a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cf4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1e3      	bne.n	800cf1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2220      	movs	r2, #32
 800cf56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a60      	ldr	r2, [pc, #384]	; (800d0ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d021      	beq.n	800cfb4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d01a      	beq.n	800cfb4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf86:	e853 3f00 	ldrex	r3, [r3]
 800cf8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cf8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfa0:	657b      	str	r3, [r7, #84]	; 0x54
 800cfa2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfa8:	e841 2300 	strex	r3, r2, [r1]
 800cfac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1e4      	bne.n	800cf7e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d130      	bne.n	800d01e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfca:	e853 3f00 	ldrex	r3, [r3]
 800cfce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd2:	f023 0310 	bic.w	r3, r3, #16
 800cfd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfe4:	643b      	str	r3, [r7, #64]	; 0x40
 800cfe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfec:	e841 2300 	strex	r3, r2, [r1]
 800cff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1e4      	bne.n	800cfc2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	69db      	ldr	r3, [r3, #28]
 800cffe:	f003 0310 	and.w	r3, r3, #16
 800d002:	2b10      	cmp	r3, #16
 800d004:	d103      	bne.n	800d00e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2210      	movs	r2, #16
 800d00c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7fe fc0c 	bl	800b834 <HAL_UARTEx_RxEventCallback>
 800d01c:	e002      	b.n	800d024 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7f3 fb16 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d024:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d006      	beq.n	800d03a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d02c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d030:	f003 0320 	and.w	r3, r3, #32
 800d034:	2b00      	cmp	r3, #0
 800d036:	f47f aed1 	bne.w	800cddc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d040:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d044:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d049      	beq.n	800d0e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d052:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d056:	429a      	cmp	r2, r3
 800d058:	d242      	bcs.n	800d0e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3308      	adds	r3, #8
 800d060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	e853 3f00 	ldrex	r3, [r3]
 800d068:	61fb      	str	r3, [r7, #28]
   return(result);
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3308      	adds	r3, #8
 800d07a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d07e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d086:	e841 2300 	strex	r3, r2, [r1]
 800d08a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1e3      	bne.n	800d05a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a16      	ldr	r2, [pc, #88]	; (800d0f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d096:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	e853 3f00 	ldrex	r3, [r3]
 800d0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f043 0320 	orr.w	r3, r3, #32
 800d0ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0ba:	61bb      	str	r3, [r7, #24]
 800d0bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0be:	6979      	ldr	r1, [r7, #20]
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	e841 2300 	strex	r3, r2, [r1]
 800d0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1e4      	bne.n	800d098 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0ce:	e007      	b.n	800d0e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	699a      	ldr	r2, [r3, #24]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f042 0208 	orr.w	r2, r2, #8
 800d0de:	619a      	str	r2, [r3, #24]
}
 800d0e0:	bf00      	nop
 800d0e2:	37b0      	adds	r7, #176	; 0xb0
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	effffffe 	.word	0xeffffffe
 800d0ec:	58000c00 	.word	0x58000c00
 800d0f0:	0800ca25 	.word	0x0800ca25

0800d0f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b0ae      	sub	sp, #184	; 0xb8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d102:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	69db      	ldr	r3, [r3, #28]
 800d10c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d12a:	2b22      	cmp	r3, #34	; 0x22
 800d12c:	f040 8184 	bne.w	800d438 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d136:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d13a:	e127      	b.n	800d38c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d142:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d14a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d14e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d152:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d156:	4013      	ands	r3, r2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d15e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d164:	1c9a      	adds	r2, r3, #2
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d170:	b29b      	uxth	r3, r3
 800d172:	3b01      	subs	r3, #1
 800d174:	b29a      	uxth	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	69db      	ldr	r3, [r3, #28]
 800d182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d18a:	f003 0307 	and.w	r3, r3, #7
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d053      	beq.n	800d23a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d011      	beq.n	800d1c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d19e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00b      	beq.n	800d1c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b8:	f043 0201 	orr.w	r2, r3, #1
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1c6:	f003 0302 	and.w	r3, r3, #2
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d011      	beq.n	800d1f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d1ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1e8:	f043 0204 	orr.w	r2, r3, #4
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1f6:	f003 0304 	and.w	r3, r3, #4
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d011      	beq.n	800d222 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d1fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d202:	f003 0301 	and.w	r3, r3, #1
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00b      	beq.n	800d222 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2204      	movs	r2, #4
 800d210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d218:	f043 0202 	orr.w	r2, r3, #2
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d006      	beq.n	800d23a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7fe faf7 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d240:	b29b      	uxth	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80a2 	bne.w	800d38c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d250:	e853 3f00 	ldrex	r3, [r3]
 800d254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d25c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	461a      	mov	r2, r3
 800d266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d26a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d26e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d276:	e841 2300 	strex	r3, r2, [r1]
 800d27a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d27c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1e2      	bne.n	800d248 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3308      	adds	r3, #8
 800d288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d28c:	e853 3f00 	ldrex	r3, [r3]
 800d290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d294:	4b6e      	ldr	r3, [pc, #440]	; (800d450 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d296:	4013      	ands	r3, r2
 800d298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d2a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2ae:	e841 2300 	strex	r3, r2, [r1]
 800d2b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1e3      	bne.n	800d282 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2220      	movs	r2, #32
 800d2be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a60      	ldr	r2, [pc, #384]	; (800d454 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d021      	beq.n	800d31c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d01a      	beq.n	800d31c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ee:	e853 3f00 	ldrex	r3, [r3]
 800d2f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	461a      	mov	r2, r3
 800d304:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d308:	65bb      	str	r3, [r7, #88]	; 0x58
 800d30a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d30e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d310:	e841 2300 	strex	r3, r2, [r1]
 800d314:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e4      	bne.n	800d2e6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d320:	2b01      	cmp	r3, #1
 800d322:	d130      	bne.n	800d386 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33a:	f023 0310 	bic.w	r3, r3, #16
 800d33e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d34c:	647b      	str	r3, [r7, #68]	; 0x44
 800d34e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d354:	e841 2300 	strex	r3, r2, [r1]
 800d358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e4      	bne.n	800d32a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	f003 0310 	and.w	r3, r3, #16
 800d36a:	2b10      	cmp	r3, #16
 800d36c:	d103      	bne.n	800d376 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2210      	movs	r2, #16
 800d374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7fe fa58 	bl	800b834 <HAL_UARTEx_RxEventCallback>
 800d384:	e002      	b.n	800d38c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7f3 f962 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d38c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f47f aecd 	bne.w	800d13c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d3ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d049      	beq.n	800d448 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3ba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d242      	bcs.n	800d448 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	e853 3f00 	ldrex	r3, [r3]
 800d3d0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d3e6:	633a      	str	r2, [r7, #48]	; 0x30
 800d3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ee:	e841 2300 	strex	r3, r2, [r1]
 800d3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1e3      	bne.n	800d3c2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a16      	ldr	r2, [pc, #88]	; (800d458 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d3fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	e853 3f00 	ldrex	r3, [r3]
 800d40c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f043 0320 	orr.w	r3, r3, #32
 800d414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d422:	61fb      	str	r3, [r7, #28]
 800d424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d426:	69b9      	ldr	r1, [r7, #24]
 800d428:	69fa      	ldr	r2, [r7, #28]
 800d42a:	e841 2300 	strex	r3, r2, [r1]
 800d42e:	617b      	str	r3, [r7, #20]
   return(result);
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e4      	bne.n	800d400 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d436:	e007      	b.n	800d448 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	699a      	ldr	r2, [r3, #24]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f042 0208 	orr.w	r2, r2, #8
 800d446:	619a      	str	r2, [r3, #24]
}
 800d448:	bf00      	nop
 800d44a:	37b8      	adds	r7, #184	; 0xb8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	effffffe 	.word	0xeffffffe
 800d454:	58000c00 	.word	0x58000c00
 800d458:	0800cbdd 	.word	0x0800cbdd

0800d45c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d101      	bne.n	800d4ae <HAL_UARTEx_DisableFifoMode+0x16>
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	e027      	b.n	800d4fe <HAL_UARTEx_DisableFifoMode+0x66>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2224      	movs	r2, #36	; 0x24
 800d4ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f022 0201 	bic.w	r2, r2, #1
 800d4d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d101      	bne.n	800d522 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d51e:	2302      	movs	r3, #2
 800d520:	e02d      	b.n	800d57e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2224      	movs	r2, #36	; 0x24
 800d52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f022 0201 	bic.w	r2, r2, #1
 800d548:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f850 	bl	800d604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2220      	movs	r2, #32
 800d570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d596:	2b01      	cmp	r3, #1
 800d598:	d101      	bne.n	800d59e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d59a:	2302      	movs	r3, #2
 800d59c:	e02d      	b.n	800d5fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2224      	movs	r2, #36	; 0x24
 800d5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f022 0201 	bic.w	r2, r2, #1
 800d5c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f812 	bl	800d604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2220      	movs	r2, #32
 800d5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d610:	2b00      	cmp	r3, #0
 800d612:	d108      	bne.n	800d626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d624:	e031      	b.n	800d68a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d626:	2310      	movs	r3, #16
 800d628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d62a:	2310      	movs	r3, #16
 800d62c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	0e5b      	lsrs	r3, r3, #25
 800d636:	b2db      	uxtb	r3, r3
 800d638:	f003 0307 	and.w	r3, r3, #7
 800d63c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	0f5b      	lsrs	r3, r3, #29
 800d646:	b2db      	uxtb	r3, r3
 800d648:	f003 0307 	and.w	r3, r3, #7
 800d64c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d64e:	7bbb      	ldrb	r3, [r7, #14]
 800d650:	7b3a      	ldrb	r2, [r7, #12]
 800d652:	4911      	ldr	r1, [pc, #68]	; (800d698 <UARTEx_SetNbDataToProcess+0x94>)
 800d654:	5c8a      	ldrb	r2, [r1, r2]
 800d656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d65a:	7b3a      	ldrb	r2, [r7, #12]
 800d65c:	490f      	ldr	r1, [pc, #60]	; (800d69c <UARTEx_SetNbDataToProcess+0x98>)
 800d65e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d660:	fb93 f3f2 	sdiv	r3, r3, r2
 800d664:	b29a      	uxth	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
 800d66e:	7b7a      	ldrb	r2, [r7, #13]
 800d670:	4909      	ldr	r1, [pc, #36]	; (800d698 <UARTEx_SetNbDataToProcess+0x94>)
 800d672:	5c8a      	ldrb	r2, [r1, r2]
 800d674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d678:	7b7a      	ldrb	r2, [r7, #13]
 800d67a:	4908      	ldr	r1, [pc, #32]	; (800d69c <UARTEx_SetNbDataToProcess+0x98>)
 800d67c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d67e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d682:	b29a      	uxth	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	0801164c 	.word	0x0801164c
 800d69c:	08011654 	.word	0x08011654

0800d6a0 <__NVIC_SetPriority>:
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6039      	str	r1, [r7, #0]
 800d6aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d6ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	db0a      	blt.n	800d6ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	490c      	ldr	r1, [pc, #48]	; (800d6ec <__NVIC_SetPriority+0x4c>)
 800d6ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d6be:	0112      	lsls	r2, r2, #4
 800d6c0:	b2d2      	uxtb	r2, r2
 800d6c2:	440b      	add	r3, r1
 800d6c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d6c8:	e00a      	b.n	800d6e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	4908      	ldr	r1, [pc, #32]	; (800d6f0 <__NVIC_SetPriority+0x50>)
 800d6d0:	88fb      	ldrh	r3, [r7, #6]
 800d6d2:	f003 030f 	and.w	r3, r3, #15
 800d6d6:	3b04      	subs	r3, #4
 800d6d8:	0112      	lsls	r2, r2, #4
 800d6da:	b2d2      	uxtb	r2, r2
 800d6dc:	440b      	add	r3, r1
 800d6de:	761a      	strb	r2, [r3, #24]
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	e000e100 	.word	0xe000e100
 800d6f0:	e000ed00 	.word	0xe000ed00

0800d6f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <SysTick_Handler+0x1c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d6fc:	f002 f872 	bl	800f7e4 <xTaskGetSchedulerState>
 800d700:	4603      	mov	r3, r0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d001      	beq.n	800d70a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d706:	f002 fe8f 	bl	8010428 <xPortSysTickHandler>
  }
}
 800d70a:	bf00      	nop
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	e000e010 	.word	0xe000e010

0800d714 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d718:	2100      	movs	r1, #0
 800d71a:	f06f 0004 	mvn.w	r0, #4
 800d71e:	f7ff ffbf 	bl	800d6a0 <__NVIC_SetPriority>
#endif
}
 800d722:	bf00      	nop
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d72e:	f3ef 8305 	mrs	r3, IPSR
 800d732:	603b      	str	r3, [r7, #0]
  return(result);
 800d734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d73a:	f06f 0305 	mvn.w	r3, #5
 800d73e:	607b      	str	r3, [r7, #4]
 800d740:	e00c      	b.n	800d75c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d742:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <osKernelInitialize+0x44>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d105      	bne.n	800d756 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d74a:	4b08      	ldr	r3, [pc, #32]	; (800d76c <osKernelInitialize+0x44>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d750:	2300      	movs	r3, #0
 800d752:	607b      	str	r3, [r7, #4]
 800d754:	e002      	b.n	800d75c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d75a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d75c:	687b      	ldr	r3, [r7, #4]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	24000494 	.word	0x24000494

0800d770 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d776:	f3ef 8305 	mrs	r3, IPSR
 800d77a:	603b      	str	r3, [r7, #0]
  return(result);
 800d77c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d782:	f06f 0305 	mvn.w	r3, #5
 800d786:	607b      	str	r3, [r7, #4]
 800d788:	e010      	b.n	800d7ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d78a:	4b0b      	ldr	r3, [pc, #44]	; (800d7b8 <osKernelStart+0x48>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d109      	bne.n	800d7a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d792:	f7ff ffbf 	bl	800d714 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d796:	4b08      	ldr	r3, [pc, #32]	; (800d7b8 <osKernelStart+0x48>)
 800d798:	2202      	movs	r2, #2
 800d79a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d79c:	f001 fb3c 	bl	800ee18 <vTaskStartScheduler>
      stat = osOK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	607b      	str	r3, [r7, #4]
 800d7a4:	e002      	b.n	800d7ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7ac:	687b      	ldr	r3, [r7, #4]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	24000494 	.word	0x24000494

0800d7bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08e      	sub	sp, #56	; 0x38
 800d7c0:	af04      	add	r7, sp, #16
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7cc:	f3ef 8305 	mrs	r3, IPSR
 800d7d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d17e      	bne.n	800d8d6 <osThreadNew+0x11a>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d07b      	beq.n	800d8d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d7de:	2380      	movs	r3, #128	; 0x80
 800d7e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d7e2:	2318      	movs	r3, #24
 800d7e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d7ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d045      	beq.n	800d882 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <osThreadNew+0x48>
        name = attr->name;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d008      	beq.n	800d82a <osThreadNew+0x6e>
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	2b38      	cmp	r3, #56	; 0x38
 800d81c:	d805      	bhi.n	800d82a <osThreadNew+0x6e>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <osThreadNew+0x72>
        return (NULL);
 800d82a:	2300      	movs	r3, #0
 800d82c:	e054      	b.n	800d8d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	695b      	ldr	r3, [r3, #20]
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00e      	beq.n	800d864 <osThreadNew+0xa8>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	2b5b      	cmp	r3, #91	; 0x5b
 800d84c:	d90a      	bls.n	800d864 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d852:	2b00      	cmp	r3, #0
 800d854:	d006      	beq.n	800d864 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <osThreadNew+0xa8>
        mem = 1;
 800d85e:	2301      	movs	r3, #1
 800d860:	61bb      	str	r3, [r7, #24]
 800d862:	e010      	b.n	800d886 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10c      	bne.n	800d886 <osThreadNew+0xca>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d108      	bne.n	800d886 <osThreadNew+0xca>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d104      	bne.n	800d886 <osThreadNew+0xca>
          mem = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	61bb      	str	r3, [r7, #24]
 800d880:	e001      	b.n	800d886 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d110      	bne.n	800d8ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d894:	9202      	str	r2, [sp, #8]
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	6a3a      	ldr	r2, [r7, #32]
 800d8a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f001 f8e2 	bl	800ea6c <xTaskCreateStatic>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	e013      	b.n	800d8d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d110      	bne.n	800d8d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	f107 0310 	add.w	r3, r7, #16
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f001 f92d 	bl	800eb26 <xTaskCreate>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d001      	beq.n	800d8d6 <osThreadNew+0x11a>
            hTask = NULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8d6:	693b      	ldr	r3, [r7, #16]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	; 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8e8:	f3ef 8305 	mrs	r3, IPSR
 800d8ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <osDelay+0x1c>
    stat = osErrorISR;
 800d8f4:	f06f 0305 	mvn.w	r3, #5
 800d8f8:	60fb      	str	r3, [r7, #12]
 800d8fa:	e007      	b.n	800d90c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <osDelay+0x2c>
      vTaskDelay(ticks);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f001 fa52 	bl	800edb0 <vTaskDelay>
    }
  }

  return (stat);
 800d90c:	68fb      	ldr	r3, [r7, #12]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800d916:	b580      	push	{r7, lr}
 800d918:	b086      	sub	sp, #24
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d922:	f3ef 8305 	mrs	r3, IPSR
 800d926:	60fb      	str	r3, [r7, #12]
  return(result);
 800d928:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d12d      	bne.n	800d98a <osEventFlagsNew+0x74>
    mem = -1;
 800d92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d932:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d015      	beq.n	800d966 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <osEventFlagsNew+0x3a>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	2b1f      	cmp	r3, #31
 800d948:	d902      	bls.n	800d950 <osEventFlagsNew+0x3a>
        mem = 1;
 800d94a:	2301      	movs	r3, #1
 800d94c:	613b      	str	r3, [r7, #16]
 800d94e:	e00c      	b.n	800d96a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d108      	bne.n	800d96a <osEventFlagsNew+0x54>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d104      	bne.n	800d96a <osEventFlagsNew+0x54>
          mem = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	613b      	str	r3, [r7, #16]
 800d964:	e001      	b.n	800d96a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d106      	bne.n	800d97e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 f8eb 	bl	800db50 <xEventGroupCreateStatic>
 800d97a:	6178      	str	r0, [r7, #20]
 800d97c:	e005      	b.n	800d98a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800d984:	f000 f91b 	bl	800dbbe <xEventGroupCreate>
 800d988:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800d98a:	697b      	ldr	r3, [r7, #20]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d004      	beq.n	800d9b2 <osEventFlagsSet+0x1e>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800d9b2:	f06f 0303 	mvn.w	r3, #3
 800d9b6:	617b      	str	r3, [r7, #20]
 800d9b8:	e028      	b.n	800da0c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ba:	f3ef 8305 	mrs	r3, IPSR
 800d9be:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d01d      	beq.n	800da02 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800d9ca:	f107 0308 	add.w	r3, r7, #8
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6938      	ldr	r0, [r7, #16]
 800d9d4:	f000 fa96 	bl	800df04 <xEventGroupSetBitsFromISR>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d103      	bne.n	800d9e6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800d9de:	f06f 0302 	mvn.w	r3, #2
 800d9e2:	617b      	str	r3, [r7, #20]
 800d9e4:	e012      	b.n	800da0c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00d      	beq.n	800da0c <osEventFlagsSet+0x78>
 800d9f0:	4b09      	ldr	r3, [pc, #36]	; (800da18 <osEventFlagsSet+0x84>)
 800d9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	e004      	b.n	800da0c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6938      	ldr	r0, [r7, #16]
 800da06:	f000 f9c3 	bl	800dd90 <xEventGroupSetBits>
 800da0a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800da0c:	697b      	ldr	r3, [r7, #20]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08c      	sub	sp, #48	; 0x30
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d004      	beq.n	800da3e <osEventFlagsWait+0x22>
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800da3e:	f06f 0303 	mvn.w	r3, #3
 800da42:	61fb      	str	r3, [r7, #28]
 800da44:	e04b      	b.n	800dade <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da46:	f3ef 8305 	mrs	r3, IPSR
 800da4a:	617b      	str	r3, [r7, #20]
  return(result);
 800da4c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800da52:	f06f 0305 	mvn.w	r3, #5
 800da56:	61fb      	str	r3, [r7, #28]
 800da58:	e041      	b.n	800dade <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f003 0301 	and.w	r3, r3, #1
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800da64:	2301      	movs	r3, #1
 800da66:	627b      	str	r3, [r7, #36]	; 0x24
 800da68:	e001      	b.n	800da6e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f003 0302 	and.w	r3, r3, #2
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800da78:	2300      	movs	r3, #0
 800da7a:	623b      	str	r3, [r7, #32]
 800da7c:	e001      	b.n	800da82 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800da7e:	2301      	movs	r3, #1
 800da80:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	6a3a      	ldr	r2, [r7, #32]
 800da8a:	68b9      	ldr	r1, [r7, #8]
 800da8c:	69b8      	ldr	r0, [r7, #24]
 800da8e:	f000 f8b1 	bl	800dbf4 <xEventGroupWaitBits>
 800da92:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d010      	beq.n	800dac0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	4013      	ands	r3, r2
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d019      	beq.n	800dade <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d003      	beq.n	800dab8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800dab0:	f06f 0301 	mvn.w	r3, #1
 800dab4:	61fb      	str	r3, [r7, #28]
 800dab6:	e012      	b.n	800dade <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dab8:	f06f 0302 	mvn.w	r3, #2
 800dabc:	61fb      	str	r3, [r7, #28]
 800dabe:	e00e      	b.n	800dade <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	4013      	ands	r3, r2
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d109      	bne.n	800dade <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d003      	beq.n	800dad8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800dad0:	f06f 0301 	mvn.w	r3, #1
 800dad4:	61fb      	str	r3, [r7, #28]
 800dad6:	e002      	b.n	800dade <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dad8:	f06f 0302 	mvn.w	r3, #2
 800dadc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800dade:	69fb      	ldr	r3, [r7, #28]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3728      	adds	r7, #40	; 0x28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	4a07      	ldr	r2, [pc, #28]	; (800db14 <vApplicationGetIdleTaskMemory+0x2c>)
 800daf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	4a06      	ldr	r2, [pc, #24]	; (800db18 <vApplicationGetIdleTaskMemory+0x30>)
 800dafe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2280      	movs	r2, #128	; 0x80
 800db04:	601a      	str	r2, [r3, #0]
}
 800db06:	bf00      	nop
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	24000498 	.word	0x24000498
 800db18:	240004f4 	.word	0x240004f4

0800db1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4a07      	ldr	r2, [pc, #28]	; (800db48 <vApplicationGetTimerTaskMemory+0x2c>)
 800db2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	4a06      	ldr	r2, [pc, #24]	; (800db4c <vApplicationGetTimerTaskMemory+0x30>)
 800db32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db3a:	601a      	str	r2, [r3, #0]
}
 800db3c:	bf00      	nop
 800db3e:	3714      	adds	r7, #20
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	240006f4 	.word	0x240006f4
 800db4c:	24000750 	.word	0x24000750

0800db50 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10a      	bne.n	800db74 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800db74:	2320      	movs	r3, #32
 800db76:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b20      	cmp	r3, #32
 800db7c:	d00a      	beq.n	800db94 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	60fb      	str	r3, [r7, #12]
}
 800db90:	bf00      	nop
 800db92:	e7fe      	b.n	800db92 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2200      	movs	r2, #0
 800dba2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	3304      	adds	r3, #4
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f9bf 	bl	800df2c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800dbb4:	697b      	ldr	r3, [r7, #20]
	}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b082      	sub	sp, #8
 800dbc2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800dbc4:	2020      	movs	r0, #32
 800dbc6:	f002 fcbf 	bl	8010548 <pvPortMalloc>
 800dbca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00a      	beq.n	800dbe8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	3304      	adds	r3, #4
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 f9a5 	bl	800df2c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800dbe8:	687b      	ldr	r3, [r7, #4]
	}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
	...

0800dbf4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b090      	sub	sp, #64	; 0x40
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
 800dc00:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10a      	bne.n	800dc2a <xEventGroupWaitBits+0x36>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	623b      	str	r3, [r7, #32]
}
 800dc26:	bf00      	nop
 800dc28:	e7fe      	b.n	800dc28 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00a      	beq.n	800dc4a <xEventGroupWaitBits+0x56>
	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	61fb      	str	r3, [r7, #28]
}
 800dc46:	bf00      	nop
 800dc48:	e7fe      	b.n	800dc48 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10a      	bne.n	800dc66 <xEventGroupWaitBits+0x72>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	61bb      	str	r3, [r7, #24]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc66:	f001 fdbd 	bl	800f7e4 <xTaskGetSchedulerState>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <xEventGroupWaitBits+0x82>
 800dc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <xEventGroupWaitBits+0x86>
 800dc76:	2301      	movs	r3, #1
 800dc78:	e000      	b.n	800dc7c <xEventGroupWaitBits+0x88>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10a      	bne.n	800dc96 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	617b      	str	r3, [r7, #20]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800dc96:	f001 f925 	bl	800eee4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800dc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800dca0:	683a      	ldr	r2, [r7, #0]
 800dca2:	68b9      	ldr	r1, [r7, #8]
 800dca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dca6:	f000 f90b 	bl	800dec0 <prvTestWaitCondition>
 800dcaa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00e      	beq.n	800dcd0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d028      	beq.n	800dd12 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	43db      	mvns	r3, r3
 800dcc8:	401a      	ands	r2, r3
 800dcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dccc:	601a      	str	r2, [r3, #0]
 800dcce:	e020      	b.n	800dd12 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800dcd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d104      	bne.n	800dce0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800dcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	633b      	str	r3, [r7, #48]	; 0x30
 800dcde:	e018      	b.n	800dd12 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d003      	beq.n	800dcee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800dce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dcec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d003      	beq.n	800dcfc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcfa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800dcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfe:	1d18      	adds	r0, r3, #4
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	4313      	orrs	r3, r2
 800dd06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd08:	4619      	mov	r1, r3
 800dd0a:	f001 fae3 	bl	800f2d4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800dd12:	f001 f8f5 	bl	800ef00 <xTaskResumeAll>
 800dd16:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800dd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d031      	beq.n	800dd82 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d107      	bne.n	800dd34 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800dd24:	4b19      	ldr	r3, [pc, #100]	; (800dd8c <xEventGroupWaitBits+0x198>)
 800dd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd2a:	601a      	str	r2, [r3, #0]
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800dd34:	f001 fde2 	bl	800f8fc <uxTaskResetEventItemValue>
 800dd38:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800dd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d11a      	bne.n	800dd7a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800dd44:	f002 fade 	bl	8010304 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800dd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	68b9      	ldr	r1, [r7, #8]
 800dd52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd54:	f000 f8b4 	bl	800dec0 <prvTestWaitCondition>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d006      	beq.n	800dd72 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	43db      	mvns	r3, r3
 800dd6c:	401a      	ands	r2, r3
 800dd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd70:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800dd72:	2301      	movs	r3, #1
 800dd74:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800dd76:	f002 faf5 	bl	8010364 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd80:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800dd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3740      	adds	r7, #64	; 0x40
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	e000ed04 	.word	0xe000ed04

0800dd90 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08e      	sub	sp, #56	; 0x38
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800dda2:	2300      	movs	r3, #0
 800dda4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <xEventGroupSetBits+0x32>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	613b      	str	r3, [r7, #16]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00a      	beq.n	800dde2 <xEventGroupSetBits+0x52>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	60fb      	str	r3, [r7, #12]
}
 800ddde:	bf00      	nop
 800dde0:	e7fe      	b.n	800dde0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800dde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde4:	3304      	adds	r3, #4
 800dde6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	3308      	adds	r3, #8
 800ddec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ddee:	f001 f879 	bl	800eee4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	431a      	orrs	r2, r3
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800de04:	e03c      	b.n	800de80 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800de06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800de0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800de12:	2300      	movs	r3, #0
 800de14:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800de1c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800de24:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d108      	bne.n	800de42 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	4013      	ands	r3, r2
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00b      	beq.n	800de54 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800de3c:	2301      	movs	r3, #1
 800de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de40:	e008      	b.n	800de54 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800de42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	4013      	ands	r3, r2
 800de4a:	69ba      	ldr	r2, [r7, #24]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d101      	bne.n	800de54 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800de50:	2301      	movs	r3, #1
 800de52:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	2b00      	cmp	r3, #0
 800de58:	d010      	beq.n	800de7c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de60:	2b00      	cmp	r3, #0
 800de62:	d003      	beq.n	800de6c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800de64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	4313      	orrs	r3, r2
 800de6a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800de74:	4619      	mov	r1, r3
 800de76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de78:	f001 faf8 	bl	800f46c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800de80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de82:	6a3b      	ldr	r3, [r7, #32]
 800de84:	429a      	cmp	r2, r3
 800de86:	d1be      	bne.n	800de06 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8e:	43db      	mvns	r3, r3
 800de90:	401a      	ands	r2, r3
 800de92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de94:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800de96:	f001 f833 	bl	800ef00 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	681b      	ldr	r3, [r3, #0]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3738      	adds	r7, #56	; 0x38
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b082      	sub	sp, #8
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff ff6c 	bl	800dd90 <xEventGroupSetBits>
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800decc:	2300      	movs	r3, #0
 800dece:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d107      	bne.n	800dee6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	4013      	ands	r3, r2
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00a      	beq.n	800def6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dee0:	2301      	movs	r3, #1
 800dee2:	617b      	str	r3, [r7, #20]
 800dee4:	e007      	b.n	800def6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	4013      	ands	r3, r2
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	429a      	cmp	r2, r3
 800def0:	d101      	bne.n	800def6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800def2:	2301      	movs	r3, #1
 800def4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800def6:	697b      	ldr	r3, [r7, #20]
}
 800def8:	4618      	mov	r0, r3
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	68f9      	ldr	r1, [r7, #12]
 800df16:	4804      	ldr	r0, [pc, #16]	; (800df28 <xEventGroupSetBitsFromISR+0x24>)
 800df18:	f002 f8aa 	bl	8010070 <xTimerPendFunctionCallFromISR>
 800df1c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800df1e:	697b      	ldr	r3, [r7, #20]
	}
 800df20:	4618      	mov	r0, r3
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	0800dea7 	.word	0x0800dea7

0800df2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f103 0208 	add.w	r2, r3, #8
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f103 0208 	add.w	r2, r3, #8
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f103 0208 	add.w	r2, r3, #8
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df7a:	bf00      	nop
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df86:	b480      	push	{r7}
 800df88:	b085      	sub	sp, #20
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	601a      	str	r2, [r3, #0]
}
 800dfc2:	bf00      	nop
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b085      	sub	sp, #20
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfe4:	d103      	bne.n	800dfee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	e00c      	b.n	800e008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3308      	adds	r3, #8
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e002      	b.n	800dffc <vListInsert+0x2e>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	429a      	cmp	r2, r3
 800e006:	d2f6      	bcs.n	800dff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6892      	ldr	r2, [r2, #8]
 800e056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	6852      	ldr	r2, [r2, #4]
 800e060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d103      	bne.n	800e074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	689a      	ldr	r2, [r3, #8]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	1e5a      	subs	r2, r3, #1
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <xQueueGenericReset+0x2a>
	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	60bb      	str	r3, [r7, #8]
}
 800e0ba:	bf00      	nop
 800e0bc:	e7fe      	b.n	800e0bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e0be:	f002 f921 	bl	8010304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ca:	68f9      	ldr	r1, [r7, #12]
 800e0cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0ce:	fb01 f303 	mul.w	r3, r1, r3
 800e0d2:	441a      	add	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	68f9      	ldr	r1, [r7, #12]
 800e0f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0f4:	fb01 f303 	mul.w	r3, r1, r3
 800e0f8:	441a      	add	r2, r3
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	22ff      	movs	r2, #255	; 0xff
 800e102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	22ff      	movs	r2, #255	; 0xff
 800e10a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d114      	bne.n	800e13e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01a      	beq.n	800e152 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	3310      	adds	r3, #16
 800e120:	4618      	mov	r0, r3
 800e122:	f001 f93f 	bl	800f3a4 <xTaskRemoveFromEventList>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d012      	beq.n	800e152 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e12c:	4b0c      	ldr	r3, [pc, #48]	; (800e160 <xQueueGenericReset+0xcc>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	e009      	b.n	800e152 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3310      	adds	r3, #16
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff fef2 	bl	800df2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3324      	adds	r3, #36	; 0x24
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff feed 	bl	800df2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e152:	f002 f907 	bl	8010364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e156:	2301      	movs	r3, #1
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	e000ed04 	.word	0xe000ed04

0800e164 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08e      	sub	sp, #56	; 0x38
 800e168:	af02      	add	r7, sp, #8
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10a      	bne.n	800e1aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <xQueueGenericCreateStatic+0x52>
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <xQueueGenericCreateStatic+0x56>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <xQueueGenericCreateStatic+0x58>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10a      	bne.n	800e1d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	623b      	str	r3, [r7, #32]
}
 800e1d2:	bf00      	nop
 800e1d4:	e7fe      	b.n	800e1d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d102      	bne.n	800e1e2 <xQueueGenericCreateStatic+0x7e>
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d101      	bne.n	800e1e6 <xQueueGenericCreateStatic+0x82>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e000      	b.n	800e1e8 <xQueueGenericCreateStatic+0x84>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	61fb      	str	r3, [r7, #28]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e202:	2350      	movs	r3, #80	; 0x50
 800e204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b50      	cmp	r3, #80	; 0x50
 800e20a:	d00a      	beq.n	800e222 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	61bb      	str	r3, [r7, #24]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e222:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00d      	beq.n	800e24a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	2201      	movs	r2, #1
 800e232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e236:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	4613      	mov	r3, r2
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	68b9      	ldr	r1, [r7, #8]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 f805 	bl	800e254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3730      	adds	r7, #48	; 0x30
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	607a      	str	r2, [r7, #4]
 800e260:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d103      	bne.n	800e270 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	69ba      	ldr	r2, [r7, #24]
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e002      	b.n	800e276 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e282:	2101      	movs	r1, #1
 800e284:	69b8      	ldr	r0, [r7, #24]
 800e286:	f7ff ff05 	bl	800e094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	78fa      	ldrb	r2, [r7, #3]
 800e28e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e292:	bf00      	nop
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
	...

0800e29c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08e      	sub	sp, #56	; 0x38
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d10a      	bne.n	800e2ce <xQueueGenericSend+0x32>
	__asm volatile
 800e2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2bc:	f383 8811 	msr	BASEPRI, r3
 800e2c0:	f3bf 8f6f 	isb	sy
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e2ca:	bf00      	nop
 800e2cc:	e7fe      	b.n	800e2cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d103      	bne.n	800e2dc <xQueueGenericSend+0x40>
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d101      	bne.n	800e2e0 <xQueueGenericSend+0x44>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e000      	b.n	800e2e2 <xQueueGenericSend+0x46>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10a      	bne.n	800e2fc <xQueueGenericSend+0x60>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e2f8:	bf00      	nop
 800e2fa:	e7fe      	b.n	800e2fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d103      	bne.n	800e30a <xQueueGenericSend+0x6e>
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e306:	2b01      	cmp	r3, #1
 800e308:	d101      	bne.n	800e30e <xQueueGenericSend+0x72>
 800e30a:	2301      	movs	r3, #1
 800e30c:	e000      	b.n	800e310 <xQueueGenericSend+0x74>
 800e30e:	2300      	movs	r3, #0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d10a      	bne.n	800e32a <xQueueGenericSend+0x8e>
	__asm volatile
 800e314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	623b      	str	r3, [r7, #32]
}
 800e326:	bf00      	nop
 800e328:	e7fe      	b.n	800e328 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e32a:	f001 fa5b 	bl	800f7e4 <xTaskGetSchedulerState>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <xQueueGenericSend+0x9e>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <xQueueGenericSend+0xa2>
 800e33a:	2301      	movs	r3, #1
 800e33c:	e000      	b.n	800e340 <xQueueGenericSend+0xa4>
 800e33e:	2300      	movs	r3, #0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10a      	bne.n	800e35a <xQueueGenericSend+0xbe>
	__asm volatile
 800e344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e348:	f383 8811 	msr	BASEPRI, r3
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f3bf 8f4f 	dsb	sy
 800e354:	61fb      	str	r3, [r7, #28]
}
 800e356:	bf00      	nop
 800e358:	e7fe      	b.n	800e358 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e35a:	f001 ffd3 	bl	8010304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e366:	429a      	cmp	r2, r3
 800e368:	d302      	bcc.n	800e370 <xQueueGenericSend+0xd4>
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	d129      	bne.n	800e3c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e376:	f000 fa0b 	bl	800e790 <prvCopyDataToQueue>
 800e37a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2b00      	cmp	r3, #0
 800e382:	d010      	beq.n	800e3a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	3324      	adds	r3, #36	; 0x24
 800e388:	4618      	mov	r0, r3
 800e38a:	f001 f80b 	bl	800f3a4 <xTaskRemoveFromEventList>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d013      	beq.n	800e3bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e394:	4b3f      	ldr	r3, [pc, #252]	; (800e494 <xQueueGenericSend+0x1f8>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	e00a      	b.n	800e3bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d007      	beq.n	800e3bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3ac:	4b39      	ldr	r3, [pc, #228]	; (800e494 <xQueueGenericSend+0x1f8>)
 800e3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3bc:	f001 ffd2 	bl	8010364 <vPortExitCritical>
				return pdPASS;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e063      	b.n	800e48c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d103      	bne.n	800e3d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3ca:	f001 ffcb 	bl	8010364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	e05c      	b.n	800e48c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d106      	bne.n	800e3e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3d8:	f107 0314 	add.w	r3, r7, #20
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f001 f8a7 	bl	800f530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3e6:	f001 ffbd 	bl	8010364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3ea:	f000 fd7b 	bl	800eee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3ee:	f001 ff89 	bl	8010304 <vPortEnterCritical>
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3f8:	b25b      	sxtb	r3, r3
 800e3fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3fe:	d103      	bne.n	800e408 <xQueueGenericSend+0x16c>
 800e400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e402:	2200      	movs	r2, #0
 800e404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e40e:	b25b      	sxtb	r3, r3
 800e410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e414:	d103      	bne.n	800e41e <xQueueGenericSend+0x182>
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e41e:	f001 ffa1 	bl	8010364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e422:	1d3a      	adds	r2, r7, #4
 800e424:	f107 0314 	add.w	r3, r7, #20
 800e428:	4611      	mov	r1, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f001 f896 	bl	800f55c <xTaskCheckForTimeOut>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d124      	bne.n	800e480 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e438:	f000 faa2 	bl	800e980 <prvIsQueueFull>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d018      	beq.n	800e474 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e444:	3310      	adds	r3, #16
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4611      	mov	r1, r2
 800e44a:	4618      	mov	r0, r3
 800e44c:	f000 ff1e 	bl	800f28c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e452:	f000 fa2d 	bl	800e8b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e456:	f000 fd53 	bl	800ef00 <xTaskResumeAll>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f47f af7c 	bne.w	800e35a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e462:	4b0c      	ldr	r3, [pc, #48]	; (800e494 <xQueueGenericSend+0x1f8>)
 800e464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	e772      	b.n	800e35a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e476:	f000 fa1b 	bl	800e8b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e47a:	f000 fd41 	bl	800ef00 <xTaskResumeAll>
 800e47e:	e76c      	b.n	800e35a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e482:	f000 fa15 	bl	800e8b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e486:	f000 fd3b 	bl	800ef00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e48a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3738      	adds	r7, #56	; 0x38
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	e000ed04 	.word	0xe000ed04

0800e498 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b090      	sub	sp, #64	; 0x40
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10a      	bne.n	800e4c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d103      	bne.n	800e4d4 <xQueueGenericSendFromISR+0x3c>
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <xQueueGenericSendFromISR+0x40>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e000      	b.n	800e4da <xQueueGenericSendFromISR+0x42>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10a      	bne.n	800e4f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d103      	bne.n	800e502 <xQueueGenericSendFromISR+0x6a>
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d101      	bne.n	800e506 <xQueueGenericSendFromISR+0x6e>
 800e502:	2301      	movs	r3, #1
 800e504:	e000      	b.n	800e508 <xQueueGenericSendFromISR+0x70>
 800e506:	2300      	movs	r3, #0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10a      	bne.n	800e522 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	623b      	str	r3, [r7, #32]
}
 800e51e:	bf00      	nop
 800e520:	e7fe      	b.n	800e520 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e522:	f001 ffd1 	bl	80104c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e526:	f3ef 8211 	mrs	r2, BASEPRI
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	61fa      	str	r2, [r7, #28]
 800e53c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e53e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e540:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d302      	bcc.n	800e554 <xQueueGenericSendFromISR+0xbc>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	2b02      	cmp	r3, #2
 800e552:	d12f      	bne.n	800e5b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e562:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	68b9      	ldr	r1, [r7, #8]
 800e568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e56a:	f000 f911 	bl	800e790 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e56e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e576:	d112      	bne.n	800e59e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d016      	beq.n	800e5ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	3324      	adds	r3, #36	; 0x24
 800e584:	4618      	mov	r0, r3
 800e586:	f000 ff0d 	bl	800f3a4 <xTaskRemoveFromEventList>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00e      	beq.n	800e5ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00b      	beq.n	800e5ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	e007      	b.n	800e5ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e59e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	b25a      	sxtb	r2, r3
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5b2:	e001      	b.n	800e5b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3740      	adds	r7, #64	; 0x40
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08c      	sub	sp, #48	; 0x30
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10a      	bne.n	800e600 <xQueueReceive+0x30>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	623b      	str	r3, [r7, #32]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d103      	bne.n	800e60e <xQueueReceive+0x3e>
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d101      	bne.n	800e612 <xQueueReceive+0x42>
 800e60e:	2301      	movs	r3, #1
 800e610:	e000      	b.n	800e614 <xQueueReceive+0x44>
 800e612:	2300      	movs	r3, #0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xQueueReceive+0x5e>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	61fb      	str	r3, [r7, #28]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e62e:	f001 f8d9 	bl	800f7e4 <xTaskGetSchedulerState>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d102      	bne.n	800e63e <xQueueReceive+0x6e>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d101      	bne.n	800e642 <xQueueReceive+0x72>
 800e63e:	2301      	movs	r3, #1
 800e640:	e000      	b.n	800e644 <xQueueReceive+0x74>
 800e642:	2300      	movs	r3, #0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10a      	bne.n	800e65e <xQueueReceive+0x8e>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64c:	f383 8811 	msr	BASEPRI, r3
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	61bb      	str	r3, [r7, #24]
}
 800e65a:	bf00      	nop
 800e65c:	e7fe      	b.n	800e65c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e65e:	f001 fe51 	bl	8010304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e666:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d01f      	beq.n	800e6ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e66e:	68b9      	ldr	r1, [r7, #8]
 800e670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e672:	f000 f8f7 	bl	800e864 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	1e5a      	subs	r2, r3, #1
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e680:	691b      	ldr	r3, [r3, #16]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00f      	beq.n	800e6a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	3310      	adds	r3, #16
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 fe8a 	bl	800f3a4 <xTaskRemoveFromEventList>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d007      	beq.n	800e6a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e696:	4b3d      	ldr	r3, [pc, #244]	; (800e78c <xQueueReceive+0x1bc>)
 800e698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6a6:	f001 fe5d 	bl	8010364 <vPortExitCritical>
				return pdPASS;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e069      	b.n	800e782 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d103      	bne.n	800e6bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6b4:	f001 fe56 	bl	8010364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e062      	b.n	800e782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d106      	bne.n	800e6d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6c2:	f107 0310 	add.w	r3, r7, #16
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 ff32 	bl	800f530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6d0:	f001 fe48 	bl	8010364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6d4:	f000 fc06 	bl	800eee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6d8:	f001 fe14 	bl	8010304 <vPortEnterCritical>
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6e2:	b25b      	sxtb	r3, r3
 800e6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e8:	d103      	bne.n	800e6f2 <xQueueReceive+0x122>
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6f8:	b25b      	sxtb	r3, r3
 800e6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6fe:	d103      	bne.n	800e708 <xQueueReceive+0x138>
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	2200      	movs	r2, #0
 800e704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e708:	f001 fe2c 	bl	8010364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e70c:	1d3a      	adds	r2, r7, #4
 800e70e:	f107 0310 	add.w	r3, r7, #16
 800e712:	4611      	mov	r1, r2
 800e714:	4618      	mov	r0, r3
 800e716:	f000 ff21 	bl	800f55c <xTaskCheckForTimeOut>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d123      	bne.n	800e768 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e722:	f000 f917 	bl	800e954 <prvIsQueueEmpty>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d017      	beq.n	800e75c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	3324      	adds	r3, #36	; 0x24
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	4611      	mov	r1, r2
 800e734:	4618      	mov	r0, r3
 800e736:	f000 fda9 	bl	800f28c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e73c:	f000 f8b8 	bl	800e8b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e740:	f000 fbde 	bl	800ef00 <xTaskResumeAll>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d189      	bne.n	800e65e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e74a:	4b10      	ldr	r3, [pc, #64]	; (800e78c <xQueueReceive+0x1bc>)
 800e74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	e780      	b.n	800e65e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e75e:	f000 f8a7 	bl	800e8b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e762:	f000 fbcd 	bl	800ef00 <xTaskResumeAll>
 800e766:	e77a      	b.n	800e65e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e76a:	f000 f8a1 	bl	800e8b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e76e:	f000 fbc7 	bl	800ef00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e774:	f000 f8ee 	bl	800e954 <prvIsQueueEmpty>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f43f af6f 	beq.w	800e65e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e782:	4618      	mov	r0, r3
 800e784:	3730      	adds	r7, #48	; 0x30
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e79c:	2300      	movs	r3, #0
 800e79e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d10d      	bne.n	800e7ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d14d      	bne.n	800e852 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 f830 	bl	800f820 <xTaskPriorityDisinherit>
 800e7c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	609a      	str	r2, [r3, #8]
 800e7c8:	e043      	b.n	800e852 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d119      	bne.n	800e804 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6858      	ldr	r0, [r3, #4]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d8:	461a      	mov	r2, r3
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	f002 f8c8 	bl	8010970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e8:	441a      	add	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d32b      	bcc.n	800e852 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	605a      	str	r2, [r3, #4]
 800e802:	e026      	b.n	800e852 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	68d8      	ldr	r0, [r3, #12]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80c:	461a      	mov	r2, r3
 800e80e:	68b9      	ldr	r1, [r7, #8]
 800e810:	f002 f8ae 	bl	8010970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81c:	425b      	negs	r3, r3
 800e81e:	441a      	add	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	68da      	ldr	r2, [r3, #12]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d207      	bcs.n	800e840 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	689a      	ldr	r2, [r3, #8]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e838:	425b      	negs	r3, r3
 800e83a:	441a      	add	r2, r3
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b02      	cmp	r3, #2
 800e844:	d105      	bne.n	800e852 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3b01      	subs	r3, #1
 800e850:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e85a:	697b      	ldr	r3, [r7, #20]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3718      	adds	r7, #24
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e872:	2b00      	cmp	r3, #0
 800e874:	d018      	beq.n	800e8a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	68da      	ldr	r2, [r3, #12]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87e:	441a      	add	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d303      	bcc.n	800e898 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68d9      	ldr	r1, [r3, #12]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	6838      	ldr	r0, [r7, #0]
 800e8a4:	f002 f864 	bl	8010970 <memcpy>
	}
}
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e8b8:	f001 fd24 	bl	8010304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8c4:	e011      	b.n	800e8ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d012      	beq.n	800e8f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3324      	adds	r3, #36	; 0x24
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fd66 	bl	800f3a4 <xTaskRemoveFromEventList>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e8de:	f000 fe9f 	bl	800f620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	dce9      	bgt.n	800e8c6 <prvUnlockQueue+0x16>
 800e8f2:	e000      	b.n	800e8f6 <prvUnlockQueue+0x46>
					break;
 800e8f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	22ff      	movs	r2, #255	; 0xff
 800e8fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e8fe:	f001 fd31 	bl	8010364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e902:	f001 fcff 	bl	8010304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e90c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e90e:	e011      	b.n	800e934 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d012      	beq.n	800e93e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3310      	adds	r3, #16
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fd41 	bl	800f3a4 <xTaskRemoveFromEventList>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e928:	f000 fe7a 	bl	800f620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e92c:	7bbb      	ldrb	r3, [r7, #14]
 800e92e:	3b01      	subs	r3, #1
 800e930:	b2db      	uxtb	r3, r3
 800e932:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dce9      	bgt.n	800e910 <prvUnlockQueue+0x60>
 800e93c:	e000      	b.n	800e940 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e93e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	22ff      	movs	r2, #255	; 0xff
 800e944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e948:	f001 fd0c 	bl	8010364 <vPortExitCritical>
}
 800e94c:	bf00      	nop
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e95c:	f001 fcd2 	bl	8010304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e968:	2301      	movs	r3, #1
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	e001      	b.n	800e972 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e96e:	2300      	movs	r3, #0
 800e970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e972:	f001 fcf7 	bl	8010364 <vPortExitCritical>

	return xReturn;
 800e976:	68fb      	ldr	r3, [r7, #12]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e988:	f001 fcbc 	bl	8010304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e994:	429a      	cmp	r2, r3
 800e996:	d102      	bne.n	800e99e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e998:	2301      	movs	r3, #1
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	e001      	b.n	800e9a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9a2:	f001 fcdf 	bl	8010364 <vPortExitCritical>

	return xReturn;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60fb      	str	r3, [r7, #12]
 800e9be:	e014      	b.n	800e9ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e9c0:	4a0f      	ldr	r2, [pc, #60]	; (800ea00 <vQueueAddToRegistry+0x50>)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10b      	bne.n	800e9e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e9cc:	490c      	ldr	r1, [pc, #48]	; (800ea00 <vQueueAddToRegistry+0x50>)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e9d6:	4a0a      	ldr	r2, [pc, #40]	; (800ea00 <vQueueAddToRegistry+0x50>)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	4413      	add	r3, r2
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e9e2:	e006      	b.n	800e9f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60fb      	str	r3, [r7, #12]
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2b07      	cmp	r3, #7
 800e9ee:	d9e7      	bls.n	800e9c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e9f0:	bf00      	nop
 800e9f2:	bf00      	nop
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	24000b50 	.word	0x24000b50

0800ea04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ea14:	f001 fc76 	bl	8010304 <vPortEnterCritical>
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea1e:	b25b      	sxtb	r3, r3
 800ea20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea24:	d103      	bne.n	800ea2e <vQueueWaitForMessageRestricted+0x2a>
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea34:	b25b      	sxtb	r3, r3
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea3a:	d103      	bne.n	800ea44 <vQueueWaitForMessageRestricted+0x40>
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea44:	f001 fc8e 	bl	8010364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d106      	bne.n	800ea5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	3324      	adds	r3, #36	; 0x24
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	68b9      	ldr	r1, [r7, #8]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 fc77 	bl	800f34c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ea5e:	6978      	ldr	r0, [r7, #20]
 800ea60:	f7ff ff26 	bl	800e8b0 <prvUnlockQueue>
	}
 800ea64:	bf00      	nop
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b08e      	sub	sp, #56	; 0x38
 800ea70:	af04      	add	r7, sp, #16
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10a      	bne.n	800ea96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	623b      	str	r3, [r7, #32]
}
 800ea92:	bf00      	nop
 800ea94:	e7fe      	b.n	800ea94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10a      	bne.n	800eab2 <xTaskCreateStatic+0x46>
	__asm volatile
 800ea9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	61fb      	str	r3, [r7, #28]
}
 800eaae:	bf00      	nop
 800eab0:	e7fe      	b.n	800eab0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eab2:	235c      	movs	r3, #92	; 0x5c
 800eab4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	2b5c      	cmp	r3, #92	; 0x5c
 800eaba:	d00a      	beq.n	800ead2 <xTaskCreateStatic+0x66>
	__asm volatile
 800eabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	61bb      	str	r3, [r7, #24]
}
 800eace:	bf00      	nop
 800ead0:	e7fe      	b.n	800ead0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ead2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ead4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d01e      	beq.n	800eb18 <xTaskCreateStatic+0xac>
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d01b      	beq.n	800eb18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eae8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	2202      	movs	r2, #2
 800eaee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	9303      	str	r3, [sp, #12]
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	9302      	str	r3, [sp, #8]
 800eafa:	f107 0314 	add.w	r3, r7, #20
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	68b9      	ldr	r1, [r7, #8]
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f000 f850 	bl	800ebb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb12:	f000 f8dd 	bl	800ecd0 <prvAddNewTaskToReadyList>
 800eb16:	e001      	b.n	800eb1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb1c:	697b      	ldr	r3, [r7, #20]
	}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3728      	adds	r7, #40	; 0x28
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b08c      	sub	sp, #48	; 0x30
 800eb2a:	af04      	add	r7, sp, #16
 800eb2c:	60f8      	str	r0, [r7, #12]
 800eb2e:	60b9      	str	r1, [r7, #8]
 800eb30:	603b      	str	r3, [r7, #0]
 800eb32:	4613      	mov	r3, r2
 800eb34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb36:	88fb      	ldrh	r3, [r7, #6]
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f001 fd04 	bl	8010548 <pvPortMalloc>
 800eb40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d00e      	beq.n	800eb66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb48:	205c      	movs	r0, #92	; 0x5c
 800eb4a:	f001 fcfd 	bl	8010548 <pvPortMalloc>
 800eb4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	697a      	ldr	r2, [r7, #20]
 800eb5a:	631a      	str	r2, [r3, #48]	; 0x30
 800eb5c:	e005      	b.n	800eb6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb5e:	6978      	ldr	r0, [r7, #20]
 800eb60:	f001 fdbe 	bl	80106e0 <vPortFree>
 800eb64:	e001      	b.n	800eb6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d017      	beq.n	800eba0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb78:	88fa      	ldrh	r2, [r7, #6]
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	9303      	str	r3, [sp, #12]
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	9302      	str	r3, [sp, #8]
 800eb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb84:	9301      	str	r3, [sp, #4]
 800eb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	68b9      	ldr	r1, [r7, #8]
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f000 f80e 	bl	800ebb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb94:	69f8      	ldr	r0, [r7, #28]
 800eb96:	f000 f89b 	bl	800ecd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	61bb      	str	r3, [r7, #24]
 800eb9e:	e002      	b.n	800eba6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eba4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eba6:	69bb      	ldr	r3, [r7, #24]
	}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3720      	adds	r7, #32
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b088      	sub	sp, #32
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	21a5      	movs	r1, #165	; 0xa5
 800ebca:	f001 fedf 	bl	801098c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ebd8:	440b      	add	r3, r1
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	f023 0307 	bic.w	r3, r3, #7
 800ebe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	f003 0307 	and.w	r3, r3, #7
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00a      	beq.n	800ec08 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	617b      	str	r3, [r7, #20]
}
 800ec04:	bf00      	nop
 800ec06:	e7fe      	b.n	800ec06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d01f      	beq.n	800ec4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec0e:	2300      	movs	r3, #0
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	e012      	b.n	800ec3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	4413      	add	r3, r2
 800ec1a:	7819      	ldrb	r1, [r3, #0]
 800ec1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	4413      	add	r3, r2
 800ec22:	3334      	adds	r3, #52	; 0x34
 800ec24:	460a      	mov	r2, r1
 800ec26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	3301      	adds	r3, #1
 800ec38:	61fb      	str	r3, [r7, #28]
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	2b0f      	cmp	r3, #15
 800ec3e:	d9e9      	bls.n	800ec14 <prvInitialiseNewTask+0x64>
 800ec40:	e000      	b.n	800ec44 <prvInitialiseNewTask+0x94>
			{
				break;
 800ec42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec4c:	e003      	b.n	800ec56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec58:	2b37      	cmp	r3, #55	; 0x37
 800ec5a:	d901      	bls.n	800ec60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec5c:	2337      	movs	r3, #55	; 0x37
 800ec5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	2200      	movs	r2, #0
 800ec70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	3304      	adds	r3, #4
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff f978 	bl	800df6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7e:	3318      	adds	r3, #24
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff f973 	bl	800df6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9e:	2200      	movs	r2, #0
 800eca0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	68f9      	ldr	r1, [r7, #12]
 800ecae:	69b8      	ldr	r0, [r7, #24]
 800ecb0:	f001 f9fe 	bl	80100b0 <pxPortInitialiseStack>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecc6:	bf00      	nop
 800ecc8:	3720      	adds	r7, #32
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ecd8:	f001 fb14 	bl	8010304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ecdc:	4b2d      	ldr	r3, [pc, #180]	; (800ed94 <prvAddNewTaskToReadyList+0xc4>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	3301      	adds	r3, #1
 800ece2:	4a2c      	ldr	r2, [pc, #176]	; (800ed94 <prvAddNewTaskToReadyList+0xc4>)
 800ece4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ece6:	4b2c      	ldr	r3, [pc, #176]	; (800ed98 <prvAddNewTaskToReadyList+0xc8>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d109      	bne.n	800ed02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ecee:	4a2a      	ldr	r2, [pc, #168]	; (800ed98 <prvAddNewTaskToReadyList+0xc8>)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ecf4:	4b27      	ldr	r3, [pc, #156]	; (800ed94 <prvAddNewTaskToReadyList+0xc4>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d110      	bne.n	800ed1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecfc:	f000 fcb4 	bl	800f668 <prvInitialiseTaskLists>
 800ed00:	e00d      	b.n	800ed1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ed02:	4b26      	ldr	r3, [pc, #152]	; (800ed9c <prvAddNewTaskToReadyList+0xcc>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d109      	bne.n	800ed1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ed0a:	4b23      	ldr	r3, [pc, #140]	; (800ed98 <prvAddNewTaskToReadyList+0xc8>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d802      	bhi.n	800ed1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed18:	4a1f      	ldr	r2, [pc, #124]	; (800ed98 <prvAddNewTaskToReadyList+0xc8>)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed1e:	4b20      	ldr	r3, [pc, #128]	; (800eda0 <prvAddNewTaskToReadyList+0xd0>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3301      	adds	r3, #1
 800ed24:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <prvAddNewTaskToReadyList+0xd0>)
 800ed26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed28:	4b1d      	ldr	r3, [pc, #116]	; (800eda0 <prvAddNewTaskToReadyList+0xd0>)
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed34:	4b1b      	ldr	r3, [pc, #108]	; (800eda4 <prvAddNewTaskToReadyList+0xd4>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d903      	bls.n	800ed44 <prvAddNewTaskToReadyList+0x74>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed40:	4a18      	ldr	r2, [pc, #96]	; (800eda4 <prvAddNewTaskToReadyList+0xd4>)
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed48:	4613      	mov	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4a15      	ldr	r2, [pc, #84]	; (800eda8 <prvAddNewTaskToReadyList+0xd8>)
 800ed52:	441a      	add	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	3304      	adds	r3, #4
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7ff f913 	bl	800df86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed60:	f001 fb00 	bl	8010364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed64:	4b0d      	ldr	r3, [pc, #52]	; (800ed9c <prvAddNewTaskToReadyList+0xcc>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00e      	beq.n	800ed8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed6c:	4b0a      	ldr	r3, [pc, #40]	; (800ed98 <prvAddNewTaskToReadyList+0xc8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d207      	bcs.n	800ed8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	; (800edac <prvAddNewTaskToReadyList+0xdc>)
 800ed7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	24001064 	.word	0x24001064
 800ed98:	24000b90 	.word	0x24000b90
 800ed9c:	24001070 	.word	0x24001070
 800eda0:	24001080 	.word	0x24001080
 800eda4:	2400106c 	.word	0x2400106c
 800eda8:	24000b94 	.word	0x24000b94
 800edac:	e000ed04 	.word	0xe000ed04

0800edb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800edb8:	2300      	movs	r3, #0
 800edba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d017      	beq.n	800edf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800edc2:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <vTaskDelay+0x60>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00a      	beq.n	800ede0 <vTaskDelay+0x30>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	60bb      	str	r3, [r7, #8]
}
 800eddc:	bf00      	nop
 800edde:	e7fe      	b.n	800edde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ede0:	f000 f880 	bl	800eee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ede4:	2100      	movs	r1, #0
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fda0 	bl	800f92c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800edec:	f000 f888 	bl	800ef00 <xTaskResumeAll>
 800edf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d107      	bne.n	800ee08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800edf8:	4b06      	ldr	r3, [pc, #24]	; (800ee14 <vTaskDelay+0x64>)
 800edfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	2400108c 	.word	0x2400108c
 800ee14:	e000ed04 	.word	0xe000ed04

0800ee18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08a      	sub	sp, #40	; 0x28
 800ee1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee22:	2300      	movs	r3, #0
 800ee24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee26:	463a      	mov	r2, r7
 800ee28:	1d39      	adds	r1, r7, #4
 800ee2a:	f107 0308 	add.w	r3, r7, #8
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe fe5a 	bl	800dae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	9202      	str	r2, [sp, #8]
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	2300      	movs	r3, #0
 800ee44:	460a      	mov	r2, r1
 800ee46:	4921      	ldr	r1, [pc, #132]	; (800eecc <vTaskStartScheduler+0xb4>)
 800ee48:	4821      	ldr	r0, [pc, #132]	; (800eed0 <vTaskStartScheduler+0xb8>)
 800ee4a:	f7ff fe0f 	bl	800ea6c <xTaskCreateStatic>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	4a20      	ldr	r2, [pc, #128]	; (800eed4 <vTaskStartScheduler+0xbc>)
 800ee52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee54:	4b1f      	ldr	r3, [pc, #124]	; (800eed4 <vTaskStartScheduler+0xbc>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	617b      	str	r3, [r7, #20]
 800ee60:	e001      	b.n	800ee66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee62:	2300      	movs	r3, #0
 800ee64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d102      	bne.n	800ee72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ee6c:	f000 fdb2 	bl	800f9d4 <xTimerCreateTimerTask>
 800ee70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d116      	bne.n	800eea6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ee78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	613b      	str	r3, [r7, #16]
}
 800ee8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee8c:	4b12      	ldr	r3, [pc, #72]	; (800eed8 <vTaskStartScheduler+0xc0>)
 800ee8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee94:	4b11      	ldr	r3, [pc, #68]	; (800eedc <vTaskStartScheduler+0xc4>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee9a:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <vTaskStartScheduler+0xc8>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eea0:	f001 f98e 	bl	80101c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eea4:	e00e      	b.n	800eec4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeac:	d10a      	bne.n	800eec4 <vTaskStartScheduler+0xac>
	__asm volatile
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	60fb      	str	r3, [r7, #12]
}
 800eec0:	bf00      	nop
 800eec2:	e7fe      	b.n	800eec2 <vTaskStartScheduler+0xaa>
}
 800eec4:	bf00      	nop
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	08011574 	.word	0x08011574
 800eed0:	0800f639 	.word	0x0800f639
 800eed4:	24001088 	.word	0x24001088
 800eed8:	24001084 	.word	0x24001084
 800eedc:	24001070 	.word	0x24001070
 800eee0:	24001068 	.word	0x24001068

0800eee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eee8:	4b04      	ldr	r3, [pc, #16]	; (800eefc <vTaskSuspendAll+0x18>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	3301      	adds	r3, #1
 800eeee:	4a03      	ldr	r2, [pc, #12]	; (800eefc <vTaskSuspendAll+0x18>)
 800eef0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eef2:	bf00      	nop
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	2400108c 	.word	0x2400108c

0800ef00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef0e:	4b42      	ldr	r3, [pc, #264]	; (800f018 <xTaskResumeAll+0x118>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d10a      	bne.n	800ef2c <xTaskResumeAll+0x2c>
	__asm volatile
 800ef16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1a:	f383 8811 	msr	BASEPRI, r3
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	603b      	str	r3, [r7, #0]
}
 800ef28:	bf00      	nop
 800ef2a:	e7fe      	b.n	800ef2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef2c:	f001 f9ea 	bl	8010304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef30:	4b39      	ldr	r3, [pc, #228]	; (800f018 <xTaskResumeAll+0x118>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3b01      	subs	r3, #1
 800ef36:	4a38      	ldr	r2, [pc, #224]	; (800f018 <xTaskResumeAll+0x118>)
 800ef38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef3a:	4b37      	ldr	r3, [pc, #220]	; (800f018 <xTaskResumeAll+0x118>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d162      	bne.n	800f008 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef42:	4b36      	ldr	r3, [pc, #216]	; (800f01c <xTaskResumeAll+0x11c>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d05e      	beq.n	800f008 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef4a:	e02f      	b.n	800efac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef4c:	4b34      	ldr	r3, [pc, #208]	; (800f020 <xTaskResumeAll+0x120>)
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	3318      	adds	r3, #24
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7ff f871 	bl	800e040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	3304      	adds	r3, #4
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff f86c 	bl	800e040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6c:	4b2d      	ldr	r3, [pc, #180]	; (800f024 <xTaskResumeAll+0x124>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d903      	bls.n	800ef7c <xTaskResumeAll+0x7c>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef78:	4a2a      	ldr	r2, [pc, #168]	; (800f024 <xTaskResumeAll+0x124>)
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef80:	4613      	mov	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	4a27      	ldr	r2, [pc, #156]	; (800f028 <xTaskResumeAll+0x128>)
 800ef8a:	441a      	add	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	4619      	mov	r1, r3
 800ef92:	4610      	mov	r0, r2
 800ef94:	f7fe fff7 	bl	800df86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef9c:	4b23      	ldr	r3, [pc, #140]	; (800f02c <xTaskResumeAll+0x12c>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d302      	bcc.n	800efac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800efa6:	4b22      	ldr	r3, [pc, #136]	; (800f030 <xTaskResumeAll+0x130>)
 800efa8:	2201      	movs	r2, #1
 800efaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efac:	4b1c      	ldr	r3, [pc, #112]	; (800f020 <xTaskResumeAll+0x120>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1cb      	bne.n	800ef4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800efba:	f000 fbf3 	bl	800f7a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800efbe:	4b1d      	ldr	r3, [pc, #116]	; (800f034 <xTaskResumeAll+0x134>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d010      	beq.n	800efec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800efca:	f000 f847 	bl	800f05c <xTaskIncrementTick>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d002      	beq.n	800efda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800efd4:	4b16      	ldr	r3, [pc, #88]	; (800f030 <xTaskResumeAll+0x130>)
 800efd6:	2201      	movs	r2, #1
 800efd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3b01      	subs	r3, #1
 800efde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1f1      	bne.n	800efca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800efe6:	4b13      	ldr	r3, [pc, #76]	; (800f034 <xTaskResumeAll+0x134>)
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800efec:	4b10      	ldr	r3, [pc, #64]	; (800f030 <xTaskResumeAll+0x130>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d009      	beq.n	800f008 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eff4:	2301      	movs	r3, #1
 800eff6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eff8:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <xTaskResumeAll+0x138>)
 800effa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800effe:	601a      	str	r2, [r3, #0]
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f008:	f001 f9ac 	bl	8010364 <vPortExitCritical>

	return xAlreadyYielded;
 800f00c:	68bb      	ldr	r3, [r7, #8]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	2400108c 	.word	0x2400108c
 800f01c:	24001064 	.word	0x24001064
 800f020:	24001024 	.word	0x24001024
 800f024:	2400106c 	.word	0x2400106c
 800f028:	24000b94 	.word	0x24000b94
 800f02c:	24000b90 	.word	0x24000b90
 800f030:	24001078 	.word	0x24001078
 800f034:	24001074 	.word	0x24001074
 800f038:	e000ed04 	.word	0xe000ed04

0800f03c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f042:	4b05      	ldr	r3, [pc, #20]	; (800f058 <xTaskGetTickCount+0x1c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f048:	687b      	ldr	r3, [r7, #4]
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	24001068 	.word	0x24001068

0800f05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f062:	2300      	movs	r3, #0
 800f064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f066:	4b4f      	ldr	r3, [pc, #316]	; (800f1a4 <xTaskIncrementTick+0x148>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 808f 	bne.w	800f18e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f070:	4b4d      	ldr	r3, [pc, #308]	; (800f1a8 <xTaskIncrementTick+0x14c>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	3301      	adds	r3, #1
 800f076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f078:	4a4b      	ldr	r2, [pc, #300]	; (800f1a8 <xTaskIncrementTick+0x14c>)
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d120      	bne.n	800f0c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f084:	4b49      	ldr	r3, [pc, #292]	; (800f1ac <xTaskIncrementTick+0x150>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00a      	beq.n	800f0a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	603b      	str	r3, [r7, #0]
}
 800f0a0:	bf00      	nop
 800f0a2:	e7fe      	b.n	800f0a2 <xTaskIncrementTick+0x46>
 800f0a4:	4b41      	ldr	r3, [pc, #260]	; (800f1ac <xTaskIncrementTick+0x150>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	4b41      	ldr	r3, [pc, #260]	; (800f1b0 <xTaskIncrementTick+0x154>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a3f      	ldr	r2, [pc, #252]	; (800f1ac <xTaskIncrementTick+0x150>)
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	4a3f      	ldr	r2, [pc, #252]	; (800f1b0 <xTaskIncrementTick+0x154>)
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	6013      	str	r3, [r2, #0]
 800f0b8:	4b3e      	ldr	r3, [pc, #248]	; (800f1b4 <xTaskIncrementTick+0x158>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	4a3d      	ldr	r2, [pc, #244]	; (800f1b4 <xTaskIncrementTick+0x158>)
 800f0c0:	6013      	str	r3, [r2, #0]
 800f0c2:	f000 fb6f 	bl	800f7a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0c6:	4b3c      	ldr	r3, [pc, #240]	; (800f1b8 <xTaskIncrementTick+0x15c>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d349      	bcc.n	800f164 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0d0:	4b36      	ldr	r3, [pc, #216]	; (800f1ac <xTaskIncrementTick+0x150>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d104      	bne.n	800f0e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0da:	4b37      	ldr	r3, [pc, #220]	; (800f1b8 <xTaskIncrementTick+0x15c>)
 800f0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0e0:	601a      	str	r2, [r3, #0]
					break;
 800f0e2:	e03f      	b.n	800f164 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0e4:	4b31      	ldr	r3, [pc, #196]	; (800f1ac <xTaskIncrementTick+0x150>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d203      	bcs.n	800f104 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0fc:	4a2e      	ldr	r2, [pc, #184]	; (800f1b8 <xTaskIncrementTick+0x15c>)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f102:	e02f      	b.n	800f164 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	3304      	adds	r3, #4
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe ff99 	bl	800e040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f112:	2b00      	cmp	r3, #0
 800f114:	d004      	beq.n	800f120 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	3318      	adds	r3, #24
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fe ff90 	bl	800e040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f124:	4b25      	ldr	r3, [pc, #148]	; (800f1bc <xTaskIncrementTick+0x160>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d903      	bls.n	800f134 <xTaskIncrementTick+0xd8>
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f130:	4a22      	ldr	r2, [pc, #136]	; (800f1bc <xTaskIncrementTick+0x160>)
 800f132:	6013      	str	r3, [r2, #0]
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f138:	4613      	mov	r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	4413      	add	r3, r2
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	4a1f      	ldr	r2, [pc, #124]	; (800f1c0 <xTaskIncrementTick+0x164>)
 800f142:	441a      	add	r2, r3
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	3304      	adds	r3, #4
 800f148:	4619      	mov	r1, r3
 800f14a:	4610      	mov	r0, r2
 800f14c:	f7fe ff1b 	bl	800df86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f154:	4b1b      	ldr	r3, [pc, #108]	; (800f1c4 <xTaskIncrementTick+0x168>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d3b8      	bcc.n	800f0d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f15e:	2301      	movs	r3, #1
 800f160:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f162:	e7b5      	b.n	800f0d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f164:	4b17      	ldr	r3, [pc, #92]	; (800f1c4 <xTaskIncrementTick+0x168>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f16a:	4915      	ldr	r1, [pc, #84]	; (800f1c0 <xTaskIncrementTick+0x164>)
 800f16c:	4613      	mov	r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	4413      	add	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	440b      	add	r3, r1
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d901      	bls.n	800f180 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f17c:	2301      	movs	r3, #1
 800f17e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f180:	4b11      	ldr	r3, [pc, #68]	; (800f1c8 <xTaskIncrementTick+0x16c>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d007      	beq.n	800f198 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f188:	2301      	movs	r3, #1
 800f18a:	617b      	str	r3, [r7, #20]
 800f18c:	e004      	b.n	800f198 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f18e:	4b0f      	ldr	r3, [pc, #60]	; (800f1cc <xTaskIncrementTick+0x170>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3301      	adds	r3, #1
 800f194:	4a0d      	ldr	r2, [pc, #52]	; (800f1cc <xTaskIncrementTick+0x170>)
 800f196:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f198:	697b      	ldr	r3, [r7, #20]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	2400108c 	.word	0x2400108c
 800f1a8:	24001068 	.word	0x24001068
 800f1ac:	2400101c 	.word	0x2400101c
 800f1b0:	24001020 	.word	0x24001020
 800f1b4:	2400107c 	.word	0x2400107c
 800f1b8:	24001084 	.word	0x24001084
 800f1bc:	2400106c 	.word	0x2400106c
 800f1c0:	24000b94 	.word	0x24000b94
 800f1c4:	24000b90 	.word	0x24000b90
 800f1c8:	24001078 	.word	0x24001078
 800f1cc:	24001074 	.word	0x24001074

0800f1d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b085      	sub	sp, #20
 800f1d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f1d6:	4b28      	ldr	r3, [pc, #160]	; (800f278 <vTaskSwitchContext+0xa8>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f1de:	4b27      	ldr	r3, [pc, #156]	; (800f27c <vTaskSwitchContext+0xac>)
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f1e4:	e041      	b.n	800f26a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f1e6:	4b25      	ldr	r3, [pc, #148]	; (800f27c <vTaskSwitchContext+0xac>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ec:	4b24      	ldr	r3, [pc, #144]	; (800f280 <vTaskSwitchContext+0xb0>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	60fb      	str	r3, [r7, #12]
 800f1f2:	e010      	b.n	800f216 <vTaskSwitchContext+0x46>
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d10a      	bne.n	800f210 <vTaskSwitchContext+0x40>
	__asm volatile
 800f1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fe:	f383 8811 	msr	BASEPRI, r3
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	f3bf 8f4f 	dsb	sy
 800f20a:	607b      	str	r3, [r7, #4]
}
 800f20c:	bf00      	nop
 800f20e:	e7fe      	b.n	800f20e <vTaskSwitchContext+0x3e>
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3b01      	subs	r3, #1
 800f214:	60fb      	str	r3, [r7, #12]
 800f216:	491b      	ldr	r1, [pc, #108]	; (800f284 <vTaskSwitchContext+0xb4>)
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	4613      	mov	r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	4413      	add	r3, r2
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	440b      	add	r3, r1
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d0e4      	beq.n	800f1f4 <vTaskSwitchContext+0x24>
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	4613      	mov	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4a13      	ldr	r2, [pc, #76]	; (800f284 <vTaskSwitchContext+0xb4>)
 800f236:	4413      	add	r3, r2
 800f238:	60bb      	str	r3, [r7, #8]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	685a      	ldr	r2, [r3, #4]
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	605a      	str	r2, [r3, #4]
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	3308      	adds	r3, #8
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d104      	bne.n	800f25a <vTaskSwitchContext+0x8a>
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	685a      	ldr	r2, [r3, #4]
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	605a      	str	r2, [r3, #4]
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	4a09      	ldr	r2, [pc, #36]	; (800f288 <vTaskSwitchContext+0xb8>)
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	4a06      	ldr	r2, [pc, #24]	; (800f280 <vTaskSwitchContext+0xb0>)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6013      	str	r3, [r2, #0]
}
 800f26a:	bf00      	nop
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	2400108c 	.word	0x2400108c
 800f27c:	24001078 	.word	0x24001078
 800f280:	2400106c 	.word	0x2400106c
 800f284:	24000b94 	.word	0x24000b94
 800f288:	24000b90 	.word	0x24000b90

0800f28c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10a      	bne.n	800f2b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	60fb      	str	r3, [r7, #12]
}
 800f2ae:	bf00      	nop
 800f2b0:	e7fe      	b.n	800f2b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2b2:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <vTaskPlaceOnEventList+0x44>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3318      	adds	r3, #24
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7fe fe87 	bl	800dfce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2c0:	2101      	movs	r1, #1
 800f2c2:	6838      	ldr	r0, [r7, #0]
 800f2c4:	f000 fb32 	bl	800f92c <prvAddCurrentTaskToDelayedList>
}
 800f2c8:	bf00      	nop
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	24000b90 	.word	0x24000b90

0800f2d4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b086      	sub	sp, #24
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10a      	bne.n	800f2fc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800f2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ea:	f383 8811 	msr	BASEPRI, r3
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f3bf 8f4f 	dsb	sy
 800f2f6:	617b      	str	r3, [r7, #20]
}
 800f2f8:	bf00      	nop
 800f2fa:	e7fe      	b.n	800f2fa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f2fc:	4b11      	ldr	r3, [pc, #68]	; (800f344 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	613b      	str	r3, [r7, #16]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f324:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f326:	4b08      	ldr	r3, [pc, #32]	; (800f348 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	3318      	adds	r3, #24
 800f32c:	4619      	mov	r1, r3
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f7fe fe29 	bl	800df86 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f334:	2101      	movs	r1, #1
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 faf8 	bl	800f92c <prvAddCurrentTaskToDelayedList>
}
 800f33c:	bf00      	nop
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	2400108c 	.word	0x2400108c
 800f348:	24000b90 	.word	0x24000b90

0800f34c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10a      	bne.n	800f374 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	617b      	str	r3, [r7, #20]
}
 800f370:	bf00      	nop
 800f372:	e7fe      	b.n	800f372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f374:	4b0a      	ldr	r3, [pc, #40]	; (800f3a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3318      	adds	r3, #24
 800f37a:	4619      	mov	r1, r3
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f7fe fe02 	bl	800df86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f38c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f38e:	6879      	ldr	r1, [r7, #4]
 800f390:	68b8      	ldr	r0, [r7, #8]
 800f392:	f000 facb 	bl	800f92c <prvAddCurrentTaskToDelayedList>
	}
 800f396:	bf00      	nop
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	24000b90 	.word	0x24000b90

0800f3a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10a      	bne.n	800f3d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	60fb      	str	r3, [r7, #12]
}
 800f3cc:	bf00      	nop
 800f3ce:	e7fe      	b.n	800f3ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	3318      	adds	r3, #24
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fe fe33 	bl	800e040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3da:	4b1e      	ldr	r3, [pc, #120]	; (800f454 <xTaskRemoveFromEventList+0xb0>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d11d      	bne.n	800f41e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fe fe2a 	bl	800e040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f0:	4b19      	ldr	r3, [pc, #100]	; (800f458 <xTaskRemoveFromEventList+0xb4>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d903      	bls.n	800f400 <xTaskRemoveFromEventList+0x5c>
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3fc:	4a16      	ldr	r2, [pc, #88]	; (800f458 <xTaskRemoveFromEventList+0xb4>)
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f404:	4613      	mov	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4413      	add	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4a13      	ldr	r2, [pc, #76]	; (800f45c <xTaskRemoveFromEventList+0xb8>)
 800f40e:	441a      	add	r2, r3
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	3304      	adds	r3, #4
 800f414:	4619      	mov	r1, r3
 800f416:	4610      	mov	r0, r2
 800f418:	f7fe fdb5 	bl	800df86 <vListInsertEnd>
 800f41c:	e005      	b.n	800f42a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	3318      	adds	r3, #24
 800f422:	4619      	mov	r1, r3
 800f424:	480e      	ldr	r0, [pc, #56]	; (800f460 <xTaskRemoveFromEventList+0xbc>)
 800f426:	f7fe fdae 	bl	800df86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f42e:	4b0d      	ldr	r3, [pc, #52]	; (800f464 <xTaskRemoveFromEventList+0xc0>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f434:	429a      	cmp	r2, r3
 800f436:	d905      	bls.n	800f444 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f438:	2301      	movs	r3, #1
 800f43a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <xTaskRemoveFromEventList+0xc4>)
 800f43e:	2201      	movs	r2, #1
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	e001      	b.n	800f448 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f444:	2300      	movs	r3, #0
 800f446:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f448:	697b      	ldr	r3, [r7, #20]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3718      	adds	r7, #24
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	2400108c 	.word	0x2400108c
 800f458:	2400106c 	.word	0x2400106c
 800f45c:	24000b94 	.word	0x24000b94
 800f460:	24001024 	.word	0x24001024
 800f464:	24000b90 	.word	0x24000b90
 800f468:	24001078 	.word	0x24001078

0800f46c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f476:	4b29      	ldr	r3, [pc, #164]	; (800f51c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10a      	bne.n	800f494 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	613b      	str	r3, [r7, #16]
}
 800f490:	bf00      	nop
 800f492:	e7fe      	b.n	800f492 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10a      	bne.n	800f4c0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	60fb      	str	r3, [r7, #12]
}
 800f4bc:	bf00      	nop
 800f4be:	e7fe      	b.n	800f4be <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7fe fdbd 	bl	800e040 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fe fdb8 	bl	800e040 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d4:	4b12      	ldr	r3, [pc, #72]	; (800f520 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d903      	bls.n	800f4e4 <vTaskRemoveFromUnorderedEventList+0x78>
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e0:	4a0f      	ldr	r2, [pc, #60]	; (800f520 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f4e2:	6013      	str	r3, [r2, #0]
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4413      	add	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4a0c      	ldr	r2, [pc, #48]	; (800f524 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f4f2:	441a      	add	r2, r3
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	f7fe fd43 	bl	800df86 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f504:	4b08      	ldr	r3, [pc, #32]	; (800f528 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d902      	bls.n	800f514 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f50e:	4b07      	ldr	r3, [pc, #28]	; (800f52c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f510:	2201      	movs	r2, #1
 800f512:	601a      	str	r2, [r3, #0]
	}
}
 800f514:	bf00      	nop
 800f516:	3718      	adds	r7, #24
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	2400108c 	.word	0x2400108c
 800f520:	2400106c 	.word	0x2400106c
 800f524:	24000b94 	.word	0x24000b94
 800f528:	24000b90 	.word	0x24000b90
 800f52c:	24001078 	.word	0x24001078

0800f530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f538:	4b06      	ldr	r3, [pc, #24]	; (800f554 <vTaskInternalSetTimeOutState+0x24>)
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f540:	4b05      	ldr	r3, [pc, #20]	; (800f558 <vTaskInternalSetTimeOutState+0x28>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	605a      	str	r2, [r3, #4]
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr
 800f554:	2400107c 	.word	0x2400107c
 800f558:	24001068 	.word	0x24001068

0800f55c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b088      	sub	sp, #32
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10a      	bne.n	800f582 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	613b      	str	r3, [r7, #16]
}
 800f57e:	bf00      	nop
 800f580:	e7fe      	b.n	800f580 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10a      	bne.n	800f59e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	60fb      	str	r3, [r7, #12]
}
 800f59a:	bf00      	nop
 800f59c:	e7fe      	b.n	800f59c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f59e:	f000 feb1 	bl	8010304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f5a2:	4b1d      	ldr	r3, [pc, #116]	; (800f618 <xTaskCheckForTimeOut+0xbc>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	69ba      	ldr	r2, [r7, #24]
 800f5ae:	1ad3      	subs	r3, r2, r3
 800f5b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5ba:	d102      	bne.n	800f5c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	61fb      	str	r3, [r7, #28]
 800f5c0:	e023      	b.n	800f60a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	4b15      	ldr	r3, [pc, #84]	; (800f61c <xTaskCheckForTimeOut+0xc0>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d007      	beq.n	800f5de <xTaskCheckForTimeOut+0x82>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	69ba      	ldr	r2, [r7, #24]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d302      	bcc.n	800f5de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	61fb      	str	r3, [r7, #28]
 800f5dc:	e015      	b.n	800f60a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	697a      	ldr	r2, [r7, #20]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d20b      	bcs.n	800f600 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	1ad2      	subs	r2, r2, r3
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff ff9b 	bl	800f530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	61fb      	str	r3, [r7, #28]
 800f5fe:	e004      	b.n	800f60a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f606:	2301      	movs	r3, #1
 800f608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f60a:	f000 feab 	bl	8010364 <vPortExitCritical>

	return xReturn;
 800f60e:	69fb      	ldr	r3, [r7, #28]
}
 800f610:	4618      	mov	r0, r3
 800f612:	3720      	adds	r7, #32
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	24001068 	.word	0x24001068
 800f61c:	2400107c 	.word	0x2400107c

0800f620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f620:	b480      	push	{r7}
 800f622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f624:	4b03      	ldr	r3, [pc, #12]	; (800f634 <vTaskMissedYield+0x14>)
 800f626:	2201      	movs	r2, #1
 800f628:	601a      	str	r2, [r3, #0]
}
 800f62a:	bf00      	nop
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	24001078 	.word	0x24001078

0800f638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f640:	f000 f852 	bl	800f6e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f644:	4b06      	ldr	r3, [pc, #24]	; (800f660 <prvIdleTask+0x28>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b01      	cmp	r3, #1
 800f64a:	d9f9      	bls.n	800f640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f64c:	4b05      	ldr	r3, [pc, #20]	; (800f664 <prvIdleTask+0x2c>)
 800f64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f65c:	e7f0      	b.n	800f640 <prvIdleTask+0x8>
 800f65e:	bf00      	nop
 800f660:	24000b94 	.word	0x24000b94
 800f664:	e000ed04 	.word	0xe000ed04

0800f668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f66e:	2300      	movs	r3, #0
 800f670:	607b      	str	r3, [r7, #4]
 800f672:	e00c      	b.n	800f68e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	4613      	mov	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	4a12      	ldr	r2, [pc, #72]	; (800f6c8 <prvInitialiseTaskLists+0x60>)
 800f680:	4413      	add	r3, r2
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe fc52 	bl	800df2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	3301      	adds	r3, #1
 800f68c:	607b      	str	r3, [r7, #4]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b37      	cmp	r3, #55	; 0x37
 800f692:	d9ef      	bls.n	800f674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f694:	480d      	ldr	r0, [pc, #52]	; (800f6cc <prvInitialiseTaskLists+0x64>)
 800f696:	f7fe fc49 	bl	800df2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f69a:	480d      	ldr	r0, [pc, #52]	; (800f6d0 <prvInitialiseTaskLists+0x68>)
 800f69c:	f7fe fc46 	bl	800df2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6a0:	480c      	ldr	r0, [pc, #48]	; (800f6d4 <prvInitialiseTaskLists+0x6c>)
 800f6a2:	f7fe fc43 	bl	800df2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6a6:	480c      	ldr	r0, [pc, #48]	; (800f6d8 <prvInitialiseTaskLists+0x70>)
 800f6a8:	f7fe fc40 	bl	800df2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6ac:	480b      	ldr	r0, [pc, #44]	; (800f6dc <prvInitialiseTaskLists+0x74>)
 800f6ae:	f7fe fc3d 	bl	800df2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6b2:	4b0b      	ldr	r3, [pc, #44]	; (800f6e0 <prvInitialiseTaskLists+0x78>)
 800f6b4:	4a05      	ldr	r2, [pc, #20]	; (800f6cc <prvInitialiseTaskLists+0x64>)
 800f6b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	; (800f6e4 <prvInitialiseTaskLists+0x7c>)
 800f6ba:	4a05      	ldr	r2, [pc, #20]	; (800f6d0 <prvInitialiseTaskLists+0x68>)
 800f6bc:	601a      	str	r2, [r3, #0]
}
 800f6be:	bf00      	nop
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	24000b94 	.word	0x24000b94
 800f6cc:	24000ff4 	.word	0x24000ff4
 800f6d0:	24001008 	.word	0x24001008
 800f6d4:	24001024 	.word	0x24001024
 800f6d8:	24001038 	.word	0x24001038
 800f6dc:	24001050 	.word	0x24001050
 800f6e0:	2400101c 	.word	0x2400101c
 800f6e4:	24001020 	.word	0x24001020

0800f6e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6ee:	e019      	b.n	800f724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6f0:	f000 fe08 	bl	8010304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6f4:	4b10      	ldr	r3, [pc, #64]	; (800f738 <prvCheckTasksWaitingTermination+0x50>)
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	3304      	adds	r3, #4
 800f700:	4618      	mov	r0, r3
 800f702:	f7fe fc9d 	bl	800e040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f706:	4b0d      	ldr	r3, [pc, #52]	; (800f73c <prvCheckTasksWaitingTermination+0x54>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	3b01      	subs	r3, #1
 800f70c:	4a0b      	ldr	r2, [pc, #44]	; (800f73c <prvCheckTasksWaitingTermination+0x54>)
 800f70e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f710:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <prvCheckTasksWaitingTermination+0x58>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3b01      	subs	r3, #1
 800f716:	4a0a      	ldr	r2, [pc, #40]	; (800f740 <prvCheckTasksWaitingTermination+0x58>)
 800f718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f71a:	f000 fe23 	bl	8010364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 f810 	bl	800f744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f724:	4b06      	ldr	r3, [pc, #24]	; (800f740 <prvCheckTasksWaitingTermination+0x58>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e1      	bne.n	800f6f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f72c:	bf00      	nop
 800f72e:	bf00      	nop
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	24001038 	.word	0x24001038
 800f73c:	24001064 	.word	0x24001064
 800f740:	2400104c 	.word	0x2400104c

0800f744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f752:	2b00      	cmp	r3, #0
 800f754:	d108      	bne.n	800f768 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 ffc0 	bl	80106e0 <vPortFree>
				vPortFree( pxTCB );
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 ffbd 	bl	80106e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f766:	e018      	b.n	800f79a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d103      	bne.n	800f77a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 ffb4 	bl	80106e0 <vPortFree>
	}
 800f778:	e00f      	b.n	800f79a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f780:	2b02      	cmp	r3, #2
 800f782:	d00a      	beq.n	800f79a <prvDeleteTCB+0x56>
	__asm volatile
 800f784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	60fb      	str	r3, [r7, #12]
}
 800f796:	bf00      	nop
 800f798:	e7fe      	b.n	800f798 <prvDeleteTCB+0x54>
	}
 800f79a:	bf00      	nop
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7aa:	4b0c      	ldr	r3, [pc, #48]	; (800f7dc <prvResetNextTaskUnblockTime+0x38>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d104      	bne.n	800f7be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7b4:	4b0a      	ldr	r3, [pc, #40]	; (800f7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7bc:	e008      	b.n	800f7d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7be:	4b07      	ldr	r3, [pc, #28]	; (800f7dc <prvResetNextTaskUnblockTime+0x38>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	4a04      	ldr	r2, [pc, #16]	; (800f7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f7ce:	6013      	str	r3, [r2, #0]
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	2400101c 	.word	0x2400101c
 800f7e0:	24001084 	.word	0x24001084

0800f7e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	; (800f818 <xTaskGetSchedulerState+0x34>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d102      	bne.n	800f7f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	607b      	str	r3, [r7, #4]
 800f7f6:	e008      	b.n	800f80a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <xTaskGetSchedulerState+0x38>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d102      	bne.n	800f806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f800:	2302      	movs	r3, #2
 800f802:	607b      	str	r3, [r7, #4]
 800f804:	e001      	b.n	800f80a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f806:	2300      	movs	r3, #0
 800f808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f80a:	687b      	ldr	r3, [r7, #4]
	}
 800f80c:	4618      	mov	r0, r3
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	24001070 	.word	0x24001070
 800f81c:	2400108c 	.word	0x2400108c

0800f820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f82c:	2300      	movs	r3, #0
 800f82e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d056      	beq.n	800f8e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f836:	4b2e      	ldr	r3, [pc, #184]	; (800f8f0 <xTaskPriorityDisinherit+0xd0>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d00a      	beq.n	800f856 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	60fb      	str	r3, [r7, #12]
}
 800f852:	bf00      	nop
 800f854:	e7fe      	b.n	800f854 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10a      	bne.n	800f874 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	60bb      	str	r3, [r7, #8]
}
 800f870:	bf00      	nop
 800f872:	e7fe      	b.n	800f872 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f878:	1e5a      	subs	r2, r3, #1
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f886:	429a      	cmp	r2, r3
 800f888:	d02c      	beq.n	800f8e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d128      	bne.n	800f8e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	3304      	adds	r3, #4
 800f896:	4618      	mov	r0, r3
 800f898:	f7fe fbd2 	bl	800e040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b4:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <xTaskPriorityDisinherit+0xd4>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d903      	bls.n	800f8c4 <xTaskPriorityDisinherit+0xa4>
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c0:	4a0c      	ldr	r2, [pc, #48]	; (800f8f4 <xTaskPriorityDisinherit+0xd4>)
 800f8c2:	6013      	str	r3, [r2, #0]
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	4413      	add	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4a09      	ldr	r2, [pc, #36]	; (800f8f8 <xTaskPriorityDisinherit+0xd8>)
 800f8d2:	441a      	add	r2, r3
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f7fe fb53 	bl	800df86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8e4:	697b      	ldr	r3, [r7, #20]
	}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3718      	adds	r7, #24
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	24000b90 	.word	0x24000b90
 800f8f4:	2400106c 	.word	0x2400106c
 800f8f8:	24000b94 	.word	0x24000b94

0800f8fc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f902:	4b09      	ldr	r3, [pc, #36]	; (800f928 <uxTaskResetEventItemValue+0x2c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f90a:	4b07      	ldr	r3, [pc, #28]	; (800f928 <uxTaskResetEventItemValue+0x2c>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f910:	4b05      	ldr	r3, [pc, #20]	; (800f928 <uxTaskResetEventItemValue+0x2c>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f918:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f91a:	687b      	ldr	r3, [r7, #4]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	24000b90 	.word	0x24000b90

0800f92c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f936:	4b21      	ldr	r3, [pc, #132]	; (800f9bc <prvAddCurrentTaskToDelayedList+0x90>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f93c:	4b20      	ldr	r3, [pc, #128]	; (800f9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3304      	adds	r3, #4
 800f942:	4618      	mov	r0, r3
 800f944:	f7fe fb7c 	bl	800e040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f94e:	d10a      	bne.n	800f966 <prvAddCurrentTaskToDelayedList+0x3a>
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d007      	beq.n	800f966 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f956:	4b1a      	ldr	r3, [pc, #104]	; (800f9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3304      	adds	r3, #4
 800f95c:	4619      	mov	r1, r3
 800f95e:	4819      	ldr	r0, [pc, #100]	; (800f9c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f960:	f7fe fb11 	bl	800df86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f964:	e026      	b.n	800f9b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4413      	add	r3, r2
 800f96c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f96e:	4b14      	ldr	r3, [pc, #80]	; (800f9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f976:	68ba      	ldr	r2, [r7, #8]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d209      	bcs.n	800f992 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f97e:	4b12      	ldr	r3, [pc, #72]	; (800f9c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	4b0f      	ldr	r3, [pc, #60]	; (800f9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3304      	adds	r3, #4
 800f988:	4619      	mov	r1, r3
 800f98a:	4610      	mov	r0, r2
 800f98c:	f7fe fb1f 	bl	800dfce <vListInsert>
}
 800f990:	e010      	b.n	800f9b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f992:	4b0e      	ldr	r3, [pc, #56]	; (800f9cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	3304      	adds	r3, #4
 800f99c:	4619      	mov	r1, r3
 800f99e:	4610      	mov	r0, r2
 800f9a0:	f7fe fb15 	bl	800dfce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f9a4:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d202      	bcs.n	800f9b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f9ae:	4a08      	ldr	r2, [pc, #32]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	6013      	str	r3, [r2, #0]
}
 800f9b4:	bf00      	nop
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	24001068 	.word	0x24001068
 800f9c0:	24000b90 	.word	0x24000b90
 800f9c4:	24001050 	.word	0x24001050
 800f9c8:	24001020 	.word	0x24001020
 800f9cc:	2400101c 	.word	0x2400101c
 800f9d0:	24001084 	.word	0x24001084

0800f9d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b08a      	sub	sp, #40	; 0x28
 800f9d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f9de:	f000 fb07 	bl	800fff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f9e2:	4b1c      	ldr	r3, [pc, #112]	; (800fa54 <xTimerCreateTimerTask+0x80>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d021      	beq.n	800fa2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f9f2:	1d3a      	adds	r2, r7, #4
 800f9f4:	f107 0108 	add.w	r1, r7, #8
 800f9f8:	f107 030c 	add.w	r3, r7, #12
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe f88d 	bl	800db1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa02:	6879      	ldr	r1, [r7, #4]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	9202      	str	r2, [sp, #8]
 800fa0a:	9301      	str	r3, [sp, #4]
 800fa0c:	2302      	movs	r3, #2
 800fa0e:	9300      	str	r3, [sp, #0]
 800fa10:	2300      	movs	r3, #0
 800fa12:	460a      	mov	r2, r1
 800fa14:	4910      	ldr	r1, [pc, #64]	; (800fa58 <xTimerCreateTimerTask+0x84>)
 800fa16:	4811      	ldr	r0, [pc, #68]	; (800fa5c <xTimerCreateTimerTask+0x88>)
 800fa18:	f7ff f828 	bl	800ea6c <xTaskCreateStatic>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	4a10      	ldr	r2, [pc, #64]	; (800fa60 <xTimerCreateTimerTask+0x8c>)
 800fa20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa22:	4b0f      	ldr	r3, [pc, #60]	; (800fa60 <xTimerCreateTimerTask+0x8c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d10a      	bne.n	800fa4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa38:	f383 8811 	msr	BASEPRI, r3
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	613b      	str	r3, [r7, #16]
}
 800fa46:	bf00      	nop
 800fa48:	e7fe      	b.n	800fa48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fa4a:	697b      	ldr	r3, [r7, #20]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	240010c0 	.word	0x240010c0
 800fa58:	0801157c 	.word	0x0801157c
 800fa5c:	0800fb99 	.word	0x0800fb99
 800fa60:	240010c4 	.word	0x240010c4

0800fa64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08a      	sub	sp, #40	; 0x28
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
 800fa70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fa72:	2300      	movs	r3, #0
 800fa74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10a      	bne.n	800fa92 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa80:	f383 8811 	msr	BASEPRI, r3
 800fa84:	f3bf 8f6f 	isb	sy
 800fa88:	f3bf 8f4f 	dsb	sy
 800fa8c:	623b      	str	r3, [r7, #32]
}
 800fa8e:	bf00      	nop
 800fa90:	e7fe      	b.n	800fa90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa92:	4b1a      	ldr	r3, [pc, #104]	; (800fafc <xTimerGenericCommand+0x98>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d02a      	beq.n	800faf0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	2b05      	cmp	r3, #5
 800faaa:	dc18      	bgt.n	800fade <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800faac:	f7ff fe9a 	bl	800f7e4 <xTaskGetSchedulerState>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b02      	cmp	r3, #2
 800fab4:	d109      	bne.n	800faca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fab6:	4b11      	ldr	r3, [pc, #68]	; (800fafc <xTimerGenericCommand+0x98>)
 800fab8:	6818      	ldr	r0, [r3, #0]
 800faba:	f107 0110 	add.w	r1, r7, #16
 800fabe:	2300      	movs	r3, #0
 800fac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fac2:	f7fe fbeb 	bl	800e29c <xQueueGenericSend>
 800fac6:	6278      	str	r0, [r7, #36]	; 0x24
 800fac8:	e012      	b.n	800faf0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800faca:	4b0c      	ldr	r3, [pc, #48]	; (800fafc <xTimerGenericCommand+0x98>)
 800facc:	6818      	ldr	r0, [r3, #0]
 800face:	f107 0110 	add.w	r1, r7, #16
 800fad2:	2300      	movs	r3, #0
 800fad4:	2200      	movs	r2, #0
 800fad6:	f7fe fbe1 	bl	800e29c <xQueueGenericSend>
 800fada:	6278      	str	r0, [r7, #36]	; 0x24
 800fadc:	e008      	b.n	800faf0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fade:	4b07      	ldr	r3, [pc, #28]	; (800fafc <xTimerGenericCommand+0x98>)
 800fae0:	6818      	ldr	r0, [r3, #0]
 800fae2:	f107 0110 	add.w	r1, r7, #16
 800fae6:	2300      	movs	r3, #0
 800fae8:	683a      	ldr	r2, [r7, #0]
 800faea:	f7fe fcd5 	bl	800e498 <xQueueGenericSendFromISR>
 800faee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3728      	adds	r7, #40	; 0x28
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	240010c0 	.word	0x240010c0

0800fb00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b088      	sub	sp, #32
 800fb04:	af02      	add	r7, sp, #8
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0a:	4b22      	ldr	r3, [pc, #136]	; (800fb94 <prvProcessExpiredTimer+0x94>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	3304      	adds	r3, #4
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fe fa91 	bl	800e040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb24:	f003 0304 	and.w	r3, r3, #4
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d022      	beq.n	800fb72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	699a      	ldr	r2, [r3, #24]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	18d1      	adds	r1, r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	6978      	ldr	r0, [r7, #20]
 800fb3a:	f000 f8d1 	bl	800fce0 <prvInsertTimerInActiveList>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01f      	beq.n	800fb84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb44:	2300      	movs	r3, #0
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	2300      	movs	r3, #0
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	6978      	ldr	r0, [r7, #20]
 800fb50:	f7ff ff88 	bl	800fa64 <xTimerGenericCommand>
 800fb54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d113      	bne.n	800fb84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	60fb      	str	r3, [r7, #12]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb78:	f023 0301 	bic.w	r3, r3, #1
 800fb7c:	b2da      	uxtb	r2, r3
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	6a1b      	ldr	r3, [r3, #32]
 800fb88:	6978      	ldr	r0, [r7, #20]
 800fb8a:	4798      	blx	r3
}
 800fb8c:	bf00      	nop
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	240010b8 	.word	0x240010b8

0800fb98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fba0:	f107 0308 	add.w	r3, r7, #8
 800fba4:	4618      	mov	r0, r3
 800fba6:	f000 f857 	bl	800fc58 <prvGetNextExpireTime>
 800fbaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	4619      	mov	r1, r3
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f000 f803 	bl	800fbbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fbb6:	f000 f8d5 	bl	800fd64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbba:	e7f1      	b.n	800fba0 <prvTimerTask+0x8>

0800fbbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fbc6:	f7ff f98d 	bl	800eee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbca:	f107 0308 	add.w	r3, r7, #8
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f000 f866 	bl	800fca0 <prvSampleTimeNow>
 800fbd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d130      	bne.n	800fc3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d10a      	bne.n	800fbf8 <prvProcessTimerOrBlockTask+0x3c>
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d806      	bhi.n	800fbf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fbea:	f7ff f989 	bl	800ef00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fbee:	68f9      	ldr	r1, [r7, #12]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff ff85 	bl	800fb00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fbf6:	e024      	b.n	800fc42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d008      	beq.n	800fc10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fbfe:	4b13      	ldr	r3, [pc, #76]	; (800fc4c <prvProcessTimerOrBlockTask+0x90>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <prvProcessTimerOrBlockTask+0x50>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e000      	b.n	800fc0e <prvProcessTimerOrBlockTask+0x52>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc10:	4b0f      	ldr	r3, [pc, #60]	; (800fc50 <prvProcessTimerOrBlockTask+0x94>)
 800fc12:	6818      	ldr	r0, [r3, #0]
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	f7fe fef1 	bl	800ea04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc22:	f7ff f96d 	bl	800ef00 <xTaskResumeAll>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10a      	bne.n	800fc42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc2c:	4b09      	ldr	r3, [pc, #36]	; (800fc54 <prvProcessTimerOrBlockTask+0x98>)
 800fc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	f3bf 8f6f 	isb	sy
}
 800fc3c:	e001      	b.n	800fc42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc3e:	f7ff f95f 	bl	800ef00 <xTaskResumeAll>
}
 800fc42:	bf00      	nop
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	240010bc 	.word	0x240010bc
 800fc50:	240010c0 	.word	0x240010c0
 800fc54:	e000ed04 	.word	0xe000ed04

0800fc58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc60:	4b0e      	ldr	r3, [pc, #56]	; (800fc9c <prvGetNextExpireTime+0x44>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <prvGetNextExpireTime+0x16>
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	e000      	b.n	800fc70 <prvGetNextExpireTime+0x18>
 800fc6e:	2200      	movs	r2, #0
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d105      	bne.n	800fc88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc7c:	4b07      	ldr	r3, [pc, #28]	; (800fc9c <prvGetNextExpireTime+0x44>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	60fb      	str	r3, [r7, #12]
 800fc86:	e001      	b.n	800fc8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3714      	adds	r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	240010b8 	.word	0x240010b8

0800fca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fca8:	f7ff f9c8 	bl	800f03c <xTaskGetTickCount>
 800fcac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fcae:	4b0b      	ldr	r3, [pc, #44]	; (800fcdc <prvSampleTimeNow+0x3c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d205      	bcs.n	800fcc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fcb8:	f000 f936 	bl	800ff28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	601a      	str	r2, [r3, #0]
 800fcc2:	e002      	b.n	800fcca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fcca:	4a04      	ldr	r2, [pc, #16]	; (800fcdc <prvSampleTimeNow+0x3c>)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	240010c8 	.word	0x240010c8

0800fce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
 800fcec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fcfe:	68ba      	ldr	r2, [r7, #8]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d812      	bhi.n	800fd2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	1ad2      	subs	r2, r2, r3
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d302      	bcc.n	800fd1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd14:	2301      	movs	r3, #1
 800fd16:	617b      	str	r3, [r7, #20]
 800fd18:	e01b      	b.n	800fd52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd1a:	4b10      	ldr	r3, [pc, #64]	; (800fd5c <prvInsertTimerInActiveList+0x7c>)
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	3304      	adds	r3, #4
 800fd22:	4619      	mov	r1, r3
 800fd24:	4610      	mov	r0, r2
 800fd26:	f7fe f952 	bl	800dfce <vListInsert>
 800fd2a:	e012      	b.n	800fd52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d206      	bcs.n	800fd42 <prvInsertTimerInActiveList+0x62>
 800fd34:	68ba      	ldr	r2, [r7, #8]
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d302      	bcc.n	800fd42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	617b      	str	r3, [r7, #20]
 800fd40:	e007      	b.n	800fd52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd42:	4b07      	ldr	r3, [pc, #28]	; (800fd60 <prvInsertTimerInActiveList+0x80>)
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3304      	adds	r3, #4
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	4610      	mov	r0, r2
 800fd4e:	f7fe f93e 	bl	800dfce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd52:	697b      	ldr	r3, [r7, #20]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3718      	adds	r7, #24
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	240010bc 	.word	0x240010bc
 800fd60:	240010b8 	.word	0x240010b8

0800fd64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b08e      	sub	sp, #56	; 0x38
 800fd68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd6a:	e0ca      	b.n	800ff02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	da18      	bge.n	800fda4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fd72:	1d3b      	adds	r3, r7, #4
 800fd74:	3304      	adds	r3, #4
 800fd76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10a      	bne.n	800fd94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	61fb      	str	r3, [r7, #28]
}
 800fd90:	bf00      	nop
 800fd92:	e7fe      	b.n	800fd92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd9a:	6850      	ldr	r0, [r2, #4]
 800fd9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd9e:	6892      	ldr	r2, [r2, #8]
 800fda0:	4611      	mov	r1, r2
 800fda2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f2c0 80aa 	blt.w	800ff00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	695b      	ldr	r3, [r3, #20]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d004      	beq.n	800fdc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	3304      	adds	r3, #4
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fe f93f 	bl	800e040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fdc2:	463b      	mov	r3, r7
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7ff ff6b 	bl	800fca0 <prvSampleTimeNow>
 800fdca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b09      	cmp	r3, #9
 800fdd0:	f200 8097 	bhi.w	800ff02 <prvProcessReceivedCommands+0x19e>
 800fdd4:	a201      	add	r2, pc, #4	; (adr r2, 800fddc <prvProcessReceivedCommands+0x78>)
 800fdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdda:	bf00      	nop
 800fddc:	0800fe05 	.word	0x0800fe05
 800fde0:	0800fe05 	.word	0x0800fe05
 800fde4:	0800fe05 	.word	0x0800fe05
 800fde8:	0800fe79 	.word	0x0800fe79
 800fdec:	0800fe8d 	.word	0x0800fe8d
 800fdf0:	0800fed7 	.word	0x0800fed7
 800fdf4:	0800fe05 	.word	0x0800fe05
 800fdf8:	0800fe05 	.word	0x0800fe05
 800fdfc:	0800fe79 	.word	0x0800fe79
 800fe00:	0800fe8d 	.word	0x0800fe8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe0a:	f043 0301 	orr.w	r3, r3, #1
 800fe0e:	b2da      	uxtb	r2, r3
 800fe10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	699b      	ldr	r3, [r3, #24]
 800fe1c:	18d1      	adds	r1, r2, r3
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe24:	f7ff ff5c 	bl	800fce0 <prvInsertTimerInActiveList>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d069      	beq.n	800ff02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe3c:	f003 0304 	and.w	r3, r3, #4
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d05e      	beq.n	800ff02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe44:	68ba      	ldr	r2, [r7, #8]
 800fe46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	441a      	add	r2, r3
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	2300      	movs	r3, #0
 800fe52:	2100      	movs	r1, #0
 800fe54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe56:	f7ff fe05 	bl	800fa64 <xTimerGenericCommand>
 800fe5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fe5c:	6a3b      	ldr	r3, [r7, #32]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d14f      	bne.n	800ff02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fe62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe66:	f383 8811 	msr	BASEPRI, r3
 800fe6a:	f3bf 8f6f 	isb	sy
 800fe6e:	f3bf 8f4f 	dsb	sy
 800fe72:	61bb      	str	r3, [r7, #24]
}
 800fe74:	bf00      	nop
 800fe76:	e7fe      	b.n	800fe76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe7e:	f023 0301 	bic.w	r3, r3, #1
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe8a:	e03a      	b.n	800ff02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe92:	f043 0301 	orr.w	r3, r3, #1
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea6:	699b      	ldr	r3, [r3, #24]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d10a      	bne.n	800fec2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800feac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb0:	f383 8811 	msr	BASEPRI, r3
 800feb4:	f3bf 8f6f 	isb	sy
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	617b      	str	r3, [r7, #20]
}
 800febe:	bf00      	nop
 800fec0:	e7fe      	b.n	800fec0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec4:	699a      	ldr	r2, [r3, #24]
 800fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec8:	18d1      	adds	r1, r2, r3
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed0:	f7ff ff06 	bl	800fce0 <prvInsertTimerInActiveList>
					break;
 800fed4:	e015      	b.n	800ff02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fedc:	f003 0302 	and.w	r3, r3, #2
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d103      	bne.n	800feec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee6:	f000 fbfb 	bl	80106e0 <vPortFree>
 800feea:	e00a      	b.n	800ff02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fef2:	f023 0301 	bic.w	r3, r3, #1
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fefe:	e000      	b.n	800ff02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ff00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff02:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <prvProcessReceivedCommands+0x1c0>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	1d39      	adds	r1, r7, #4
 800ff08:	2200      	movs	r2, #0
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fe fb60 	bl	800e5d0 <xQueueReceive>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f47f af2a 	bne.w	800fd6c <prvProcessReceivedCommands+0x8>
	}
}
 800ff18:	bf00      	nop
 800ff1a:	bf00      	nop
 800ff1c:	3730      	adds	r7, #48	; 0x30
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	240010c0 	.word	0x240010c0

0800ff28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff2e:	e048      	b.n	800ffc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff30:	4b2d      	ldr	r3, [pc, #180]	; (800ffe8 <prvSwitchTimerLists+0xc0>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff3a:	4b2b      	ldr	r3, [pc, #172]	; (800ffe8 <prvSwitchTimerLists+0xc0>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe f879 	bl	800e040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6a1b      	ldr	r3, [r3, #32]
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff5c:	f003 0304 	and.w	r3, r3, #4
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d02e      	beq.n	800ffc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d90e      	bls.n	800ff94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff82:	4b19      	ldr	r3, [pc, #100]	; (800ffe8 <prvSwitchTimerLists+0xc0>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	3304      	adds	r3, #4
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	4610      	mov	r0, r2
 800ff8e:	f7fe f81e 	bl	800dfce <vListInsert>
 800ff92:	e016      	b.n	800ffc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff94:	2300      	movs	r3, #0
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f7ff fd60 	bl	800fa64 <xTimerGenericCommand>
 800ffa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d10a      	bne.n	800ffc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ffac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb0:	f383 8811 	msr	BASEPRI, r3
 800ffb4:	f3bf 8f6f 	isb	sy
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	603b      	str	r3, [r7, #0]
}
 800ffbe:	bf00      	nop
 800ffc0:	e7fe      	b.n	800ffc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ffc2:	4b09      	ldr	r3, [pc, #36]	; (800ffe8 <prvSwitchTimerLists+0xc0>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1b1      	bne.n	800ff30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ffcc:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <prvSwitchTimerLists+0xc0>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ffd2:	4b06      	ldr	r3, [pc, #24]	; (800ffec <prvSwitchTimerLists+0xc4>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a04      	ldr	r2, [pc, #16]	; (800ffe8 <prvSwitchTimerLists+0xc0>)
 800ffd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ffda:	4a04      	ldr	r2, [pc, #16]	; (800ffec <prvSwitchTimerLists+0xc4>)
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	6013      	str	r3, [r2, #0]
}
 800ffe0:	bf00      	nop
 800ffe2:	3718      	adds	r7, #24
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	240010b8 	.word	0x240010b8
 800ffec:	240010bc 	.word	0x240010bc

0800fff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fff6:	f000 f985 	bl	8010304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fffa:	4b15      	ldr	r3, [pc, #84]	; (8010050 <prvCheckForValidListAndQueue+0x60>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d120      	bne.n	8010044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010002:	4814      	ldr	r0, [pc, #80]	; (8010054 <prvCheckForValidListAndQueue+0x64>)
 8010004:	f7fd ff92 	bl	800df2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010008:	4813      	ldr	r0, [pc, #76]	; (8010058 <prvCheckForValidListAndQueue+0x68>)
 801000a:	f7fd ff8f 	bl	800df2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801000e:	4b13      	ldr	r3, [pc, #76]	; (801005c <prvCheckForValidListAndQueue+0x6c>)
 8010010:	4a10      	ldr	r2, [pc, #64]	; (8010054 <prvCheckForValidListAndQueue+0x64>)
 8010012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010014:	4b12      	ldr	r3, [pc, #72]	; (8010060 <prvCheckForValidListAndQueue+0x70>)
 8010016:	4a10      	ldr	r2, [pc, #64]	; (8010058 <prvCheckForValidListAndQueue+0x68>)
 8010018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801001a:	2300      	movs	r3, #0
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	4b11      	ldr	r3, [pc, #68]	; (8010064 <prvCheckForValidListAndQueue+0x74>)
 8010020:	4a11      	ldr	r2, [pc, #68]	; (8010068 <prvCheckForValidListAndQueue+0x78>)
 8010022:	2110      	movs	r1, #16
 8010024:	200a      	movs	r0, #10
 8010026:	f7fe f89d 	bl	800e164 <xQueueGenericCreateStatic>
 801002a:	4603      	mov	r3, r0
 801002c:	4a08      	ldr	r2, [pc, #32]	; (8010050 <prvCheckForValidListAndQueue+0x60>)
 801002e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010030:	4b07      	ldr	r3, [pc, #28]	; (8010050 <prvCheckForValidListAndQueue+0x60>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d005      	beq.n	8010044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010038:	4b05      	ldr	r3, [pc, #20]	; (8010050 <prvCheckForValidListAndQueue+0x60>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	490b      	ldr	r1, [pc, #44]	; (801006c <prvCheckForValidListAndQueue+0x7c>)
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe fcb6 	bl	800e9b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010044:	f000 f98e 	bl	8010364 <vPortExitCritical>
}
 8010048:	bf00      	nop
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	240010c0 	.word	0x240010c0
 8010054:	24001090 	.word	0x24001090
 8010058:	240010a4 	.word	0x240010a4
 801005c:	240010b8 	.word	0x240010b8
 8010060:	240010bc 	.word	0x240010bc
 8010064:	2400116c 	.word	0x2400116c
 8010068:	240010cc 	.word	0x240010cc
 801006c:	08011584 	.word	0x08011584

08010070 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010070:	b580      	push	{r7, lr}
 8010072:	b08a      	sub	sp, #40	; 0x28
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801007e:	f06f 0301 	mvn.w	r3, #1
 8010082:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010090:	4b06      	ldr	r3, [pc, #24]	; (80100ac <xTimerPendFunctionCallFromISR+0x3c>)
 8010092:	6818      	ldr	r0, [r3, #0]
 8010094:	f107 0114 	add.w	r1, r7, #20
 8010098:	2300      	movs	r3, #0
 801009a:	683a      	ldr	r2, [r7, #0]
 801009c:	f7fe f9fc 	bl	800e498 <xQueueGenericSendFromISR>
 80100a0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80100a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3728      	adds	r7, #40	; 0x28
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	240010c0 	.word	0x240010c0

080100b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100b0:	b480      	push	{r7}
 80100b2:	b085      	sub	sp, #20
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	3b04      	subs	r3, #4
 80100c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80100c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	3b04      	subs	r3, #4
 80100ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	f023 0201 	bic.w	r2, r3, #1
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3b04      	subs	r3, #4
 80100de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80100e0:	4a0c      	ldr	r2, [pc, #48]	; (8010114 <pxPortInitialiseStack+0x64>)
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	3b14      	subs	r3, #20
 80100ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3b04      	subs	r3, #4
 80100f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f06f 0202 	mvn.w	r2, #2
 80100fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	3b20      	subs	r3, #32
 8010104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010106:	68fb      	ldr	r3, [r7, #12]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3714      	adds	r7, #20
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	08010119 	.word	0x08010119

08010118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010122:	4b12      	ldr	r3, [pc, #72]	; (801016c <prvTaskExitError+0x54>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801012a:	d00a      	beq.n	8010142 <prvTaskExitError+0x2a>
	__asm volatile
 801012c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010130:	f383 8811 	msr	BASEPRI, r3
 8010134:	f3bf 8f6f 	isb	sy
 8010138:	f3bf 8f4f 	dsb	sy
 801013c:	60fb      	str	r3, [r7, #12]
}
 801013e:	bf00      	nop
 8010140:	e7fe      	b.n	8010140 <prvTaskExitError+0x28>
	__asm volatile
 8010142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010146:	f383 8811 	msr	BASEPRI, r3
 801014a:	f3bf 8f6f 	isb	sy
 801014e:	f3bf 8f4f 	dsb	sy
 8010152:	60bb      	str	r3, [r7, #8]
}
 8010154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010156:	bf00      	nop
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d0fc      	beq.n	8010158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801015e:	bf00      	nop
 8010160:	bf00      	nop
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	24000010 	.word	0x24000010

08010170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010170:	4b07      	ldr	r3, [pc, #28]	; (8010190 <pxCurrentTCBConst2>)
 8010172:	6819      	ldr	r1, [r3, #0]
 8010174:	6808      	ldr	r0, [r1, #0]
 8010176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017a:	f380 8809 	msr	PSP, r0
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f04f 0000 	mov.w	r0, #0
 8010186:	f380 8811 	msr	BASEPRI, r0
 801018a:	4770      	bx	lr
 801018c:	f3af 8000 	nop.w

08010190 <pxCurrentTCBConst2>:
 8010190:	24000b90 	.word	0x24000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010194:	bf00      	nop
 8010196:	bf00      	nop

08010198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010198:	4808      	ldr	r0, [pc, #32]	; (80101bc <prvPortStartFirstTask+0x24>)
 801019a:	6800      	ldr	r0, [r0, #0]
 801019c:	6800      	ldr	r0, [r0, #0]
 801019e:	f380 8808 	msr	MSP, r0
 80101a2:	f04f 0000 	mov.w	r0, #0
 80101a6:	f380 8814 	msr	CONTROL, r0
 80101aa:	b662      	cpsie	i
 80101ac:	b661      	cpsie	f
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	df00      	svc	0
 80101b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80101ba:	bf00      	nop
 80101bc:	e000ed08 	.word	0xe000ed08

080101c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80101c6:	4b46      	ldr	r3, [pc, #280]	; (80102e0 <xPortStartScheduler+0x120>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a46      	ldr	r2, [pc, #280]	; (80102e4 <xPortStartScheduler+0x124>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d10a      	bne.n	80101e6 <xPortStartScheduler+0x26>
	__asm volatile
 80101d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	613b      	str	r3, [r7, #16]
}
 80101e2:	bf00      	nop
 80101e4:	e7fe      	b.n	80101e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80101e6:	4b3e      	ldr	r3, [pc, #248]	; (80102e0 <xPortStartScheduler+0x120>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a3f      	ldr	r2, [pc, #252]	; (80102e8 <xPortStartScheduler+0x128>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d10a      	bne.n	8010206 <xPortStartScheduler+0x46>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	60fb      	str	r3, [r7, #12]
}
 8010202:	bf00      	nop
 8010204:	e7fe      	b.n	8010204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010206:	4b39      	ldr	r3, [pc, #228]	; (80102ec <xPortStartScheduler+0x12c>)
 8010208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	b2db      	uxtb	r3, r3
 8010210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	22ff      	movs	r2, #255	; 0xff
 8010216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	b2db      	uxtb	r3, r3
 801021e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010220:	78fb      	ldrb	r3, [r7, #3]
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010228:	b2da      	uxtb	r2, r3
 801022a:	4b31      	ldr	r3, [pc, #196]	; (80102f0 <xPortStartScheduler+0x130>)
 801022c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801022e:	4b31      	ldr	r3, [pc, #196]	; (80102f4 <xPortStartScheduler+0x134>)
 8010230:	2207      	movs	r2, #7
 8010232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010234:	e009      	b.n	801024a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010236:	4b2f      	ldr	r3, [pc, #188]	; (80102f4 <xPortStartScheduler+0x134>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3b01      	subs	r3, #1
 801023c:	4a2d      	ldr	r2, [pc, #180]	; (80102f4 <xPortStartScheduler+0x134>)
 801023e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	b2db      	uxtb	r3, r3
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	b2db      	uxtb	r3, r3
 8010248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801024a:	78fb      	ldrb	r3, [r7, #3]
 801024c:	b2db      	uxtb	r3, r3
 801024e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010252:	2b80      	cmp	r3, #128	; 0x80
 8010254:	d0ef      	beq.n	8010236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010256:	4b27      	ldr	r3, [pc, #156]	; (80102f4 <xPortStartScheduler+0x134>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f1c3 0307 	rsb	r3, r3, #7
 801025e:	2b04      	cmp	r3, #4
 8010260:	d00a      	beq.n	8010278 <xPortStartScheduler+0xb8>
	__asm volatile
 8010262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010266:	f383 8811 	msr	BASEPRI, r3
 801026a:	f3bf 8f6f 	isb	sy
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	60bb      	str	r3, [r7, #8]
}
 8010274:	bf00      	nop
 8010276:	e7fe      	b.n	8010276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010278:	4b1e      	ldr	r3, [pc, #120]	; (80102f4 <xPortStartScheduler+0x134>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	021b      	lsls	r3, r3, #8
 801027e:	4a1d      	ldr	r2, [pc, #116]	; (80102f4 <xPortStartScheduler+0x134>)
 8010280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010282:	4b1c      	ldr	r3, [pc, #112]	; (80102f4 <xPortStartScheduler+0x134>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801028a:	4a1a      	ldr	r2, [pc, #104]	; (80102f4 <xPortStartScheduler+0x134>)
 801028c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	b2da      	uxtb	r2, r3
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010296:	4b18      	ldr	r3, [pc, #96]	; (80102f8 <xPortStartScheduler+0x138>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a17      	ldr	r2, [pc, #92]	; (80102f8 <xPortStartScheduler+0x138>)
 801029c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102a2:	4b15      	ldr	r3, [pc, #84]	; (80102f8 <xPortStartScheduler+0x138>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a14      	ldr	r2, [pc, #80]	; (80102f8 <xPortStartScheduler+0x138>)
 80102a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102ae:	f000 f8dd 	bl	801046c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80102b2:	4b12      	ldr	r3, [pc, #72]	; (80102fc <xPortStartScheduler+0x13c>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80102b8:	f000 f8fc 	bl	80104b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102bc:	4b10      	ldr	r3, [pc, #64]	; (8010300 <xPortStartScheduler+0x140>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4a0f      	ldr	r2, [pc, #60]	; (8010300 <xPortStartScheduler+0x140>)
 80102c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102c8:	f7ff ff66 	bl	8010198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80102cc:	f7fe ff80 	bl	800f1d0 <vTaskSwitchContext>
	prvTaskExitError();
 80102d0:	f7ff ff22 	bl	8010118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3718      	adds	r7, #24
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	e000ed00 	.word	0xe000ed00
 80102e4:	410fc271 	.word	0x410fc271
 80102e8:	410fc270 	.word	0x410fc270
 80102ec:	e000e400 	.word	0xe000e400
 80102f0:	240011bc 	.word	0x240011bc
 80102f4:	240011c0 	.word	0x240011c0
 80102f8:	e000ed20 	.word	0xe000ed20
 80102fc:	24000010 	.word	0x24000010
 8010300:	e000ef34 	.word	0xe000ef34

08010304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
	__asm volatile
 801030a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030e:	f383 8811 	msr	BASEPRI, r3
 8010312:	f3bf 8f6f 	isb	sy
 8010316:	f3bf 8f4f 	dsb	sy
 801031a:	607b      	str	r3, [r7, #4]
}
 801031c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801031e:	4b0f      	ldr	r3, [pc, #60]	; (801035c <vPortEnterCritical+0x58>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	4a0d      	ldr	r2, [pc, #52]	; (801035c <vPortEnterCritical+0x58>)
 8010326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010328:	4b0c      	ldr	r3, [pc, #48]	; (801035c <vPortEnterCritical+0x58>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b01      	cmp	r3, #1
 801032e:	d10f      	bne.n	8010350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010330:	4b0b      	ldr	r3, [pc, #44]	; (8010360 <vPortEnterCritical+0x5c>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	b2db      	uxtb	r3, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00a      	beq.n	8010350 <vPortEnterCritical+0x4c>
	__asm volatile
 801033a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033e:	f383 8811 	msr	BASEPRI, r3
 8010342:	f3bf 8f6f 	isb	sy
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	603b      	str	r3, [r7, #0]
}
 801034c:	bf00      	nop
 801034e:	e7fe      	b.n	801034e <vPortEnterCritical+0x4a>
	}
}
 8010350:	bf00      	nop
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr
 801035c:	24000010 	.word	0x24000010
 8010360:	e000ed04 	.word	0xe000ed04

08010364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801036a:	4b12      	ldr	r3, [pc, #72]	; (80103b4 <vPortExitCritical+0x50>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10a      	bne.n	8010388 <vPortExitCritical+0x24>
	__asm volatile
 8010372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010376:	f383 8811 	msr	BASEPRI, r3
 801037a:	f3bf 8f6f 	isb	sy
 801037e:	f3bf 8f4f 	dsb	sy
 8010382:	607b      	str	r3, [r7, #4]
}
 8010384:	bf00      	nop
 8010386:	e7fe      	b.n	8010386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010388:	4b0a      	ldr	r3, [pc, #40]	; (80103b4 <vPortExitCritical+0x50>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3b01      	subs	r3, #1
 801038e:	4a09      	ldr	r2, [pc, #36]	; (80103b4 <vPortExitCritical+0x50>)
 8010390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010392:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <vPortExitCritical+0x50>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d105      	bne.n	80103a6 <vPortExitCritical+0x42>
 801039a:	2300      	movs	r3, #0
 801039c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	f383 8811 	msr	BASEPRI, r3
}
 80103a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80103a6:	bf00      	nop
 80103a8:	370c      	adds	r7, #12
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop
 80103b4:	24000010 	.word	0x24000010
	...

080103c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103c0:	f3ef 8009 	mrs	r0, PSP
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	4b15      	ldr	r3, [pc, #84]	; (8010420 <pxCurrentTCBConst>)
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	f01e 0f10 	tst.w	lr, #16
 80103d0:	bf08      	it	eq
 80103d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103da:	6010      	str	r0, [r2, #0]
 80103dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80103e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80103e4:	f380 8811 	msr	BASEPRI, r0
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	f3bf 8f6f 	isb	sy
 80103f0:	f7fe feee 	bl	800f1d0 <vTaskSwitchContext>
 80103f4:	f04f 0000 	mov.w	r0, #0
 80103f8:	f380 8811 	msr	BASEPRI, r0
 80103fc:	bc09      	pop	{r0, r3}
 80103fe:	6819      	ldr	r1, [r3, #0]
 8010400:	6808      	ldr	r0, [r1, #0]
 8010402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010406:	f01e 0f10 	tst.w	lr, #16
 801040a:	bf08      	it	eq
 801040c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010410:	f380 8809 	msr	PSP, r0
 8010414:	f3bf 8f6f 	isb	sy
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	f3af 8000 	nop.w

08010420 <pxCurrentTCBConst>:
 8010420:	24000b90 	.word	0x24000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010424:	bf00      	nop
 8010426:	bf00      	nop

08010428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010432:	f383 8811 	msr	BASEPRI, r3
 8010436:	f3bf 8f6f 	isb	sy
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	607b      	str	r3, [r7, #4]
}
 8010440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010442:	f7fe fe0b 	bl	800f05c <xTaskIncrementTick>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d003      	beq.n	8010454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801044c:	4b06      	ldr	r3, [pc, #24]	; (8010468 <xPortSysTickHandler+0x40>)
 801044e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010452:	601a      	str	r2, [r3, #0]
 8010454:	2300      	movs	r3, #0
 8010456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	f383 8811 	msr	BASEPRI, r3
}
 801045e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	e000ed04 	.word	0xe000ed04

0801046c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010470:	4b0b      	ldr	r3, [pc, #44]	; (80104a0 <vPortSetupTimerInterrupt+0x34>)
 8010472:	2200      	movs	r2, #0
 8010474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010476:	4b0b      	ldr	r3, [pc, #44]	; (80104a4 <vPortSetupTimerInterrupt+0x38>)
 8010478:	2200      	movs	r2, #0
 801047a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801047c:	4b0a      	ldr	r3, [pc, #40]	; (80104a8 <vPortSetupTimerInterrupt+0x3c>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a0a      	ldr	r2, [pc, #40]	; (80104ac <vPortSetupTimerInterrupt+0x40>)
 8010482:	fba2 2303 	umull	r2, r3, r2, r3
 8010486:	099b      	lsrs	r3, r3, #6
 8010488:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <vPortSetupTimerInterrupt+0x44>)
 801048a:	3b01      	subs	r3, #1
 801048c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801048e:	4b04      	ldr	r3, [pc, #16]	; (80104a0 <vPortSetupTimerInterrupt+0x34>)
 8010490:	2207      	movs	r2, #7
 8010492:	601a      	str	r2, [r3, #0]
}
 8010494:	bf00      	nop
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	e000e010 	.word	0xe000e010
 80104a4:	e000e018 	.word	0xe000e018
 80104a8:	24000000 	.word	0x24000000
 80104ac:	10624dd3 	.word	0x10624dd3
 80104b0:	e000e014 	.word	0xe000e014

080104b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80104b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104c4 <vPortEnableVFP+0x10>
 80104b8:	6801      	ldr	r1, [r0, #0]
 80104ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104be:	6001      	str	r1, [r0, #0]
 80104c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104c2:	bf00      	nop
 80104c4:	e000ed88 	.word	0xe000ed88

080104c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80104ce:	f3ef 8305 	mrs	r3, IPSR
 80104d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2b0f      	cmp	r3, #15
 80104d8:	d914      	bls.n	8010504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104da:	4a17      	ldr	r2, [pc, #92]	; (8010538 <vPortValidateInterruptPriority+0x70>)
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	4413      	add	r3, r2
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80104e4:	4b15      	ldr	r3, [pc, #84]	; (801053c <vPortValidateInterruptPriority+0x74>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	7afa      	ldrb	r2, [r7, #11]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d20a      	bcs.n	8010504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	607b      	str	r3, [r7, #4]
}
 8010500:	bf00      	nop
 8010502:	e7fe      	b.n	8010502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010504:	4b0e      	ldr	r3, [pc, #56]	; (8010540 <vPortValidateInterruptPriority+0x78>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801050c:	4b0d      	ldr	r3, [pc, #52]	; (8010544 <vPortValidateInterruptPriority+0x7c>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	429a      	cmp	r2, r3
 8010512:	d90a      	bls.n	801052a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	603b      	str	r3, [r7, #0]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <vPortValidateInterruptPriority+0x60>
	}
 801052a:	bf00      	nop
 801052c:	3714      	adds	r7, #20
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop
 8010538:	e000e3f0 	.word	0xe000e3f0
 801053c:	240011bc 	.word	0x240011bc
 8010540:	e000ed0c 	.word	0xe000ed0c
 8010544:	240011c0 	.word	0x240011c0

08010548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b08a      	sub	sp, #40	; 0x28
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010550:	2300      	movs	r3, #0
 8010552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010554:	f7fe fcc6 	bl	800eee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010558:	4b5b      	ldr	r3, [pc, #364]	; (80106c8 <pvPortMalloc+0x180>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010560:	f000 f920 	bl	80107a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010564:	4b59      	ldr	r3, [pc, #356]	; (80106cc <pvPortMalloc+0x184>)
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4013      	ands	r3, r2
 801056c:	2b00      	cmp	r3, #0
 801056e:	f040 8093 	bne.w	8010698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d01d      	beq.n	80105b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010578:	2208      	movs	r2, #8
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4413      	add	r3, r2
 801057e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f003 0307 	and.w	r3, r3, #7
 8010586:	2b00      	cmp	r3, #0
 8010588:	d014      	beq.n	80105b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f023 0307 	bic.w	r3, r3, #7
 8010590:	3308      	adds	r3, #8
 8010592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f003 0307 	and.w	r3, r3, #7
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00a      	beq.n	80105b4 <pvPortMalloc+0x6c>
	__asm volatile
 801059e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a2:	f383 8811 	msr	BASEPRI, r3
 80105a6:	f3bf 8f6f 	isb	sy
 80105aa:	f3bf 8f4f 	dsb	sy
 80105ae:	617b      	str	r3, [r7, #20]
}
 80105b0:	bf00      	nop
 80105b2:	e7fe      	b.n	80105b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d06e      	beq.n	8010698 <pvPortMalloc+0x150>
 80105ba:	4b45      	ldr	r3, [pc, #276]	; (80106d0 <pvPortMalloc+0x188>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d869      	bhi.n	8010698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105c4:	4b43      	ldr	r3, [pc, #268]	; (80106d4 <pvPortMalloc+0x18c>)
 80105c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105c8:	4b42      	ldr	r3, [pc, #264]	; (80106d4 <pvPortMalloc+0x18c>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ce:	e004      	b.n	80105da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d903      	bls.n	80105ec <pvPortMalloc+0xa4>
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1f1      	bne.n	80105d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105ec:	4b36      	ldr	r3, [pc, #216]	; (80106c8 <pvPortMalloc+0x180>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d050      	beq.n	8010698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2208      	movs	r2, #8
 80105fc:	4413      	add	r3, r2
 80105fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	6a3b      	ldr	r3, [r7, #32]
 8010606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060a:	685a      	ldr	r2, [r3, #4]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	1ad2      	subs	r2, r2, r3
 8010610:	2308      	movs	r3, #8
 8010612:	005b      	lsls	r3, r3, #1
 8010614:	429a      	cmp	r2, r3
 8010616:	d91f      	bls.n	8010658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	4413      	add	r3, r2
 801061e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	f003 0307 	and.w	r3, r3, #7
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00a      	beq.n	8010640 <pvPortMalloc+0xf8>
	__asm volatile
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	613b      	str	r3, [r7, #16]
}
 801063c:	bf00      	nop
 801063e:	e7fe      	b.n	801063e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	1ad2      	subs	r2, r2, r3
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010652:	69b8      	ldr	r0, [r7, #24]
 8010654:	f000 f908 	bl	8010868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010658:	4b1d      	ldr	r3, [pc, #116]	; (80106d0 <pvPortMalloc+0x188>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	4a1b      	ldr	r2, [pc, #108]	; (80106d0 <pvPortMalloc+0x188>)
 8010664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010666:	4b1a      	ldr	r3, [pc, #104]	; (80106d0 <pvPortMalloc+0x188>)
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	4b1b      	ldr	r3, [pc, #108]	; (80106d8 <pvPortMalloc+0x190>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	429a      	cmp	r2, r3
 8010670:	d203      	bcs.n	801067a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010672:	4b17      	ldr	r3, [pc, #92]	; (80106d0 <pvPortMalloc+0x188>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4a18      	ldr	r2, [pc, #96]	; (80106d8 <pvPortMalloc+0x190>)
 8010678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067c:	685a      	ldr	r2, [r3, #4]
 801067e:	4b13      	ldr	r3, [pc, #76]	; (80106cc <pvPortMalloc+0x184>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	431a      	orrs	r2, r3
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	2200      	movs	r2, #0
 801068c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801068e:	4b13      	ldr	r3, [pc, #76]	; (80106dc <pvPortMalloc+0x194>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3301      	adds	r3, #1
 8010694:	4a11      	ldr	r2, [pc, #68]	; (80106dc <pvPortMalloc+0x194>)
 8010696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010698:	f7fe fc32 	bl	800ef00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	f003 0307 	and.w	r3, r3, #7
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00a      	beq.n	80106bc <pvPortMalloc+0x174>
	__asm volatile
 80106a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	60fb      	str	r3, [r7, #12]
}
 80106b8:	bf00      	nop
 80106ba:	e7fe      	b.n	80106ba <pvPortMalloc+0x172>
	return pvReturn;
 80106bc:	69fb      	ldr	r3, [r7, #28]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3728      	adds	r7, #40	; 0x28
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	24004dcc 	.word	0x24004dcc
 80106cc:	24004de0 	.word	0x24004de0
 80106d0:	24004dd0 	.word	0x24004dd0
 80106d4:	24004dc4 	.word	0x24004dc4
 80106d8:	24004dd4 	.word	0x24004dd4
 80106dc:	24004dd8 	.word	0x24004dd8

080106e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d04d      	beq.n	801078e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106f2:	2308      	movs	r3, #8
 80106f4:	425b      	negs	r3, r3
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	4413      	add	r3, r2
 80106fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	685a      	ldr	r2, [r3, #4]
 8010704:	4b24      	ldr	r3, [pc, #144]	; (8010798 <vPortFree+0xb8>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4013      	ands	r3, r2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10a      	bne.n	8010724 <vPortFree+0x44>
	__asm volatile
 801070e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010712:	f383 8811 	msr	BASEPRI, r3
 8010716:	f3bf 8f6f 	isb	sy
 801071a:	f3bf 8f4f 	dsb	sy
 801071e:	60fb      	str	r3, [r7, #12]
}
 8010720:	bf00      	nop
 8010722:	e7fe      	b.n	8010722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d00a      	beq.n	8010742 <vPortFree+0x62>
	__asm volatile
 801072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010730:	f383 8811 	msr	BASEPRI, r3
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	60bb      	str	r3, [r7, #8]
}
 801073e:	bf00      	nop
 8010740:	e7fe      	b.n	8010740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	4b14      	ldr	r3, [pc, #80]	; (8010798 <vPortFree+0xb8>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4013      	ands	r3, r2
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01e      	beq.n	801078e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d11a      	bne.n	801078e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	685a      	ldr	r2, [r3, #4]
 801075c:	4b0e      	ldr	r3, [pc, #56]	; (8010798 <vPortFree+0xb8>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	43db      	mvns	r3, r3
 8010762:	401a      	ands	r2, r3
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010768:	f7fe fbbc 	bl	800eee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	4b0a      	ldr	r3, [pc, #40]	; (801079c <vPortFree+0xbc>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4413      	add	r3, r2
 8010776:	4a09      	ldr	r2, [pc, #36]	; (801079c <vPortFree+0xbc>)
 8010778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801077a:	6938      	ldr	r0, [r7, #16]
 801077c:	f000 f874 	bl	8010868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010780:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <vPortFree+0xc0>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3301      	adds	r3, #1
 8010786:	4a06      	ldr	r2, [pc, #24]	; (80107a0 <vPortFree+0xc0>)
 8010788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801078a:	f7fe fbb9 	bl	800ef00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801078e:	bf00      	nop
 8010790:	3718      	adds	r7, #24
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	24004de0 	.word	0x24004de0
 801079c:	24004dd0 	.word	0x24004dd0
 80107a0:	24004ddc 	.word	0x24004ddc

080107a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80107a4:	b480      	push	{r7}
 80107a6:	b085      	sub	sp, #20
 80107a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80107ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80107b0:	4b27      	ldr	r3, [pc, #156]	; (8010850 <prvHeapInit+0xac>)
 80107b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f003 0307 	and.w	r3, r3, #7
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00c      	beq.n	80107d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3307      	adds	r3, #7
 80107c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f023 0307 	bic.w	r3, r3, #7
 80107ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107cc:	68ba      	ldr	r2, [r7, #8]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	4a1f      	ldr	r2, [pc, #124]	; (8010850 <prvHeapInit+0xac>)
 80107d4:	4413      	add	r3, r2
 80107d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107dc:	4a1d      	ldr	r2, [pc, #116]	; (8010854 <prvHeapInit+0xb0>)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107e2:	4b1c      	ldr	r3, [pc, #112]	; (8010854 <prvHeapInit+0xb0>)
 80107e4:	2200      	movs	r2, #0
 80107e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	68ba      	ldr	r2, [r7, #8]
 80107ec:	4413      	add	r3, r2
 80107ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107f0:	2208      	movs	r2, #8
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	1a9b      	subs	r3, r3, r2
 80107f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f023 0307 	bic.w	r3, r3, #7
 80107fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	4a15      	ldr	r2, [pc, #84]	; (8010858 <prvHeapInit+0xb4>)
 8010804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010806:	4b14      	ldr	r3, [pc, #80]	; (8010858 <prvHeapInit+0xb4>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2200      	movs	r2, #0
 801080c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801080e:	4b12      	ldr	r3, [pc, #72]	; (8010858 <prvHeapInit+0xb4>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2200      	movs	r2, #0
 8010814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	1ad2      	subs	r2, r2, r3
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010824:	4b0c      	ldr	r3, [pc, #48]	; (8010858 <prvHeapInit+0xb4>)
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	4a0a      	ldr	r2, [pc, #40]	; (801085c <prvHeapInit+0xb8>)
 8010832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	4a09      	ldr	r2, [pc, #36]	; (8010860 <prvHeapInit+0xbc>)
 801083a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801083c:	4b09      	ldr	r3, [pc, #36]	; (8010864 <prvHeapInit+0xc0>)
 801083e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010842:	601a      	str	r2, [r3, #0]
}
 8010844:	bf00      	nop
 8010846:	3714      	adds	r7, #20
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	240011c4 	.word	0x240011c4
 8010854:	24004dc4 	.word	0x24004dc4
 8010858:	24004dcc 	.word	0x24004dcc
 801085c:	24004dd4 	.word	0x24004dd4
 8010860:	24004dd0 	.word	0x24004dd0
 8010864:	24004de0 	.word	0x24004de0

08010868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010870:	4b28      	ldr	r3, [pc, #160]	; (8010914 <prvInsertBlockIntoFreeList+0xac>)
 8010872:	60fb      	str	r3, [r7, #12]
 8010874:	e002      	b.n	801087c <prvInsertBlockIntoFreeList+0x14>
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	60fb      	str	r3, [r7, #12]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	429a      	cmp	r2, r3
 8010884:	d8f7      	bhi.n	8010876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	68ba      	ldr	r2, [r7, #8]
 8010890:	4413      	add	r3, r2
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	429a      	cmp	r2, r3
 8010896:	d108      	bne.n	80108aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	441a      	add	r2, r3
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	441a      	add	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d118      	bne.n	80108f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	4b15      	ldr	r3, [pc, #84]	; (8010918 <prvInsertBlockIntoFreeList+0xb0>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d00d      	beq.n	80108e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	685a      	ldr	r2, [r3, #4]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	441a      	add	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	e008      	b.n	80108f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108e6:	4b0c      	ldr	r3, [pc, #48]	; (8010918 <prvInsertBlockIntoFreeList+0xb0>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	e003      	b.n	80108f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d002      	beq.n	8010906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010906:	bf00      	nop
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	24004dc4 	.word	0x24004dc4
 8010918:	24004dcc 	.word	0x24004dcc

0801091c <__errno>:
 801091c:	4b01      	ldr	r3, [pc, #4]	; (8010924 <__errno+0x8>)
 801091e:	6818      	ldr	r0, [r3, #0]
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	24000014 	.word	0x24000014

08010928 <__libc_init_array>:
 8010928:	b570      	push	{r4, r5, r6, lr}
 801092a:	4d0d      	ldr	r5, [pc, #52]	; (8010960 <__libc_init_array+0x38>)
 801092c:	4c0d      	ldr	r4, [pc, #52]	; (8010964 <__libc_init_array+0x3c>)
 801092e:	1b64      	subs	r4, r4, r5
 8010930:	10a4      	asrs	r4, r4, #2
 8010932:	2600      	movs	r6, #0
 8010934:	42a6      	cmp	r6, r4
 8010936:	d109      	bne.n	801094c <__libc_init_array+0x24>
 8010938:	4d0b      	ldr	r5, [pc, #44]	; (8010968 <__libc_init_array+0x40>)
 801093a:	4c0c      	ldr	r4, [pc, #48]	; (801096c <__libc_init_array+0x44>)
 801093c:	f000 fd2c 	bl	8011398 <_init>
 8010940:	1b64      	subs	r4, r4, r5
 8010942:	10a4      	asrs	r4, r4, #2
 8010944:	2600      	movs	r6, #0
 8010946:	42a6      	cmp	r6, r4
 8010948:	d105      	bne.n	8010956 <__libc_init_array+0x2e>
 801094a:	bd70      	pop	{r4, r5, r6, pc}
 801094c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010950:	4798      	blx	r3
 8010952:	3601      	adds	r6, #1
 8010954:	e7ee      	b.n	8010934 <__libc_init_array+0xc>
 8010956:	f855 3b04 	ldr.w	r3, [r5], #4
 801095a:	4798      	blx	r3
 801095c:	3601      	adds	r6, #1
 801095e:	e7f2      	b.n	8010946 <__libc_init_array+0x1e>
 8010960:	080116c8 	.word	0x080116c8
 8010964:	080116c8 	.word	0x080116c8
 8010968:	080116c8 	.word	0x080116c8
 801096c:	080116cc 	.word	0x080116cc

08010970 <memcpy>:
 8010970:	440a      	add	r2, r1
 8010972:	4291      	cmp	r1, r2
 8010974:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010978:	d100      	bne.n	801097c <memcpy+0xc>
 801097a:	4770      	bx	lr
 801097c:	b510      	push	{r4, lr}
 801097e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010986:	4291      	cmp	r1, r2
 8010988:	d1f9      	bne.n	801097e <memcpy+0xe>
 801098a:	bd10      	pop	{r4, pc}

0801098c <memset>:
 801098c:	4402      	add	r2, r0
 801098e:	4603      	mov	r3, r0
 8010990:	4293      	cmp	r3, r2
 8010992:	d100      	bne.n	8010996 <memset+0xa>
 8010994:	4770      	bx	lr
 8010996:	f803 1b01 	strb.w	r1, [r3], #1
 801099a:	e7f9      	b.n	8010990 <memset+0x4>

0801099c <_puts_r>:
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	460e      	mov	r6, r1
 80109a0:	4605      	mov	r5, r0
 80109a2:	b118      	cbz	r0, 80109ac <_puts_r+0x10>
 80109a4:	6983      	ldr	r3, [r0, #24]
 80109a6:	b90b      	cbnz	r3, 80109ac <_puts_r+0x10>
 80109a8:	f000 fa48 	bl	8010e3c <__sinit>
 80109ac:	69ab      	ldr	r3, [r5, #24]
 80109ae:	68ac      	ldr	r4, [r5, #8]
 80109b0:	b913      	cbnz	r3, 80109b8 <_puts_r+0x1c>
 80109b2:	4628      	mov	r0, r5
 80109b4:	f000 fa42 	bl	8010e3c <__sinit>
 80109b8:	4b2c      	ldr	r3, [pc, #176]	; (8010a6c <_puts_r+0xd0>)
 80109ba:	429c      	cmp	r4, r3
 80109bc:	d120      	bne.n	8010a00 <_puts_r+0x64>
 80109be:	686c      	ldr	r4, [r5, #4]
 80109c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109c2:	07db      	lsls	r3, r3, #31
 80109c4:	d405      	bmi.n	80109d2 <_puts_r+0x36>
 80109c6:	89a3      	ldrh	r3, [r4, #12]
 80109c8:	0598      	lsls	r0, r3, #22
 80109ca:	d402      	bmi.n	80109d2 <_puts_r+0x36>
 80109cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ce:	f000 fad3 	bl	8010f78 <__retarget_lock_acquire_recursive>
 80109d2:	89a3      	ldrh	r3, [r4, #12]
 80109d4:	0719      	lsls	r1, r3, #28
 80109d6:	d51d      	bpl.n	8010a14 <_puts_r+0x78>
 80109d8:	6923      	ldr	r3, [r4, #16]
 80109da:	b1db      	cbz	r3, 8010a14 <_puts_r+0x78>
 80109dc:	3e01      	subs	r6, #1
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80109e4:	3b01      	subs	r3, #1
 80109e6:	60a3      	str	r3, [r4, #8]
 80109e8:	bb39      	cbnz	r1, 8010a3a <_puts_r+0x9e>
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	da38      	bge.n	8010a60 <_puts_r+0xc4>
 80109ee:	4622      	mov	r2, r4
 80109f0:	210a      	movs	r1, #10
 80109f2:	4628      	mov	r0, r5
 80109f4:	f000 f848 	bl	8010a88 <__swbuf_r>
 80109f8:	3001      	adds	r0, #1
 80109fa:	d011      	beq.n	8010a20 <_puts_r+0x84>
 80109fc:	250a      	movs	r5, #10
 80109fe:	e011      	b.n	8010a24 <_puts_r+0x88>
 8010a00:	4b1b      	ldr	r3, [pc, #108]	; (8010a70 <_puts_r+0xd4>)
 8010a02:	429c      	cmp	r4, r3
 8010a04:	d101      	bne.n	8010a0a <_puts_r+0x6e>
 8010a06:	68ac      	ldr	r4, [r5, #8]
 8010a08:	e7da      	b.n	80109c0 <_puts_r+0x24>
 8010a0a:	4b1a      	ldr	r3, [pc, #104]	; (8010a74 <_puts_r+0xd8>)
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	bf08      	it	eq
 8010a10:	68ec      	ldreq	r4, [r5, #12]
 8010a12:	e7d5      	b.n	80109c0 <_puts_r+0x24>
 8010a14:	4621      	mov	r1, r4
 8010a16:	4628      	mov	r0, r5
 8010a18:	f000 f888 	bl	8010b2c <__swsetup_r>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d0dd      	beq.n	80109dc <_puts_r+0x40>
 8010a20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a26:	07da      	lsls	r2, r3, #31
 8010a28:	d405      	bmi.n	8010a36 <_puts_r+0x9a>
 8010a2a:	89a3      	ldrh	r3, [r4, #12]
 8010a2c:	059b      	lsls	r3, r3, #22
 8010a2e:	d402      	bmi.n	8010a36 <_puts_r+0x9a>
 8010a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a32:	f000 faa2 	bl	8010f7a <__retarget_lock_release_recursive>
 8010a36:	4628      	mov	r0, r5
 8010a38:	bd70      	pop	{r4, r5, r6, pc}
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	da04      	bge.n	8010a48 <_puts_r+0xac>
 8010a3e:	69a2      	ldr	r2, [r4, #24]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	dc06      	bgt.n	8010a52 <_puts_r+0xb6>
 8010a44:	290a      	cmp	r1, #10
 8010a46:	d004      	beq.n	8010a52 <_puts_r+0xb6>
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	1c5a      	adds	r2, r3, #1
 8010a4c:	6022      	str	r2, [r4, #0]
 8010a4e:	7019      	strb	r1, [r3, #0]
 8010a50:	e7c5      	b.n	80109de <_puts_r+0x42>
 8010a52:	4622      	mov	r2, r4
 8010a54:	4628      	mov	r0, r5
 8010a56:	f000 f817 	bl	8010a88 <__swbuf_r>
 8010a5a:	3001      	adds	r0, #1
 8010a5c:	d1bf      	bne.n	80109de <_puts_r+0x42>
 8010a5e:	e7df      	b.n	8010a20 <_puts_r+0x84>
 8010a60:	6823      	ldr	r3, [r4, #0]
 8010a62:	250a      	movs	r5, #10
 8010a64:	1c5a      	adds	r2, r3, #1
 8010a66:	6022      	str	r2, [r4, #0]
 8010a68:	701d      	strb	r5, [r3, #0]
 8010a6a:	e7db      	b.n	8010a24 <_puts_r+0x88>
 8010a6c:	08011680 	.word	0x08011680
 8010a70:	080116a0 	.word	0x080116a0
 8010a74:	08011660 	.word	0x08011660

08010a78 <puts>:
 8010a78:	4b02      	ldr	r3, [pc, #8]	; (8010a84 <puts+0xc>)
 8010a7a:	4601      	mov	r1, r0
 8010a7c:	6818      	ldr	r0, [r3, #0]
 8010a7e:	f7ff bf8d 	b.w	801099c <_puts_r>
 8010a82:	bf00      	nop
 8010a84:	24000014 	.word	0x24000014

08010a88 <__swbuf_r>:
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	460e      	mov	r6, r1
 8010a8c:	4614      	mov	r4, r2
 8010a8e:	4605      	mov	r5, r0
 8010a90:	b118      	cbz	r0, 8010a9a <__swbuf_r+0x12>
 8010a92:	6983      	ldr	r3, [r0, #24]
 8010a94:	b90b      	cbnz	r3, 8010a9a <__swbuf_r+0x12>
 8010a96:	f000 f9d1 	bl	8010e3c <__sinit>
 8010a9a:	4b21      	ldr	r3, [pc, #132]	; (8010b20 <__swbuf_r+0x98>)
 8010a9c:	429c      	cmp	r4, r3
 8010a9e:	d12b      	bne.n	8010af8 <__swbuf_r+0x70>
 8010aa0:	686c      	ldr	r4, [r5, #4]
 8010aa2:	69a3      	ldr	r3, [r4, #24]
 8010aa4:	60a3      	str	r3, [r4, #8]
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	071a      	lsls	r2, r3, #28
 8010aaa:	d52f      	bpl.n	8010b0c <__swbuf_r+0x84>
 8010aac:	6923      	ldr	r3, [r4, #16]
 8010aae:	b36b      	cbz	r3, 8010b0c <__swbuf_r+0x84>
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	6820      	ldr	r0, [r4, #0]
 8010ab4:	1ac0      	subs	r0, r0, r3
 8010ab6:	6963      	ldr	r3, [r4, #20]
 8010ab8:	b2f6      	uxtb	r6, r6
 8010aba:	4283      	cmp	r3, r0
 8010abc:	4637      	mov	r7, r6
 8010abe:	dc04      	bgt.n	8010aca <__swbuf_r+0x42>
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f000 f926 	bl	8010d14 <_fflush_r>
 8010ac8:	bb30      	cbnz	r0, 8010b18 <__swbuf_r+0x90>
 8010aca:	68a3      	ldr	r3, [r4, #8]
 8010acc:	3b01      	subs	r3, #1
 8010ace:	60a3      	str	r3, [r4, #8]
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	6022      	str	r2, [r4, #0]
 8010ad6:	701e      	strb	r6, [r3, #0]
 8010ad8:	6963      	ldr	r3, [r4, #20]
 8010ada:	3001      	adds	r0, #1
 8010adc:	4283      	cmp	r3, r0
 8010ade:	d004      	beq.n	8010aea <__swbuf_r+0x62>
 8010ae0:	89a3      	ldrh	r3, [r4, #12]
 8010ae2:	07db      	lsls	r3, r3, #31
 8010ae4:	d506      	bpl.n	8010af4 <__swbuf_r+0x6c>
 8010ae6:	2e0a      	cmp	r6, #10
 8010ae8:	d104      	bne.n	8010af4 <__swbuf_r+0x6c>
 8010aea:	4621      	mov	r1, r4
 8010aec:	4628      	mov	r0, r5
 8010aee:	f000 f911 	bl	8010d14 <_fflush_r>
 8010af2:	b988      	cbnz	r0, 8010b18 <__swbuf_r+0x90>
 8010af4:	4638      	mov	r0, r7
 8010af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010af8:	4b0a      	ldr	r3, [pc, #40]	; (8010b24 <__swbuf_r+0x9c>)
 8010afa:	429c      	cmp	r4, r3
 8010afc:	d101      	bne.n	8010b02 <__swbuf_r+0x7a>
 8010afe:	68ac      	ldr	r4, [r5, #8]
 8010b00:	e7cf      	b.n	8010aa2 <__swbuf_r+0x1a>
 8010b02:	4b09      	ldr	r3, [pc, #36]	; (8010b28 <__swbuf_r+0xa0>)
 8010b04:	429c      	cmp	r4, r3
 8010b06:	bf08      	it	eq
 8010b08:	68ec      	ldreq	r4, [r5, #12]
 8010b0a:	e7ca      	b.n	8010aa2 <__swbuf_r+0x1a>
 8010b0c:	4621      	mov	r1, r4
 8010b0e:	4628      	mov	r0, r5
 8010b10:	f000 f80c 	bl	8010b2c <__swsetup_r>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d0cb      	beq.n	8010ab0 <__swbuf_r+0x28>
 8010b18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010b1c:	e7ea      	b.n	8010af4 <__swbuf_r+0x6c>
 8010b1e:	bf00      	nop
 8010b20:	08011680 	.word	0x08011680
 8010b24:	080116a0 	.word	0x080116a0
 8010b28:	08011660 	.word	0x08011660

08010b2c <__swsetup_r>:
 8010b2c:	4b32      	ldr	r3, [pc, #200]	; (8010bf8 <__swsetup_r+0xcc>)
 8010b2e:	b570      	push	{r4, r5, r6, lr}
 8010b30:	681d      	ldr	r5, [r3, #0]
 8010b32:	4606      	mov	r6, r0
 8010b34:	460c      	mov	r4, r1
 8010b36:	b125      	cbz	r5, 8010b42 <__swsetup_r+0x16>
 8010b38:	69ab      	ldr	r3, [r5, #24]
 8010b3a:	b913      	cbnz	r3, 8010b42 <__swsetup_r+0x16>
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f000 f97d 	bl	8010e3c <__sinit>
 8010b42:	4b2e      	ldr	r3, [pc, #184]	; (8010bfc <__swsetup_r+0xd0>)
 8010b44:	429c      	cmp	r4, r3
 8010b46:	d10f      	bne.n	8010b68 <__swsetup_r+0x3c>
 8010b48:	686c      	ldr	r4, [r5, #4]
 8010b4a:	89a3      	ldrh	r3, [r4, #12]
 8010b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b50:	0719      	lsls	r1, r3, #28
 8010b52:	d42c      	bmi.n	8010bae <__swsetup_r+0x82>
 8010b54:	06dd      	lsls	r5, r3, #27
 8010b56:	d411      	bmi.n	8010b7c <__swsetup_r+0x50>
 8010b58:	2309      	movs	r3, #9
 8010b5a:	6033      	str	r3, [r6, #0]
 8010b5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b60:	81a3      	strh	r3, [r4, #12]
 8010b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b66:	e03e      	b.n	8010be6 <__swsetup_r+0xba>
 8010b68:	4b25      	ldr	r3, [pc, #148]	; (8010c00 <__swsetup_r+0xd4>)
 8010b6a:	429c      	cmp	r4, r3
 8010b6c:	d101      	bne.n	8010b72 <__swsetup_r+0x46>
 8010b6e:	68ac      	ldr	r4, [r5, #8]
 8010b70:	e7eb      	b.n	8010b4a <__swsetup_r+0x1e>
 8010b72:	4b24      	ldr	r3, [pc, #144]	; (8010c04 <__swsetup_r+0xd8>)
 8010b74:	429c      	cmp	r4, r3
 8010b76:	bf08      	it	eq
 8010b78:	68ec      	ldreq	r4, [r5, #12]
 8010b7a:	e7e6      	b.n	8010b4a <__swsetup_r+0x1e>
 8010b7c:	0758      	lsls	r0, r3, #29
 8010b7e:	d512      	bpl.n	8010ba6 <__swsetup_r+0x7a>
 8010b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b82:	b141      	cbz	r1, 8010b96 <__swsetup_r+0x6a>
 8010b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b88:	4299      	cmp	r1, r3
 8010b8a:	d002      	beq.n	8010b92 <__swsetup_r+0x66>
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f000 fa5b 	bl	8011048 <_free_r>
 8010b92:	2300      	movs	r3, #0
 8010b94:	6363      	str	r3, [r4, #52]	; 0x34
 8010b96:	89a3      	ldrh	r3, [r4, #12]
 8010b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b9c:	81a3      	strh	r3, [r4, #12]
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	6063      	str	r3, [r4, #4]
 8010ba2:	6923      	ldr	r3, [r4, #16]
 8010ba4:	6023      	str	r3, [r4, #0]
 8010ba6:	89a3      	ldrh	r3, [r4, #12]
 8010ba8:	f043 0308 	orr.w	r3, r3, #8
 8010bac:	81a3      	strh	r3, [r4, #12]
 8010bae:	6923      	ldr	r3, [r4, #16]
 8010bb0:	b94b      	cbnz	r3, 8010bc6 <__swsetup_r+0x9a>
 8010bb2:	89a3      	ldrh	r3, [r4, #12]
 8010bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bbc:	d003      	beq.n	8010bc6 <__swsetup_r+0x9a>
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f000 fa01 	bl	8010fc8 <__smakebuf_r>
 8010bc6:	89a0      	ldrh	r0, [r4, #12]
 8010bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bcc:	f010 0301 	ands.w	r3, r0, #1
 8010bd0:	d00a      	beq.n	8010be8 <__swsetup_r+0xbc>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	60a3      	str	r3, [r4, #8]
 8010bd6:	6963      	ldr	r3, [r4, #20]
 8010bd8:	425b      	negs	r3, r3
 8010bda:	61a3      	str	r3, [r4, #24]
 8010bdc:	6923      	ldr	r3, [r4, #16]
 8010bde:	b943      	cbnz	r3, 8010bf2 <__swsetup_r+0xc6>
 8010be0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010be4:	d1ba      	bne.n	8010b5c <__swsetup_r+0x30>
 8010be6:	bd70      	pop	{r4, r5, r6, pc}
 8010be8:	0781      	lsls	r1, r0, #30
 8010bea:	bf58      	it	pl
 8010bec:	6963      	ldrpl	r3, [r4, #20]
 8010bee:	60a3      	str	r3, [r4, #8]
 8010bf0:	e7f4      	b.n	8010bdc <__swsetup_r+0xb0>
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e7f7      	b.n	8010be6 <__swsetup_r+0xba>
 8010bf6:	bf00      	nop
 8010bf8:	24000014 	.word	0x24000014
 8010bfc:	08011680 	.word	0x08011680
 8010c00:	080116a0 	.word	0x080116a0
 8010c04:	08011660 	.word	0x08011660

08010c08 <__sflush_r>:
 8010c08:	898a      	ldrh	r2, [r1, #12]
 8010c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c0e:	4605      	mov	r5, r0
 8010c10:	0710      	lsls	r0, r2, #28
 8010c12:	460c      	mov	r4, r1
 8010c14:	d458      	bmi.n	8010cc8 <__sflush_r+0xc0>
 8010c16:	684b      	ldr	r3, [r1, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dc05      	bgt.n	8010c28 <__sflush_r+0x20>
 8010c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dc02      	bgt.n	8010c28 <__sflush_r+0x20>
 8010c22:	2000      	movs	r0, #0
 8010c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c2a:	2e00      	cmp	r6, #0
 8010c2c:	d0f9      	beq.n	8010c22 <__sflush_r+0x1a>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c34:	682f      	ldr	r7, [r5, #0]
 8010c36:	602b      	str	r3, [r5, #0]
 8010c38:	d032      	beq.n	8010ca0 <__sflush_r+0x98>
 8010c3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c3c:	89a3      	ldrh	r3, [r4, #12]
 8010c3e:	075a      	lsls	r2, r3, #29
 8010c40:	d505      	bpl.n	8010c4e <__sflush_r+0x46>
 8010c42:	6863      	ldr	r3, [r4, #4]
 8010c44:	1ac0      	subs	r0, r0, r3
 8010c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c48:	b10b      	cbz	r3, 8010c4e <__sflush_r+0x46>
 8010c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c4c:	1ac0      	subs	r0, r0, r3
 8010c4e:	2300      	movs	r3, #0
 8010c50:	4602      	mov	r2, r0
 8010c52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c54:	6a21      	ldr	r1, [r4, #32]
 8010c56:	4628      	mov	r0, r5
 8010c58:	47b0      	blx	r6
 8010c5a:	1c43      	adds	r3, r0, #1
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	d106      	bne.n	8010c6e <__sflush_r+0x66>
 8010c60:	6829      	ldr	r1, [r5, #0]
 8010c62:	291d      	cmp	r1, #29
 8010c64:	d82c      	bhi.n	8010cc0 <__sflush_r+0xb8>
 8010c66:	4a2a      	ldr	r2, [pc, #168]	; (8010d10 <__sflush_r+0x108>)
 8010c68:	40ca      	lsrs	r2, r1
 8010c6a:	07d6      	lsls	r6, r2, #31
 8010c6c:	d528      	bpl.n	8010cc0 <__sflush_r+0xb8>
 8010c6e:	2200      	movs	r2, #0
 8010c70:	6062      	str	r2, [r4, #4]
 8010c72:	04d9      	lsls	r1, r3, #19
 8010c74:	6922      	ldr	r2, [r4, #16]
 8010c76:	6022      	str	r2, [r4, #0]
 8010c78:	d504      	bpl.n	8010c84 <__sflush_r+0x7c>
 8010c7a:	1c42      	adds	r2, r0, #1
 8010c7c:	d101      	bne.n	8010c82 <__sflush_r+0x7a>
 8010c7e:	682b      	ldr	r3, [r5, #0]
 8010c80:	b903      	cbnz	r3, 8010c84 <__sflush_r+0x7c>
 8010c82:	6560      	str	r0, [r4, #84]	; 0x54
 8010c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c86:	602f      	str	r7, [r5, #0]
 8010c88:	2900      	cmp	r1, #0
 8010c8a:	d0ca      	beq.n	8010c22 <__sflush_r+0x1a>
 8010c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c90:	4299      	cmp	r1, r3
 8010c92:	d002      	beq.n	8010c9a <__sflush_r+0x92>
 8010c94:	4628      	mov	r0, r5
 8010c96:	f000 f9d7 	bl	8011048 <_free_r>
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8010c9e:	e7c1      	b.n	8010c24 <__sflush_r+0x1c>
 8010ca0:	6a21      	ldr	r1, [r4, #32]
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	47b0      	blx	r6
 8010ca8:	1c41      	adds	r1, r0, #1
 8010caa:	d1c7      	bne.n	8010c3c <__sflush_r+0x34>
 8010cac:	682b      	ldr	r3, [r5, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d0c4      	beq.n	8010c3c <__sflush_r+0x34>
 8010cb2:	2b1d      	cmp	r3, #29
 8010cb4:	d001      	beq.n	8010cba <__sflush_r+0xb2>
 8010cb6:	2b16      	cmp	r3, #22
 8010cb8:	d101      	bne.n	8010cbe <__sflush_r+0xb6>
 8010cba:	602f      	str	r7, [r5, #0]
 8010cbc:	e7b1      	b.n	8010c22 <__sflush_r+0x1a>
 8010cbe:	89a3      	ldrh	r3, [r4, #12]
 8010cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cc4:	81a3      	strh	r3, [r4, #12]
 8010cc6:	e7ad      	b.n	8010c24 <__sflush_r+0x1c>
 8010cc8:	690f      	ldr	r7, [r1, #16]
 8010cca:	2f00      	cmp	r7, #0
 8010ccc:	d0a9      	beq.n	8010c22 <__sflush_r+0x1a>
 8010cce:	0793      	lsls	r3, r2, #30
 8010cd0:	680e      	ldr	r6, [r1, #0]
 8010cd2:	bf08      	it	eq
 8010cd4:	694b      	ldreq	r3, [r1, #20]
 8010cd6:	600f      	str	r7, [r1, #0]
 8010cd8:	bf18      	it	ne
 8010cda:	2300      	movne	r3, #0
 8010cdc:	eba6 0807 	sub.w	r8, r6, r7
 8010ce0:	608b      	str	r3, [r1, #8]
 8010ce2:	f1b8 0f00 	cmp.w	r8, #0
 8010ce6:	dd9c      	ble.n	8010c22 <__sflush_r+0x1a>
 8010ce8:	6a21      	ldr	r1, [r4, #32]
 8010cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010cec:	4643      	mov	r3, r8
 8010cee:	463a      	mov	r2, r7
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	47b0      	blx	r6
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	dc06      	bgt.n	8010d06 <__sflush_r+0xfe>
 8010cf8:	89a3      	ldrh	r3, [r4, #12]
 8010cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d04:	e78e      	b.n	8010c24 <__sflush_r+0x1c>
 8010d06:	4407      	add	r7, r0
 8010d08:	eba8 0800 	sub.w	r8, r8, r0
 8010d0c:	e7e9      	b.n	8010ce2 <__sflush_r+0xda>
 8010d0e:	bf00      	nop
 8010d10:	20400001 	.word	0x20400001

08010d14 <_fflush_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	690b      	ldr	r3, [r1, #16]
 8010d18:	4605      	mov	r5, r0
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	b913      	cbnz	r3, 8010d24 <_fflush_r+0x10>
 8010d1e:	2500      	movs	r5, #0
 8010d20:	4628      	mov	r0, r5
 8010d22:	bd38      	pop	{r3, r4, r5, pc}
 8010d24:	b118      	cbz	r0, 8010d2e <_fflush_r+0x1a>
 8010d26:	6983      	ldr	r3, [r0, #24]
 8010d28:	b90b      	cbnz	r3, 8010d2e <_fflush_r+0x1a>
 8010d2a:	f000 f887 	bl	8010e3c <__sinit>
 8010d2e:	4b14      	ldr	r3, [pc, #80]	; (8010d80 <_fflush_r+0x6c>)
 8010d30:	429c      	cmp	r4, r3
 8010d32:	d11b      	bne.n	8010d6c <_fflush_r+0x58>
 8010d34:	686c      	ldr	r4, [r5, #4]
 8010d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d0ef      	beq.n	8010d1e <_fflush_r+0xa>
 8010d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d40:	07d0      	lsls	r0, r2, #31
 8010d42:	d404      	bmi.n	8010d4e <_fflush_r+0x3a>
 8010d44:	0599      	lsls	r1, r3, #22
 8010d46:	d402      	bmi.n	8010d4e <_fflush_r+0x3a>
 8010d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d4a:	f000 f915 	bl	8010f78 <__retarget_lock_acquire_recursive>
 8010d4e:	4628      	mov	r0, r5
 8010d50:	4621      	mov	r1, r4
 8010d52:	f7ff ff59 	bl	8010c08 <__sflush_r>
 8010d56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d58:	07da      	lsls	r2, r3, #31
 8010d5a:	4605      	mov	r5, r0
 8010d5c:	d4e0      	bmi.n	8010d20 <_fflush_r+0xc>
 8010d5e:	89a3      	ldrh	r3, [r4, #12]
 8010d60:	059b      	lsls	r3, r3, #22
 8010d62:	d4dd      	bmi.n	8010d20 <_fflush_r+0xc>
 8010d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d66:	f000 f908 	bl	8010f7a <__retarget_lock_release_recursive>
 8010d6a:	e7d9      	b.n	8010d20 <_fflush_r+0xc>
 8010d6c:	4b05      	ldr	r3, [pc, #20]	; (8010d84 <_fflush_r+0x70>)
 8010d6e:	429c      	cmp	r4, r3
 8010d70:	d101      	bne.n	8010d76 <_fflush_r+0x62>
 8010d72:	68ac      	ldr	r4, [r5, #8]
 8010d74:	e7df      	b.n	8010d36 <_fflush_r+0x22>
 8010d76:	4b04      	ldr	r3, [pc, #16]	; (8010d88 <_fflush_r+0x74>)
 8010d78:	429c      	cmp	r4, r3
 8010d7a:	bf08      	it	eq
 8010d7c:	68ec      	ldreq	r4, [r5, #12]
 8010d7e:	e7da      	b.n	8010d36 <_fflush_r+0x22>
 8010d80:	08011680 	.word	0x08011680
 8010d84:	080116a0 	.word	0x080116a0
 8010d88:	08011660 	.word	0x08011660

08010d8c <std>:
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	b510      	push	{r4, lr}
 8010d90:	4604      	mov	r4, r0
 8010d92:	e9c0 3300 	strd	r3, r3, [r0]
 8010d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d9a:	6083      	str	r3, [r0, #8]
 8010d9c:	8181      	strh	r1, [r0, #12]
 8010d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8010da0:	81c2      	strh	r2, [r0, #14]
 8010da2:	6183      	str	r3, [r0, #24]
 8010da4:	4619      	mov	r1, r3
 8010da6:	2208      	movs	r2, #8
 8010da8:	305c      	adds	r0, #92	; 0x5c
 8010daa:	f7ff fdef 	bl	801098c <memset>
 8010dae:	4b05      	ldr	r3, [pc, #20]	; (8010dc4 <std+0x38>)
 8010db0:	6263      	str	r3, [r4, #36]	; 0x24
 8010db2:	4b05      	ldr	r3, [pc, #20]	; (8010dc8 <std+0x3c>)
 8010db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010db6:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <std+0x40>)
 8010db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010dba:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <std+0x44>)
 8010dbc:	6224      	str	r4, [r4, #32]
 8010dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8010dc0:	bd10      	pop	{r4, pc}
 8010dc2:	bf00      	nop
 8010dc4:	08011229 	.word	0x08011229
 8010dc8:	0801124b 	.word	0x0801124b
 8010dcc:	08011283 	.word	0x08011283
 8010dd0:	080112a7 	.word	0x080112a7

08010dd4 <_cleanup_r>:
 8010dd4:	4901      	ldr	r1, [pc, #4]	; (8010ddc <_cleanup_r+0x8>)
 8010dd6:	f000 b8af 	b.w	8010f38 <_fwalk_reent>
 8010dda:	bf00      	nop
 8010ddc:	08010d15 	.word	0x08010d15

08010de0 <__sfmoreglue>:
 8010de0:	b570      	push	{r4, r5, r6, lr}
 8010de2:	2268      	movs	r2, #104	; 0x68
 8010de4:	1e4d      	subs	r5, r1, #1
 8010de6:	4355      	muls	r5, r2
 8010de8:	460e      	mov	r6, r1
 8010dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010dee:	f000 f997 	bl	8011120 <_malloc_r>
 8010df2:	4604      	mov	r4, r0
 8010df4:	b140      	cbz	r0, 8010e08 <__sfmoreglue+0x28>
 8010df6:	2100      	movs	r1, #0
 8010df8:	e9c0 1600 	strd	r1, r6, [r0]
 8010dfc:	300c      	adds	r0, #12
 8010dfe:	60a0      	str	r0, [r4, #8]
 8010e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e04:	f7ff fdc2 	bl	801098c <memset>
 8010e08:	4620      	mov	r0, r4
 8010e0a:	bd70      	pop	{r4, r5, r6, pc}

08010e0c <__sfp_lock_acquire>:
 8010e0c:	4801      	ldr	r0, [pc, #4]	; (8010e14 <__sfp_lock_acquire+0x8>)
 8010e0e:	f000 b8b3 	b.w	8010f78 <__retarget_lock_acquire_recursive>
 8010e12:	bf00      	nop
 8010e14:	24004de5 	.word	0x24004de5

08010e18 <__sfp_lock_release>:
 8010e18:	4801      	ldr	r0, [pc, #4]	; (8010e20 <__sfp_lock_release+0x8>)
 8010e1a:	f000 b8ae 	b.w	8010f7a <__retarget_lock_release_recursive>
 8010e1e:	bf00      	nop
 8010e20:	24004de5 	.word	0x24004de5

08010e24 <__sinit_lock_acquire>:
 8010e24:	4801      	ldr	r0, [pc, #4]	; (8010e2c <__sinit_lock_acquire+0x8>)
 8010e26:	f000 b8a7 	b.w	8010f78 <__retarget_lock_acquire_recursive>
 8010e2a:	bf00      	nop
 8010e2c:	24004de6 	.word	0x24004de6

08010e30 <__sinit_lock_release>:
 8010e30:	4801      	ldr	r0, [pc, #4]	; (8010e38 <__sinit_lock_release+0x8>)
 8010e32:	f000 b8a2 	b.w	8010f7a <__retarget_lock_release_recursive>
 8010e36:	bf00      	nop
 8010e38:	24004de6 	.word	0x24004de6

08010e3c <__sinit>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	4604      	mov	r4, r0
 8010e40:	f7ff fff0 	bl	8010e24 <__sinit_lock_acquire>
 8010e44:	69a3      	ldr	r3, [r4, #24]
 8010e46:	b11b      	cbz	r3, 8010e50 <__sinit+0x14>
 8010e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e4c:	f7ff bff0 	b.w	8010e30 <__sinit_lock_release>
 8010e50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e54:	6523      	str	r3, [r4, #80]	; 0x50
 8010e56:	4b13      	ldr	r3, [pc, #76]	; (8010ea4 <__sinit+0x68>)
 8010e58:	4a13      	ldr	r2, [pc, #76]	; (8010ea8 <__sinit+0x6c>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e5e:	42a3      	cmp	r3, r4
 8010e60:	bf04      	itt	eq
 8010e62:	2301      	moveq	r3, #1
 8010e64:	61a3      	streq	r3, [r4, #24]
 8010e66:	4620      	mov	r0, r4
 8010e68:	f000 f820 	bl	8010eac <__sfp>
 8010e6c:	6060      	str	r0, [r4, #4]
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f000 f81c 	bl	8010eac <__sfp>
 8010e74:	60a0      	str	r0, [r4, #8]
 8010e76:	4620      	mov	r0, r4
 8010e78:	f000 f818 	bl	8010eac <__sfp>
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	60e0      	str	r0, [r4, #12]
 8010e80:	2104      	movs	r1, #4
 8010e82:	6860      	ldr	r0, [r4, #4]
 8010e84:	f7ff ff82 	bl	8010d8c <std>
 8010e88:	68a0      	ldr	r0, [r4, #8]
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	2109      	movs	r1, #9
 8010e8e:	f7ff ff7d 	bl	8010d8c <std>
 8010e92:	68e0      	ldr	r0, [r4, #12]
 8010e94:	2202      	movs	r2, #2
 8010e96:	2112      	movs	r1, #18
 8010e98:	f7ff ff78 	bl	8010d8c <std>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	61a3      	str	r3, [r4, #24]
 8010ea0:	e7d2      	b.n	8010e48 <__sinit+0xc>
 8010ea2:	bf00      	nop
 8010ea4:	0801165c 	.word	0x0801165c
 8010ea8:	08010dd5 	.word	0x08010dd5

08010eac <__sfp>:
 8010eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eae:	4607      	mov	r7, r0
 8010eb0:	f7ff ffac 	bl	8010e0c <__sfp_lock_acquire>
 8010eb4:	4b1e      	ldr	r3, [pc, #120]	; (8010f30 <__sfp+0x84>)
 8010eb6:	681e      	ldr	r6, [r3, #0]
 8010eb8:	69b3      	ldr	r3, [r6, #24]
 8010eba:	b913      	cbnz	r3, 8010ec2 <__sfp+0x16>
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7ff ffbd 	bl	8010e3c <__sinit>
 8010ec2:	3648      	adds	r6, #72	; 0x48
 8010ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	d503      	bpl.n	8010ed4 <__sfp+0x28>
 8010ecc:	6833      	ldr	r3, [r6, #0]
 8010ece:	b30b      	cbz	r3, 8010f14 <__sfp+0x68>
 8010ed0:	6836      	ldr	r6, [r6, #0]
 8010ed2:	e7f7      	b.n	8010ec4 <__sfp+0x18>
 8010ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ed8:	b9d5      	cbnz	r5, 8010f10 <__sfp+0x64>
 8010eda:	4b16      	ldr	r3, [pc, #88]	; (8010f34 <__sfp+0x88>)
 8010edc:	60e3      	str	r3, [r4, #12]
 8010ede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ee2:	6665      	str	r5, [r4, #100]	; 0x64
 8010ee4:	f000 f847 	bl	8010f76 <__retarget_lock_init_recursive>
 8010ee8:	f7ff ff96 	bl	8010e18 <__sfp_lock_release>
 8010eec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ef4:	6025      	str	r5, [r4, #0]
 8010ef6:	61a5      	str	r5, [r4, #24]
 8010ef8:	2208      	movs	r2, #8
 8010efa:	4629      	mov	r1, r5
 8010efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f00:	f7ff fd44 	bl	801098c <memset>
 8010f04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f10:	3468      	adds	r4, #104	; 0x68
 8010f12:	e7d9      	b.n	8010ec8 <__sfp+0x1c>
 8010f14:	2104      	movs	r1, #4
 8010f16:	4638      	mov	r0, r7
 8010f18:	f7ff ff62 	bl	8010de0 <__sfmoreglue>
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	6030      	str	r0, [r6, #0]
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d1d5      	bne.n	8010ed0 <__sfp+0x24>
 8010f24:	f7ff ff78 	bl	8010e18 <__sfp_lock_release>
 8010f28:	230c      	movs	r3, #12
 8010f2a:	603b      	str	r3, [r7, #0]
 8010f2c:	e7ee      	b.n	8010f0c <__sfp+0x60>
 8010f2e:	bf00      	nop
 8010f30:	0801165c 	.word	0x0801165c
 8010f34:	ffff0001 	.word	0xffff0001

08010f38 <_fwalk_reent>:
 8010f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	4688      	mov	r8, r1
 8010f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f44:	2700      	movs	r7, #0
 8010f46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f4a:	f1b9 0901 	subs.w	r9, r9, #1
 8010f4e:	d505      	bpl.n	8010f5c <_fwalk_reent+0x24>
 8010f50:	6824      	ldr	r4, [r4, #0]
 8010f52:	2c00      	cmp	r4, #0
 8010f54:	d1f7      	bne.n	8010f46 <_fwalk_reent+0xe>
 8010f56:	4638      	mov	r0, r7
 8010f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f5c:	89ab      	ldrh	r3, [r5, #12]
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d907      	bls.n	8010f72 <_fwalk_reent+0x3a>
 8010f62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f66:	3301      	adds	r3, #1
 8010f68:	d003      	beq.n	8010f72 <_fwalk_reent+0x3a>
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	47c0      	blx	r8
 8010f70:	4307      	orrs	r7, r0
 8010f72:	3568      	adds	r5, #104	; 0x68
 8010f74:	e7e9      	b.n	8010f4a <_fwalk_reent+0x12>

08010f76 <__retarget_lock_init_recursive>:
 8010f76:	4770      	bx	lr

08010f78 <__retarget_lock_acquire_recursive>:
 8010f78:	4770      	bx	lr

08010f7a <__retarget_lock_release_recursive>:
 8010f7a:	4770      	bx	lr

08010f7c <__swhatbuf_r>:
 8010f7c:	b570      	push	{r4, r5, r6, lr}
 8010f7e:	460e      	mov	r6, r1
 8010f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f84:	2900      	cmp	r1, #0
 8010f86:	b096      	sub	sp, #88	; 0x58
 8010f88:	4614      	mov	r4, r2
 8010f8a:	461d      	mov	r5, r3
 8010f8c:	da08      	bge.n	8010fa0 <__swhatbuf_r+0x24>
 8010f8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	602a      	str	r2, [r5, #0]
 8010f96:	061a      	lsls	r2, r3, #24
 8010f98:	d410      	bmi.n	8010fbc <__swhatbuf_r+0x40>
 8010f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f9e:	e00e      	b.n	8010fbe <__swhatbuf_r+0x42>
 8010fa0:	466a      	mov	r2, sp
 8010fa2:	f000 f9a7 	bl	80112f4 <_fstat_r>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	dbf1      	blt.n	8010f8e <__swhatbuf_r+0x12>
 8010faa:	9a01      	ldr	r2, [sp, #4]
 8010fac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010fb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010fb4:	425a      	negs	r2, r3
 8010fb6:	415a      	adcs	r2, r3
 8010fb8:	602a      	str	r2, [r5, #0]
 8010fba:	e7ee      	b.n	8010f9a <__swhatbuf_r+0x1e>
 8010fbc:	2340      	movs	r3, #64	; 0x40
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	b016      	add	sp, #88	; 0x58
 8010fc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010fc8 <__smakebuf_r>:
 8010fc8:	898b      	ldrh	r3, [r1, #12]
 8010fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fcc:	079d      	lsls	r5, r3, #30
 8010fce:	4606      	mov	r6, r0
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	d507      	bpl.n	8010fe4 <__smakebuf_r+0x1c>
 8010fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	6123      	str	r3, [r4, #16]
 8010fdc:	2301      	movs	r3, #1
 8010fde:	6163      	str	r3, [r4, #20]
 8010fe0:	b002      	add	sp, #8
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}
 8010fe4:	ab01      	add	r3, sp, #4
 8010fe6:	466a      	mov	r2, sp
 8010fe8:	f7ff ffc8 	bl	8010f7c <__swhatbuf_r>
 8010fec:	9900      	ldr	r1, [sp, #0]
 8010fee:	4605      	mov	r5, r0
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f000 f895 	bl	8011120 <_malloc_r>
 8010ff6:	b948      	cbnz	r0, 801100c <__smakebuf_r+0x44>
 8010ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ffc:	059a      	lsls	r2, r3, #22
 8010ffe:	d4ef      	bmi.n	8010fe0 <__smakebuf_r+0x18>
 8011000:	f023 0303 	bic.w	r3, r3, #3
 8011004:	f043 0302 	orr.w	r3, r3, #2
 8011008:	81a3      	strh	r3, [r4, #12]
 801100a:	e7e3      	b.n	8010fd4 <__smakebuf_r+0xc>
 801100c:	4b0d      	ldr	r3, [pc, #52]	; (8011044 <__smakebuf_r+0x7c>)
 801100e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011010:	89a3      	ldrh	r3, [r4, #12]
 8011012:	6020      	str	r0, [r4, #0]
 8011014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011018:	81a3      	strh	r3, [r4, #12]
 801101a:	9b00      	ldr	r3, [sp, #0]
 801101c:	6163      	str	r3, [r4, #20]
 801101e:	9b01      	ldr	r3, [sp, #4]
 8011020:	6120      	str	r0, [r4, #16]
 8011022:	b15b      	cbz	r3, 801103c <__smakebuf_r+0x74>
 8011024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011028:	4630      	mov	r0, r6
 801102a:	f000 f975 	bl	8011318 <_isatty_r>
 801102e:	b128      	cbz	r0, 801103c <__smakebuf_r+0x74>
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	f023 0303 	bic.w	r3, r3, #3
 8011036:	f043 0301 	orr.w	r3, r3, #1
 801103a:	81a3      	strh	r3, [r4, #12]
 801103c:	89a0      	ldrh	r0, [r4, #12]
 801103e:	4305      	orrs	r5, r0
 8011040:	81a5      	strh	r5, [r4, #12]
 8011042:	e7cd      	b.n	8010fe0 <__smakebuf_r+0x18>
 8011044:	08010dd5 	.word	0x08010dd5

08011048 <_free_r>:
 8011048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801104a:	2900      	cmp	r1, #0
 801104c:	d044      	beq.n	80110d8 <_free_r+0x90>
 801104e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011052:	9001      	str	r0, [sp, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	f1a1 0404 	sub.w	r4, r1, #4
 801105a:	bfb8      	it	lt
 801105c:	18e4      	addlt	r4, r4, r3
 801105e:	f000 f97d 	bl	801135c <__malloc_lock>
 8011062:	4a1e      	ldr	r2, [pc, #120]	; (80110dc <_free_r+0x94>)
 8011064:	9801      	ldr	r0, [sp, #4]
 8011066:	6813      	ldr	r3, [r2, #0]
 8011068:	b933      	cbnz	r3, 8011078 <_free_r+0x30>
 801106a:	6063      	str	r3, [r4, #4]
 801106c:	6014      	str	r4, [r2, #0]
 801106e:	b003      	add	sp, #12
 8011070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011074:	f000 b978 	b.w	8011368 <__malloc_unlock>
 8011078:	42a3      	cmp	r3, r4
 801107a:	d908      	bls.n	801108e <_free_r+0x46>
 801107c:	6825      	ldr	r5, [r4, #0]
 801107e:	1961      	adds	r1, r4, r5
 8011080:	428b      	cmp	r3, r1
 8011082:	bf01      	itttt	eq
 8011084:	6819      	ldreq	r1, [r3, #0]
 8011086:	685b      	ldreq	r3, [r3, #4]
 8011088:	1949      	addeq	r1, r1, r5
 801108a:	6021      	streq	r1, [r4, #0]
 801108c:	e7ed      	b.n	801106a <_free_r+0x22>
 801108e:	461a      	mov	r2, r3
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	b10b      	cbz	r3, 8011098 <_free_r+0x50>
 8011094:	42a3      	cmp	r3, r4
 8011096:	d9fa      	bls.n	801108e <_free_r+0x46>
 8011098:	6811      	ldr	r1, [r2, #0]
 801109a:	1855      	adds	r5, r2, r1
 801109c:	42a5      	cmp	r5, r4
 801109e:	d10b      	bne.n	80110b8 <_free_r+0x70>
 80110a0:	6824      	ldr	r4, [r4, #0]
 80110a2:	4421      	add	r1, r4
 80110a4:	1854      	adds	r4, r2, r1
 80110a6:	42a3      	cmp	r3, r4
 80110a8:	6011      	str	r1, [r2, #0]
 80110aa:	d1e0      	bne.n	801106e <_free_r+0x26>
 80110ac:	681c      	ldr	r4, [r3, #0]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	6053      	str	r3, [r2, #4]
 80110b2:	4421      	add	r1, r4
 80110b4:	6011      	str	r1, [r2, #0]
 80110b6:	e7da      	b.n	801106e <_free_r+0x26>
 80110b8:	d902      	bls.n	80110c0 <_free_r+0x78>
 80110ba:	230c      	movs	r3, #12
 80110bc:	6003      	str	r3, [r0, #0]
 80110be:	e7d6      	b.n	801106e <_free_r+0x26>
 80110c0:	6825      	ldr	r5, [r4, #0]
 80110c2:	1961      	adds	r1, r4, r5
 80110c4:	428b      	cmp	r3, r1
 80110c6:	bf04      	itt	eq
 80110c8:	6819      	ldreq	r1, [r3, #0]
 80110ca:	685b      	ldreq	r3, [r3, #4]
 80110cc:	6063      	str	r3, [r4, #4]
 80110ce:	bf04      	itt	eq
 80110d0:	1949      	addeq	r1, r1, r5
 80110d2:	6021      	streq	r1, [r4, #0]
 80110d4:	6054      	str	r4, [r2, #4]
 80110d6:	e7ca      	b.n	801106e <_free_r+0x26>
 80110d8:	b003      	add	sp, #12
 80110da:	bd30      	pop	{r4, r5, pc}
 80110dc:	24004de8 	.word	0x24004de8

080110e0 <sbrk_aligned>:
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	4e0e      	ldr	r6, [pc, #56]	; (801111c <sbrk_aligned+0x3c>)
 80110e4:	460c      	mov	r4, r1
 80110e6:	6831      	ldr	r1, [r6, #0]
 80110e8:	4605      	mov	r5, r0
 80110ea:	b911      	cbnz	r1, 80110f2 <sbrk_aligned+0x12>
 80110ec:	f000 f88c 	bl	8011208 <_sbrk_r>
 80110f0:	6030      	str	r0, [r6, #0]
 80110f2:	4621      	mov	r1, r4
 80110f4:	4628      	mov	r0, r5
 80110f6:	f000 f887 	bl	8011208 <_sbrk_r>
 80110fa:	1c43      	adds	r3, r0, #1
 80110fc:	d00a      	beq.n	8011114 <sbrk_aligned+0x34>
 80110fe:	1cc4      	adds	r4, r0, #3
 8011100:	f024 0403 	bic.w	r4, r4, #3
 8011104:	42a0      	cmp	r0, r4
 8011106:	d007      	beq.n	8011118 <sbrk_aligned+0x38>
 8011108:	1a21      	subs	r1, r4, r0
 801110a:	4628      	mov	r0, r5
 801110c:	f000 f87c 	bl	8011208 <_sbrk_r>
 8011110:	3001      	adds	r0, #1
 8011112:	d101      	bne.n	8011118 <sbrk_aligned+0x38>
 8011114:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011118:	4620      	mov	r0, r4
 801111a:	bd70      	pop	{r4, r5, r6, pc}
 801111c:	24004dec 	.word	0x24004dec

08011120 <_malloc_r>:
 8011120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011124:	1ccd      	adds	r5, r1, #3
 8011126:	f025 0503 	bic.w	r5, r5, #3
 801112a:	3508      	adds	r5, #8
 801112c:	2d0c      	cmp	r5, #12
 801112e:	bf38      	it	cc
 8011130:	250c      	movcc	r5, #12
 8011132:	2d00      	cmp	r5, #0
 8011134:	4607      	mov	r7, r0
 8011136:	db01      	blt.n	801113c <_malloc_r+0x1c>
 8011138:	42a9      	cmp	r1, r5
 801113a:	d905      	bls.n	8011148 <_malloc_r+0x28>
 801113c:	230c      	movs	r3, #12
 801113e:	603b      	str	r3, [r7, #0]
 8011140:	2600      	movs	r6, #0
 8011142:	4630      	mov	r0, r6
 8011144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011148:	4e2e      	ldr	r6, [pc, #184]	; (8011204 <_malloc_r+0xe4>)
 801114a:	f000 f907 	bl	801135c <__malloc_lock>
 801114e:	6833      	ldr	r3, [r6, #0]
 8011150:	461c      	mov	r4, r3
 8011152:	bb34      	cbnz	r4, 80111a2 <_malloc_r+0x82>
 8011154:	4629      	mov	r1, r5
 8011156:	4638      	mov	r0, r7
 8011158:	f7ff ffc2 	bl	80110e0 <sbrk_aligned>
 801115c:	1c43      	adds	r3, r0, #1
 801115e:	4604      	mov	r4, r0
 8011160:	d14d      	bne.n	80111fe <_malloc_r+0xde>
 8011162:	6834      	ldr	r4, [r6, #0]
 8011164:	4626      	mov	r6, r4
 8011166:	2e00      	cmp	r6, #0
 8011168:	d140      	bne.n	80111ec <_malloc_r+0xcc>
 801116a:	6823      	ldr	r3, [r4, #0]
 801116c:	4631      	mov	r1, r6
 801116e:	4638      	mov	r0, r7
 8011170:	eb04 0803 	add.w	r8, r4, r3
 8011174:	f000 f848 	bl	8011208 <_sbrk_r>
 8011178:	4580      	cmp	r8, r0
 801117a:	d13a      	bne.n	80111f2 <_malloc_r+0xd2>
 801117c:	6821      	ldr	r1, [r4, #0]
 801117e:	3503      	adds	r5, #3
 8011180:	1a6d      	subs	r5, r5, r1
 8011182:	f025 0503 	bic.w	r5, r5, #3
 8011186:	3508      	adds	r5, #8
 8011188:	2d0c      	cmp	r5, #12
 801118a:	bf38      	it	cc
 801118c:	250c      	movcc	r5, #12
 801118e:	4629      	mov	r1, r5
 8011190:	4638      	mov	r0, r7
 8011192:	f7ff ffa5 	bl	80110e0 <sbrk_aligned>
 8011196:	3001      	adds	r0, #1
 8011198:	d02b      	beq.n	80111f2 <_malloc_r+0xd2>
 801119a:	6823      	ldr	r3, [r4, #0]
 801119c:	442b      	add	r3, r5
 801119e:	6023      	str	r3, [r4, #0]
 80111a0:	e00e      	b.n	80111c0 <_malloc_r+0xa0>
 80111a2:	6822      	ldr	r2, [r4, #0]
 80111a4:	1b52      	subs	r2, r2, r5
 80111a6:	d41e      	bmi.n	80111e6 <_malloc_r+0xc6>
 80111a8:	2a0b      	cmp	r2, #11
 80111aa:	d916      	bls.n	80111da <_malloc_r+0xba>
 80111ac:	1961      	adds	r1, r4, r5
 80111ae:	42a3      	cmp	r3, r4
 80111b0:	6025      	str	r5, [r4, #0]
 80111b2:	bf18      	it	ne
 80111b4:	6059      	strne	r1, [r3, #4]
 80111b6:	6863      	ldr	r3, [r4, #4]
 80111b8:	bf08      	it	eq
 80111ba:	6031      	streq	r1, [r6, #0]
 80111bc:	5162      	str	r2, [r4, r5]
 80111be:	604b      	str	r3, [r1, #4]
 80111c0:	4638      	mov	r0, r7
 80111c2:	f104 060b 	add.w	r6, r4, #11
 80111c6:	f000 f8cf 	bl	8011368 <__malloc_unlock>
 80111ca:	f026 0607 	bic.w	r6, r6, #7
 80111ce:	1d23      	adds	r3, r4, #4
 80111d0:	1af2      	subs	r2, r6, r3
 80111d2:	d0b6      	beq.n	8011142 <_malloc_r+0x22>
 80111d4:	1b9b      	subs	r3, r3, r6
 80111d6:	50a3      	str	r3, [r4, r2]
 80111d8:	e7b3      	b.n	8011142 <_malloc_r+0x22>
 80111da:	6862      	ldr	r2, [r4, #4]
 80111dc:	42a3      	cmp	r3, r4
 80111de:	bf0c      	ite	eq
 80111e0:	6032      	streq	r2, [r6, #0]
 80111e2:	605a      	strne	r2, [r3, #4]
 80111e4:	e7ec      	b.n	80111c0 <_malloc_r+0xa0>
 80111e6:	4623      	mov	r3, r4
 80111e8:	6864      	ldr	r4, [r4, #4]
 80111ea:	e7b2      	b.n	8011152 <_malloc_r+0x32>
 80111ec:	4634      	mov	r4, r6
 80111ee:	6876      	ldr	r6, [r6, #4]
 80111f0:	e7b9      	b.n	8011166 <_malloc_r+0x46>
 80111f2:	230c      	movs	r3, #12
 80111f4:	603b      	str	r3, [r7, #0]
 80111f6:	4638      	mov	r0, r7
 80111f8:	f000 f8b6 	bl	8011368 <__malloc_unlock>
 80111fc:	e7a1      	b.n	8011142 <_malloc_r+0x22>
 80111fe:	6025      	str	r5, [r4, #0]
 8011200:	e7de      	b.n	80111c0 <_malloc_r+0xa0>
 8011202:	bf00      	nop
 8011204:	24004de8 	.word	0x24004de8

08011208 <_sbrk_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4d06      	ldr	r5, [pc, #24]	; (8011224 <_sbrk_r+0x1c>)
 801120c:	2300      	movs	r3, #0
 801120e:	4604      	mov	r4, r0
 8011210:	4608      	mov	r0, r1
 8011212:	602b      	str	r3, [r5, #0]
 8011214:	f7f0 fd0c 	bl	8001c30 <_sbrk>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_sbrk_r+0x1a>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_sbrk_r+0x1a>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	24004df0 	.word	0x24004df0

08011228 <__sread>:
 8011228:	b510      	push	{r4, lr}
 801122a:	460c      	mov	r4, r1
 801122c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011230:	f000 f8a0 	bl	8011374 <_read_r>
 8011234:	2800      	cmp	r0, #0
 8011236:	bfab      	itete	ge
 8011238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801123a:	89a3      	ldrhlt	r3, [r4, #12]
 801123c:	181b      	addge	r3, r3, r0
 801123e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011242:	bfac      	ite	ge
 8011244:	6563      	strge	r3, [r4, #84]	; 0x54
 8011246:	81a3      	strhlt	r3, [r4, #12]
 8011248:	bd10      	pop	{r4, pc}

0801124a <__swrite>:
 801124a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801124e:	461f      	mov	r7, r3
 8011250:	898b      	ldrh	r3, [r1, #12]
 8011252:	05db      	lsls	r3, r3, #23
 8011254:	4605      	mov	r5, r0
 8011256:	460c      	mov	r4, r1
 8011258:	4616      	mov	r6, r2
 801125a:	d505      	bpl.n	8011268 <__swrite+0x1e>
 801125c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011260:	2302      	movs	r3, #2
 8011262:	2200      	movs	r2, #0
 8011264:	f000 f868 	bl	8011338 <_lseek_r>
 8011268:	89a3      	ldrh	r3, [r4, #12]
 801126a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801126e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011272:	81a3      	strh	r3, [r4, #12]
 8011274:	4632      	mov	r2, r6
 8011276:	463b      	mov	r3, r7
 8011278:	4628      	mov	r0, r5
 801127a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801127e:	f000 b817 	b.w	80112b0 <_write_r>

08011282 <__sseek>:
 8011282:	b510      	push	{r4, lr}
 8011284:	460c      	mov	r4, r1
 8011286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801128a:	f000 f855 	bl	8011338 <_lseek_r>
 801128e:	1c43      	adds	r3, r0, #1
 8011290:	89a3      	ldrh	r3, [r4, #12]
 8011292:	bf15      	itete	ne
 8011294:	6560      	strne	r0, [r4, #84]	; 0x54
 8011296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801129a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801129e:	81a3      	strheq	r3, [r4, #12]
 80112a0:	bf18      	it	ne
 80112a2:	81a3      	strhne	r3, [r4, #12]
 80112a4:	bd10      	pop	{r4, pc}

080112a6 <__sclose>:
 80112a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112aa:	f000 b813 	b.w	80112d4 <_close_r>
	...

080112b0 <_write_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	4d07      	ldr	r5, [pc, #28]	; (80112d0 <_write_r+0x20>)
 80112b4:	4604      	mov	r4, r0
 80112b6:	4608      	mov	r0, r1
 80112b8:	4611      	mov	r1, r2
 80112ba:	2200      	movs	r2, #0
 80112bc:	602a      	str	r2, [r5, #0]
 80112be:	461a      	mov	r2, r3
 80112c0:	f7f0 fc65 	bl	8001b8e <_write>
 80112c4:	1c43      	adds	r3, r0, #1
 80112c6:	d102      	bne.n	80112ce <_write_r+0x1e>
 80112c8:	682b      	ldr	r3, [r5, #0]
 80112ca:	b103      	cbz	r3, 80112ce <_write_r+0x1e>
 80112cc:	6023      	str	r3, [r4, #0]
 80112ce:	bd38      	pop	{r3, r4, r5, pc}
 80112d0:	24004df0 	.word	0x24004df0

080112d4 <_close_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4d06      	ldr	r5, [pc, #24]	; (80112f0 <_close_r+0x1c>)
 80112d8:	2300      	movs	r3, #0
 80112da:	4604      	mov	r4, r0
 80112dc:	4608      	mov	r0, r1
 80112de:	602b      	str	r3, [r5, #0]
 80112e0:	f7f0 fc71 	bl	8001bc6 <_close>
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d102      	bne.n	80112ee <_close_r+0x1a>
 80112e8:	682b      	ldr	r3, [r5, #0]
 80112ea:	b103      	cbz	r3, 80112ee <_close_r+0x1a>
 80112ec:	6023      	str	r3, [r4, #0]
 80112ee:	bd38      	pop	{r3, r4, r5, pc}
 80112f0:	24004df0 	.word	0x24004df0

080112f4 <_fstat_r>:
 80112f4:	b538      	push	{r3, r4, r5, lr}
 80112f6:	4d07      	ldr	r5, [pc, #28]	; (8011314 <_fstat_r+0x20>)
 80112f8:	2300      	movs	r3, #0
 80112fa:	4604      	mov	r4, r0
 80112fc:	4608      	mov	r0, r1
 80112fe:	4611      	mov	r1, r2
 8011300:	602b      	str	r3, [r5, #0]
 8011302:	f7f0 fc6c 	bl	8001bde <_fstat>
 8011306:	1c43      	adds	r3, r0, #1
 8011308:	d102      	bne.n	8011310 <_fstat_r+0x1c>
 801130a:	682b      	ldr	r3, [r5, #0]
 801130c:	b103      	cbz	r3, 8011310 <_fstat_r+0x1c>
 801130e:	6023      	str	r3, [r4, #0]
 8011310:	bd38      	pop	{r3, r4, r5, pc}
 8011312:	bf00      	nop
 8011314:	24004df0 	.word	0x24004df0

08011318 <_isatty_r>:
 8011318:	b538      	push	{r3, r4, r5, lr}
 801131a:	4d06      	ldr	r5, [pc, #24]	; (8011334 <_isatty_r+0x1c>)
 801131c:	2300      	movs	r3, #0
 801131e:	4604      	mov	r4, r0
 8011320:	4608      	mov	r0, r1
 8011322:	602b      	str	r3, [r5, #0]
 8011324:	f7f0 fc6b 	bl	8001bfe <_isatty>
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	d102      	bne.n	8011332 <_isatty_r+0x1a>
 801132c:	682b      	ldr	r3, [r5, #0]
 801132e:	b103      	cbz	r3, 8011332 <_isatty_r+0x1a>
 8011330:	6023      	str	r3, [r4, #0]
 8011332:	bd38      	pop	{r3, r4, r5, pc}
 8011334:	24004df0 	.word	0x24004df0

08011338 <_lseek_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	4d07      	ldr	r5, [pc, #28]	; (8011358 <_lseek_r+0x20>)
 801133c:	4604      	mov	r4, r0
 801133e:	4608      	mov	r0, r1
 8011340:	4611      	mov	r1, r2
 8011342:	2200      	movs	r2, #0
 8011344:	602a      	str	r2, [r5, #0]
 8011346:	461a      	mov	r2, r3
 8011348:	f7f0 fc64 	bl	8001c14 <_lseek>
 801134c:	1c43      	adds	r3, r0, #1
 801134e:	d102      	bne.n	8011356 <_lseek_r+0x1e>
 8011350:	682b      	ldr	r3, [r5, #0]
 8011352:	b103      	cbz	r3, 8011356 <_lseek_r+0x1e>
 8011354:	6023      	str	r3, [r4, #0]
 8011356:	bd38      	pop	{r3, r4, r5, pc}
 8011358:	24004df0 	.word	0x24004df0

0801135c <__malloc_lock>:
 801135c:	4801      	ldr	r0, [pc, #4]	; (8011364 <__malloc_lock+0x8>)
 801135e:	f7ff be0b 	b.w	8010f78 <__retarget_lock_acquire_recursive>
 8011362:	bf00      	nop
 8011364:	24004de4 	.word	0x24004de4

08011368 <__malloc_unlock>:
 8011368:	4801      	ldr	r0, [pc, #4]	; (8011370 <__malloc_unlock+0x8>)
 801136a:	f7ff be06 	b.w	8010f7a <__retarget_lock_release_recursive>
 801136e:	bf00      	nop
 8011370:	24004de4 	.word	0x24004de4

08011374 <_read_r>:
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4d07      	ldr	r5, [pc, #28]	; (8011394 <_read_r+0x20>)
 8011378:	4604      	mov	r4, r0
 801137a:	4608      	mov	r0, r1
 801137c:	4611      	mov	r1, r2
 801137e:	2200      	movs	r2, #0
 8011380:	602a      	str	r2, [r5, #0]
 8011382:	461a      	mov	r2, r3
 8011384:	f7f0 fbe6 	bl	8001b54 <_read>
 8011388:	1c43      	adds	r3, r0, #1
 801138a:	d102      	bne.n	8011392 <_read_r+0x1e>
 801138c:	682b      	ldr	r3, [r5, #0]
 801138e:	b103      	cbz	r3, 8011392 <_read_r+0x1e>
 8011390:	6023      	str	r3, [r4, #0]
 8011392:	bd38      	pop	{r3, r4, r5, pc}
 8011394:	24004df0 	.word	0x24004df0

08011398 <_init>:
 8011398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139a:	bf00      	nop
 801139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801139e:	bc08      	pop	{r3}
 80113a0:	469e      	mov	lr, r3
 80113a2:	4770      	bx	lr

080113a4 <_fini>:
 80113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a6:	bf00      	nop
 80113a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113aa:	bc08      	pop	{r3}
 80113ac:	469e      	mov	lr, r3
 80113ae:	4770      	bx	lr
